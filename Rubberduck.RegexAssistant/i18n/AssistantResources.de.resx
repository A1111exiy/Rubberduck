<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AtomDescription_CarriageReturn" xml:space="preserve">
    <value>Gleicht gegen das ASCII-Zeichen CR ab</value>
  </data>
  <data name="AtomDescription_CharacterClass" xml:space="preserve">
    <value>Gleicht gegen ein beliebiges der folgenden Zeichen ab: {0}</value>
  </data>
  <data name="AtomDescription_CharacterClass_Inverted" xml:space="preserve">
    <value>Gleicht ein beliebiges Zeichen, das keines der folgenden ist, ab: {0} </value>
  </data>
  <data name="AtomDescription_Digit" xml:space="preserve">
    <value>Gleicht gegen eine beliebige Ziffer ab. Äquivalent zu "[0-9]"</value>
  </data>
  <data name="AtomDescription_Dot" xml:space="preserve">
    <value>Akzeptiert ein beliebiges Zeichen</value>
  </data>
  <data name="AtomDescription_FormFeed" xml:space="preserve">
    <value>Gleicht gegen das "Form-Feed"-Zeichen ab</value>
  </data>
  <data name="AtomDescription_Group" xml:space="preserve">
    <value>Akzeptiert die Gruppierung '{0}'</value>
  </data>
  <data name="AtomDescription_HTab" xml:space="preserve">
    <value>Gleicht gegen das horizontalen "Tab"-Zeichen ab</value>
  </data>
  <data name="AtomDescription_Literal_ActualLiteral" xml:space="preserve">
    <value>Gleicht gegen das Zeichen '{0}' ab</value>
  </data>
  <data name="AtomDescription_Literal_Backreference" xml:space="preserve">
    <value>Akzeptiert genau, was die Gruppe an Index {0} akzeptierte</value>
  </data>
  <data name="AtomDescription_Literal_EscapedLiteral" xml:space="preserve">
    <value>Gleicht gegen die Escapesequenz {0} ab</value>
  </data>
  <data name="AtomDescription_Literal_HexCodepoint" xml:space="preserve">
    <value>Gleicht gegen den Hexadezimalen ASCII-Wert {0} ab</value>
  </data>
  <data name="AtomDescription_Literal_OctalCodepoint" xml:space="preserve">
    <value>Gleicht gegen den Oktalen ASCII-Wert {0} ab</value>
  </data>
  <data name="AtomDescription_Literal_UnicodePoint" xml:space="preserve">
    <value>Gleicht gegen den Unicode Codepoint {0} ab</value>
  </data>
  <data name="AtomDescription_Newline" xml:space="preserve">
    <value>Gleicht gegen das ASCII-Zeichen  LF, bekannt als Zeilenumbruch" ab</value>
  </data>
  <data name="AtomDescription_NonDigit" xml:space="preserve">
    <value>Akzeptiert alles außer Ziffern. Äquivalent zu "[^0-9]"</value>
  </data>
  <data name="AtomDescription_NonWhitespace" xml:space="preserve">
    <value>Akzeptiert alles außer Abstandszeichen. Äquivalent zu "[^\s]"</value>
  </data>
  <data name="AtomDescription_NonWordBoundary" xml:space="preserve">
    <value>Stellt sicher, dass die aktuelle Position keine Wortgrenze ist</value>
  </data>
  <data name="AtomDescription_NonWordCharacter" xml:space="preserve">
    <value>Akzeptiert alles außer "Wortzeichen". Äquivalent zu "[^\w]"</value>
  </data>
  <data name="AtomDescription_VTab" xml:space="preserve">
    <value>Gleicht gegen das vertikale "Tab"-Zeichen ab</value>
  </data>
  <data name="AtomDescription_Whitespace" xml:space="preserve">
    <value>Akzeptiert ein beliebiges Abstandszeichen. Äquivalent zu "[\t\r\n\v\f]"</value>
  </data>
  <data name="AtomDescription_WordBoundary" xml:space="preserve">
    <value>Stellt sicher, dass die aktuelle Position eine Wortgrenze ist</value>
  </data>
  <data name="AtomDescription_WordCharacter" xml:space="preserve">
    <value>Akzeptiert ein beliebiges "Wortzeichen". Äquivalent zu "[a-zA-Z_0-9]"</value>
  </data>
  <data name="ExpressionDescription_AlternativesExpression" xml:space="preserve">
    <value>Akzeptiert eine von {0} Alternativen</value>
  </data>
  <data name="ExpressionDescription_ConcatenatedExpression" xml:space="preserve">
    <value>Akzeptiert exakt die Sequenz</value>
  </data>
  <data name="ExpressionDescription_ErrorExpression" xml:space="preserve">
    <value>Konnte '{0}' nicht als Literal erkennen. Bitte Überprüfen Sie die Eingabe.</value>
  </data>
  <data name="PatternDescription_AnchorEnd" xml:space="preserve">
    <value>$ stellt sicher, dass das Ende der Eingabe erreicht ist</value>
  </data>
  <data name="PatternDescription_AnchorEnd_GlobalEnabled" xml:space="preserve">
    <value>$ stellt sicher, dass das Ende der Zeile oder der Eingabe erreicht ist</value>
  </data>
  <data name="PatternDescription_AnchorStart" xml:space="preserve">
    <value>^ stellt sicher, dass die aktuelle Position am Anfang der Eingabe ist</value>
  </data>
  <data name="PatternDescription_AnchorStart_GlobalEnabled" xml:space="preserve">
    <value>^ stellt sicher, dass die aktuelle Position am Anfang einer Zeile ist</value>
  </data>
  <data name="PatternDescription_IgnoreCase" xml:space="preserve">
    <value>Alle Abgleiche ignorieren Groß-Kleinschreibung von Literalen</value>
  </data>
  <data name="Quantifer_Plus" xml:space="preserve">
    <value>Mindestens ein mal</value>
  </data>
  <data name="Quantifier_Asterisk" xml:space="preserve">
    <value>Beliebig oft</value>
  </data>
  <data name="Quantifier_ClosedRange" xml:space="preserve">
    <value>Zwischen {0} und {1} mal</value>
  </data>
  <data name="Quantifier_Exact" xml:space="preserve">
    <value>Genau {0} mal</value>
  </data>
  <data name="Quantifier_None" xml:space="preserve">
    <value>Genau ein mal</value>
  </data>
  <data name="Quantifier_OpenRange" xml:space="preserve">
    <value>Mindestens {0} mal</value>
  </data>
  <data name="Quantifier_Optional" xml:space="preserve">
    <value>Höchstens ein mal</value>
  </data>
</root>