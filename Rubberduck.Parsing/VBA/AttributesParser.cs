//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Dev\Rubberduck\Rubberduck\Rubberduck.Parsing\VBA\Attributes.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class AttributesParser : Parser {
	public const int
		T__7=1, T__6=2, T__5=3, T__4=4, T__3=5, T__2=6, T__1=7, T__0=8, ACCESS=9, 
		ADDRESSOF=10, ALIAS=11, AND=12, ATTRIBUTE=13, APPACTIVATE=14, APPEND=15, 
		AS=16, BEGIN=17, BEEP=18, BINARY=19, BOOLEAN=20, BYVAL=21, BYREF=22, BYTE=23, 
		CALL=24, CASE=25, CHDIR=26, CHDRIVE=27, CLASS=28, CLOSE=29, COLLECTION=30, 
		CONST=31, DATABASE=32, DATE=33, DECLARE=34, DEFBOOL=35, DEFBYTE=36, DEFDATE=37, 
		DEFDBL=38, DEFDEC=39, DEFCUR=40, DEFINT=41, DEFLNG=42, DEFOBJ=43, DEFSNG=44, 
		DEFSTR=45, DEFVAR=46, DELETESETTING=47, DIM=48, DO=49, DOUBLE=50, EACH=51, 
		ELSE=52, ELSEIF=53, EMPTY=54, END_ENUM=55, END_FUNCTION=56, END_IF=57, 
		END_PROPERTY=58, END_SELECT=59, END_SUB=60, END_TYPE=61, END_WITH=62, 
		END=63, ENUM=64, EQV=65, ERASE=66, ERROR=67, EVENT=68, EXIT_DO=69, EXIT_FOR=70, 
		EXIT_FUNCTION=71, EXIT_PROPERTY=72, EXIT_SUB=73, FALSE=74, FILECOPY=75, 
		FRIEND=76, FOR=77, FUNCTION=78, GET=79, GLOBAL=80, GOSUB=81, GOTO=82, 
		IF=83, IMP=84, IMPLEMENTS=85, IN=86, INPUT=87, IS=88, INTEGER=89, KILL=90, 
		LOAD=91, LOCK=92, LONG=93, LOOP=94, LEN=95, LET=96, LIB=97, LIKE=98, LINE_INPUT=99, 
		LOCK_READ=100, LOCK_WRITE=101, LOCK_READ_WRITE=102, LSET=103, ME=104, 
		MID=105, MKDIR=106, MOD=107, NAME=108, NEXT=109, NEW=110, NOT=111, NOTHING=112, 
		NULL=113, ON=114, ON_ERROR=115, ON_LOCAL_ERROR=116, OPEN=117, OPTIONAL=118, 
		OPTION_BASE=119, OPTION_EXPLICIT=120, OPTION_COMPARE=121, OPTION_PRIVATE_MODULE=122, 
		OR=123, OUTPUT=124, PARAMARRAY=125, PRESERVE=126, PRINT=127, PRIVATE=128, 
		PROPERTY_GET=129, PROPERTY_LET=130, PROPERTY_SET=131, PTRSAFE=132, PUBLIC=133, 
		PUT=134, RANDOM=135, RANDOMIZE=136, RAISEEVENT=137, READ=138, READ_WRITE=139, 
		REDIM=140, REM=141, RESET=142, RESUME=143, RETURN=144, RMDIR=145, RSET=146, 
		SAVEPICTURE=147, SAVESETTING=148, SEEK=149, SELECT=150, SENDKEYS=151, 
		SET=152, SETATTR=153, SHARED=154, SINGLE=155, SPC=156, STATIC=157, STEP=158, 
		STOP=159, STRING=160, SUB=161, TAB=162, TEXT=163, THEN=164, TIME=165, 
		TO=166, TRUE=167, TYPE=168, TYPEOF=169, UNLOAD=170, UNLOCK=171, UNTIL=172, 
		VARIANT=173, VERSION=174, WEND=175, WHILE=176, WIDTH=177, WITH=178, WITHEVENTS=179, 
		WRITE=180, XOR=181, AMPERSAND=182, ASSIGN=183, DIV=184, INTDIV=185, EQ=186, 
		GEQ=187, GT=188, LEQ=189, LPAREN=190, LT=191, MINUS=192, MULT=193, NEQ=194, 
		PLUS=195, POW=196, RPAREN=197, L_SQUARE_BRACKET=198, R_SQUARE_BRACKET=199, 
		STRINGLITERAL=200, OCTLITERAL=201, HEXLITERAL=202, SHORTLITERAL=203, INTEGERLITERAL=204, 
		DOUBLELITERAL=205, GUIDLITERAL=206, DATELITERAL=207, JANUARY=208, FEBRUARY=209, 
		MARCH=210, APRIL=211, MAY=212, JUNE=213, JULY=214, AUGUST=215, SEPTEMBER=216, 
		OCTOBER=217, NOVEMBER=218, DECEMBER=219, JAN=220, FEB=221, MAR=222, APR=223, 
		JUN=224, JUL=225, AUG=226, SEP=227, OCT=228, NOV=229, DEC=230, LINE_CONTINUATION=231, 
		NEWLINE=232, REMCOMMENT=233, COMMENT=234, SINGLEQUOTE=235, COLON=236, 
		UNDERSCORE=237, WS=238, IDENTIFIER=239;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'@'", "'!'", "'#'", "'$'", "'%'", "';'", "','", "'.'", "ACCESS", 
		"ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", "APPEND", "AS", 
		"BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", "CALL", 
		"CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "COLLECTION", "CONST", "DATABASE", 
		"DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFDEC", 
		"DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR", "DEFVAR", 
		"DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", "EMPTY", 
		"END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
		"END_TYPE", "END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", 
		"EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", 
		"FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", 
		"IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", "LOAD", 
		"LOCK", "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", 
		"LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "ME", "MID", "MKDIR", "MOD", 
		"NAME", "NEXT", "NEW", "NOT", "NOTHING", "NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR", 
		"OPEN", "OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", "OPTION_COMPARE", 
		"OPTION_PRIVATE_MODULE", "OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", 
		"PRIVATE", "PROPERTY_GET", "PROPERTY_LET", "PROPERTY_SET", "PTRSAFE", 
		"PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", "READ", "READ_WRITE", 
		"REDIM", "REM", "RESET", "RESUME", "RETURN", "RMDIR", "RSET", "SAVEPICTURE", 
		"SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", "SETATTR", "SHARED", 
		"SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", "SUB", "TAB", "TEXT", 
		"THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", "UNLOAD", "UNLOCK", "UNTIL", 
		"VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS", 
		"WRITE", "XOR", "'&'", "':='", "'/'", "'\\'", "'='", "'>='", "'>'", "'<='", 
		"'('", "'<'", "'-'", "'*'", "'<>'", "'+'", "'^'", "')'", "'['", "']'", 
		"STRINGLITERAL", "OCTLITERAL", "HEXLITERAL", "SHORTLITERAL", "INTEGERLITERAL", 
		"DOUBLELITERAL", "GUIDLITERAL", "DATELITERAL", "JANUARY", "FEBRUARY", 
		"MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", 
		"NOVEMBER", "DECEMBER", "JAN", "FEB", "MAR", "APR", "JUN", "JUL", "AUG", 
		"SEP", "OCT", "NOV", "DEC", "LINE_CONTINUATION", "NEWLINE", "REMCOMMENT", 
		"COMMENT", "'''", "':'", "'_'", "WS", "IDENTIFIER"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleBody = 6, 
		RULE_moduleBodyElement = 7, RULE_attributeStmt = 8, RULE_block = 9, RULE_blockStmt = 10, 
		RULE_functionStmt = 11, RULE_propertyGetStmt = 12, RULE_propertySetStmt = 13, 
		RULE_propertyLetStmt = 14, RULE_subStmt = 15, RULE_midStmt = 16, RULE_valueStmt = 17, 
		RULE_implicitCallStmt_InStmt = 18, RULE_iCS_S_VariableOrProcedureCall = 19, 
		RULE_iCS_S_ProcedureOrArrayCall = 20, RULE_iCS_S_MembersCall = 21, RULE_iCS_S_MemberCall = 22, 
		RULE_iCS_S_DictionaryCall = 23, RULE_argsCall = 24, RULE_argCall = 25, 
		RULE_dictionaryCallStmt = 26, RULE_argList = 27, RULE_arg = 28, RULE_argDefaultValue = 29, 
		RULE_subscripts = 30, RULE_subscript = 31, RULE_ambiguousIdentifier = 32, 
		RULE_typeOfStmt = 33, RULE_asTypeClause = 34, RULE_baseType = 35, RULE_complexType = 36, 
		RULE_fieldLength = 37, RULE_literal = 38, RULE_type = 39, RULE_typeHint = 40, 
		RULE_visibility = 41, RULE_ambiguousKeyword = 42, RULE_remComment = 43, 
		RULE_comment = 44, RULE_endOfLine = 45, RULE_endOfStatement = 46;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleBody", "moduleBodyElement", "attributeStmt", 
		"block", "blockStmt", "functionStmt", "propertyGetStmt", "propertySetStmt", 
		"propertyLetStmt", "subStmt", "midStmt", "valueStmt", "implicitCallStmt_InStmt", 
		"iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_MembersCall", 
		"iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", "argCall", "dictionaryCallStmt", 
		"argList", "arg", "argDefaultValue", "subscripts", "subscript", "ambiguousIdentifier", 
		"typeOfStmt", "asTypeClause", "baseType", "complexType", "fieldLength", 
		"literal", "type", "typeHint", "visibility", "ambiguousKeyword", "remComment", 
		"comment", "endOfLine", "endOfStatement"
	};

	public override string GrammarFileName { get { return "Attributes.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AttributesParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AttributesParser.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; module();
			State = 95; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 97; Match(WS);
				}
				break;
			}
			State = 100; endOfStatement();
			State = 104;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 101; moduleHeader();
				State = 102; endOfStatement();
				}
				break;
			}
			State = 107;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 106; moduleConfig();
				}
				break;
			}
			State = 109; endOfStatement();
			State = 111;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 110; moduleAttributes();
				}
				break;
			}
			State = 113; endOfStatement();
			State = 115;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 114; moduleBody();
				}
				break;
			}
			State = 117; endOfStatement();
			State = 119;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 118; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(AttributesParser.VERSION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(AttributesParser.DOUBLELITERAL, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(AttributesParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(VERSION);
			State = 122; Match(WS);
			State = 123; Match(DOUBLELITERAL);
			State = 125;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 124; Match(WS);
				}
				break;
			}
			State = 128;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 127; Match(CLASS);
				}
				break;
			}
			State = 130; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public ITerminalNode GUIDLITERAL() { return GetToken(AttributesParser.GUIDLITERAL, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(AttributesParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(AttributesParser.END, 0); }
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(BEGIN);
			State = 140;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 133; Match(WS);
				State = 134; Match(GUIDLITERAL);
				State = 135; Match(WS);
				State = 136; ambiguousIdentifier();
				State = 138;
				switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					State = 137; Match(WS);
					}
					break;
				}
				}
				break;
			}
			State = 142; endOfStatement();
			State = 144;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 143; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 146;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 148; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(AttributesParser.EQ, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode SHORTLITERAL() { return GetToken(AttributesParser.SHORTLITERAL, 0); }
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; ambiguousIdentifier();
			State = 154;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 151; Match(WS);
				}
				}
				State = 156;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 157; Match(EQ);
			State = 161;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 158; Match(WS);
				}
				}
				State = 163;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 164; literal();
			State = 167;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 165; Match(COLON);
				State = 166; Match(SHORTLITERAL);
				}
				break;
			}
			State = 169; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 171; attributeStmt();
					State = 172; endOfStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 176;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; moduleBodyElement();
			State = 184;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 179; endOfStatement();
					State = 180; moduleBodyElement();
					}
					} 
				}
				State = 186;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			State = 187; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleBodyElement);
		try {
			State = 194;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189; functionStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190; propertyGetStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191; propertySetStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 192; propertyLetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 193; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public IReadOnlyList<LiteralContext> literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public ITerminalNode ATTRIBUTE() { return GetToken(AttributesParser.ATTRIBUTE, 0); }
		public ITerminalNode EQ() { return GetToken(AttributesParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(ATTRIBUTE);
			State = 197; Match(WS);
			State = 198; implicitCallStmt_InStmt();
			State = 200;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 199; Match(WS);
				}
			}

			State = 202; Match(EQ);
			State = 204;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 203; Match(WS);
				}
			}

			State = 206; literal();
			State = 217;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 208;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 207; Match(WS);
						}
					}

					State = 210; Match(T__1);
					State = 212;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 211; Match(WS);
						}
					}

					State = 214; literal();
					}
					} 
				}
				State = 219;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; blockStmt();
			State = 226;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 221; endOfStatement();
					State = 222; blockStmt();
					}
					} 
				}
				State = 228;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			State = 229; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_blockStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; attributeStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(AttributesParser.FUNCTION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode END_FUNCTION() { return GetToken(AttributesParser.END_FUNCTION, 0); }
		public ITerminalNode STATIC() { return GetToken(AttributesParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 233; visibility();
				State = 234; Match(WS);
				}
			}

			State = 240;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 238; Match(STATIC);
				State = 239; Match(WS);
				}
			}

			State = 242; Match(FUNCTION);
			State = 244;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 243; Match(WS);
				}
			}

			State = 246; ambiguousIdentifier();
			State = 248;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la==AMPERSAND) {
				{
				State = 247; typeHint();
				}
			}

			State = 254;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				State = 251;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 250; Match(WS);
					}
				}

				State = 253; argList();
				}
				break;
			}
			State = 260;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 257;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 256; Match(WS);
					}
				}

				State = 259; asTypeClause();
				}
				break;
			}
			State = 262; endOfStatement();
			State = 264;
			_la = _input.La(1);
			if (_la==ATTRIBUTE) {
				{
				State = 263; block();
				}
			}

			State = 266; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(AttributesParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(AttributesParser.PROPERTY_GET, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(AttributesParser.END_PROPERTY, 0); }
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 268; visibility();
				State = 269; Match(WS);
				}
			}

			State = 275;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 273; Match(STATIC);
				State = 274; Match(WS);
				}
			}

			State = 277; Match(PROPERTY_GET);
			State = 278; Match(WS);
			State = 279; ambiguousIdentifier();
			State = 281;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la==AMPERSAND) {
				{
				State = 280; typeHint();
				}
			}

			State = 287;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 284;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 283; Match(WS);
					}
				}

				State = 286; argList();
				}
				break;
			}
			State = 291;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 289; Match(WS);
				State = 290; asTypeClause();
				}
				break;
			}
			State = 293; endOfStatement();
			State = 295;
			_la = _input.La(1);
			if (_la==ATTRIBUTE) {
				{
				State = 294; block();
				}
			}

			State = 297; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(AttributesParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(AttributesParser.PROPERTY_SET, 0); }
		public ITerminalNode END_PROPERTY() { return GetToken(AttributesParser.END_PROPERTY, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 299; visibility();
				State = 300; Match(WS);
				}
			}

			State = 306;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 304; Match(STATIC);
				State = 305; Match(WS);
				}
			}

			State = 308; Match(PROPERTY_SET);
			State = 309; Match(WS);
			State = 310; ambiguousIdentifier();
			State = 315;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 312;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 311; Match(WS);
					}
				}

				State = 314; argList();
				}
				break;
			}
			State = 317; endOfStatement();
			State = 319;
			_la = _input.La(1);
			if (_la==ATTRIBUTE) {
				{
				State = 318; block();
				}
			}

			State = 321; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(AttributesParser.PROPERTY_LET, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(AttributesParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(AttributesParser.END_PROPERTY, 0); }
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 323; visibility();
				State = 324; Match(WS);
				}
			}

			State = 330;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 328; Match(STATIC);
				State = 329; Match(WS);
				}
			}

			State = 332; Match(PROPERTY_LET);
			State = 333; Match(WS);
			State = 334; ambiguousIdentifier();
			State = 339;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 336;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 335; Match(WS);
					}
				}

				State = 338; argList();
				}
				break;
			}
			State = 341; endOfStatement();
			State = 343;
			_la = _input.La(1);
			if (_la==ATTRIBUTE) {
				{
				State = 342; block();
				}
			}

			State = 345; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(AttributesParser.STATIC, 0); }
		public ITerminalNode END_SUB() { return GetToken(AttributesParser.END_SUB, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode SUB() { return GetToken(AttributesParser.SUB, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 347; visibility();
				State = 348; Match(WS);
				}
			}

			State = 354;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 352; Match(STATIC);
				State = 353; Match(WS);
				}
			}

			State = 356; Match(SUB);
			State = 358;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 357; Match(WS);
				}
			}

			State = 360; ambiguousIdentifier();
			State = 365;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 362;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 361; Match(WS);
					}
				}

				State = 364; argList();
				}
				break;
			}
			State = 367; endOfStatement();
			State = 369;
			_la = _input.La(1);
			if (_la==ATTRIBUTE) {
				{
				State = 368; block();
				}
			}

			State = 371; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(AttributesParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AttributesParser.RPAREN, 0); }
		public ITerminalNode MID() { return GetToken(AttributesParser.MID, 0); }
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(MID);
			State = 375;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 374; Match(WS);
				}
			}

			State = 377; Match(LPAREN);
			State = 379;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 378; Match(WS);
				}
				break;
			}
			State = 381; argsCall();
			State = 383;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 382; Match(WS);
				}
			}

			State = 385; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ITerminalNode ASSIGN() { return GetToken(AttributesParser.ASSIGN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ITerminalNode NOT() { return GetToken(AttributesParser.NOT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AttributesParser.WS, 0); }
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(AttributesParser.LPAREN, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(AttributesParser.RPAREN, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfStmtContext typeOfStmt() {
			return GetRuleContext<TypeOfStmtContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsRelationalContext : ValueStmtContext {
		public ITerminalNode GEQ() { return GetToken(AttributesParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(AttributesParser.NEQ, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(AttributesParser.IS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LEQ() { return GetToken(AttributesParser.LEQ, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode LT() { return GetToken(AttributesParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(AttributesParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(AttributesParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(AttributesParser.LIKE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsRelationalContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsRelational(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsRelational(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode XOR() { return GetToken(AttributesParser.XOR, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode AND() { return GetToken(AttributesParser.AND, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(AttributesParser.POW, 0); }
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode PLUS() { return GetToken(AttributesParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(AttributesParser.MINUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode MOD() { return GetToken(AttributesParser.MOD, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIntDivContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode INTDIV() { return GetToken(AttributesParser.INTDIV, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsIntDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsIntDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsIntDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIntDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode AMPERSAND() { return GetToken(AttributesParser.AMPERSAND, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AttributesParser.WS, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(AttributesParser.ADDRESSOF, 0); }
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AttributesParser.WS, 0); }
		public ITerminalNode NEW() { return GetToken(AttributesParser.NEW, 0); }
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode OR() { return GetToken(AttributesParser.OR, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MULT() { return GetToken(AttributesParser.MULT, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(AttributesParser.DIV, 0); }
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode EQV() { return GetToken(AttributesParser.EQV, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AttributesParser.WS, 0); }
		public ITerminalNode MINUS() { return GetToken(AttributesParser.MINUS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode IMP() { return GetToken(AttributesParser.IMP, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 388; Match(NEW);
				State = 390;
				switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					State = 389; Match(WS);
					}
					break;
				}
				State = 392; valueStmt(19);
				}
				break;

			case 2:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 393; Match(ADDRESSOF);
				State = 395;
				switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					State = 394; Match(WS);
					}
					break;
				}
				State = 397; valueStmt(16);
				}
				break;

			case 3:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 398; implicitCallStmt_InStmt();
				State = 400;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 399; Match(WS);
					}
				}

				State = 402; Match(ASSIGN);
				State = 404;
				switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					State = 403; Match(WS);
					}
					break;
				}
				State = 406; valueStmt(15);
				}
				break;

			case 4:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 408; Match(MINUS);
				State = 410;
				switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
				case 1:
					{
					State = 409; Match(WS);
					}
					break;
				}
				State = 412; valueStmt(13);
				}
				break;

			case 5:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 413; Match(NOT);
				State = 415;
				switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					State = 414; Match(WS);
					}
					break;
				}
				State = 417; valueStmt(6);
				}
				break;

			case 6:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 418; literal();
				}
				break;

			case 7:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 419; implicitCallStmt_InStmt();
				}
				break;

			case 8:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 420; Match(LPAREN);
				State = 422;
				switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					State = 421; Match(WS);
					}
					break;
				}
				State = 424; valueStmt(0);
				State = 435;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__1 || _la==WS) {
					{
					{
					State = 426;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 425; Match(WS);
						}
					}

					State = 428; Match(T__1);
					State = 430;
					switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
					case 1:
						{
						State = 429; Match(WS);
						}
						break;
					}
					State = 432; valueStmt(0);
					}
					}
					State = 437;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 438; Match(RPAREN);
				}
				break;

			case 9:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 440; typeOfStmt();
				}
				break;

			case 10:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 441; midStmt();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 554;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,94,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 552;
					switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
					case 1:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 444;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 446;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 445; Match(WS);
							}
						}

						State = 448; Match(POW);
						State = 450;
						switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
						case 1:
							{
							State = 449; Match(WS);
							}
							break;
						}
						State = 452; valueStmt(15);
						}
						break;

					case 2:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 453;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 455;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 454; Match(WS);
							}
						}

						State = 457;
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 459;
						switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
						case 1:
							{
							State = 458; Match(WS);
							}
							break;
						}
						State = 461; valueStmt(13);
						}
						break;

					case 3:
						{
						_localctx = new VsIntDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 462;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 464;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 463; Match(WS);
							}
						}

						State = 466; Match(INTDIV);
						State = 468;
						switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
						case 1:
							{
							State = 467; Match(WS);
							}
							break;
						}
						State = 470; valueStmt(12);
						}
						break;

					case 4:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 471;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 473;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 472; Match(WS);
							}
						}

						State = 475; Match(MOD);
						State = 477;
						switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
						case 1:
							{
							State = 476; Match(WS);
							}
							break;
						}
						State = 479; valueStmt(11);
						}
						break;

					case 5:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 480;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 482;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 481; Match(WS);
							}
						}

						State = 484;
						_la = _input.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 486;
						switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
						case 1:
							{
							State = 485; Match(WS);
							}
							break;
						}
						State = 488; valueStmt(10);
						}
						break;

					case 6:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 489;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 491;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 490; Match(WS);
							}
						}

						State = 493; Match(AMPERSAND);
						State = 495;
						switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
						case 1:
							{
							State = 494; Match(WS);
							}
							break;
						}
						State = 497; valueStmt(9);
						}
						break;

					case 7:
						{
						_localctx = new VsRelationalContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 498;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 500;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 499; Match(WS);
							}
						}

						State = 502;
						_la = _input.La(1);
						if ( !(_la==IS || _la==LIKE || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (EQ - 186)) | (1L << (GEQ - 186)) | (1L << (GT - 186)) | (1L << (LEQ - 186)) | (1L << (LT - 186)) | (1L << (NEQ - 186)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 504;
						switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
						case 1:
							{
							State = 503; Match(WS);
							}
							break;
						}
						State = 506; valueStmt(8);
						}
						break;

					case 8:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 507;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 509;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 508; Match(WS);
							}
						}

						State = 511; Match(AND);
						State = 513;
						switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
						case 1:
							{
							State = 512; Match(WS);
							}
							break;
						}
						State = 515; valueStmt(6);
						}
						break;

					case 9:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 516;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 518;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 517; Match(WS);
							}
						}

						State = 520; Match(OR);
						State = 522;
						switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
						case 1:
							{
							State = 521; Match(WS);
							}
							break;
						}
						State = 524; valueStmt(5);
						}
						break;

					case 10:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 525;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 527;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 526; Match(WS);
							}
						}

						State = 529; Match(XOR);
						State = 531;
						switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
						case 1:
							{
							State = 530; Match(WS);
							}
							break;
						}
						State = 533; valueStmt(4);
						}
						break;

					case 11:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 534;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 536;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 535; Match(WS);
							}
						}

						State = 538; Match(EQV);
						State = 540;
						switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
						case 1:
							{
							State = 539; Match(WS);
							}
							break;
						}
						State = 542; valueStmt(3);
						}
						break;

					case 12:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 543;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 545;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 544; Match(WS);
							}
						}

						State = 547; Match(IMP);
						State = 549;
						switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
						case 1:
							{
							State = 548; Match(WS);
							}
							break;
						}
						State = 551; valueStmt(2);
						}
						break;
					}
					} 
				}
				State = 556;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,94,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_implicitCallStmt_InStmt);
		try {
			State = 561;
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 558; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 559; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 560; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(AttributesParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(AttributesParser.LPAREN); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(AttributesParser.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(AttributesParser.LPAREN, i);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_iCS_S_VariableOrProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 563; ambiguousIdentifier();
			State = 565;
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				State = 564; typeHint();
				}
				break;
			}
			State = 571;
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 568;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 567; Match(WS);
					}
				}

				State = 570; dictionaryCallStmt();
				}
				break;
			}
			State = 582;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,100,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 574;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 573; Match(WS);
						}
					}

					State = 576; Match(LPAREN);
					State = 577; subscripts();
					State = 578; Match(RPAREN);
					}
					} 
				}
				State = 584;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,100,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(AttributesParser.RPAREN); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(AttributesParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(AttributesParser.LPAREN); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(AttributesParser.LPAREN, i);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				State = 585; ambiguousIdentifier();
				}
				break;

			case 2:
				{
				State = 586; baseType();
				}
				break;
			}
			State = 590;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la==AMPERSAND) {
				{
				State = 589; typeHint();
				}
			}

			State = 593;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 592; Match(WS);
				}
			}

			State = 595; Match(LPAREN);
			State = 597;
			switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				State = 596; Match(WS);
				}
				break;
			}
			State = 603;
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				State = 599; argsCall();
				State = 601;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 600; Match(WS);
					}
				}

				}
				break;
			}
			State = 605; Match(RPAREN);
			State = 610;
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				State = 607;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 606; Match(WS);
					}
				}

				State = 609; dictionaryCallStmt();
				}
				break;
			}
			State = 621;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,110,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 613;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 612; Match(WS);
						}
					}

					State = 615; Match(LPAREN);
					State = 616; subscripts();
					State = 617; Match(RPAREN);
					}
					} 
				}
				State = 623;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,110,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(AttributesParser.RPAREN); }
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(AttributesParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(AttributesParser.LPAREN); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(AttributesParser.LPAREN, i);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_iCS_S_MembersCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				State = 624; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 625; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 632;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 628; iCS_S_MemberCall();
					State = 630;
					switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
					case 1:
						{
						State = 629; Match(WS);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 634;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,113,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 640;
			switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				State = 637;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 636; Match(WS);
					}
				}

				State = 639; dictionaryCallStmt();
				}
				break;
			}
			State = 651;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,117,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 643;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 642; Match(WS);
						}
					}

					State = 645; Match(LPAREN);
					State = 646; subscripts();
					State = 647; Match(RPAREN);
					}
					} 
				}
				State = 653;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,117,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(AttributesParser.WS, 0); }
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_iCS_S_MemberCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			_la = _input.La(1);
			if ( !(_la==T__6 || _la==T__0) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 656;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 655; Match(WS);
				}
			}

			State = 660;
			switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
			case 1:
				{
				State = 658; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 659; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(AttributesParser.WS, 0); }
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_iCS_S_DictionaryCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 662; Match(WS);
				}
			}

			State = 665; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ArgCallContext> argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,124,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 668;
					switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
					case 1:
						{
						State = 667; argCall();
						}
						break;
					}
					State = 671;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 670; Match(WS);
						}
					}

					State = 673;
					_la = _input.La(1);
					if ( !(_la==T__2 || _la==T__1) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 675;
					switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
					case 1:
						{
						State = 674; Match(WS);
						}
						break;
					}
					}
					} 
				}
				State = 681;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,124,_ctx);
			}
			State = 682; argCall();
			State = 695;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,128,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 684;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 683; Match(WS);
						}
					}

					State = 686;
					_la = _input.La(1);
					if ( !(_la==T__2 || _la==T__1) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 688;
					switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
					case 1:
						{
						State = 687; Match(WS);
						}
						break;
					}
					State = 691;
					switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
					case 1:
						{
						State = 690; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 697;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,128,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ITerminalNode BYREF() { return GetToken(AttributesParser.BYREF, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(AttributesParser.LPAREN, 0); }
		public ITerminalNode WS() { return GetToken(AttributesParser.WS, 0); }
		public ITerminalNode RPAREN() { return GetToken(AttributesParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(AttributesParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(AttributesParser.BYVAL, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			switch ( Interpreter.AdaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				State = 698; Match(LPAREN);
				}
				break;
			}
			State = 703;
			switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				State = 701;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 702; Match(WS);
				}
				break;
			}
			State = 706;
			_la = _input.La(1);
			if (_la==RPAREN) {
				{
				State = 705; Match(RPAREN);
				}
			}

			State = 708; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AttributesParser.WS, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_dictionaryCallStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710; Match(T__6);
			State = 712;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 711; Match(WS);
				}
			}

			State = 714; ambiguousIdentifier();
			State = 716;
			switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				State = 715; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(AttributesParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(AttributesParser.RPAREN, 0); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 718; Match(LPAREN);
			State = 736;
			switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				State = 720;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 719; Match(WS);
					}
				}

				State = 722; arg();
				State = 733;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,137,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 724;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 723; Match(WS);
							}
						}

						State = 726; Match(T__1);
						State = 728;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 727; Match(WS);
							}
						}

						State = 730; arg();
						}
						} 
					}
					State = 735;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,137,_ctx);
				}
				}
				break;
			}
			State = 739;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 738; Match(WS);
				}
			}

			State = 741; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(AttributesParser.BYREF, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode LPAREN() { return GetToken(AttributesParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(AttributesParser.OPTIONAL, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AttributesParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(AttributesParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(AttributesParser.BYVAL, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				State = 743; Match(OPTIONAL);
				State = 744; Match(WS);
				}
				break;
			}
			State = 749;
			switch ( Interpreter.AdaptivePredict(_input,141,_ctx) ) {
			case 1:
				{
				State = 747;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 748; Match(WS);
				}
				break;
			}
			State = 753;
			switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				State = 751; Match(PARAMARRAY);
				State = 752; Match(WS);
				}
				break;
			}
			State = 755; ambiguousIdentifier();
			State = 757;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la==AMPERSAND) {
				{
				State = 756; typeHint();
				}
			}

			State = 767;
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				State = 760;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 759; Match(WS);
					}
				}

				State = 762; Match(LPAREN);
				State = 764;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 763; Match(WS);
					}
				}

				State = 766; Match(RPAREN);
				}
				break;
			}
			State = 773;
			switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				State = 770;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 769; Match(WS);
					}
				}

				State = 772; asTypeClause();
				}
				break;
			}
			State = 779;
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				State = 776;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 775; Match(WS);
					}
				}

				State = 778; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AttributesParser.WS, 0); }
		public ITerminalNode EQ() { return GetToken(AttributesParser.EQ, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_argDefaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781; Match(EQ);
			State = 783;
			switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				State = 782; Match(WS);
				}
				break;
			}
			State = 785; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_subscripts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787; subscript();
			State = 798;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1 || _la==WS) {
				{
				{
				State = 789;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 788; Match(WS);
					}
				}

				State = 791; Match(T__1);
				State = 793;
				switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
				case 1:
					{
					State = 792; Match(WS);
					}
					break;
				}
				State = 795; subscript();
				}
				}
				State = 800;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode TO() { return GetToken(AttributesParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				State = 801; valueStmt(0);
				State = 802; Match(WS);
				State = 803; Match(TO);
				State = 804; Match(WS);
				}
				break;
			}
			State = 808; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousIdentifierContext : ParserRuleContext {
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(AttributesParser.IDENTIFIER, i);
		}
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(AttributesParser.IDENTIFIER); }
		public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousIdentifierContext ambiguousIdentifier() {
		AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_ambiguousIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 812;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 812;
					switch (_input.La(1)) {
					case IDENTIFIER:
						{
						State = 810; Match(IDENTIFIER);
						}
						break;
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATABASE:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 811; ambiguousKeyword();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 814;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,157,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(AttributesParser.IS, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TYPEOF() { return GetToken(AttributesParser.TYPEOF, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterTypeOfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitTypeOfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfStmtContext typeOfStmt() {
		TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_typeOfStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; Match(TYPEOF);
			State = 817; Match(WS);
			State = 818; valueStmt(0);
			State = 823;
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				State = 819; Match(WS);
				State = 820; Match(IS);
				State = 821; Match(WS);
				State = 822; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(AttributesParser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode AS() { return GetToken(AttributesParser.AS, 0); }
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_asTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825; Match(AS);
			State = 827;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 826; Match(WS);
				}
			}

			State = 831;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				State = 829; Match(NEW);
				State = 830; Match(WS);
				}
				break;
			}
			State = 833; type();
			State = 838;
			switch ( Interpreter.AdaptivePredict(_input,162,_ctx) ) {
			case 1:
				{
				State = 835;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 834; Match(WS);
					}
				}

				State = 837; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode COLLECTION() { return GetToken(AttributesParser.COLLECTION, 0); }
		public ITerminalNode INTEGER() { return GetToken(AttributesParser.INTEGER, 0); }
		public ITerminalNode LONG() { return GetToken(AttributesParser.LONG, 0); }
		public ITerminalNode VARIANT() { return GetToken(AttributesParser.VARIANT, 0); }
		public ITerminalNode BYTE() { return GetToken(AttributesParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(AttributesParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(AttributesParser.BOOLEAN, 0); }
		public ITerminalNode DATE() { return GetToken(AttributesParser.DATE, 0); }
		public ITerminalNode DOUBLE() { return GetToken(AttributesParser.DOUBLE, 0); }
		public ITerminalNode SINGLE() { return GetToken(AttributesParser.SINGLE, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || _la==INTEGER || _la==LONG || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (SINGLE - 155)) | (1L << (STRING - 155)) | (1L << (VARIANT - 155)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_complexType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 842; ambiguousIdentifier();
			State = 847;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,163,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 843;
					_la = _input.La(1);
					if ( !(_la==T__6 || _la==T__0) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 844; ambiguousIdentifier();
					}
					} 
				}
				State = 849;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,163,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode INTEGERLITERAL() { return GetToken(AttributesParser.INTEGERLITERAL, 0); }
		public ITerminalNode MULT() { return GetToken(AttributesParser.MULT, 0); }
		public ITerminalNode WS() { return GetToken(AttributesParser.WS, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850; Match(MULT);
			State = 852;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 851; Match(WS);
				}
			}

			State = 856;
			switch (_input.La(1)) {
			case INTEGERLITERAL:
				{
				State = 854; Match(INTEGERLITERAL);
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
				{
				State = 855; ambiguousIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(AttributesParser.INTEGERLITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(AttributesParser.NULL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(AttributesParser.STRINGLITERAL, 0); }
		public ITerminalNode FALSE() { return GetToken(AttributesParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(AttributesParser.TRUE, 0); }
		public ITerminalNode NOTHING() { return GetToken(AttributesParser.NOTHING, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(AttributesParser.DATELITERAL, 0); }
		public ITerminalNode HEXLITERAL() { return GetToken(AttributesParser.HEXLITERAL, 0); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(AttributesParser.DOUBLELITERAL, 0); }
		public ITerminalNode SHORTLITERAL() { return GetToken(AttributesParser.SHORTLITERAL, 0); }
		public ITerminalNode EMPTY() { return GetToken(AttributesParser.EMPTY, 0); }
		public ITerminalNode OCTLITERAL() { return GetToken(AttributesParser.OCTLITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858;
			_la = _input.La(1);
			if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (EMPTY - 54)) | (1L << (FALSE - 54)) | (1L << (NOTHING - 54)) | (1L << (NULL - 54)))) != 0) || ((((_la - 167)) & ~0x3f) == 0 && ((1L << (_la - 167)) & ((1L << (TRUE - 167)) | (1L << (STRINGLITERAL - 167)) | (1L << (OCTLITERAL - 167)) | (1L << (HEXLITERAL - 167)) | (1L << (SHORTLITERAL - 167)) | (1L << (INTEGERLITERAL - 167)) | (1L << (DOUBLELITERAL - 167)) | (1L << (DATELITERAL - 167)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(AttributesParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(AttributesParser.RPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				State = 860; baseType();
				}
				break;

			case 2:
				{
				State = 861; complexType();
				}
				break;
			}
			State = 872;
			switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				State = 865;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 864; Match(WS);
					}
				}

				State = 867; Match(LPAREN);
				State = 869;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 868; Match(WS);
					}
				}

				State = 871; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la==AMPERSAND) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(AttributesParser.FRIEND, 0); }
		public ITerminalNode PUBLIC() { return GetToken(AttributesParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(AttributesParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(AttributesParser.PRIVATE, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876;
			_la = _input.La(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousKeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(AttributesParser.CASE, 0); }
		public ITerminalNode APPACTIVATE() { return GetToken(AttributesParser.APPACTIVATE, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(AttributesParser.DEFOBJ, 0); }
		public ITerminalNode ELSE() { return GetToken(AttributesParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(AttributesParser.IF, 0); }
		public ITerminalNode RESET() { return GetToken(AttributesParser.RESET, 0); }
		public ITerminalNode XOR() { return GetToken(AttributesParser.XOR, 0); }
		public ITerminalNode TIME() { return GetToken(AttributesParser.TIME, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(AttributesParser.RAISEEVENT, 0); }
		public ITerminalNode LOAD() { return GetToken(AttributesParser.LOAD, 0); }
		public ITerminalNode BYREF() { return GetToken(AttributesParser.BYREF, 0); }
		public ITerminalNode DEFSNG() { return GetToken(AttributesParser.DEFSNG, 0); }
		public ITerminalNode GOSUB() { return GetToken(AttributesParser.GOSUB, 0); }
		public ITerminalNode ENUM() { return GetToken(AttributesParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(AttributesParser.GLOBAL, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(AttributesParser.PARAMARRAY, 0); }
		public ITerminalNode ME() { return GetToken(AttributesParser.ME, 0); }
		public ITerminalNode SUB() { return GetToken(AttributesParser.SUB, 0); }
		public ITerminalNode FOR() { return GetToken(AttributesParser.FOR, 0); }
		public ITerminalNode LSET() { return GetToken(AttributesParser.LSET, 0); }
		public ITerminalNode WIDTH() { return GetToken(AttributesParser.WIDTH, 0); }
		public ITerminalNode STRING() { return GetToken(AttributesParser.STRING, 0); }
		public ITerminalNode MOD() { return GetToken(AttributesParser.MOD, 0); }
		public ITerminalNode OR() { return GetToken(AttributesParser.OR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(AttributesParser.DOUBLE, 0); }
		public ITerminalNode BYVAL() { return GetToken(AttributesParser.BYVAL, 0); }
		public ITerminalNode IN() { return GetToken(AttributesParser.IN, 0); }
		public ITerminalNode BINARY() { return GetToken(AttributesParser.BINARY, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(AttributesParser.SAVESETTING, 0); }
		public ITerminalNode TEXT() { return GetToken(AttributesParser.TEXT, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(AttributesParser.SENDKEYS, 0); }
		public ITerminalNode PUBLIC() { return GetToken(AttributesParser.PUBLIC, 0); }
		public ITerminalNode PUT() { return GetToken(AttributesParser.PUT, 0); }
		public ITerminalNode MKDIR() { return GetToken(AttributesParser.MKDIR, 0); }
		public ITerminalNode SINGLE() { return GetToken(AttributesParser.SINGLE, 0); }
		public ITerminalNode ERROR() { return GetToken(AttributesParser.ERROR, 0); }
		public ITerminalNode TYPE() { return GetToken(AttributesParser.TYPE, 0); }
		public ITerminalNode CALL() { return GetToken(AttributesParser.CALL, 0); }
		public ITerminalNode RMDIR() { return GetToken(AttributesParser.RMDIR, 0); }
		public ITerminalNode SPC() { return GetToken(AttributesParser.SPC, 0); }
		public ITerminalNode AS() { return GetToken(AttributesParser.AS, 0); }
		public ITerminalNode NOT() { return GetToken(AttributesParser.NOT, 0); }
		public ITerminalNode BEEP() { return GetToken(AttributesParser.BEEP, 0); }
		public ITerminalNode STATIC() { return GetToken(AttributesParser.STATIC, 0); }
		public ITerminalNode DO() { return GetToken(AttributesParser.DO, 0); }
		public ITerminalNode DIM() { return GetToken(AttributesParser.DIM, 0); }
		public ITerminalNode OUTPUT() { return GetToken(AttributesParser.OUTPUT, 0); }
		public ITerminalNode KILL() { return GetToken(AttributesParser.KILL, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(AttributesParser.IMPLEMENTS, 0); }
		public ITerminalNode VERSION() { return GetToken(AttributesParser.VERSION, 0); }
		public ITerminalNode ACCESS() { return GetToken(AttributesParser.ACCESS, 0); }
		public ITerminalNode COLLECTION() { return GetToken(AttributesParser.COLLECTION, 0); }
		public ITerminalNode DECLARE() { return GetToken(AttributesParser.DECLARE, 0); }
		public ITerminalNode TRUE() { return GetToken(AttributesParser.TRUE, 0); }
		public ITerminalNode RESUME() { return GetToken(AttributesParser.RESUME, 0); }
		public ITerminalNode VARIANT() { return GetToken(AttributesParser.VARIANT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(AttributesParser.BOOLEAN, 0); }
		public ITerminalNode WHILE() { return GetToken(AttributesParser.WHILE, 0); }
		public ITerminalNode DEFDBL() { return GetToken(AttributesParser.DEFDBL, 0); }
		public ITerminalNode FUNCTION() { return GetToken(AttributesParser.FUNCTION, 0); }
		public ITerminalNode LONG() { return GetToken(AttributesParser.LONG, 0); }
		public ITerminalNode REM() { return GetToken(AttributesParser.REM, 0); }
		public ITerminalNode RSET() { return GetToken(AttributesParser.RSET, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(AttributesParser.ADDRESSOF, 0); }
		public ITerminalNode GOTO() { return GetToken(AttributesParser.GOTO, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(AttributesParser.ATTRIBUTE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(AttributesParser.TYPEOF, 0); }
		public ITerminalNode SELECT() { return GetToken(AttributesParser.SELECT, 0); }
		public ITerminalNode UNLOCK() { return GetToken(AttributesParser.UNLOCK, 0); }
		public ITerminalNode SET() { return GetToken(AttributesParser.SET, 0); }
		public ITerminalNode ERASE() { return GetToken(AttributesParser.ERASE, 0); }
		public ITerminalNode INTEGER() { return GetToken(AttributesParser.INTEGER, 0); }
		public ITerminalNode FALSE() { return GetToken(AttributesParser.FALSE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(AttributesParser.PRESERVE, 0); }
		public ITerminalNode STOP() { return GetToken(AttributesParser.STOP, 0); }
		public ITerminalNode SHARED() { return GetToken(AttributesParser.SHARED, 0); }
		public ITerminalNode APPEND() { return GetToken(AttributesParser.APPEND, 0); }
		public ITerminalNode CHDIR() { return GetToken(AttributesParser.CHDIR, 0); }
		public ITerminalNode PRIVATE() { return GetToken(AttributesParser.PRIVATE, 0); }
		public ITerminalNode UNLOAD() { return GetToken(AttributesParser.UNLOAD, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(AttributesParser.DEFBYTE, 0); }
		public ITerminalNode RETURN() { return GetToken(AttributesParser.RETURN, 0); }
		public ITerminalNode NULL() { return GetToken(AttributesParser.NULL, 0); }
		public ITerminalNode NAME() { return GetToken(AttributesParser.NAME, 0); }
		public ITerminalNode BEGIN() { return GetToken(AttributesParser.BEGIN, 0); }
		public ITerminalNode LOCK() { return GetToken(AttributesParser.LOCK, 0); }
		public ITerminalNode WEND() { return GetToken(AttributesParser.WEND, 0); }
		public ITerminalNode DEFSTR() { return GetToken(AttributesParser.DEFSTR, 0); }
		public ITerminalNode IMP() { return GetToken(AttributesParser.IMP, 0); }
		public ITerminalNode DEFVAR() { return GetToken(AttributesParser.DEFVAR, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(AttributesParser.CHDRIVE, 0); }
		public ITerminalNode EVENT() { return GetToken(AttributesParser.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(AttributesParser.CONST, 0); }
		public ITerminalNode ELSEIF() { return GetToken(AttributesParser.ELSEIF, 0); }
		public ITerminalNode PRINT() { return GetToken(AttributesParser.PRINT, 0); }
		public ITerminalNode DEFINT() { return GetToken(AttributesParser.DEFINT, 0); }
		public ITerminalNode NOTHING() { return GetToken(AttributesParser.NOTHING, 0); }
		public ITerminalNode THEN() { return GetToken(AttributesParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(AttributesParser.DATABASE, 0); }
		public ITerminalNode BYTE() { return GetToken(AttributesParser.BYTE, 0); }
		public ITerminalNode INPUT() { return GetToken(AttributesParser.INPUT, 0); }
		public ITerminalNode STEP() { return GetToken(AttributesParser.STEP, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(AttributesParser.SAVEPICTURE, 0); }
		public ITerminalNode SEEK() { return GetToken(AttributesParser.SEEK, 0); }
		public ITerminalNode TAB() { return GetToken(AttributesParser.TAB, 0); }
		public ITerminalNode RANDOM() { return GetToken(AttributesParser.RANDOM, 0); }
		public ITerminalNode IS() { return GetToken(AttributesParser.IS, 0); }
		public ITerminalNode LOOP() { return GetToken(AttributesParser.LOOP, 0); }
		public ITerminalNode DEFCUR() { return GetToken(AttributesParser.DEFCUR, 0); }
		public ITerminalNode ALIAS() { return GetToken(AttributesParser.ALIAS, 0); }
		public ITerminalNode DATE() { return GetToken(AttributesParser.DATE, 0); }
		public ITerminalNode DEFDATE() { return GetToken(AttributesParser.DEFDATE, 0); }
		public ITerminalNode CLASS() { return GetToken(AttributesParser.CLASS, 0); }
		public ITerminalNode LET() { return GetToken(AttributesParser.LET, 0); }
		public ITerminalNode FRIEND() { return GetToken(AttributesParser.FRIEND, 0); }
		public ITerminalNode EQV() { return GetToken(AttributesParser.EQV, 0); }
		public ITerminalNode READ() { return GetToken(AttributesParser.READ, 0); }
		public ITerminalNode TO() { return GetToken(AttributesParser.TO, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(AttributesParser.DEFBOOL, 0); }
		public ITerminalNode OPEN() { return GetToken(AttributesParser.OPEN, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(AttributesParser.DELETESETTING, 0); }
		public ITerminalNode CLOSE() { return GetToken(AttributesParser.CLOSE, 0); }
		public ITerminalNode AND() { return GetToken(AttributesParser.AND, 0); }
		public ITerminalNode DEFLNG() { return GetToken(AttributesParser.DEFLNG, 0); }
		public ITerminalNode MID() { return GetToken(AttributesParser.MID, 0); }
		public ITerminalNode ON() { return GetToken(AttributesParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(AttributesParser.WITH, 0); }
		public ITerminalNode DEFDEC() { return GetToken(AttributesParser.DEFDEC, 0); }
		public ITerminalNode SETATTR() { return GetToken(AttributesParser.SETATTR, 0); }
		public ITerminalNode WRITE() { return GetToken(AttributesParser.WRITE, 0); }
		public ITerminalNode LEN() { return GetToken(AttributesParser.LEN, 0); }
		public ITerminalNode EACH() { return GetToken(AttributesParser.EACH, 0); }
		public ITerminalNode NEW() { return GetToken(AttributesParser.NEW, 0); }
		public ITerminalNode GET() { return GetToken(AttributesParser.GET, 0); }
		public ITerminalNode FILECOPY() { return GetToken(AttributesParser.FILECOPY, 0); }
		public ITerminalNode LIB() { return GetToken(AttributesParser.LIB, 0); }
		public ITerminalNode NEXT() { return GetToken(AttributesParser.NEXT, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(AttributesParser.OPTIONAL, 0); }
		public ITerminalNode REDIM() { return GetToken(AttributesParser.REDIM, 0); }
		public ITerminalNode END() { return GetToken(AttributesParser.END, 0); }
		public ITerminalNode UNTIL() { return GetToken(AttributesParser.UNTIL, 0); }
		public ITerminalNode LIKE() { return GetToken(AttributesParser.LIKE, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(AttributesParser.RANDOMIZE, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(AttributesParser.WITHEVENTS, 0); }
		public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousKeywordContext ambiguousKeyword() {
		AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_ambiguousKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemCommentContext : ParserRuleContext {
		public ITerminalNode REMCOMMENT() { return GetToken(AttributesParser.REMCOMMENT, 0); }
		public RemCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterRemComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitRemComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemCommentContext remComment() {
		RemCommentContext _localctx = new RemCommentContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_remComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880; Match(REMCOMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(AttributesParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 882; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfLineContext : ParserRuleContext {
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode NEWLINE() { return GetToken(AttributesParser.NEWLINE, 0); }
		public RemCommentContext remComment() {
			return GetRuleContext<RemCommentContext>(0);
		}
		public EndOfLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterEndOfLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitEndOfLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfLineContext endOfLine() {
		EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_endOfLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 884; Match(WS);
				}
			}

			State = 890;
			switch (_input.La(1)) {
			case NEWLINE:
				{
				State = 887; Match(NEWLINE);
				}
				break;
			case COMMENT:
				{
				State = 888; comment();
				}
				break;
			case REMCOMMENT:
				{
				State = 889; remComment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 893;
			switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				State = 892; Match(WS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfStatementContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(AttributesParser.WS, i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(AttributesParser.WS); }
		public ITerminalNode COLON(int i) {
			return GetToken(AttributesParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(AttributesParser.COLON); }
		public EndOfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.EnterEndOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAttributesListener typedListener = listener as IAttributesListener;
			if (typedListener != null) typedListener.ExitEndOfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttributesVisitor<TResult> typedVisitor = visitor as IAttributesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfStatementContext endOfStatement() {
		EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_endOfStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,176,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 903;
					switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
					case 1:
						{
						State = 895; endOfLine();
						}
						break;

					case 2:
						{
						State = 897;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 896; Match(WS);
							}
						}

						State = 899; Match(COLON);
						State = 901;
						switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
						case 1:
							{
							State = 900; Match(WS);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 907;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,176,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 14);

		case 1: return Precpred(_ctx, 12);

		case 2: return Precpred(_ctx, 11);

		case 3: return Precpred(_ctx, 10);

		case 4: return Precpred(_ctx, 9);

		case 5: return Precpred(_ctx, 8);

		case 6: return Precpred(_ctx, 7);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xF1\x38F\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x3\x2\x3\x2\x3\x2\x3"+
		"\x3\x5\x3\x65\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3k\n\x3\x3\x3\x5\x3n\n"+
		"\x3\x3\x3\x3\x3\x5\x3r\n\x3\x3\x3\x3\x3\x5\x3v\n\x3\x3\x3\x3\x3\x5\x3"+
		"z\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x80\n\x4\x3\x4\x5\x4\x83\n\x4\x3"+
		"\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x8D\n\x5\x5\x5\x8F"+
		"\n\x5\x3\x5\x3\x5\x6\x5\x93\n\x5\r\x5\xE\x5\x94\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\a\x6\x9B\n\x6\f\x6\xE\x6\x9E\v\x6\x3\x6\x3\x6\a\x6\xA2\n\x6\f\x6\xE\x6"+
		"\xA5\v\x6\x3\x6\x3\x6\x3\x6\x5\x6\xAA\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a"+
		"\x6\a\xB1\n\a\r\a\xE\a\xB2\x3\b\x3\b\x3\b\x3\b\a\b\xB9\n\b\f\b\xE\b\xBC"+
		"\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xC5\n\t\x3\n\x3\n\x3\n\x3"+
		"\n\x5\n\xCB\n\n\x3\n\x3\n\x5\n\xCF\n\n\x3\n\x3\n\x5\n\xD3\n\n\x3\n\x3"+
		"\n\x5\n\xD7\n\n\x3\n\a\n\xDA\n\n\f\n\xE\n\xDD\v\n\x3\v\x3\v\x3\v\x3\v"+
		"\a\v\xE3\n\v\f\v\xE\v\xE6\v\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x5\r"+
		"\xEF\n\r\x3\r\x3\r\x5\r\xF3\n\r\x3\r\x3\r\x5\r\xF7\n\r\x3\r\x3\r\x5\r"+
		"\xFB\n\r\x3\r\x5\r\xFE\n\r\x3\r\x5\r\x101\n\r\x3\r\x5\r\x104\n\r\x3\r"+
		"\x5\r\x107\n\r\x3\r\x3\r\x5\r\x10B\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x5"+
		"\xE\x112\n\xE\x3\xE\x3\xE\x5\xE\x116\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE"+
		"\x11C\n\xE\x3\xE\x5\xE\x11F\n\xE\x3\xE\x5\xE\x122\n\xE\x3\xE\x3\xE\x5"+
		"\xE\x126\n\xE\x3\xE\x3\xE\x5\xE\x12A\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF"+
		"\x5\xF\x131\n\xF\x3\xF\x3\xF\x5\xF\x135\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5"+
		"\xF\x13B\n\xF\x3\xF\x5\xF\x13E\n\xF\x3\xF\x3\xF\x5\xF\x142\n\xF\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x10\x5\x10\x149\n\x10\x3\x10\x3\x10\x5\x10\x14D"+
		"\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x153\n\x10\x3\x10\x5\x10\x156"+
		"\n\x10\x3\x10\x3\x10\x5\x10\x15A\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3"+
		"\x11\x5\x11\x161\n\x11\x3\x11\x3\x11\x5\x11\x165\n\x11\x3\x11\x3\x11\x5"+
		"\x11\x169\n\x11\x3\x11\x3\x11\x5\x11\x16D\n\x11\x3\x11\x5\x11\x170\n\x11"+
		"\x3\x11\x3\x11\x5\x11\x174\n\x11\x3\x11\x3\x11\x3\x12\x3\x12\x5\x12\x17A"+
		"\n\x12\x3\x12\x3\x12\x5\x12\x17E\n\x12\x3\x12\x3\x12\x5\x12\x182\n\x12"+
		"\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x5\x13\x189\n\x13\x3\x13\x3\x13\x3"+
		"\x13\x5\x13\x18E\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x193\n\x13\x3\x13\x3"+
		"\x13\x5\x13\x197\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x19D\n\x13\x3"+
		"\x13\x3\x13\x3\x13\x5\x13\x1A2\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x5\x13\x1A9\n\x13\x3\x13\x3\x13\x5\x13\x1AD\n\x13\x3\x13\x3\x13\x5\x13"+
		"\x1B1\n\x13\x3\x13\a\x13\x1B4\n\x13\f\x13\xE\x13\x1B7\v\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x5\x13\x1BD\n\x13\x3\x13\x3\x13\x5\x13\x1C1\n\x13\x3"+
		"\x13\x3\x13\x5\x13\x1C5\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x1CA\n\x13\x3"+
		"\x13\x3\x13\x5\x13\x1CE\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x1D3\n\x13\x3"+
		"\x13\x3\x13\x5\x13\x1D7\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x1DC\n\x13\x3"+
		"\x13\x3\x13\x5\x13\x1E0\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x1E5\n\x13\x3"+
		"\x13\x3\x13\x5\x13\x1E9\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x1EE\n\x13\x3"+
		"\x13\x3\x13\x5\x13\x1F2\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x1F7\n\x13\x3"+
		"\x13\x3\x13\x5\x13\x1FB\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x200\n\x13\x3"+
		"\x13\x3\x13\x5\x13\x204\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x209\n\x13\x3"+
		"\x13\x3\x13\x5\x13\x20D\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x212\n\x13\x3"+
		"\x13\x3\x13\x5\x13\x216\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x21B\n\x13\x3"+
		"\x13\x3\x13\x5\x13\x21F\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x224\n\x13\x3"+
		"\x13\x3\x13\x5\x13\x228\n\x13\x3\x13\a\x13\x22B\n\x13\f\x13\xE\x13\x22E"+
		"\v\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x234\n\x14\x3\x15\x3\x15\x5"+
		"\x15\x238\n\x15\x3\x15\x5\x15\x23B\n\x15\x3\x15\x5\x15\x23E\n\x15\x3\x15"+
		"\x5\x15\x241\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x247\n\x15\f\x15"+
		"\xE\x15\x24A\v\x15\x3\x16\x3\x16\x5\x16\x24E\n\x16\x3\x16\x5\x16\x251"+
		"\n\x16\x3\x16\x5\x16\x254\n\x16\x3\x16\x3\x16\x5\x16\x258\n\x16\x3\x16"+
		"\x3\x16\x5\x16\x25C\n\x16\x5\x16\x25E\n\x16\x3\x16\x3\x16\x5\x16\x262"+
		"\n\x16\x3\x16\x5\x16\x265\n\x16\x3\x16\x5\x16\x268\n\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\a\x16\x26E\n\x16\f\x16\xE\x16\x271\v\x16\x3\x17\x3\x17"+
		"\x5\x17\x275\n\x17\x3\x17\x3\x17\x5\x17\x279\n\x17\x6\x17\x27B\n\x17\r"+
		"\x17\xE\x17\x27C\x3\x17\x5\x17\x280\n\x17\x3\x17\x5\x17\x283\n\x17\x3"+
		"\x17\x5\x17\x286\n\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x28C\n\x17\f"+
		"\x17\xE\x17\x28F\v\x17\x3\x18\x3\x18\x5\x18\x293\n\x18\x3\x18\x3\x18\x5"+
		"\x18\x297\n\x18\x3\x19\x5\x19\x29A\n\x19\x3\x19\x3\x19\x3\x1A\x5\x1A\x29F"+
		"\n\x1A\x3\x1A\x5\x1A\x2A2\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2A6\n\x1A\a\x1A"+
		"\x2A8\n\x1A\f\x1A\xE\x1A\x2AB\v\x1A\x3\x1A\x3\x1A\x5\x1A\x2AF\n\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\x2B3\n\x1A\x3\x1A\x5\x1A\x2B6\n\x1A\a\x1A\x2B8\n\x1A"+
		"\f\x1A\xE\x1A\x2BB\v\x1A\x3\x1B\x5\x1B\x2BE\n\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x2C2\n\x1B\x3\x1B\x5\x1B\x2C5\n\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x5\x1C"+
		"\x2CB\n\x1C\x3\x1C\x3\x1C\x5\x1C\x2CF\n\x1C\x3\x1D\x3\x1D\x5\x1D\x2D3"+
		"\n\x1D\x3\x1D\x3\x1D\x5\x1D\x2D7\n\x1D\x3\x1D\x3\x1D\x5\x1D\x2DB\n\x1D"+
		"\x3\x1D\a\x1D\x2DE\n\x1D\f\x1D\xE\x1D\x2E1\v\x1D\x5\x1D\x2E3\n\x1D\x3"+
		"\x1D\x5\x1D\x2E6\n\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x5\x1E\x2EC\n\x1E\x3"+
		"\x1E\x3\x1E\x5\x1E\x2F0\n\x1E\x3\x1E\x3\x1E\x5\x1E\x2F4\n\x1E\x3\x1E\x3"+
		"\x1E\x5\x1E\x2F8\n\x1E\x3\x1E\x5\x1E\x2FB\n\x1E\x3\x1E\x3\x1E\x5\x1E\x2FF"+
		"\n\x1E\x3\x1E\x5\x1E\x302\n\x1E\x3\x1E\x5\x1E\x305\n\x1E\x3\x1E\x5\x1E"+
		"\x308\n\x1E\x3\x1E\x5\x1E\x30B\n\x1E\x3\x1E\x5\x1E\x30E\n\x1E\x3\x1F\x3"+
		"\x1F\x5\x1F\x312\n\x1F\x3\x1F\x3\x1F\x3 \x3 \x5 \x318\n \x3 \x3 \x5 \x31C"+
		"\n \x3 \a \x31F\n \f \xE \x322\v \x3!\x3!\x3!\x3!\x3!\x5!\x329\n!\x3!"+
		"\x3!\x3\"\x3\"\x6\"\x32F\n\"\r\"\xE\"\x330\x3#\x3#\x3#\x3#\x3#\x3#\x3"+
		"#\x5#\x33A\n#\x3$\x3$\x5$\x33E\n$\x3$\x3$\x5$\x342\n$\x3$\x3$\x5$\x346"+
		"\n$\x3$\x5$\x349\n$\x3%\x3%\x3&\x3&\x3&\a&\x350\n&\f&\xE&\x353\v&\x3\'"+
		"\x3\'\x5\'\x357\n\'\x3\'\x3\'\x5\'\x35B\n\'\x3(\x3(\x3)\x3)\x5)\x361\n"+
		")\x3)\x5)\x364\n)\x3)\x3)\x5)\x368\n)\x3)\x5)\x36B\n)\x3*\x3*\x3+\x3+"+
		"\x3,\x3,\x3-\x3-\x3.\x3.\x3/\x5/\x378\n/\x3/\x3/\x3/\x5/\x37D\n/\x3/\x5"+
		"/\x380\n/\x3\x30\x3\x30\x5\x30\x384\n\x30\x3\x30\x3\x30\x5\x30\x388\n"+
		"\x30\a\x30\x38A\n\x30\f\x30\xE\x30\x38D\v\x30\x3\x30\x2\x2\x3$\x31\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2"+
		"\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34"+
		"\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2"+
		"P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2\x2\xE\x4\x2\xBA\xBA\xC3\xC3\x4\x2\xC2"+
		"\xC2\xC5\xC5\a\x2ZZ\x64\x64\xBC\xBF\xC1\xC1\xC4\xC4\x4\x2\x4\x4\n\n\x3"+
		"\x2\b\t\x4\x2\x17\x18\x7F\x7F\x3\x2\x17\x18\f\x2\x16\x16\x19\x19  ##\x34"+
		"\x34[[__\x9D\x9D\xA2\xA2\xAF\xAF\b\x2\x38\x38LLrs\xA9\xA9\xCA\xCF\xD1"+
		"\xD1\x4\x2\x3\a\xB8\xB8\x6\x2NNRR\x82\x82\x87\x87\n\x2\v\x37\x41\x46L"+
		"\x64itwx}\x82\x87\x8C\x8E\xB7\x429\x2`\x3\x2\x2\x2\x4\x64\x3\x2\x2\x2"+
		"\x6{\x3\x2\x2\x2\b\x86\x3\x2\x2\x2\n\x98\x3\x2\x2\x2\f\xB0\x3\x2\x2\x2"+
		"\xE\xB4\x3\x2\x2\x2\x10\xC4\x3\x2\x2\x2\x12\xC6\x3\x2\x2\x2\x14\xDE\x3"+
		"\x2\x2\x2\x16\xE9\x3\x2\x2\x2\x18\xEE\x3\x2\x2\x2\x1A\x111\x3\x2\x2\x2"+
		"\x1C\x130\x3\x2\x2\x2\x1E\x148\x3\x2\x2\x2 \x160\x3\x2\x2\x2\"\x177\x3"+
		"\x2\x2\x2$\x1BC\x3\x2\x2\x2&\x233\x3\x2\x2\x2(\x235\x3\x2\x2\x2*\x24D"+
		"\x3\x2\x2\x2,\x274\x3\x2\x2\x2.\x290\x3\x2\x2\x2\x30\x299\x3\x2\x2\x2"+
		"\x32\x2A9\x3\x2\x2\x2\x34\x2BD\x3\x2\x2\x2\x36\x2C8\x3\x2\x2\x2\x38\x2D0"+
		"\x3\x2\x2\x2:\x2EB\x3\x2\x2\x2<\x30F\x3\x2\x2\x2>\x315\x3\x2\x2\x2@\x328"+
		"\x3\x2\x2\x2\x42\x32E\x3\x2\x2\x2\x44\x332\x3\x2\x2\x2\x46\x33B\x3\x2"+
		"\x2\x2H\x34A\x3\x2\x2\x2J\x34C\x3\x2\x2\x2L\x354\x3\x2\x2\x2N\x35C\x3"+
		"\x2\x2\x2P\x360\x3\x2\x2\x2R\x36C\x3\x2\x2\x2T\x36E\x3\x2\x2\x2V\x370"+
		"\x3\x2\x2\x2X\x372\x3\x2\x2\x2Z\x374\x3\x2\x2\x2\\\x377\x3\x2\x2\x2^\x38B"+
		"\x3\x2\x2\x2`\x61\x5\x4\x3\x2\x61\x62\a\x2\x2\x3\x62\x3\x3\x2\x2\x2\x63"+
		"\x65\a\xF0\x2\x2\x64\x63\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x66\x3\x2"+
		"\x2\x2\x66j\x5^\x30\x2gh\x5\x6\x4\x2hi\x5^\x30\x2ik\x3\x2\x2\x2jg\x3\x2"+
		"\x2\x2jk\x3\x2\x2\x2km\x3\x2\x2\x2ln\x5\b\x5\x2ml\x3\x2\x2\x2mn\x3\x2"+
		"\x2\x2no\x3\x2\x2\x2oq\x5^\x30\x2pr\x5\f\a\x2qp\x3\x2\x2\x2qr\x3\x2\x2"+
		"\x2rs\x3\x2\x2\x2su\x5^\x30\x2tv\x5\xE\b\x2ut\x3\x2\x2\x2uv\x3\x2\x2\x2"+
		"vw\x3\x2\x2\x2wy\x5^\x30\x2xz\a\xF0\x2\x2yx\x3\x2\x2\x2yz\x3\x2\x2\x2"+
		"z\x5\x3\x2\x2\x2{|\a\xB0\x2\x2|}\a\xF0\x2\x2}\x7F\a\xCF\x2\x2~\x80\a\xF0"+
		"\x2\x2\x7F~\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80\x82\x3\x2\x2\x2\x81\x83"+
		"\a\x1E\x2\x2\x82\x81\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84\x3\x2\x2"+
		"\x2\x84\x85\x5^\x30\x2\x85\a\x3\x2\x2\x2\x86\x8E\a\x13\x2\x2\x87\x88\a"+
		"\xF0\x2\x2\x88\x89\a\xD0\x2\x2\x89\x8A\a\xF0\x2\x2\x8A\x8C\x5\x42\"\x2"+
		"\x8B\x8D\a\xF0\x2\x2\x8C\x8B\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8F\x3"+
		"\x2\x2\x2\x8E\x87\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2"+
		"\x90\x92\x5^\x30\x2\x91\x93\x5\n\x6\x2\x92\x91\x3\x2\x2\x2\x93\x94\x3"+
		"\x2\x2\x2\x94\x92\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2"+
		"\x96\x97\a\x41\x2\x2\x97\t\x3\x2\x2\x2\x98\x9C\x5\x42\"\x2\x99\x9B\a\xF0"+
		"\x2\x2\x9A\x99\x3\x2\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9C"+
		"\x9D\x3\x2\x2\x2\x9D\x9F\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9F\xA3\a\xBC"+
		"\x2\x2\xA0\xA2\a\xF0\x2\x2\xA1\xA0\x3\x2\x2\x2\xA2\xA5\x3\x2\x2\x2\xA3"+
		"\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA6\x3\x2\x2\x2\xA5\xA3\x3\x2"+
		"\x2\x2\xA6\xA9\x5N(\x2\xA7\xA8\a\xEE\x2\x2\xA8\xAA\a\xCD\x2\x2\xA9\xA7"+
		"\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAC\x5^\x30\x2"+
		"\xAC\v\x3\x2\x2\x2\xAD\xAE\x5\x12\n\x2\xAE\xAF\x5^\x30\x2\xAF\xB1\x3\x2"+
		"\x2\x2\xB0\xAD\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2"+
		"\xB3\x3\x2\x2\x2\xB3\r\x3\x2\x2\x2\xB4\xBA\x5\x10\t\x2\xB5\xB6\x5^\x30"+
		"\x2\xB6\xB7\x5\x10\t\x2\xB7\xB9\x3\x2\x2\x2\xB8\xB5\x3\x2\x2\x2\xB9\xBC"+
		"\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBD\x3\x2\x2"+
		"\x2\xBC\xBA\x3\x2\x2\x2\xBD\xBE\x5^\x30\x2\xBE\xF\x3\x2\x2\x2\xBF\xC5"+
		"\x5\x18\r\x2\xC0\xC5\x5\x1A\xE\x2\xC1\xC5\x5\x1C\xF\x2\xC2\xC5\x5\x1E"+
		"\x10\x2\xC3\xC5\x5 \x11\x2\xC4\xBF\x3\x2\x2\x2\xC4\xC0\x3\x2\x2\x2\xC4"+
		"\xC1\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC3\x3\x2\x2\x2\xC5\x11\x3\x2"+
		"\x2\x2\xC6\xC7\a\xF\x2\x2\xC7\xC8\a\xF0\x2\x2\xC8\xCA\x5&\x14\x2\xC9\xCB"+
		"\a\xF0\x2\x2\xCA\xC9\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCC\x3\x2\x2"+
		"\x2\xCC\xCE\a\xBC\x2\x2\xCD\xCF\a\xF0\x2\x2\xCE\xCD\x3\x2\x2\x2\xCE\xCF"+
		"\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\xDB\x5N(\x2\xD1\xD3\a\xF0\x2\x2\xD2"+
		"\xD1\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD6\a\t\x2"+
		"\x2\xD5\xD7\a\xF0\x2\x2\xD6\xD5\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7\xD8"+
		"\x3\x2\x2\x2\xD8\xDA\x5N(\x2\xD9\xD2\x3\x2\x2\x2\xDA\xDD\x3\x2\x2\x2\xDB"+
		"\xD9\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\x13\x3\x2\x2\x2\xDD\xDB\x3\x2"+
		"\x2\x2\xDE\xE4\x5\x16\f\x2\xDF\xE0\x5^\x30\x2\xE0\xE1\x5\x16\f\x2\xE1"+
		"\xE3\x3\x2\x2\x2\xE2\xDF\x3\x2\x2\x2\xE3\xE6\x3\x2\x2\x2\xE4\xE2\x3\x2"+
		"\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE7\x3\x2\x2\x2\xE6\xE4\x3\x2\x2\x2\xE7"+
		"\xE8\x5^\x30\x2\xE8\x15\x3\x2\x2\x2\xE9\xEA\x5\x12\n\x2\xEA\x17\x3\x2"+
		"\x2\x2\xEB\xEC\x5T+\x2\xEC\xED\a\xF0\x2\x2\xED\xEF\x3\x2\x2\x2\xEE\xEB"+
		"\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF2\x3\x2\x2\x2\xF0\xF1\a\x9F\x2"+
		"\x2\xF1\xF3\a\xF0\x2\x2\xF2\xF0\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF4"+
		"\x3\x2\x2\x2\xF4\xF6\aP\x2\x2\xF5\xF7\a\xF0\x2\x2\xF6\xF5\x3\x2\x2\x2"+
		"\xF6\xF7\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xFA\x5\x42\"\x2\xF9\xFB\x5"+
		"R*\x2\xFA\xF9\x3\x2\x2\x2\xFA\xFB\x3\x2\x2\x2\xFB\x100\x3\x2\x2\x2\xFC"+
		"\xFE\a\xF0\x2\x2\xFD\xFC\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\xFF\x3\x2"+
		"\x2\x2\xFF\x101\x5\x38\x1D\x2\x100\xFD\x3\x2\x2\x2\x100\x101\x3\x2\x2"+
		"\x2\x101\x106\x3\x2\x2\x2\x102\x104\a\xF0\x2\x2\x103\x102\x3\x2\x2\x2"+
		"\x103\x104\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105\x107\x5\x46$\x2\x106"+
		"\x103\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107\x108\x3\x2\x2\x2\x108\x10A"+
		"\x5^\x30\x2\x109\x10B\x5\x14\v\x2\x10A\x109\x3\x2\x2\x2\x10A\x10B\x3\x2"+
		"\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10D\a:\x2\x2\x10D\x19\x3\x2\x2\x2\x10E"+
		"\x10F\x5T+\x2\x10F\x110\a\xF0\x2\x2\x110\x112\x3\x2\x2\x2\x111\x10E\x3"+
		"\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x115\x3\x2\x2\x2\x113\x114\a\x9F"+
		"\x2\x2\x114\x116\a\xF0\x2\x2\x115\x113\x3\x2\x2\x2\x115\x116\x3\x2\x2"+
		"\x2\x116\x117\x3\x2\x2\x2\x117\x118\a\x83\x2\x2\x118\x119\a\xF0\x2\x2"+
		"\x119\x11B\x5\x42\"\x2\x11A\x11C\x5R*\x2\x11B\x11A\x3\x2\x2\x2\x11B\x11C"+
		"\x3\x2\x2\x2\x11C\x121\x3\x2\x2\x2\x11D\x11F\a\xF0\x2\x2\x11E\x11D\x3"+
		"\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x122\x5\x38"+
		"\x1D\x2\x121\x11E\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x125\x3\x2\x2"+
		"\x2\x123\x124\a\xF0\x2\x2\x124\x126\x5\x46$\x2\x125\x123\x3\x2\x2\x2\x125"+
		"\x126\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x129\x5^\x30\x2\x128\x12A"+
		"\x5\x14\v\x2\x129\x128\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x12B\x3"+
		"\x2\x2\x2\x12B\x12C\a<\x2\x2\x12C\x1B\x3\x2\x2\x2\x12D\x12E\x5T+\x2\x12E"+
		"\x12F\a\xF0\x2\x2\x12F\x131\x3\x2\x2\x2\x130\x12D\x3\x2\x2\x2\x130\x131"+
		"\x3\x2\x2\x2\x131\x134\x3\x2\x2\x2\x132\x133\a\x9F\x2\x2\x133\x135\a\xF0"+
		"\x2\x2\x134\x132\x3\x2\x2\x2\x134\x135\x3\x2\x2\x2\x135\x136\x3\x2\x2"+
		"\x2\x136\x137\a\x85\x2\x2\x137\x138\a\xF0\x2\x2\x138\x13D\x5\x42\"\x2"+
		"\x139\x13B\a\xF0\x2\x2\x13A\x139\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B"+
		"\x13C\x3\x2\x2\x2\x13C\x13E\x5\x38\x1D\x2\x13D\x13A\x3\x2\x2\x2\x13D\x13E"+
		"\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F\x141\x5^\x30\x2\x140\x142\x5\x14"+
		"\v\x2\x141\x140\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2"+
		"\x143\x144\a<\x2\x2\x144\x1D\x3\x2\x2\x2\x145\x146\x5T+\x2\x146\x147\a"+
		"\xF0\x2\x2\x147\x149\x3\x2\x2\x2\x148\x145\x3\x2\x2\x2\x148\x149\x3\x2"+
		"\x2\x2\x149\x14C\x3\x2\x2\x2\x14A\x14B\a\x9F\x2\x2\x14B\x14D\a\xF0\x2"+
		"\x2\x14C\x14A\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2"+
		"\x14E\x14F\a\x84\x2\x2\x14F\x150\a\xF0\x2\x2\x150\x155\x5\x42\"\x2\x151"+
		"\x153\a\xF0\x2\x2\x152\x151\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x154"+
		"\x3\x2\x2\x2\x154\x156\x5\x38\x1D\x2\x155\x152\x3\x2\x2\x2\x155\x156\x3"+
		"\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x159\x5^\x30\x2\x158\x15A\x5\x14"+
		"\v\x2\x159\x158\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2"+
		"\x15B\x15C\a<\x2\x2\x15C\x1F\x3\x2\x2\x2\x15D\x15E\x5T+\x2\x15E\x15F\a"+
		"\xF0\x2\x2\x15F\x161\x3\x2\x2\x2\x160\x15D\x3\x2\x2\x2\x160\x161\x3\x2"+
		"\x2\x2\x161\x164\x3\x2\x2\x2\x162\x163\a\x9F\x2\x2\x163\x165\a\xF0\x2"+
		"\x2\x164\x162\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2"+
		"\x166\x168\a\xA3\x2\x2\x167\x169\a\xF0\x2\x2\x168\x167\x3\x2\x2\x2\x168"+
		"\x169\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16A\x16F\x5\x42\"\x2\x16B\x16D"+
		"\a\xF0\x2\x2\x16C\x16B\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x16E\x3"+
		"\x2\x2\x2\x16E\x170\x5\x38\x1D\x2\x16F\x16C\x3\x2\x2\x2\x16F\x170\x3\x2"+
		"\x2\x2\x170\x171\x3\x2\x2\x2\x171\x173\x5^\x30\x2\x172\x174\x5\x14\v\x2"+
		"\x173\x172\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175"+
		"\x176\a>\x2\x2\x176!\x3\x2\x2\x2\x177\x179\ak\x2\x2\x178\x17A\a\xF0\x2"+
		"\x2\x179\x178\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2"+
		"\x17B\x17D\a\xC0\x2\x2\x17C\x17E\a\xF0\x2\x2\x17D\x17C\x3\x2\x2\x2\x17D"+
		"\x17E\x3\x2\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F\x181\x5\x32\x1A\x2\x180\x182"+
		"\a\xF0\x2\x2\x181\x180\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182\x183\x3"+
		"\x2\x2\x2\x183\x184\a\xC7\x2\x2\x184#\x3\x2\x2\x2\x185\x186\b\x13\x1\x2"+
		"\x186\x188\ap\x2\x2\x187\x189\a\xF0\x2\x2\x188\x187\x3\x2\x2\x2\x188\x189"+
		"\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\x1BD\x5$\x13\x15\x18B\x18D\a\f"+
		"\x2\x2\x18C\x18E\a\xF0\x2\x2\x18D\x18C\x3\x2\x2\x2\x18D\x18E\x3\x2\x2"+
		"\x2\x18E\x18F\x3\x2\x2\x2\x18F\x1BD\x5$\x13\x12\x190\x192\x5&\x14\x2\x191"+
		"\x193\a\xF0\x2\x2\x192\x191\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x194"+
		"\x3\x2\x2\x2\x194\x196\a\xB9\x2\x2\x195\x197\a\xF0\x2\x2\x196\x195\x3"+
		"\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197\x198\x3\x2\x2\x2\x198\x199\x5$\x13"+
		"\x11\x199\x1BD\x3\x2\x2\x2\x19A\x19C\a\xC2\x2\x2\x19B\x19D\a\xF0\x2\x2"+
		"\x19C\x19B\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D\x19E\x3\x2\x2\x2\x19E"+
		"\x1BD\x5$\x13\xF\x19F\x1A1\aq\x2\x2\x1A0\x1A2\a\xF0\x2\x2\x1A1\x1A0\x3"+
		"\x2\x2\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3\x1BD\x5$\x13"+
		"\b\x1A4\x1BD\x5N(\x2\x1A5\x1BD\x5&\x14\x2\x1A6\x1A8\a\xC0\x2\x2\x1A7\x1A9"+
		"\a\xF0\x2\x2\x1A8\x1A7\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AA\x3"+
		"\x2\x2\x2\x1AA\x1B5\x5$\x13\x2\x1AB\x1AD\a\xF0\x2\x2\x1AC\x1AB\x3\x2\x2"+
		"\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1AE\x3\x2\x2\x2\x1AE\x1B0\a\t\x2\x2\x1AF"+
		"\x1B1\a\xF0\x2\x2\x1B0\x1AF\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B2"+
		"\x3\x2\x2\x2\x1B2\x1B4\x5$\x13\x2\x1B3\x1AC\x3\x2\x2\x2\x1B4\x1B7\x3\x2"+
		"\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1B8\x3\x2\x2"+
		"\x2\x1B7\x1B5\x3\x2\x2\x2\x1B8\x1B9\a\xC7\x2\x2\x1B9\x1BD\x3\x2\x2\x2"+
		"\x1BA\x1BD\x5\x44#\x2\x1BB\x1BD\x5\"\x12\x2\x1BC\x185\x3\x2\x2\x2\x1BC"+
		"\x18B\x3\x2\x2\x2\x1BC\x190\x3\x2\x2\x2\x1BC\x19A\x3\x2\x2\x2\x1BC\x19F"+
		"\x3\x2\x2\x2\x1BC\x1A4\x3\x2\x2\x2\x1BC\x1A5\x3\x2\x2\x2\x1BC\x1A6\x3"+
		"\x2\x2\x2\x1BC\x1BA\x3\x2\x2\x2\x1BC\x1BB\x3\x2\x2\x2\x1BD\x22C\x3\x2"+
		"\x2\x2\x1BE\x1C0\f\x10\x2\x2\x1BF\x1C1\a\xF0\x2\x2\x1C0\x1BF\x3\x2\x2"+
		"\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C4\a\xC6\x2\x2"+
		"\x1C3\x1C5\a\xF0\x2\x2\x1C4\x1C3\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5"+
		"\x1C6\x3\x2\x2\x2\x1C6\x22B\x5$\x13\x11\x1C7\x1C9\f\xE\x2\x2\x1C8\x1CA"+
		"\a\xF0\x2\x2\x1C9\x1C8\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CB\x3"+
		"\x2\x2\x2\x1CB\x1CD\t\x2\x2\x2\x1CC\x1CE\a\xF0\x2\x2\x1CD\x1CC\x3\x2\x2"+
		"\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF\x22B\x5$\x13\xF\x1D0"+
		"\x1D2\f\r\x2\x2\x1D1\x1D3\a\xF0\x2\x2\x1D2\x1D1\x3\x2\x2\x2\x1D2\x1D3"+
		"\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4\x1D6\a\xBB\x2\x2\x1D5\x1D7\a\xF0"+
		"\x2\x2\x1D6\x1D5\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1D8\x3\x2\x2"+
		"\x2\x1D8\x22B\x5$\x13\xE\x1D9\x1DB\f\f\x2\x2\x1DA\x1DC\a\xF0\x2\x2\x1DB"+
		"\x1DA\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2\x2\x1DD\x1DF"+
		"\am\x2\x2\x1DE\x1E0\a\xF0\x2\x2\x1DF\x1DE\x3\x2\x2\x2\x1DF\x1E0\x3\x2"+
		"\x2\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1\x22B\x5$\x13\r\x1E2\x1E4\f\v\x2\x2\x1E3"+
		"\x1E5\a\xF0\x2\x2\x1E4\x1E3\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1E6"+
		"\x3\x2\x2\x2\x1E6\x1E8\t\x3\x2\x2\x1E7\x1E9\a\xF0\x2\x2\x1E8\x1E7\x3\x2"+
		"\x2\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9\x1EA\x3\x2\x2\x2\x1EA\x22B\x5$\x13\f"+
		"\x1EB\x1ED\f\n\x2\x2\x1EC\x1EE\a\xF0\x2\x2\x1ED\x1EC\x3\x2\x2\x2\x1ED"+
		"\x1EE\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EF\x1F1\a\xB8\x2\x2\x1F0\x1F2"+
		"\a\xF0\x2\x2\x1F1\x1F0\x3\x2\x2\x2\x1F1\x1F2\x3\x2\x2\x2\x1F2\x1F3\x3"+
		"\x2\x2\x2\x1F3\x22B\x5$\x13\v\x1F4\x1F6\f\t\x2\x2\x1F5\x1F7\a\xF0\x2\x2"+
		"\x1F6\x1F5\x3\x2\x2\x2\x1F6\x1F7\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8"+
		"\x1FA\t\x4\x2\x2\x1F9\x1FB\a\xF0\x2\x2\x1FA\x1F9\x3\x2\x2\x2\x1FA\x1FB"+
		"\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x22B\x5$\x13\n\x1FD\x1FF\f\a\x2"+
		"\x2\x1FE\x200\a\xF0\x2\x2\x1FF\x1FE\x3\x2\x2\x2\x1FF\x200\x3\x2\x2\x2"+
		"\x200\x201\x3\x2\x2\x2\x201\x203\a\xE\x2\x2\x202\x204\a\xF0\x2\x2\x203"+
		"\x202\x3\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204\x205\x3\x2\x2\x2\x205\x22B"+
		"\x5$\x13\b\x206\x208\f\x6\x2\x2\x207\x209\a\xF0\x2\x2\x208\x207\x3\x2"+
		"\x2\x2\x208\x209\x3\x2\x2\x2\x209\x20A\x3\x2\x2\x2\x20A\x20C\a}\x2\x2"+
		"\x20B\x20D\a\xF0\x2\x2\x20C\x20B\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D"+
		"\x20E\x3\x2\x2\x2\x20E\x22B\x5$\x13\a\x20F\x211\f\x5\x2\x2\x210\x212\a"+
		"\xF0\x2\x2\x211\x210\x3\x2\x2\x2\x211\x212\x3\x2\x2\x2\x212\x213\x3\x2"+
		"\x2\x2\x213\x215\a\xB7\x2\x2\x214\x216\a\xF0\x2\x2\x215\x214\x3\x2\x2"+
		"\x2\x215\x216\x3\x2\x2\x2\x216\x217\x3\x2\x2\x2\x217\x22B\x5$\x13\x6\x218"+
		"\x21A\f\x4\x2\x2\x219\x21B\a\xF0\x2\x2\x21A\x219\x3\x2\x2\x2\x21A\x21B"+
		"\x3\x2\x2\x2\x21B\x21C\x3\x2\x2\x2\x21C\x21E\a\x43\x2\x2\x21D\x21F\a\xF0"+
		"\x2\x2\x21E\x21D\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x220\x3\x2\x2"+
		"\x2\x220\x22B\x5$\x13\x5\x221\x223\f\x3\x2\x2\x222\x224\a\xF0\x2\x2\x223"+
		"\x222\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2\x224\x225\x3\x2\x2\x2\x225\x227"+
		"\aV\x2\x2\x226\x228\a\xF0\x2\x2\x227\x226\x3\x2\x2\x2\x227\x228\x3\x2"+
		"\x2\x2\x228\x229\x3\x2\x2\x2\x229\x22B\x5$\x13\x4\x22A\x1BE\x3\x2\x2\x2"+
		"\x22A\x1C7\x3\x2\x2\x2\x22A\x1D0\x3\x2\x2\x2\x22A\x1D9\x3\x2\x2\x2\x22A"+
		"\x1E2\x3\x2\x2\x2\x22A\x1EB\x3\x2\x2\x2\x22A\x1F4\x3\x2\x2\x2\x22A\x1FD"+
		"\x3\x2\x2\x2\x22A\x206\x3\x2\x2\x2\x22A\x20F\x3\x2\x2\x2\x22A\x218\x3"+
		"\x2\x2\x2\x22A\x221\x3\x2\x2\x2\x22B\x22E\x3\x2\x2\x2\x22C\x22A\x3\x2"+
		"\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D%\x3\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22F"+
		"\x234\x5,\x17\x2\x230\x234\x5(\x15\x2\x231\x234\x5*\x16\x2\x232\x234\x5"+
		"\x30\x19\x2\x233\x22F\x3\x2\x2\x2\x233\x230\x3\x2\x2\x2\x233\x231\x3\x2"+
		"\x2\x2\x233\x232\x3\x2\x2\x2\x234\'\x3\x2\x2\x2\x235\x237\x5\x42\"\x2"+
		"\x236\x238\x5R*\x2\x237\x236\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238\x23D"+
		"\x3\x2\x2\x2\x239\x23B\a\xF0\x2\x2\x23A\x239\x3\x2\x2\x2\x23A\x23B\x3"+
		"\x2\x2\x2\x23B\x23C\x3\x2\x2\x2\x23C\x23E\x5\x36\x1C\x2\x23D\x23A\x3\x2"+
		"\x2\x2\x23D\x23E\x3\x2\x2\x2\x23E\x248\x3\x2\x2\x2\x23F\x241\a\xF0\x2"+
		"\x2\x240\x23F\x3\x2\x2\x2\x240\x241\x3\x2\x2\x2\x241\x242\x3\x2\x2\x2"+
		"\x242\x243\a\xC0\x2\x2\x243\x244\x5> \x2\x244\x245\a\xC7\x2\x2\x245\x247"+
		"\x3\x2\x2\x2\x246\x240\x3\x2\x2\x2\x247\x24A\x3\x2\x2\x2\x248\x246\x3"+
		"\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249)\x3\x2\x2\x2\x24A\x248\x3\x2\x2\x2"+
		"\x24B\x24E\x5\x42\"\x2\x24C\x24E\x5H%\x2\x24D\x24B\x3\x2\x2\x2\x24D\x24C"+
		"\x3\x2\x2\x2\x24E\x250\x3\x2\x2\x2\x24F\x251\x5R*\x2\x250\x24F\x3\x2\x2"+
		"\x2\x250\x251\x3\x2\x2\x2\x251\x253\x3\x2\x2\x2\x252\x254\a\xF0\x2\x2"+
		"\x253\x252\x3\x2\x2\x2\x253\x254\x3\x2\x2\x2\x254\x255\x3\x2\x2\x2\x255"+
		"\x257\a\xC0\x2\x2\x256\x258\a\xF0\x2\x2\x257\x256\x3\x2\x2\x2\x257\x258"+
		"\x3\x2\x2\x2\x258\x25D\x3\x2\x2\x2\x259\x25B\x5\x32\x1A\x2\x25A\x25C\a"+
		"\xF0\x2\x2\x25B\x25A\x3\x2\x2\x2\x25B\x25C\x3\x2\x2\x2\x25C\x25E\x3\x2"+
		"\x2\x2\x25D\x259\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25E\x25F\x3\x2\x2"+
		"\x2\x25F\x264\a\xC7\x2\x2\x260\x262\a\xF0\x2\x2\x261\x260\x3\x2\x2\x2"+
		"\x261\x262\x3\x2\x2\x2\x262\x263\x3\x2\x2\x2\x263\x265\x5\x36\x1C\x2\x264"+
		"\x261\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x26F\x3\x2\x2\x2\x266\x268"+
		"\a\xF0\x2\x2\x267\x266\x3\x2\x2\x2\x267\x268\x3\x2\x2\x2\x268\x269\x3"+
		"\x2\x2\x2\x269\x26A\a\xC0\x2\x2\x26A\x26B\x5> \x2\x26B\x26C\a\xC7\x2\x2"+
		"\x26C\x26E\x3\x2\x2\x2\x26D\x267\x3\x2\x2\x2\x26E\x271\x3\x2\x2\x2\x26F"+
		"\x26D\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270+\x3\x2\x2\x2\x271\x26F\x3"+
		"\x2\x2\x2\x272\x275\x5(\x15\x2\x273\x275\x5*\x16\x2\x274\x272\x3\x2\x2"+
		"\x2\x274\x273\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2\x275\x27A\x3\x2\x2\x2"+
		"\x276\x278\x5.\x18\x2\x277\x279\a\xF0\x2\x2\x278\x277\x3\x2\x2\x2\x278"+
		"\x279\x3\x2\x2\x2\x279\x27B\x3\x2\x2\x2\x27A\x276\x3\x2\x2\x2\x27B\x27C"+
		"\x3\x2\x2\x2\x27C\x27A\x3\x2\x2\x2\x27C\x27D\x3\x2\x2\x2\x27D\x282\x3"+
		"\x2\x2\x2\x27E\x280\a\xF0\x2\x2\x27F\x27E\x3\x2\x2\x2\x27F\x280\x3\x2"+
		"\x2\x2\x280\x281\x3\x2\x2\x2\x281\x283\x5\x36\x1C\x2\x282\x27F\x3\x2\x2"+
		"\x2\x282\x283\x3\x2\x2\x2\x283\x28D\x3\x2\x2\x2\x284\x286\a\xF0\x2\x2"+
		"\x285\x284\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2\x286\x287\x3\x2\x2\x2\x287"+
		"\x288\a\xC0\x2\x2\x288\x289\x5> \x2\x289\x28A\a\xC7\x2\x2\x28A\x28C\x3"+
		"\x2\x2\x2\x28B\x285\x3\x2\x2\x2\x28C\x28F\x3\x2\x2\x2\x28D\x28B\x3\x2"+
		"\x2\x2\x28D\x28E\x3\x2\x2\x2\x28E-\x3\x2\x2\x2\x28F\x28D\x3\x2\x2\x2\x290"+
		"\x292\t\x5\x2\x2\x291\x293\a\xF0\x2\x2\x292\x291\x3\x2\x2\x2\x292\x293"+
		"\x3\x2\x2\x2\x293\x296\x3\x2\x2\x2\x294\x297\x5(\x15\x2\x295\x297\x5*"+
		"\x16\x2\x296\x294\x3\x2\x2\x2\x296\x295\x3\x2\x2\x2\x297/\x3\x2\x2\x2"+
		"\x298\x29A\a\xF0\x2\x2\x299\x298\x3\x2\x2\x2\x299\x29A\x3\x2\x2\x2\x29A"+
		"\x29B\x3\x2\x2\x2\x29B\x29C\x5\x36\x1C\x2\x29C\x31\x3\x2\x2\x2\x29D\x29F"+
		"\x5\x34\x1B\x2\x29E\x29D\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x2A1\x3"+
		"\x2\x2\x2\x2A0\x2A2\a\xF0\x2\x2\x2A1\x2A0\x3\x2\x2\x2\x2A1\x2A2\x3\x2"+
		"\x2\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2A5\t\x6\x2\x2\x2A4\x2A6\a\xF0\x2\x2"+
		"\x2A5\x2A4\x3\x2\x2\x2\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2A8\x3\x2\x2\x2\x2A7"+
		"\x29E\x3\x2\x2\x2\x2A8\x2AB\x3\x2\x2\x2\x2A9\x2A7\x3\x2\x2\x2\x2A9\x2AA"+
		"\x3\x2\x2\x2\x2AA\x2AC\x3\x2\x2\x2\x2AB\x2A9\x3\x2\x2\x2\x2AC\x2B9\x5"+
		"\x34\x1B\x2\x2AD\x2AF\a\xF0\x2\x2\x2AE\x2AD\x3\x2\x2\x2\x2AE\x2AF\x3\x2"+
		"\x2\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0\x2B2\t\x6\x2\x2\x2B1\x2B3\a\xF0\x2\x2"+
		"\x2B2\x2B1\x3\x2\x2\x2\x2B2\x2B3\x3\x2\x2\x2\x2B3\x2B5\x3\x2\x2\x2\x2B4"+
		"\x2B6\x5\x34\x1B\x2\x2B5\x2B4\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6\x2B8"+
		"\x3\x2\x2\x2\x2B7\x2AE\x3\x2\x2\x2\x2B8\x2BB\x3\x2\x2\x2\x2B9\x2B7\x3"+
		"\x2\x2\x2\x2B9\x2BA\x3\x2\x2\x2\x2BA\x33\x3\x2\x2\x2\x2BB\x2B9\x3\x2\x2"+
		"\x2\x2BC\x2BE\a\xC0\x2\x2\x2BD\x2BC\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2"+
		"\x2BE\x2C1\x3\x2\x2\x2\x2BF\x2C0\t\a\x2\x2\x2C0\x2C2\a\xF0\x2\x2\x2C1"+
		"\x2BF\x3\x2\x2\x2\x2C1\x2C2\x3\x2\x2\x2\x2C2\x2C4\x3\x2\x2\x2\x2C3\x2C5"+
		"\a\xC7\x2\x2\x2C4\x2C3\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2\x2\x2C5\x2C6\x3"+
		"\x2\x2\x2\x2C6\x2C7\x5$\x13\x2\x2C7\x35\x3\x2\x2\x2\x2C8\x2CA\a\x4\x2"+
		"\x2\x2C9\x2CB\a\xF0\x2\x2\x2CA\x2C9\x3\x2\x2\x2\x2CA\x2CB\x3\x2\x2\x2"+
		"\x2CB\x2CC\x3\x2\x2\x2\x2CC\x2CE\x5\x42\"\x2\x2CD\x2CF\x5R*\x2\x2CE\x2CD"+
		"\x3\x2\x2\x2\x2CE\x2CF\x3\x2\x2\x2\x2CF\x37\x3\x2\x2\x2\x2D0\x2E2\a\xC0"+
		"\x2\x2\x2D1\x2D3\a\xF0\x2\x2\x2D2\x2D1\x3\x2\x2\x2\x2D2\x2D3\x3\x2\x2"+
		"\x2\x2D3\x2D4\x3\x2\x2\x2\x2D4\x2DF\x5:\x1E\x2\x2D5\x2D7\a\xF0\x2\x2\x2D6"+
		"\x2D5\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D8\x2DA"+
		"\a\t\x2\x2\x2D9\x2DB\a\xF0\x2\x2\x2DA\x2D9\x3\x2\x2\x2\x2DA\x2DB\x3\x2"+
		"\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC\x2DE\x5:\x1E\x2\x2DD\x2D6\x3\x2\x2\x2"+
		"\x2DE\x2E1\x3\x2\x2\x2\x2DF\x2DD\x3\x2\x2\x2\x2DF\x2E0\x3\x2\x2\x2\x2E0"+
		"\x2E3\x3\x2\x2\x2\x2E1\x2DF\x3\x2\x2\x2\x2E2\x2D2\x3\x2\x2\x2\x2E2\x2E3"+
		"\x3\x2\x2\x2\x2E3\x2E5\x3\x2\x2\x2\x2E4\x2E6\a\xF0\x2\x2\x2E5\x2E4\x3"+
		"\x2\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7\x2E8\a\xC7"+
		"\x2\x2\x2E8\x39\x3\x2\x2\x2\x2E9\x2EA\ax\x2\x2\x2EA\x2EC\a\xF0\x2\x2\x2EB"+
		"\x2E9\x3\x2\x2\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC\x2EF\x3\x2\x2\x2\x2ED\x2EE"+
		"\t\b\x2\x2\x2EE\x2F0\a\xF0\x2\x2\x2EF\x2ED\x3\x2\x2\x2\x2EF\x2F0\x3\x2"+
		"\x2\x2\x2F0\x2F3\x3\x2\x2\x2\x2F1\x2F2\a\x7F\x2\x2\x2F2\x2F4\a\xF0\x2"+
		"\x2\x2F3\x2F1\x3\x2\x2\x2\x2F3\x2F4\x3\x2\x2\x2\x2F4\x2F5\x3\x2\x2\x2"+
		"\x2F5\x2F7\x5\x42\"\x2\x2F6\x2F8\x5R*\x2\x2F7\x2F6\x3\x2\x2\x2\x2F7\x2F8"+
		"\x3\x2\x2\x2\x2F8\x301\x3\x2\x2\x2\x2F9\x2FB\a\xF0\x2\x2\x2FA\x2F9\x3"+
		"\x2\x2\x2\x2FA\x2FB\x3\x2\x2\x2\x2FB\x2FC\x3\x2\x2\x2\x2FC\x2FE\a\xC0"+
		"\x2\x2\x2FD\x2FF\a\xF0\x2\x2\x2FE\x2FD\x3\x2\x2\x2\x2FE\x2FF\x3\x2\x2"+
		"\x2\x2FF\x300\x3\x2\x2\x2\x300\x302\a\xC7\x2\x2\x301\x2FA\x3\x2\x2\x2"+
		"\x301\x302\x3\x2\x2\x2\x302\x307\x3\x2\x2\x2\x303\x305\a\xF0\x2\x2\x304"+
		"\x303\x3\x2\x2\x2\x304\x305\x3\x2\x2\x2\x305\x306\x3\x2\x2\x2\x306\x308"+
		"\x5\x46$\x2\x307\x304\x3\x2\x2\x2\x307\x308\x3\x2\x2\x2\x308\x30D\x3\x2"+
		"\x2\x2\x309\x30B\a\xF0\x2\x2\x30A\x309\x3\x2\x2\x2\x30A\x30B\x3\x2\x2"+
		"\x2\x30B\x30C\x3\x2\x2\x2\x30C\x30E\x5<\x1F\x2\x30D\x30A\x3\x2\x2\x2\x30D"+
		"\x30E\x3\x2\x2\x2\x30E;\x3\x2\x2\x2\x30F\x311\a\xBC\x2\x2\x310\x312\a"+
		"\xF0\x2\x2\x311\x310\x3\x2\x2\x2\x311\x312\x3\x2\x2\x2\x312\x313\x3\x2"+
		"\x2\x2\x313\x314\x5$\x13\x2\x314=\x3\x2\x2\x2\x315\x320\x5@!\x2\x316\x318"+
		"\a\xF0\x2\x2\x317\x316\x3\x2\x2\x2\x317\x318\x3\x2\x2\x2\x318\x319\x3"+
		"\x2\x2\x2\x319\x31B\a\t\x2\x2\x31A\x31C\a\xF0\x2\x2\x31B\x31A\x3\x2\x2"+
		"\x2\x31B\x31C\x3\x2\x2\x2\x31C\x31D\x3\x2\x2\x2\x31D\x31F\x5@!\x2\x31E"+
		"\x317\x3\x2\x2\x2\x31F\x322\x3\x2\x2\x2\x320\x31E\x3\x2\x2\x2\x320\x321"+
		"\x3\x2\x2\x2\x321?\x3\x2\x2\x2\x322\x320\x3\x2\x2\x2\x323\x324\x5$\x13"+
		"\x2\x324\x325\a\xF0\x2\x2\x325\x326\a\xA8\x2\x2\x326\x327\a\xF0\x2\x2"+
		"\x327\x329\x3\x2\x2\x2\x328\x323\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329"+
		"\x32A\x3\x2\x2\x2\x32A\x32B\x5$\x13\x2\x32B\x41\x3\x2\x2\x2\x32C\x32F"+
		"\a\xF1\x2\x2\x32D\x32F\x5V,\x2\x32E\x32C\x3\x2\x2\x2\x32E\x32D\x3\x2\x2"+
		"\x2\x32F\x330\x3\x2\x2\x2\x330\x32E\x3\x2\x2\x2\x330\x331\x3\x2\x2\x2"+
		"\x331\x43\x3\x2\x2\x2\x332\x333\a\xAB\x2\x2\x333\x334\a\xF0\x2\x2\x334"+
		"\x339\x5$\x13\x2\x335\x336\a\xF0\x2\x2\x336\x337\aZ\x2\x2\x337\x338\a"+
		"\xF0\x2\x2\x338\x33A\x5P)\x2\x339\x335\x3\x2\x2\x2\x339\x33A\x3\x2\x2"+
		"\x2\x33A\x45\x3\x2\x2\x2\x33B\x33D\a\x12\x2\x2\x33C\x33E\a\xF0\x2\x2\x33D"+
		"\x33C\x3\x2\x2\x2\x33D\x33E\x3\x2\x2\x2\x33E\x341\x3\x2\x2\x2\x33F\x340"+
		"\ap\x2\x2\x340\x342\a\xF0\x2\x2\x341\x33F\x3\x2\x2\x2\x341\x342\x3\x2"+
		"\x2\x2\x342\x343\x3\x2\x2\x2\x343\x348\x5P)\x2\x344\x346\a\xF0\x2\x2\x345"+
		"\x344\x3\x2\x2\x2\x345\x346\x3\x2\x2\x2\x346\x347\x3\x2\x2\x2\x347\x349"+
		"\x5L\'\x2\x348\x345\x3\x2\x2\x2\x348\x349\x3\x2\x2\x2\x349G\x3\x2\x2\x2"+
		"\x34A\x34B\t\t\x2\x2\x34BI\x3\x2\x2\x2\x34C\x351\x5\x42\"\x2\x34D\x34E"+
		"\t\x5\x2\x2\x34E\x350\x5\x42\"\x2\x34F\x34D\x3\x2\x2\x2\x350\x353\x3\x2"+
		"\x2\x2\x351\x34F\x3\x2\x2\x2\x351\x352\x3\x2\x2\x2\x352K\x3\x2\x2\x2\x353"+
		"\x351\x3\x2\x2\x2\x354\x356\a\xC3\x2\x2\x355\x357\a\xF0\x2\x2\x356\x355"+
		"\x3\x2\x2\x2\x356\x357\x3\x2\x2\x2\x357\x35A\x3\x2\x2\x2\x358\x35B\a\xCE"+
		"\x2\x2\x359\x35B\x5\x42\"\x2\x35A\x358\x3\x2\x2\x2\x35A\x359\x3\x2\x2"+
		"\x2\x35BM\x3\x2\x2\x2\x35C\x35D\t\n\x2\x2\x35DO\x3\x2\x2\x2\x35E\x361"+
		"\x5H%\x2\x35F\x361\x5J&\x2\x360\x35E\x3\x2\x2\x2\x360\x35F\x3\x2\x2\x2"+
		"\x361\x36A\x3\x2\x2\x2\x362\x364\a\xF0\x2\x2\x363\x362\x3\x2\x2\x2\x363"+
		"\x364\x3\x2\x2\x2\x364\x365\x3\x2\x2\x2\x365\x367\a\xC0\x2\x2\x366\x368"+
		"\a\xF0\x2\x2\x367\x366\x3\x2\x2\x2\x367\x368\x3\x2\x2\x2\x368\x369\x3"+
		"\x2\x2\x2\x369\x36B\a\xC7\x2\x2\x36A\x363\x3\x2\x2\x2\x36A\x36B\x3\x2"+
		"\x2\x2\x36BQ\x3\x2\x2\x2\x36C\x36D\t\v\x2\x2\x36DS\x3\x2\x2\x2\x36E\x36F"+
		"\t\f\x2\x2\x36FU\x3\x2\x2\x2\x370\x371\t\r\x2\x2\x371W\x3\x2\x2\x2\x372"+
		"\x373\a\xEB\x2\x2\x373Y\x3\x2\x2\x2\x374\x375\a\xEC\x2\x2\x375[\x3\x2"+
		"\x2\x2\x376\x378\a\xF0\x2\x2\x377\x376\x3\x2\x2\x2\x377\x378\x3\x2\x2"+
		"\x2\x378\x37C\x3\x2\x2\x2\x379\x37D\a\xEA\x2\x2\x37A\x37D\x5Z.\x2\x37B"+
		"\x37D\x5X-\x2\x37C\x379\x3\x2\x2\x2\x37C\x37A\x3\x2\x2\x2\x37C\x37B\x3"+
		"\x2\x2\x2\x37D\x37F\x3\x2\x2\x2\x37E\x380\a\xF0\x2\x2\x37F\x37E\x3\x2"+
		"\x2\x2\x37F\x380\x3\x2\x2\x2\x380]\x3\x2\x2\x2\x381\x38A\x5\\/\x2\x382"+
		"\x384\a\xF0\x2\x2\x383\x382\x3\x2\x2\x2\x383\x384\x3\x2\x2\x2\x384\x385"+
		"\x3\x2\x2\x2\x385\x387\a\xEE\x2\x2\x386\x388\a\xF0\x2\x2\x387\x386\x3"+
		"\x2\x2\x2\x387\x388\x3\x2\x2\x2\x388\x38A\x3\x2\x2\x2\x389\x381\x3\x2"+
		"\x2\x2\x389\x383\x3\x2\x2\x2\x38A\x38D\x3\x2\x2\x2\x38B\x389\x3\x2\x2"+
		"\x2\x38B\x38C\x3\x2\x2\x2\x38C_\x3\x2\x2\x2\x38D\x38B\x3\x2\x2\x2\xB3"+
		"\x64jmquy\x7F\x82\x8C\x8E\x94\x9C\xA3\xA9\xB2\xBA\xC4\xCA\xCE\xD2\xD6"+
		"\xDB\xE4\xEE\xF2\xF6\xFA\xFD\x100\x103\x106\x10A\x111\x115\x11B\x11E\x121"+
		"\x125\x129\x130\x134\x13A\x13D\x141\x148\x14C\x152\x155\x159\x160\x164"+
		"\x168\x16C\x16F\x173\x179\x17D\x181\x188\x18D\x192\x196\x19C\x1A1\x1A8"+
		"\x1AC\x1B0\x1B5\x1BC\x1C0\x1C4\x1C9\x1CD\x1D2\x1D6\x1DB\x1DF\x1E4\x1E8"+
		"\x1ED\x1F1\x1F6\x1FA\x1FF\x203\x208\x20C\x211\x215\x21A\x21E\x223\x227"+
		"\x22A\x22C\x233\x237\x23A\x23D\x240\x248\x24D\x250\x253\x257\x25B\x25D"+
		"\x261\x264\x267\x26F\x274\x278\x27C\x27F\x282\x285\x28D\x292\x296\x299"+
		"\x29E\x2A1\x2A5\x2A9\x2AE\x2B2\x2B5\x2B9\x2BD\x2C1\x2C4\x2CA\x2CE\x2D2"+
		"\x2D6\x2DA\x2DF\x2E2\x2E5\x2EB\x2EF\x2F3\x2F7\x2FA\x2FE\x301\x304\x307"+
		"\x30A\x30D\x311\x317\x31B\x320\x328\x32E\x330\x339\x33D\x341\x345\x348"+
		"\x351\x356\x35A\x360\x363\x367\x36A\x377\x37C\x37F\x383\x387\x389\x38B";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Grammar
