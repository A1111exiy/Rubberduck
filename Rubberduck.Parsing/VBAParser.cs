//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Mathieu\Source\Repos\Rubberduck\Rubberduck.Parsing\VBA.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		T__8=1, T__7=2, T__6=3, T__5=4, T__4=5, T__3=6, T__2=7, T__1=8, T__0=9, 
		ACCESS=10, ADDRESSOF=11, ALIAS=12, AND=13, ATTRIBUTE=14, APPACTIVATE=15, 
		APPEND=16, AS=17, BEGIN=18, BEEP=19, BINARY=20, BOOLEAN=21, BYVAL=22, 
		BYREF=23, BYTE=24, CALL=25, CASE=26, CHDIR=27, CHDRIVE=28, CLASS=29, CLOSE=30, 
		COLLECTION=31, CONST=32, DATABASE=33, DATE=34, DECLARE=35, DEFBOOL=36, 
		DEFBYTE=37, DEFDATE=38, DEFDBL=39, DEFDEC=40, DEFCUR=41, DEFINT=42, DEFLNG=43, 
		DEFOBJ=44, DEFSNG=45, DEFSTR=46, DEFVAR=47, DELETESETTING=48, DIM=49, 
		DO=50, DOUBLE=51, EACH=52, ELSE=53, ELSEIF=54, END_ENUM=55, END_FUNCTION=56, 
		END_IF=57, END_PROPERTY=58, END_SELECT=59, END_SUB=60, END_TYPE=61, END_WITH=62, 
		END=63, ENUM=64, EQV=65, ERASE=66, ERROR=67, EVENT=68, EXIT_DO=69, EXIT_FOR=70, 
		EXIT_FUNCTION=71, EXIT_PROPERTY=72, EXIT_SUB=73, FALSE=74, FILECOPY=75, 
		FRIEND=76, FOR=77, FUNCTION=78, GET=79, GLOBAL=80, GOSUB=81, GOTO=82, 
		IF=83, IMP=84, IMPLEMENTS=85, IN=86, INPUT=87, IS=88, INTEGER=89, KILL=90, 
		LOAD=91, LOCK=92, LONG=93, LOOP=94, LEN=95, LET=96, LIB=97, LIKE=98, LINE_INPUT=99, 
		LOCK_READ=100, LOCK_WRITE=101, LOCK_READ_WRITE=102, LSET=103, MACRO_IF=104, 
		MACRO_ELSEIF=105, MACRO_ELSE=106, MACRO_END_IF=107, ME=108, MID=109, MKDIR=110, 
		MOD=111, NAME=112, NEXT=113, NEW=114, NOT=115, NOTHING=116, NULL=117, 
		ON=118, ON_ERROR=119, OPEN=120, OPTIONAL=121, OPTION_BASE=122, OPTION_EXPLICIT=123, 
		OPTION_COMPARE=124, OPTION_PRIVATE_MODULE=125, OR=126, OUTPUT=127, PARAMARRAY=128, 
		PRESERVE=129, PRINT=130, PRIVATE=131, PROPERTY_GET=132, PROPERTY_LET=133, 
		PROPERTY_SET=134, PTRSAFE=135, PUBLIC=136, PUT=137, RANDOM=138, RANDOMIZE=139, 
		RAISEEVENT=140, READ=141, READ_WRITE=142, REDIM=143, REM=144, RESET=145, 
		RESUME=146, RETURN=147, RMDIR=148, RSET=149, SAVEPICTURE=150, SAVESETTING=151, 
		SEEK=152, SELECT=153, SENDKEYS=154, SET=155, SETATTR=156, SHARED=157, 
		SINGLE=158, SPC=159, STATIC=160, STEP=161, STOP=162, STRING=163, SUB=164, 
		TAB=165, TEXT=166, THEN=167, TIME=168, TO=169, TRUE=170, TYPE=171, TYPEOF=172, 
		UNLOAD=173, UNLOCK=174, UNTIL=175, VARIANT=176, VERSION=177, WEND=178, 
		WHILE=179, WIDTH=180, WITH=181, WITHEVENTS=182, WRITE=183, XOR=184, AMPERSAND=185, 
		ASSIGN=186, DIV=187, EQ=188, GEQ=189, GT=190, LEQ=191, LPAREN=192, LT=193, 
		MINUS=194, MINUS_EQ=195, MULT=196, NEQ=197, PLUS=198, PLUS_EQ=199, POW=200, 
		RPAREN=201, L_SQUARE_BRACKET=202, R_SQUARE_BRACKET=203, STRINGLITERAL=204, 
		DATELITERAL=205, COLORLITERAL=206, INTEGERLITERAL=207, DOUBLELITERAL=208, 
		FILENUMBER=209, IDENTIFIER=210, LINE_CONTINUATION=211, NEWLINE=212, COMMENT=213, 
		WS=214;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'%'", "'.'", "','", "':'", "'@'", "'#'", "';'", "'!'", "'$'", 
		"ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", "APPEND", 
		"AS", "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", 
		"CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "COLLECTION", "CONST", 
		"DATABASE", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", 
		"DEFDEC", "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR", 
		"DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", 
		"END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
		"END_TYPE", "END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", 
		"EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", 
		"FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", 
		"IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", "LOAD", 
		"LOCK", "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", 
		"LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", 
		"MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT", "NEW", "NOT", 
		"NOTHING", "NULL", "ON", "ON_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", 
		"READ", "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RMDIR", 
		"RSET", "SAVEPICTURE", "SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", 
		"SETATTR", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", 
		"SUB", "TAB", "TEXT", "THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", 
		"WITH", "WITHEVENTS", "WRITE", "XOR", "'&'", "':='", "DIV", "'='", "'>='", 
		"'>'", "'<='", "'('", "'<'", "'-'", "'-='", "'*'", "'<>'", "'+'", "'+='", 
		"'^'", "')'", "'['", "']'", "STRINGLITERAL", "DATELITERAL", "COLORLITERAL", 
		"INTEGERLITERAL", "DOUBLELITERAL", "FILENUMBER", "IDENTIFIER", "LINE_CONTINUATION", 
		"NEWLINE", "COMMENT", "WS"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleDeclarations = 6, 
		RULE_moduleOption = 7, RULE_moduleDeclarationsElement = 8, RULE_moduleBody = 9, 
		RULE_moduleBodyElement = 10, RULE_moduleBlock = 11, RULE_attributeStmt = 12, 
		RULE_block = 13, RULE_blockStmt = 14, RULE_appactivateStmt = 15, RULE_beepStmt = 16, 
		RULE_chdirStmt = 17, RULE_chdriveStmt = 18, RULE_closeStmt = 19, RULE_constStmt = 20, 
		RULE_constSubStmt = 21, RULE_dateStmt = 22, RULE_declareStmt = 23, RULE_deftypeStmt = 24, 
		RULE_deleteSettingStmt = 25, RULE_doLoopStmt = 26, RULE_endStmt = 27, 
		RULE_enumerationStmt = 28, RULE_enumerationStmt_Constant = 29, RULE_eraseStmt = 30, 
		RULE_errorStmt = 31, RULE_eventStmt = 32, RULE_exitStmt = 33, RULE_filecopyStmt = 34, 
		RULE_forEachStmt = 35, RULE_forNextStmt = 36, RULE_functionStmt = 37, 
		RULE_getStmt = 38, RULE_goSubStmt = 39, RULE_goToStmt = 40, RULE_ifThenElseStmt = 41, 
		RULE_ifBlockStmt = 42, RULE_ifConditionStmt = 43, RULE_ifElseIfBlockStmt = 44, 
		RULE_ifElseBlockStmt = 45, RULE_implementsStmt = 46, RULE_inputStmt = 47, 
		RULE_killStmt = 48, RULE_letStmt = 49, RULE_lineInputStmt = 50, RULE_loadStmt = 51, 
		RULE_lockStmt = 52, RULE_lsetStmt = 53, RULE_macroIfThenElseStmt = 54, 
		RULE_macroIfBlockStmt = 55, RULE_macroElseIfBlockStmt = 56, RULE_macroElseBlockStmt = 57, 
		RULE_midStmt = 58, RULE_mkdirStmt = 59, RULE_nameStmt = 60, RULE_onErrorStmt = 61, 
		RULE_onGoToStmt = 62, RULE_onGoSubStmt = 63, RULE_openStmt = 64, RULE_outputList = 65, 
		RULE_outputList_Expression = 66, RULE_printStmt = 67, RULE_propertyGetStmt = 68, 
		RULE_propertySetStmt = 69, RULE_propertyLetStmt = 70, RULE_putStmt = 71, 
		RULE_raiseEventStmt = 72, RULE_randomizeStmt = 73, RULE_redimStmt = 74, 
		RULE_redimSubStmt = 75, RULE_resetStmt = 76, RULE_resumeStmt = 77, RULE_returnStmt = 78, 
		RULE_rmdirStmt = 79, RULE_rsetStmt = 80, RULE_savepictureStmt = 81, RULE_saveSettingStmt = 82, 
		RULE_seekStmt = 83, RULE_selectCaseStmt = 84, RULE_sC_Case = 85, RULE_sC_Cond = 86, 
		RULE_sendkeysStmt = 87, RULE_setattrStmt = 88, RULE_setStmt = 89, RULE_stopStmt = 90, 
		RULE_subStmt = 91, RULE_timeStmt = 92, RULE_typeStmt = 93, RULE_typeStmt_Element = 94, 
		RULE_typeOfStmt = 95, RULE_unloadStmt = 96, RULE_unlockStmt = 97, RULE_valueStmt = 98, 
		RULE_variableStmt = 99, RULE_variableListStmt = 100, RULE_variableSubStmt = 101, 
		RULE_whileWendStmt = 102, RULE_widthStmt = 103, RULE_withStmt = 104, RULE_writeStmt = 105, 
		RULE_explicitCallStmt = 106, RULE_eCS_ProcedureCall = 107, RULE_eCS_MemberProcedureCall = 108, 
		RULE_implicitCallStmt_InBlock = 109, RULE_iCS_B_ProcedureCall = 110, RULE_iCS_B_MemberProcedureCall = 111, 
		RULE_implicitCallStmt_InStmt = 112, RULE_iCS_S_VariableOrProcedureCall = 113, 
		RULE_iCS_S_ProcedureOrArrayCall = 114, RULE_iCS_S_MembersCall = 115, RULE_iCS_S_MemberCall = 116, 
		RULE_iCS_S_DictionaryCall = 117, RULE_argsCall = 118, RULE_argCall = 119, 
		RULE_dictionaryCallStmt = 120, RULE_argList = 121, RULE_arg = 122, RULE_argDefaultValue = 123, 
		RULE_subscripts = 124, RULE_subscript = 125, RULE_ambiguousIdentifier = 126, 
		RULE_asTypeClause = 127, RULE_baseType = 128, RULE_certainIdentifier = 129, 
		RULE_comparisonOperator = 130, RULE_complexType = 131, RULE_fieldLength = 132, 
		RULE_letterrange = 133, RULE_lineLabel = 134, RULE_lineNumber = 135, RULE_literal = 136, 
		RULE_type = 137, RULE_typeHint = 138, RULE_visibility = 139, RULE_ambiguousKeyword = 140;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement", 
		"moduleBody", "moduleBodyElement", "moduleBlock", "attributeStmt", "block", 
		"blockStmt", "appactivateStmt", "beepStmt", "chdirStmt", "chdriveStmt", 
		"closeStmt", "constStmt", "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt", 
		"deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant", 
		"eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", 
		"forNextStmt", "functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt", 
		"ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
		"implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
		"loadStmt", "lockStmt", "lsetStmt", "macroIfThenElseStmt", "macroIfBlockStmt", 
		"macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt", "mkdirStmt", 
		"nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", "outputList", 
		"outputList_Expression", "printStmt", "propertyGetStmt", "propertySetStmt", 
		"propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
		"redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", "rmdirStmt", 
		"rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt", "selectCaseStmt", 
		"sC_Case", "sC_Cond", "sendkeysStmt", "setattrStmt", "setStmt", "stopStmt", 
		"subStmt", "timeStmt", "typeStmt", "typeStmt_Element", "typeOfStmt", "unloadStmt", 
		"unlockStmt", "valueStmt", "variableStmt", "variableListStmt", "variableSubStmt", 
		"whileWendStmt", "widthStmt", "withStmt", "writeStmt", "explicitCallStmt", 
		"eCS_ProcedureCall", "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
		"iCS_B_ProcedureCall", "iCS_B_MemberProcedureCall", "implicitCallStmt_InStmt", 
		"iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_MembersCall", 
		"iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", "argCall", "dictionaryCallStmt", 
		"argList", "arg", "argDefaultValue", "subscripts", "subscript", "ambiguousIdentifier", 
		"asTypeClause", "baseType", "certainIdentifier", "comparisonOperator", 
		"complexType", "fieldLength", "letterrange", "lineLabel", "lineNumber", 
		"literal", "type", "typeHint", "visibility", "ambiguousKeyword"
	};

	public override string GrammarFileName { get { return "VBA.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; module();
			State = 283; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ModuleDeclarationsContext moduleDeclarations() {
			return GetRuleContext<ModuleDeclarationsContext>(0);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 285; Match(WS);
				}
				break;
			}
			State = 291;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 288; Match(NEWLINE);
					}
					} 
				}
				State = 293;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 300;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 294; moduleHeader();
				State = 296;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 295; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 298;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 303;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 302; moduleConfig();
				}
				break;
			}
			State = 308;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 305; Match(NEWLINE);
					}
					} 
				}
				State = 310;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 312;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 311; moduleAttributes();
				}
				break;
			}
			State = 317;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 314; Match(NEWLINE);
					}
					} 
				}
				State = 319;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 321;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 320; moduleDeclarations();
				}
				break;
			}
			State = 326;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 323; Match(NEWLINE);
					}
					} 
				}
				State = 328;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 330;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (L_SQUARE_BRACKET - 202)) | (1L << (INTEGERLITERAL - 202)) | (1L << (IDENTIFIER - 202)))) != 0)) {
				{
				State = 329; moduleBody();
				}
			}

			State = 335;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 332; Match(NEWLINE);
				}
				}
				State = 337;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 339;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 338; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(VERSION);
			State = 342; Match(WS);
			State = 343; Match(DOUBLELITERAL);
			State = 344; Match(WS);
			State = 345; Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(BEGIN);
			State = 349;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 348; Match(NEWLINE);
				}
				}
				State = 351;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 354;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 353; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 356;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 358; Match(END);
			State = 360;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 359; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 362;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(VBAParser.NEWLINE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; ambiguousIdentifier();
			State = 366;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 365; Match(WS);
				}
			}

			State = 368; Match(EQ);
			State = 370;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 369; Match(WS);
				}
			}

			State = 372; literal();
			State = 373; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 375; attributeStmt();
					State = 377;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 376; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 379;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 383;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleDeclarations);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 385; moduleDeclarationsElement();
			State = 394;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 387;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 386; Match(NEWLINE);
						}
						}
						State = 389;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 391; moduleDeclarationsElement();
					}
					} 
				}
				State = 396;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleOption);
		int _la;
		try {
			State = 405;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 397; Match(OPTION_BASE);
				State = 398; Match(WS);
				State = 399; Match(INTEGERLITERAL);
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 400; Match(OPTION_COMPARE);
				State = 401; Match(WS);
				State = 402;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 403; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 404; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public ModuleBlockContext moduleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleDeclarationsElement);
		try {
			State = 414;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 407; moduleBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 408; declareStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 409; enumerationStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 410; eventStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 411; macroIfThenElseStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 412; moduleOption();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 413; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; moduleBodyElement();
			State = 425;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 418;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 417; Match(NEWLINE);
						}
						}
						State = 420;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 422; moduleBodyElement();
					}
					} 
				}
				State = 427;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public ModuleBlockContext moduleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleBodyElement);
		try {
			State = 435;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428; moduleBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429; functionStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 430; macroIfThenElseStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 431; propertyGetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 432; propertySetStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 433; propertyLetStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 434; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ModuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBlockContext moduleBlock() {
		ModuleBlockContext _localctx = new ModuleBlockContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_moduleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<LiteralContext> literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; Match(ATTRIBUTE);
			State = 440; Match(WS);
			State = 441; implicitCallStmt_InStmt();
			State = 443;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 442; Match(WS);
				}
			}

			State = 445; Match(EQ);
			State = 447;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 446; Match(WS);
				}
			}

			State = 449; literal();
			State = 460;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 451;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 450; Match(WS);
						}
					}

					State = 453; Match(T__6);
					State = 455;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 454; Match(WS);
						}
					}

					State = 457; literal();
					}
					} 
				}
				State = 462;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public LineLabelContext lineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 463; lineLabel();
				}
				break;
			}
			State = 466; blockStmt();
			State = 478;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 468;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 467; Match(NEWLINE);
						}
						}
						State = 470;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 473;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 472; Match(WS);
						}
					}

					State = 475; blockStmt();
					}
					} 
				}
				State = 480;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			}
			State = 484;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 481; Match(NEWLINE);
					}
					} 
				}
				State = 486;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public KillStmtContext killStmt() {
			return GetRuleContext<KillStmtContext>(0);
		}
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public SetattrStmtContext setattrStmt() {
			return GetRuleContext<SetattrStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public ChdriveStmtContext chdriveStmt() {
			return GetRuleContext<ChdriveStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public SendkeysStmtContext sendkeysStmt() {
			return GetRuleContext<SendkeysStmtContext>(0);
		}
		public DateStmtContext dateStmt() {
			return GetRuleContext<DateStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public RandomizeStmtContext randomizeStmt() {
			return GetRuleContext<RandomizeStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public DeftypeStmtContext deftypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public UnloadStmtContext unloadStmt() {
			return GetRuleContext<UnloadStmtContext>(0);
		}
		public MkdirStmtContext mkdirStmt() {
			return GetRuleContext<MkdirStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public BeepStmtContext beepStmt() {
			return GetRuleContext<BeepStmtContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public AppactivateStmtContext appactivateStmt() {
			return GetRuleContext<AppactivateStmtContext>(0);
		}
		public ChdirStmtContext chdirStmt() {
			return GetRuleContext<ChdirStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public SavepictureStmtContext savepictureStmt() {
			return GetRuleContext<SavepictureStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public DeleteSettingStmtContext deleteSettingStmt() {
			return GetRuleContext<DeleteSettingStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public TimeStmtContext timeStmt() {
			return GetRuleContext<TimeStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public IfThenElseStmtContext ifThenElseStmt() {
			return GetRuleContext<IfThenElseStmtContext>(0);
		}
		public FilecopyStmtContext filecopyStmt() {
			return GetRuleContext<FilecopyStmtContext>(0);
		}
		public LoadStmtContext loadStmt() {
			return GetRuleContext<LoadStmtContext>(0);
		}
		public SaveSettingStmtContext saveSettingStmt() {
			return GetRuleContext<SaveSettingStmtContext>(0);
		}
		public RmdirStmtContext rmdirStmt() {
			return GetRuleContext<RmdirStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_blockStmt);
		try {
			State = 553;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 487; appactivateStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 488; attributeStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 489; beepStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 490; chdirStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 491; chdriveStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 492; closeStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 493; constStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 494; dateStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 495; deleteSettingStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 496; deftypeStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 497; doLoopStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 498; endStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 499; eraseStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 500; errorStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 501; exitStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 502; explicitCallStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 503; filecopyStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 504; forEachStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 505; forNextStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 506; getStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 507; goSubStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 508; goToStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 509; ifThenElseStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 510; implementsStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 511; implicitCallStmt_InBlock();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 512; inputStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 513; killStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 514; letStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 515; lineInputStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 516; loadStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 517; lockStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 518; lsetStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 519; macroIfThenElseStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 520; midStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 521; mkdirStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 522; nameStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 523; onErrorStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 524; onGoToStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 525; onGoSubStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 526; openStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 527; printStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 528; putStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 529; raiseEventStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 530; randomizeStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 531; redimStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 532; resetStmt();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 533; resumeStmt();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 534; returnStmt();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 535; rmdirStmt();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 536; rsetStmt();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 537; savepictureStmt();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 538; saveSettingStmt();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 539; seekStmt();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 540; selectCaseStmt();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 541; sendkeysStmt();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 542; setattrStmt();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 543; setStmt();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 544; stopStmt();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 545; timeStmt();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 546; unloadStmt();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 547; unlockStmt();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 548; variableStmt();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 549; whileWendStmt();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 550; widthStmt();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 551; withStmt();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 552; writeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppactivateStmtContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public AppactivateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appactivateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAppactivateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAppactivateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppactivateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppactivateStmtContext appactivateStmt() {
		AppactivateStmtContext _localctx = new AppactivateStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_appactivateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555; Match(APPACTIVATE);
			State = 556; Match(WS);
			State = 557; valueStmt(0);
			State = 566;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 559;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 558; Match(WS);
					}
				}

				State = 561; Match(T__6);
				State = 563;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 562; Match(WS);
					}
				}

				State = 565; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepStmtContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public BeepStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBeepStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBeepStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeepStmtContext beepStmt() {
		BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_beepStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ChdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterChdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitChdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdirStmtContext chdirStmt() {
		ChdirStmtContext _localctx = new ChdirStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_chdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570; Match(CHDIR);
			State = 571; Match(WS);
			State = 572; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdriveStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ChdriveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdriveStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterChdriveStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitChdriveStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdriveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdriveStmtContext chdriveStmt() {
		ChdriveStmtContext _localctx = new ChdriveStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_chdriveStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574; Match(CHDRIVE);
			State = 575; Match(WS);
			State = 576; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 578; Match(CLOSE);
			State = 594;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 579; Match(WS);
				State = 580; valueStmt(0);
				State = 591;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 582;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 581; Match(WS);
							}
						}

						State = 584; Match(T__6);
						State = 586;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 585; Match(WS);
							}
						}

						State = 588; valueStmt(0);
						}
						} 
					}
					State = 593;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 596; visibility();
				State = 597; Match(WS);
				}
			}

			State = 601; Match(CONST);
			State = 602; Match(WS);
			State = 603; constSubStmt();
			State = 614;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,48,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 605;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 604; Match(WS);
						}
					}

					State = 607; Match(T__6);
					State = 609;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 608; Match(WS);
						}
					}

					State = 611; constSubStmt();
					}
					} 
				}
				State = 616;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,48,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617; ambiguousIdentifier();
			State = 619;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 618; typeHint();
				}
			}

			State = 623;
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 621; Match(WS);
				State = 622; asTypeClause();
				}
				break;
			}
			State = 626;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 625; Match(WS);
				}
			}

			State = 628; Match(EQ);
			State = 630;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 629; Match(WS);
				}
			}

			State = 632; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateStmtContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public DateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateStmtContext dateStmt() {
		DateStmtContext _localctx = new DateStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_dateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634; Match(DATE);
			State = 636;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 635; Match(WS);
				}
			}

			State = 638; Match(EQ);
			State = 640;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 639; Match(WS);
				}
			}

			State = 642; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 644; visibility();
				State = 645; Match(WS);
				}
			}

			State = 649; Match(DECLARE);
			State = 650; Match(WS);
			State = 653;
			_la = _input.La(1);
			if (_la==PTRSAFE) {
				{
				State = 651; Match(PTRSAFE);
				State = 652; Match(WS);
				}
			}

			State = 655;
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==SUB) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 656; Match(WS);
			State = 657; ambiguousIdentifier();
			State = 658; Match(WS);
			State = 659; Match(LIB);
			State = 660; Match(WS);
			State = 661; Match(STRINGLITERAL);
			State = 666;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 662; Match(WS);
				State = 663; Match(ALIAS);
				State = 664; Match(WS);
				State = 665; Match(STRINGLITERAL);
				}
				break;
			}
			State = 672;
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				State = 669;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 668; Match(WS);
					}
				}

				State = 671; argList();
				}
				break;
			}
			State = 676;
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				State = 674; Match(WS);
				State = 675; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public IReadOnlyList<LetterrangeContext> letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext deftypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 679; Match(WS);
			State = 680; letterrange();
			State = 691;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,63,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 682;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 681; Match(WS);
						}
					}

					State = 684; Match(T__6);
					State = 686;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 685; Match(WS);
						}
					}

					State = 688; letterrange();
					}
					} 
				}
				State = 693;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,63,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSettingStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSettingStmtContext deleteSettingStmt() {
		DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_deleteSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694; Match(DELETESETTING);
			State = 695; Match(WS);
			State = 696; valueStmt(0);
			State = 698;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 697; Match(WS);
				}
			}

			State = 700; Match(T__6);
			State = 702;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 701; Match(WS);
				}
			}

			State = 704; valueStmt(0);
			State = 713;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 706;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 705; Match(WS);
					}
				}

				State = 708; Match(T__6);
				State = 710;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 709; Match(WS);
					}
				}

				State = 712; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_doLoopStmt);
		int _la;
		try {
			State = 768;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 715; Match(DO);
				State = 717;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 716; Match(NEWLINE);
					}
					}
					State = 719;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 727;
				switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					State = 721; block();
					State = 723;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 722; Match(NEWLINE);
						}
						}
						State = 725;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 729; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 730; Match(DO);
				State = 731; Match(WS);
				State = 732;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 733; Match(WS);
				State = 734; valueStmt(0);
				State = 736;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 735; Match(NEWLINE);
					}
					}
					State = 738;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 746;
				switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
				case 1:
					{
					State = 740; block();
					State = 742;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 741; Match(NEWLINE);
						}
						}
						State = 744;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 748; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 750; Match(DO);
				State = 752;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 751; Match(NEWLINE);
					}
					}
					State = 754;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				{
				State = 756; block();
				State = 758;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 757; Match(NEWLINE);
					}
					}
					State = 760;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				State = 762; Match(LOOP);
				State = 763; Match(WS);
				State = 764;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 765; Match(WS);
				State = 766; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 772; visibility();
				State = 773; Match(WS);
				}
			}

			State = 777; Match(ENUM);
			State = 778; Match(WS);
			State = 779; ambiguousIdentifier();
			State = 781;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 780; Match(NEWLINE);
				}
				}
				State = 783;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 788;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 785; enumerationStmt_Constant();
				}
				}
				State = 790;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 791; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793; ambiguousIdentifier();
			State = 802;
			_la = _input.La(1);
			if (_la==EQ || _la==WS) {
				{
				State = 795;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 794; Match(WS);
					}
				}

				State = 797; Match(EQ);
				State = 799;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 798; Match(WS);
					}
				}

				State = 801; valueStmt(0);
				}
			}

			State = 805;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 804; Match(NEWLINE);
				}
				}
				State = 807;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_eraseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809; Match(ERASE);
			State = 810; Match(WS);
			State = 811; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813; Match(ERROR);
			State = 814; Match(WS);
			State = 815; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 817; visibility();
				State = 818; Match(WS);
				}
			}

			State = 822; Match(EVENT);
			State = 823; Match(WS);
			State = 824; ambiguousIdentifier();
			State = 826;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 825; Match(WS);
				}
			}

			State = 828; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830;
			_la = _input.La(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (EXIT_DO - 69)) | (1L << (EXIT_FOR - 69)) | (1L << (EXIT_FUNCTION - 69)) | (1L << (EXIT_PROPERTY - 69)) | (1L << (EXIT_SUB - 69)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilecopyStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filecopyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFilecopyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFilecopyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilecopyStmtContext filecopyStmt() {
		FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_filecopyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832; Match(FILECOPY);
			State = 833; Match(WS);
			State = 834; valueStmt(0);
			State = 836;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 835; Match(WS);
				}
			}

			State = 838; Match(T__6);
			State = 840;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 839; Match(WS);
				}
			}

			State = 842; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844; Match(FOR);
			State = 845; Match(WS);
			State = 846; Match(EACH);
			State = 847; Match(WS);
			State = 848; ambiguousIdentifier();
			State = 850;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 849; typeHint();
				}
			}

			State = 852; Match(WS);
			State = 853; Match(IN);
			State = 854; Match(WS);
			State = 855; valueStmt(0);
			State = 857;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 856; Match(NEWLINE);
				}
				}
				State = 859;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 867;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 861; block();
				State = 863;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 862; Match(NEWLINE);
					}
					}
					State = 865;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 869; Match(NEXT);
			State = 872;
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 870; Match(WS);
				State = 871; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874; Match(FOR);
			State = 875; Match(WS);
			State = 876; ambiguousIdentifier();
			State = 878;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 877; typeHint();
				}
			}

			State = 882;
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				State = 880; Match(WS);
				State = 881; asTypeClause();
				}
				break;
			}
			State = 885;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 884; Match(WS);
				}
			}

			State = 887; Match(EQ);
			State = 889;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 888; Match(WS);
				}
			}

			State = 891; valueStmt(0);
			State = 892; Match(WS);
			State = 893; Match(TO);
			State = 894; Match(WS);
			State = 895; valueStmt(0);
			State = 900;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 896; Match(WS);
				State = 897; Match(STEP);
				State = 898; Match(WS);
				State = 899; valueStmt(0);
				}
			}

			State = 903;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 902; Match(NEWLINE);
				}
				}
				State = 905;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 913;
			switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				State = 907; block();
				State = 909;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 908; Match(NEWLINE);
					}
					}
					State = 911;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 915; Match(NEXT);
			State = 918;
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				State = 916; Match(WS);
				State = 917; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 923;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 920; visibility();
				State = 921; Match(WS);
				}
			}

			State = 927;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 925; Match(STATIC);
				State = 926; Match(WS);
				}
			}

			State = 929; Match(FUNCTION);
			State = 930; Match(WS);
			State = 931; ambiguousIdentifier();
			State = 936;
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				State = 933;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 932; Match(WS);
					}
				}

				State = 935; argList();
				}
				break;
			}
			State = 940;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 938; Match(WS);
				State = 939; asTypeClause();
				}
			}

			State = 943;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 942; Match(NEWLINE);
				}
				}
				State = 945;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 953;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (L_SQUARE_BRACKET - 202)) | (1L << (INTEGERLITERAL - 202)) | (1L << (IDENTIFIER - 202)))) != 0)) {
				{
				State = 947; block();
				State = 949;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 948; Match(NEWLINE);
					}
					}
					State = 951;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 955; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957; Match(GET);
			State = 958; Match(WS);
			State = 959; valueStmt(0);
			State = 961;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 960; Match(WS);
				}
			}

			State = 963; Match(T__6);
			State = 965;
			switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				State = 964; Match(WS);
				}
				break;
			}
			State = 968;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
				{
				State = 967; valueStmt(0);
				}
			}

			State = 971;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 970; Match(WS);
				}
			}

			State = 973; Match(T__6);
			State = 975;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 974; Match(WS);
				}
			}

			State = 977; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979; Match(GOSUB);
			State = 980; Match(WS);
			State = 981; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 983; Match(GOTO);
			State = 984; Match(WS);
			State = 985; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStmtContext : ParserRuleContext {
		public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStmt; } }
	 
		public IfThenElseStmtContext() { }
		public virtual void CopyFrom(IfThenElseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockIfThenElseContext : IfThenElseStmtContext {
		public IfElseBlockStmtContext ifElseBlockStmt() {
			return GetRuleContext<IfElseBlockStmtContext>(0);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<IfElseIfBlockStmtContext> ifElseIfBlockStmt() {
			return GetRuleContexts<IfElseIfBlockStmtContext>();
		}
		public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i) {
			return GetRuleContext<IfElseIfBlockStmtContext>(i);
		}
		public IfBlockStmtContext ifBlockStmt() {
			return GetRuleContext<IfBlockStmtContext>(0);
		}
		public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineIfThenElseContext : IfThenElseStmtContext {
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStmtContext ifThenElseStmt() {
		IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_ifThenElseStmt);
		int _la;
		try {
			State = 1012;
			switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
			case 1:
				_localctx = new InlineIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 987; Match(IF);
				State = 988; Match(WS);
				State = 989; ifConditionStmt();
				State = 990; Match(WS);
				State = 991; Match(THEN);
				State = 992; Match(WS);
				State = 993; blockStmt();
				State = 998;
				switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
				case 1:
					{
					State = 994; Match(WS);
					State = 995; Match(ELSE);
					State = 996; Match(WS);
					State = 997; blockStmt();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BlockIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1000; ifBlockStmt();
				State = 1004;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 1001; ifElseIfBlockStmt();
					}
					}
					State = 1006;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1008;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 1007; ifElseBlockStmt();
					}
				}

				State = 1010; Match(END_IF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStmtContext ifBlockStmt() {
		IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_ifBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1014; Match(IF);
			State = 1015; Match(WS);
			State = 1016; ifConditionStmt();
			State = 1017; Match(WS);
			State = 1018; Match(THEN);
			State = 1020;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1019; Match(NEWLINE);
				}
				}
				State = 1022;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1030;
			switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				State = 1024; block();
				State = 1026;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1025; Match(NEWLINE);
					}
					}
					State = 1028;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfConditionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfConditionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionStmtContext ifConditionStmt() {
		IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_ifConditionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfBlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfBlockStmtContext ifElseIfBlockStmt() {
		IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_ifElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1034; Match(ELSEIF);
			State = 1035; Match(WS);
			State = 1036; ifConditionStmt();
			State = 1037; Match(WS);
			State = 1038; Match(THEN);
			State = 1040;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1039; Match(NEWLINE);
				}
				}
				State = 1042;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1050;
			switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				State = 1044; block();
				State = 1046;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1045; Match(NEWLINE);
					}
					}
					State = 1048;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockStmtContext ifElseBlockStmt() {
		IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_ifElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052; Match(ELSE);
			State = 1054;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1053; Match(NEWLINE);
				}
				}
				State = 1056;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1064;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (L_SQUARE_BRACKET - 202)) | (1L << (INTEGERLITERAL - 202)) | (1L << (IDENTIFIER - 202)))) != 0)) {
				{
				State = 1058; block();
				State = 1060;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1059; Match(NEWLINE);
					}
					}
					State = 1062;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1066; Match(IMPLEMENTS);
			State = 1067; Match(WS);
			State = 1068; ambiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070; Match(INPUT);
			State = 1071; Match(WS);
			State = 1072; valueStmt(0);
			State = 1081;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1074;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1073; Match(WS);
						}
					}

					State = 1076; Match(T__6);
					State = 1078;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1077; Match(WS);
						}
					}

					State = 1080; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1083;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,131,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public KillStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterKillStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitKillStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStmtContext killStmt() {
		KillStmtContext _localctx = new KillStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_killStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1085; Match(KILL);
			State = 1086; Match(WS);
			State = 1087; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode PLUS_EQ() { return GetToken(VBAParser.PLUS_EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode MINUS_EQ() { return GetToken(VBAParser.MINUS_EQ, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091;
			switch ( Interpreter.AdaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				State = 1089; Match(LET);
				State = 1090; Match(WS);
				}
				break;
			}
			State = 1093; implicitCallStmt_InStmt();
			State = 1095;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1094; Match(WS);
				}
			}

			State = 1097;
			_la = _input.La(1);
			if ( !(((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (EQ - 188)) | (1L << (MINUS_EQ - 188)) | (1L << (PLUS_EQ - 188)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1099;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1098; Match(WS);
				}
			}

			State = 1101; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1103; Match(LINE_INPUT);
			State = 1104; Match(WS);
			State = 1105; valueStmt(0);
			State = 1107;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1106; Match(WS);
				}
			}

			State = 1109; Match(T__6);
			State = 1111;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1110; Match(WS);
				}
			}

			State = 1113; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public LoadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLoadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLoadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStmtContext loadStmt() {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_loadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115; Match(LOAD);
			State = 1116; Match(WS);
			State = 1117; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1119; Match(LOCK);
			State = 1120; Match(WS);
			State = 1121; valueStmt(0);
			State = 1136;
			switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				State = 1123;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1122; Match(WS);
					}
				}

				State = 1125; Match(T__6);
				State = 1127;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1126; Match(WS);
					}
				}

				State = 1129; valueStmt(0);
				State = 1134;
				switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
				case 1:
					{
					State = 1130; Match(WS);
					State = 1131; Match(TO);
					State = 1132; Match(WS);
					State = 1133; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138; Match(LSET);
			State = 1139; Match(WS);
			State = 1140; implicitCallStmt_InStmt();
			State = 1142;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1141; Match(WS);
				}
			}

			State = 1144; Match(EQ);
			State = 1146;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1145; Match(WS);
				}
			}

			State = 1148; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfThenElseStmtContext : ParserRuleContext {
		public MacroElseBlockStmtContext macroElseBlockStmt() {
			return GetRuleContext<MacroElseBlockStmtContext>(0);
		}
		public IReadOnlyList<MacroElseIfBlockStmtContext> macroElseIfBlockStmt() {
			return GetRuleContexts<MacroElseIfBlockStmtContext>();
		}
		public ITerminalNode MACRO_END_IF() { return GetToken(VBAParser.MACRO_END_IF, 0); }
		public MacroElseIfBlockStmtContext macroElseIfBlockStmt(int i) {
			return GetRuleContext<MacroElseIfBlockStmtContext>(i);
		}
		public MacroIfBlockStmtContext macroIfBlockStmt() {
			return GetRuleContext<MacroIfBlockStmtContext>(0);
		}
		public MacroIfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfThenElseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroIfThenElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroIfThenElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfThenElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfThenElseStmtContext macroIfThenElseStmt() {
		MacroIfThenElseStmtContext _localctx = new MacroIfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_macroIfThenElseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1150; macroIfBlockStmt();
			State = 1154;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MACRO_ELSEIF) {
				{
				{
				State = 1151; macroElseIfBlockStmt();
				}
				}
				State = 1156;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1158;
			_la = _input.La(1);
			if (_la==MACRO_ELSE) {
				{
				State = 1157; macroElseBlockStmt();
				}
			}

			State = 1160; Match(MACRO_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfBlockStmtContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode MACRO_IF() { return GetToken(VBAParser.MACRO_IF, 0); }
		public MacroIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfBlockStmtContext macroIfBlockStmt() {
		MacroIfBlockStmtContext _localctx = new MacroIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_macroIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1162; Match(MACRO_IF);
			State = 1163; Match(WS);
			State = 1164; ifConditionStmt();
			State = 1165; Match(WS);
			State = 1166; Match(THEN);
			State = 1168;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1167; Match(NEWLINE);
				}
				}
				State = 1170;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1178;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (L_SQUARE_BRACKET - 202)) | (1L << (INTEGERLITERAL - 202)) | (1L << (IDENTIFIER - 202)))) != 0)) {
				{
				State = 1172; moduleBody();
				State = 1174;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1173; Match(NEWLINE);
					}
					}
					State = 1176;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseIfBlockStmtContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode MACRO_ELSEIF() { return GetToken(VBAParser.MACRO_ELSEIF, 0); }
		public MacroElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseIfBlockStmtContext macroElseIfBlockStmt() {
		MacroElseIfBlockStmtContext _localctx = new MacroElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_macroElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180; Match(MACRO_ELSEIF);
			State = 1181; Match(WS);
			State = 1182; ifConditionStmt();
			State = 1183; Match(WS);
			State = 1184; Match(THEN);
			State = 1186;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1185; Match(NEWLINE);
				}
				}
				State = 1188;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1196;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (L_SQUARE_BRACKET - 202)) | (1L << (INTEGERLITERAL - 202)) | (1L << (IDENTIFIER - 202)))) != 0)) {
				{
				State = 1190; moduleBody();
				State = 1192;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1191; Match(NEWLINE);
					}
					}
					State = 1194;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseBlockStmtContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode MACRO_ELSE() { return GetToken(VBAParser.MACRO_ELSE, 0); }
		public MacroElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseBlockStmtContext macroElseBlockStmt() {
		MacroElseBlockStmtContext _localctx = new MacroElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_macroElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1198; Match(MACRO_ELSE);
			State = 1200;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1199; Match(NEWLINE);
				}
				}
				State = 1202;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1210;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (L_SQUARE_BRACKET - 202)) | (1L << (INTEGERLITERAL - 202)) | (1L << (IDENTIFIER - 202)))) != 0)) {
				{
				State = 1204; moduleBody();
				State = 1206;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1205; Match(NEWLINE);
					}
					}
					State = 1208;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1212; Match(MID);
			State = 1214;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1213; Match(WS);
				}
			}

			State = 1216; Match(LPAREN);
			State = 1218;
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				State = 1217; Match(WS);
				}
				break;
			}
			State = 1220; argsCall();
			State = 1222;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1221; Match(WS);
				}
			}

			State = 1224; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MkdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public MkdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mkdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMkdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMkdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MkdirStmtContext mkdirStmt() {
		MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_mkdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1226; Match(MKDIR);
			State = 1227; Match(WS);
			State = 1228; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1230; Match(NAME);
			State = 1231; Match(WS);
			State = 1232; valueStmt(0);
			State = 1233; Match(WS);
			State = 1234; Match(AS);
			State = 1235; Match(WS);
			State = 1236; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_onErrorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1238; Match(ON_ERROR);
			State = 1239; Match(WS);
			State = 1246;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1240; Match(GOTO);
				State = 1241; Match(WS);
				State = 1242; valueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 1243; Match(RESUME);
				State = 1244; Match(WS);
				State = 1245; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1248; Match(ON);
			State = 1249; Match(WS);
			State = 1250; valueStmt(0);
			State = 1251; Match(WS);
			State = 1252; Match(GOTO);
			State = 1253; Match(WS);
			State = 1254; valueStmt(0);
			State = 1265;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,160,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1256;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1255; Match(WS);
						}
					}

					State = 1258; Match(T__6);
					State = 1260;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1259; Match(WS);
						}
					}

					State = 1262; valueStmt(0);
					}
					} 
				}
				State = 1267;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,160,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1268; Match(ON);
			State = 1269; Match(WS);
			State = 1270; valueStmt(0);
			State = 1271; Match(WS);
			State = 1272; Match(GOSUB);
			State = 1273; Match(WS);
			State = 1274; valueStmt(0);
			State = 1285;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,163,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1276;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1275; Match(WS);
						}
					}

					State = 1278; Match(T__6);
					State = 1280;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1279; Match(WS);
						}
					}

					State = 1282; valueStmt(0);
					}
					} 
				}
				State = 1287;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,163,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1288; Match(OPEN);
			State = 1289; Match(WS);
			State = 1290; valueStmt(0);
			State = 1291; Match(WS);
			State = 1292; Match(FOR);
			State = 1293; Match(WS);
			State = 1294;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (INPUT - 87)) | (1L << (OUTPUT - 87)) | (1L << (RANDOM - 87)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1299;
			switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				State = 1295; Match(WS);
				State = 1296; Match(ACCESS);
				State = 1297; Match(WS);
				State = 1298;
				_la = _input.La(1);
				if ( !(((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (READ - 141)) | (1L << (READ_WRITE - 141)) | (1L << (WRITE - 141)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1303;
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				State = 1301; Match(WS);
				State = 1302;
				_la = _input.La(1);
				if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (LOCK_READ - 100)) | (1L << (LOCK_WRITE - 100)) | (1L << (LOCK_READ_WRITE - 100)) | (1L << (SHARED - 100)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1305; Match(WS);
			State = 1306; Match(AS);
			State = 1307; Match(WS);
			State = 1308; valueStmt(0);
			State = 1319;
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 1309; Match(WS);
				State = 1310; Match(LEN);
				State = 1312;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1311; Match(WS);
					}
				}

				State = 1314; Match(EQ);
				State = 1316;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1315; Match(WS);
					}
				}

				State = 1318; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1354;
			switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1321; outputList_Expression();
				State = 1334;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,172,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1323;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1322; Match(WS);
							}
						}

						State = 1325;
						_la = _input.La(1);
						if ( !(_la==T__6 || _la==T__2) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1327;
						switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
						case 1:
							{
							State = 1326; Match(WS);
							}
							break;
						}
						State = 1330;
						switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
						case 1:
							{
							State = 1329; outputList_Expression();
							}
							break;
						}
						}
						} 
					}
					State = 1336;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,172,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1338;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
					{
					State = 1337; outputList_Expression();
					}
				}

				State = 1350;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1341;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1340; Match(WS);
							}
						}

						State = 1343;
						_la = _input.La(1);
						if ( !(_la==T__6 || _la==T__2) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1345;
						switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
						case 1:
							{
							State = 1344; Match(WS);
							}
							break;
						}
						State = 1348;
						switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
						case 1:
							{
							State = 1347; outputList_Expression();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1352;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,177,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_outputList_Expression);
		int _la;
		try {
			State = 1373;
			switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1356; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1357;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1371;
				switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
				case 1:
					{
					State = 1359;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1358; Match(WS);
						}
					}

					State = 1361; Match(LPAREN);
					State = 1363;
					switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
					case 1:
						{
						State = 1362; Match(WS);
						}
						break;
					}
					State = 1365; argsCall();
					State = 1367;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1366; Match(WS);
						}
					}

					State = 1369; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375; Match(PRINT);
			State = 1376; Match(WS);
			State = 1377; valueStmt(0);
			State = 1379;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1378; Match(WS);
				}
			}

			State = 1381; Match(T__6);
			State = 1386;
			switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				State = 1383;
				switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
				case 1:
					{
					State = 1382; Match(WS);
					}
					break;
				}
				State = 1385; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1391;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1388; visibility();
				State = 1389; Match(WS);
				}
			}

			State = 1395;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1393; Match(STATIC);
				State = 1394; Match(WS);
				}
			}

			State = 1397; Match(PROPERTY_GET);
			State = 1398; Match(WS);
			State = 1399; ambiguousIdentifier();
			State = 1404;
			switch ( Interpreter.AdaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				State = 1401;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1400; Match(WS);
					}
				}

				State = 1403; argList();
				}
				break;
			}
			State = 1408;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1406; Match(WS);
				State = 1407; asTypeClause();
				}
			}

			State = 1411;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1410; Match(NEWLINE);
				}
				}
				State = 1413;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1421;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (L_SQUARE_BRACKET - 202)) | (1L << (INTEGERLITERAL - 202)) | (1L << (IDENTIFIER - 202)))) != 0)) {
				{
				State = 1415; block();
				State = 1417;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1416; Match(NEWLINE);
					}
					}
					State = 1419;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1423; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1428;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1425; visibility();
				State = 1426; Match(WS);
				}
			}

			State = 1432;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1430; Match(STATIC);
				State = 1431; Match(WS);
				}
			}

			State = 1434; Match(PROPERTY_SET);
			State = 1435; Match(WS);
			State = 1436; ambiguousIdentifier();
			State = 1441;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1438;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1437; Match(WS);
					}
				}

				State = 1440; argList();
				}
			}

			State = 1444;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1443; Match(NEWLINE);
				}
				}
				State = 1446;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1454;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (L_SQUARE_BRACKET - 202)) | (1L << (INTEGERLITERAL - 202)) | (1L << (IDENTIFIER - 202)))) != 0)) {
				{
				State = 1448; block();
				State = 1450;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1449; Match(NEWLINE);
					}
					}
					State = 1452;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1456; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1461;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1458; visibility();
				State = 1459; Match(WS);
				}
			}

			State = 1465;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1463; Match(STATIC);
				State = 1464; Match(WS);
				}
			}

			State = 1467; Match(PROPERTY_LET);
			State = 1468; Match(WS);
			State = 1469; ambiguousIdentifier();
			State = 1474;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1471;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1470; Match(WS);
					}
				}

				State = 1473; argList();
				}
			}

			State = 1477;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1476; Match(NEWLINE);
				}
				}
				State = 1479;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1487;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (L_SQUARE_BRACKET - 202)) | (1L << (INTEGERLITERAL - 202)) | (1L << (IDENTIFIER - 202)))) != 0)) {
				{
				State = 1481; block();
				State = 1483;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1482; Match(NEWLINE);
					}
					}
					State = 1485;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1489; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1491; Match(PUT);
			State = 1492; Match(WS);
			State = 1493; valueStmt(0);
			State = 1495;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1494; Match(WS);
				}
			}

			State = 1497; Match(T__6);
			State = 1499;
			switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				State = 1498; Match(WS);
				}
				break;
			}
			State = 1502;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
				{
				State = 1501; valueStmt(0);
				}
			}

			State = 1505;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1504; Match(WS);
				}
			}

			State = 1507; Match(T__6);
			State = 1509;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1508; Match(WS);
				}
			}

			State = 1511; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513; Match(RAISEEVENT);
			State = 1514; Match(WS);
			State = 1515; ambiguousIdentifier();
			State = 1530;
			switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				State = 1517;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1516; Match(WS);
					}
				}

				State = 1519; Match(LPAREN);
				State = 1521;
				switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
				case 1:
					{
					State = 1520; Match(WS);
					}
					break;
				}
				State = 1527;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__2) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (WS - 192)))) != 0)) {
					{
					State = 1523; argsCall();
					State = 1525;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1524; Match(WS);
						}
					}

					}
				}

				State = 1529; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizeStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRandomizeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRandomizeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizeStmtContext randomizeStmt() {
		RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_randomizeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1532; Match(RANDOMIZE);
			State = 1535;
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				State = 1533; Match(WS);
				State = 1534; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public IReadOnlyList<RedimSubStmtContext> redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1537; Match(REDIM);
			State = 1538; Match(WS);
			State = 1541;
			switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				State = 1539; Match(PRESERVE);
				State = 1540; Match(WS);
				}
				break;
			}
			State = 1543; redimSubStmt();
			State = 1554;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,223,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1545;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1544; Match(WS);
						}
					}

					State = 1547; Match(T__6);
					State = 1549;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1548; Match(WS);
						}
					}

					State = 1551; redimSubStmt();
					}
					} 
				}
				State = 1556;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,223,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1557; implicitCallStmt_InStmt();
			State = 1559;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1558; Match(WS);
				}
			}

			State = 1561; Match(LPAREN);
			State = 1563;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1562; Match(WS);
				}
			}

			State = 1565; subscripts();
			State = 1567;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1566; Match(WS);
				}
			}

			State = 1569; Match(RPAREN);
			State = 1572;
			switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				State = 1570; Match(WS);
				State = 1571; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1574; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1576; Match(RESUME);
			State = 1582;
			switch ( Interpreter.AdaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				State = 1577; Match(WS);
				State = 1580;
				switch ( Interpreter.AdaptivePredict(_input,228,_ctx) ) {
				case 1:
					{
					State = 1578; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1579; ambiguousIdentifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1584; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public RmdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRmdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRmdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmdirStmtContext rmdirStmt() {
		RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_rmdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1586; Match(RMDIR);
			State = 1587; Match(WS);
			State = 1588; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1590; Match(RSET);
			State = 1591; Match(WS);
			State = 1592; implicitCallStmt_InStmt();
			State = 1594;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1593; Match(WS);
				}
			}

			State = 1596; Match(EQ);
			State = 1598;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1597; Match(WS);
				}
			}

			State = 1600; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepictureStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepictureStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSavepictureStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSavepictureStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepictureStmtContext savepictureStmt() {
		SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_savepictureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602; Match(SAVEPICTURE);
			State = 1603; Match(WS);
			State = 1604; valueStmt(0);
			State = 1606;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1605; Match(WS);
				}
			}

			State = 1608; Match(T__6);
			State = 1610;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1609; Match(WS);
				}
			}

			State = 1612; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveSettingStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveSettingStmtContext saveSettingStmt() {
		SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_saveSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1614; Match(SAVESETTING);
			State = 1615; Match(WS);
			State = 1616; valueStmt(0);
			State = 1618;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1617; Match(WS);
				}
			}

			State = 1620; Match(T__6);
			State = 1622;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1621; Match(WS);
				}
			}

			State = 1624; valueStmt(0);
			State = 1626;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1625; Match(WS);
				}
			}

			State = 1628; Match(T__6);
			State = 1630;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1629; Match(WS);
				}
			}

			State = 1632; valueStmt(0);
			State = 1634;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1633; Match(WS);
				}
			}

			State = 1636; Match(T__6);
			State = 1638;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1637; Match(WS);
				}
			}

			State = 1640; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1642; Match(SEEK);
			State = 1643; Match(WS);
			State = 1644; valueStmt(0);
			State = 1646;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1645; Match(WS);
				}
			}

			State = 1648; Match(T__6);
			State = 1650;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1649; Match(WS);
				}
			}

			State = 1652; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<SC_CaseContext> sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654; Match(SELECT);
			State = 1655; Match(WS);
			State = 1656; Match(CASE);
			State = 1657; Match(WS);
			State = 1658; valueStmt(0);
			State = 1660;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1659; Match(NEWLINE);
				}
				}
				State = 1662;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1667;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1664; sC_Case();
				}
				}
				State = 1669;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1671;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1670; Match(WS);
				}
			}

			State = 1673; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_sC_Case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1675; Match(CASE);
			State = 1676; Match(WS);
			State = 1677; sC_Cond();
			State = 1679;
			switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
			case 1:
				{
				State = 1678; Match(WS);
				}
				break;
			}
			State = 1695;
			switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
			case 1:
				{
				State = 1682;
				_la = _input.La(1);
				if (_la==T__5) {
					{
					State = 1681; Match(T__5);
					}
				}

				State = 1687;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 1684; Match(NEWLINE);
					}
					}
					State = 1689;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 1691;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1690; Match(NEWLINE);
					}
					}
					State = 1693;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1703;
			switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
			case 1:
				{
				State = 1697; block();
				State = 1699;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1698; Match(NEWLINE);
					}
					}
					State = 1701;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondToContext : SC_CondContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondToContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondValueContext : SC_CondContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondValueContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondIsContext : SC_CondContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public CaseCondIsContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1748;
			switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1705; Match(ELSE);
				}
				break;

			case 2:
				_localctx = new CaseCondIsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1706; Match(IS);
				State = 1708;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1707; Match(WS);
					}
				}

				State = 1710; comparisonOperator();
				State = 1712;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1711; Match(WS);
					}
				}

				State = 1714; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1716; valueStmt(0);
				State = 1727;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,256,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1718;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1717; Match(WS);
							}
						}

						State = 1720; Match(T__6);
						State = 1722;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1721; Match(WS);
							}
						}

						State = 1724; valueStmt(0);
						}
						} 
					}
					State = 1729;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,256,_ctx);
				}
				}
				break;

			case 4:
				_localctx = new CaseCondToContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1730; Match(INTEGERLITERAL);
				State = 1731; Match(WS);
				State = 1732; Match(TO);
				State = 1733; Match(WS);
				State = 1734; valueStmt(0);
				State = 1745;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,259,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1736;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1735; Match(WS);
							}
						}

						State = 1738; Match(T__6);
						State = 1740;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1739; Match(WS);
							}
						}

						State = 1742; valueStmt(0);
						}
						} 
					}
					State = 1747;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,259,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendkeysStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendkeysStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSendkeysStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSendkeysStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendkeysStmtContext sendkeysStmt() {
		SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_sendkeysStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1750; Match(SENDKEYS);
			State = 1751; Match(WS);
			State = 1752; valueStmt(0);
			State = 1761;
			switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				State = 1754;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1753; Match(WS);
					}
				}

				State = 1756; Match(T__6);
				State = 1758;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1757; Match(WS);
					}
				}

				State = 1760; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetattrStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SetattrStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setattrStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSetattrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSetattrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetattrStmtContext setattrStmt() {
		SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_setattrStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1763; Match(SETATTR);
			State = 1764; Match(WS);
			State = 1765; valueStmt(0);
			State = 1767;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1766; Match(WS);
				}
			}

			State = 1769; Match(T__6);
			State = 1771;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1770; Match(WS);
				}
			}

			State = 1773; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1775; Match(SET);
			State = 1776; Match(WS);
			State = 1777; implicitCallStmt_InStmt();
			State = 1779;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1778; Match(WS);
				}
			}

			State = 1781; Match(EQ);
			State = 1783;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1782; Match(WS);
				}
			}

			State = 1785; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1787; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1792;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1789; visibility();
				State = 1790; Match(WS);
				}
			}

			State = 1796;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1794; Match(STATIC);
				State = 1795; Match(WS);
				}
			}

			State = 1798; Match(SUB);
			State = 1799; Match(WS);
			State = 1800; ambiguousIdentifier();
			State = 1805;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1802;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1801; Match(WS);
					}
				}

				State = 1804; argList();
				}
			}

			State = 1808;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1807; Match(NEWLINE);
				}
				}
				State = 1810;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1818;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (L_SQUARE_BRACKET - 202)) | (1L << (INTEGERLITERAL - 202)) | (1L << (IDENTIFIER - 202)))) != 0)) {
				{
				State = 1812; block();
				State = 1814;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1813; Match(NEWLINE);
					}
					}
					State = 1816;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1820; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public TimeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTimeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTimeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStmtContext timeStmt() {
		TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_timeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1822; Match(TIME);
			State = 1824;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1823; Match(WS);
				}
			}

			State = 1826; Match(EQ);
			State = 1828;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1827; Match(WS);
				}
			}

			State = 1830; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1835;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1832; visibility();
				State = 1833; Match(WS);
				}
			}

			State = 1837; Match(TYPE);
			State = 1838; Match(WS);
			State = 1839; ambiguousIdentifier();
			State = 1841;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1840; Match(NEWLINE);
				}
				}
				State = 1843;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1848;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 1845; typeStmt_Element();
				}
				}
				State = 1850;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1851; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1853; ambiguousIdentifier();
			State = 1868;
			switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				State = 1855;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1854; Match(WS);
					}
				}

				State = 1857; Match(LPAREN);
				State = 1862;
				switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					State = 1859;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1858; Match(WS);
						}
					}

					State = 1861; subscripts();
					}
					break;
				}
				State = 1865;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1864; Match(WS);
					}
				}

				State = 1867; Match(RPAREN);
				}
				break;
			}
			State = 1872;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1870; Match(WS);
				State = 1871; asTypeClause();
				}
			}

			State = 1875;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1874; Match(NEWLINE);
				}
				}
				State = 1877;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeOfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeOfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfStmtContext typeOfStmt() {
		TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_typeOfStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1879; Match(TYPEOF);
			State = 1880; Match(WS);
			State = 1881; valueStmt(0);
			State = 1886;
			switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				State = 1882; Match(WS);
				State = 1883; Match(IS);
				State = 1884; Match(WS);
				State = 1885; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnloadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public UnloadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unloadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterUnloadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitUnloadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnloadStmtContext unloadStmt() {
		UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_unloadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1888; Match(UNLOAD);
			State = 1889; Match(WS);
			State = 1890; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1892; Match(UNLOCK);
			State = 1893; Match(WS);
			State = 1894; valueStmt(0);
			State = 1909;
			switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
			case 1:
				{
				State = 1896;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1895; Match(WS);
					}
				}

				State = 1898; Match(T__6);
				State = 1900;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1899; Match(WS);
					}
				}

				State = 1902; valueStmt(0);
				State = 1907;
				switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					State = 1903; Match(WS);
					State = 1904; Match(TO);
					State = 1905; Match(WS);
					State = 1906; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsDivContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMinusContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsMinusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGeqContext : ValueStmtContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsGeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsGeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsGeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLtContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLikeContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLikeContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLike(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNeqContext : ValueStmtContext {
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsNeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfStmtContext typeOfStmt() {
			return GetRuleContext<TypeOfStmtContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPlusContext : ValueStmtContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public VsPlusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public VsEqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIsContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsIsContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGtContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsGtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsGt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsGt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLeqContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 196;
		EnterRecursionRule(_localctx, 196, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1965;
			switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1912; Match(NEW);
				State = 1913; Match(WS);
				State = 1914; valueStmt(28);
				}
				break;

			case 2:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1915; Match(ADDRESSOF);
				State = 1916; Match(WS);
				State = 1917; valueStmt(25);
				}
				break;

			case 3:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1918; implicitCallStmt_InStmt();
				State = 1920;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1919; Match(WS);
					}
				}

				State = 1922; Match(ASSIGN);
				State = 1924;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1923; Match(WS);
					}
				}

				State = 1926; valueStmt(24);
				}
				break;

			case 4:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1928; Match(MINUS);
				State = 1930;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1929; Match(WS);
					}
				}

				State = 1932; valueStmt(14);
				}
				break;

			case 5:
				{
				_localctx = new VsPlusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1933; Match(PLUS);
				State = 1935;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1934; Match(WS);
					}
				}

				State = 1937; valueStmt(13);
				}
				break;

			case 6:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1938; Match(NOT);
				State = 1939; Match(WS);
				State = 1940; valueStmt(1);
				}
				break;

			case 7:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1941; literal();
				}
				break;

			case 8:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1942; implicitCallStmt_InStmt();
				}
				break;

			case 9:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1943; Match(LPAREN);
				State = 1945;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1944; Match(WS);
					}
				}

				State = 1947; valueStmt(0);
				State = 1958;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__6 || _la==WS) {
					{
					{
					State = 1949;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1948; Match(WS);
						}
					}

					State = 1951; Match(T__6);
					State = 1953;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1952; Match(WS);
						}
					}

					State = 1955; valueStmt(0);
					}
					}
					State = 1960;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1961; Match(RPAREN);
				}
				break;

			case 10:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1963; typeOfStmt();
				}
				break;

			case 11:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1964; midStmt();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2125;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,330,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2123;
					switch ( Interpreter.AdaptivePredict(_input,329,_ctx) ) {
					case 1:
						{
						_localctx = new VsIsContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1967;
						if (!(Precpred(_ctx, 23))) throw new FailedPredicateException(this, "Precpred(_ctx, 23)");
						State = 1968; Match(WS);
						State = 1969; Match(IS);
						State = 1970; Match(WS);
						State = 1971; valueStmt(24);
						}
						break;

					case 2:
						{
						_localctx = new VsLikeContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1972;
						if (!(Precpred(_ctx, 22))) throw new FailedPredicateException(this, "Precpred(_ctx, 22)");
						State = 1973; Match(WS);
						State = 1974; Match(LIKE);
						State = 1975; Match(WS);
						State = 1976; valueStmt(23);
						}
						break;

					case 3:
						{
						_localctx = new VsGeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1977;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 1979;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1978; Match(WS);
							}
						}

						State = 1981; Match(GEQ);
						State = 1983;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1982; Match(WS);
							}
						}

						State = 1985; valueStmt(22);
						}
						break;

					case 4:
						{
						_localctx = new VsLeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1986;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 1988;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1987; Match(WS);
							}
						}

						State = 1990; Match(LEQ);
						State = 1992;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1991; Match(WS);
							}
						}

						State = 1994; valueStmt(21);
						}
						break;

					case 5:
						{
						_localctx = new VsGtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1995;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 1997;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1996; Match(WS);
							}
						}

						State = 1999; Match(GT);
						State = 2001;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2000; Match(WS);
							}
						}

						State = 2003; valueStmt(20);
						}
						break;

					case 6:
						{
						_localctx = new VsLtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2004;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 2006;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2005; Match(WS);
							}
						}

						State = 2008; Match(LT);
						State = 2010;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2009; Match(WS);
							}
						}

						State = 2012; valueStmt(19);
						}
						break;

					case 7:
						{
						_localctx = new VsNeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2013;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 2015;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2014; Match(WS);
							}
						}

						State = 2017; Match(NEQ);
						State = 2019;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2018; Match(WS);
							}
						}

						State = 2021; valueStmt(18);
						}
						break;

					case 8:
						{
						_localctx = new VsEqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2022;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 2024;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2023; Match(WS);
							}
						}

						State = 2026; Match(EQ);
						State = 2028;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2027; Match(WS);
							}
						}

						State = 2030; valueStmt(17);
						}
						break;

					case 9:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2031;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2032; Match(WS);
						State = 2033; Match(AMPERSAND);
						State = 2034; Match(WS);
						State = 2035; valueStmt(16);
						}
						break;

					case 10:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2036;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2038;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2037; Match(WS);
							}
						}

						State = 2040; Match(PLUS);
						State = 2042;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2041; Match(WS);
							}
						}

						State = 2044; valueStmt(13);
						}
						break;

					case 11:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2045;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2047;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2046; Match(WS);
							}
						}

						State = 2049; Match(MOD);
						State = 2051;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2050; Match(WS);
							}
						}

						State = 2053; valueStmt(12);
						}
						break;

					case 12:
						{
						_localctx = new VsDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2054;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2056;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2055; Match(WS);
							}
						}

						State = 2058; Match(DIV);
						State = 2060;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2059; Match(WS);
							}
						}

						State = 2062; valueStmt(11);
						}
						break;

					case 13:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2063;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2065;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2064; Match(WS);
							}
						}

						State = 2067; Match(MULT);
						State = 2069;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2068; Match(WS);
							}
						}

						State = 2071; valueStmt(10);
						}
						break;

					case 14:
						{
						_localctx = new VsMinusContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2072;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2074;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2073; Match(WS);
							}
						}

						State = 2076; Match(MINUS);
						State = 2078;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2077; Match(WS);
							}
						}

						State = 2080; valueStmt(9);
						}
						break;

					case 15:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2081;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2083;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2082; Match(WS);
							}
						}

						State = 2085; Match(POW);
						State = 2087;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2086; Match(WS);
							}
						}

						State = 2089; valueStmt(8);
						}
						break;

					case 16:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2090;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2091; Match(WS);
						State = 2092; Match(IMP);
						State = 2093; Match(WS);
						State = 2094; valueStmt(7);
						}
						break;

					case 17:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2095;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2096; Match(WS);
						State = 2097; Match(EQV);
						State = 2098; Match(WS);
						State = 2099; valueStmt(6);
						}
						break;

					case 18:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2100;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2102;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2101; Match(WS);
							}
						}

						State = 2104; Match(XOR);
						State = 2106;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2105; Match(WS);
							}
						}

						State = 2108; valueStmt(5);
						}
						break;

					case 19:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2109;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2111;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2110; Match(WS);
							}
						}

						State = 2113; Match(OR);
						State = 2115;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2114; Match(WS);
							}
						}

						State = 2117; valueStmt(4);
						}
						break;

					case 20:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2118;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2119; Match(WS);
						State = 2120; Match(AND);
						State = 2121; Match(WS);
						State = 2122; valueStmt(3);
						}
						break;
					}
					} 
				}
				State = 2127;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,330,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2131;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 2128; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 2129; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 2130; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2133; Match(WS);
			State = 2136;
			switch ( Interpreter.AdaptivePredict(_input,332,_ctx) ) {
			case 1:
				{
				State = 2134; Match(WITHEVENTS);
				State = 2135; Match(WS);
				}
				break;
			}
			State = 2138; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2140; variableSubStmt();
			State = 2151;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,335,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2142;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2141; Match(WS);
						}
					}

					State = 2144; Match(T__6);
					State = 2146;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2145; Match(WS);
						}
					}

					State = 2148; variableSubStmt();
					}
					} 
				}
				State = 2153;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,335,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2154; ambiguousIdentifier();
			State = 2172;
			switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				State = 2156;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2155; Match(WS);
					}
				}

				State = 2158; Match(LPAREN);
				State = 2160;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2159; Match(WS);
					}
				}

				State = 2166;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
					{
					State = 2162; subscripts();
					State = 2164;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2163; Match(WS);
						}
					}

					}
				}

				State = 2168; Match(RPAREN);
				State = 2170;
				switch ( Interpreter.AdaptivePredict(_input,340,_ctx) ) {
				case 1:
					{
					State = 2169; Match(WS);
					}
					break;
				}
				}
				break;
			}
			State = 2175;
			switch ( Interpreter.AdaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				State = 2174; typeHint();
				}
				break;
			}
			State = 2179;
			switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
			case 1:
				{
				State = 2177; Match(WS);
				State = 2178; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public IReadOnlyList<BlockContext> block() {
			return GetRuleContexts<BlockContext>();
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_whileWendStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2181; Match(WHILE);
			State = 2182; Match(WS);
			State = 2183; valueStmt(0);
			State = 2185;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2184; Match(NEWLINE);
				}
				}
				State = 2187;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2194;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,345,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2189; block();
					State = 2190; Match(NEWLINE);
					}
					} 
				}
				State = 2196;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,345,_ctx);
			}
			State = 2197; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2199; Match(WIDTH);
			State = 2200; Match(WS);
			State = 2201; valueStmt(0);
			State = 2203;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2202; Match(WS);
				}
			}

			State = 2205; Match(T__6);
			State = 2207;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2206; Match(WS);
				}
			}

			State = 2209; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_withStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2211; Match(WITH);
			State = 2212; Match(WS);
			State = 2213; implicitCallStmt_InStmt();
			State = 2215;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2214; Match(NEWLINE);
				}
				}
				State = 2217;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2225;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (L_SQUARE_BRACKET - 202)) | (1L << (INTEGERLITERAL - 202)) | (1L << (IDENTIFIER - 202)))) != 0)) {
				{
				State = 2219; block();
				State = 2221;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2220; Match(NEWLINE);
					}
					}
					State = 2223;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 2227; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2229; Match(WRITE);
			State = 2230; Match(WS);
			State = 2231; valueStmt(0);
			State = 2233;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2232; Match(WS);
				}
			}

			State = 2235; Match(T__6);
			State = 2240;
			switch ( Interpreter.AdaptivePredict(_input,353,_ctx) ) {
			case 1:
				{
				State = 2237;
				switch ( Interpreter.AdaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					State = 2236; Match(WS);
					}
					break;
				}
				State = 2239; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ECS_ProcedureCallContext eCS_ProcedureCall() {
			return GetRuleContext<ECS_ProcedureCallContext>(0);
		}
		public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
			return GetRuleContext<ECS_MemberProcedureCallContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_explicitCallStmt);
		try {
			State = 2244;
			switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2242; eCS_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2243; eCS_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_ProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_ProcedureCallContext eCS_ProcedureCall() {
		ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_eCS_ProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2246; Match(CALL);
			State = 2247; Match(WS);
			State = 2248; ambiguousIdentifier();
			State = 2250;
			switch ( Interpreter.AdaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				State = 2249; typeHint();
				}
				break;
			}
			State = 2265;
			switch ( Interpreter.AdaptivePredict(_input,359,_ctx) ) {
			case 1:
				{
				State = 2253;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2252; Match(WS);
					}
				}

				State = 2255; Match(LPAREN);
				State = 2257;
				switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					State = 2256; Match(WS);
					}
					break;
				}
				State = 2259; argsCall();
				State = 2261;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2260; Match(WS);
					}
				}

				State = 2263; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_MemberProcedureCallContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
		ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_eCS_MemberProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2267; Match(CALL);
			State = 2268; Match(WS);
			State = 2270;
			switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
			case 1:
				{
				State = 2269; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2272; Match(T__7);
			State = 2273; ambiguousIdentifier();
			State = 2275;
			switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				State = 2274; typeHint();
				}
				break;
			}
			State = 2290;
			switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				State = 2278;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2277; Match(WS);
					}
				}

				State = 2280; Match(LPAREN);
				State = 2282;
				switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
				case 1:
					{
					State = 2281; Match(WS);
					}
					break;
				}
				State = 2284; argsCall();
				State = 2286;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2285; Match(WS);
					}
				}

				State = 2288; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_implicitCallStmt_InBlock);
		try {
			State = 2294;
			switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2292; iCS_B_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2293; iCS_B_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public CertainIdentifierContext certainIdentifier() {
			return GetRuleContext<CertainIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_iCS_B_ProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2296; certainIdentifier();
			State = 2299;
			switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				State = 2297; Match(WS);
				State = 2298; argsCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_iCS_B_MemberProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2302;
			switch ( Interpreter.AdaptivePredict(_input,368,_ctx) ) {
			case 1:
				{
				State = 2301; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2304;
			_la = _input.La(1);
			if ( !(_la==T__7 || _la==T__1) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 2305; ambiguousIdentifier();
			State = 2307;
			switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				State = 2306; typeHint();
				}
				break;
			}
			State = 2311;
			switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				State = 2309; Match(WS);
				State = 2310; argsCall();
				}
				break;
			}
			State = 2314;
			switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
			case 1:
				{
				State = 2313; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_implicitCallStmt_InStmt);
		try {
			State = 2320;
			switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2316; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2317; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2318; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2319; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_iCS_S_VariableOrProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2322; ambiguousIdentifier();
			State = 2324;
			switch ( Interpreter.AdaptivePredict(_input,373,_ctx) ) {
			case 1:
				{
				State = 2323; typeHint();
				}
				break;
			}
			State = 2327;
			switch ( Interpreter.AdaptivePredict(_input,374,_ctx) ) {
			case 1:
				{
				State = 2326; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2331;
			switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
			case 1:
				{
				State = 2329; ambiguousIdentifier();
				}
				break;

			case 2:
				{
				State = 2330; baseType();
				}
				break;
			}
			State = 2334;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 2333; typeHint();
				}
			}

			State = 2337;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2336; Match(WS);
				}
			}

			State = 2339; Match(LPAREN);
			State = 2341;
			switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				State = 2340; Match(WS);
				}
				break;
			}
			State = 2347;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__2) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (WS - 192)))) != 0)) {
				{
				State = 2343; argsCall();
				State = 2345;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2344; Match(WS);
					}
				}

				}
			}

			State = 2349; Match(RPAREN);
			State = 2351;
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 2350; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_iCS_S_MembersCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2355;
			switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				State = 2353; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2354; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2358;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2357; iCS_S_MemberCall();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2360;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,383,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2363;
			switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				State = 2362; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_iCS_S_MemberCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2365; Match(T__7);
			State = 2368;
			switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				State = 2366; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2367; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_iCS_S_DictionaryCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2370; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ArgCallContext> argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2384;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,389,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2373;
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
						{
						State = 2372; argCall();
						}
					}

					State = 2376;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2375; Match(WS);
						}
					}

					State = 2378;
					_la = _input.La(1);
					if ( !(_la==T__6 || _la==T__2) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2380;
					switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
					case 1:
						{
						State = 2379; Match(WS);
						}
						break;
					}
					}
					} 
				}
				State = 2386;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,389,_ctx);
			}
			State = 2387; argCall();
			State = 2400;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,393,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2389;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2388; Match(WS);
						}
					}

					State = 2391;
					_la = _input.La(1);
					if ( !(_la==T__6 || _la==T__2) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2393;
					switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
					case 1:
						{
						State = 2392; Match(WS);
						}
						break;
					}
					State = 2396;
					switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
					case 1:
						{
						State = 2395; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2402;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,393,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2405;
			switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				State = 2403;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2404; Match(WS);
				}
				break;
			}
			State = 2407; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_dictionaryCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2409; Match(T__1);
			State = 2410; ambiguousIdentifier();
			State = 2412;
			switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				State = 2411; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2414; Match(LPAREN);
			State = 2432;
			switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				State = 2416;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2415; Match(WS);
					}
				}

				State = 2418; arg();
				State = 2429;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,399,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2420;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2419; Match(WS);
							}
						}

						State = 2422; Match(T__6);
						State = 2424;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2423; Match(WS);
							}
						}

						State = 2426; arg();
						}
						} 
					}
					State = 2431;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,399,_ctx);
				}
				}
				break;
			}
			State = 2435;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2434; Match(WS);
				}
			}

			State = 2437; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2441;
			switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				State = 2439; Match(OPTIONAL);
				State = 2440; Match(WS);
				}
				break;
			}
			State = 2445;
			switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				State = 2443;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2444; Match(WS);
				}
				break;
			}
			State = 2449;
			switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				State = 2447; Match(PARAMARRAY);
				State = 2448; Match(WS);
				}
				break;
			}
			State = 2451; ambiguousIdentifier();
			State = 2460;
			switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				State = 2453;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2452; Match(WS);
					}
				}

				State = 2455; Match(LPAREN);
				State = 2457;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2456; Match(WS);
					}
				}

				State = 2459; Match(RPAREN);
				}
				break;
			}
			State = 2464;
			switch ( Interpreter.AdaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				State = 2462; Match(WS);
				State = 2463; asTypeClause();
				}
				break;
			}
			State = 2470;
			switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				State = 2467;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2466; Match(WS);
					}
				}

				State = 2469; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_argDefaultValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2472; Match(EQ);
			State = 2474;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2473; Match(WS);
				}
			}

			State = 2478;
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				State = 2476; literal();
				}
				break;

			case 2:
				{
				State = 2477; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2480; subscript();
			State = 2491;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,415,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2482;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2481; Match(WS);
						}
					}

					State = 2484; Match(T__6);
					State = 2486;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2485; Match(WS);
						}
					}

					State = 2488; subscript();
					}
					} 
				}
				State = 2493;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,415,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				State = 2494; valueStmt(0);
				State = 2495; Match(WS);
				State = 2496; Match(TO);
				State = 2497; Match(WS);
				}
				break;
			}
			State = 2501; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousIdentifierContext : ParserRuleContext {
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBAParser.IDENTIFIER, i);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousIdentifierContext ambiguousIdentifier() {
		AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_ambiguousIdentifier);
		int _la;
		try {
			int _alt;
			State = 2517;
			switch (_input.La(1)) {
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2505;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2505;
						switch (_input.La(1)) {
						case IDENTIFIER:
							{
							State = 2503; Match(IDENTIFIER);
							}
							break;
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATABASE:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2504; ambiguousKeyword();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2507;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,418,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2509; Match(L_SQUARE_BRACKET);
				State = 2512;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 2512;
					switch (_input.La(1)) {
					case IDENTIFIER:
						{
						State = 2510; Match(IDENTIFIER);
						}
						break;
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATABASE:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2511; ambiguousKeyword();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2514;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER );
				State = 2516; Match(R_SQUARE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_asTypeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2519; Match(AS);
			State = 2520; Match(WS);
			State = 2523;
			switch ( Interpreter.AdaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				State = 2521; Match(NEW);
				State = 2522; Match(WS);
				}
				break;
			}
			State = 2525; type();
			State = 2528;
			switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
			case 1:
				{
				State = 2526; Match(WS);
				State = 2527; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2530;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || _la==INTEGER || _la==LONG || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (SINGLE - 158)) | (1L << (STRING - 158)) | (1L << (VARIANT - 158)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CertainIdentifierContext : ParserRuleContext {
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBAParser.IDENTIFIER, i);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_certainIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCertainIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCertainIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CertainIdentifierContext certainIdentifier() {
		CertainIdentifierContext _localctx = new CertainIdentifierContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_certainIdentifier);
		try {
			int _alt;
			State = 2547;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2532; Match(IDENTIFIER);
				State = 2537;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,425,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 2535;
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATABASE:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2533; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2534; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 2539;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,425,_ctx);
				}
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2540; ambiguousKeyword();
				State = 2543;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2543;
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATABASE:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2541; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2542; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2545;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,427,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2549;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (EQ - 188)) | (1L << (GEQ - 188)) | (1L << (GT - 188)) | (1L << (LEQ - 188)) | (1L << (LT - 188)) | (1L << (NEQ - 188)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_complexType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2551; ambiguousIdentifier();
			State = 2556;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,429,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2552;
					_la = _input.La(1);
					if ( !(_la==T__7 || _la==T__1) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2553; ambiguousIdentifier();
					}
					} 
				}
				State = 2558;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,429,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2559; Match(MULT);
			State = 2561;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2560; Match(WS);
				}
			}

			State = 2565;
			switch (_input.La(1)) {
			case INTEGERLITERAL:
				{
				State = 2563; Match(INTEGERLITERAL);
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				{
				State = 2564; ambiguousIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public IReadOnlyList<CertainIdentifierContext> certainIdentifier() {
			return GetRuleContexts<CertainIdentifierContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public CertainIdentifierContext certainIdentifier(int i) {
			return GetRuleContext<CertainIdentifierContext>(i);
		}
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2567; certainIdentifier();
			State = 2576;
			switch ( Interpreter.AdaptivePredict(_input,434,_ctx) ) {
			case 1:
				{
				State = 2569;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2568; Match(WS);
					}
				}

				State = 2571; Match(MINUS);
				State = 2573;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2572; Match(WS);
					}
				}

				State = 2575; certainIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public LineNumberContext lineNumber() {
			return GetRuleContext<LineNumberContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_lineLabel);
		try {
			State = 2583;
			switch (_input.La(1)) {
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2578; ambiguousIdentifier();
				State = 2579; Match(T__5);
				State = 2580; Match(WS);
				}
				}
				break;
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2582; lineNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineNumberContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public LineNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLineNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLineNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineNumberContext lineNumber() {
		LineNumberContext _localctx = new LineNumberContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_lineNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2585; Match(INTEGERLITERAL);
			State = 2586; Match(WS);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode FILENUMBER() { return GetToken(VBAParser.FILENUMBER, 0); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
		public ITerminalNode COLORLITERAL() { return GetToken(VBAParser.COLORLITERAL, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2588;
			_la = _input.La(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (FALSE - 74)) | (1L << (NOTHING - 74)) | (1L << (NULL - 74)))) != 0) || ((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (TRUE - 170)) | (1L << (STRINGLITERAL - 170)) | (1L << (DATELITERAL - 170)) | (1L << (COLORLITERAL - 170)) | (1L << (INTEGERLITERAL - 170)) | (1L << (DOUBLELITERAL - 170)) | (1L << (FILENUMBER - 170)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2592;
			switch ( Interpreter.AdaptivePredict(_input,436,_ctx) ) {
			case 1:
				{
				State = 2590; baseType();
				}
				break;

			case 2:
				{
				State = 2591; complexType();
				}
				break;
			}
			State = 2602;
			switch ( Interpreter.AdaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				State = 2595;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2594; Match(WS);
					}
				}

				State = 2597; Match(LPAREN);
				State = 2599;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2598; Match(WS);
					}
				}

				State = 2601; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2604;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2606;
			_la = _input.La(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousKeywordContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousKeywordContext ambiguousKeyword() {
		AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_ambiguousKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2608;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 98: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 23);

		case 1: return Precpred(_ctx, 22);

		case 2: return Precpred(_ctx, 21);

		case 3: return Precpred(_ctx, 20);

		case 4: return Precpred(_ctx, 19);

		case 5: return Precpred(_ctx, 18);

		case 6: return Precpred(_ctx, 17);

		case 7: return Precpred(_ctx, 16);

		case 8: return Precpred(_ctx, 15);

		case 9: return Precpred(_ctx, 12);

		case 10: return Precpred(_ctx, 11);

		case 11: return Precpred(_ctx, 10);

		case 12: return Precpred(_ctx, 9);

		case 13: return Precpred(_ctx, 8);

		case 14: return Precpred(_ctx, 7);

		case 15: return Precpred(_ctx, 6);

		case 17: return Precpred(_ctx, 4);

		case 16: return Precpred(_ctx, 5);

		case 19: return Precpred(_ctx, 2);

		case 18: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xD8\xA35\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x121\n\x3\x3\x3\a\x3"+
		"\x124\n\x3\f\x3\xE\x3\x127\v\x3\x3\x3\x3\x3\x6\x3\x12B\n\x3\r\x3\xE\x3"+
		"\x12C\x5\x3\x12F\n\x3\x3\x3\x5\x3\x132\n\x3\x3\x3\a\x3\x135\n\x3\f\x3"+
		"\xE\x3\x138\v\x3\x3\x3\x5\x3\x13B\n\x3\x3\x3\a\x3\x13E\n\x3\f\x3\xE\x3"+
		"\x141\v\x3\x3\x3\x5\x3\x144\n\x3\x3\x3\a\x3\x147\n\x3\f\x3\xE\x3\x14A"+
		"\v\x3\x3\x3\x5\x3\x14D\n\x3\x3\x3\a\x3\x150\n\x3\f\x3\xE\x3\x153\v\x3"+
		"\x3\x3\x5\x3\x156\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5"+
		"\x6\x5\x160\n\x5\r\x5\xE\x5\x161\x3\x5\x6\x5\x165\n\x5\r\x5\xE\x5\x166"+
		"\x3\x5\x3\x5\x6\x5\x16B\n\x5\r\x5\xE\x5\x16C\x3\x6\x3\x6\x5\x6\x171\n"+
		"\x6\x3\x6\x3\x6\x5\x6\x175\n\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x6\a\x17C"+
		"\n\a\r\a\xE\a\x17D\x6\a\x180\n\a\r\a\xE\a\x181\x3\b\x3\b\x6\b\x186\n\b"+
		"\r\b\xE\b\x187\x3\b\a\b\x18B\n\b\f\b\xE\b\x18E\v\b\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x5\t\x198\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x5\n\x1A1\n\n\x3\v\x3\v\x6\v\x1A5\n\v\r\v\xE\v\x1A6\x3\v\a\v\x1AA\n\v"+
		"\f\v\xE\v\x1AD\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x1B6\n\f\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x1BE\n\xE\x3\xE\x3\xE\x5\xE\x1C2"+
		"\n\xE\x3\xE\x3\xE\x5\xE\x1C6\n\xE\x3\xE\x3\xE\x5\xE\x1CA\n\xE\x3\xE\a"+
		"\xE\x1CD\n\xE\f\xE\xE\xE\x1D0\v\xE\x3\xF\x5\xF\x1D3\n\xF\x3\xF\x3\xF\x6"+
		"\xF\x1D7\n\xF\r\xF\xE\xF\x1D8\x3\xF\x5\xF\x1DC\n\xF\x3\xF\a\xF\x1DF\n"+
		"\xF\f\xF\xE\xF\x1E2\v\xF\x3\xF\a\xF\x1E5\n\xF\f\xF\xE\xF\x1E8\v\xF\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x22C\n\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x5\x11\x232\n\x11\x3\x11\x3\x11\x5\x11\x236\n\x11\x3\x11"+
		"\x5\x11\x239\n\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x249\n\x15\x3\x15"+
		"\x3\x15\x5\x15\x24D\n\x15\x3\x15\a\x15\x250\n\x15\f\x15\xE\x15\x253\v"+
		"\x15\x5\x15\x255\n\x15\x3\x16\x3\x16\x3\x16\x5\x16\x25A\n\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x5\x16\x260\n\x16\x3\x16\x3\x16\x5\x16\x264\n\x16\x3"+
		"\x16\a\x16\x267\n\x16\f\x16\xE\x16\x26A\v\x16\x3\x17\x3\x17\x5\x17\x26E"+
		"\n\x17\x3\x17\x3\x17\x5\x17\x272\n\x17\x3\x17\x5\x17\x275\n\x17\x3\x17"+
		"\x3\x17\x5\x17\x279\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\x27F\n\x18"+
		"\x3\x18\x3\x18\x5\x18\x283\n\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x5"+
		"\x19\x28A\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x290\n\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5"+
		"\x19\x29D\n\x19\x3\x19\x5\x19\x2A0\n\x19\x3\x19\x5\x19\x2A3\n\x19\x3\x19"+
		"\x3\x19\x5\x19\x2A7\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2AD\n\x1A"+
		"\x3\x1A\x3\x1A\x5\x1A\x2B1\n\x1A\x3\x1A\a\x1A\x2B4\n\x1A\f\x1A\xE\x1A"+
		"\x2B7\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2BD\n\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x2C1\n\x1B\x3\x1B\x3\x1B\x5\x1B\x2C5\n\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x2C9\n\x1B\x3\x1B\x5\x1B\x2CC\n\x1B\x3\x1C\x3\x1C\x6\x1C\x2D0\n\x1C\r"+
		"\x1C\xE\x1C\x2D1\x3\x1C\x3\x1C\x6\x1C\x2D6\n\x1C\r\x1C\xE\x1C\x2D7\x5"+
		"\x1C\x2DA\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x6\x1C"+
		"\x2E3\n\x1C\r\x1C\xE\x1C\x2E4\x3\x1C\x3\x1C\x6\x1C\x2E9\n\x1C\r\x1C\xE"+
		"\x1C\x2EA\x5\x1C\x2ED\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x6\x1C\x2F3\n"+
		"\x1C\r\x1C\xE\x1C\x2F4\x3\x1C\x3\x1C\x6\x1C\x2F9\n\x1C\r\x1C\xE\x1C\x2FA"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x303\n\x1C\x3\x1D\x3"+
		"\x1D\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x30A\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x6\x1E\x310\n\x1E\r\x1E\xE\x1E\x311\x3\x1E\a\x1E\x315\n\x1E\f\x1E\xE"+
		"\x1E\x318\v\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x5\x1F\x31E\n\x1F\x3\x1F\x3"+
		"\x1F\x5\x1F\x322\n\x1F\x3\x1F\x5\x1F\x325\n\x1F\x3\x1F\x6\x1F\x328\n\x1F"+
		"\r\x1F\xE\x1F\x329\x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x5\""+
		"\x337\n\"\x3\"\x3\"\x3\"\x3\"\x5\"\x33D\n\"\x3\"\x3\"\x3#\x3#\x3$\x3$"+
		"\x3$\x3$\x5$\x347\n$\x3$\x3$\x5$\x34B\n$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3"+
		"%\x5%\x355\n%\x3%\x3%\x3%\x3%\x3%\x6%\x35C\n%\r%\xE%\x35D\x3%\x3%\x6%"+
		"\x362\n%\r%\xE%\x363\x5%\x366\n%\x3%\x3%\x3%\x5%\x36B\n%\x3&\x3&\x3&\x3"+
		"&\x5&\x371\n&\x3&\x3&\x5&\x375\n&\x3&\x5&\x378\n&\x3&\x3&\x5&\x37C\n&"+
		"\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x387\n&\x3&\x6&\x38A\n&\r&\xE"+
		"&\x38B\x3&\x3&\x6&\x390\n&\r&\xE&\x391\x5&\x394\n&\x3&\x3&\x3&\x5&\x399"+
		"\n&\x3\'\x3\'\x3\'\x5\'\x39E\n\'\x3\'\x3\'\x5\'\x3A2\n\'\x3\'\x3\'\x3"+
		"\'\x3\'\x5\'\x3A8\n\'\x3\'\x5\'\x3AB\n\'\x3\'\x3\'\x5\'\x3AF\n\'\x3\'"+
		"\x6\'\x3B2\n\'\r\'\xE\'\x3B3\x3\'\x3\'\x6\'\x3B8\n\'\r\'\xE\'\x3B9\x5"+
		"\'\x3BC\n\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x5(\x3C4\n(\x3(\x3(\x5(\x3C8\n("+
		"\x3(\x5(\x3CB\n(\x3(\x5(\x3CE\n(\x3(\x3(\x5(\x3D2\n(\x3(\x3(\x3)\x3)\x3"+
		")\x3)\x3*\x3*\x3*\x3*\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+"+
		"\x3E9\n+\x3+\x3+\a+\x3ED\n+\f+\xE+\x3F0\v+\x3+\x5+\x3F3\n+\x3+\x3+\x5"+
		"+\x3F7\n+\x3,\x3,\x3,\x3,\x3,\x3,\x6,\x3FF\n,\r,\xE,\x400\x3,\x3,\x6,"+
		"\x405\n,\r,\xE,\x406\x5,\x409\n,\x3-\x3-\x3.\x3.\x3.\x3.\x3.\x3.\x6.\x413"+
		"\n.\r.\xE.\x414\x3.\x3.\x6.\x419\n.\r.\xE.\x41A\x5.\x41D\n.\x3/\x3/\x6"+
		"/\x421\n/\r/\xE/\x422\x3/\x3/\x6/\x427\n/\r/\xE/\x428\x5/\x42B\n/\x3\x30"+
		"\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x435\n\x31\x3"+
		"\x31\x3\x31\x5\x31\x439\n\x31\x3\x31\x6\x31\x43C\n\x31\r\x31\xE\x31\x43D"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x5\x33\x446\n\x33\x3\x33\x3"+
		"\x33\x5\x33\x44A\n\x33\x3\x33\x3\x33\x5\x33\x44E\n\x33\x3\x33\x3\x33\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x5\x34\x456\n\x34\x3\x34\x3\x34\x5\x34\x45A"+
		"\n\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36"+
		"\x3\x36\x5\x36\x466\n\x36\x3\x36\x3\x36\x5\x36\x46A\n\x36\x3\x36\x3\x36"+
		"\x3\x36\x3\x36\x3\x36\x5\x36\x471\n\x36\x5\x36\x473\n\x36\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x5\x37\x479\n\x37\x3\x37\x3\x37\x5\x37\x47D\n\x37\x3\x37"+
		"\x3\x37\x3\x38\x3\x38\a\x38\x483\n\x38\f\x38\xE\x38\x486\v\x38\x3\x38"+
		"\x5\x38\x489\n\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x6\x39\x493\n\x39\r\x39\xE\x39\x494\x3\x39\x3\x39\x6\x39\x499\n\x39"+
		"\r\x39\xE\x39\x49A\x5\x39\x49D\n\x39\x3:\x3:\x3:\x3:\x3:\x3:\x6:\x4A5"+
		"\n:\r:\xE:\x4A6\x3:\x3:\x6:\x4AB\n:\r:\xE:\x4AC\x5:\x4AF\n:\x3;\x3;\x6"+
		";\x4B3\n;\r;\xE;\x4B4\x3;\x3;\x6;\x4B9\n;\r;\xE;\x4BA\x5;\x4BD\n;\x3<"+
		"\x3<\x5<\x4C1\n<\x3<\x3<\x5<\x4C5\n<\x3<\x3<\x5<\x4C9\n<\x3<\x3<\x3=\x3"+
		"=\x3=\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3?"+
		"\x3?\x5?\x4E1\n?\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x5@\x4EB\n@\x3@\x3@\x5"+
		"@\x4EF\n@\x3@\a@\x4F2\n@\f@\xE@\x4F5\v@\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x5\x41\x4FF\n\x41\x3\x41\x3\x41\x5\x41\x503"+
		"\n\x41\x3\x41\a\x41\x506\n\x41\f\x41\xE\x41\x509\v\x41\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x516"+
		"\n\x42\x3\x42\x3\x42\x5\x42\x51A\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x5\x42\x523\n\x42\x3\x42\x3\x42\x5\x42\x527\n\x42\x3"+
		"\x42\x5\x42\x52A\n\x42\x3\x43\x3\x43\x5\x43\x52E\n\x43\x3\x43\x3\x43\x5"+
		"\x43\x532\n\x43\x3\x43\x5\x43\x535\n\x43\a\x43\x537\n\x43\f\x43\xE\x43"+
		"\x53A\v\x43\x3\x43\x5\x43\x53D\n\x43\x3\x43\x5\x43\x540\n\x43\x3\x43\x3"+
		"\x43\x5\x43\x544\n\x43\x3\x43\x5\x43\x547\n\x43\x6\x43\x549\n\x43\r\x43"+
		"\xE\x43\x54A\x5\x43\x54D\n\x43\x3\x44\x3\x44\x3\x44\x5\x44\x552\n\x44"+
		"\x3\x44\x3\x44\x5\x44\x556\n\x44\x3\x44\x3\x44\x5\x44\x55A\n\x44\x3\x44"+
		"\x3\x44\x5\x44\x55E\n\x44\x5\x44\x560\n\x44\x3\x45\x3\x45\x3\x45\x3\x45"+
		"\x5\x45\x566\n\x45\x3\x45\x3\x45\x5\x45\x56A\n\x45\x3\x45\x5\x45\x56D"+
		"\n\x45\x3\x46\x3\x46\x3\x46\x5\x46\x572\n\x46\x3\x46\x3\x46\x5\x46\x576"+
		"\n\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x57C\n\x46\x3\x46\x5\x46\x57F"+
		"\n\x46\x3\x46\x3\x46\x5\x46\x583\n\x46\x3\x46\x6\x46\x586\n\x46\r\x46"+
		"\xE\x46\x587\x3\x46\x3\x46\x6\x46\x58C\n\x46\r\x46\xE\x46\x58D\x5\x46"+
		"\x590\n\x46\x3\x46\x3\x46\x3G\x3G\x3G\x5G\x597\nG\x3G\x3G\x5G\x59B\nG"+
		"\x3G\x3G\x3G\x3G\x5G\x5A1\nG\x3G\x5G\x5A4\nG\x3G\x6G\x5A7\nG\rG\xEG\x5A8"+
		"\x3G\x3G\x6G\x5AD\nG\rG\xEG\x5AE\x5G\x5B1\nG\x3G\x3G\x3H\x3H\x3H\x5H\x5B8"+
		"\nH\x3H\x3H\x5H\x5BC\nH\x3H\x3H\x3H\x3H\x5H\x5C2\nH\x3H\x5H\x5C5\nH\x3"+
		"H\x6H\x5C8\nH\rH\xEH\x5C9\x3H\x3H\x6H\x5CE\nH\rH\xEH\x5CF\x5H\x5D2\nH"+
		"\x3H\x3H\x3I\x3I\x3I\x3I\x5I\x5DA\nI\x3I\x3I\x5I\x5DE\nI\x3I\x5I\x5E1"+
		"\nI\x3I\x5I\x5E4\nI\x3I\x3I\x5I\x5E8\nI\x3I\x3I\x3J\x3J\x3J\x3J\x5J\x5F0"+
		"\nJ\x3J\x3J\x5J\x5F4\nJ\x3J\x3J\x5J\x5F8\nJ\x5J\x5FA\nJ\x3J\x5J\x5FD\n"+
		"J\x3K\x3K\x3K\x5K\x602\nK\x3L\x3L\x3L\x3L\x5L\x608\nL\x3L\x3L\x5L\x60C"+
		"\nL\x3L\x3L\x5L\x610\nL\x3L\aL\x613\nL\fL\xEL\x616\vL\x3M\x3M\x5M\x61A"+
		"\nM\x3M\x3M\x5M\x61E\nM\x3M\x3M\x5M\x622\nM\x3M\x3M\x3M\x5M\x627\nM\x3"+
		"N\x3N\x3O\x3O\x3O\x3O\x5O\x62F\nO\x5O\x631\nO\x3P\x3P\x3Q\x3Q\x3Q\x3Q"+
		"\x3R\x3R\x3R\x3R\x5R\x63D\nR\x3R\x3R\x5R\x641\nR\x3R\x3R\x3S\x3S\x3S\x3"+
		"S\x5S\x649\nS\x3S\x3S\x5S\x64D\nS\x3S\x3S\x3T\x3T\x3T\x3T\x5T\x655\nT"+
		"\x3T\x3T\x5T\x659\nT\x3T\x3T\x5T\x65D\nT\x3T\x3T\x5T\x661\nT\x3T\x3T\x5"+
		"T\x665\nT\x3T\x3T\x5T\x669\nT\x3T\x3T\x3U\x3U\x3U\x3U\x5U\x671\nU\x3U"+
		"\x3U\x5U\x675\nU\x3U\x3U\x3V\x3V\x3V\x3V\x3V\x3V\x6V\x67F\nV\rV\xEV\x680"+
		"\x3V\aV\x684\nV\fV\xEV\x687\vV\x3V\x5V\x68A\nV\x3V\x3V\x3W\x3W\x3W\x3"+
		"W\x5W\x692\nW\x3W\x5W\x695\nW\x3W\aW\x698\nW\fW\xEW\x69B\vW\x3W\x6W\x69E"+
		"\nW\rW\xEW\x69F\x5W\x6A2\nW\x3W\x3W\x6W\x6A6\nW\rW\xEW\x6A7\x5W\x6AA\n"+
		"W\x3X\x3X\x3X\x5X\x6AF\nX\x3X\x3X\x5X\x6B3\nX\x3X\x3X\x3X\x3X\x5X\x6B9"+
		"\nX\x3X\x3X\x5X\x6BD\nX\x3X\aX\x6C0\nX\fX\xEX\x6C3\vX\x3X\x3X\x3X\x3X"+
		"\x3X\x3X\x5X\x6CB\nX\x3X\x3X\x5X\x6CF\nX\x3X\aX\x6D2\nX\fX\xEX\x6D5\v"+
		"X\x5X\x6D7\nX\x3Y\x3Y\x3Y\x3Y\x5Y\x6DD\nY\x3Y\x3Y\x5Y\x6E1\nY\x3Y\x5Y"+
		"\x6E4\nY\x3Z\x3Z\x3Z\x3Z\x5Z\x6EA\nZ\x3Z\x3Z\x5Z\x6EE\nZ\x3Z\x3Z\x3[\x3"+
		"[\x3[\x3[\x5[\x6F6\n[\x3[\x3[\x5[\x6FA\n[\x3[\x3[\x3\\\x3\\\x3]\x3]\x3"+
		"]\x5]\x703\n]\x3]\x3]\x5]\x707\n]\x3]\x3]\x3]\x3]\x5]\x70D\n]\x3]\x5]"+
		"\x710\n]\x3]\x6]\x713\n]\r]\xE]\x714\x3]\x3]\x6]\x719\n]\r]\xE]\x71A\x5"+
		"]\x71D\n]\x3]\x3]\x3^\x3^\x5^\x723\n^\x3^\x3^\x5^\x727\n^\x3^\x3^\x3_"+
		"\x3_\x3_\x5_\x72E\n_\x3_\x3_\x3_\x3_\x6_\x734\n_\r_\xE_\x735\x3_\a_\x739"+
		"\n_\f_\xE_\x73C\v_\x3_\x3_\x3`\x3`\x5`\x742\n`\x3`\x3`\x5`\x746\n`\x3"+
		"`\x5`\x749\n`\x3`\x5`\x74C\n`\x3`\x5`\x74F\n`\x3`\x3`\x5`\x753\n`\x3`"+
		"\x6`\x756\n`\r`\xE`\x757\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3"+
		"\x61\x5\x61\x761\n\x61\x3\x62\x3\x62\x3\x62\x3\x62\x3\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x76B\n\x63\x3\x63\x3\x63\x5\x63\x76F\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x5\x63\x776\n\x63\x5\x63\x778\n\x63\x3\x64\x3\x64"+
		"\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x783\n\x64\x3"+
		"\x64\x3\x64\x5\x64\x787\n\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x78D"+
		"\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x792\n\x64\x3\x64\x3\x64\x3\x64\x3"+
		"\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x79C\n\x64\x3\x64\x3\x64\x5\x64"+
		"\x7A0\n\x64\x3\x64\x3\x64\x5\x64\x7A4\n\x64\x3\x64\a\x64\x7A7\n\x64\f"+
		"\x64\xE\x64\x7AA\v\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x7B0\n\x64\x3"+
		"\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3"+
		"\x64\x3\x64\x5\x64\x7BE\n\x64\x3\x64\x3\x64\x5\x64\x7C2\n\x64\x3\x64\x3"+
		"\x64\x3\x64\x5\x64\x7C7\n\x64\x3\x64\x3\x64\x5\x64\x7CB\n\x64\x3\x64\x3"+
		"\x64\x3\x64\x5\x64\x7D0\n\x64\x3\x64\x3\x64\x5\x64\x7D4\n\x64\x3\x64\x3"+
		"\x64\x3\x64\x5\x64\x7D9\n\x64\x3\x64\x3\x64\x5\x64\x7DD\n\x64\x3\x64\x3"+
		"\x64\x3\x64\x5\x64\x7E2\n\x64\x3\x64\x3\x64\x5\x64\x7E6\n\x64\x3\x64\x3"+
		"\x64\x3\x64\x5\x64\x7EB\n\x64\x3\x64\x3\x64\x5\x64\x7EF\n\x64\x3\x64\x3"+
		"\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x7F9\n\x64\x3\x64"+
		"\x3\x64\x5\x64\x7FD\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x802\n\x64\x3\x64"+
		"\x3\x64\x5\x64\x806\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x80B\n\x64\x3\x64"+
		"\x3\x64\x5\x64\x80F\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x814\n\x64\x3\x64"+
		"\x3\x64\x5\x64\x818\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x81D\n\x64\x3\x64"+
		"\x3\x64\x5\x64\x821\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x826\n\x64\x3\x64"+
		"\x3\x64\x5\x64\x82A\n\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3"+
		"\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x839\n\x64\x3\x64"+
		"\x3\x64\x5\x64\x83D\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x842\n\x64\x3\x64"+
		"\x3\x64\x5\x64\x846\n\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\a"+
		"\x64\x84E\n\x64\f\x64\xE\x64\x851\v\x64\x3\x65\x3\x65\x3\x65\x5\x65\x856"+
		"\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x85B\n\x65\x3\x65\x3\x65\x3\x66\x3"+
		"\x66\x5\x66\x861\n\x66\x3\x66\x3\x66\x5\x66\x865\n\x66\x3\x66\a\x66\x868"+
		"\n\x66\f\x66\xE\x66\x86B\v\x66\x3g\x3g\x5g\x86F\ng\x3g\x3g\x5g\x873\n"+
		"g\x3g\x3g\x5g\x877\ng\x5g\x879\ng\x3g\x3g\x5g\x87D\ng\x5g\x87F\ng\x3g"+
		"\x5g\x882\ng\x3g\x3g\x5g\x886\ng\x3h\x3h\x3h\x3h\x6h\x88C\nh\rh\xEh\x88D"+
		"\x3h\x3h\x3h\ah\x893\nh\fh\xEh\x896\vh\x3h\x3h\x3i\x3i\x3i\x3i\x5i\x89E"+
		"\ni\x3i\x3i\x5i\x8A2\ni\x3i\x3i\x3j\x3j\x3j\x3j\x6j\x8AA\nj\rj\xEj\x8AB"+
		"\x3j\x3j\x6j\x8B0\nj\rj\xEj\x8B1\x5j\x8B4\nj\x3j\x3j\x3k\x3k\x3k\x3k\x5"+
		"k\x8BC\nk\x3k\x3k\x5k\x8C0\nk\x3k\x5k\x8C3\nk\x3l\x3l\x5l\x8C7\nl\x3m"+
		"\x3m\x3m\x3m\x5m\x8CD\nm\x3m\x5m\x8D0\nm\x3m\x3m\x5m\x8D4\nm\x3m\x3m\x5"+
		"m\x8D8\nm\x3m\x3m\x5m\x8DC\nm\x3n\x3n\x3n\x5n\x8E1\nn\x3n\x3n\x3n\x5n"+
		"\x8E6\nn\x3n\x5n\x8E9\nn\x3n\x3n\x5n\x8ED\nn\x3n\x3n\x5n\x8F1\nn\x3n\x3"+
		"n\x5n\x8F5\nn\x3o\x3o\x5o\x8F9\no\x3p\x3p\x3p\x5p\x8FE\np\x3q\x5q\x901"+
		"\nq\x3q\x3q\x3q\x5q\x906\nq\x3q\x3q\x5q\x90A\nq\x3q\x5q\x90D\nq\x3r\x3"+
		"r\x3r\x3r\x5r\x913\nr\x3s\x3s\x5s\x917\ns\x3s\x5s\x91A\ns\x3t\x3t\x5t"+
		"\x91E\nt\x3t\x5t\x921\nt\x3t\x5t\x924\nt\x3t\x3t\x5t\x928\nt\x3t\x3t\x5"+
		"t\x92C\nt\x5t\x92E\nt\x3t\x3t\x5t\x932\nt\x3u\x3u\x5u\x936\nu\x3u\x6u"+
		"\x939\nu\ru\xEu\x93A\x3u\x5u\x93E\nu\x3v\x3v\x3v\x5v\x943\nv\x3w\x3w\x3"+
		"x\x5x\x948\nx\x3x\x5x\x94B\nx\x3x\x3x\x5x\x94F\nx\ax\x951\nx\fx\xEx\x954"+
		"\vx\x3x\x3x\x5x\x958\nx\x3x\x3x\x5x\x95C\nx\x3x\x5x\x95F\nx\ax\x961\n"+
		"x\fx\xEx\x964\vx\x3y\x3y\x5y\x968\ny\x3y\x3y\x3z\x3z\x3z\x5z\x96F\nz\x3"+
		"{\x3{\x5{\x973\n{\x3{\x3{\x5{\x977\n{\x3{\x3{\x5{\x97B\n{\x3{\a{\x97E"+
		"\n{\f{\xE{\x981\v{\x5{\x983\n{\x3{\x5{\x986\n{\x3{\x3{\x3|\x3|\x5|\x98C"+
		"\n|\x3|\x3|\x5|\x990\n|\x3|\x3|\x5|\x994\n|\x3|\x3|\x5|\x998\n|\x3|\x3"+
		"|\x5|\x99C\n|\x3|\x5|\x99F\n|\x3|\x3|\x5|\x9A3\n|\x3|\x5|\x9A6\n|\x3|"+
		"\x5|\x9A9\n|\x3}\x3}\x5}\x9AD\n}\x3}\x3}\x5}\x9B1\n}\x3~\x3~\x5~\x9B5"+
		"\n~\x3~\x3~\x5~\x9B9\n~\x3~\a~\x9BC\n~\f~\xE~\x9BF\v~\x3\x7F\x3\x7F\x3"+
		"\x7F\x3\x7F\x3\x7F\x5\x7F\x9C6\n\x7F\x3\x7F\x3\x7F\x3\x80\x3\x80\x6\x80"+
		"\x9CC\n\x80\r\x80\xE\x80\x9CD\x3\x80\x3\x80\x3\x80\x6\x80\x9D3\n\x80\r"+
		"\x80\xE\x80\x9D4\x3\x80\x5\x80\x9D8\n\x80\x3\x81\x3\x81\x3\x81\x3\x81"+
		"\x5\x81\x9DE\n\x81\x3\x81\x3\x81\x3\x81\x5\x81\x9E3\n\x81\x3\x82\x3\x82"+
		"\x3\x83\x3\x83\x3\x83\a\x83\x9EA\n\x83\f\x83\xE\x83\x9ED\v\x83\x3\x83"+
		"\x3\x83\x3\x83\x6\x83\x9F2\n\x83\r\x83\xE\x83\x9F3\x5\x83\x9F6\n\x83\x3"+
		"\x84\x3\x84\x3\x85\x3\x85\x3\x85\a\x85\x9FD\n\x85\f\x85\xE\x85\xA00\v"+
		"\x85\x3\x86\x3\x86\x5\x86\xA04\n\x86\x3\x86\x3\x86\x5\x86\xA08\n\x86\x3"+
		"\x87\x3\x87\x5\x87\xA0C\n\x87\x3\x87\x3\x87\x5\x87\xA10\n\x87\x3\x87\x5"+
		"\x87\xA13\n\x87\x3\x88\x3\x88\x3\x88\x3\x88\x3\x88\x5\x88\xA1A\n\x88\x3"+
		"\x89\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x5\x8B\xA23\n\x8B\x3\x8B"+
		"\x5\x8B\xA26\n\x8B\x3\x8B\x3\x8B\x5\x8B\xA2A\n\x8B\x3\x8B\x5\x8B\xA2D"+
		"\n\x8B\x3\x8C\x3\x8C\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E\x2\x2\x3\xC6\x8F"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2"+
		"\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2"+
		"N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2"+
		"l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88"+
		"\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C"+
		"\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0"+
		"\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4"+
		"\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8"+
		"\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC"+
		"\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100"+
		"\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112"+
		"\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x2\x16\x5\x2\x16\x16##\xA8\xA8\x4"+
		"\x2PP\xA6\xA6\x3\x2&\x31\x4\x2\xB1\xB1\xB5\xB5\x3\x2GK\x5\x2\xBE\xBE\xC5"+
		"\xC5\xC9\xC9\a\x2\x12\x12\x16\x16YY\x81\x81\x8C\x8C\x4\x2\x8F\x90\xB9"+
		"\xB9\x4\x2\x66h\x9F\x9F\x4\x2\x5\x5\t\t\x4\x2\xA1\xA1\xA7\xA7\x4\x2\x4"+
		"\x4\n\n\x4\x2\x18\x19\x82\x82\x3\x2\x18\x19\f\x2\x17\x17\x1A\x1A!!$$\x35"+
		"\x35[[__\xA0\xA0\xA5\xA5\xB2\xB2\a\x2ZZ\x64\x64\xBE\xC1\xC3\xC3\xC7\xC7"+
		"\x6\x2LLvw\xAC\xAC\xCE\xD3\x6\x2\x3\x3\a\b\n\v\xBB\xBB\x6\x2NNRR\x85\x85"+
		"\x8A\x8A\v\x2\f\x38\x41\x46L\x64iinxz{\x80\x85\x8A\x8F\x91\xBA\xBCD\x2"+
		"\x11C\x3\x2\x2\x2\x4\x120\x3\x2\x2\x2\x6\x157\x3\x2\x2\x2\b\x15D\x3\x2"+
		"\x2\x2\n\x16E\x3\x2\x2\x2\f\x17F\x3\x2\x2\x2\xE\x183\x3\x2\x2\x2\x10\x197"+
		"\x3\x2\x2\x2\x12\x1A0\x3\x2\x2\x2\x14\x1A2\x3\x2\x2\x2\x16\x1B5\x3\x2"+
		"\x2\x2\x18\x1B7\x3\x2\x2\x2\x1A\x1B9\x3\x2\x2\x2\x1C\x1D2\x3\x2\x2\x2"+
		"\x1E\x22B\x3\x2\x2\x2 \x22D\x3\x2\x2\x2\"\x23A\x3\x2\x2\x2$\x23C\x3\x2"+
		"\x2\x2&\x240\x3\x2\x2\x2(\x244\x3\x2\x2\x2*\x259\x3\x2\x2\x2,\x26B\x3"+
		"\x2\x2\x2.\x27C\x3\x2\x2\x2\x30\x289\x3\x2\x2\x2\x32\x2A8\x3\x2\x2\x2"+
		"\x34\x2B8\x3\x2\x2\x2\x36\x302\x3\x2\x2\x2\x38\x304\x3\x2\x2\x2:\x309"+
		"\x3\x2\x2\x2<\x31B\x3\x2\x2\x2>\x32B\x3\x2\x2\x2@\x32F\x3\x2\x2\x2\x42"+
		"\x336\x3\x2\x2\x2\x44\x340\x3\x2\x2\x2\x46\x342\x3\x2\x2\x2H\x34E\x3\x2"+
		"\x2\x2J\x36C\x3\x2\x2\x2L\x39D\x3\x2\x2\x2N\x3BF\x3\x2\x2\x2P\x3D5\x3"+
		"\x2\x2\x2R\x3D9\x3\x2\x2\x2T\x3F6\x3\x2\x2\x2V\x3F8\x3\x2\x2\x2X\x40A"+
		"\x3\x2\x2\x2Z\x40C\x3\x2\x2\x2\\\x41E\x3\x2\x2\x2^\x42C\x3\x2\x2\x2`\x430"+
		"\x3\x2\x2\x2\x62\x43F\x3\x2\x2\x2\x64\x445\x3\x2\x2\x2\x66\x451\x3\x2"+
		"\x2\x2h\x45D\x3\x2\x2\x2j\x461\x3\x2\x2\x2l\x474\x3\x2\x2\x2n\x480\x3"+
		"\x2\x2\x2p\x48C\x3\x2\x2\x2r\x49E\x3\x2\x2\x2t\x4B0\x3\x2\x2\x2v\x4BE"+
		"\x3\x2\x2\x2x\x4CC\x3\x2\x2\x2z\x4D0\x3\x2\x2\x2|\x4D8\x3\x2\x2\x2~\x4E2"+
		"\x3\x2\x2\x2\x80\x4F6\x3\x2\x2\x2\x82\x50A\x3\x2\x2\x2\x84\x54C\x3\x2"+
		"\x2\x2\x86\x55F\x3\x2\x2\x2\x88\x561\x3\x2\x2\x2\x8A\x571\x3\x2\x2\x2"+
		"\x8C\x596\x3\x2\x2\x2\x8E\x5B7\x3\x2\x2\x2\x90\x5D5\x3\x2\x2\x2\x92\x5EB"+
		"\x3\x2\x2\x2\x94\x5FE\x3\x2\x2\x2\x96\x603\x3\x2\x2\x2\x98\x617\x3\x2"+
		"\x2\x2\x9A\x628\x3\x2\x2\x2\x9C\x62A\x3\x2\x2\x2\x9E\x632\x3\x2\x2\x2"+
		"\xA0\x634\x3\x2\x2\x2\xA2\x638\x3\x2\x2\x2\xA4\x644\x3\x2\x2\x2\xA6\x650"+
		"\x3\x2\x2\x2\xA8\x66C\x3\x2\x2\x2\xAA\x678\x3\x2\x2\x2\xAC\x68D\x3\x2"+
		"\x2\x2\xAE\x6D6\x3\x2\x2\x2\xB0\x6D8\x3\x2\x2\x2\xB2\x6E5\x3\x2\x2\x2"+
		"\xB4\x6F1\x3\x2\x2\x2\xB6\x6FD\x3\x2\x2\x2\xB8\x702\x3\x2\x2\x2\xBA\x720"+
		"\x3\x2\x2\x2\xBC\x72D\x3\x2\x2\x2\xBE\x73F\x3\x2\x2\x2\xC0\x759\x3\x2"+
		"\x2\x2\xC2\x762\x3\x2\x2\x2\xC4\x766\x3\x2\x2\x2\xC6\x7AF\x3\x2\x2\x2"+
		"\xC8\x855\x3\x2\x2\x2\xCA\x85E\x3\x2\x2\x2\xCC\x86C\x3\x2\x2\x2\xCE\x887"+
		"\x3\x2\x2\x2\xD0\x899\x3\x2\x2\x2\xD2\x8A5\x3\x2\x2\x2\xD4\x8B7\x3\x2"+
		"\x2\x2\xD6\x8C6\x3\x2\x2\x2\xD8\x8C8\x3\x2\x2\x2\xDA\x8DD\x3\x2\x2\x2"+
		"\xDC\x8F8\x3\x2\x2\x2\xDE\x8FA\x3\x2\x2\x2\xE0\x900\x3\x2\x2\x2\xE2\x912"+
		"\x3\x2\x2\x2\xE4\x914\x3\x2\x2\x2\xE6\x91D\x3\x2\x2\x2\xE8\x935\x3\x2"+
		"\x2\x2\xEA\x93F\x3\x2\x2\x2\xEC\x944\x3\x2\x2\x2\xEE\x952\x3\x2\x2\x2"+
		"\xF0\x967\x3\x2\x2\x2\xF2\x96B\x3\x2\x2\x2\xF4\x970\x3\x2\x2\x2\xF6\x98B"+
		"\x3\x2\x2\x2\xF8\x9AA\x3\x2\x2\x2\xFA\x9B2\x3\x2\x2\x2\xFC\x9C5\x3\x2"+
		"\x2\x2\xFE\x9D7\x3\x2\x2\x2\x100\x9D9\x3\x2\x2\x2\x102\x9E4\x3\x2\x2\x2"+
		"\x104\x9F5\x3\x2\x2\x2\x106\x9F7\x3\x2\x2\x2\x108\x9F9\x3\x2\x2\x2\x10A"+
		"\xA01\x3\x2\x2\x2\x10C\xA09\x3\x2\x2\x2\x10E\xA19\x3\x2\x2\x2\x110\xA1B"+
		"\x3\x2\x2\x2\x112\xA1E\x3\x2\x2\x2\x114\xA22\x3\x2\x2\x2\x116\xA2E\x3"+
		"\x2\x2\x2\x118\xA30\x3\x2\x2\x2\x11A\xA32\x3\x2\x2\x2\x11C\x11D\x5\x4"+
		"\x3\x2\x11D\x11E\a\x2\x2\x3\x11E\x3\x3\x2\x2\x2\x11F\x121\a\xD8\x2\x2"+
		"\x120\x11F\x3\x2\x2\x2\x120\x121\x3\x2\x2\x2\x121\x125\x3\x2\x2\x2\x122"+
		"\x124\a\xD6\x2\x2\x123\x122\x3\x2\x2\x2\x124\x127\x3\x2\x2\x2\x125\x123"+
		"\x3\x2\x2\x2\x125\x126\x3\x2\x2\x2\x126\x12E\x3\x2\x2\x2\x127\x125\x3"+
		"\x2\x2\x2\x128\x12A\x5\x6\x4\x2\x129\x12B\a\xD6\x2\x2\x12A\x129\x3\x2"+
		"\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12C\x12D\x3\x2\x2"+
		"\x2\x12D\x12F\x3\x2\x2\x2\x12E\x128\x3\x2\x2\x2\x12E\x12F\x3\x2\x2\x2"+
		"\x12F\x131\x3\x2\x2\x2\x130\x132\x5\b\x5\x2\x131\x130\x3\x2\x2\x2\x131"+
		"\x132\x3\x2\x2\x2\x132\x136\x3\x2\x2\x2\x133\x135\a\xD6\x2\x2\x134\x133"+
		"\x3\x2\x2\x2\x135\x138\x3\x2\x2\x2\x136\x134\x3\x2\x2\x2\x136\x137\x3"+
		"\x2\x2\x2\x137\x13A\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2\x139\x13B\x5\f\a"+
		"\x2\x13A\x139\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B\x13F\x3\x2\x2\x2"+
		"\x13C\x13E\a\xD6\x2\x2\x13D\x13C\x3\x2\x2\x2\x13E\x141\x3\x2\x2\x2\x13F"+
		"\x13D\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141\x13F"+
		"\x3\x2\x2\x2\x142\x144\x5\xE\b\x2\x143\x142\x3\x2\x2\x2\x143\x144\x3\x2"+
		"\x2\x2\x144\x148\x3\x2\x2\x2\x145\x147\a\xD6\x2\x2\x146\x145\x3\x2\x2"+
		"\x2\x147\x14A\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2"+
		"\x149\x14C\x3\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14B\x14D\x5\x14\v\x2\x14C"+
		"\x14B\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x151\x3\x2\x2\x2\x14E\x150"+
		"\a\xD6\x2\x2\x14F\x14E\x3\x2\x2\x2\x150\x153\x3\x2\x2\x2\x151\x14F\x3"+
		"\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x155\x3\x2\x2\x2\x153\x151\x3\x2"+
		"\x2\x2\x154\x156\a\xD8\x2\x2\x155\x154\x3\x2\x2\x2\x155\x156\x3\x2\x2"+
		"\x2\x156\x5\x3\x2\x2\x2\x157\x158\a\xB3\x2\x2\x158\x159\a\xD8\x2\x2\x159"+
		"\x15A\a\xD2\x2\x2\x15A\x15B\a\xD8\x2\x2\x15B\x15C\a\x1F\x2\x2\x15C\a\x3"+
		"\x2\x2\x2\x15D\x15F\a\x14\x2\x2\x15E\x160\a\xD6\x2\x2\x15F\x15E\x3\x2"+
		"\x2\x2\x160\x161\x3\x2\x2\x2\x161\x15F\x3\x2\x2\x2\x161\x162\x3\x2\x2"+
		"\x2\x162\x164\x3\x2\x2\x2\x163\x165\x5\n\x6\x2\x164\x163\x3\x2\x2\x2\x165"+
		"\x166\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x166\x167\x3\x2\x2\x2\x167\x168"+
		"\x3\x2\x2\x2\x168\x16A\a\x41\x2\x2\x169\x16B\a\xD6\x2\x2\x16A\x169\x3"+
		"\x2\x2\x2\x16B\x16C\x3\x2\x2\x2\x16C\x16A\x3\x2\x2\x2\x16C\x16D\x3\x2"+
		"\x2\x2\x16D\t\x3\x2\x2\x2\x16E\x170\x5\xFE\x80\x2\x16F\x171\a\xD8\x2\x2"+
		"\x170\x16F\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172"+
		"\x174\a\xBE\x2\x2\x173\x175\a\xD8\x2\x2\x174\x173\x3\x2\x2\x2\x174\x175"+
		"\x3\x2\x2\x2\x175\x176\x3\x2\x2\x2\x176\x177\x5\x112\x8A\x2\x177\x178"+
		"\a\xD6\x2\x2\x178\v\x3\x2\x2\x2\x179\x17B\x5\x1A\xE\x2\x17A\x17C\a\xD6"+
		"\x2\x2\x17B\x17A\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x17B\x3\x2\x2"+
		"\x2\x17D\x17E\x3\x2\x2\x2\x17E\x180\x3\x2\x2\x2\x17F\x179\x3\x2\x2\x2"+
		"\x180\x181\x3\x2\x2\x2\x181\x17F\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182"+
		"\r\x3\x2\x2\x2\x183\x18C\x5\x12\n\x2\x184\x186\a\xD6\x2\x2\x185\x184\x3"+
		"\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\x185\x3\x2\x2\x2\x187\x188\x3\x2"+
		"\x2\x2\x188\x189\x3\x2\x2\x2\x189\x18B\x5\x12\n\x2\x18A\x185\x3\x2\x2"+
		"\x2\x18B\x18E\x3\x2\x2\x2\x18C\x18A\x3\x2\x2\x2\x18C\x18D\x3\x2\x2\x2"+
		"\x18D\xF\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2\x18F\x190\a|\x2\x2\x190\x191"+
		"\a\xD8\x2\x2\x191\x198\a\xD1\x2\x2\x192\x193\a~\x2\x2\x193\x194\a\xD8"+
		"\x2\x2\x194\x198\t\x2\x2\x2\x195\x198\a}\x2\x2\x196\x198\a\x7F\x2\x2\x197"+
		"\x18F\x3\x2\x2\x2\x197\x192\x3\x2\x2\x2\x197\x195\x3\x2\x2\x2\x197\x196"+
		"\x3\x2\x2\x2\x198\x11\x3\x2\x2\x2\x199\x1A1\x5\x18\r\x2\x19A\x1A1\x5\x30"+
		"\x19\x2\x19B\x1A1\x5:\x1E\x2\x19C\x1A1\x5\x42\"\x2\x19D\x1A1\x5n\x38\x2"+
		"\x19E\x1A1\x5\x10\t\x2\x19F\x1A1\x5\xBC_\x2\x1A0\x199\x3\x2\x2\x2\x1A0"+
		"\x19A\x3\x2\x2\x2\x1A0\x19B\x3\x2\x2\x2\x1A0\x19C\x3\x2\x2\x2\x1A0\x19D"+
		"\x3\x2\x2\x2\x1A0\x19E\x3\x2\x2\x2\x1A0\x19F\x3\x2\x2\x2\x1A1\x13\x3\x2"+
		"\x2\x2\x1A2\x1AB\x5\x16\f\x2\x1A3\x1A5\a\xD6\x2\x2\x1A4\x1A3\x3\x2\x2"+
		"\x2\x1A5\x1A6\x3\x2\x2\x2\x1A6\x1A4\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2"+
		"\x1A7\x1A8\x3\x2\x2\x2\x1A8\x1AA\x5\x16\f\x2\x1A9\x1A4\x3\x2\x2\x2\x1AA"+
		"\x1AD\x3\x2\x2\x2\x1AB\x1A9\x3\x2\x2\x2\x1AB\x1AC\x3\x2\x2\x2\x1AC\x15"+
		"\x3\x2\x2\x2\x1AD\x1AB\x3\x2\x2\x2\x1AE\x1B6\x5\x18\r\x2\x1AF\x1B6\x5"+
		"L\'\x2\x1B0\x1B6\x5n\x38\x2\x1B1\x1B6\x5\x8A\x46\x2\x1B2\x1B6\x5\x8CG"+
		"\x2\x1B3\x1B6\x5\x8EH\x2\x1B4\x1B6\x5\xB8]\x2\x1B5\x1AE\x3\x2\x2\x2\x1B5"+
		"\x1AF\x3\x2\x2\x2\x1B5\x1B0\x3\x2\x2\x2\x1B5\x1B1\x3\x2\x2\x2\x1B5\x1B2"+
		"\x3\x2\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B5\x1B4\x3\x2\x2\x2\x1B6\x17\x3\x2"+
		"\x2\x2\x1B7\x1B8\x5\x1C\xF\x2\x1B8\x19\x3\x2\x2\x2\x1B9\x1BA\a\x10\x2"+
		"\x2\x1BA\x1BB\a\xD8\x2\x2\x1BB\x1BD\x5\xE2r\x2\x1BC\x1BE\a\xD8\x2\x2\x1BD"+
		"\x1BC\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1C1"+
		"\a\xBE\x2\x2\x1C0\x1C2\a\xD8\x2\x2\x1C1\x1C0\x3\x2\x2\x2\x1C1\x1C2\x3"+
		"\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1CE\x5\x112\x8A\x2\x1C4\x1C6\a\xD8"+
		"\x2\x2\x1C5\x1C4\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2"+
		"\x2\x1C7\x1C9\a\x5\x2\x2\x1C8\x1CA\a\xD8\x2\x2\x1C9\x1C8\x3\x2\x2\x2\x1C9"+
		"\x1CA\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2\x1CB\x1CD\x5\x112\x8A\x2\x1CC"+
		"\x1C5\x3\x2\x2\x2\x1CD\x1D0\x3\x2\x2\x2\x1CE\x1CC\x3\x2\x2\x2\x1CE\x1CF"+
		"\x3\x2\x2\x2\x1CF\x1B\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2\x2\x1D1\x1D3\x5\x10E"+
		"\x88\x2\x1D2\x1D1\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2"+
		"\x2\x1D4\x1E0\x5\x1E\x10\x2\x1D5\x1D7\a\xD6\x2\x2\x1D6\x1D5\x3\x2\x2\x2"+
		"\x1D7\x1D8\x3\x2\x2\x2\x1D8\x1D6\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9"+
		"\x1DB\x3\x2\x2\x2\x1DA\x1DC\a\xD8\x2\x2\x1DB\x1DA\x3\x2\x2\x2\x1DB\x1DC"+
		"\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2\x2\x1DD\x1DF\x5\x1E\x10\x2\x1DE\x1D6\x3"+
		"\x2\x2\x2\x1DF\x1E2\x3\x2\x2\x2\x1E0\x1DE\x3\x2\x2\x2\x1E0\x1E1\x3\x2"+
		"\x2\x2\x1E1\x1E6\x3\x2\x2\x2\x1E2\x1E0\x3\x2\x2\x2\x1E3\x1E5\a\xD6\x2"+
		"\x2\x1E4\x1E3\x3\x2\x2\x2\x1E5\x1E8\x3\x2\x2\x2\x1E6\x1E4\x3\x2\x2\x2"+
		"\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1D\x3\x2\x2\x2\x1E8\x1E6\x3\x2\x2\x2\x1E9"+
		"\x22C\x5 \x11\x2\x1EA\x22C\x5\x1A\xE\x2\x1EB\x22C\x5\"\x12\x2\x1EC\x22C"+
		"\x5$\x13\x2\x1ED\x22C\x5&\x14\x2\x1EE\x22C\x5(\x15\x2\x1EF\x22C\x5*\x16"+
		"\x2\x1F0\x22C\x5.\x18\x2\x1F1\x22C\x5\x34\x1B\x2\x1F2\x22C\x5\x32\x1A"+
		"\x2\x1F3\x22C\x5\x36\x1C\x2\x1F4\x22C\x5\x38\x1D\x2\x1F5\x22C\x5> \x2"+
		"\x1F6\x22C\x5@!\x2\x1F7\x22C\x5\x44#\x2\x1F8\x22C\x5\xD6l\x2\x1F9\x22C"+
		"\x5\x46$\x2\x1FA\x22C\x5H%\x2\x1FB\x22C\x5J&\x2\x1FC\x22C\x5N(\x2\x1FD"+
		"\x22C\x5P)\x2\x1FE\x22C\x5R*\x2\x1FF\x22C\x5T+\x2\x200\x22C\x5^\x30\x2"+
		"\x201\x22C\x5\xDCo\x2\x202\x22C\x5`\x31\x2\x203\x22C\x5\x62\x32\x2\x204"+
		"\x22C\x5\x64\x33\x2\x205\x22C\x5\x66\x34\x2\x206\x22C\x5h\x35\x2\x207"+
		"\x22C\x5j\x36\x2\x208\x22C\x5l\x37\x2\x209\x22C\x5n\x38\x2\x20A\x22C\x5"+
		"v<\x2\x20B\x22C\x5x=\x2\x20C\x22C\x5z>\x2\x20D\x22C\x5|?\x2\x20E\x22C"+
		"\x5~@\x2\x20F\x22C\x5\x80\x41\x2\x210\x22C\x5\x82\x42\x2\x211\x22C\x5"+
		"\x88\x45\x2\x212\x22C\x5\x90I\x2\x213\x22C\x5\x92J\x2\x214\x22C\x5\x94"+
		"K\x2\x215\x22C\x5\x96L\x2\x216\x22C\x5\x9AN\x2\x217\x22C\x5\x9CO\x2\x218"+
		"\x22C\x5\x9EP\x2\x219\x22C\x5\xA0Q\x2\x21A\x22C\x5\xA2R\x2\x21B\x22C\x5"+
		"\xA4S\x2\x21C\x22C\x5\xA6T\x2\x21D\x22C\x5\xA8U\x2\x21E\x22C\x5\xAAV\x2"+
		"\x21F\x22C\x5\xB0Y\x2\x220\x22C\x5\xB2Z\x2\x221\x22C\x5\xB4[\x2\x222\x22C"+
		"\x5\xB6\\\x2\x223\x22C\x5\xBA^\x2\x224\x22C\x5\xC2\x62\x2\x225\x22C\x5"+
		"\xC4\x63\x2\x226\x22C\x5\xC8\x65\x2\x227\x22C\x5\xCEh\x2\x228\x22C\x5"+
		"\xD0i\x2\x229\x22C\x5\xD2j\x2\x22A\x22C\x5\xD4k\x2\x22B\x1E9\x3\x2\x2"+
		"\x2\x22B\x1EA\x3\x2\x2\x2\x22B\x1EB\x3\x2\x2\x2\x22B\x1EC\x3\x2\x2\x2"+
		"\x22B\x1ED\x3\x2\x2\x2\x22B\x1EE\x3\x2\x2\x2\x22B\x1EF\x3\x2\x2\x2\x22B"+
		"\x1F0\x3\x2\x2\x2\x22B\x1F1\x3\x2\x2\x2\x22B\x1F2\x3\x2\x2\x2\x22B\x1F3"+
		"\x3\x2\x2\x2\x22B\x1F4\x3\x2\x2\x2\x22B\x1F5\x3\x2\x2\x2\x22B\x1F6\x3"+
		"\x2\x2\x2\x22B\x1F7\x3\x2\x2\x2\x22B\x1F8\x3\x2\x2\x2\x22B\x1F9\x3\x2"+
		"\x2\x2\x22B\x1FA\x3\x2\x2\x2\x22B\x1FB\x3\x2\x2\x2\x22B\x1FC\x3\x2\x2"+
		"\x2\x22B\x1FD\x3\x2\x2\x2\x22B\x1FE\x3\x2\x2\x2\x22B\x1FF\x3\x2\x2\x2"+
		"\x22B\x200\x3\x2\x2\x2\x22B\x201\x3\x2\x2\x2\x22B\x202\x3\x2\x2\x2\x22B"+
		"\x203\x3\x2\x2\x2\x22B\x204\x3\x2\x2\x2\x22B\x205\x3\x2\x2\x2\x22B\x206"+
		"\x3\x2\x2\x2\x22B\x207\x3\x2\x2\x2\x22B\x208\x3\x2\x2\x2\x22B\x209\x3"+
		"\x2\x2\x2\x22B\x20A\x3\x2\x2\x2\x22B\x20B\x3\x2\x2\x2\x22B\x20C\x3\x2"+
		"\x2\x2\x22B\x20D\x3\x2\x2\x2\x22B\x20E\x3\x2\x2\x2\x22B\x20F\x3\x2\x2"+
		"\x2\x22B\x210\x3\x2\x2\x2\x22B\x211\x3\x2\x2\x2\x22B\x212\x3\x2\x2\x2"+
		"\x22B\x213\x3\x2\x2\x2\x22B\x214\x3\x2\x2\x2\x22B\x215\x3\x2\x2\x2\x22B"+
		"\x216\x3\x2\x2\x2\x22B\x217\x3\x2\x2\x2\x22B\x218\x3\x2\x2\x2\x22B\x219"+
		"\x3\x2\x2\x2\x22B\x21A\x3\x2\x2\x2\x22B\x21B\x3\x2\x2\x2\x22B\x21C\x3"+
		"\x2\x2\x2\x22B\x21D\x3\x2\x2\x2\x22B\x21E\x3\x2\x2\x2\x22B\x21F\x3\x2"+
		"\x2\x2\x22B\x220\x3\x2\x2\x2\x22B\x221\x3\x2\x2\x2\x22B\x222\x3\x2\x2"+
		"\x2\x22B\x223\x3\x2\x2\x2\x22B\x224\x3\x2\x2\x2\x22B\x225\x3\x2\x2\x2"+
		"\x22B\x226\x3\x2\x2\x2\x22B\x227\x3\x2\x2\x2\x22B\x228\x3\x2\x2\x2\x22B"+
		"\x229\x3\x2\x2\x2\x22B\x22A\x3\x2\x2\x2\x22C\x1F\x3\x2\x2\x2\x22D\x22E"+
		"\a\x11\x2\x2\x22E\x22F\a\xD8\x2\x2\x22F\x238\x5\xC6\x64\x2\x230\x232\a"+
		"\xD8\x2\x2\x231\x230\x3\x2\x2\x2\x231\x232\x3\x2\x2\x2\x232\x233\x3\x2"+
		"\x2\x2\x233\x235\a\x5\x2\x2\x234\x236\a\xD8\x2\x2\x235\x234\x3\x2\x2\x2"+
		"\x235\x236\x3\x2\x2\x2\x236\x237\x3\x2\x2\x2\x237\x239\x5\xC6\x64\x2\x238"+
		"\x231\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239!\x3\x2\x2\x2\x23A\x23B\a"+
		"\x15\x2\x2\x23B#\x3\x2\x2\x2\x23C\x23D\a\x1D\x2\x2\x23D\x23E\a\xD8\x2"+
		"\x2\x23E\x23F\x5\xC6\x64\x2\x23F%\x3\x2\x2\x2\x240\x241\a\x1E\x2\x2\x241"+
		"\x242\a\xD8\x2\x2\x242\x243\x5\xC6\x64\x2\x243\'\x3\x2\x2\x2\x244\x254"+
		"\a \x2\x2\x245\x246\a\xD8\x2\x2\x246\x251\x5\xC6\x64\x2\x247\x249\a\xD8"+
		"\x2\x2\x248\x247\x3\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249\x24A\x3\x2\x2"+
		"\x2\x24A\x24C\a\x5\x2\x2\x24B\x24D\a\xD8\x2\x2\x24C\x24B\x3\x2\x2\x2\x24C"+
		"\x24D\x3\x2\x2\x2\x24D\x24E\x3\x2\x2\x2\x24E\x250\x5\xC6\x64\x2\x24F\x248"+
		"\x3\x2\x2\x2\x250\x253\x3\x2\x2\x2\x251\x24F\x3\x2\x2\x2\x251\x252\x3"+
		"\x2\x2\x2\x252\x255\x3\x2\x2\x2\x253\x251\x3\x2\x2\x2\x254\x245\x3\x2"+
		"\x2\x2\x254\x255\x3\x2\x2\x2\x255)\x3\x2\x2\x2\x256\x257\x5\x118\x8D\x2"+
		"\x257\x258\a\xD8\x2\x2\x258\x25A\x3\x2\x2\x2\x259\x256\x3\x2\x2\x2\x259"+
		"\x25A\x3\x2\x2\x2\x25A\x25B\x3\x2\x2\x2\x25B\x25C\a\"\x2\x2\x25C\x25D"+
		"\a\xD8\x2\x2\x25D\x268\x5,\x17\x2\x25E\x260\a\xD8\x2\x2\x25F\x25E\x3\x2"+
		"\x2\x2\x25F\x260\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261\x263\a\x5\x2\x2"+
		"\x262\x264\a\xD8\x2\x2\x263\x262\x3\x2\x2\x2\x263\x264\x3\x2\x2\x2\x264"+
		"\x265\x3\x2\x2\x2\x265\x267\x5,\x17\x2\x266\x25F\x3\x2\x2\x2\x267\x26A"+
		"\x3\x2\x2\x2\x268\x266\x3\x2\x2\x2\x268\x269\x3\x2\x2\x2\x269+\x3\x2\x2"+
		"\x2\x26A\x268\x3\x2\x2\x2\x26B\x26D\x5\xFE\x80\x2\x26C\x26E\x5\x116\x8C"+
		"\x2\x26D\x26C\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E\x271\x3\x2\x2\x2"+
		"\x26F\x270\a\xD8\x2\x2\x270\x272\x5\x100\x81\x2\x271\x26F\x3\x2\x2\x2"+
		"\x271\x272\x3\x2\x2\x2\x272\x274\x3\x2\x2\x2\x273\x275\a\xD8\x2\x2\x274"+
		"\x273\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2\x275\x276\x3\x2\x2\x2\x276\x278"+
		"\a\xBE\x2\x2\x277\x279\a\xD8\x2\x2\x278\x277\x3\x2\x2\x2\x278\x279\x3"+
		"\x2\x2\x2\x279\x27A\x3\x2\x2\x2\x27A\x27B\x5\xC6\x64\x2\x27B-\x3\x2\x2"+
		"\x2\x27C\x27E\a$\x2\x2\x27D\x27F\a\xD8\x2\x2\x27E\x27D\x3\x2\x2\x2\x27E"+
		"\x27F\x3\x2\x2\x2\x27F\x280\x3\x2\x2\x2\x280\x282\a\xBE\x2\x2\x281\x283"+
		"\a\xD8\x2\x2\x282\x281\x3\x2\x2\x2\x282\x283\x3\x2\x2\x2\x283\x284\x3"+
		"\x2\x2\x2\x284\x285\x5\xC6\x64\x2\x285/\x3\x2\x2\x2\x286\x287\x5\x118"+
		"\x8D\x2\x287\x288\a\xD8\x2\x2\x288\x28A\x3\x2\x2\x2\x289\x286\x3\x2\x2"+
		"\x2\x289\x28A\x3\x2\x2\x2\x28A\x28B\x3\x2\x2\x2\x28B\x28C\a%\x2\x2\x28C"+
		"\x28F\a\xD8\x2\x2\x28D\x28E\a\x89\x2\x2\x28E\x290\a\xD8\x2\x2\x28F\x28D"+
		"\x3\x2\x2\x2\x28F\x290\x3\x2\x2\x2\x290\x291\x3\x2\x2\x2\x291\x292\t\x3"+
		"\x2\x2\x292\x293\a\xD8\x2\x2\x293\x294\x5\xFE\x80\x2\x294\x295\a\xD8\x2"+
		"\x2\x295\x296\a\x63\x2\x2\x296\x297\a\xD8\x2\x2\x297\x29C\a\xCE\x2\x2"+
		"\x298\x299\a\xD8\x2\x2\x299\x29A\a\xE\x2\x2\x29A\x29B\a\xD8\x2\x2\x29B"+
		"\x29D\a\xCE\x2\x2\x29C\x298\x3\x2\x2\x2\x29C\x29D\x3\x2\x2\x2\x29D\x2A2"+
		"\x3\x2\x2\x2\x29E\x2A0\a\xD8\x2\x2\x29F\x29E\x3\x2\x2\x2\x29F\x2A0\x3"+
		"\x2\x2\x2\x2A0\x2A1\x3\x2\x2\x2\x2A1\x2A3\x5\xF4{\x2\x2A2\x29F\x3\x2\x2"+
		"\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2A6\x3\x2\x2\x2\x2A4\x2A5\a\xD8\x2\x2"+
		"\x2A5\x2A7\x5\x100\x81\x2\x2A6\x2A4\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2"+
		"\x2A7\x31\x3\x2\x2\x2\x2A8\x2A9\t\x4\x2\x2\x2A9\x2AA\a\xD8\x2\x2\x2AA"+
		"\x2B5\x5\x10C\x87\x2\x2AB\x2AD\a\xD8\x2\x2\x2AC\x2AB\x3\x2\x2\x2\x2AC"+
		"\x2AD\x3\x2\x2\x2\x2AD\x2AE\x3\x2\x2\x2\x2AE\x2B0\a\x5\x2\x2\x2AF\x2B1"+
		"\a\xD8\x2\x2\x2B0\x2AF\x3\x2\x2\x2\x2B0\x2B1\x3\x2\x2\x2\x2B1\x2B2\x3"+
		"\x2\x2\x2\x2B2\x2B4\x5\x10C\x87\x2\x2B3\x2AC\x3\x2\x2\x2\x2B4\x2B7\x3"+
		"\x2\x2\x2\x2B5\x2B3\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6\x33\x3\x2\x2"+
		"\x2\x2B7\x2B5\x3\x2\x2\x2\x2B8\x2B9\a\x32\x2\x2\x2B9\x2BA\a\xD8\x2\x2"+
		"\x2BA\x2BC\x5\xC6\x64\x2\x2BB\x2BD\a\xD8\x2\x2\x2BC\x2BB\x3\x2\x2\x2\x2BC"+
		"\x2BD\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE\x2C0\a\x5\x2\x2\x2BF\x2C1"+
		"\a\xD8\x2\x2\x2C0\x2BF\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2\x2\x2C1\x2C2\x3"+
		"\x2\x2\x2\x2C2\x2CB\x5\xC6\x64\x2\x2C3\x2C5\a\xD8\x2\x2\x2C4\x2C3\x3\x2"+
		"\x2\x2\x2C4\x2C5\x3\x2\x2\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6\x2C8\a\x5\x2\x2"+
		"\x2C7\x2C9\a\xD8\x2\x2\x2C8\x2C7\x3\x2\x2\x2\x2C8\x2C9\x3\x2\x2\x2\x2C9"+
		"\x2CA\x3\x2\x2\x2\x2CA\x2CC\x5\xC6\x64\x2\x2CB\x2C4\x3\x2\x2\x2\x2CB\x2CC"+
		"\x3\x2\x2\x2\x2CC\x35\x3\x2\x2\x2\x2CD\x2CF\a\x34\x2\x2\x2CE\x2D0\a\xD6"+
		"\x2\x2\x2CF\x2CE\x3\x2\x2\x2\x2D0\x2D1\x3\x2\x2\x2\x2D1\x2CF\x3\x2\x2"+
		"\x2\x2D1\x2D2\x3\x2\x2\x2\x2D2\x2D9\x3\x2\x2\x2\x2D3\x2D5\x5\x1C\xF\x2"+
		"\x2D4\x2D6\a\xD6\x2\x2\x2D5\x2D4\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7"+
		"\x2D5\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D8\x2DA\x3\x2\x2\x2\x2D9\x2D3"+
		"\x3\x2\x2\x2\x2D9\x2DA\x3\x2\x2\x2\x2DA\x2DB\x3\x2\x2\x2\x2DB\x303\a`"+
		"\x2\x2\x2DC\x2DD\a\x34\x2\x2\x2DD\x2DE\a\xD8\x2\x2\x2DE\x2DF\t\x5\x2\x2"+
		"\x2DF\x2E0\a\xD8\x2\x2\x2E0\x2E2\x5\xC6\x64\x2\x2E1\x2E3\a\xD6\x2\x2\x2E2"+
		"\x2E1\x3\x2\x2\x2\x2E3\x2E4\x3\x2\x2\x2\x2E4\x2E2\x3\x2\x2\x2\x2E4\x2E5"+
		"\x3\x2\x2\x2\x2E5\x2EC\x3\x2\x2\x2\x2E6\x2E8\x5\x1C\xF\x2\x2E7\x2E9\a"+
		"\xD6\x2\x2\x2E8\x2E7\x3\x2\x2\x2\x2E9\x2EA\x3\x2\x2\x2\x2EA\x2E8\x3\x2"+
		"\x2\x2\x2EA\x2EB\x3\x2\x2\x2\x2EB\x2ED\x3\x2\x2\x2\x2EC\x2E6\x3\x2\x2"+
		"\x2\x2EC\x2ED\x3\x2\x2\x2\x2ED\x2EE\x3\x2\x2\x2\x2EE\x2EF\a`\x2\x2\x2EF"+
		"\x303\x3\x2\x2\x2\x2F0\x2F2\a\x34\x2\x2\x2F1\x2F3\a\xD6\x2\x2\x2F2\x2F1"+
		"\x3\x2\x2\x2\x2F3\x2F4\x3\x2\x2\x2\x2F4\x2F2\x3\x2\x2\x2\x2F4\x2F5\x3"+
		"\x2\x2\x2\x2F5\x2F6\x3\x2\x2\x2\x2F6\x2F8\x5\x1C\xF\x2\x2F7\x2F9\a\xD6"+
		"\x2\x2\x2F8\x2F7\x3\x2\x2\x2\x2F9\x2FA\x3\x2\x2\x2\x2FA\x2F8\x3\x2\x2"+
		"\x2\x2FA\x2FB\x3\x2\x2\x2\x2FB\x2FC\x3\x2\x2\x2\x2FC\x2FD\a`\x2\x2\x2FD"+
		"\x2FE\a\xD8\x2\x2\x2FE\x2FF\t\x5\x2\x2\x2FF\x300\a\xD8\x2\x2\x300\x301"+
		"\x5\xC6\x64\x2\x301\x303\x3\x2\x2\x2\x302\x2CD\x3\x2\x2\x2\x302\x2DC\x3"+
		"\x2\x2\x2\x302\x2F0\x3\x2\x2\x2\x303\x37\x3\x2\x2\x2\x304\x305\a\x41\x2"+
		"\x2\x305\x39\x3\x2\x2\x2\x306\x307\x5\x118\x8D\x2\x307\x308\a\xD8\x2\x2"+
		"\x308\x30A\x3\x2\x2\x2\x309\x306\x3\x2\x2\x2\x309\x30A\x3\x2\x2\x2\x30A"+
		"\x30B\x3\x2\x2\x2\x30B\x30C\a\x42\x2\x2\x30C\x30D\a\xD8\x2\x2\x30D\x30F"+
		"\x5\xFE\x80\x2\x30E\x310\a\xD6\x2\x2\x30F\x30E\x3\x2\x2\x2\x310\x311\x3"+
		"\x2\x2\x2\x311\x30F\x3\x2\x2\x2\x311\x312\x3\x2\x2\x2\x312\x316\x3\x2"+
		"\x2\x2\x313\x315\x5<\x1F\x2\x314\x313\x3\x2\x2\x2\x315\x318\x3\x2\x2\x2"+
		"\x316\x314\x3\x2\x2\x2\x316\x317\x3\x2\x2\x2\x317\x319\x3\x2\x2\x2\x318"+
		"\x316\x3\x2\x2\x2\x319\x31A\a\x39\x2\x2\x31A;\x3\x2\x2\x2\x31B\x324\x5"+
		"\xFE\x80\x2\x31C\x31E\a\xD8\x2\x2\x31D\x31C\x3\x2\x2\x2\x31D\x31E\x3\x2"+
		"\x2\x2\x31E\x31F\x3\x2\x2\x2\x31F\x321\a\xBE\x2\x2\x320\x322\a\xD8\x2"+
		"\x2\x321\x320\x3\x2\x2\x2\x321\x322\x3\x2\x2\x2\x322\x323\x3\x2\x2\x2"+
		"\x323\x325\x5\xC6\x64\x2\x324\x31D\x3\x2\x2\x2\x324\x325\x3\x2\x2\x2\x325"+
		"\x327\x3\x2\x2\x2\x326\x328\a\xD6\x2\x2\x327\x326\x3\x2\x2\x2\x328\x329"+
		"\x3\x2\x2\x2\x329\x327\x3\x2\x2\x2\x329\x32A\x3\x2\x2\x2\x32A=\x3\x2\x2"+
		"\x2\x32B\x32C\a\x44\x2\x2\x32C\x32D\a\xD8\x2\x2\x32D\x32E\x5\xC6\x64\x2"+
		"\x32E?\x3\x2\x2\x2\x32F\x330\a\x45\x2\x2\x330\x331\a\xD8\x2\x2\x331\x332"+
		"\x5\xC6\x64\x2\x332\x41\x3\x2\x2\x2\x333\x334\x5\x118\x8D\x2\x334\x335"+
		"\a\xD8\x2\x2\x335\x337\x3\x2\x2\x2\x336\x333\x3\x2\x2\x2\x336\x337\x3"+
		"\x2\x2\x2\x337\x338\x3\x2\x2\x2\x338\x339\a\x46\x2\x2\x339\x33A\a\xD8"+
		"\x2\x2\x33A\x33C\x5\xFE\x80\x2\x33B\x33D\a\xD8\x2\x2\x33C\x33B\x3\x2\x2"+
		"\x2\x33C\x33D\x3\x2\x2\x2\x33D\x33E\x3\x2\x2\x2\x33E\x33F\x5\xF4{\x2\x33F"+
		"\x43\x3\x2\x2\x2\x340\x341\t\x6\x2\x2\x341\x45\x3\x2\x2\x2\x342\x343\a"+
		"M\x2\x2\x343\x344\a\xD8\x2\x2\x344\x346\x5\xC6\x64\x2\x345\x347\a\xD8"+
		"\x2\x2\x346\x345\x3\x2\x2\x2\x346\x347\x3\x2\x2\x2\x347\x348\x3\x2\x2"+
		"\x2\x348\x34A\a\x5\x2\x2\x349\x34B\a\xD8\x2\x2\x34A\x349\x3\x2\x2\x2\x34A"+
		"\x34B\x3\x2\x2\x2\x34B\x34C\x3\x2\x2\x2\x34C\x34D\x5\xC6\x64\x2\x34DG"+
		"\x3\x2\x2\x2\x34E\x34F\aO\x2\x2\x34F\x350\a\xD8\x2\x2\x350\x351\a\x36"+
		"\x2\x2\x351\x352\a\xD8\x2\x2\x352\x354\x5\xFE\x80\x2\x353\x355\x5\x116"+
		"\x8C\x2\x354\x353\x3\x2\x2\x2\x354\x355\x3\x2\x2\x2\x355\x356\x3\x2\x2"+
		"\x2\x356\x357\a\xD8\x2\x2\x357\x358\aX\x2\x2\x358\x359\a\xD8\x2\x2\x359"+
		"\x35B\x5\xC6\x64\x2\x35A\x35C\a\xD6\x2\x2\x35B\x35A\x3\x2\x2\x2\x35C\x35D"+
		"\x3\x2\x2\x2\x35D\x35B\x3\x2\x2\x2\x35D\x35E\x3\x2\x2\x2\x35E\x365\x3"+
		"\x2\x2\x2\x35F\x361\x5\x1C\xF\x2\x360\x362\a\xD6\x2\x2\x361\x360\x3\x2"+
		"\x2\x2\x362\x363\x3\x2\x2\x2\x363\x361\x3\x2\x2\x2\x363\x364\x3\x2\x2"+
		"\x2\x364\x366\x3\x2\x2\x2\x365\x35F\x3\x2\x2\x2\x365\x366\x3\x2\x2\x2"+
		"\x366\x367\x3\x2\x2\x2\x367\x36A\as\x2\x2\x368\x369\a\xD8\x2\x2\x369\x36B"+
		"\x5\xFE\x80\x2\x36A\x368\x3\x2\x2\x2\x36A\x36B\x3\x2\x2\x2\x36BI\x3\x2"+
		"\x2\x2\x36C\x36D\aO\x2\x2\x36D\x36E\a\xD8\x2\x2\x36E\x370\x5\xFE\x80\x2"+
		"\x36F\x371\x5\x116\x8C\x2\x370\x36F\x3\x2\x2\x2\x370\x371\x3\x2\x2\x2"+
		"\x371\x374\x3\x2\x2\x2\x372\x373\a\xD8\x2\x2\x373\x375\x5\x100\x81\x2"+
		"\x374\x372\x3\x2\x2\x2\x374\x375\x3\x2\x2\x2\x375\x377\x3\x2\x2\x2\x376"+
		"\x378\a\xD8\x2\x2\x377\x376\x3\x2\x2\x2\x377\x378\x3\x2\x2\x2\x378\x379"+
		"\x3\x2\x2\x2\x379\x37B\a\xBE\x2\x2\x37A\x37C\a\xD8\x2\x2\x37B\x37A\x3"+
		"\x2\x2\x2\x37B\x37C\x3\x2\x2\x2\x37C\x37D\x3\x2\x2\x2\x37D\x37E\x5\xC6"+
		"\x64\x2\x37E\x37F\a\xD8\x2\x2\x37F\x380\a\xAB\x2\x2\x380\x381\a\xD8\x2"+
		"\x2\x381\x386\x5\xC6\x64\x2\x382\x383\a\xD8\x2\x2\x383\x384\a\xA3\x2\x2"+
		"\x384\x385\a\xD8\x2\x2\x385\x387\x5\xC6\x64\x2\x386\x382\x3\x2\x2\x2\x386"+
		"\x387\x3\x2\x2\x2\x387\x389\x3\x2\x2\x2\x388\x38A\a\xD6\x2\x2\x389\x388"+
		"\x3\x2\x2\x2\x38A\x38B\x3\x2\x2\x2\x38B\x389\x3\x2\x2\x2\x38B\x38C\x3"+
		"\x2\x2\x2\x38C\x393\x3\x2\x2\x2\x38D\x38F\x5\x1C\xF\x2\x38E\x390\a\xD6"+
		"\x2\x2\x38F\x38E\x3\x2\x2\x2\x390\x391\x3\x2\x2\x2\x391\x38F\x3\x2\x2"+
		"\x2\x391\x392\x3\x2\x2\x2\x392\x394\x3\x2\x2\x2\x393\x38D\x3\x2\x2\x2"+
		"\x393\x394\x3\x2\x2\x2\x394\x395\x3\x2\x2\x2\x395\x398\as\x2\x2\x396\x397"+
		"\a\xD8\x2\x2\x397\x399\x5\xFE\x80\x2\x398\x396\x3\x2\x2\x2\x398\x399\x3"+
		"\x2\x2\x2\x399K\x3\x2\x2\x2\x39A\x39B\x5\x118\x8D\x2\x39B\x39C\a\xD8\x2"+
		"\x2\x39C\x39E\x3\x2\x2\x2\x39D\x39A\x3\x2\x2\x2\x39D\x39E\x3\x2\x2\x2"+
		"\x39E\x3A1\x3\x2\x2\x2\x39F\x3A0\a\xA2\x2\x2\x3A0\x3A2\a\xD8\x2\x2\x3A1"+
		"\x39F\x3\x2\x2\x2\x3A1\x3A2\x3\x2\x2\x2\x3A2\x3A3\x3\x2\x2\x2\x3A3\x3A4"+
		"\aP\x2\x2\x3A4\x3A5\a\xD8\x2\x2\x3A5\x3AA\x5\xFE\x80\x2\x3A6\x3A8\a\xD8"+
		"\x2\x2\x3A7\x3A6\x3\x2\x2\x2\x3A7\x3A8\x3\x2\x2\x2\x3A8\x3A9\x3\x2\x2"+
		"\x2\x3A9\x3AB\x5\xF4{\x2\x3AA\x3A7\x3\x2\x2\x2\x3AA\x3AB\x3\x2\x2\x2\x3AB"+
		"\x3AE\x3\x2\x2\x2\x3AC\x3AD\a\xD8\x2\x2\x3AD\x3AF\x5\x100\x81\x2\x3AE"+
		"\x3AC\x3\x2\x2\x2\x3AE\x3AF\x3\x2\x2\x2\x3AF\x3B1\x3\x2\x2\x2\x3B0\x3B2"+
		"\a\xD6\x2\x2\x3B1\x3B0\x3\x2\x2\x2\x3B2\x3B3\x3\x2\x2\x2\x3B3\x3B1\x3"+
		"\x2\x2\x2\x3B3\x3B4\x3\x2\x2\x2\x3B4\x3BB\x3\x2\x2\x2\x3B5\x3B7\x5\x1C"+
		"\xF\x2\x3B6\x3B8\a\xD6\x2\x2\x3B7\x3B6\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2"+
		"\x2\x3B9\x3B7\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BC\x3\x2\x2\x2"+
		"\x3BB\x3B5\x3\x2\x2\x2\x3BB\x3BC\x3\x2\x2\x2\x3BC\x3BD\x3\x2\x2\x2\x3BD"+
		"\x3BE\a:\x2\x2\x3BEM\x3\x2\x2\x2\x3BF\x3C0\aQ\x2\x2\x3C0\x3C1\a\xD8\x2"+
		"\x2\x3C1\x3C3\x5\xC6\x64\x2\x3C2\x3C4\a\xD8\x2\x2\x3C3\x3C2\x3\x2\x2\x2"+
		"\x3C3\x3C4\x3\x2\x2\x2\x3C4\x3C5\x3\x2\x2\x2\x3C5\x3C7\a\x5\x2\x2\x3C6"+
		"\x3C8\a\xD8\x2\x2\x3C7\x3C6\x3\x2\x2\x2\x3C7\x3C8\x3\x2\x2\x2\x3C8\x3CA"+
		"\x3\x2\x2\x2\x3C9\x3CB\x5\xC6\x64\x2\x3CA\x3C9\x3\x2\x2\x2\x3CA\x3CB\x3"+
		"\x2\x2\x2\x3CB\x3CD\x3\x2\x2\x2\x3CC\x3CE\a\xD8\x2\x2\x3CD\x3CC\x3\x2"+
		"\x2\x2\x3CD\x3CE\x3\x2\x2\x2\x3CE\x3CF\x3\x2\x2\x2\x3CF\x3D1\a\x5\x2\x2"+
		"\x3D0\x3D2\a\xD8\x2\x2\x3D1\x3D0\x3\x2\x2\x2\x3D1\x3D2\x3\x2\x2\x2\x3D2"+
		"\x3D3\x3\x2\x2\x2\x3D3\x3D4\x5\xC6\x64\x2\x3D4O\x3\x2\x2\x2\x3D5\x3D6"+
		"\aS\x2\x2\x3D6\x3D7\a\xD8\x2\x2\x3D7\x3D8\x5\xC6\x64\x2\x3D8Q\x3\x2\x2"+
		"\x2\x3D9\x3DA\aT\x2\x2\x3DA\x3DB\a\xD8\x2\x2\x3DB\x3DC\x5\xC6\x64\x2\x3DC"+
		"S\x3\x2\x2\x2\x3DD\x3DE\aU\x2\x2\x3DE\x3DF\a\xD8\x2\x2\x3DF\x3E0\x5X-"+
		"\x2\x3E0\x3E1\a\xD8\x2\x2\x3E1\x3E2\a\xA9\x2\x2\x3E2\x3E3\a\xD8\x2\x2"+
		"\x3E3\x3E8\x5\x1E\x10\x2\x3E4\x3E5\a\xD8\x2\x2\x3E5\x3E6\a\x37\x2\x2\x3E6"+
		"\x3E7\a\xD8\x2\x2\x3E7\x3E9\x5\x1E\x10\x2\x3E8\x3E4\x3\x2\x2\x2\x3E8\x3E9"+
		"\x3\x2\x2\x2\x3E9\x3F7\x3\x2\x2\x2\x3EA\x3EE\x5V,\x2\x3EB\x3ED\x5Z.\x2"+
		"\x3EC\x3EB\x3\x2\x2\x2\x3ED\x3F0\x3\x2\x2\x2\x3EE\x3EC\x3\x2\x2\x2\x3EE"+
		"\x3EF\x3\x2\x2\x2\x3EF\x3F2\x3\x2\x2\x2\x3F0\x3EE\x3\x2\x2\x2\x3F1\x3F3"+
		"\x5\\/\x2\x3F2\x3F1\x3\x2\x2\x2\x3F2\x3F3\x3\x2\x2\x2\x3F3\x3F4\x3\x2"+
		"\x2\x2\x3F4\x3F5\a;\x2\x2\x3F5\x3F7\x3\x2\x2\x2\x3F6\x3DD\x3\x2\x2\x2"+
		"\x3F6\x3EA\x3\x2\x2\x2\x3F7U\x3\x2\x2\x2\x3F8\x3F9\aU\x2\x2\x3F9\x3FA"+
		"\a\xD8\x2\x2\x3FA\x3FB\x5X-\x2\x3FB\x3FC\a\xD8\x2\x2\x3FC\x3FE\a\xA9\x2"+
		"\x2\x3FD\x3FF\a\xD6\x2\x2\x3FE\x3FD\x3\x2\x2\x2\x3FF\x400\x3\x2\x2\x2"+
		"\x400\x3FE\x3\x2\x2\x2\x400\x401\x3\x2\x2\x2\x401\x408\x3\x2\x2\x2\x402"+
		"\x404\x5\x1C\xF\x2\x403\x405\a\xD6\x2\x2\x404\x403\x3\x2\x2\x2\x405\x406"+
		"\x3\x2\x2\x2\x406\x404\x3\x2\x2\x2\x406\x407\x3\x2\x2\x2\x407\x409\x3"+
		"\x2\x2\x2\x408\x402\x3\x2\x2\x2\x408\x409\x3\x2\x2\x2\x409W\x3\x2\x2\x2"+
		"\x40A\x40B\x5\xC6\x64\x2\x40BY\x3\x2\x2\x2\x40C\x40D\a\x38\x2\x2\x40D"+
		"\x40E\a\xD8\x2\x2\x40E\x40F\x5X-\x2\x40F\x410\a\xD8\x2\x2\x410\x412\a"+
		"\xA9\x2\x2\x411\x413\a\xD6\x2\x2\x412\x411\x3\x2\x2\x2\x413\x414\x3\x2"+
		"\x2\x2\x414\x412\x3\x2\x2\x2\x414\x415\x3\x2\x2\x2\x415\x41C\x3\x2\x2"+
		"\x2\x416\x418\x5\x1C\xF\x2\x417\x419\a\xD6\x2\x2\x418\x417\x3\x2\x2\x2"+
		"\x419\x41A\x3\x2\x2\x2\x41A\x418\x3\x2\x2\x2\x41A\x41B\x3\x2\x2\x2\x41B"+
		"\x41D\x3\x2\x2\x2\x41C\x416\x3\x2\x2\x2\x41C\x41D\x3\x2\x2\x2\x41D[\x3"+
		"\x2\x2\x2\x41E\x420\a\x37\x2\x2\x41F\x421\a\xD6\x2\x2\x420\x41F\x3\x2"+
		"\x2\x2\x421\x422\x3\x2\x2\x2\x422\x420\x3\x2\x2\x2\x422\x423\x3\x2\x2"+
		"\x2\x423\x42A\x3\x2\x2\x2\x424\x426\x5\x1C\xF\x2\x425\x427\a\xD6\x2\x2"+
		"\x426\x425\x3\x2\x2\x2\x427\x428\x3\x2\x2\x2\x428\x426\x3\x2\x2\x2\x428"+
		"\x429\x3\x2\x2\x2\x429\x42B\x3\x2\x2\x2\x42A\x424\x3\x2\x2\x2\x42A\x42B"+
		"\x3\x2\x2\x2\x42B]\x3\x2\x2\x2\x42C\x42D\aW\x2\x2\x42D\x42E\a\xD8\x2\x2"+
		"\x42E\x42F\x5\xFE\x80\x2\x42F_\x3\x2\x2\x2\x430\x431\aY\x2\x2\x431\x432"+
		"\a\xD8\x2\x2\x432\x43B\x5\xC6\x64\x2\x433\x435\a\xD8\x2\x2\x434\x433\x3"+
		"\x2\x2\x2\x434\x435\x3\x2\x2\x2\x435\x436\x3\x2\x2\x2\x436\x438\a\x5\x2"+
		"\x2\x437\x439\a\xD8\x2\x2\x438\x437\x3\x2\x2\x2\x438\x439\x3\x2\x2\x2"+
		"\x439\x43A\x3\x2\x2\x2\x43A\x43C\x5\xC6\x64\x2\x43B\x434\x3\x2\x2\x2\x43C"+
		"\x43D\x3\x2\x2\x2\x43D\x43B\x3\x2\x2\x2\x43D\x43E\x3\x2\x2\x2\x43E\x61"+
		"\x3\x2\x2\x2\x43F\x440\a\\\x2\x2\x440\x441\a\xD8\x2\x2\x441\x442\x5\xC6"+
		"\x64\x2\x442\x63\x3\x2\x2\x2\x443\x444\a\x62\x2\x2\x444\x446\a\xD8\x2"+
		"\x2\x445\x443\x3\x2\x2\x2\x445\x446\x3\x2\x2\x2\x446\x447\x3\x2\x2\x2"+
		"\x447\x449\x5\xE2r\x2\x448\x44A\a\xD8\x2\x2\x449\x448\x3\x2\x2\x2\x449"+
		"\x44A\x3\x2\x2\x2\x44A\x44B\x3\x2\x2\x2\x44B\x44D\t\a\x2\x2\x44C\x44E"+
		"\a\xD8\x2\x2\x44D\x44C\x3\x2\x2\x2\x44D\x44E\x3\x2\x2\x2\x44E\x44F\x3"+
		"\x2\x2\x2\x44F\x450\x5\xC6\x64\x2\x450\x65\x3\x2\x2\x2\x451\x452\a\x65"+
		"\x2\x2\x452\x453\a\xD8\x2\x2\x453\x455\x5\xC6\x64\x2\x454\x456\a\xD8\x2"+
		"\x2\x455\x454\x3\x2\x2\x2\x455\x456\x3\x2\x2\x2\x456\x457\x3\x2\x2\x2"+
		"\x457\x459\a\x5\x2\x2\x458\x45A\a\xD8\x2\x2\x459\x458\x3\x2\x2\x2\x459"+
		"\x45A\x3\x2\x2\x2\x45A\x45B\x3\x2\x2\x2\x45B\x45C\x5\xC6\x64\x2\x45Cg"+
		"\x3\x2\x2\x2\x45D\x45E\a]\x2\x2\x45E\x45F\a\xD8\x2\x2\x45F\x460\x5\xC6"+
		"\x64\x2\x460i\x3\x2\x2\x2\x461\x462\a^\x2\x2\x462\x463\a\xD8\x2\x2\x463"+
		"\x472\x5\xC6\x64\x2\x464\x466\a\xD8\x2\x2\x465\x464\x3\x2\x2\x2\x465\x466"+
		"\x3\x2\x2\x2\x466\x467\x3\x2\x2\x2\x467\x469\a\x5\x2\x2\x468\x46A\a\xD8"+
		"\x2\x2\x469\x468\x3\x2\x2\x2\x469\x46A\x3\x2\x2\x2\x46A\x46B\x3\x2\x2"+
		"\x2\x46B\x470\x5\xC6\x64\x2\x46C\x46D\a\xD8\x2\x2\x46D\x46E\a\xAB\x2\x2"+
		"\x46E\x46F\a\xD8\x2\x2\x46F\x471\x5\xC6\x64\x2\x470\x46C\x3\x2\x2\x2\x470"+
		"\x471\x3\x2\x2\x2\x471\x473\x3\x2\x2\x2\x472\x465\x3\x2\x2\x2\x472\x473"+
		"\x3\x2\x2\x2\x473k\x3\x2\x2\x2\x474\x475\ai\x2\x2\x475\x476\a\xD8\x2\x2"+
		"\x476\x478\x5\xE2r\x2\x477\x479\a\xD8\x2\x2\x478\x477\x3\x2\x2\x2\x478"+
		"\x479\x3\x2\x2\x2\x479\x47A\x3\x2\x2\x2\x47A\x47C\a\xBE\x2\x2\x47B\x47D"+
		"\a\xD8\x2\x2\x47C\x47B\x3\x2\x2\x2\x47C\x47D\x3\x2\x2\x2\x47D\x47E\x3"+
		"\x2\x2\x2\x47E\x47F\x5\xC6\x64\x2\x47Fm\x3\x2\x2\x2\x480\x484\x5p\x39"+
		"\x2\x481\x483\x5r:\x2\x482\x481\x3\x2\x2\x2\x483\x486\x3\x2\x2\x2\x484"+
		"\x482\x3\x2\x2\x2\x484\x485\x3\x2\x2\x2\x485\x488\x3\x2\x2\x2\x486\x484"+
		"\x3\x2\x2\x2\x487\x489\x5t;\x2\x488\x487\x3\x2\x2\x2\x488\x489\x3\x2\x2"+
		"\x2\x489\x48A\x3\x2\x2\x2\x48A\x48B\am\x2\x2\x48Bo\x3\x2\x2\x2\x48C\x48D"+
		"\aj\x2\x2\x48D\x48E\a\xD8\x2\x2\x48E\x48F\x5X-\x2\x48F\x490\a\xD8\x2\x2"+
		"\x490\x492\a\xA9\x2\x2\x491\x493\a\xD6\x2\x2\x492\x491\x3\x2\x2\x2\x493"+
		"\x494\x3\x2\x2\x2\x494\x492\x3\x2\x2\x2\x494\x495\x3\x2\x2\x2\x495\x49C"+
		"\x3\x2\x2\x2\x496\x498\x5\x14\v\x2\x497\x499\a\xD6\x2\x2\x498\x497\x3"+
		"\x2\x2\x2\x499\x49A\x3\x2\x2\x2\x49A\x498\x3\x2\x2\x2\x49A\x49B\x3\x2"+
		"\x2\x2\x49B\x49D\x3\x2\x2\x2\x49C\x496\x3\x2\x2\x2\x49C\x49D\x3\x2\x2"+
		"\x2\x49Dq\x3\x2\x2\x2\x49E\x49F\ak\x2\x2\x49F\x4A0\a\xD8\x2\x2\x4A0\x4A1"+
		"\x5X-\x2\x4A1\x4A2\a\xD8\x2\x2\x4A2\x4A4\a\xA9\x2\x2\x4A3\x4A5\a\xD6\x2"+
		"\x2\x4A4\x4A3\x3\x2\x2\x2\x4A5\x4A6\x3\x2\x2\x2\x4A6\x4A4\x3\x2\x2\x2"+
		"\x4A6\x4A7\x3\x2\x2\x2\x4A7\x4AE\x3\x2\x2\x2\x4A8\x4AA\x5\x14\v\x2\x4A9"+
		"\x4AB\a\xD6\x2\x2\x4AA\x4A9\x3\x2\x2\x2\x4AB\x4AC\x3\x2\x2\x2\x4AC\x4AA"+
		"\x3\x2\x2\x2\x4AC\x4AD\x3\x2\x2\x2\x4AD\x4AF\x3\x2\x2\x2\x4AE\x4A8\x3"+
		"\x2\x2\x2\x4AE\x4AF\x3\x2\x2\x2\x4AFs\x3\x2\x2\x2\x4B0\x4B2\al\x2\x2\x4B1"+
		"\x4B3\a\xD6\x2\x2\x4B2\x4B1\x3\x2\x2\x2\x4B3\x4B4\x3\x2\x2\x2\x4B4\x4B2"+
		"\x3\x2\x2\x2\x4B4\x4B5\x3\x2\x2\x2\x4B5\x4BC\x3\x2\x2\x2\x4B6\x4B8\x5"+
		"\x14\v\x2\x4B7\x4B9\a\xD6\x2\x2\x4B8\x4B7\x3\x2\x2\x2\x4B9\x4BA\x3\x2"+
		"\x2\x2\x4BA\x4B8\x3\x2\x2\x2\x4BA\x4BB\x3\x2\x2\x2\x4BB\x4BD\x3\x2\x2"+
		"\x2\x4BC\x4B6\x3\x2\x2\x2\x4BC\x4BD\x3\x2\x2\x2\x4BDu\x3\x2\x2\x2\x4BE"+
		"\x4C0\ao\x2\x2\x4BF\x4C1\a\xD8\x2\x2\x4C0\x4BF\x3\x2\x2\x2\x4C0\x4C1\x3"+
		"\x2\x2\x2\x4C1\x4C2\x3\x2\x2\x2\x4C2\x4C4\a\xC2\x2\x2\x4C3\x4C5\a\xD8"+
		"\x2\x2\x4C4\x4C3\x3\x2\x2\x2\x4C4\x4C5\x3\x2\x2\x2\x4C5\x4C6\x3\x2\x2"+
		"\x2\x4C6\x4C8\x5\xEEx\x2\x4C7\x4C9\a\xD8\x2\x2\x4C8\x4C7\x3\x2\x2\x2\x4C8"+
		"\x4C9\x3\x2\x2\x2\x4C9\x4CA\x3\x2\x2\x2\x4CA\x4CB\a\xCB\x2\x2\x4CBw\x3"+
		"\x2\x2\x2\x4CC\x4CD\ap\x2\x2\x4CD\x4CE\a\xD8\x2\x2\x4CE\x4CF\x5\xC6\x64"+
		"\x2\x4CFy\x3\x2\x2\x2\x4D0\x4D1\ar\x2\x2\x4D1\x4D2\a\xD8\x2\x2\x4D2\x4D3"+
		"\x5\xC6\x64\x2\x4D3\x4D4\a\xD8\x2\x2\x4D4\x4D5\a\x13\x2\x2\x4D5\x4D6\a"+
		"\xD8\x2\x2\x4D6\x4D7\x5\xC6\x64\x2\x4D7{\x3\x2\x2\x2\x4D8\x4D9\ay\x2\x2"+
		"\x4D9\x4E0\a\xD8\x2\x2\x4DA\x4DB\aT\x2\x2\x4DB\x4DC\a\xD8\x2\x2\x4DC\x4E1"+
		"\x5\xC6\x64\x2\x4DD\x4DE\a\x94\x2\x2\x4DE\x4DF\a\xD8\x2\x2\x4DF\x4E1\a"+
		"s\x2\x2\x4E0\x4DA\x3\x2\x2\x2\x4E0\x4DD\x3\x2\x2\x2\x4E1}\x3\x2\x2\x2"+
		"\x4E2\x4E3\ax\x2\x2\x4E3\x4E4\a\xD8\x2\x2\x4E4\x4E5\x5\xC6\x64\x2\x4E5"+
		"\x4E6\a\xD8\x2\x2\x4E6\x4E7\aT\x2\x2\x4E7\x4E8\a\xD8\x2\x2\x4E8\x4F3\x5"+
		"\xC6\x64\x2\x4E9\x4EB\a\xD8\x2\x2\x4EA\x4E9\x3\x2\x2\x2\x4EA\x4EB\x3\x2"+
		"\x2\x2\x4EB\x4EC\x3\x2\x2\x2\x4EC\x4EE\a\x5\x2\x2\x4ED\x4EF\a\xD8\x2\x2"+
		"\x4EE\x4ED\x3\x2\x2\x2\x4EE\x4EF\x3\x2\x2\x2\x4EF\x4F0\x3\x2\x2\x2\x4F0"+
		"\x4F2\x5\xC6\x64\x2\x4F1\x4EA\x3\x2\x2\x2\x4F2\x4F5\x3\x2\x2\x2\x4F3\x4F1"+
		"\x3\x2\x2\x2\x4F3\x4F4\x3\x2\x2\x2\x4F4\x7F\x3\x2\x2\x2\x4F5\x4F3\x3\x2"+
		"\x2\x2\x4F6\x4F7\ax\x2\x2\x4F7\x4F8\a\xD8\x2\x2\x4F8\x4F9\x5\xC6\x64\x2"+
		"\x4F9\x4FA\a\xD8\x2\x2\x4FA\x4FB\aS\x2\x2\x4FB\x4FC\a\xD8\x2\x2\x4FC\x507"+
		"\x5\xC6\x64\x2\x4FD\x4FF\a\xD8\x2\x2\x4FE\x4FD\x3\x2\x2\x2\x4FE\x4FF\x3"+
		"\x2\x2\x2\x4FF\x500\x3\x2\x2\x2\x500\x502\a\x5\x2\x2\x501\x503\a\xD8\x2"+
		"\x2\x502\x501\x3\x2\x2\x2\x502\x503\x3\x2\x2\x2\x503\x504\x3\x2\x2\x2"+
		"\x504\x506\x5\xC6\x64\x2\x505\x4FE\x3\x2\x2\x2\x506\x509\x3\x2\x2\x2\x507"+
		"\x505\x3\x2\x2\x2\x507\x508\x3\x2\x2\x2\x508\x81\x3\x2\x2\x2\x509\x507"+
		"\x3\x2\x2\x2\x50A\x50B\az\x2\x2\x50B\x50C\a\xD8\x2\x2\x50C\x50D\x5\xC6"+
		"\x64\x2\x50D\x50E\a\xD8\x2\x2\x50E\x50F\aO\x2\x2\x50F\x510\a\xD8\x2\x2"+
		"\x510\x515\t\b\x2\x2\x511\x512\a\xD8\x2\x2\x512\x513\a\f\x2\x2\x513\x514"+
		"\a\xD8\x2\x2\x514\x516\t\t\x2\x2\x515\x511\x3\x2\x2\x2\x515\x516\x3\x2"+
		"\x2\x2\x516\x519\x3\x2\x2\x2\x517\x518\a\xD8\x2\x2\x518\x51A\t\n\x2\x2"+
		"\x519\x517\x3\x2\x2\x2\x519\x51A\x3\x2\x2\x2\x51A\x51B\x3\x2\x2\x2\x51B"+
		"\x51C\a\xD8\x2\x2\x51C\x51D\a\x13\x2\x2\x51D\x51E\a\xD8\x2\x2\x51E\x529"+
		"\x5\xC6\x64\x2\x51F\x520\a\xD8\x2\x2\x520\x522\a\x61\x2\x2\x521\x523\a"+
		"\xD8\x2\x2\x522\x521\x3\x2\x2\x2\x522\x523\x3\x2\x2\x2\x523\x524\x3\x2"+
		"\x2\x2\x524\x526\a\xBE\x2\x2\x525\x527\a\xD8\x2\x2\x526\x525\x3\x2\x2"+
		"\x2\x526\x527\x3\x2\x2\x2\x527\x528\x3\x2\x2\x2\x528\x52A\x5\xC6\x64\x2"+
		"\x529\x51F\x3\x2\x2\x2\x529\x52A\x3\x2\x2\x2\x52A\x83\x3\x2\x2\x2\x52B"+
		"\x538\x5\x86\x44\x2\x52C\x52E\a\xD8\x2\x2\x52D\x52C\x3\x2\x2\x2\x52D\x52E"+
		"\x3\x2\x2\x2\x52E\x52F\x3\x2\x2\x2\x52F\x531\t\v\x2\x2\x530\x532\a\xD8"+
		"\x2\x2\x531\x530\x3\x2\x2\x2\x531\x532\x3\x2\x2\x2\x532\x534\x3\x2\x2"+
		"\x2\x533\x535\x5\x86\x44\x2\x534\x533\x3\x2\x2\x2\x534\x535\x3\x2\x2\x2"+
		"\x535\x537\x3\x2\x2\x2\x536\x52D\x3\x2\x2\x2\x537\x53A\x3\x2\x2\x2\x538"+
		"\x536\x3\x2\x2\x2\x538\x539\x3\x2\x2\x2\x539\x54D\x3\x2\x2\x2\x53A\x538"+
		"\x3\x2\x2\x2\x53B\x53D\x5\x86\x44\x2\x53C\x53B\x3\x2\x2\x2\x53C\x53D\x3"+
		"\x2\x2\x2\x53D\x548\x3\x2\x2\x2\x53E\x540\a\xD8\x2\x2\x53F\x53E\x3\x2"+
		"\x2\x2\x53F\x540\x3\x2\x2\x2\x540\x541\x3\x2\x2\x2\x541\x543\t\v\x2\x2"+
		"\x542\x544\a\xD8\x2\x2\x543\x542\x3\x2\x2\x2\x543\x544\x3\x2\x2\x2\x544"+
		"\x546\x3\x2\x2\x2\x545\x547\x5\x86\x44\x2\x546\x545\x3\x2\x2\x2\x546\x547"+
		"\x3\x2\x2\x2\x547\x549\x3\x2\x2\x2\x548\x53F\x3\x2\x2\x2\x549\x54A\x3"+
		"\x2\x2\x2\x54A\x548\x3\x2\x2\x2\x54A\x54B\x3\x2\x2\x2\x54B\x54D\x3\x2"+
		"\x2\x2\x54C\x52B\x3\x2\x2\x2\x54C\x53C\x3\x2\x2\x2\x54D\x85\x3\x2\x2\x2"+
		"\x54E\x560\x5\xC6\x64\x2\x54F\x55D\t\f\x2\x2\x550\x552\a\xD8\x2\x2\x551"+
		"\x550\x3\x2\x2\x2\x551\x552\x3\x2\x2\x2\x552\x553\x3\x2\x2\x2\x553\x555"+
		"\a\xC2\x2\x2\x554\x556\a\xD8\x2\x2\x555\x554\x3\x2\x2\x2\x555\x556\x3"+
		"\x2\x2\x2\x556\x557\x3\x2\x2\x2\x557\x559\x5\xEEx\x2\x558\x55A\a\xD8\x2"+
		"\x2\x559\x558\x3\x2\x2\x2\x559\x55A\x3\x2\x2\x2\x55A\x55B\x3\x2\x2\x2"+
		"\x55B\x55C\a\xCB\x2\x2\x55C\x55E\x3\x2\x2\x2\x55D\x551\x3\x2\x2\x2\x55D"+
		"\x55E\x3\x2\x2\x2\x55E\x560\x3\x2\x2\x2\x55F\x54E\x3\x2\x2\x2\x55F\x54F"+
		"\x3\x2\x2\x2\x560\x87\x3\x2\x2\x2\x561\x562\a\x84\x2\x2\x562\x563\a\xD8"+
		"\x2\x2\x563\x565\x5\xC6\x64\x2\x564\x566\a\xD8\x2\x2\x565\x564\x3\x2\x2"+
		"\x2\x565\x566\x3\x2\x2\x2\x566\x567\x3\x2\x2\x2\x567\x56C\a\x5\x2\x2\x568"+
		"\x56A\a\xD8\x2\x2\x569\x568\x3\x2\x2\x2\x569\x56A\x3\x2\x2\x2\x56A\x56B"+
		"\x3\x2\x2\x2\x56B\x56D\x5\x84\x43\x2\x56C\x569\x3\x2\x2\x2\x56C\x56D\x3"+
		"\x2\x2\x2\x56D\x89\x3\x2\x2\x2\x56E\x56F\x5\x118\x8D\x2\x56F\x570\a\xD8"+
		"\x2\x2\x570\x572\x3\x2\x2\x2\x571\x56E\x3\x2\x2\x2\x571\x572\x3\x2\x2"+
		"\x2\x572\x575\x3\x2\x2\x2\x573\x574\a\xA2\x2\x2\x574\x576\a\xD8\x2\x2"+
		"\x575\x573\x3\x2\x2\x2\x575\x576\x3\x2\x2\x2\x576\x577\x3\x2\x2\x2\x577"+
		"\x578\a\x86\x2\x2\x578\x579\a\xD8\x2\x2\x579\x57E\x5\xFE\x80\x2\x57A\x57C"+
		"\a\xD8\x2\x2\x57B\x57A\x3\x2\x2\x2\x57B\x57C\x3\x2\x2\x2\x57C\x57D\x3"+
		"\x2\x2\x2\x57D\x57F\x5\xF4{\x2\x57E\x57B\x3\x2\x2\x2\x57E\x57F\x3\x2\x2"+
		"\x2\x57F\x582\x3\x2\x2\x2\x580\x581\a\xD8\x2\x2\x581\x583\x5\x100\x81"+
		"\x2\x582\x580\x3\x2\x2\x2\x582\x583\x3\x2\x2\x2\x583\x585\x3\x2\x2\x2"+
		"\x584\x586\a\xD6\x2\x2\x585\x584\x3\x2\x2\x2\x586\x587\x3\x2\x2\x2\x587"+
		"\x585\x3\x2\x2\x2\x587\x588\x3\x2\x2\x2\x588\x58F\x3\x2\x2\x2\x589\x58B"+
		"\x5\x1C\xF\x2\x58A\x58C\a\xD6\x2\x2\x58B\x58A\x3\x2\x2\x2\x58C\x58D\x3"+
		"\x2\x2\x2\x58D\x58B\x3\x2\x2\x2\x58D\x58E\x3\x2\x2\x2\x58E\x590\x3\x2"+
		"\x2\x2\x58F\x589\x3\x2\x2\x2\x58F\x590\x3\x2\x2\x2\x590\x591\x3\x2\x2"+
		"\x2\x591\x592\a<\x2\x2\x592\x8B\x3\x2\x2\x2\x593\x594\x5\x118\x8D\x2\x594"+
		"\x595\a\xD8\x2\x2\x595\x597\x3\x2\x2\x2\x596\x593\x3\x2\x2\x2\x596\x597"+
		"\x3\x2\x2\x2\x597\x59A\x3\x2\x2\x2\x598\x599\a\xA2\x2\x2\x599\x59B\a\xD8"+
		"\x2\x2\x59A\x598\x3\x2\x2\x2\x59A\x59B\x3\x2\x2\x2\x59B\x59C\x3\x2\x2"+
		"\x2\x59C\x59D\a\x88\x2\x2\x59D\x59E\a\xD8\x2\x2\x59E\x5A3\x5\xFE\x80\x2"+
		"\x59F\x5A1\a\xD8\x2\x2\x5A0\x59F\x3\x2\x2\x2\x5A0\x5A1\x3\x2\x2\x2\x5A1"+
		"\x5A2\x3\x2\x2\x2\x5A2\x5A4\x5\xF4{\x2\x5A3\x5A0\x3\x2\x2\x2\x5A3\x5A4"+
		"\x3\x2\x2\x2\x5A4\x5A6\x3\x2\x2\x2\x5A5\x5A7\a\xD6\x2\x2\x5A6\x5A5\x3"+
		"\x2\x2\x2\x5A7\x5A8\x3\x2\x2\x2\x5A8\x5A6\x3\x2\x2\x2\x5A8\x5A9\x3\x2"+
		"\x2\x2\x5A9\x5B0\x3\x2\x2\x2\x5AA\x5AC\x5\x1C\xF\x2\x5AB\x5AD\a\xD6\x2"+
		"\x2\x5AC\x5AB\x3\x2\x2\x2\x5AD\x5AE\x3\x2\x2\x2\x5AE\x5AC\x3\x2\x2\x2"+
		"\x5AE\x5AF\x3\x2\x2\x2\x5AF\x5B1\x3\x2\x2\x2\x5B0\x5AA\x3\x2\x2\x2\x5B0"+
		"\x5B1\x3\x2\x2\x2\x5B1\x5B2\x3\x2\x2\x2\x5B2\x5B3\a<\x2\x2\x5B3\x8D\x3"+
		"\x2\x2\x2\x5B4\x5B5\x5\x118\x8D\x2\x5B5\x5B6\a\xD8\x2\x2\x5B6\x5B8\x3"+
		"\x2\x2\x2\x5B7\x5B4\x3\x2\x2\x2\x5B7\x5B8\x3\x2\x2\x2\x5B8\x5BB\x3\x2"+
		"\x2\x2\x5B9\x5BA\a\xA2\x2\x2\x5BA\x5BC\a\xD8\x2\x2\x5BB\x5B9\x3\x2\x2"+
		"\x2\x5BB\x5BC\x3\x2\x2\x2\x5BC\x5BD\x3\x2\x2\x2\x5BD\x5BE\a\x87\x2\x2"+
		"\x5BE\x5BF\a\xD8\x2\x2\x5BF\x5C4\x5\xFE\x80\x2\x5C0\x5C2\a\xD8\x2\x2\x5C1"+
		"\x5C0\x3\x2\x2\x2\x5C1\x5C2\x3\x2\x2\x2\x5C2\x5C3\x3\x2\x2\x2\x5C3\x5C5"+
		"\x5\xF4{\x2\x5C4\x5C1\x3\x2\x2\x2\x5C4\x5C5\x3\x2\x2\x2\x5C5\x5C7\x3\x2"+
		"\x2\x2\x5C6\x5C8\a\xD6\x2\x2\x5C7\x5C6\x3\x2\x2\x2\x5C8\x5C9\x3\x2\x2"+
		"\x2\x5C9\x5C7\x3\x2\x2\x2\x5C9\x5CA\x3\x2\x2\x2\x5CA\x5D1\x3\x2\x2\x2"+
		"\x5CB\x5CD\x5\x1C\xF\x2\x5CC\x5CE\a\xD6\x2\x2\x5CD\x5CC\x3\x2\x2\x2\x5CE"+
		"\x5CF\x3\x2\x2\x2\x5CF\x5CD\x3\x2\x2\x2\x5CF\x5D0\x3\x2\x2\x2\x5D0\x5D2"+
		"\x3\x2\x2\x2\x5D1\x5CB\x3\x2\x2\x2\x5D1\x5D2\x3\x2\x2\x2\x5D2\x5D3\x3"+
		"\x2\x2\x2\x5D3\x5D4\a<\x2\x2\x5D4\x8F\x3\x2\x2\x2\x5D5\x5D6\a\x8B\x2\x2"+
		"\x5D6\x5D7\a\xD8\x2\x2\x5D7\x5D9\x5\xC6\x64\x2\x5D8\x5DA\a\xD8\x2\x2\x5D9"+
		"\x5D8\x3\x2\x2\x2\x5D9\x5DA\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB\x5DD"+
		"\a\x5\x2\x2\x5DC\x5DE\a\xD8\x2\x2\x5DD\x5DC\x3\x2\x2\x2\x5DD\x5DE\x3\x2"+
		"\x2\x2\x5DE\x5E0\x3\x2\x2\x2\x5DF\x5E1\x5\xC6\x64\x2\x5E0\x5DF\x3\x2\x2"+
		"\x2\x5E0\x5E1\x3\x2\x2\x2\x5E1\x5E3\x3\x2\x2\x2\x5E2\x5E4\a\xD8\x2\x2"+
		"\x5E3\x5E2\x3\x2\x2\x2\x5E3\x5E4\x3\x2\x2\x2\x5E4\x5E5\x3\x2\x2\x2\x5E5"+
		"\x5E7\a\x5\x2\x2\x5E6\x5E8\a\xD8\x2\x2\x5E7\x5E6\x3\x2\x2\x2\x5E7\x5E8"+
		"\x3\x2\x2\x2\x5E8\x5E9\x3\x2\x2\x2\x5E9\x5EA\x5\xC6\x64\x2\x5EA\x91\x3"+
		"\x2\x2\x2\x5EB\x5EC\a\x8E\x2\x2\x5EC\x5ED\a\xD8\x2\x2\x5ED\x5FC\x5\xFE"+
		"\x80\x2\x5EE\x5F0\a\xD8\x2\x2\x5EF\x5EE\x3\x2\x2\x2\x5EF\x5F0\x3\x2\x2"+
		"\x2\x5F0\x5F1\x3\x2\x2\x2\x5F1\x5F3\a\xC2\x2\x2\x5F2\x5F4\a\xD8\x2\x2"+
		"\x5F3\x5F2\x3\x2\x2\x2\x5F3\x5F4\x3\x2\x2\x2\x5F4\x5F9\x3\x2\x2\x2\x5F5"+
		"\x5F7\x5\xEEx\x2\x5F6\x5F8\a\xD8\x2\x2\x5F7\x5F6\x3\x2\x2\x2\x5F7\x5F8"+
		"\x3\x2\x2\x2\x5F8\x5FA\x3\x2\x2\x2\x5F9\x5F5\x3\x2\x2\x2\x5F9\x5FA\x3"+
		"\x2\x2\x2\x5FA\x5FB\x3\x2\x2\x2\x5FB\x5FD\a\xCB\x2\x2\x5FC\x5EF\x3\x2"+
		"\x2\x2\x5FC\x5FD\x3\x2\x2\x2\x5FD\x93\x3\x2\x2\x2\x5FE\x601\a\x8D\x2\x2"+
		"\x5FF\x600\a\xD8\x2\x2\x600\x602\x5\xC6\x64\x2\x601\x5FF\x3\x2\x2\x2\x601"+
		"\x602\x3\x2\x2\x2\x602\x95\x3\x2\x2\x2\x603\x604\a\x91\x2\x2\x604\x607"+
		"\a\xD8\x2\x2\x605\x606\a\x83\x2\x2\x606\x608\a\xD8\x2\x2\x607\x605\x3"+
		"\x2\x2\x2\x607\x608\x3\x2\x2\x2\x608\x609\x3\x2\x2\x2\x609\x614\x5\x98"+
		"M\x2\x60A\x60C\a\xD8\x2\x2\x60B\x60A\x3\x2\x2\x2\x60B\x60C\x3\x2\x2\x2"+
		"\x60C\x60D\x3\x2\x2\x2\x60D\x60F\a\x5\x2\x2\x60E\x610\a\xD8\x2\x2\x60F"+
		"\x60E\x3\x2\x2\x2\x60F\x610\x3\x2\x2\x2\x610\x611\x3\x2\x2\x2\x611\x613"+
		"\x5\x98M\x2\x612\x60B\x3\x2\x2\x2\x613\x616\x3\x2\x2\x2\x614\x612\x3\x2"+
		"\x2\x2\x614\x615\x3\x2\x2\x2\x615\x97\x3\x2\x2\x2\x616\x614\x3\x2\x2\x2"+
		"\x617\x619\x5\xE2r\x2\x618\x61A\a\xD8\x2\x2\x619\x618\x3\x2\x2\x2\x619"+
		"\x61A\x3\x2\x2\x2\x61A\x61B\x3\x2\x2\x2\x61B\x61D\a\xC2\x2\x2\x61C\x61E"+
		"\a\xD8\x2\x2\x61D\x61C\x3\x2\x2\x2\x61D\x61E\x3\x2\x2\x2\x61E\x61F\x3"+
		"\x2\x2\x2\x61F\x621\x5\xFA~\x2\x620\x622\a\xD8\x2\x2\x621\x620\x3\x2\x2"+
		"\x2\x621\x622\x3\x2\x2\x2\x622\x623\x3\x2\x2\x2\x623\x626\a\xCB\x2\x2"+
		"\x624\x625\a\xD8\x2\x2\x625\x627\x5\x100\x81\x2\x626\x624\x3\x2\x2\x2"+
		"\x626\x627\x3\x2\x2\x2\x627\x99\x3\x2\x2\x2\x628\x629\a\x93\x2\x2\x629"+
		"\x9B\x3\x2\x2\x2\x62A\x630\a\x94\x2\x2\x62B\x62E\a\xD8\x2\x2\x62C\x62F"+
		"\as\x2\x2\x62D\x62F\x5\xFE\x80\x2\x62E\x62C\x3\x2\x2\x2\x62E\x62D\x3\x2"+
		"\x2\x2\x62F\x631\x3\x2\x2\x2\x630\x62B\x3\x2\x2\x2\x630\x631\x3\x2\x2"+
		"\x2\x631\x9D\x3\x2\x2\x2\x632\x633\a\x95\x2\x2\x633\x9F\x3\x2\x2\x2\x634"+
		"\x635\a\x96\x2\x2\x635\x636\a\xD8\x2\x2\x636\x637\x5\xC6\x64\x2\x637\xA1"+
		"\x3\x2\x2\x2\x638\x639\a\x97\x2\x2\x639\x63A\a\xD8\x2\x2\x63A\x63C\x5"+
		"\xE2r\x2\x63B\x63D\a\xD8\x2\x2\x63C\x63B\x3\x2\x2\x2\x63C\x63D\x3\x2\x2"+
		"\x2\x63D\x63E\x3\x2\x2\x2\x63E\x640\a\xBE\x2\x2\x63F\x641\a\xD8\x2\x2"+
		"\x640\x63F\x3\x2\x2\x2\x640\x641\x3\x2\x2\x2\x641\x642\x3\x2\x2\x2\x642"+
		"\x643\x5\xC6\x64\x2\x643\xA3\x3\x2\x2\x2\x644\x645\a\x98\x2\x2\x645\x646"+
		"\a\xD8\x2\x2\x646\x648\x5\xC6\x64\x2\x647\x649\a\xD8\x2\x2\x648\x647\x3"+
		"\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649\x64A\x3\x2\x2\x2\x64A\x64C\a\x5\x2"+
		"\x2\x64B\x64D\a\xD8\x2\x2\x64C\x64B\x3\x2\x2\x2\x64C\x64D\x3\x2\x2\x2"+
		"\x64D\x64E\x3\x2\x2\x2\x64E\x64F\x5\xC6\x64\x2\x64F\xA5\x3\x2\x2\x2\x650"+
		"\x651\a\x99\x2\x2\x651\x652\a\xD8\x2\x2\x652\x654\x5\xC6\x64\x2\x653\x655"+
		"\a\xD8\x2\x2\x654\x653\x3\x2\x2\x2\x654\x655\x3\x2\x2\x2\x655\x656\x3"+
		"\x2\x2\x2\x656\x658\a\x5\x2\x2\x657\x659\a\xD8\x2\x2\x658\x657\x3\x2\x2"+
		"\x2\x658\x659\x3\x2\x2\x2\x659\x65A\x3\x2\x2\x2\x65A\x65C\x5\xC6\x64\x2"+
		"\x65B\x65D\a\xD8\x2\x2\x65C\x65B\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2\x65D"+
		"\x65E\x3\x2\x2\x2\x65E\x660\a\x5\x2\x2\x65F\x661\a\xD8\x2\x2\x660\x65F"+
		"\x3\x2\x2\x2\x660\x661\x3\x2\x2\x2\x661\x662\x3\x2\x2\x2\x662\x664\x5"+
		"\xC6\x64\x2\x663\x665\a\xD8\x2\x2\x664\x663\x3\x2\x2\x2\x664\x665\x3\x2"+
		"\x2\x2\x665\x666\x3\x2\x2\x2\x666\x668\a\x5\x2\x2\x667\x669\a\xD8\x2\x2"+
		"\x668\x667\x3\x2\x2\x2\x668\x669\x3\x2\x2\x2\x669\x66A\x3\x2\x2\x2\x66A"+
		"\x66B\x5\xC6\x64\x2\x66B\xA7\x3\x2\x2\x2\x66C\x66D\a\x9A\x2\x2\x66D\x66E"+
		"\a\xD8\x2\x2\x66E\x670\x5\xC6\x64\x2\x66F\x671\a\xD8\x2\x2\x670\x66F\x3"+
		"\x2\x2\x2\x670\x671\x3\x2\x2\x2\x671\x672\x3\x2\x2\x2\x672\x674\a\x5\x2"+
		"\x2\x673\x675\a\xD8\x2\x2\x674\x673\x3\x2\x2\x2\x674\x675\x3\x2\x2\x2"+
		"\x675\x676\x3\x2\x2\x2\x676\x677\x5\xC6\x64\x2\x677\xA9\x3\x2\x2\x2\x678"+
		"\x679\a\x9B\x2\x2\x679\x67A\a\xD8\x2\x2\x67A\x67B\a\x1C\x2\x2\x67B\x67C"+
		"\a\xD8\x2\x2\x67C\x67E\x5\xC6\x64\x2\x67D\x67F\a\xD6\x2\x2\x67E\x67D\x3"+
		"\x2\x2\x2\x67F\x680\x3\x2\x2\x2\x680\x67E\x3\x2\x2\x2\x680\x681\x3\x2"+
		"\x2\x2\x681\x685\x3\x2\x2\x2\x682\x684\x5\xACW\x2\x683\x682\x3\x2\x2\x2"+
		"\x684\x687\x3\x2\x2\x2\x685\x683\x3\x2\x2\x2\x685\x686\x3\x2\x2\x2\x686"+
		"\x689\x3\x2\x2\x2\x687\x685\x3\x2\x2\x2\x688\x68A\a\xD8\x2\x2\x689\x688"+
		"\x3\x2\x2\x2\x689\x68A\x3\x2\x2\x2\x68A\x68B\x3\x2\x2\x2\x68B\x68C\a="+
		"\x2\x2\x68C\xAB\x3\x2\x2\x2\x68D\x68E\a\x1C\x2\x2\x68E\x68F\a\xD8\x2\x2"+
		"\x68F\x691\x5\xAEX\x2\x690\x692\a\xD8\x2\x2\x691\x690\x3\x2\x2\x2\x691"+
		"\x692\x3\x2\x2\x2\x692\x6A1\x3\x2\x2\x2\x693\x695\a\x6\x2\x2\x694\x693"+
		"\x3\x2\x2\x2\x694\x695\x3\x2\x2\x2\x695\x699\x3\x2\x2\x2\x696\x698\a\xD6"+
		"\x2\x2\x697\x696\x3\x2\x2\x2\x698\x69B\x3\x2\x2\x2\x699\x697\x3\x2\x2"+
		"\x2\x699\x69A\x3\x2\x2\x2\x69A\x6A2\x3\x2\x2\x2\x69B\x699\x3\x2\x2\x2"+
		"\x69C\x69E\a\xD6\x2\x2\x69D\x69C\x3\x2\x2\x2\x69E\x69F\x3\x2\x2\x2\x69F"+
		"\x69D\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x6A2\x3\x2\x2\x2\x6A1\x694"+
		"\x3\x2\x2\x2\x6A1\x69D\x3\x2\x2\x2\x6A2\x6A9\x3\x2\x2\x2\x6A3\x6A5\x5"+
		"\x1C\xF\x2\x6A4\x6A6\a\xD6\x2\x2\x6A5\x6A4\x3\x2\x2\x2\x6A6\x6A7\x3\x2"+
		"\x2\x2\x6A7\x6A5\x3\x2\x2\x2\x6A7\x6A8\x3\x2\x2\x2\x6A8\x6AA\x3\x2\x2"+
		"\x2\x6A9\x6A3\x3\x2\x2\x2\x6A9\x6AA\x3\x2\x2\x2\x6AA\xAD\x3\x2\x2\x2\x6AB"+
		"\x6D7\a\x37\x2\x2\x6AC\x6AE\aZ\x2\x2\x6AD\x6AF\a\xD8\x2\x2\x6AE\x6AD\x3"+
		"\x2\x2\x2\x6AE\x6AF\x3\x2\x2\x2\x6AF\x6B0\x3\x2\x2\x2\x6B0\x6B2\x5\x106"+
		"\x84\x2\x6B1\x6B3\a\xD8\x2\x2\x6B2\x6B1\x3\x2\x2\x2\x6B2\x6B3\x3\x2\x2"+
		"\x2\x6B3\x6B4\x3\x2\x2\x2\x6B4\x6B5\x5\xC6\x64\x2\x6B5\x6D7\x3\x2\x2\x2"+
		"\x6B6\x6C1\x5\xC6\x64\x2\x6B7\x6B9\a\xD8\x2\x2\x6B8\x6B7\x3\x2\x2\x2\x6B8"+
		"\x6B9\x3\x2\x2\x2\x6B9\x6BA\x3\x2\x2\x2\x6BA\x6BC\a\x5\x2\x2\x6BB\x6BD"+
		"\a\xD8\x2\x2\x6BC\x6BB\x3\x2\x2\x2\x6BC\x6BD\x3\x2\x2\x2\x6BD\x6BE\x3"+
		"\x2\x2\x2\x6BE\x6C0\x5\xC6\x64\x2\x6BF\x6B8\x3\x2\x2\x2\x6C0\x6C3\x3\x2"+
		"\x2\x2\x6C1\x6BF\x3\x2\x2\x2\x6C1\x6C2\x3\x2\x2\x2\x6C2\x6D7\x3\x2\x2"+
		"\x2\x6C3\x6C1\x3\x2\x2\x2\x6C4\x6C5\a\xD1\x2\x2\x6C5\x6C6\a\xD8\x2\x2"+
		"\x6C6\x6C7\a\xAB\x2\x2\x6C7\x6C8\a\xD8\x2\x2\x6C8\x6D3\x5\xC6\x64\x2\x6C9"+
		"\x6CB\a\xD8\x2\x2\x6CA\x6C9\x3\x2\x2\x2\x6CA\x6CB\x3\x2\x2\x2\x6CB\x6CC"+
		"\x3\x2\x2\x2\x6CC\x6CE\a\x5\x2\x2\x6CD\x6CF\a\xD8\x2\x2\x6CE\x6CD\x3\x2"+
		"\x2\x2\x6CE\x6CF\x3\x2\x2\x2\x6CF\x6D0\x3\x2\x2\x2\x6D0\x6D2\x5\xC6\x64"+
		"\x2\x6D1\x6CA\x3\x2\x2\x2\x6D2\x6D5\x3\x2\x2\x2\x6D3\x6D1\x3\x2\x2\x2"+
		"\x6D3\x6D4\x3\x2\x2\x2\x6D4\x6D7\x3\x2\x2\x2\x6D5\x6D3\x3\x2\x2\x2\x6D6"+
		"\x6AB\x3\x2\x2\x2\x6D6\x6AC\x3\x2\x2\x2\x6D6\x6B6\x3\x2\x2\x2\x6D6\x6C4"+
		"\x3\x2\x2\x2\x6D7\xAF\x3\x2\x2\x2\x6D8\x6D9\a\x9C\x2\x2\x6D9\x6DA\a\xD8"+
		"\x2\x2\x6DA\x6E3\x5\xC6\x64\x2\x6DB\x6DD\a\xD8\x2\x2\x6DC\x6DB\x3\x2\x2"+
		"\x2\x6DC\x6DD\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6E0\a\x5\x2\x2\x6DF"+
		"\x6E1\a\xD8\x2\x2\x6E0\x6DF\x3\x2\x2\x2\x6E0\x6E1\x3\x2\x2\x2\x6E1\x6E2"+
		"\x3\x2\x2\x2\x6E2\x6E4\x5\xC6\x64\x2\x6E3\x6DC\x3\x2\x2\x2\x6E3\x6E4\x3"+
		"\x2\x2\x2\x6E4\xB1\x3\x2\x2\x2\x6E5\x6E6\a\x9E\x2\x2\x6E6\x6E7\a\xD8\x2"+
		"\x2\x6E7\x6E9\x5\xC6\x64\x2\x6E8\x6EA\a\xD8\x2\x2\x6E9\x6E8\x3\x2\x2\x2"+
		"\x6E9\x6EA\x3\x2\x2\x2\x6EA\x6EB\x3\x2\x2\x2\x6EB\x6ED\a\x5\x2\x2\x6EC"+
		"\x6EE\a\xD8\x2\x2\x6ED\x6EC\x3\x2\x2\x2\x6ED\x6EE\x3\x2\x2\x2\x6EE\x6EF"+
		"\x3\x2\x2\x2\x6EF\x6F0\x5\xC6\x64\x2\x6F0\xB3\x3\x2\x2\x2\x6F1\x6F2\a"+
		"\x9D\x2\x2\x6F2\x6F3\a\xD8\x2\x2\x6F3\x6F5\x5\xE2r\x2\x6F4\x6F6\a\xD8"+
		"\x2\x2\x6F5\x6F4\x3\x2\x2\x2\x6F5\x6F6\x3\x2\x2\x2\x6F6\x6F7\x3\x2\x2"+
		"\x2\x6F7\x6F9\a\xBE\x2\x2\x6F8\x6FA\a\xD8\x2\x2\x6F9\x6F8\x3\x2\x2\x2"+
		"\x6F9\x6FA\x3\x2\x2\x2\x6FA\x6FB\x3\x2\x2\x2\x6FB\x6FC\x5\xC6\x64\x2\x6FC"+
		"\xB5\x3\x2\x2\x2\x6FD\x6FE\a\xA4\x2\x2\x6FE\xB7\x3\x2\x2\x2\x6FF\x700"+
		"\x5\x118\x8D\x2\x700\x701\a\xD8\x2\x2\x701\x703\x3\x2\x2\x2\x702\x6FF"+
		"\x3\x2\x2\x2\x702\x703\x3\x2\x2\x2\x703\x706\x3\x2\x2\x2\x704\x705\a\xA2"+
		"\x2\x2\x705\x707\a\xD8\x2\x2\x706\x704\x3\x2\x2\x2\x706\x707\x3\x2\x2"+
		"\x2\x707\x708\x3\x2\x2\x2\x708\x709\a\xA6\x2\x2\x709\x70A\a\xD8\x2\x2"+
		"\x70A\x70F\x5\xFE\x80\x2\x70B\x70D\a\xD8\x2\x2\x70C\x70B\x3\x2\x2\x2\x70C"+
		"\x70D\x3\x2\x2\x2\x70D\x70E\x3\x2\x2\x2\x70E\x710\x5\xF4{\x2\x70F\x70C"+
		"\x3\x2\x2\x2\x70F\x710\x3\x2\x2\x2\x710\x712\x3\x2\x2\x2\x711\x713\a\xD6"+
		"\x2\x2\x712\x711\x3\x2\x2\x2\x713\x714\x3\x2\x2\x2\x714\x712\x3\x2\x2"+
		"\x2\x714\x715\x3\x2\x2\x2\x715\x71C\x3\x2\x2\x2\x716\x718\x5\x1C\xF\x2"+
		"\x717\x719\a\xD6\x2\x2\x718\x717\x3\x2\x2\x2\x719\x71A\x3\x2\x2\x2\x71A"+
		"\x718\x3\x2\x2\x2\x71A\x71B\x3\x2\x2\x2\x71B\x71D\x3\x2\x2\x2\x71C\x716"+
		"\x3\x2\x2\x2\x71C\x71D\x3\x2\x2\x2\x71D\x71E\x3\x2\x2\x2\x71E\x71F\a>"+
		"\x2\x2\x71F\xB9\x3\x2\x2\x2\x720\x722\a\xAA\x2\x2\x721\x723\a\xD8\x2\x2"+
		"\x722\x721\x3\x2\x2\x2\x722\x723\x3\x2\x2\x2\x723\x724\x3\x2\x2\x2\x724"+
		"\x726\a\xBE\x2\x2\x725\x727\a\xD8\x2\x2\x726\x725\x3\x2\x2\x2\x726\x727"+
		"\x3\x2\x2\x2\x727\x728\x3\x2\x2\x2\x728\x729\x5\xC6\x64\x2\x729\xBB\x3"+
		"\x2\x2\x2\x72A\x72B\x5\x118\x8D\x2\x72B\x72C\a\xD8\x2\x2\x72C\x72E\x3"+
		"\x2\x2\x2\x72D\x72A\x3\x2\x2\x2\x72D\x72E\x3\x2\x2\x2\x72E\x72F\x3\x2"+
		"\x2\x2\x72F\x730\a\xAD\x2\x2\x730\x731\a\xD8\x2\x2\x731\x733\x5\xFE\x80"+
		"\x2\x732\x734\a\xD6\x2\x2\x733\x732\x3\x2\x2\x2\x734\x735\x3\x2\x2\x2"+
		"\x735\x733\x3\x2\x2\x2\x735\x736\x3\x2\x2\x2\x736\x73A\x3\x2\x2\x2\x737"+
		"\x739\x5\xBE`\x2\x738\x737\x3\x2\x2\x2\x739\x73C\x3\x2\x2\x2\x73A\x738"+
		"\x3\x2\x2\x2\x73A\x73B\x3\x2\x2\x2\x73B\x73D\x3\x2\x2\x2\x73C\x73A\x3"+
		"\x2\x2\x2\x73D\x73E\a?\x2\x2\x73E\xBD\x3\x2\x2\x2\x73F\x74E\x5\xFE\x80"+
		"\x2\x740\x742\a\xD8\x2\x2\x741\x740\x3\x2\x2\x2\x741\x742\x3\x2\x2\x2"+
		"\x742\x743\x3\x2\x2\x2\x743\x748\a\xC2\x2\x2\x744\x746\a\xD8\x2\x2\x745"+
		"\x744\x3\x2\x2\x2\x745\x746\x3\x2\x2\x2\x746\x747\x3\x2\x2\x2\x747\x749"+
		"\x5\xFA~\x2\x748\x745\x3\x2\x2\x2\x748\x749\x3\x2\x2\x2\x749\x74B\x3\x2"+
		"\x2\x2\x74A\x74C\a\xD8\x2\x2\x74B\x74A\x3\x2\x2\x2\x74B\x74C\x3\x2\x2"+
		"\x2\x74C\x74D\x3\x2\x2\x2\x74D\x74F\a\xCB\x2\x2\x74E\x741\x3\x2\x2\x2"+
		"\x74E\x74F\x3\x2\x2\x2\x74F\x752\x3\x2\x2\x2\x750\x751\a\xD8\x2\x2\x751"+
		"\x753\x5\x100\x81\x2\x752\x750\x3\x2\x2\x2\x752\x753\x3\x2\x2\x2\x753"+
		"\x755\x3\x2\x2\x2\x754\x756\a\xD6\x2\x2\x755\x754\x3\x2\x2\x2\x756\x757"+
		"\x3\x2\x2\x2\x757\x755\x3\x2\x2\x2\x757\x758\x3\x2\x2\x2\x758\xBF\x3\x2"+
		"\x2\x2\x759\x75A\a\xAE\x2\x2\x75A\x75B\a\xD8\x2\x2\x75B\x760\x5\xC6\x64"+
		"\x2\x75C\x75D\a\xD8\x2\x2\x75D\x75E\aZ\x2\x2\x75E\x75F\a\xD8\x2\x2\x75F"+
		"\x761\x5\x114\x8B\x2\x760\x75C\x3\x2\x2\x2\x760\x761\x3\x2\x2\x2\x761"+
		"\xC1\x3\x2\x2\x2\x762\x763\a\xAF\x2\x2\x763\x764\a\xD8\x2\x2\x764\x765"+
		"\x5\xC6\x64\x2\x765\xC3\x3\x2\x2\x2\x766\x767\a\xB0\x2\x2\x767\x768\a"+
		"\xD8\x2\x2\x768\x777\x5\xC6\x64\x2\x769\x76B\a\xD8\x2\x2\x76A\x769\x3"+
		"\x2\x2\x2\x76A\x76B\x3\x2\x2\x2\x76B\x76C\x3\x2\x2\x2\x76C\x76E\a\x5\x2"+
		"\x2\x76D\x76F\a\xD8\x2\x2\x76E\x76D\x3\x2\x2\x2\x76E\x76F\x3\x2\x2\x2"+
		"\x76F\x770\x3\x2\x2\x2\x770\x775\x5\xC6\x64\x2\x771\x772\a\xD8\x2\x2\x772"+
		"\x773\a\xAB\x2\x2\x773\x774\a\xD8\x2\x2\x774\x776\x5\xC6\x64\x2\x775\x771"+
		"\x3\x2\x2\x2\x775\x776\x3\x2\x2\x2\x776\x778\x3\x2\x2\x2\x777\x76A\x3"+
		"\x2\x2\x2\x777\x778\x3\x2\x2\x2\x778\xC5\x3\x2\x2\x2\x779\x77A\b\x64\x1"+
		"\x2\x77A\x77B\at\x2\x2\x77B\x77C\a\xD8\x2\x2\x77C\x7B0\x5\xC6\x64\x1E"+
		"\x77D\x77E\a\r\x2\x2\x77E\x77F\a\xD8\x2\x2\x77F\x7B0\x5\xC6\x64\x1B\x780"+
		"\x782\x5\xE2r\x2\x781\x783\a\xD8\x2\x2\x782\x781\x3\x2\x2\x2\x782\x783"+
		"\x3\x2\x2\x2\x783\x784\x3\x2\x2\x2\x784\x786\a\xBC\x2\x2\x785\x787\a\xD8"+
		"\x2\x2\x786\x785\x3\x2\x2\x2\x786\x787\x3\x2\x2\x2\x787\x788\x3\x2\x2"+
		"\x2\x788\x789\x5\xC6\x64\x1A\x789\x7B0\x3\x2\x2\x2\x78A\x78C\a\xC4\x2"+
		"\x2\x78B\x78D\a\xD8\x2\x2\x78C\x78B\x3\x2\x2\x2\x78C\x78D\x3\x2\x2\x2"+
		"\x78D\x78E\x3\x2\x2\x2\x78E\x7B0\x5\xC6\x64\x10\x78F\x791\a\xC8\x2\x2"+
		"\x790\x792\a\xD8\x2\x2\x791\x790\x3\x2\x2\x2\x791\x792\x3\x2\x2\x2\x792"+
		"\x793\x3\x2\x2\x2\x793\x7B0\x5\xC6\x64\xF\x794\x795\au\x2\x2\x795\x796"+
		"\a\xD8\x2\x2\x796\x7B0\x5\xC6\x64\x3\x797\x7B0\x5\x112\x8A\x2\x798\x7B0"+
		"\x5\xE2r\x2\x799\x79B\a\xC2\x2\x2\x79A\x79C\a\xD8\x2\x2\x79B\x79A\x3\x2"+
		"\x2\x2\x79B\x79C\x3\x2\x2\x2\x79C\x79D\x3\x2\x2\x2\x79D\x7A8\x5\xC6\x64"+
		"\x2\x79E\x7A0\a\xD8\x2\x2\x79F\x79E\x3\x2\x2\x2\x79F\x7A0\x3\x2\x2\x2"+
		"\x7A0\x7A1\x3\x2\x2\x2\x7A1\x7A3\a\x5\x2\x2\x7A2\x7A4\a\xD8\x2\x2\x7A3"+
		"\x7A2\x3\x2\x2\x2\x7A3\x7A4\x3\x2\x2\x2\x7A4\x7A5\x3\x2\x2\x2\x7A5\x7A7"+
		"\x5\xC6\x64\x2\x7A6\x79F\x3\x2\x2\x2\x7A7\x7AA\x3\x2\x2\x2\x7A8\x7A6\x3"+
		"\x2\x2\x2\x7A8\x7A9\x3\x2\x2\x2\x7A9\x7AB\x3\x2\x2\x2\x7AA\x7A8\x3\x2"+
		"\x2\x2\x7AB\x7AC\a\xCB\x2\x2\x7AC\x7B0\x3\x2\x2\x2\x7AD\x7B0\x5\xC0\x61"+
		"\x2\x7AE\x7B0\x5v<\x2\x7AF\x779\x3\x2\x2\x2\x7AF\x77D\x3\x2\x2\x2\x7AF"+
		"\x780\x3\x2\x2\x2\x7AF\x78A\x3\x2\x2\x2\x7AF\x78F\x3\x2\x2\x2\x7AF\x794"+
		"\x3\x2\x2\x2\x7AF\x797\x3\x2\x2\x2\x7AF\x798\x3\x2\x2\x2\x7AF\x799\x3"+
		"\x2\x2\x2\x7AF\x7AD\x3\x2\x2\x2\x7AF\x7AE\x3\x2\x2\x2\x7B0\x84F\x3\x2"+
		"\x2\x2\x7B1\x7B2\f\x19\x2\x2\x7B2\x7B3\a\xD8\x2\x2\x7B3\x7B4\aZ\x2\x2"+
		"\x7B4\x7B5\a\xD8\x2\x2\x7B5\x84E\x5\xC6\x64\x1A\x7B6\x7B7\f\x18\x2\x2"+
		"\x7B7\x7B8\a\xD8\x2\x2\x7B8\x7B9\a\x64\x2\x2\x7B9\x7BA\a\xD8\x2\x2\x7BA"+
		"\x84E\x5\xC6\x64\x19\x7BB\x7BD\f\x17\x2\x2\x7BC\x7BE\a\xD8\x2\x2\x7BD"+
		"\x7BC\x3\x2\x2\x2\x7BD\x7BE\x3\x2\x2\x2\x7BE\x7BF\x3\x2\x2\x2\x7BF\x7C1"+
		"\a\xBF\x2\x2\x7C0\x7C2\a\xD8\x2\x2\x7C1\x7C0\x3\x2\x2\x2\x7C1\x7C2\x3"+
		"\x2\x2\x2\x7C2\x7C3\x3\x2\x2\x2\x7C3\x84E\x5\xC6\x64\x18\x7C4\x7C6\f\x16"+
		"\x2\x2\x7C5\x7C7\a\xD8\x2\x2\x7C6\x7C5\x3\x2\x2\x2\x7C6\x7C7\x3\x2\x2"+
		"\x2\x7C7\x7C8\x3\x2\x2\x2\x7C8\x7CA\a\xC1\x2\x2\x7C9\x7CB\a\xD8\x2\x2"+
		"\x7CA\x7C9\x3\x2\x2\x2\x7CA\x7CB\x3\x2\x2\x2\x7CB\x7CC\x3\x2\x2\x2\x7CC"+
		"\x84E\x5\xC6\x64\x17\x7CD\x7CF\f\x15\x2\x2\x7CE\x7D0\a\xD8\x2\x2\x7CF"+
		"\x7CE\x3\x2\x2\x2\x7CF\x7D0\x3\x2\x2\x2\x7D0\x7D1\x3\x2\x2\x2\x7D1\x7D3"+
		"\a\xC0\x2\x2\x7D2\x7D4\a\xD8\x2\x2\x7D3\x7D2\x3\x2\x2\x2\x7D3\x7D4\x3"+
		"\x2\x2\x2\x7D4\x7D5\x3\x2\x2\x2\x7D5\x84E\x5\xC6\x64\x16\x7D6\x7D8\f\x14"+
		"\x2\x2\x7D7\x7D9\a\xD8\x2\x2\x7D8\x7D7\x3\x2\x2\x2\x7D8\x7D9\x3\x2\x2"+
		"\x2\x7D9\x7DA\x3\x2\x2\x2\x7DA\x7DC\a\xC3\x2\x2\x7DB\x7DD\a\xD8\x2\x2"+
		"\x7DC\x7DB\x3\x2\x2\x2\x7DC\x7DD\x3\x2\x2\x2\x7DD\x7DE\x3\x2\x2\x2\x7DE"+
		"\x84E\x5\xC6\x64\x15\x7DF\x7E1\f\x13\x2\x2\x7E0\x7E2\a\xD8\x2\x2\x7E1"+
		"\x7E0\x3\x2\x2\x2\x7E1\x7E2\x3\x2\x2\x2\x7E2\x7E3\x3\x2\x2\x2\x7E3\x7E5"+
		"\a\xC7\x2\x2\x7E4\x7E6\a\xD8\x2\x2\x7E5\x7E4\x3\x2\x2\x2\x7E5\x7E6\x3"+
		"\x2\x2\x2\x7E6\x7E7\x3\x2\x2\x2\x7E7\x84E\x5\xC6\x64\x14\x7E8\x7EA\f\x12"+
		"\x2\x2\x7E9\x7EB\a\xD8\x2\x2\x7EA\x7E9\x3\x2\x2\x2\x7EA\x7EB\x3\x2\x2"+
		"\x2\x7EB\x7EC\x3\x2\x2\x2\x7EC\x7EE\a\xBE\x2\x2\x7ED\x7EF\a\xD8\x2\x2"+
		"\x7EE\x7ED\x3\x2\x2\x2\x7EE\x7EF\x3\x2\x2\x2\x7EF\x7F0\x3\x2\x2\x2\x7F0"+
		"\x84E\x5\xC6\x64\x13\x7F1\x7F2\f\x11\x2\x2\x7F2\x7F3\a\xD8\x2\x2\x7F3"+
		"\x7F4\a\xBB\x2\x2\x7F4\x7F5\a\xD8\x2\x2\x7F5\x84E\x5\xC6\x64\x12\x7F6"+
		"\x7F8\f\xE\x2\x2\x7F7\x7F9\a\xD8\x2\x2\x7F8\x7F7\x3\x2\x2\x2\x7F8\x7F9"+
		"\x3\x2\x2\x2\x7F9\x7FA\x3\x2\x2\x2\x7FA\x7FC\a\xC8\x2\x2\x7FB\x7FD\a\xD8"+
		"\x2\x2\x7FC\x7FB\x3\x2\x2\x2\x7FC\x7FD\x3\x2\x2\x2\x7FD\x7FE\x3\x2\x2"+
		"\x2\x7FE\x84E\x5\xC6\x64\xF\x7FF\x801\f\r\x2\x2\x800\x802\a\xD8\x2\x2"+
		"\x801\x800\x3\x2\x2\x2\x801\x802\x3\x2\x2\x2\x802\x803\x3\x2\x2\x2\x803"+
		"\x805\aq\x2\x2\x804\x806\a\xD8\x2\x2\x805\x804\x3\x2\x2\x2\x805\x806\x3"+
		"\x2\x2\x2\x806\x807\x3\x2\x2\x2\x807\x84E\x5\xC6\x64\xE\x808\x80A\f\f"+
		"\x2\x2\x809\x80B\a\xD8\x2\x2\x80A\x809\x3\x2\x2\x2\x80A\x80B\x3\x2\x2"+
		"\x2\x80B\x80C\x3\x2\x2\x2\x80C\x80E\a\xBD\x2\x2\x80D\x80F\a\xD8\x2\x2"+
		"\x80E\x80D\x3\x2\x2\x2\x80E\x80F\x3\x2\x2\x2\x80F\x810\x3\x2\x2\x2\x810"+
		"\x84E\x5\xC6\x64\r\x811\x813\f\v\x2\x2\x812\x814\a\xD8\x2\x2\x813\x812"+
		"\x3\x2\x2\x2\x813\x814\x3\x2\x2\x2\x814\x815\x3\x2\x2\x2\x815\x817\a\xC6"+
		"\x2\x2\x816\x818\a\xD8\x2\x2\x817\x816\x3\x2\x2\x2\x817\x818\x3\x2\x2"+
		"\x2\x818\x819\x3\x2\x2\x2\x819\x84E\x5\xC6\x64\f\x81A\x81C\f\n\x2\x2\x81B"+
		"\x81D\a\xD8\x2\x2\x81C\x81B\x3\x2\x2\x2\x81C\x81D\x3\x2\x2\x2\x81D\x81E"+
		"\x3\x2\x2\x2\x81E\x820\a\xC4\x2\x2\x81F\x821\a\xD8\x2\x2\x820\x81F\x3"+
		"\x2\x2\x2\x820\x821\x3\x2\x2\x2\x821\x822\x3\x2\x2\x2\x822\x84E\x5\xC6"+
		"\x64\v\x823\x825\f\t\x2\x2\x824\x826\a\xD8\x2\x2\x825\x824\x3\x2\x2\x2"+
		"\x825\x826\x3\x2\x2\x2\x826\x827\x3\x2\x2\x2\x827\x829\a\xCA\x2\x2\x828"+
		"\x82A\a\xD8\x2\x2\x829\x828\x3\x2\x2\x2\x829\x82A\x3\x2\x2\x2\x82A\x82B"+
		"\x3\x2\x2\x2\x82B\x84E\x5\xC6\x64\n\x82C\x82D\f\b\x2\x2\x82D\x82E\a\xD8"+
		"\x2\x2\x82E\x82F\aV\x2\x2\x82F\x830\a\xD8\x2\x2\x830\x84E\x5\xC6\x64\t"+
		"\x831\x832\f\a\x2\x2\x832\x833\a\xD8\x2\x2\x833\x834\a\x43\x2\x2\x834"+
		"\x835\a\xD8\x2\x2\x835\x84E\x5\xC6\x64\b\x836\x838\f\x6\x2\x2\x837\x839"+
		"\a\xD8\x2\x2\x838\x837\x3\x2\x2\x2\x838\x839\x3\x2\x2\x2\x839\x83A\x3"+
		"\x2\x2\x2\x83A\x83C\a\xBA\x2\x2\x83B\x83D\a\xD8\x2\x2\x83C\x83B\x3\x2"+
		"\x2\x2\x83C\x83D\x3\x2\x2\x2\x83D\x83E\x3\x2\x2\x2\x83E\x84E\x5\xC6\x64"+
		"\a\x83F\x841\f\x5\x2\x2\x840\x842\a\xD8\x2\x2\x841\x840\x3\x2\x2\x2\x841"+
		"\x842\x3\x2\x2\x2\x842\x843\x3\x2\x2\x2\x843\x845\a\x80\x2\x2\x844\x846"+
		"\a\xD8\x2\x2\x845\x844\x3\x2\x2\x2\x845\x846\x3\x2\x2\x2\x846\x847\x3"+
		"\x2\x2\x2\x847\x84E\x5\xC6\x64\x6\x848\x849\f\x4\x2\x2\x849\x84A\a\xD8"+
		"\x2\x2\x84A\x84B\a\xF\x2\x2\x84B\x84C\a\xD8\x2\x2\x84C\x84E\x5\xC6\x64"+
		"\x5\x84D\x7B1\x3\x2\x2\x2\x84D\x7B6\x3\x2\x2\x2\x84D\x7BB\x3\x2\x2\x2"+
		"\x84D\x7C4\x3\x2\x2\x2\x84D\x7CD\x3\x2\x2\x2\x84D\x7D6\x3\x2\x2\x2\x84D"+
		"\x7DF\x3\x2\x2\x2\x84D\x7E8\x3\x2\x2\x2\x84D\x7F1\x3\x2\x2\x2\x84D\x7F6"+
		"\x3\x2\x2\x2\x84D\x7FF\x3\x2\x2\x2\x84D\x808\x3\x2\x2\x2\x84D\x811\x3"+
		"\x2\x2\x2\x84D\x81A\x3\x2\x2\x2\x84D\x823\x3\x2\x2\x2\x84D\x82C\x3\x2"+
		"\x2\x2\x84D\x831\x3\x2\x2\x2\x84D\x836\x3\x2\x2\x2\x84D\x83F\x3\x2\x2"+
		"\x2\x84D\x848\x3\x2\x2\x2\x84E\x851\x3\x2\x2\x2\x84F\x84D\x3\x2\x2\x2"+
		"\x84F\x850\x3\x2\x2\x2\x850\xC7\x3\x2\x2\x2\x851\x84F\x3\x2\x2\x2\x852"+
		"\x856\a\x33\x2\x2\x853\x856\a\xA2\x2\x2\x854\x856\x5\x118\x8D\x2\x855"+
		"\x852\x3\x2\x2\x2\x855\x853\x3\x2\x2\x2\x855\x854\x3\x2\x2\x2\x856\x857"+
		"\x3\x2\x2\x2\x857\x85A\a\xD8\x2\x2\x858\x859\a\xB8\x2\x2\x859\x85B\a\xD8"+
		"\x2\x2\x85A\x858\x3\x2\x2\x2\x85A\x85B\x3\x2\x2\x2\x85B\x85C\x3\x2\x2"+
		"\x2\x85C\x85D\x5\xCA\x66\x2\x85D\xC9\x3\x2\x2\x2\x85E\x869\x5\xCCg\x2"+
		"\x85F\x861\a\xD8\x2\x2\x860\x85F\x3\x2\x2\x2\x860\x861\x3\x2\x2\x2\x861"+
		"\x862\x3\x2\x2\x2\x862\x864\a\x5\x2\x2\x863\x865\a\xD8\x2\x2\x864\x863"+
		"\x3\x2\x2\x2\x864\x865\x3\x2\x2\x2\x865\x866\x3\x2\x2\x2\x866\x868\x5"+
		"\xCCg\x2\x867\x860\x3\x2\x2\x2\x868\x86B\x3\x2\x2\x2\x869\x867\x3\x2\x2"+
		"\x2\x869\x86A\x3\x2\x2\x2\x86A\xCB\x3\x2\x2\x2\x86B\x869\x3\x2\x2\x2\x86C"+
		"\x87E\x5\xFE\x80\x2\x86D\x86F\a\xD8\x2\x2\x86E\x86D\x3\x2\x2\x2\x86E\x86F"+
		"\x3\x2\x2\x2\x86F\x870\x3\x2\x2\x2\x870\x872\a\xC2\x2\x2\x871\x873\a\xD8"+
		"\x2\x2\x872\x871\x3\x2\x2\x2\x872\x873\x3\x2\x2\x2\x873\x878\x3\x2\x2"+
		"\x2\x874\x876\x5\xFA~\x2\x875\x877\a\xD8\x2\x2\x876\x875\x3\x2\x2\x2\x876"+
		"\x877\x3\x2\x2\x2\x877\x879\x3\x2\x2\x2\x878\x874\x3\x2\x2\x2\x878\x879"+
		"\x3\x2\x2\x2\x879\x87A\x3\x2\x2\x2\x87A\x87C\a\xCB\x2\x2\x87B\x87D\a\xD8"+
		"\x2\x2\x87C\x87B\x3\x2\x2\x2\x87C\x87D\x3\x2\x2\x2\x87D\x87F\x3\x2\x2"+
		"\x2\x87E\x86E\x3\x2\x2\x2\x87E\x87F\x3\x2\x2\x2\x87F\x881\x3\x2\x2\x2"+
		"\x880\x882\x5\x116\x8C\x2\x881\x880\x3\x2\x2\x2\x881\x882\x3\x2\x2\x2"+
		"\x882\x885\x3\x2\x2\x2\x883\x884\a\xD8\x2\x2\x884\x886\x5\x100\x81\x2"+
		"\x885\x883\x3\x2\x2\x2\x885\x886\x3\x2\x2\x2\x886\xCD\x3\x2\x2\x2\x887"+
		"\x888\a\xB5\x2\x2\x888\x889\a\xD8\x2\x2\x889\x88B\x5\xC6\x64\x2\x88A\x88C"+
		"\a\xD6\x2\x2\x88B\x88A\x3\x2\x2\x2\x88C\x88D\x3\x2\x2\x2\x88D\x88B\x3"+
		"\x2\x2\x2\x88D\x88E\x3\x2\x2\x2\x88E\x894\x3\x2\x2\x2\x88F\x890\x5\x1C"+
		"\xF\x2\x890\x891\a\xD6\x2\x2\x891\x893\x3\x2\x2\x2\x892\x88F\x3\x2\x2"+
		"\x2\x893\x896\x3\x2\x2\x2\x894\x892\x3\x2\x2\x2\x894\x895\x3\x2\x2\x2"+
		"\x895\x897\x3\x2\x2\x2\x896\x894\x3\x2\x2\x2\x897\x898\a\xB4\x2\x2\x898"+
		"\xCF\x3\x2\x2\x2\x899\x89A\a\xB6\x2\x2\x89A\x89B\a\xD8\x2\x2\x89B\x89D"+
		"\x5\xC6\x64\x2\x89C\x89E\a\xD8\x2\x2\x89D\x89C\x3\x2\x2\x2\x89D\x89E\x3"+
		"\x2\x2\x2\x89E\x89F\x3\x2\x2\x2\x89F\x8A1\a\x5\x2\x2\x8A0\x8A2\a\xD8\x2"+
		"\x2\x8A1\x8A0\x3\x2\x2\x2\x8A1\x8A2\x3\x2\x2\x2\x8A2\x8A3\x3\x2\x2\x2"+
		"\x8A3\x8A4\x5\xC6\x64\x2\x8A4\xD1\x3\x2\x2\x2\x8A5\x8A6\a\xB7\x2\x2\x8A6"+
		"\x8A7\a\xD8\x2\x2\x8A7\x8A9\x5\xE2r\x2\x8A8\x8AA\a\xD6\x2\x2\x8A9\x8A8"+
		"\x3\x2\x2\x2\x8AA\x8AB\x3\x2\x2\x2\x8AB\x8A9\x3\x2\x2\x2\x8AB\x8AC\x3"+
		"\x2\x2\x2\x8AC\x8B3\x3\x2\x2\x2\x8AD\x8AF\x5\x1C\xF\x2\x8AE\x8B0\a\xD6"+
		"\x2\x2\x8AF\x8AE\x3\x2\x2\x2\x8B0\x8B1\x3\x2\x2\x2\x8B1\x8AF\x3\x2\x2"+
		"\x2\x8B1\x8B2\x3\x2\x2\x2\x8B2\x8B4\x3\x2\x2\x2\x8B3\x8AD\x3\x2\x2\x2"+
		"\x8B3\x8B4\x3\x2\x2\x2\x8B4\x8B5\x3\x2\x2\x2\x8B5\x8B6\a@\x2\x2\x8B6\xD3"+
		"\x3\x2\x2\x2\x8B7\x8B8\a\xB9\x2\x2\x8B8\x8B9\a\xD8\x2\x2\x8B9\x8BB\x5"+
		"\xC6\x64\x2\x8BA\x8BC\a\xD8\x2\x2\x8BB\x8BA\x3\x2\x2\x2\x8BB\x8BC\x3\x2"+
		"\x2\x2\x8BC\x8BD\x3\x2\x2\x2\x8BD\x8C2\a\x5\x2\x2\x8BE\x8C0\a\xD8\x2\x2"+
		"\x8BF\x8BE\x3\x2\x2\x2\x8BF\x8C0\x3\x2\x2\x2\x8C0\x8C1\x3\x2\x2\x2\x8C1"+
		"\x8C3\x5\x84\x43\x2\x8C2\x8BF\x3\x2\x2\x2\x8C2\x8C3\x3\x2\x2\x2\x8C3\xD5"+
		"\x3\x2\x2\x2\x8C4\x8C7\x5\xD8m\x2\x8C5\x8C7\x5\xDAn\x2\x8C6\x8C4\x3\x2"+
		"\x2\x2\x8C6\x8C5\x3\x2\x2\x2\x8C7\xD7\x3\x2\x2\x2\x8C8\x8C9\a\x1B\x2\x2"+
		"\x8C9\x8CA\a\xD8\x2\x2\x8CA\x8CC\x5\xFE\x80\x2\x8CB\x8CD\x5\x116\x8C\x2"+
		"\x8CC\x8CB\x3\x2\x2\x2\x8CC\x8CD\x3\x2\x2\x2\x8CD\x8DB\x3\x2\x2\x2\x8CE"+
		"\x8D0\a\xD8\x2\x2\x8CF\x8CE\x3\x2\x2\x2\x8CF\x8D0\x3\x2\x2\x2\x8D0\x8D1"+
		"\x3\x2\x2\x2\x8D1\x8D3\a\xC2\x2\x2\x8D2\x8D4\a\xD8\x2\x2\x8D3\x8D2\x3"+
		"\x2\x2\x2\x8D3\x8D4\x3\x2\x2\x2\x8D4\x8D5\x3\x2\x2\x2\x8D5\x8D7\x5\xEE"+
		"x\x2\x8D6\x8D8\a\xD8\x2\x2\x8D7\x8D6\x3\x2\x2\x2\x8D7\x8D8\x3\x2\x2\x2"+
		"\x8D8\x8D9\x3\x2\x2\x2\x8D9\x8DA\a\xCB\x2\x2\x8DA\x8DC\x3\x2\x2\x2\x8DB"+
		"\x8CF\x3\x2\x2\x2\x8DB\x8DC\x3\x2\x2\x2\x8DC\xD9\x3\x2\x2\x2\x8DD\x8DE"+
		"\a\x1B\x2\x2\x8DE\x8E0\a\xD8\x2\x2\x8DF\x8E1\x5\xE2r\x2\x8E0\x8DF\x3\x2"+
		"\x2\x2\x8E0\x8E1\x3\x2\x2\x2\x8E1\x8E2\x3\x2\x2\x2\x8E2\x8E3\a\x4\x2\x2"+
		"\x8E3\x8E5\x5\xFE\x80\x2\x8E4\x8E6\x5\x116\x8C\x2\x8E5\x8E4\x3\x2\x2\x2"+
		"\x8E5\x8E6\x3\x2\x2\x2\x8E6\x8F4\x3\x2\x2\x2\x8E7\x8E9\a\xD8\x2\x2\x8E8"+
		"\x8E7\x3\x2\x2\x2\x8E8\x8E9\x3\x2\x2\x2\x8E9\x8EA\x3\x2\x2\x2\x8EA\x8EC"+
		"\a\xC2\x2\x2\x8EB\x8ED\a\xD8\x2\x2\x8EC\x8EB\x3\x2\x2\x2\x8EC\x8ED\x3"+
		"\x2\x2\x2\x8ED\x8EE\x3\x2\x2\x2\x8EE\x8F0\x5\xEEx\x2\x8EF\x8F1\a\xD8\x2"+
		"\x2\x8F0\x8EF\x3\x2\x2\x2\x8F0\x8F1\x3\x2\x2\x2\x8F1\x8F2\x3\x2\x2\x2"+
		"\x8F2\x8F3\a\xCB\x2\x2\x8F3\x8F5\x3\x2\x2\x2\x8F4\x8E8\x3\x2\x2\x2\x8F4"+
		"\x8F5\x3\x2\x2\x2\x8F5\xDB\x3\x2\x2\x2\x8F6\x8F9\x5\xDEp\x2\x8F7\x8F9"+
		"\x5\xE0q\x2\x8F8\x8F6\x3\x2\x2\x2\x8F8\x8F7\x3\x2\x2\x2\x8F9\xDD\x3\x2"+
		"\x2\x2\x8FA\x8FD\x5\x104\x83\x2\x8FB\x8FC\a\xD8\x2\x2\x8FC\x8FE\x5\xEE"+
		"x\x2\x8FD\x8FB\x3\x2\x2\x2\x8FD\x8FE\x3\x2\x2\x2\x8FE\xDF\x3\x2\x2\x2"+
		"\x8FF\x901\x5\xE2r\x2\x900\x8FF\x3\x2\x2\x2\x900\x901\x3\x2\x2\x2\x901"+
		"\x902\x3\x2\x2\x2\x902\x903\t\r\x2\x2\x903\x905\x5\xFE\x80\x2\x904\x906"+
		"\x5\x116\x8C\x2\x905\x904\x3\x2\x2\x2\x905\x906\x3\x2\x2\x2\x906\x909"+
		"\x3\x2\x2\x2\x907\x908\a\xD8\x2\x2\x908\x90A\x5\xEEx\x2\x909\x907\x3\x2"+
		"\x2\x2\x909\x90A\x3\x2\x2\x2\x90A\x90C\x3\x2\x2\x2\x90B\x90D\x5\xF2z\x2"+
		"\x90C\x90B\x3\x2\x2\x2\x90C\x90D\x3\x2\x2\x2\x90D\xE1\x3\x2\x2\x2\x90E"+
		"\x913\x5\xE8u\x2\x90F\x913\x5\xE4s\x2\x910\x913\x5\xE6t\x2\x911\x913\x5"+
		"\xECw\x2\x912\x90E\x3\x2\x2\x2\x912\x90F\x3\x2\x2\x2\x912\x910\x3\x2\x2"+
		"\x2\x912\x911\x3\x2\x2\x2\x913\xE3\x3\x2\x2\x2\x914\x916\x5\xFE\x80\x2"+
		"\x915\x917\x5\x116\x8C\x2\x916\x915\x3\x2\x2\x2\x916\x917\x3\x2\x2\x2"+
		"\x917\x919\x3\x2\x2\x2\x918\x91A\x5\xF2z\x2\x919\x918\x3\x2\x2\x2\x919"+
		"\x91A\x3\x2\x2\x2\x91A\xE5\x3\x2\x2\x2\x91B\x91E\x5\xFE\x80\x2\x91C\x91E"+
		"\x5\x102\x82\x2\x91D\x91B\x3\x2\x2\x2\x91D\x91C\x3\x2\x2\x2\x91E\x920"+
		"\x3\x2\x2\x2\x91F\x921\x5\x116\x8C\x2\x920\x91F\x3\x2\x2\x2\x920\x921"+
		"\x3\x2\x2\x2\x921\x923\x3\x2\x2\x2\x922\x924\a\xD8\x2\x2\x923\x922\x3"+
		"\x2\x2\x2\x923\x924\x3\x2\x2\x2\x924\x925\x3\x2\x2\x2\x925\x927\a\xC2"+
		"\x2\x2\x926\x928\a\xD8\x2\x2\x927\x926\x3\x2\x2\x2\x927\x928\x3\x2\x2"+
		"\x2\x928\x92D\x3\x2\x2\x2\x929\x92B\x5\xEEx\x2\x92A\x92C\a\xD8\x2\x2\x92B"+
		"\x92A\x3\x2\x2\x2\x92B\x92C\x3\x2\x2\x2\x92C\x92E\x3\x2\x2\x2\x92D\x929"+
		"\x3\x2\x2\x2\x92D\x92E\x3\x2\x2\x2\x92E\x92F\x3\x2\x2\x2\x92F\x931\a\xCB"+
		"\x2\x2\x930\x932\x5\xF2z\x2\x931\x930\x3\x2\x2\x2\x931\x932\x3\x2\x2\x2"+
		"\x932\xE7\x3\x2\x2\x2\x933\x936\x5\xE4s\x2\x934\x936\x5\xE6t\x2\x935\x933"+
		"\x3\x2\x2\x2\x935\x934\x3\x2\x2\x2\x935\x936\x3\x2\x2\x2\x936\x938\x3"+
		"\x2\x2\x2\x937\x939\x5\xEAv\x2\x938\x937\x3\x2\x2\x2\x939\x93A\x3\x2\x2"+
		"\x2\x93A\x938\x3\x2\x2\x2\x93A\x93B\x3\x2\x2\x2\x93B\x93D\x3\x2\x2\x2"+
		"\x93C\x93E\x5\xF2z\x2\x93D\x93C\x3\x2\x2\x2\x93D\x93E\x3\x2\x2\x2\x93E"+
		"\xE9\x3\x2\x2\x2\x93F\x942\a\x4\x2\x2\x940\x943\x5\xE4s\x2\x941\x943\x5"+
		"\xE6t\x2\x942\x940\x3\x2\x2\x2\x942\x941\x3\x2\x2\x2\x943\xEB\x3\x2\x2"+
		"\x2\x944\x945\x5\xF2z\x2\x945\xED\x3\x2\x2\x2\x946\x948\x5\xF0y\x2\x947"+
		"\x946\x3\x2\x2\x2\x947\x948\x3\x2\x2\x2\x948\x94A\x3\x2\x2\x2\x949\x94B"+
		"\a\xD8\x2\x2\x94A\x949\x3\x2\x2\x2\x94A\x94B\x3\x2\x2\x2\x94B\x94C\x3"+
		"\x2\x2\x2\x94C\x94E\t\v\x2\x2\x94D\x94F\a\xD8\x2\x2\x94E\x94D\x3\x2\x2"+
		"\x2\x94E\x94F\x3\x2\x2\x2\x94F\x951\x3\x2\x2\x2\x950\x947\x3\x2\x2\x2"+
		"\x951\x954\x3\x2\x2\x2\x952\x950\x3\x2\x2\x2\x952\x953\x3\x2\x2\x2\x953"+
		"\x955\x3\x2\x2\x2\x954\x952\x3\x2\x2\x2\x955\x962\x5\xF0y\x2\x956\x958"+
		"\a\xD8\x2\x2\x957\x956\x3\x2\x2\x2\x957\x958\x3\x2\x2\x2\x958\x959\x3"+
		"\x2\x2\x2\x959\x95B\t\v\x2\x2\x95A\x95C\a\xD8\x2\x2\x95B\x95A\x3\x2\x2"+
		"\x2\x95B\x95C\x3\x2\x2\x2\x95C\x95E\x3\x2\x2\x2\x95D\x95F\x5\xF0y\x2\x95E"+
		"\x95D\x3\x2\x2\x2\x95E\x95F\x3\x2\x2\x2\x95F\x961\x3\x2\x2\x2\x960\x957"+
		"\x3\x2\x2\x2\x961\x964\x3\x2\x2\x2\x962\x960\x3\x2\x2\x2\x962\x963\x3"+
		"\x2\x2\x2\x963\xEF\x3\x2\x2\x2\x964\x962\x3\x2\x2\x2\x965\x966\t\xE\x2"+
		"\x2\x966\x968\a\xD8\x2\x2\x967\x965\x3\x2\x2\x2\x967\x968\x3\x2\x2\x2"+
		"\x968\x969\x3\x2\x2\x2\x969\x96A\x5\xC6\x64\x2\x96A\xF1\x3\x2\x2\x2\x96B"+
		"\x96C\a\n\x2\x2\x96C\x96E\x5\xFE\x80\x2\x96D\x96F\x5\x116\x8C\x2\x96E"+
		"\x96D\x3\x2\x2\x2\x96E\x96F\x3\x2\x2\x2\x96F\xF3\x3\x2\x2\x2\x970\x982"+
		"\a\xC2\x2\x2\x971\x973\a\xD8\x2\x2\x972\x971\x3\x2\x2\x2\x972\x973\x3"+
		"\x2\x2\x2\x973\x974\x3\x2\x2\x2\x974\x97F\x5\xF6|\x2\x975\x977\a\xD8\x2"+
		"\x2\x976\x975\x3\x2\x2\x2\x976\x977\x3\x2\x2\x2\x977\x978\x3\x2\x2\x2"+
		"\x978\x97A\a\x5\x2\x2\x979\x97B\a\xD8\x2\x2\x97A\x979\x3\x2\x2\x2\x97A"+
		"\x97B\x3\x2\x2\x2\x97B\x97C\x3\x2\x2\x2\x97C\x97E\x5\xF6|\x2\x97D\x976"+
		"\x3\x2\x2\x2\x97E\x981\x3\x2\x2\x2\x97F\x97D\x3\x2\x2\x2\x97F\x980\x3"+
		"\x2\x2\x2\x980\x983\x3\x2\x2\x2\x981\x97F\x3\x2\x2\x2\x982\x972\x3\x2"+
		"\x2\x2\x982\x983\x3\x2\x2\x2\x983\x985\x3\x2\x2\x2\x984\x986\a\xD8\x2"+
		"\x2\x985\x984\x3\x2\x2\x2\x985\x986\x3\x2\x2\x2\x986\x987\x3\x2\x2\x2"+
		"\x987\x988\a\xCB\x2\x2\x988\xF5\x3\x2\x2\x2\x989\x98A\a{\x2\x2\x98A\x98C"+
		"\a\xD8\x2\x2\x98B\x989\x3\x2\x2\x2\x98B\x98C\x3\x2\x2\x2\x98C\x98F\x3"+
		"\x2\x2\x2\x98D\x98E\t\xF\x2\x2\x98E\x990\a\xD8\x2\x2\x98F\x98D\x3\x2\x2"+
		"\x2\x98F\x990\x3\x2\x2\x2\x990\x993\x3\x2\x2\x2\x991\x992\a\x82\x2\x2"+
		"\x992\x994\a\xD8\x2\x2\x993\x991\x3\x2\x2\x2\x993\x994\x3\x2\x2\x2\x994"+
		"\x995\x3\x2\x2\x2\x995\x99E\x5\xFE\x80\x2\x996\x998\a\xD8\x2\x2\x997\x996"+
		"\x3\x2\x2\x2\x997\x998\x3\x2\x2\x2\x998\x999\x3\x2\x2\x2\x999\x99B\a\xC2"+
		"\x2\x2\x99A\x99C\a\xD8\x2\x2\x99B\x99A\x3\x2\x2\x2\x99B\x99C\x3\x2\x2"+
		"\x2\x99C\x99D\x3\x2\x2\x2\x99D\x99F\a\xCB\x2\x2\x99E\x997\x3\x2\x2\x2"+
		"\x99E\x99F\x3\x2\x2\x2\x99F\x9A2\x3\x2\x2\x2\x9A0\x9A1\a\xD8\x2\x2\x9A1"+
		"\x9A3\x5\x100\x81\x2\x9A2\x9A0\x3\x2\x2\x2\x9A2\x9A3\x3\x2\x2\x2\x9A3"+
		"\x9A8\x3\x2\x2\x2\x9A4\x9A6\a\xD8\x2\x2\x9A5\x9A4\x3\x2\x2\x2\x9A5\x9A6"+
		"\x3\x2\x2\x2\x9A6\x9A7\x3\x2\x2\x2\x9A7\x9A9\x5\xF8}\x2\x9A8\x9A5\x3\x2"+
		"\x2\x2\x9A8\x9A9\x3\x2\x2\x2\x9A9\xF7\x3\x2\x2\x2\x9AA\x9AC\a\xBE\x2\x2"+
		"\x9AB\x9AD\a\xD8\x2\x2\x9AC\x9AB\x3\x2\x2\x2\x9AC\x9AD\x3\x2\x2\x2\x9AD"+
		"\x9B0\x3\x2\x2\x2\x9AE\x9B1\x5\x112\x8A\x2\x9AF\x9B1\x5\xFE\x80\x2\x9B0"+
		"\x9AE\x3\x2\x2\x2\x9B0\x9AF\x3\x2\x2\x2\x9B1\xF9\x3\x2\x2\x2\x9B2\x9BD"+
		"\x5\xFC\x7F\x2\x9B3\x9B5\a\xD8\x2\x2\x9B4\x9B3\x3\x2\x2\x2\x9B4\x9B5\x3"+
		"\x2\x2\x2\x9B5\x9B6\x3\x2\x2\x2\x9B6\x9B8\a\x5\x2\x2\x9B7\x9B9\a\xD8\x2"+
		"\x2\x9B8\x9B7\x3\x2\x2\x2\x9B8\x9B9\x3\x2\x2\x2\x9B9\x9BA\x3\x2\x2\x2"+
		"\x9BA\x9BC\x5\xFC\x7F\x2\x9BB\x9B4\x3\x2\x2\x2\x9BC\x9BF\x3\x2\x2\x2\x9BD"+
		"\x9BB\x3\x2\x2\x2\x9BD\x9BE\x3\x2\x2\x2\x9BE\xFB\x3\x2\x2\x2\x9BF\x9BD"+
		"\x3\x2\x2\x2\x9C0\x9C1\x5\xC6\x64\x2\x9C1\x9C2\a\xD8\x2\x2\x9C2\x9C3\a"+
		"\xAB\x2\x2\x9C3\x9C4\a\xD8\x2\x2\x9C4\x9C6\x3\x2\x2\x2\x9C5\x9C0\x3\x2"+
		"\x2\x2\x9C5\x9C6\x3\x2\x2\x2\x9C6\x9C7\x3\x2\x2\x2\x9C7\x9C8\x5\xC6\x64"+
		"\x2\x9C8\xFD\x3\x2\x2\x2\x9C9\x9CC\a\xD4\x2\x2\x9CA\x9CC\x5\x11A\x8E\x2"+
		"\x9CB\x9C9\x3\x2\x2\x2\x9CB\x9CA\x3\x2\x2\x2\x9CC\x9CD\x3\x2\x2\x2\x9CD"+
		"\x9CB\x3\x2\x2\x2\x9CD\x9CE\x3\x2\x2\x2\x9CE\x9D8\x3\x2\x2\x2\x9CF\x9D2"+
		"\a\xCC\x2\x2\x9D0\x9D3\a\xD4\x2\x2\x9D1\x9D3\x5\x11A\x8E\x2\x9D2\x9D0"+
		"\x3\x2\x2\x2\x9D2\x9D1\x3\x2\x2\x2\x9D3\x9D4\x3\x2\x2\x2\x9D4\x9D2\x3"+
		"\x2\x2\x2\x9D4\x9D5\x3\x2\x2\x2\x9D5\x9D6\x3\x2\x2\x2\x9D6\x9D8\a\xCD"+
		"\x2\x2\x9D7\x9CB\x3\x2\x2\x2\x9D7\x9CF\x3\x2\x2\x2\x9D8\xFF\x3\x2\x2\x2"+
		"\x9D9\x9DA\a\x13\x2\x2\x9DA\x9DD\a\xD8\x2\x2\x9DB\x9DC\at\x2\x2\x9DC\x9DE"+
		"\a\xD8\x2\x2\x9DD\x9DB\x3\x2\x2\x2\x9DD\x9DE\x3\x2\x2\x2\x9DE\x9DF\x3"+
		"\x2\x2\x2\x9DF\x9E2\x5\x114\x8B\x2\x9E0\x9E1\a\xD8\x2\x2\x9E1\x9E3\x5"+
		"\x10A\x86\x2\x9E2\x9E0\x3\x2\x2\x2\x9E2\x9E3\x3\x2\x2\x2\x9E3\x101\x3"+
		"\x2\x2\x2\x9E4\x9E5\t\x10\x2\x2\x9E5\x103\x3\x2\x2\x2\x9E6\x9EB\a\xD4"+
		"\x2\x2\x9E7\x9EA\x5\x11A\x8E\x2\x9E8\x9EA\a\xD4\x2\x2\x9E9\x9E7\x3\x2"+
		"\x2\x2\x9E9\x9E8\x3\x2\x2\x2\x9EA\x9ED\x3\x2\x2\x2\x9EB\x9E9\x3\x2\x2"+
		"\x2\x9EB\x9EC\x3\x2\x2\x2\x9EC\x9F6\x3\x2\x2\x2\x9ED\x9EB\x3\x2\x2\x2"+
		"\x9EE\x9F1\x5\x11A\x8E\x2\x9EF\x9F2\x5\x11A\x8E\x2\x9F0\x9F2\a\xD4\x2"+
		"\x2\x9F1\x9EF\x3\x2\x2\x2\x9F1\x9F0\x3\x2\x2\x2\x9F2\x9F3\x3\x2\x2\x2"+
		"\x9F3\x9F1\x3\x2\x2\x2\x9F3\x9F4\x3\x2\x2\x2\x9F4\x9F6\x3\x2\x2\x2\x9F5"+
		"\x9E6\x3\x2\x2\x2\x9F5\x9EE\x3\x2\x2\x2\x9F6\x105\x3\x2\x2\x2\x9F7\x9F8"+
		"\t\x11\x2\x2\x9F8\x107\x3\x2\x2\x2\x9F9\x9FE\x5\xFE\x80\x2\x9FA\x9FB\t"+
		"\r\x2\x2\x9FB\x9FD\x5\xFE\x80\x2\x9FC\x9FA\x3\x2\x2\x2\x9FD\xA00\x3\x2"+
		"\x2\x2\x9FE\x9FC\x3\x2\x2\x2\x9FE\x9FF\x3\x2\x2\x2\x9FF\x109\x3\x2\x2"+
		"\x2\xA00\x9FE\x3\x2\x2\x2\xA01\xA03\a\xC6\x2\x2\xA02\xA04\a\xD8\x2\x2"+
		"\xA03\xA02\x3\x2\x2\x2\xA03\xA04\x3\x2\x2\x2\xA04\xA07\x3\x2\x2\x2\xA05"+
		"\xA08\a\xD1\x2\x2\xA06\xA08\x5\xFE\x80\x2\xA07\xA05\x3\x2\x2\x2\xA07\xA06"+
		"\x3\x2\x2\x2\xA08\x10B\x3\x2\x2\x2\xA09\xA12\x5\x104\x83\x2\xA0A\xA0C"+
		"\a\xD8\x2\x2\xA0B\xA0A\x3\x2\x2\x2\xA0B\xA0C\x3\x2\x2\x2\xA0C\xA0D\x3"+
		"\x2\x2\x2\xA0D\xA0F\a\xC4\x2\x2\xA0E\xA10\a\xD8\x2\x2\xA0F\xA0E\x3\x2"+
		"\x2\x2\xA0F\xA10\x3\x2\x2\x2\xA10\xA11\x3\x2\x2\x2\xA11\xA13\x5\x104\x83"+
		"\x2\xA12\xA0B\x3\x2\x2\x2\xA12\xA13\x3\x2\x2\x2\xA13\x10D\x3\x2\x2\x2"+
		"\xA14\xA15\x5\xFE\x80\x2\xA15\xA16\a\x6\x2\x2\xA16\xA17\a\xD8\x2\x2\xA17"+
		"\xA1A\x3\x2\x2\x2\xA18\xA1A\x5\x110\x89\x2\xA19\xA14\x3\x2\x2\x2\xA19"+
		"\xA18\x3\x2\x2\x2\xA1A\x10F\x3\x2\x2\x2\xA1B\xA1C\a\xD1\x2\x2\xA1C\xA1D"+
		"\a\xD8\x2\x2\xA1D\x111\x3\x2\x2\x2\xA1E\xA1F\t\x12\x2\x2\xA1F\x113\x3"+
		"\x2\x2\x2\xA20\xA23\x5\x102\x82\x2\xA21\xA23\x5\x108\x85\x2\xA22\xA20"+
		"\x3\x2\x2\x2\xA22\xA21\x3\x2\x2\x2\xA23\xA2C\x3\x2\x2\x2\xA24\xA26\a\xD8"+
		"\x2\x2\xA25\xA24\x3\x2\x2\x2\xA25\xA26\x3\x2\x2\x2\xA26\xA27\x3\x2\x2"+
		"\x2\xA27\xA29\a\xC2\x2\x2\xA28\xA2A\a\xD8\x2\x2\xA29\xA28\x3\x2\x2\x2"+
		"\xA29\xA2A\x3\x2\x2\x2\xA2A\xA2B\x3\x2\x2\x2\xA2B\xA2D\a\xCB\x2\x2\xA2C"+
		"\xA25\x3\x2\x2\x2\xA2C\xA2D\x3\x2\x2\x2\xA2D\x115\x3\x2\x2\x2\xA2E\xA2F"+
		"\t\x13\x2\x2\xA2F\x117\x3\x2\x2\x2\xA30\xA31\t\x14\x2\x2\xA31\x119\x3"+
		"\x2\x2\x2\xA32\xA33\t\x15\x2\x2\xA33\x11B\x3\x2\x2\x2\x1BA\x120\x125\x12C"+
		"\x12E\x131\x136\x13A\x13F\x143\x148\x14C\x151\x155\x161\x166\x16C\x170"+
		"\x174\x17D\x181\x187\x18C\x197\x1A0\x1A6\x1AB\x1B5\x1BD\x1C1\x1C5\x1C9"+
		"\x1CE\x1D2\x1D8\x1DB\x1E0\x1E6\x22B\x231\x235\x238\x248\x24C\x251\x254"+
		"\x259\x25F\x263\x268\x26D\x271\x274\x278\x27E\x282\x289\x28F\x29C\x29F"+
		"\x2A2\x2A6\x2AC\x2B0\x2B5\x2BC\x2C0\x2C4\x2C8\x2CB\x2D1\x2D7\x2D9\x2E4"+
		"\x2EA\x2EC\x2F4\x2FA\x302\x309\x311\x316\x31D\x321\x324\x329\x336\x33C"+
		"\x346\x34A\x354\x35D\x363\x365\x36A\x370\x374\x377\x37B\x386\x38B\x391"+
		"\x393\x398\x39D\x3A1\x3A7\x3AA\x3AE\x3B3\x3B9\x3BB\x3C3\x3C7\x3CA\x3CD"+
		"\x3D1\x3E8\x3EE\x3F2\x3F6\x400\x406\x408\x414\x41A\x41C\x422\x428\x42A"+
		"\x434\x438\x43D\x445\x449\x44D\x455\x459\x465\x469\x470\x472\x478\x47C"+
		"\x484\x488\x494\x49A\x49C\x4A6\x4AC\x4AE\x4B4\x4BA\x4BC\x4C0\x4C4\x4C8"+
		"\x4E0\x4EA\x4EE\x4F3\x4FE\x502\x507\x515\x519\x522\x526\x529\x52D\x531"+
		"\x534\x538\x53C\x53F\x543\x546\x54A\x54C\x551\x555\x559\x55D\x55F\x565"+
		"\x569\x56C\x571\x575\x57B\x57E\x582\x587\x58D\x58F\x596\x59A\x5A0\x5A3"+
		"\x5A8\x5AE\x5B0\x5B7\x5BB\x5C1\x5C4\x5C9\x5CF\x5D1\x5D9\x5DD\x5E0\x5E3"+
		"\x5E7\x5EF\x5F3\x5F7\x5F9\x5FC\x601\x607\x60B\x60F\x614\x619\x61D\x621"+
		"\x626\x62E\x630\x63C\x640\x648\x64C\x654\x658\x65C\x660\x664\x668\x670"+
		"\x674\x680\x685\x689\x691\x694\x699\x69F\x6A1\x6A7\x6A9\x6AE\x6B2\x6B8"+
		"\x6BC\x6C1\x6CA\x6CE\x6D3\x6D6\x6DC\x6E0\x6E3\x6E9\x6ED\x6F5\x6F9\x702"+
		"\x706\x70C\x70F\x714\x71A\x71C\x722\x726\x72D\x735\x73A\x741\x745\x748"+
		"\x74B\x74E\x752\x757\x760\x76A\x76E\x775\x777\x782\x786\x78C\x791\x79B"+
		"\x79F\x7A3\x7A8\x7AF\x7BD\x7C1\x7C6\x7CA\x7CF\x7D3\x7D8\x7DC\x7E1\x7E5"+
		"\x7EA\x7EE\x7F8\x7FC\x801\x805\x80A\x80E\x813\x817\x81C\x820\x825\x829"+
		"\x838\x83C\x841\x845\x84D\x84F\x855\x85A\x860\x864\x869\x86E\x872\x876"+
		"\x878\x87C\x87E\x881\x885\x88D\x894\x89D\x8A1\x8AB\x8B1\x8B3\x8BB\x8BF"+
		"\x8C2\x8C6\x8CC\x8CF\x8D3\x8D7\x8DB\x8E0\x8E5\x8E8\x8EC\x8F0\x8F4\x8F8"+
		"\x8FD\x900\x905\x909\x90C\x912\x916\x919\x91D\x920\x923\x927\x92B\x92D"+
		"\x931\x935\x93A\x93D\x942\x947\x94A\x94E\x952\x957\x95B\x95E\x962\x967"+
		"\x96E\x972\x976\x97A\x97F\x982\x985\x98B\x98F\x993\x997\x99B\x99E\x9A2"+
		"\x9A5\x9A8\x9AC\x9B0\x9B4\x9B8\x9BD\x9C5\x9CB\x9CD\x9D2\x9D4\x9D7\x9DD"+
		"\x9E2\x9E9\x9EB\x9F1\x9F3\x9F5\x9FE\xA03\xA07\xA0B\xA0F\xA12\xA19\xA22"+
		"\xA25\xA29\xA2C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing
