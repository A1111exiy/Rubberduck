//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Mathieu\Source\Repos\Rubberduck\Rubberduck.Parsing\VBA.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		T__8=1, T__7=2, T__6=3, T__5=4, T__4=5, T__3=6, T__2=7, T__1=8, T__0=9, 
		ACCESS=10, ADDRESSOF=11, ALIAS=12, AND=13, ATTRIBUTE=14, APPACTIVATE=15, 
		APPEND=16, AS=17, BEGIN=18, BEEP=19, BINARY=20, BOOLEAN=21, BYVAL=22, 
		BYREF=23, BYTE=24, CALL=25, CASE=26, CHDIR=27, CHDRIVE=28, CLASS=29, CLOSE=30, 
		COLLECTION=31, CONST=32, DATE=33, DECLARE=34, DEFBOOL=35, DEFBYTE=36, 
		DEFDATE=37, DEFDBL=38, DEFDEC=39, DEFCUR=40, DEFINT=41, DEFLNG=42, DEFOBJ=43, 
		DEFSNG=44, DEFSTR=45, DEFVAR=46, DELETESETTING=47, DIM=48, DO=49, DOUBLE=50, 
		EACH=51, ELSE=52, ELSEIF=53, END_ENUM=54, END_FUNCTION=55, END_IF=56, 
		END_PROPERTY=57, END_SELECT=58, END_SUB=59, END_TYPE=60, END_WITH=61, 
		END=62, ENUM=63, EQV=64, ERASE=65, ERROR=66, EVENT=67, EXIT_DO=68, EXIT_FOR=69, 
		EXIT_FUNCTION=70, EXIT_PROPERTY=71, EXIT_SUB=72, FALSE=73, FILECOPY=74, 
		FRIEND=75, FOR=76, FUNCTION=77, GET=78, GLOBAL=79, GOSUB=80, GOTO=81, 
		IF=82, IMP=83, IMPLEMENTS=84, IN=85, INPUT=86, IS=87, INTEGER=88, KILL=89, 
		LOAD=90, LOCK=91, LONG=92, LOOP=93, LEN=94, LET=95, LIB=96, LIKE=97, LINE_INPUT=98, 
		LOCK_READ=99, LOCK_WRITE=100, LOCK_READ_WRITE=101, LSET=102, MACRO_IF=103, 
		MACRO_ELSEIF=104, MACRO_ELSE=105, MACRO_END_IF=106, ME=107, MID=108, MKDIR=109, 
		MOD=110, NAME=111, NEXT=112, NEW=113, NOT=114, NOTHING=115, NULL=116, 
		ON=117, ON_ERROR=118, OPEN=119, OPTIONAL=120, OPTION_BASE=121, OPTION_EXPLICIT=122, 
		OPTION_COMPARE=123, OPTION_PRIVATE_MODULE=124, OR=125, OUTPUT=126, PARAMARRAY=127, 
		PRESERVE=128, PRINT=129, PRIVATE=130, PROPERTY_GET=131, PROPERTY_LET=132, 
		PROPERTY_SET=133, PUBLIC=134, PUT=135, RANDOM=136, RANDOMIZE=137, RAISEEVENT=138, 
		READ=139, READ_WRITE=140, REDIM=141, REM=142, RESET=143, RESUME=144, RETURN=145, 
		RMDIR=146, RSET=147, SAVEPICTURE=148, SAVESETTING=149, SEEK=150, SELECT=151, 
		SENDKEYS=152, SET=153, SETATTR=154, SHARED=155, SINGLE=156, SPC=157, STATIC=158, 
		STEP=159, STOP=160, STRING=161, SUB=162, TAB=163, TEXT=164, THEN=165, 
		TIME=166, TO=167, TRUE=168, TYPE=169, TYPEOF=170, UNLOAD=171, UNLOCK=172, 
		UNTIL=173, VARIANT=174, VERSION=175, WEND=176, WHILE=177, WIDTH=178, WITH=179, 
		WITHEVENTS=180, WRITE=181, XOR=182, AMPERSAND=183, ASSIGN=184, DIV=185, 
		EQ=186, GEQ=187, GT=188, LEQ=189, LPAREN=190, LT=191, MINUS=192, MINUS_EQ=193, 
		MULT=194, NEQ=195, PLUS=196, PLUS_EQ=197, POW=198, RPAREN=199, L_SQUARE_BRACKET=200, 
		R_SQUARE_BRACKET=201, STRINGLITERAL=202, DATELITERAL=203, COLORLITERAL=204, 
		INTEGERLITERAL=205, DOUBLELITERAL=206, FILENUMBER=207, IDENTIFIER=208, 
		LINE_CONTINUATION=209, NEWLINE=210, COMMENT=211, WS=212;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'%'", "'.'", "','", "':'", "'@'", "'#'", "';'", "'!'", "'$'", 
		"ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", "APPEND", 
		"AS", "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", 
		"CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "COLLECTION", "CONST", 
		"DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFDEC", 
		"DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR", "DEFVAR", 
		"DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", "END_ENUM", 
		"END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", "END_TYPE", 
		"END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", "EXIT_DO", 
		"EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", "FILECOPY", 
		"FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", "IF", "IMP", 
		"IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", "LOAD", "LOCK", 
		"LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", 
		"LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", 
		"MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT", "NEW", "NOT", 
		"NOTHING", "NULL", "ON", "ON_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", 
		"READ", "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RMDIR", 
		"RSET", "SAVEPICTURE", "SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", 
		"SETATTR", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", 
		"SUB", "TAB", "TEXT", "THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", 
		"WITH", "WITHEVENTS", "WRITE", "XOR", "'&'", "':='", "DIV", "'='", "'>='", 
		"'>'", "'<='", "'('", "'<'", "'-'", "'-='", "'*'", "'<>'", "'+'", "'+='", 
		"'^'", "')'", "'['", "']'", "STRINGLITERAL", "DATELITERAL", "COLORLITERAL", 
		"INTEGERLITERAL", "DOUBLELITERAL", "FILENUMBER", "IDENTIFIER", "LINE_CONTINUATION", 
		"NEWLINE", "COMMENT", "WS"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleDeclarations = 6, 
		RULE_moduleOption = 7, RULE_moduleDeclarationsElement = 8, RULE_moduleBody = 9, 
		RULE_moduleBodyElement = 10, RULE_moduleBlock = 11, RULE_attributeStmt = 12, 
		RULE_block = 13, RULE_blockStmt = 14, RULE_appactivateStmt = 15, RULE_beepStmt = 16, 
		RULE_chdirStmt = 17, RULE_chdriveStmt = 18, RULE_closeStmt = 19, RULE_constStmt = 20, 
		RULE_constSubStmt = 21, RULE_dateStmt = 22, RULE_declareStmt = 23, RULE_deftypeStmt = 24, 
		RULE_deleteSettingStmt = 25, RULE_doLoopStmt = 26, RULE_endStmt = 27, 
		RULE_enumerationStmt = 28, RULE_enumerationStmt_Constant = 29, RULE_eraseStmt = 30, 
		RULE_errorStmt = 31, RULE_eventStmt = 32, RULE_exitStmt = 33, RULE_filecopyStmt = 34, 
		RULE_forEachStmt = 35, RULE_forNextStmt = 36, RULE_functionStmt = 37, 
		RULE_getStmt = 38, RULE_goSubStmt = 39, RULE_goToStmt = 40, RULE_ifThenElseStmt = 41, 
		RULE_ifBlockStmt = 42, RULE_ifConditionStmt = 43, RULE_ifElseIfBlockStmt = 44, 
		RULE_ifElseBlockStmt = 45, RULE_implementsStmt = 46, RULE_inputStmt = 47, 
		RULE_killStmt = 48, RULE_letStmt = 49, RULE_lineInputStmt = 50, RULE_loadStmt = 51, 
		RULE_lockStmt = 52, RULE_lsetStmt = 53, RULE_macroIfThenElseStmt = 54, 
		RULE_macroIfBlockStmt = 55, RULE_macroElseIfBlockStmt = 56, RULE_macroElseBlockStmt = 57, 
		RULE_midStmt = 58, RULE_mkdirStmt = 59, RULE_nameStmt = 60, RULE_onErrorStmt = 61, 
		RULE_onGoToStmt = 62, RULE_onGoSubStmt = 63, RULE_openStmt = 64, RULE_outputList = 65, 
		RULE_outputList_Expression = 66, RULE_printStmt = 67, RULE_propertyGetStmt = 68, 
		RULE_propertySetStmt = 69, RULE_propertyLetStmt = 70, RULE_putStmt = 71, 
		RULE_raiseEventStmt = 72, RULE_randomizeStmt = 73, RULE_redimStmt = 74, 
		RULE_redimSubStmt = 75, RULE_resetStmt = 76, RULE_resumeStmt = 77, RULE_returnStmt = 78, 
		RULE_rmdirStmt = 79, RULE_rsetStmt = 80, RULE_savepictureStmt = 81, RULE_saveSettingStmt = 82, 
		RULE_seekStmt = 83, RULE_selectCaseStmt = 84, RULE_sC_Case = 85, RULE_sC_Cond = 86, 
		RULE_sendkeysStmt = 87, RULE_setattrStmt = 88, RULE_setStmt = 89, RULE_stopStmt = 90, 
		RULE_subStmt = 91, RULE_timeStmt = 92, RULE_typeStmt = 93, RULE_typeStmt_Element = 94, 
		RULE_typeOfStmt = 95, RULE_unloadStmt = 96, RULE_unlockStmt = 97, RULE_valueStmt = 98, 
		RULE_variableStmt = 99, RULE_variableListStmt = 100, RULE_variableSubStmt = 101, 
		RULE_whileWendStmt = 102, RULE_widthStmt = 103, RULE_withStmt = 104, RULE_writeStmt = 105, 
		RULE_explicitCallStmt = 106, RULE_eCS_ProcedureCall = 107, RULE_eCS_MemberProcedureCall = 108, 
		RULE_implicitCallStmt_InBlock = 109, RULE_iCS_B_ProcedureCall = 110, RULE_iCS_B_MemberProcedureCall = 111, 
		RULE_implicitCallStmt_InStmt = 112, RULE_iCS_S_VariableOrProcedureCall = 113, 
		RULE_iCS_S_ProcedureOrArrayCall = 114, RULE_iCS_S_MembersCall = 115, RULE_iCS_S_MemberCall = 116, 
		RULE_iCS_S_DictionaryCall = 117, RULE_argsCall = 118, RULE_argCall = 119, 
		RULE_dictionaryCallStmt = 120, RULE_argList = 121, RULE_arg = 122, RULE_argDefaultValue = 123, 
		RULE_subscripts = 124, RULE_subscript = 125, RULE_ambiguousIdentifier = 126, 
		RULE_asTypeClause = 127, RULE_baseType = 128, RULE_certainIdentifier = 129, 
		RULE_comparisonOperator = 130, RULE_complexType = 131, RULE_fieldLength = 132, 
		RULE_letterrange = 133, RULE_lineLabel = 134, RULE_literal = 135, RULE_type = 136, 
		RULE_typeHint = 137, RULE_visibility = 138, RULE_ambiguousKeyword = 139;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement", 
		"moduleBody", "moduleBodyElement", "moduleBlock", "attributeStmt", "block", 
		"blockStmt", "appactivateStmt", "beepStmt", "chdirStmt", "chdriveStmt", 
		"closeStmt", "constStmt", "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt", 
		"deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant", 
		"eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", 
		"forNextStmt", "functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt", 
		"ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
		"implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
		"loadStmt", "lockStmt", "lsetStmt", "macroIfThenElseStmt", "macroIfBlockStmt", 
		"macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt", "mkdirStmt", 
		"nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", "outputList", 
		"outputList_Expression", "printStmt", "propertyGetStmt", "propertySetStmt", 
		"propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
		"redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", "rmdirStmt", 
		"rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt", "selectCaseStmt", 
		"sC_Case", "sC_Cond", "sendkeysStmt", "setattrStmt", "setStmt", "stopStmt", 
		"subStmt", "timeStmt", "typeStmt", "typeStmt_Element", "typeOfStmt", "unloadStmt", 
		"unlockStmt", "valueStmt", "variableStmt", "variableListStmt", "variableSubStmt", 
		"whileWendStmt", "widthStmt", "withStmt", "writeStmt", "explicitCallStmt", 
		"eCS_ProcedureCall", "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
		"iCS_B_ProcedureCall", "iCS_B_MemberProcedureCall", "implicitCallStmt_InStmt", 
		"iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_MembersCall", 
		"iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", "argCall", "dictionaryCallStmt", 
		"argList", "arg", "argDefaultValue", "subscripts", "subscript", "ambiguousIdentifier", 
		"asTypeClause", "baseType", "certainIdentifier", "comparisonOperator", 
		"complexType", "fieldLength", "letterrange", "lineLabel", "literal", "type", 
		"typeHint", "visibility", "ambiguousKeyword"
	};

	public override string GrammarFileName { get { return "VBA.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; module();
			State = 281; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 283; Match(WS);
				}
				break;
			}
			State = 289;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 286; Match(NEWLINE);
					}
					} 
				}
				State = 291;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 298;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 292; moduleHeader();
				State = 294;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 293; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 296;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 301;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 300; moduleConfig();
				}
				break;
			}
			State = 306;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 303; Match(NEWLINE);
					}
					} 
				}
				State = 308;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 310;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 309; moduleAttributes();
				}
				break;
			}
			State = 315;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 312; Match(NEWLINE);
					}
					} 
				}
				State = 317;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 319;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 318; moduleBody();
				}
			}

			State = 324;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 321; Match(NEWLINE);
				}
				}
				State = 326;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 328;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 327; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(VERSION);
			State = 331; Match(WS);
			State = 332; Match(DOUBLELITERAL);
			State = 333; Match(WS);
			State = 334; Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(BEGIN);
			State = 338;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 337; Match(NEWLINE);
				}
				}
				State = 340;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 343;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 342; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 345;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 347; Match(END);
			State = 349;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 348; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 351;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(VBAParser.NEWLINE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; ambiguousIdentifier();
			State = 355;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 354; Match(WS);
				}
			}

			State = 357; Match(EQ);
			State = 359;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 358; Match(WS);
				}
			}

			State = 361; literal();
			State = 362; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 364; attributeStmt();
					State = 366;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 365; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 368;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 372;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 374; moduleDeclarationsElement();
				State = 376;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 375; Match(NEWLINE);
					}
					}
					State = 378;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				}
				State = 382;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleOption);
		int _la;
		try {
			State = 392;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 384; Match(OPTION_BASE);
				State = 385; Match(WS);
				State = 386; Match(INTEGERLITERAL);
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 387; Match(OPTION_COMPARE);
				State = 388; Match(WS);
				State = 389;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 390; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 391; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public ModuleBlockContext moduleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleDeclarationsElement);
		try {
			State = 401;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 394; moduleBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 395; declareStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 396; enumerationStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 397; eventStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 398; macroIfThenElseStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 399; moduleOption();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 400; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; moduleBodyElement();
			State = 412;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 405;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 404; Match(NEWLINE);
						}
						}
						State = 407;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 409; moduleBodyElement();
					}
					} 
				}
				State = 414;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public ModuleBlockContext moduleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleBodyElement);
		try {
			State = 422;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 415; moduleBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 416; functionStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 417; macroIfThenElseStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 418; propertyGetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 419; propertySetStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 420; propertyLetStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 421; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ModuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBlockContext moduleBlock() {
		ModuleBlockContext _localctx = new ModuleBlockContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_moduleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<LiteralContext> literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(ATTRIBUTE);
			State = 427; Match(WS);
			State = 428; implicitCallStmt_InStmt();
			State = 430;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 429; Match(WS);
				}
			}

			State = 432; Match(EQ);
			State = 434;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 433; Match(WS);
				}
			}

			State = 436; literal();
			State = 447;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 438;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 437; Match(WS);
						}
					}

					State = 440; Match(T__6);
					State = 442;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 441; Match(WS);
						}
					}

					State = 444; literal();
					}
					} 
				}
				State = 449;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 450; blockStmt();
			State = 462;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 452;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 451; Match(NEWLINE);
						}
						}
						State = 454;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 457;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 456; Match(WS);
						}
					}

					State = 459; blockStmt();
					}
					} 
				}
				State = 464;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public KillStmtContext killStmt() {
			return GetRuleContext<KillStmtContext>(0);
		}
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public SetattrStmtContext setattrStmt() {
			return GetRuleContext<SetattrStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public ChdriveStmtContext chdriveStmt() {
			return GetRuleContext<ChdriveStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public SendkeysStmtContext sendkeysStmt() {
			return GetRuleContext<SendkeysStmtContext>(0);
		}
		public DateStmtContext dateStmt() {
			return GetRuleContext<DateStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public RandomizeStmtContext randomizeStmt() {
			return GetRuleContext<RandomizeStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public DeftypeStmtContext deftypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public UnloadStmtContext unloadStmt() {
			return GetRuleContext<UnloadStmtContext>(0);
		}
		public MkdirStmtContext mkdirStmt() {
			return GetRuleContext<MkdirStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public LineLabelContext lineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public BeepStmtContext beepStmt() {
			return GetRuleContext<BeepStmtContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public AppactivateStmtContext appactivateStmt() {
			return GetRuleContext<AppactivateStmtContext>(0);
		}
		public ChdirStmtContext chdirStmt() {
			return GetRuleContext<ChdirStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public SavepictureStmtContext savepictureStmt() {
			return GetRuleContext<SavepictureStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public DeleteSettingStmtContext deleteSettingStmt() {
			return GetRuleContext<DeleteSettingStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public TimeStmtContext timeStmt() {
			return GetRuleContext<TimeStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public IfThenElseStmtContext ifThenElseStmt() {
			return GetRuleContext<IfThenElseStmtContext>(0);
		}
		public FilecopyStmtContext filecopyStmt() {
			return GetRuleContext<FilecopyStmtContext>(0);
		}
		public LoadStmtContext loadStmt() {
			return GetRuleContext<LoadStmtContext>(0);
		}
		public SaveSettingStmtContext saveSettingStmt() {
			return GetRuleContext<SaveSettingStmtContext>(0);
		}
		public RmdirStmtContext rmdirStmt() {
			return GetRuleContext<RmdirStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_blockStmt);
		try {
			State = 532;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 465; appactivateStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 466; attributeStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 467; beepStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 468; chdirStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 469; chdriveStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 470; closeStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 471; constStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 472; dateStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 473; deleteSettingStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 474; deftypeStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 475; doLoopStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 476; endStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 477; eraseStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 478; errorStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 479; exitStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 480; explicitCallStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 481; filecopyStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 482; forEachStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 483; forNextStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 484; getStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 485; goSubStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 486; goToStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 487; ifThenElseStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 488; implementsStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 489; implicitCallStmt_InBlock();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 490; inputStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 491; killStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 492; letStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 493; lineInputStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 494; lineLabel();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 495; loadStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 496; lockStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 497; lsetStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 498; macroIfThenElseStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 499; midStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 500; mkdirStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 501; nameStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 502; onErrorStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 503; onGoToStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 504; onGoSubStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 505; openStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 506; printStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 507; putStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 508; raiseEventStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 509; randomizeStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 510; redimStmt();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 511; resetStmt();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 512; resumeStmt();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 513; returnStmt();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 514; rmdirStmt();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 515; rsetStmt();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 516; savepictureStmt();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 517; saveSettingStmt();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 518; seekStmt();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 519; selectCaseStmt();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 520; sendkeysStmt();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 521; setattrStmt();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 522; setStmt();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 523; stopStmt();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 524; timeStmt();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 525; unloadStmt();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 526; unlockStmt();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 527; variableStmt();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 528; whileWendStmt();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 529; widthStmt();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 530; withStmt();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 531; writeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppactivateStmtContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public AppactivateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appactivateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAppactivateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAppactivateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppactivateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppactivateStmtContext appactivateStmt() {
		AppactivateStmtContext _localctx = new AppactivateStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_appactivateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534; Match(APPACTIVATE);
			State = 535; Match(WS);
			State = 536; valueStmt(0);
			State = 545;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 538;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 537; Match(WS);
					}
				}

				State = 540; Match(T__6);
				State = 542;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 541; Match(WS);
					}
				}

				State = 544; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepStmtContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public BeepStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBeepStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBeepStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeepStmtContext beepStmt() {
		BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_beepStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ChdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterChdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitChdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdirStmtContext chdirStmt() {
		ChdirStmtContext _localctx = new ChdirStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_chdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549; Match(CHDIR);
			State = 550; Match(WS);
			State = 551; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdriveStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ChdriveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdriveStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterChdriveStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitChdriveStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdriveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdriveStmtContext chdriveStmt() {
		ChdriveStmtContext _localctx = new ChdriveStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_chdriveStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553; Match(CHDRIVE);
			State = 554; Match(WS);
			State = 555; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; Match(CLOSE);
			State = 573;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 558; Match(WS);
				State = 559; valueStmt(0);
				State = 570;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 561;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 560; Match(WS);
							}
						}

						State = 563; Match(T__6);
						State = 565;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 564; Match(WS);
							}
						}

						State = 567; valueStmt(0);
						}
						} 
					}
					State = 572;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			_la = _input.La(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0)) {
				{
				State = 575; visibility();
				State = 576; Match(WS);
				}
			}

			State = 580; Match(CONST);
			State = 581; Match(WS);
			State = 582; constSubStmt();
			State = 593;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 584;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 583; Match(WS);
						}
					}

					State = 586; Match(T__6);
					State = 588;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 587; Match(WS);
						}
					}

					State = 590; constSubStmt();
					}
					} 
				}
				State = 595;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596; ambiguousIdentifier();
			State = 598;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 597; typeHint();
				}
			}

			State = 602;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 600; Match(WS);
				State = 601; asTypeClause();
				}
				break;
			}
			State = 605;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 604; Match(WS);
				}
			}

			State = 607; Match(EQ);
			State = 609;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 608; Match(WS);
				}
			}

			State = 611; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateStmtContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public DateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateStmtContext dateStmt() {
		DateStmtContext _localctx = new DateStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_dateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613; Match(DATE);
			State = 615;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 614; Match(WS);
				}
			}

			State = 617; Match(EQ);
			State = 619;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 618; Match(WS);
				}
			}

			State = 621; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			_la = _input.La(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0)) {
				{
				State = 623; visibility();
				State = 624; Match(WS);
				}
			}

			State = 628; Match(DECLARE);
			State = 629; Match(WS);
			State = 630;
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==SUB) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 631; Match(WS);
			State = 632; ambiguousIdentifier();
			State = 633; Match(WS);
			State = 634; Match(LIB);
			State = 635; Match(WS);
			State = 636; Match(STRINGLITERAL);
			State = 641;
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 637; Match(WS);
				State = 638; Match(ALIAS);
				State = 639; Match(WS);
				State = 640; Match(STRINGLITERAL);
				}
				break;
			}
			State = 647;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 644;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 643; Match(WS);
					}
				}

				State = 646; argList();
				}
				break;
			}
			State = 651;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 649; Match(WS);
				State = 650; asTypeClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public IReadOnlyList<LetterrangeContext> letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext deftypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 654; Match(WS);
			State = 655; letterrange();
			State = 666;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,58,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 657;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 656; Match(WS);
						}
					}

					State = 659; Match(T__6);
					State = 661;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 660; Match(WS);
						}
					}

					State = 663; letterrange();
					}
					} 
				}
				State = 668;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,58,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSettingStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSettingStmtContext deleteSettingStmt() {
		DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_deleteSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669; Match(DELETESETTING);
			State = 670; Match(WS);
			State = 671; valueStmt(0);
			State = 673;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 672; Match(WS);
				}
			}

			State = 675; Match(T__6);
			State = 677;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 676; Match(WS);
				}
			}

			State = 679; valueStmt(0);
			State = 688;
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				State = 681;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 680; Match(WS);
					}
				}

				State = 683; Match(T__6);
				State = 685;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 684; Match(WS);
					}
				}

				State = 687; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_doLoopStmt);
		int _la;
		try {
			State = 743;
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 690; Match(DO);
				State = 692;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 691; Match(NEWLINE);
					}
					}
					State = 694;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 702;
				switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
				case 1:
					{
					State = 696; block();
					State = 698;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 697; Match(NEWLINE);
						}
						}
						State = 700;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 704; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 705; Match(DO);
				State = 706; Match(WS);
				State = 707;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 708; Match(WS);
				State = 709; valueStmt(0);
				State = 711;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 710; Match(NEWLINE);
					}
					}
					State = 713;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 721;
				switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
				case 1:
					{
					State = 715; block();
					State = 717;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 716; Match(NEWLINE);
						}
						}
						State = 719;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 723; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 725; Match(DO);
				State = 727;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 726; Match(NEWLINE);
					}
					}
					State = 729;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				{
				State = 731; block();
				State = 733;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 732; Match(NEWLINE);
					}
					}
					State = 735;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				State = 737; Match(LOOP);
				State = 738; Match(WS);
				State = 739;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 740; Match(WS);
				State = 741; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			_la = _input.La(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0)) {
				{
				State = 747; visibility();
				State = 748; Match(WS);
				}
			}

			State = 752; Match(ENUM);
			State = 753; Match(WS);
			State = 754; ambiguousIdentifier();
			State = 756;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 755; Match(NEWLINE);
				}
				}
				State = 758;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 763;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 760; enumerationStmt_Constant();
				}
				}
				State = 765;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 766; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768; ambiguousIdentifier();
			State = 777;
			_la = _input.La(1);
			if (_la==EQ || _la==WS) {
				{
				State = 770;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 769; Match(WS);
					}
				}

				State = 772; Match(EQ);
				State = 774;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 773; Match(WS);
					}
				}

				State = 776; valueStmt(0);
				}
			}

			State = 780;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 779; Match(NEWLINE);
				}
				}
				State = 782;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_eraseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784; Match(ERASE);
			State = 785; Match(WS);
			State = 786; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 788; Match(ERROR);
			State = 789; Match(WS);
			State = 790; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			_la = _input.La(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0)) {
				{
				State = 792; visibility();
				State = 793; Match(WS);
				}
			}

			State = 797; Match(EVENT);
			State = 798; Match(WS);
			State = 799; ambiguousIdentifier();
			State = 801;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 800; Match(WS);
				}
			}

			State = 803; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			_la = _input.La(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (EXIT_DO - 68)) | (1L << (EXIT_FOR - 68)) | (1L << (EXIT_FUNCTION - 68)) | (1L << (EXIT_PROPERTY - 68)) | (1L << (EXIT_SUB - 68)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilecopyStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filecopyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFilecopyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFilecopyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilecopyStmtContext filecopyStmt() {
		FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_filecopyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807; Match(FILECOPY);
			State = 808; Match(WS);
			State = 809; valueStmt(0);
			State = 811;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 810; Match(WS);
				}
			}

			State = 813; Match(T__6);
			State = 815;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 814; Match(WS);
				}
			}

			State = 817; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819; Match(FOR);
			State = 820; Match(WS);
			State = 821; Match(EACH);
			State = 822; Match(WS);
			State = 823; ambiguousIdentifier();
			State = 825;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 824; typeHint();
				}
			}

			State = 827; Match(WS);
			State = 828; Match(IN);
			State = 829; Match(WS);
			State = 830; valueStmt(0);
			State = 832;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 831; Match(NEWLINE);
				}
				}
				State = 834;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 842;
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 836; block();
				State = 838;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 837; Match(NEWLINE);
					}
					}
					State = 840;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 844; Match(NEXT);
			State = 847;
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 845; Match(WS);
				State = 846; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849; Match(FOR);
			State = 850; Match(WS);
			State = 851; ambiguousIdentifier();
			State = 853;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 852; typeHint();
				}
			}

			State = 857;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 855; Match(WS);
				State = 856; asTypeClause();
				}
				break;
			}
			State = 860;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 859; Match(WS);
				}
			}

			State = 862; Match(EQ);
			State = 864;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 863; Match(WS);
				}
			}

			State = 866; valueStmt(0);
			State = 867; Match(WS);
			State = 868; Match(TO);
			State = 869; Match(WS);
			State = 870; valueStmt(0);
			State = 875;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 871; Match(WS);
				State = 872; Match(STEP);
				State = 873; Match(WS);
				State = 874; valueStmt(0);
				}
			}

			State = 878;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 877; Match(NEWLINE);
				}
				}
				State = 880;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 888;
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				State = 882; block();
				State = 884;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 883; Match(NEWLINE);
					}
					}
					State = 886;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 890; Match(NEXT);
			State = 893;
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				State = 891; Match(WS);
				State = 892; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898;
			_la = _input.La(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0)) {
				{
				State = 895; visibility();
				State = 896; Match(WS);
				}
			}

			State = 902;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 900; Match(STATIC);
				State = 901; Match(WS);
				}
			}

			State = 904; Match(FUNCTION);
			State = 905; Match(WS);
			State = 906; ambiguousIdentifier();
			State = 911;
			switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				State = 908;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 907; Match(WS);
					}
				}

				State = 910; argList();
				}
				break;
			}
			State = 915;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 913; Match(WS);
				State = 914; asTypeClause();
				}
			}

			State = 918;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 917; Match(NEWLINE);
				}
				}
				State = 920;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 928;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 922; block();
				State = 924;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 923; Match(NEWLINE);
					}
					}
					State = 926;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 930; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 932; Match(GET);
			State = 933; Match(WS);
			State = 934; valueStmt(0);
			State = 936;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 935; Match(WS);
				}
			}

			State = 938; Match(T__6);
			State = 940;
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				State = 939; Match(WS);
				}
				break;
			}
			State = 943;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
				{
				State = 942; valueStmt(0);
				}
			}

			State = 946;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 945; Match(WS);
				}
			}

			State = 948; Match(T__6);
			State = 950;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 949; Match(WS);
				}
			}

			State = 952; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954; Match(GOSUB);
			State = 955; Match(WS);
			State = 956; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 958; Match(GOTO);
			State = 959; Match(WS);
			State = 960; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStmtContext : ParserRuleContext {
		public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStmt; } }
	 
		public IfThenElseStmtContext() { }
		public virtual void CopyFrom(IfThenElseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockIfThenElseContext : IfThenElseStmtContext {
		public IfElseBlockStmtContext ifElseBlockStmt() {
			return GetRuleContext<IfElseBlockStmtContext>(0);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<IfElseIfBlockStmtContext> ifElseIfBlockStmt() {
			return GetRuleContexts<IfElseIfBlockStmtContext>();
		}
		public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i) {
			return GetRuleContext<IfElseIfBlockStmtContext>(i);
		}
		public IfBlockStmtContext ifBlockStmt() {
			return GetRuleContext<IfBlockStmtContext>(0);
		}
		public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineIfThenElseContext : IfThenElseStmtContext {
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStmtContext ifThenElseStmt() {
		IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_ifThenElseStmt);
		int _la;
		try {
			State = 987;
			switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
			case 1:
				_localctx = new InlineIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 962; Match(IF);
				State = 963; Match(WS);
				State = 964; ifConditionStmt();
				State = 965; Match(WS);
				State = 966; Match(THEN);
				State = 967; Match(WS);
				State = 968; blockStmt();
				State = 973;
				switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					State = 969; Match(WS);
					State = 970; Match(ELSE);
					State = 971; Match(WS);
					State = 972; blockStmt();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BlockIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 975; ifBlockStmt();
				State = 979;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 976; ifElseIfBlockStmt();
					}
					}
					State = 981;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 983;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 982; ifElseBlockStmt();
					}
				}

				State = 985; Match(END_IF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStmtContext ifBlockStmt() {
		IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_ifBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989; Match(IF);
			State = 990; Match(WS);
			State = 991; ifConditionStmt();
			State = 992; Match(WS);
			State = 993; Match(THEN);
			State = 995;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 994; Match(NEWLINE);
				}
				}
				State = 997;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1005;
			switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				State = 999; block();
				State = 1001;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1000; Match(NEWLINE);
					}
					}
					State = 1003;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfConditionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfConditionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionStmtContext ifConditionStmt() {
		IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_ifConditionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfBlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfBlockStmtContext ifElseIfBlockStmt() {
		IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_ifElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009; Match(ELSEIF);
			State = 1010; Match(WS);
			State = 1011; ifConditionStmt();
			State = 1012; Match(WS);
			State = 1013; Match(THEN);
			State = 1015;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1014; Match(NEWLINE);
				}
				}
				State = 1017;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1025;
			switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				State = 1019; block();
				State = 1021;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1020; Match(NEWLINE);
					}
					}
					State = 1023;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockStmtContext ifElseBlockStmt() {
		IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_ifElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1027; Match(ELSE);
			State = 1029;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1028; Match(NEWLINE);
				}
				}
				State = 1031;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1039;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1033; block();
				State = 1035;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1034; Match(NEWLINE);
					}
					}
					State = 1037;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1041; Match(IMPLEMENTS);
			State = 1042; Match(WS);
			State = 1043; ambiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1045; Match(INPUT);
			State = 1046; Match(WS);
			State = 1047; valueStmt(0);
			State = 1056;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1049;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1048; Match(WS);
						}
					}

					State = 1051; Match(T__6);
					State = 1053;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1052; Match(WS);
						}
					}

					State = 1055; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1058;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,126,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public KillStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterKillStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitKillStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStmtContext killStmt() {
		KillStmtContext _localctx = new KillStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_killStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1060; Match(KILL);
			State = 1061; Match(WS);
			State = 1062; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode PLUS_EQ() { return GetToken(VBAParser.PLUS_EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode MINUS_EQ() { return GetToken(VBAParser.MINUS_EQ, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1066;
			switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				State = 1064; Match(LET);
				State = 1065; Match(WS);
				}
				break;
			}
			State = 1068; implicitCallStmt_InStmt();
			State = 1070;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1069; Match(WS);
				}
			}

			State = 1072;
			_la = _input.La(1);
			if ( !(((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (EQ - 186)) | (1L << (MINUS_EQ - 186)) | (1L << (PLUS_EQ - 186)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1074;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1073; Match(WS);
				}
			}

			State = 1076; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1078; Match(LINE_INPUT);
			State = 1079; Match(WS);
			State = 1080; valueStmt(0);
			State = 1082;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1081; Match(WS);
				}
			}

			State = 1084; Match(T__6);
			State = 1086;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1085; Match(WS);
				}
			}

			State = 1088; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public LoadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLoadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLoadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStmtContext loadStmt() {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_loadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1090; Match(LOAD);
			State = 1091; Match(WS);
			State = 1092; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1094; Match(LOCK);
			State = 1095; Match(WS);
			State = 1096; valueStmt(0);
			State = 1111;
			switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				State = 1098;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1097; Match(WS);
					}
				}

				State = 1100; Match(T__6);
				State = 1102;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1101; Match(WS);
					}
				}

				State = 1104; valueStmt(0);
				State = 1109;
				switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
				case 1:
					{
					State = 1105; Match(WS);
					State = 1106; Match(TO);
					State = 1107; Match(WS);
					State = 1108; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113; Match(LSET);
			State = 1114; Match(WS);
			State = 1115; implicitCallStmt_InStmt();
			State = 1117;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1116; Match(WS);
				}
			}

			State = 1119; Match(EQ);
			State = 1121;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1120; Match(WS);
				}
			}

			State = 1123; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfThenElseStmtContext : ParserRuleContext {
		public MacroElseBlockStmtContext macroElseBlockStmt() {
			return GetRuleContext<MacroElseBlockStmtContext>(0);
		}
		public IReadOnlyList<MacroElseIfBlockStmtContext> macroElseIfBlockStmt() {
			return GetRuleContexts<MacroElseIfBlockStmtContext>();
		}
		public ITerminalNode MACRO_END_IF() { return GetToken(VBAParser.MACRO_END_IF, 0); }
		public MacroElseIfBlockStmtContext macroElseIfBlockStmt(int i) {
			return GetRuleContext<MacroElseIfBlockStmtContext>(i);
		}
		public MacroIfBlockStmtContext macroIfBlockStmt() {
			return GetRuleContext<MacroIfBlockStmtContext>(0);
		}
		public MacroIfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfThenElseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroIfThenElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroIfThenElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfThenElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfThenElseStmtContext macroIfThenElseStmt() {
		MacroIfThenElseStmtContext _localctx = new MacroIfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_macroIfThenElseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125; macroIfBlockStmt();
			State = 1129;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MACRO_ELSEIF) {
				{
				{
				State = 1126; macroElseIfBlockStmt();
				}
				}
				State = 1131;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1133;
			_la = _input.La(1);
			if (_la==MACRO_ELSE) {
				{
				State = 1132; macroElseBlockStmt();
				}
			}

			State = 1135; Match(MACRO_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfBlockStmtContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode MACRO_IF() { return GetToken(VBAParser.MACRO_IF, 0); }
		public MacroIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfBlockStmtContext macroIfBlockStmt() {
		MacroIfBlockStmtContext _localctx = new MacroIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_macroIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1137; Match(MACRO_IF);
			State = 1138; Match(WS);
			State = 1139; ifConditionStmt();
			State = 1140; Match(WS);
			State = 1141; Match(THEN);
			State = 1143;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1142; Match(NEWLINE);
				}
				}
				State = 1145;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1153;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1147; moduleBody();
				State = 1149;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1148; Match(NEWLINE);
					}
					}
					State = 1151;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseIfBlockStmtContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode MACRO_ELSEIF() { return GetToken(VBAParser.MACRO_ELSEIF, 0); }
		public MacroElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseIfBlockStmtContext macroElseIfBlockStmt() {
		MacroElseIfBlockStmtContext _localctx = new MacroElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_macroElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155; Match(MACRO_ELSEIF);
			State = 1156; Match(WS);
			State = 1157; ifConditionStmt();
			State = 1158; Match(WS);
			State = 1159; Match(THEN);
			State = 1161;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1160; Match(NEWLINE);
				}
				}
				State = 1163;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1171;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1165; moduleBody();
				State = 1167;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1166; Match(NEWLINE);
					}
					}
					State = 1169;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseBlockStmtContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode MACRO_ELSE() { return GetToken(VBAParser.MACRO_ELSE, 0); }
		public MacroElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseBlockStmtContext macroElseBlockStmt() {
		MacroElseBlockStmtContext _localctx = new MacroElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_macroElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1173; Match(MACRO_ELSE);
			State = 1175;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1174; Match(NEWLINE);
				}
				}
				State = 1177;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1185;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1179; moduleBody();
				State = 1181;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1180; Match(NEWLINE);
					}
					}
					State = 1183;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1187; Match(MID);
			State = 1189;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1188; Match(WS);
				}
			}

			State = 1191; Match(LPAREN);
			State = 1193;
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				State = 1192; Match(WS);
				}
				break;
			}
			State = 1195; argsCall();
			State = 1197;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1196; Match(WS);
				}
			}

			State = 1199; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MkdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public MkdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mkdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMkdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMkdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MkdirStmtContext mkdirStmt() {
		MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_mkdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1201; Match(MKDIR);
			State = 1202; Match(WS);
			State = 1203; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1205; Match(NAME);
			State = 1206; Match(WS);
			State = 1207; valueStmt(0);
			State = 1208; Match(WS);
			State = 1209; Match(AS);
			State = 1210; Match(WS);
			State = 1211; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_onErrorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1213; Match(ON_ERROR);
			State = 1214; Match(WS);
			State = 1221;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1215; Match(GOTO);
				State = 1216; Match(WS);
				State = 1217; valueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 1218; Match(RESUME);
				State = 1219; Match(WS);
				State = 1220; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1223; Match(ON);
			State = 1224; Match(WS);
			State = 1225; valueStmt(0);
			State = 1226; Match(WS);
			State = 1227; Match(GOTO);
			State = 1228; Match(WS);
			State = 1229; valueStmt(0);
			State = 1240;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,155,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1231;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1230; Match(WS);
						}
					}

					State = 1233; Match(T__6);
					State = 1235;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1234; Match(WS);
						}
					}

					State = 1237; valueStmt(0);
					}
					} 
				}
				State = 1242;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,155,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243; Match(ON);
			State = 1244; Match(WS);
			State = 1245; valueStmt(0);
			State = 1246; Match(WS);
			State = 1247; Match(GOSUB);
			State = 1248; Match(WS);
			State = 1249; valueStmt(0);
			State = 1260;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,158,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1251;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1250; Match(WS);
						}
					}

					State = 1253; Match(T__6);
					State = 1255;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1254; Match(WS);
						}
					}

					State = 1257; valueStmt(0);
					}
					} 
				}
				State = 1262;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,158,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1263; Match(OPEN);
			State = 1264; Match(WS);
			State = 1265; valueStmt(0);
			State = 1266; Match(WS);
			State = 1267; Match(FOR);
			State = 1268; Match(WS);
			State = 1269;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (INPUT - 86)) | (1L << (OUTPUT - 86)) | (1L << (RANDOM - 86)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1274;
			switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				State = 1270; Match(WS);
				State = 1271; Match(ACCESS);
				State = 1272; Match(WS);
				State = 1273;
				_la = _input.La(1);
				if ( !(((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (READ - 139)) | (1L << (READ_WRITE - 139)) | (1L << (WRITE - 139)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1278;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				State = 1276; Match(WS);
				State = 1277;
				_la = _input.La(1);
				if ( !(((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & ((1L << (LOCK_READ - 99)) | (1L << (LOCK_WRITE - 99)) | (1L << (LOCK_READ_WRITE - 99)) | (1L << (SHARED - 99)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1280; Match(WS);
			State = 1281; Match(AS);
			State = 1282; Match(WS);
			State = 1283; valueStmt(0);
			State = 1294;
			switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				State = 1284; Match(WS);
				State = 1285; Match(LEN);
				State = 1287;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1286; Match(WS);
					}
				}

				State = 1289; Match(EQ);
				State = 1291;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1290; Match(WS);
					}
				}

				State = 1293; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1329;
			switch ( Interpreter.AdaptivePredict(_input,173,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1296; outputList_Expression();
				State = 1309;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,167,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1298;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1297; Match(WS);
							}
						}

						State = 1300;
						_la = _input.La(1);
						if ( !(_la==T__6 || _la==T__2) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1302;
						switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
						case 1:
							{
							State = 1301; Match(WS);
							}
							break;
						}
						State = 1305;
						_la = _input.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
							{
							State = 1304; outputList_Expression();
							}
						}

						}
						} 
					}
					State = 1311;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,167,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1313;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
					{
					State = 1312; outputList_Expression();
					}
				}

				State = 1325;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1316;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1315; Match(WS);
							}
						}

						State = 1318;
						_la = _input.La(1);
						if ( !(_la==T__6 || _la==T__2) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1320;
						switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
						case 1:
							{
							State = 1319; Match(WS);
							}
							break;
						}
						State = 1323;
						_la = _input.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
							{
							State = 1322; outputList_Expression();
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1327;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,172,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_outputList_Expression);
		int _la;
		try {
			State = 1348;
			switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1331; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1332;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1346;
				switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
				case 1:
					{
					State = 1334;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1333; Match(WS);
						}
					}

					State = 1336; Match(LPAREN);
					State = 1338;
					switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
					case 1:
						{
						State = 1337; Match(WS);
						}
						break;
					}
					State = 1340; argsCall();
					State = 1342;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1341; Match(WS);
						}
					}

					State = 1344; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350; Match(PRINT);
			State = 1351; Match(WS);
			State = 1352; valueStmt(0);
			State = 1354;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1353; Match(WS);
				}
			}

			State = 1356; Match(T__6);
			State = 1361;
			switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				State = 1358;
				switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
				case 1:
					{
					State = 1357; Match(WS);
					}
					break;
				}
				State = 1360; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1366;
			_la = _input.La(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0)) {
				{
				State = 1363; visibility();
				State = 1364; Match(WS);
				}
			}

			State = 1370;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1368; Match(STATIC);
				State = 1369; Match(WS);
				}
			}

			State = 1372; Match(PROPERTY_GET);
			State = 1373; Match(WS);
			State = 1374; ambiguousIdentifier();
			State = 1379;
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 1376;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1375; Match(WS);
					}
				}

				State = 1378; argList();
				}
				break;
			}
			State = 1383;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1381; Match(WS);
				State = 1382; asTypeClause();
				}
			}

			State = 1386;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1385; Match(NEWLINE);
				}
				}
				State = 1388;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1396;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1390; block();
				State = 1392;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1391; Match(NEWLINE);
					}
					}
					State = 1394;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1398; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1403;
			_la = _input.La(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0)) {
				{
				State = 1400; visibility();
				State = 1401; Match(WS);
				}
			}

			State = 1407;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1405; Match(STATIC);
				State = 1406; Match(WS);
				}
			}

			State = 1409; Match(PROPERTY_SET);
			State = 1410; Match(WS);
			State = 1411; ambiguousIdentifier();
			State = 1416;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1413;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1412; Match(WS);
					}
				}

				State = 1415; argList();
				}
			}

			State = 1419;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1418; Match(NEWLINE);
				}
				}
				State = 1421;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1429;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1423; block();
				State = 1425;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1424; Match(NEWLINE);
					}
					}
					State = 1427;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1431; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1436;
			_la = _input.La(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0)) {
				{
				State = 1433; visibility();
				State = 1434; Match(WS);
				}
			}

			State = 1440;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1438; Match(STATIC);
				State = 1439; Match(WS);
				}
			}

			State = 1442; Match(PROPERTY_LET);
			State = 1443; Match(WS);
			State = 1444; ambiguousIdentifier();
			State = 1449;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1446;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1445; Match(WS);
					}
				}

				State = 1448; argList();
				}
			}

			State = 1452;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1451; Match(NEWLINE);
				}
				}
				State = 1454;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1462;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1456; block();
				State = 1458;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1457; Match(NEWLINE);
					}
					}
					State = 1460;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1464; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466; Match(PUT);
			State = 1467; Match(WS);
			State = 1468; valueStmt(0);
			State = 1470;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1469; Match(WS);
				}
			}

			State = 1472; Match(T__6);
			State = 1474;
			switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				State = 1473; Match(WS);
				}
				break;
			}
			State = 1477;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
				{
				State = 1476; valueStmt(0);
				}
			}

			State = 1480;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1479; Match(WS);
				}
			}

			State = 1482; Match(T__6);
			State = 1484;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1483; Match(WS);
				}
			}

			State = 1486; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1488; Match(RAISEEVENT);
			State = 1489; Match(WS);
			State = 1490; ambiguousIdentifier();
			State = 1505;
			switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				State = 1492;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1491; Match(WS);
					}
				}

				State = 1494; Match(LPAREN);
				State = 1496;
				switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
				case 1:
					{
					State = 1495; Match(WS);
					}
					break;
				}
				State = 1502;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__2) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (WS - 192)))) != 0)) {
					{
					State = 1498; argsCall();
					State = 1500;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1499; Match(WS);
						}
					}

					}
				}

				State = 1504; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizeStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRandomizeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRandomizeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizeStmtContext randomizeStmt() {
		RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_randomizeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1507; Match(RANDOMIZE);
			State = 1510;
			switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				State = 1508; Match(WS);
				State = 1509; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public IReadOnlyList<RedimSubStmtContext> redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1512; Match(REDIM);
			State = 1513; Match(WS);
			State = 1516;
			switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				State = 1514; Match(PRESERVE);
				State = 1515; Match(WS);
				}
				break;
			}
			State = 1518; redimSubStmt();
			State = 1529;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,218,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1520;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1519; Match(WS);
						}
					}

					State = 1522; Match(T__6);
					State = 1524;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1523; Match(WS);
						}
					}

					State = 1526; redimSubStmt();
					}
					} 
				}
				State = 1531;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,218,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1532; implicitCallStmt_InStmt();
			State = 1534;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1533; Match(WS);
				}
			}

			State = 1536; Match(LPAREN);
			State = 1538;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1537; Match(WS);
				}
			}

			State = 1540; subscripts();
			State = 1542;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1541; Match(WS);
				}
			}

			State = 1544; Match(RPAREN);
			State = 1547;
			switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				State = 1545; Match(WS);
				State = 1546; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1549; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1551; Match(RESUME);
			State = 1557;
			switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				State = 1552; Match(WS);
				State = 1555;
				switch ( Interpreter.AdaptivePredict(_input,223,_ctx) ) {
				case 1:
					{
					State = 1553; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1554; ambiguousIdentifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public RmdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRmdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRmdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmdirStmtContext rmdirStmt() {
		RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_rmdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1561; Match(RMDIR);
			State = 1562; Match(WS);
			State = 1563; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1565; Match(RSET);
			State = 1566; Match(WS);
			State = 1567; implicitCallStmt_InStmt();
			State = 1569;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1568; Match(WS);
				}
			}

			State = 1571; Match(EQ);
			State = 1573;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1572; Match(WS);
				}
			}

			State = 1575; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepictureStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepictureStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSavepictureStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSavepictureStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepictureStmtContext savepictureStmt() {
		SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_savepictureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1577; Match(SAVEPICTURE);
			State = 1578; Match(WS);
			State = 1579; valueStmt(0);
			State = 1581;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1580; Match(WS);
				}
			}

			State = 1583; Match(T__6);
			State = 1585;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1584; Match(WS);
				}
			}

			State = 1587; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveSettingStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveSettingStmtContext saveSettingStmt() {
		SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_saveSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1589; Match(SAVESETTING);
			State = 1590; Match(WS);
			State = 1591; valueStmt(0);
			State = 1593;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1592; Match(WS);
				}
			}

			State = 1595; Match(T__6);
			State = 1597;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1596; Match(WS);
				}
			}

			State = 1599; valueStmt(0);
			State = 1601;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1600; Match(WS);
				}
			}

			State = 1603; Match(T__6);
			State = 1605;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1604; Match(WS);
				}
			}

			State = 1607; valueStmt(0);
			State = 1609;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1608; Match(WS);
				}
			}

			State = 1611; Match(T__6);
			State = 1613;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1612; Match(WS);
				}
			}

			State = 1615; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1617; Match(SEEK);
			State = 1618; Match(WS);
			State = 1619; valueStmt(0);
			State = 1621;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1620; Match(WS);
				}
			}

			State = 1623; Match(T__6);
			State = 1625;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1624; Match(WS);
				}
			}

			State = 1627; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<SC_CaseContext> sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1629; Match(SELECT);
			State = 1630; Match(WS);
			State = 1631; Match(CASE);
			State = 1632; Match(WS);
			State = 1633; valueStmt(0);
			State = 1635;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1634; Match(NEWLINE);
				}
				}
				State = 1637;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1642;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1639; sC_Case();
				}
				}
				State = 1644;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1646;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1645; Match(WS);
				}
			}

			State = 1648; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_sC_Case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650; Match(CASE);
			State = 1651; Match(WS);
			State = 1652; sC_Cond();
			State = 1654;
			switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				State = 1653; Match(WS);
				}
				break;
			}
			State = 1670;
			switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				State = 1657;
				_la = _input.La(1);
				if (_la==T__5) {
					{
					State = 1656; Match(T__5);
					}
				}

				State = 1662;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 1659; Match(NEWLINE);
					}
					}
					State = 1664;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 1666;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1665; Match(NEWLINE);
					}
					}
					State = 1668;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1678;
			switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				State = 1672; block();
				State = 1674;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1673; Match(NEWLINE);
					}
					}
					State = 1676;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondToContext : SC_CondContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondToContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondValueContext : SC_CondContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondValueContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondIsContext : SC_CondContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public CaseCondIsContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1723;
			switch ( Interpreter.AdaptivePredict(_input,255,_ctx) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1680; Match(ELSE);
				}
				break;

			case 2:
				_localctx = new CaseCondIsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1681; Match(IS);
				State = 1683;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1682; Match(WS);
					}
				}

				State = 1685; comparisonOperator();
				State = 1687;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1686; Match(WS);
					}
				}

				State = 1689; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1691; valueStmt(0);
				State = 1702;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,251,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1693;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1692; Match(WS);
							}
						}

						State = 1695; Match(T__6);
						State = 1697;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1696; Match(WS);
							}
						}

						State = 1699; valueStmt(0);
						}
						} 
					}
					State = 1704;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,251,_ctx);
				}
				}
				break;

			case 4:
				_localctx = new CaseCondToContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1705; Match(INTEGERLITERAL);
				State = 1706; Match(WS);
				State = 1707; Match(TO);
				State = 1708; Match(WS);
				State = 1709; valueStmt(0);
				State = 1720;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,254,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1711;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1710; Match(WS);
							}
						}

						State = 1713; Match(T__6);
						State = 1715;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1714; Match(WS);
							}
						}

						State = 1717; valueStmt(0);
						}
						} 
					}
					State = 1722;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,254,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendkeysStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendkeysStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSendkeysStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSendkeysStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendkeysStmtContext sendkeysStmt() {
		SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_sendkeysStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1725; Match(SENDKEYS);
			State = 1726; Match(WS);
			State = 1727; valueStmt(0);
			State = 1736;
			switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				State = 1729;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1728; Match(WS);
					}
				}

				State = 1731; Match(T__6);
				State = 1733;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1732; Match(WS);
					}
				}

				State = 1735; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetattrStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SetattrStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setattrStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSetattrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSetattrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetattrStmtContext setattrStmt() {
		SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_setattrStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1738; Match(SETATTR);
			State = 1739; Match(WS);
			State = 1740; valueStmt(0);
			State = 1742;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1741; Match(WS);
				}
			}

			State = 1744; Match(T__6);
			State = 1746;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1745; Match(WS);
				}
			}

			State = 1748; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1750; Match(SET);
			State = 1751; Match(WS);
			State = 1752; implicitCallStmt_InStmt();
			State = 1754;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1753; Match(WS);
				}
			}

			State = 1756; Match(EQ);
			State = 1758;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1757; Match(WS);
				}
			}

			State = 1760; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1762; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1767;
			_la = _input.La(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0)) {
				{
				State = 1764; visibility();
				State = 1765; Match(WS);
				}
			}

			State = 1771;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1769; Match(STATIC);
				State = 1770; Match(WS);
				}
			}

			State = 1773; Match(SUB);
			State = 1774; Match(WS);
			State = 1775; ambiguousIdentifier();
			State = 1780;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1777;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1776; Match(WS);
					}
				}

				State = 1779; argList();
				}
			}

			State = 1783;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1782; Match(NEWLINE);
				}
				}
				State = 1785;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1793;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1787; block();
				State = 1789;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1788; Match(NEWLINE);
					}
					}
					State = 1791;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1795; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public TimeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTimeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTimeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStmtContext timeStmt() {
		TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_timeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1797; Match(TIME);
			State = 1799;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1798; Match(WS);
				}
			}

			State = 1801; Match(EQ);
			State = 1803;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1802; Match(WS);
				}
			}

			State = 1805; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1810;
			_la = _input.La(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0)) {
				{
				State = 1807; visibility();
				State = 1808; Match(WS);
				}
			}

			State = 1812; Match(TYPE);
			State = 1813; Match(WS);
			State = 1814; ambiguousIdentifier();
			State = 1816;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1815; Match(NEWLINE);
				}
				}
				State = 1818;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1823;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 1820; typeStmt_Element();
				}
				}
				State = 1825;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1826; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1828; ambiguousIdentifier();
			State = 1843;
			switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				State = 1830;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1829; Match(WS);
					}
				}

				State = 1832; Match(LPAREN);
				State = 1837;
				switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					State = 1834;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1833; Match(WS);
						}
					}

					State = 1836; subscripts();
					}
					break;
				}
				State = 1840;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1839; Match(WS);
					}
				}

				State = 1842; Match(RPAREN);
				}
				break;
			}
			State = 1847;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1845; Match(WS);
				State = 1846; asTypeClause();
				}
			}

			State = 1850;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1849; Match(NEWLINE);
				}
				}
				State = 1852;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeOfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeOfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfStmtContext typeOfStmt() {
		TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_typeOfStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1854; Match(TYPEOF);
			State = 1855; Match(WS);
			State = 1856; valueStmt(0);
			State = 1861;
			switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
			case 1:
				{
				State = 1857; Match(WS);
				State = 1858; Match(IS);
				State = 1859; Match(WS);
				State = 1860; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnloadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public UnloadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unloadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterUnloadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitUnloadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnloadStmtContext unloadStmt() {
		UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_unloadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1863; Match(UNLOAD);
			State = 1864; Match(WS);
			State = 1865; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1867; Match(UNLOCK);
			State = 1868; Match(WS);
			State = 1869; valueStmt(0);
			State = 1884;
			switch ( Interpreter.AdaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				State = 1871;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1870; Match(WS);
					}
				}

				State = 1873; Match(T__6);
				State = 1875;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1874; Match(WS);
					}
				}

				State = 1877; valueStmt(0);
				State = 1882;
				switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					State = 1878; Match(WS);
					State = 1879; Match(TO);
					State = 1880; Match(WS);
					State = 1881; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsDivContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMinusContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsMinusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGeqContext : ValueStmtContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsGeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsGeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsGeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLtContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLikeContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLikeContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLike(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNeqContext : ValueStmtContext {
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsNeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfStmtContext typeOfStmt() {
			return GetRuleContext<TypeOfStmtContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPlusContext : ValueStmtContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public VsPlusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public VsEqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIsContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsIsContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGtContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsGtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsGt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsGt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLeqContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 196;
		EnterRecursionRule(_localctx, 196, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1940;
			switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
			case 1:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1887; Match(NEW);
				State = 1888; Match(WS);
				State = 1889; valueStmt(28);
				}
				break;

			case 2:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1890; Match(ADDRESSOF);
				State = 1891; Match(WS);
				State = 1892; valueStmt(25);
				}
				break;

			case 3:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1893; implicitCallStmt_InStmt();
				State = 1895;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1894; Match(WS);
					}
				}

				State = 1897; Match(ASSIGN);
				State = 1899;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1898; Match(WS);
					}
				}

				State = 1901; valueStmt(24);
				}
				break;

			case 4:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1903; Match(MINUS);
				State = 1905;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1904; Match(WS);
					}
				}

				State = 1907; valueStmt(14);
				}
				break;

			case 5:
				{
				_localctx = new VsPlusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1908; Match(PLUS);
				State = 1910;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1909; Match(WS);
					}
				}

				State = 1912; valueStmt(13);
				}
				break;

			case 6:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1913; Match(NOT);
				State = 1914; Match(WS);
				State = 1915; valueStmt(1);
				}
				break;

			case 7:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1916; literal();
				}
				break;

			case 8:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1917; implicitCallStmt_InStmt();
				}
				break;

			case 9:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1918; Match(LPAREN);
				State = 1920;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1919; Match(WS);
					}
				}

				State = 1922; valueStmt(0);
				State = 1933;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__6 || _la==WS) {
					{
					{
					State = 1924;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1923; Match(WS);
						}
					}

					State = 1926; Match(T__6);
					State = 1928;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1927; Match(WS);
						}
					}

					State = 1930; valueStmt(0);
					}
					}
					State = 1935;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1936; Match(RPAREN);
				}
				break;

			case 10:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1938; typeOfStmt();
				}
				break;

			case 11:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1939; midStmt();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2100;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,325,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2098;
					switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
					case 1:
						{
						_localctx = new VsIsContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1942;
						if (!(Precpred(_ctx, 23))) throw new FailedPredicateException(this, "Precpred(_ctx, 23)");
						State = 1943; Match(WS);
						State = 1944; Match(IS);
						State = 1945; Match(WS);
						State = 1946; valueStmt(24);
						}
						break;

					case 2:
						{
						_localctx = new VsLikeContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1947;
						if (!(Precpred(_ctx, 22))) throw new FailedPredicateException(this, "Precpred(_ctx, 22)");
						State = 1948; Match(WS);
						State = 1949; Match(LIKE);
						State = 1950; Match(WS);
						State = 1951; valueStmt(23);
						}
						break;

					case 3:
						{
						_localctx = new VsGeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1952;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 1954;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1953; Match(WS);
							}
						}

						State = 1956; Match(GEQ);
						State = 1958;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1957; Match(WS);
							}
						}

						State = 1960; valueStmt(22);
						}
						break;

					case 4:
						{
						_localctx = new VsLeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1961;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 1963;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1962; Match(WS);
							}
						}

						State = 1965; Match(LEQ);
						State = 1967;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1966; Match(WS);
							}
						}

						State = 1969; valueStmt(21);
						}
						break;

					case 5:
						{
						_localctx = new VsGtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1970;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 1972;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1971; Match(WS);
							}
						}

						State = 1974; Match(GT);
						State = 1976;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1975; Match(WS);
							}
						}

						State = 1978; valueStmt(20);
						}
						break;

					case 6:
						{
						_localctx = new VsLtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1979;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 1981;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1980; Match(WS);
							}
						}

						State = 1983; Match(LT);
						State = 1985;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1984; Match(WS);
							}
						}

						State = 1987; valueStmt(19);
						}
						break;

					case 7:
						{
						_localctx = new VsNeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1988;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 1990;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1989; Match(WS);
							}
						}

						State = 1992; Match(NEQ);
						State = 1994;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1993; Match(WS);
							}
						}

						State = 1996; valueStmt(18);
						}
						break;

					case 8:
						{
						_localctx = new VsEqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1997;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 1999;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1998; Match(WS);
							}
						}

						State = 2001; Match(EQ);
						State = 2003;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2002; Match(WS);
							}
						}

						State = 2005; valueStmt(17);
						}
						break;

					case 9:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2006;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2007; Match(WS);
						State = 2008; Match(AMPERSAND);
						State = 2009; Match(WS);
						State = 2010; valueStmt(16);
						}
						break;

					case 10:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2011;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2013;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2012; Match(WS);
							}
						}

						State = 2015; Match(PLUS);
						State = 2017;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2016; Match(WS);
							}
						}

						State = 2019; valueStmt(13);
						}
						break;

					case 11:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2020;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2022;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2021; Match(WS);
							}
						}

						State = 2024; Match(MOD);
						State = 2026;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2025; Match(WS);
							}
						}

						State = 2028; valueStmt(12);
						}
						break;

					case 12:
						{
						_localctx = new VsDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2029;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2031;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2030; Match(WS);
							}
						}

						State = 2033; Match(DIV);
						State = 2035;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2034; Match(WS);
							}
						}

						State = 2037; valueStmt(11);
						}
						break;

					case 13:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2038;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2040;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2039; Match(WS);
							}
						}

						State = 2042; Match(MULT);
						State = 2044;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2043; Match(WS);
							}
						}

						State = 2046; valueStmt(10);
						}
						break;

					case 14:
						{
						_localctx = new VsMinusContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2047;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2049;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2048; Match(WS);
							}
						}

						State = 2051; Match(MINUS);
						State = 2053;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2052; Match(WS);
							}
						}

						State = 2055; valueStmt(9);
						}
						break;

					case 15:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2056;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2058;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2057; Match(WS);
							}
						}

						State = 2060; Match(POW);
						State = 2062;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2061; Match(WS);
							}
						}

						State = 2064; valueStmt(8);
						}
						break;

					case 16:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2065;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2066; Match(WS);
						State = 2067; Match(IMP);
						State = 2068; Match(WS);
						State = 2069; valueStmt(7);
						}
						break;

					case 17:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2070;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2071; Match(WS);
						State = 2072; Match(EQV);
						State = 2073; Match(WS);
						State = 2074; valueStmt(6);
						}
						break;

					case 18:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2075;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2077;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2076; Match(WS);
							}
						}

						State = 2079; Match(XOR);
						State = 2081;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2080; Match(WS);
							}
						}

						State = 2083; valueStmt(5);
						}
						break;

					case 19:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2084;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2086;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2085; Match(WS);
							}
						}

						State = 2088; Match(OR);
						State = 2090;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2089; Match(WS);
							}
						}

						State = 2092; valueStmt(4);
						}
						break;

					case 20:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2093;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2094; Match(WS);
						State = 2095; Match(AND);
						State = 2096; Match(WS);
						State = 2097; valueStmt(3);
						}
						break;
					}
					} 
				}
				State = 2102;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,325,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2106;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 2103; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 2104; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 2105; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2108; Match(WS);
			State = 2111;
			switch ( Interpreter.AdaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				State = 2109; Match(WITHEVENTS);
				State = 2110; Match(WS);
				}
				break;
			}
			State = 2113; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2115; variableSubStmt();
			State = 2126;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,330,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2117;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2116; Match(WS);
						}
					}

					State = 2119; Match(T__6);
					State = 2121;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2120; Match(WS);
						}
					}

					State = 2123; variableSubStmt();
					}
					} 
				}
				State = 2128;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,330,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2129; ambiguousIdentifier();
			State = 2147;
			switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				State = 2131;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2130; Match(WS);
					}
				}

				State = 2133; Match(LPAREN);
				State = 2135;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2134; Match(WS);
					}
				}

				State = 2141;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
					{
					State = 2137; subscripts();
					State = 2139;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2138; Match(WS);
						}
					}

					}
				}

				State = 2143; Match(RPAREN);
				State = 2145;
				switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
				case 1:
					{
					State = 2144; Match(WS);
					}
					break;
				}
				}
				break;
			}
			State = 2150;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 2149; typeHint();
				}
			}

			State = 2154;
			switch ( Interpreter.AdaptivePredict(_input,338,_ctx) ) {
			case 1:
				{
				State = 2152; Match(WS);
				State = 2153; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public IReadOnlyList<BlockContext> block() {
			return GetRuleContexts<BlockContext>();
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_whileWendStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2156; Match(WHILE);
			State = 2157; Match(WS);
			State = 2158; valueStmt(0);
			State = 2160;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2159; Match(NEWLINE);
				}
				}
				State = 2162;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2169;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,340,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2164; block();
					State = 2165; Match(NEWLINE);
					}
					} 
				}
				State = 2171;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,340,_ctx);
			}
			State = 2172; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2174; Match(WIDTH);
			State = 2175; Match(WS);
			State = 2176; valueStmt(0);
			State = 2178;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2177; Match(WS);
				}
			}

			State = 2180; Match(T__6);
			State = 2182;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2181; Match(WS);
				}
			}

			State = 2184; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_withStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2186; Match(WITH);
			State = 2187; Match(WS);
			State = 2188; implicitCallStmt_InStmt();
			State = 2190;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2189; Match(NEWLINE);
				}
				}
				State = 2192;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2200;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 2194; block();
				State = 2196;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2195; Match(NEWLINE);
					}
					}
					State = 2198;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 2202; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2204; Match(WRITE);
			State = 2205; Match(WS);
			State = 2206; valueStmt(0);
			State = 2208;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2207; Match(WS);
				}
			}

			State = 2210; Match(T__6);
			State = 2215;
			switch ( Interpreter.AdaptivePredict(_input,348,_ctx) ) {
			case 1:
				{
				State = 2212;
				switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
				case 1:
					{
					State = 2211; Match(WS);
					}
					break;
				}
				State = 2214; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ECS_ProcedureCallContext eCS_ProcedureCall() {
			return GetRuleContext<ECS_ProcedureCallContext>(0);
		}
		public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
			return GetRuleContext<ECS_MemberProcedureCallContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_explicitCallStmt);
		try {
			State = 2219;
			switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2217; eCS_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2218; eCS_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_ProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_ProcedureCallContext eCS_ProcedureCall() {
		ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_eCS_ProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2221; Match(CALL);
			State = 2222; Match(WS);
			State = 2223; ambiguousIdentifier();
			State = 2225;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 2224; typeHint();
				}
			}

			State = 2240;
			switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
			case 1:
				{
				State = 2228;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2227; Match(WS);
					}
				}

				State = 2230; Match(LPAREN);
				State = 2232;
				switch ( Interpreter.AdaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					State = 2231; Match(WS);
					}
					break;
				}
				State = 2234; argsCall();
				State = 2236;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2235; Match(WS);
					}
				}

				State = 2238; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_MemberProcedureCallContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
		ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_eCS_MemberProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2242; Match(CALL);
			State = 2243; Match(WS);
			State = 2245;
			switch ( Interpreter.AdaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				State = 2244; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2247; Match(T__7);
			State = 2248; ambiguousIdentifier();
			State = 2250;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 2249; typeHint();
				}
			}

			State = 2265;
			switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
			case 1:
				{
				State = 2253;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2252; Match(WS);
					}
				}

				State = 2255; Match(LPAREN);
				State = 2257;
				switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
				case 1:
					{
					State = 2256; Match(WS);
					}
					break;
				}
				State = 2259; argsCall();
				State = 2261;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2260; Match(WS);
					}
				}

				State = 2263; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_implicitCallStmt_InBlock);
		try {
			State = 2269;
			switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2267; iCS_B_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2268; iCS_B_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public CertainIdentifierContext certainIdentifier() {
			return GetRuleContext<CertainIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_iCS_B_ProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2271; certainIdentifier();
			State = 2274;
			switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				State = 2272; Match(WS);
				State = 2273; argsCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_iCS_B_MemberProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2277;
			switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				State = 2276; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2279; Match(T__7);
			State = 2280; ambiguousIdentifier();
			State = 2282;
			switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
			case 1:
				{
				State = 2281; typeHint();
				}
				break;
			}
			State = 2286;
			switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				State = 2284; Match(WS);
				State = 2285; argsCall();
				}
				break;
			}
			State = 2289;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 2288; dictionaryCallStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_implicitCallStmt_InStmt);
		try {
			State = 2295;
			switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2291; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2292; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2293; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2294; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_iCS_S_VariableOrProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2297; ambiguousIdentifier();
			State = 2299;
			switch ( Interpreter.AdaptivePredict(_input,368,_ctx) ) {
			case 1:
				{
				State = 2298; typeHint();
				}
				break;
			}
			State = 2302;
			switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				State = 2301; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2306;
			switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				State = 2304; ambiguousIdentifier();
				}
				break;

			case 2:
				{
				State = 2305; baseType();
				}
				break;
			}
			State = 2309;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 2308; typeHint();
				}
			}

			State = 2312;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2311; Match(WS);
				}
			}

			State = 2314; Match(LPAREN);
			State = 2316;
			switch ( Interpreter.AdaptivePredict(_input,373,_ctx) ) {
			case 1:
				{
				State = 2315; Match(WS);
				}
				break;
			}
			State = 2322;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__2) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (WS - 192)))) != 0)) {
				{
				State = 2318; argsCall();
				State = 2320;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2319; Match(WS);
					}
				}

				}
			}

			State = 2324; Match(RPAREN);
			State = 2326;
			switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				State = 2325; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_iCS_S_MembersCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2330;
			switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				State = 2328; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2329; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2333;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2332; iCS_S_MemberCall();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2335;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,378,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2338;
			switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				State = 2337; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_iCS_S_MemberCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2340; Match(T__7);
			State = 2343;
			switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				State = 2341; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2342; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_iCS_S_DictionaryCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2345; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ArgCallContext> argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2359;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,384,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2348;
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
						{
						State = 2347; argCall();
						}
					}

					State = 2351;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2350; Match(WS);
						}
					}

					State = 2353;
					_la = _input.La(1);
					if ( !(_la==T__6 || _la==T__2) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2355;
					switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
					case 1:
						{
						State = 2354; Match(WS);
						}
						break;
					}
					}
					} 
				}
				State = 2361;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,384,_ctx);
			}
			State = 2362; argCall();
			State = 2375;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,388,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2364;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2363; Match(WS);
						}
					}

					State = 2366;
					_la = _input.La(1);
					if ( !(_la==T__6 || _la==T__2) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2368;
					switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
					case 1:
						{
						State = 2367; Match(WS);
						}
						break;
					}
					State = 2371;
					switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
					case 1:
						{
						State = 2370; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2377;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,388,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2380;
			switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				State = 2378;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2379; Match(WS);
				}
				break;
			}
			State = 2382; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_dictionaryCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2384; Match(T__1);
			State = 2385; ambiguousIdentifier();
			State = 2387;
			switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				State = 2386; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2389; Match(LPAREN);
			State = 2407;
			switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				State = 2391;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2390; Match(WS);
					}
				}

				State = 2393; arg();
				State = 2404;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,394,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2395;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2394; Match(WS);
							}
						}

						State = 2397; Match(T__6);
						State = 2399;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2398; Match(WS);
							}
						}

						State = 2401; arg();
						}
						} 
					}
					State = 2406;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,394,_ctx);
				}
				}
				break;
			}
			State = 2410;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2409; Match(WS);
				}
			}

			State = 2412; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2416;
			switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				State = 2414; Match(OPTIONAL);
				State = 2415; Match(WS);
				}
				break;
			}
			State = 2420;
			switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				State = 2418;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2419; Match(WS);
				}
				break;
			}
			State = 2424;
			switch ( Interpreter.AdaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				State = 2422; Match(PARAMARRAY);
				State = 2423; Match(WS);
				}
				break;
			}
			State = 2426; ambiguousIdentifier();
			State = 2435;
			switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				State = 2428;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2427; Match(WS);
					}
				}

				State = 2430; Match(LPAREN);
				State = 2432;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2431; Match(WS);
					}
				}

				State = 2434; Match(RPAREN);
				}
				break;
			}
			State = 2439;
			switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				State = 2437; Match(WS);
				State = 2438; asTypeClause();
				}
				break;
			}
			State = 2445;
			switch ( Interpreter.AdaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				State = 2442;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2441; Match(WS);
					}
				}

				State = 2444; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_argDefaultValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2447; Match(EQ);
			State = 2449;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2448; Match(WS);
				}
			}

			State = 2453;
			switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				State = 2451; literal();
				}
				break;

			case 2:
				{
				State = 2452; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2455; subscript();
			State = 2466;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,410,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2457;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2456; Match(WS);
						}
					}

					State = 2459; Match(T__6);
					State = 2461;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2460; Match(WS);
						}
					}

					State = 2463; subscript();
					}
					} 
				}
				State = 2468;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,410,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2474;
			switch ( Interpreter.AdaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				State = 2469; valueStmt(0);
				State = 2470; Match(WS);
				State = 2471; Match(TO);
				State = 2472; Match(WS);
				}
				break;
			}
			State = 2476; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousIdentifierContext : ParserRuleContext {
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBAParser.IDENTIFIER, i);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousIdentifierContext ambiguousIdentifier() {
		AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_ambiguousIdentifier);
		int _la;
		try {
			int _alt;
			State = 2492;
			switch (_input.La(1)) {
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2480;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2480;
						switch (_input.La(1)) {
						case IDENTIFIER:
							{
							State = 2478; Match(IDENTIFIER);
							}
							break;
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2479; ambiguousKeyword();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2482;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,413,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2484; Match(L_SQUARE_BRACKET);
				State = 2487;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 2487;
					switch (_input.La(1)) {
					case IDENTIFIER:
						{
						State = 2485; Match(IDENTIFIER);
						}
						break;
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2486; ambiguousKeyword();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2489;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER );
				State = 2491; Match(R_SQUARE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_asTypeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2494; Match(AS);
			State = 2495; Match(WS);
			State = 2498;
			switch ( Interpreter.AdaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				State = 2496; Match(NEW);
				State = 2497; Match(WS);
				}
				break;
			}
			State = 2500; type();
			State = 2503;
			switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				State = 2501; Match(WS);
				State = 2502; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2505;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || _la==INTEGER || _la==LONG || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (SINGLE - 156)) | (1L << (STRING - 156)) | (1L << (VARIANT - 156)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CertainIdentifierContext : ParserRuleContext {
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBAParser.IDENTIFIER, i);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_certainIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCertainIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCertainIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CertainIdentifierContext certainIdentifier() {
		CertainIdentifierContext _localctx = new CertainIdentifierContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_certainIdentifier);
		int _la;
		try {
			State = 2522;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2507; Match(IDENTIFIER);
				State = 2512;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER) {
					{
					State = 2510;
					switch (_input.La(1)) {
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2508; ambiguousKeyword();
						}
						break;
					case IDENTIFIER:
						{
						State = 2509; Match(IDENTIFIER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2514;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2515; ambiguousKeyword();
				State = 2518;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 2518;
					switch (_input.La(1)) {
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2516; ambiguousKeyword();
						}
						break;
					case IDENTIFIER:
						{
						State = 2517; Match(IDENTIFIER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2520;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2524;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (EQ - 186)) | (1L << (GEQ - 186)) | (1L << (GT - 186)) | (1L << (LEQ - 186)) | (1L << (LT - 186)) | (1L << (NEQ - 186)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_complexType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2526; ambiguousIdentifier();
			State = 2531;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,424,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2527; Match(T__7);
					State = 2528; ambiguousIdentifier();
					}
					} 
				}
				State = 2533;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,424,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2534; Match(MULT);
			State = 2536;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2535; Match(WS);
				}
			}

			State = 2540;
			switch (_input.La(1)) {
			case INTEGERLITERAL:
				{
				State = 2538; Match(INTEGERLITERAL);
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				{
				State = 2539; ambiguousIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public IReadOnlyList<CertainIdentifierContext> certainIdentifier() {
			return GetRuleContexts<CertainIdentifierContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public CertainIdentifierContext certainIdentifier(int i) {
			return GetRuleContext<CertainIdentifierContext>(i);
		}
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2542; certainIdentifier();
			State = 2551;
			switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				State = 2544;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2543; Match(WS);
					}
				}

				State = 2546; Match(MINUS);
				State = 2548;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2547; Match(WS);
					}
				}

				State = 2550; certainIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_lineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2553; ambiguousIdentifier();
			State = 2554; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode FILENUMBER() { return GetToken(VBAParser.FILENUMBER, 0); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
		public ITerminalNode COLORLITERAL() { return GetToken(VBAParser.COLORLITERAL, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2556;
			_la = _input.La(1);
			if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (FALSE - 73)) | (1L << (NOTHING - 73)) | (1L << (NULL - 73)))) != 0) || ((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (TRUE - 168)) | (1L << (STRINGLITERAL - 168)) | (1L << (DATELITERAL - 168)) | (1L << (COLORLITERAL - 168)) | (1L << (INTEGERLITERAL - 168)) | (1L << (DOUBLELITERAL - 168)) | (1L << (FILENUMBER - 168)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2560;
			switch ( Interpreter.AdaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				State = 2558; baseType();
				}
				break;

			case 2:
				{
				State = 2559; complexType();
				}
				break;
			}
			State = 2570;
			switch ( Interpreter.AdaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				State = 2563;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2562; Match(WS);
					}
				}

				State = 2565; Match(LPAREN);
				State = 2567;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2566; Match(WS);
					}
				}

				State = 2569; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2572;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2574;
			_la = _input.La(1);
			if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousKeywordContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousKeywordContext ambiguousKeyword() {
		AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_ambiguousKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2576;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 98: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 23);

		case 1: return Precpred(_ctx, 22);

		case 2: return Precpred(_ctx, 21);

		case 3: return Precpred(_ctx, 20);

		case 4: return Precpred(_ctx, 19);

		case 5: return Precpred(_ctx, 18);

		case 6: return Precpred(_ctx, 17);

		case 7: return Precpred(_ctx, 16);

		case 8: return Precpred(_ctx, 15);

		case 9: return Precpred(_ctx, 12);

		case 10: return Precpred(_ctx, 11);

		case 11: return Precpred(_ctx, 10);

		case 12: return Precpred(_ctx, 9);

		case 13: return Precpred(_ctx, 8);

		case 14: return Precpred(_ctx, 7);

		case 15: return Precpred(_ctx, 6);

		case 17: return Precpred(_ctx, 4);

		case 16: return Precpred(_ctx, 5);

		case 19: return Precpred(_ctx, 2);

		case 18: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xD6\xA15\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x11F\n\x3\x3\x3\a\x3\x122\n\x3\f"+
		"\x3\xE\x3\x125\v\x3\x3\x3\x3\x3\x6\x3\x129\n\x3\r\x3\xE\x3\x12A\x5\x3"+
		"\x12D\n\x3\x3\x3\x5\x3\x130\n\x3\x3\x3\a\x3\x133\n\x3\f\x3\xE\x3\x136"+
		"\v\x3\x3\x3\x5\x3\x139\n\x3\x3\x3\a\x3\x13C\n\x3\f\x3\xE\x3\x13F\v\x3"+
		"\x3\x3\x5\x3\x142\n\x3\x3\x3\a\x3\x145\n\x3\f\x3\xE\x3\x148\v\x3\x3\x3"+
		"\x5\x3\x14B\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x6\x5"+
		"\x155\n\x5\r\x5\xE\x5\x156\x3\x5\x6\x5\x15A\n\x5\r\x5\xE\x5\x15B\x3\x5"+
		"\x3\x5\x6\x5\x160\n\x5\r\x5\xE\x5\x161\x3\x6\x3\x6\x5\x6\x166\n\x6\x3"+
		"\x6\x3\x6\x5\x6\x16A\n\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x6\a\x171\n\a\r"+
		"\a\xE\a\x172\x6\a\x175\n\a\r\a\xE\a\x176\x3\b\x3\b\x6\b\x17B\n\b\r\b\xE"+
		"\b\x17C\x6\b\x17F\n\b\r\b\xE\b\x180\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x5\t\x18B\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x194\n\n\x3"+
		"\v\x3\v\x6\v\x198\n\v\r\v\xE\v\x199\x3\v\a\v\x19D\n\v\f\v\xE\v\x1A0\v"+
		"\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x1A9\n\f\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x5\xE\x1B1\n\xE\x3\xE\x3\xE\x5\xE\x1B5\n\xE\x3\xE\x3\xE"+
		"\x5\xE\x1B9\n\xE\x3\xE\x3\xE\x5\xE\x1BD\n\xE\x3\xE\a\xE\x1C0\n\xE\f\xE"+
		"\xE\xE\x1C3\v\xE\x3\xF\x3\xF\x6\xF\x1C7\n\xF\r\xF\xE\xF\x1C8\x3\xF\x5"+
		"\xF\x1CC\n\xF\x3\xF\a\xF\x1CF\n\xF\f\xF\xE\xF\x1D2\v\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x217\n\x10\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x5\x11\x21D\n\x11\x3\x11\x3\x11\x5\x11\x221\n\x11\x3\x11\x5"+
		"\x11\x224\n\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x234\n\x15\x3\x15\x3"+
		"\x15\x5\x15\x238\n\x15\x3\x15\a\x15\x23B\n\x15\f\x15\xE\x15\x23E\v\x15"+
		"\x5\x15\x240\n\x15\x3\x16\x3\x16\x3\x16\x5\x16\x245\n\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x5\x16\x24B\n\x16\x3\x16\x3\x16\x5\x16\x24F\n\x16\x3\x16"+
		"\a\x16\x252\n\x16\f\x16\xE\x16\x255\v\x16\x3\x17\x3\x17\x5\x17\x259\n"+
		"\x17\x3\x17\x3\x17\x5\x17\x25D\n\x17\x3\x17\x5\x17\x260\n\x17\x3\x17\x3"+
		"\x17\x5\x17\x264\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\x26A\n\x18\x3"+
		"\x18\x3\x18\x5\x18\x26E\n\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x5\x19"+
		"\x275\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x284\n\x19\x3\x19\x5\x19\x287"+
		"\n\x19\x3\x19\x5\x19\x28A\n\x19\x3\x19\x3\x19\x5\x19\x28E\n\x19\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x294\n\x1A\x3\x1A\x3\x1A\x5\x1A\x298\n\x1A"+
		"\x3\x1A\a\x1A\x29B\n\x1A\f\x1A\xE\x1A\x29E\v\x1A\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x5\x1B\x2A4\n\x1B\x3\x1B\x3\x1B\x5\x1B\x2A8\n\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x2AC\n\x1B\x3\x1B\x3\x1B\x5\x1B\x2B0\n\x1B\x3\x1B\x5\x1B\x2B3"+
		"\n\x1B\x3\x1C\x3\x1C\x6\x1C\x2B7\n\x1C\r\x1C\xE\x1C\x2B8\x3\x1C\x3\x1C"+
		"\x6\x1C\x2BD\n\x1C\r\x1C\xE\x1C\x2BE\x5\x1C\x2C1\n\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x6\x1C\x2CA\n\x1C\r\x1C\xE\x1C\x2CB\x3"+
		"\x1C\x3\x1C\x6\x1C\x2D0\n\x1C\r\x1C\xE\x1C\x2D1\x5\x1C\x2D4\n\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x6\x1C\x2DA\n\x1C\r\x1C\xE\x1C\x2DB\x3\x1C\x3\x1C"+
		"\x6\x1C\x2E0\n\x1C\r\x1C\xE\x1C\x2E1\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x5\x1C\x2EA\n\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x2F1"+
		"\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x6\x1E\x2F7\n\x1E\r\x1E\xE\x1E\x2F8"+
		"\x3\x1E\a\x1E\x2FC\n\x1E\f\x1E\xE\x1E\x2FF\v\x1E\x3\x1E\x3\x1E\x3\x1F"+
		"\x3\x1F\x5\x1F\x305\n\x1F\x3\x1F\x3\x1F\x5\x1F\x309\n\x1F\x3\x1F\x5\x1F"+
		"\x30C\n\x1F\x3\x1F\x6\x1F\x30F\n\x1F\r\x1F\xE\x1F\x310\x3 \x3 \x3 \x3"+
		" \x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x5\"\x31E\n\"\x3\"\x3\"\x3\"\x3\"\x5"+
		"\"\x324\n\"\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x3$\x5$\x32E\n$\x3$\x3$\x5$"+
		"\x332\n$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x33C\n%\x3%\x3%\x3%\x3%\x3"+
		"%\x6%\x343\n%\r%\xE%\x344\x3%\x3%\x6%\x349\n%\r%\xE%\x34A\x5%\x34D\n%"+
		"\x3%\x3%\x3%\x5%\x352\n%\x3&\x3&\x3&\x3&\x5&\x358\n&\x3&\x3&\x5&\x35C"+
		"\n&\x3&\x5&\x35F\n&\x3&\x3&\x5&\x363\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3"+
		"&\x3&\x5&\x36E\n&\x3&\x6&\x371\n&\r&\xE&\x372\x3&\x3&\x6&\x377\n&\r&\xE"+
		"&\x378\x5&\x37B\n&\x3&\x3&\x3&\x5&\x380\n&\x3\'\x3\'\x3\'\x5\'\x385\n"+
		"\'\x3\'\x3\'\x5\'\x389\n\'\x3\'\x3\'\x3\'\x3\'\x5\'\x38F\n\'\x3\'\x5\'"+
		"\x392\n\'\x3\'\x3\'\x5\'\x396\n\'\x3\'\x6\'\x399\n\'\r\'\xE\'\x39A\x3"+
		"\'\x3\'\x6\'\x39F\n\'\r\'\xE\'\x3A0\x5\'\x3A3\n\'\x3\'\x3\'\x3(\x3(\x3"+
		"(\x3(\x5(\x3AB\n(\x3(\x3(\x5(\x3AF\n(\x3(\x5(\x3B2\n(\x3(\x5(\x3B5\n("+
		"\x3(\x3(\x5(\x3B9\n(\x3(\x3(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3+\x3+\x3"+
		"+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x3D0\n+\x3+\x3+\a+\x3D4\n+\f+\xE"+
		"+\x3D7\v+\x3+\x5+\x3DA\n+\x3+\x3+\x5+\x3DE\n+\x3,\x3,\x3,\x3,\x3,\x3,"+
		"\x6,\x3E6\n,\r,\xE,\x3E7\x3,\x3,\x6,\x3EC\n,\r,\xE,\x3ED\x5,\x3F0\n,\x3"+
		"-\x3-\x3.\x3.\x3.\x3.\x3.\x3.\x6.\x3FA\n.\r.\xE.\x3FB\x3.\x3.\x6.\x400"+
		"\n.\r.\xE.\x401\x5.\x404\n.\x3/\x3/\x6/\x408\n/\r/\xE/\x409\x3/\x3/\x6"+
		"/\x40E\n/\r/\xE/\x40F\x5/\x412\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3"+
		"\x31\x3\x31\x3\x31\x5\x31\x41C\n\x31\x3\x31\x3\x31\x5\x31\x420\n\x31\x3"+
		"\x31\x6\x31\x423\n\x31\r\x31\xE\x31\x424\x3\x32\x3\x32\x3\x32\x3\x32\x3"+
		"\x33\x3\x33\x5\x33\x42D\n\x33\x3\x33\x3\x33\x5\x33\x431\n\x33\x3\x33\x3"+
		"\x33\x5\x33\x435\n\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34"+
		"\x43D\n\x34\x3\x34\x3\x34\x5\x34\x441\n\x34\x3\x34\x3\x34\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x44D\n\x36\x3\x36\x3"+
		"\x36\x5\x36\x451\n\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x458"+
		"\n\x36\x5\x36\x45A\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x460\n\x37"+
		"\x3\x37\x3\x37\x5\x37\x464\n\x37\x3\x37\x3\x37\x3\x38\x3\x38\a\x38\x46A"+
		"\n\x38\f\x38\xE\x38\x46D\v\x38\x3\x38\x5\x38\x470\n\x38\x3\x38\x3\x38"+
		"\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x6\x39\x47A\n\x39\r\x39\xE"+
		"\x39\x47B\x3\x39\x3\x39\x6\x39\x480\n\x39\r\x39\xE\x39\x481\x5\x39\x484"+
		"\n\x39\x3:\x3:\x3:\x3:\x3:\x3:\x6:\x48C\n:\r:\xE:\x48D\x3:\x3:\x6:\x492"+
		"\n:\r:\xE:\x493\x5:\x496\n:\x3;\x3;\x6;\x49A\n;\r;\xE;\x49B\x3;\x3;\x6"+
		";\x4A0\n;\r;\xE;\x4A1\x5;\x4A4\n;\x3<\x3<\x5<\x4A8\n<\x3<\x3<\x5<\x4AC"+
		"\n<\x3<\x3<\x5<\x4B0\n<\x3<\x3<\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>\x3>\x3"+
		">\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x5?\x4C8\n?\x3@\x3@\x3@\x3@"+
		"\x3@\x3@\x3@\x3@\x5@\x4D2\n@\x3@\x3@\x5@\x4D6\n@\x3@\a@\x4D9\n@\f@\xE"+
		"@\x4DC\v@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41"+
		"\x4E6\n\x41\x3\x41\x3\x41\x5\x41\x4EA\n\x41\x3\x41\a\x41\x4ED\n\x41\f"+
		"\x41\xE\x41\x4F0\v\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x4FD\n\x42\x3\x42\x3\x42\x5\x42\x501"+
		"\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x50A\n"+
		"\x42\x3\x42\x3\x42\x5\x42\x50E\n\x42\x3\x42\x5\x42\x511\n\x42\x3\x43\x3"+
		"\x43\x5\x43\x515\n\x43\x3\x43\x3\x43\x5\x43\x519\n\x43\x3\x43\x5\x43\x51C"+
		"\n\x43\a\x43\x51E\n\x43\f\x43\xE\x43\x521\v\x43\x3\x43\x5\x43\x524\n\x43"+
		"\x3\x43\x5\x43\x527\n\x43\x3\x43\x3\x43\x5\x43\x52B\n\x43\x3\x43\x5\x43"+
		"\x52E\n\x43\x6\x43\x530\n\x43\r\x43\xE\x43\x531\x5\x43\x534\n\x43\x3\x44"+
		"\x3\x44\x3\x44\x5\x44\x539\n\x44\x3\x44\x3\x44\x5\x44\x53D\n\x44\x3\x44"+
		"\x3\x44\x5\x44\x541\n\x44\x3\x44\x3\x44\x5\x44\x545\n\x44\x5\x44\x547"+
		"\n\x44\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x54D\n\x45\x3\x45\x3\x45\x5"+
		"\x45\x551\n\x45\x3\x45\x5\x45\x554\n\x45\x3\x46\x3\x46\x3\x46\x5\x46\x559"+
		"\n\x46\x3\x46\x3\x46\x5\x46\x55D\n\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5"+
		"\x46\x563\n\x46\x3\x46\x5\x46\x566\n\x46\x3\x46\x3\x46\x5\x46\x56A\n\x46"+
		"\x3\x46\x6\x46\x56D\n\x46\r\x46\xE\x46\x56E\x3\x46\x3\x46\x6\x46\x573"+
		"\n\x46\r\x46\xE\x46\x574\x5\x46\x577\n\x46\x3\x46\x3\x46\x3G\x3G\x3G\x5"+
		"G\x57E\nG\x3G\x3G\x5G\x582\nG\x3G\x3G\x3G\x3G\x5G\x588\nG\x3G\x5G\x58B"+
		"\nG\x3G\x6G\x58E\nG\rG\xEG\x58F\x3G\x3G\x6G\x594\nG\rG\xEG\x595\x5G\x598"+
		"\nG\x3G\x3G\x3H\x3H\x3H\x5H\x59F\nH\x3H\x3H\x5H\x5A3\nH\x3H\x3H\x3H\x3"+
		"H\x5H\x5A9\nH\x3H\x5H\x5AC\nH\x3H\x6H\x5AF\nH\rH\xEH\x5B0\x3H\x3H\x6H"+
		"\x5B5\nH\rH\xEH\x5B6\x5H\x5B9\nH\x3H\x3H\x3I\x3I\x3I\x3I\x5I\x5C1\nI\x3"+
		"I\x3I\x5I\x5C5\nI\x3I\x5I\x5C8\nI\x3I\x5I\x5CB\nI\x3I\x3I\x5I\x5CF\nI"+
		"\x3I\x3I\x3J\x3J\x3J\x3J\x5J\x5D7\nJ\x3J\x3J\x5J\x5DB\nJ\x3J\x3J\x5J\x5DF"+
		"\nJ\x5J\x5E1\nJ\x3J\x5J\x5E4\nJ\x3K\x3K\x3K\x5K\x5E9\nK\x3L\x3L\x3L\x3"+
		"L\x5L\x5EF\nL\x3L\x3L\x5L\x5F3\nL\x3L\x3L\x5L\x5F7\nL\x3L\aL\x5FA\nL\f"+
		"L\xEL\x5FD\vL\x3M\x3M\x5M\x601\nM\x3M\x3M\x5M\x605\nM\x3M\x3M\x5M\x609"+
		"\nM\x3M\x3M\x3M\x5M\x60E\nM\x3N\x3N\x3O\x3O\x3O\x3O\x5O\x616\nO\x5O\x618"+
		"\nO\x3P\x3P\x3Q\x3Q\x3Q\x3Q\x3R\x3R\x3R\x3R\x5R\x624\nR\x3R\x3R\x5R\x628"+
		"\nR\x3R\x3R\x3S\x3S\x3S\x3S\x5S\x630\nS\x3S\x3S\x5S\x634\nS\x3S\x3S\x3"+
		"T\x3T\x3T\x3T\x5T\x63C\nT\x3T\x3T\x5T\x640\nT\x3T\x3T\x5T\x644\nT\x3T"+
		"\x3T\x5T\x648\nT\x3T\x3T\x5T\x64C\nT\x3T\x3T\x5T\x650\nT\x3T\x3T\x3U\x3"+
		"U\x3U\x3U\x5U\x658\nU\x3U\x3U\x5U\x65C\nU\x3U\x3U\x3V\x3V\x3V\x3V\x3V"+
		"\x3V\x6V\x666\nV\rV\xEV\x667\x3V\aV\x66B\nV\fV\xEV\x66E\vV\x3V\x5V\x671"+
		"\nV\x3V\x3V\x3W\x3W\x3W\x3W\x5W\x679\nW\x3W\x5W\x67C\nW\x3W\aW\x67F\n"+
		"W\fW\xEW\x682\vW\x3W\x6W\x685\nW\rW\xEW\x686\x5W\x689\nW\x3W\x3W\x6W\x68D"+
		"\nW\rW\xEW\x68E\x5W\x691\nW\x3X\x3X\x3X\x5X\x696\nX\x3X\x3X\x5X\x69A\n"+
		"X\x3X\x3X\x3X\x3X\x5X\x6A0\nX\x3X\x3X\x5X\x6A4\nX\x3X\aX\x6A7\nX\fX\xE"+
		"X\x6AA\vX\x3X\x3X\x3X\x3X\x3X\x3X\x5X\x6B2\nX\x3X\x3X\x5X\x6B6\nX\x3X"+
		"\aX\x6B9\nX\fX\xEX\x6BC\vX\x5X\x6BE\nX\x3Y\x3Y\x3Y\x3Y\x5Y\x6C4\nY\x3"+
		"Y\x3Y\x5Y\x6C8\nY\x3Y\x5Y\x6CB\nY\x3Z\x3Z\x3Z\x3Z\x5Z\x6D1\nZ\x3Z\x3Z"+
		"\x5Z\x6D5\nZ\x3Z\x3Z\x3[\x3[\x3[\x3[\x5[\x6DD\n[\x3[\x3[\x5[\x6E1\n[\x3"+
		"[\x3[\x3\\\x3\\\x3]\x3]\x3]\x5]\x6EA\n]\x3]\x3]\x5]\x6EE\n]\x3]\x3]\x3"+
		"]\x3]\x5]\x6F4\n]\x3]\x5]\x6F7\n]\x3]\x6]\x6FA\n]\r]\xE]\x6FB\x3]\x3]"+
		"\x6]\x700\n]\r]\xE]\x701\x5]\x704\n]\x3]\x3]\x3^\x3^\x5^\x70A\n^\x3^\x3"+
		"^\x5^\x70E\n^\x3^\x3^\x3_\x3_\x3_\x5_\x715\n_\x3_\x3_\x3_\x3_\x6_\x71B"+
		"\n_\r_\xE_\x71C\x3_\a_\x720\n_\f_\xE_\x723\v_\x3_\x3_\x3`\x3`\x5`\x729"+
		"\n`\x3`\x3`\x5`\x72D\n`\x3`\x5`\x730\n`\x3`\x5`\x733\n`\x3`\x5`\x736\n"+
		"`\x3`\x3`\x5`\x73A\n`\x3`\x6`\x73D\n`\r`\xE`\x73E\x3\x61\x3\x61\x3\x61"+
		"\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\x748\n\x61\x3\x62\x3\x62\x3\x62\x3"+
		"\x62\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x752\n\x63\x3\x63\x3\x63\x5\x63"+
		"\x756\n\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x75D\n\x63\x5\x63"+
		"\x75F\n\x63\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3"+
		"\x64\x5\x64\x76A\n\x64\x3\x64\x3\x64\x5\x64\x76E\n\x64\x3\x64\x3\x64\x3"+
		"\x64\x3\x64\x5\x64\x774\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x779\n\x64\x3"+
		"\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x783\n\x64"+
		"\x3\x64\x3\x64\x5\x64\x787\n\x64\x3\x64\x3\x64\x5\x64\x78B\n\x64\x3\x64"+
		"\a\x64\x78E\n\x64\f\x64\xE\x64\x791\v\x64\x3\x64\x3\x64\x3\x64\x3\x64"+
		"\x5\x64\x797\n\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3"+
		"\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x7A5\n\x64\x3\x64\x3\x64\x5\x64"+
		"\x7A9\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x7AE\n\x64\x3\x64\x3\x64\x5\x64"+
		"\x7B2\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x7B7\n\x64\x3\x64\x3\x64\x5\x64"+
		"\x7BB\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x7C0\n\x64\x3\x64\x3\x64\x5\x64"+
		"\x7C4\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x7C9\n\x64\x3\x64\x3\x64\x5\x64"+
		"\x7CD\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x7D2\n\x64\x3\x64\x3\x64\x5\x64"+
		"\x7D6\n\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5"+
		"\x64\x7E0\n\x64\x3\x64\x3\x64\x5\x64\x7E4\n\x64\x3\x64\x3\x64\x3\x64\x5"+
		"\x64\x7E9\n\x64\x3\x64\x3\x64\x5\x64\x7ED\n\x64\x3\x64\x3\x64\x3\x64\x5"+
		"\x64\x7F2\n\x64\x3\x64\x3\x64\x5\x64\x7F6\n\x64\x3\x64\x3\x64\x3\x64\x5"+
		"\x64\x7FB\n\x64\x3\x64\x3\x64\x5\x64\x7FF\n\x64\x3\x64\x3\x64\x3\x64\x5"+
		"\x64\x804\n\x64\x3\x64\x3\x64\x5\x64\x808\n\x64\x3\x64\x3\x64\x3\x64\x5"+
		"\x64\x80D\n\x64\x3\x64\x3\x64\x5\x64\x811\n\x64\x3\x64\x3\x64\x3\x64\x3"+
		"\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5"+
		"\x64\x820\n\x64\x3\x64\x3\x64\x5\x64\x824\n\x64\x3\x64\x3\x64\x3\x64\x5"+
		"\x64\x829\n\x64\x3\x64\x3\x64\x5\x64\x82D\n\x64\x3\x64\x3\x64\x3\x64\x3"+
		"\x64\x3\x64\x3\x64\a\x64\x835\n\x64\f\x64\xE\x64\x838\v\x64\x3\x65\x3"+
		"\x65\x3\x65\x5\x65\x83D\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x842\n\x65\x3"+
		"\x65\x3\x65\x3\x66\x3\x66\x5\x66\x848\n\x66\x3\x66\x3\x66\x5\x66\x84C"+
		"\n\x66\x3\x66\a\x66\x84F\n\x66\f\x66\xE\x66\x852\v\x66\x3g\x3g\x5g\x856"+
		"\ng\x3g\x3g\x5g\x85A\ng\x3g\x3g\x5g\x85E\ng\x5g\x860\ng\x3g\x3g\x5g\x864"+
		"\ng\x5g\x866\ng\x3g\x5g\x869\ng\x3g\x3g\x5g\x86D\ng\x3h\x3h\x3h\x3h\x6"+
		"h\x873\nh\rh\xEh\x874\x3h\x3h\x3h\ah\x87A\nh\fh\xEh\x87D\vh\x3h\x3h\x3"+
		"i\x3i\x3i\x3i\x5i\x885\ni\x3i\x3i\x5i\x889\ni\x3i\x3i\x3j\x3j\x3j\x3j"+
		"\x6j\x891\nj\rj\xEj\x892\x3j\x3j\x6j\x897\nj\rj\xEj\x898\x5j\x89B\nj\x3"+
		"j\x3j\x3k\x3k\x3k\x3k\x5k\x8A3\nk\x3k\x3k\x5k\x8A7\nk\x3k\x5k\x8AA\nk"+
		"\x3l\x3l\x5l\x8AE\nl\x3m\x3m\x3m\x3m\x5m\x8B4\nm\x3m\x5m\x8B7\nm\x3m\x3"+
		"m\x5m\x8BB\nm\x3m\x3m\x5m\x8BF\nm\x3m\x3m\x5m\x8C3\nm\x3n\x3n\x3n\x5n"+
		"\x8C8\nn\x3n\x3n\x3n\x5n\x8CD\nn\x3n\x5n\x8D0\nn\x3n\x3n\x5n\x8D4\nn\x3"+
		"n\x3n\x5n\x8D8\nn\x3n\x3n\x5n\x8DC\nn\x3o\x3o\x5o\x8E0\no\x3p\x3p\x3p"+
		"\x5p\x8E5\np\x3q\x5q\x8E8\nq\x3q\x3q\x3q\x5q\x8ED\nq\x3q\x3q\x5q\x8F1"+
		"\nq\x3q\x5q\x8F4\nq\x3r\x3r\x3r\x3r\x5r\x8FA\nr\x3s\x3s\x5s\x8FE\ns\x3"+
		"s\x5s\x901\ns\x3t\x3t\x5t\x905\nt\x3t\x5t\x908\nt\x3t\x5t\x90B\nt\x3t"+
		"\x3t\x5t\x90F\nt\x3t\x3t\x5t\x913\nt\x5t\x915\nt\x3t\x3t\x5t\x919\nt\x3"+
		"u\x3u\x5u\x91D\nu\x3u\x6u\x920\nu\ru\xEu\x921\x3u\x5u\x925\nu\x3v\x3v"+
		"\x3v\x5v\x92A\nv\x3w\x3w\x3x\x5x\x92F\nx\x3x\x5x\x932\nx\x3x\x3x\x5x\x936"+
		"\nx\ax\x938\nx\fx\xEx\x93B\vx\x3x\x3x\x5x\x93F\nx\x3x\x3x\x5x\x943\nx"+
		"\x3x\x5x\x946\nx\ax\x948\nx\fx\xEx\x94B\vx\x3y\x3y\x5y\x94F\ny\x3y\x3"+
		"y\x3z\x3z\x3z\x5z\x956\nz\x3{\x3{\x5{\x95A\n{\x3{\x3{\x5{\x95E\n{\x3{"+
		"\x3{\x5{\x962\n{\x3{\a{\x965\n{\f{\xE{\x968\v{\x5{\x96A\n{\x3{\x5{\x96D"+
		"\n{\x3{\x3{\x3|\x3|\x5|\x973\n|\x3|\x3|\x5|\x977\n|\x3|\x3|\x5|\x97B\n"+
		"|\x3|\x3|\x5|\x97F\n|\x3|\x3|\x5|\x983\n|\x3|\x5|\x986\n|\x3|\x3|\x5|"+
		"\x98A\n|\x3|\x5|\x98D\n|\x3|\x5|\x990\n|\x3}\x3}\x5}\x994\n}\x3}\x3}\x5"+
		"}\x998\n}\x3~\x3~\x5~\x99C\n~\x3~\x3~\x5~\x9A0\n~\x3~\a~\x9A3\n~\f~\xE"+
		"~\x9A6\v~\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x5\x7F\x9AD\n\x7F\x3\x7F"+
		"\x3\x7F\x3\x80\x3\x80\x6\x80\x9B3\n\x80\r\x80\xE\x80\x9B4\x3\x80\x3\x80"+
		"\x3\x80\x6\x80\x9BA\n\x80\r\x80\xE\x80\x9BB\x3\x80\x5\x80\x9BF\n\x80\x3"+
		"\x81\x3\x81\x3\x81\x3\x81\x5\x81\x9C5\n\x81\x3\x81\x3\x81\x3\x81\x5\x81"+
		"\x9CA\n\x81\x3\x82\x3\x82\x3\x83\x3\x83\x3\x83\a\x83\x9D1\n\x83\f\x83"+
		"\xE\x83\x9D4\v\x83\x3\x83\x3\x83\x3\x83\x6\x83\x9D9\n\x83\r\x83\xE\x83"+
		"\x9DA\x5\x83\x9DD\n\x83\x3\x84\x3\x84\x3\x85\x3\x85\x3\x85\a\x85\x9E4"+
		"\n\x85\f\x85\xE\x85\x9E7\v\x85\x3\x86\x3\x86\x5\x86\x9EB\n\x86\x3\x86"+
		"\x3\x86\x5\x86\x9EF\n\x86\x3\x87\x3\x87\x5\x87\x9F3\n\x87\x3\x87\x3\x87"+
		"\x5\x87\x9F7\n\x87\x3\x87\x5\x87\x9FA\n\x87\x3\x88\x3\x88\x3\x88\x3\x89"+
		"\x3\x89\x3\x8A\x3\x8A\x5\x8A\xA03\n\x8A\x3\x8A\x5\x8A\xA06\n\x8A\x3\x8A"+
		"\x3\x8A\x5\x8A\xA0A\n\x8A\x3\x8A\x5\x8A\xA0D\n\x8A\x3\x8B\x3\x8B\x3\x8C"+
		"\x3\x8C\x3\x8D\x3\x8D\x3\x8D\x2\x2\x3\xC6\x8E\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:"+
		"\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X"+
		"\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2"+
		"v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2"+
		"\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2"+
		"\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2"+
		"\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2"+
		"\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2"+
		"\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2"+
		"\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104"+
		"\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116"+
		"\x2\x118\x2\x2\x15\x4\x2\x16\x16\xA6\xA6\x4\x2OO\xA4\xA4\x3\x2%\x30\x4"+
		"\x2\xAF\xAF\xB3\xB3\x3\x2\x46J\x5\x2\xBC\xBC\xC3\xC3\xC7\xC7\a\x2\x12"+
		"\x12\x16\x16XX\x80\x80\x8A\x8A\x4\x2\x8D\x8E\xB7\xB7\x4\x2\x65g\x9D\x9D"+
		"\x4\x2\x5\x5\t\t\x4\x2\x9F\x9F\xA5\xA5\x4\x2\x18\x19\x81\x81\x3\x2\x18"+
		"\x19\f\x2\x17\x17\x1A\x1A!!##\x34\x34ZZ^^\x9E\x9E\xA3\xA3\xB0\xB0\a\x2"+
		"YY\x63\x63\xBC\xBF\xC1\xC1\xC5\xC5\x6\x2KKuv\xAA\xAA\xCC\xD1\x6\x2\x3"+
		"\x3\a\b\n\v\xB9\xB9\x6\x2MMQQ\x84\x84\x88\x88\v\x2\f\x37@\x45K\x63hhm"+
		"wyz\x7F\x84\x88\x8D\x8F\xB8\xBA9\x2\x11A\x3\x2\x2\x2\x4\x11E\x3\x2\x2"+
		"\x2\x6\x14C\x3\x2\x2\x2\b\x152\x3\x2\x2\x2\n\x163\x3\x2\x2\x2\f\x174\x3"+
		"\x2\x2\x2\xE\x17E\x3\x2\x2\x2\x10\x18A\x3\x2\x2\x2\x12\x193\x3\x2\x2\x2"+
		"\x14\x195\x3\x2\x2\x2\x16\x1A8\x3\x2\x2\x2\x18\x1AA\x3\x2\x2\x2\x1A\x1AC"+
		"\x3\x2\x2\x2\x1C\x1C4\x3\x2\x2\x2\x1E\x216\x3\x2\x2\x2 \x218\x3\x2\x2"+
		"\x2\"\x225\x3\x2\x2\x2$\x227\x3\x2\x2\x2&\x22B\x3\x2\x2\x2(\x22F\x3\x2"+
		"\x2\x2*\x244\x3\x2\x2\x2,\x256\x3\x2\x2\x2.\x267\x3\x2\x2\x2\x30\x274"+
		"\x3\x2\x2\x2\x32\x28F\x3\x2\x2\x2\x34\x29F\x3\x2\x2\x2\x36\x2E9\x3\x2"+
		"\x2\x2\x38\x2EB\x3\x2\x2\x2:\x2F0\x3\x2\x2\x2<\x302\x3\x2\x2\x2>\x312"+
		"\x3\x2\x2\x2@\x316\x3\x2\x2\x2\x42\x31D\x3\x2\x2\x2\x44\x327\x3\x2\x2"+
		"\x2\x46\x329\x3\x2\x2\x2H\x335\x3\x2\x2\x2J\x353\x3\x2\x2\x2L\x384\x3"+
		"\x2\x2\x2N\x3A6\x3\x2\x2\x2P\x3BC\x3\x2\x2\x2R\x3C0\x3\x2\x2\x2T\x3DD"+
		"\x3\x2\x2\x2V\x3DF\x3\x2\x2\x2X\x3F1\x3\x2\x2\x2Z\x3F3\x3\x2\x2\x2\\\x405"+
		"\x3\x2\x2\x2^\x413\x3\x2\x2\x2`\x417\x3\x2\x2\x2\x62\x426\x3\x2\x2\x2"+
		"\x64\x42C\x3\x2\x2\x2\x66\x438\x3\x2\x2\x2h\x444\x3\x2\x2\x2j\x448\x3"+
		"\x2\x2\x2l\x45B\x3\x2\x2\x2n\x467\x3\x2\x2\x2p\x473\x3\x2\x2\x2r\x485"+
		"\x3\x2\x2\x2t\x497\x3\x2\x2\x2v\x4A5\x3\x2\x2\x2x\x4B3\x3\x2\x2\x2z\x4B7"+
		"\x3\x2\x2\x2|\x4BF\x3\x2\x2\x2~\x4C9\x3\x2\x2\x2\x80\x4DD\x3\x2\x2\x2"+
		"\x82\x4F1\x3\x2\x2\x2\x84\x533\x3\x2\x2\x2\x86\x546\x3\x2\x2\x2\x88\x548"+
		"\x3\x2\x2\x2\x8A\x558\x3\x2\x2\x2\x8C\x57D\x3\x2\x2\x2\x8E\x59E\x3\x2"+
		"\x2\x2\x90\x5BC\x3\x2\x2\x2\x92\x5D2\x3\x2\x2\x2\x94\x5E5\x3\x2\x2\x2"+
		"\x96\x5EA\x3\x2\x2\x2\x98\x5FE\x3\x2\x2\x2\x9A\x60F\x3\x2\x2\x2\x9C\x611"+
		"\x3\x2\x2\x2\x9E\x619\x3\x2\x2\x2\xA0\x61B\x3\x2\x2\x2\xA2\x61F\x3\x2"+
		"\x2\x2\xA4\x62B\x3\x2\x2\x2\xA6\x637\x3\x2\x2\x2\xA8\x653\x3\x2\x2\x2"+
		"\xAA\x65F\x3\x2\x2\x2\xAC\x674\x3\x2\x2\x2\xAE\x6BD\x3\x2\x2\x2\xB0\x6BF"+
		"\x3\x2\x2\x2\xB2\x6CC\x3\x2\x2\x2\xB4\x6D8\x3\x2\x2\x2\xB6\x6E4\x3\x2"+
		"\x2\x2\xB8\x6E9\x3\x2\x2\x2\xBA\x707\x3\x2\x2\x2\xBC\x714\x3\x2\x2\x2"+
		"\xBE\x726\x3\x2\x2\x2\xC0\x740\x3\x2\x2\x2\xC2\x749\x3\x2\x2\x2\xC4\x74D"+
		"\x3\x2\x2\x2\xC6\x796\x3\x2\x2\x2\xC8\x83C\x3\x2\x2\x2\xCA\x845\x3\x2"+
		"\x2\x2\xCC\x853\x3\x2\x2\x2\xCE\x86E\x3\x2\x2\x2\xD0\x880\x3\x2\x2\x2"+
		"\xD2\x88C\x3\x2\x2\x2\xD4\x89E\x3\x2\x2\x2\xD6\x8AD\x3\x2\x2\x2\xD8\x8AF"+
		"\x3\x2\x2\x2\xDA\x8C4\x3\x2\x2\x2\xDC\x8DF\x3\x2\x2\x2\xDE\x8E1\x3\x2"+
		"\x2\x2\xE0\x8E7\x3\x2\x2\x2\xE2\x8F9\x3\x2\x2\x2\xE4\x8FB\x3\x2\x2\x2"+
		"\xE6\x904\x3\x2\x2\x2\xE8\x91C\x3\x2\x2\x2\xEA\x926\x3\x2\x2\x2\xEC\x92B"+
		"\x3\x2\x2\x2\xEE\x939\x3\x2\x2\x2\xF0\x94E\x3\x2\x2\x2\xF2\x952\x3\x2"+
		"\x2\x2\xF4\x957\x3\x2\x2\x2\xF6\x972\x3\x2\x2\x2\xF8\x991\x3\x2\x2\x2"+
		"\xFA\x999\x3\x2\x2\x2\xFC\x9AC\x3\x2\x2\x2\xFE\x9BE\x3\x2\x2\x2\x100\x9C0"+
		"\x3\x2\x2\x2\x102\x9CB\x3\x2\x2\x2\x104\x9DC\x3\x2\x2\x2\x106\x9DE\x3"+
		"\x2\x2\x2\x108\x9E0\x3\x2\x2\x2\x10A\x9E8\x3\x2\x2\x2\x10C\x9F0\x3\x2"+
		"\x2\x2\x10E\x9FB\x3\x2\x2\x2\x110\x9FE\x3\x2\x2\x2\x112\xA02\x3\x2\x2"+
		"\x2\x114\xA0E\x3\x2\x2\x2\x116\xA10\x3\x2\x2\x2\x118\xA12\x3\x2\x2\x2"+
		"\x11A\x11B\x5\x4\x3\x2\x11B\x11C\a\x2\x2\x3\x11C\x3\x3\x2\x2\x2\x11D\x11F"+
		"\a\xD6\x2\x2\x11E\x11D\x3\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11F\x123\x3"+
		"\x2\x2\x2\x120\x122\a\xD4\x2\x2\x121\x120\x3\x2\x2\x2\x122\x125\x3\x2"+
		"\x2\x2\x123\x121\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124\x12C\x3\x2\x2"+
		"\x2\x125\x123\x3\x2\x2\x2\x126\x128\x5\x6\x4\x2\x127\x129\a\xD4\x2\x2"+
		"\x128\x127\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2\x12A"+
		"\x12B\x3\x2\x2\x2\x12B\x12D\x3\x2\x2\x2\x12C\x126\x3\x2\x2\x2\x12C\x12D"+
		"\x3\x2\x2\x2\x12D\x12F\x3\x2\x2\x2\x12E\x130\x5\b\x5\x2\x12F\x12E\x3\x2"+
		"\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x134\x3\x2\x2\x2\x131\x133\a\xD4\x2"+
		"\x2\x132\x131\x3\x2\x2\x2\x133\x136\x3\x2\x2\x2\x134\x132\x3\x2\x2\x2"+
		"\x134\x135\x3\x2\x2\x2\x135\x138\x3\x2\x2\x2\x136\x134\x3\x2\x2\x2\x137"+
		"\x139\x5\f\a\x2\x138\x137\x3\x2\x2\x2\x138\x139\x3\x2\x2\x2\x139\x13D"+
		"\x3\x2\x2\x2\x13A\x13C\a\xD4\x2\x2\x13B\x13A\x3\x2\x2\x2\x13C\x13F\x3"+
		"\x2\x2\x2\x13D\x13B\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x141\x3\x2"+
		"\x2\x2\x13F\x13D\x3\x2\x2\x2\x140\x142\x5\x14\v\x2\x141\x140\x3\x2\x2"+
		"\x2\x141\x142\x3\x2\x2\x2\x142\x146\x3\x2\x2\x2\x143\x145\a\xD4\x2\x2"+
		"\x144\x143\x3\x2\x2\x2\x145\x148\x3\x2\x2\x2\x146\x144\x3\x2\x2\x2\x146"+
		"\x147\x3\x2\x2\x2\x147\x14A\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2\x149\x14B"+
		"\a\xD6\x2\x2\x14A\x149\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x5\x3\x2"+
		"\x2\x2\x14C\x14D\a\xB1\x2\x2\x14D\x14E\a\xD6\x2\x2\x14E\x14F\a\xD0\x2"+
		"\x2\x14F\x150\a\xD6\x2\x2\x150\x151\a\x1F\x2\x2\x151\a\x3\x2\x2\x2\x152"+
		"\x154\a\x14\x2\x2\x153\x155\a\xD4\x2\x2\x154\x153\x3\x2\x2\x2\x155\x156"+
		"\x3\x2\x2\x2\x156\x154\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x159\x3"+
		"\x2\x2\x2\x158\x15A\x5\n\x6\x2\x159\x158\x3\x2\x2\x2\x15A\x15B\x3\x2\x2"+
		"\x2\x15B\x159\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2"+
		"\x15D\x15F\a@\x2\x2\x15E\x160\a\xD4\x2\x2\x15F\x15E\x3\x2\x2\x2\x160\x161"+
		"\x3\x2\x2\x2\x161\x15F\x3\x2\x2\x2\x161\x162\x3\x2\x2\x2\x162\t\x3\x2"+
		"\x2\x2\x163\x165\x5\xFE\x80\x2\x164\x166\a\xD6\x2\x2\x165\x164\x3\x2\x2"+
		"\x2\x165\x166\x3\x2\x2\x2\x166\x167\x3\x2\x2\x2\x167\x169\a\xBC\x2\x2"+
		"\x168\x16A\a\xD6\x2\x2\x169\x168\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16A"+
		"\x16B\x3\x2\x2\x2\x16B\x16C\x5\x110\x89\x2\x16C\x16D\a\xD4\x2\x2\x16D"+
		"\v\x3\x2\x2\x2\x16E\x170\x5\x1A\xE\x2\x16F\x171\a\xD4\x2\x2\x170\x16F"+
		"\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x172\x173\x3"+
		"\x2\x2\x2\x173\x175\x3\x2\x2\x2\x174\x16E\x3\x2\x2\x2\x175\x176\x3\x2"+
		"\x2\x2\x176\x174\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x177\r\x3\x2\x2\x2"+
		"\x178\x17A\x5\x12\n\x2\x179\x17B\a\xD4\x2\x2\x17A\x179\x3\x2\x2\x2\x17B"+
		"\x17C\x3\x2\x2\x2\x17C\x17A\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x17F"+
		"\x3\x2\x2\x2\x17E\x178\x3\x2\x2\x2\x17F\x180\x3\x2\x2\x2\x180\x17E\x3"+
		"\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\xF\x3\x2\x2\x2\x182\x183\a{\x2\x2"+
		"\x183\x184\a\xD6\x2\x2\x184\x18B\a\xCF\x2\x2\x185\x186\a}\x2\x2\x186\x187"+
		"\a\xD6\x2\x2\x187\x18B\t\x2\x2\x2\x188\x18B\a|\x2\x2\x189\x18B\a~\x2\x2"+
		"\x18A\x182\x3\x2\x2\x2\x18A\x185\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18A"+
		"\x189\x3\x2\x2\x2\x18B\x11\x3\x2\x2\x2\x18C\x194\x5\x18\r\x2\x18D\x194"+
		"\x5\x30\x19\x2\x18E\x194\x5:\x1E\x2\x18F\x194\x5\x42\"\x2\x190\x194\x5"+
		"n\x38\x2\x191\x194\x5\x10\t\x2\x192\x194\x5\xBC_\x2\x193\x18C\x3\x2\x2"+
		"\x2\x193\x18D\x3\x2\x2\x2\x193\x18E\x3\x2\x2\x2\x193\x18F\x3\x2\x2\x2"+
		"\x193\x190\x3\x2\x2\x2\x193\x191\x3\x2\x2\x2\x193\x192\x3\x2\x2\x2\x194"+
		"\x13\x3\x2\x2\x2\x195\x19E\x5\x16\f\x2\x196\x198\a\xD4\x2\x2\x197\x196"+
		"\x3\x2\x2\x2\x198\x199\x3\x2\x2\x2\x199\x197\x3\x2\x2\x2\x199\x19A\x3"+
		"\x2\x2\x2\x19A\x19B\x3\x2\x2\x2\x19B\x19D\x5\x16\f\x2\x19C\x197\x3\x2"+
		"\x2\x2\x19D\x1A0\x3\x2\x2\x2\x19E\x19C\x3\x2\x2\x2\x19E\x19F\x3\x2\x2"+
		"\x2\x19F\x15\x3\x2\x2\x2\x1A0\x19E\x3\x2\x2\x2\x1A1\x1A9\x5\x18\r\x2\x1A2"+
		"\x1A9\x5L\'\x2\x1A3\x1A9\x5n\x38\x2\x1A4\x1A9\x5\x8A\x46\x2\x1A5\x1A9"+
		"\x5\x8CG\x2\x1A6\x1A9\x5\x8EH\x2\x1A7\x1A9\x5\xB8]\x2\x1A8\x1A1\x3\x2"+
		"\x2\x2\x1A8\x1A2\x3\x2\x2\x2\x1A8\x1A3\x3\x2\x2\x2\x1A8\x1A4\x3\x2\x2"+
		"\x2\x1A8\x1A5\x3\x2\x2\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A7\x3\x2\x2\x2"+
		"\x1A9\x17\x3\x2\x2\x2\x1AA\x1AB\x5\x1C\xF\x2\x1AB\x19\x3\x2\x2\x2\x1AC"+
		"\x1AD\a\x10\x2\x2\x1AD\x1AE\a\xD6\x2\x2\x1AE\x1B0\x5\xE2r\x2\x1AF\x1B1"+
		"\a\xD6\x2\x2\x1B0\x1AF\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B2\x3"+
		"\x2\x2\x2\x1B2\x1B4\a\xBC\x2\x2\x1B3\x1B5\a\xD6\x2\x2\x1B4\x1B3\x3\x2"+
		"\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1C1\x5\x110\x89"+
		"\x2\x1B7\x1B9\a\xD6\x2\x2\x1B8\x1B7\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2"+
		"\x1B9\x1BA\x3\x2\x2\x2\x1BA\x1BC\a\x5\x2\x2\x1BB\x1BD\a\xD6\x2\x2\x1BC"+
		"\x1BB\x3\x2\x2\x2\x1BC\x1BD\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1C0"+
		"\x5\x110\x89\x2\x1BF\x1B8\x3\x2\x2\x2\x1C0\x1C3\x3\x2\x2\x2\x1C1\x1BF"+
		"\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1B\x3\x2\x2\x2\x1C3\x1C1\x3\x2"+
		"\x2\x2\x1C4\x1D0\x5\x1E\x10\x2\x1C5\x1C7\a\xD4\x2\x2\x1C6\x1C5\x3\x2\x2"+
		"\x2\x1C7\x1C8\x3\x2\x2\x2\x1C8\x1C6\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2"+
		"\x1C9\x1CB\x3\x2\x2\x2\x1CA\x1CC\a\xD6\x2\x2\x1CB\x1CA\x3\x2\x2\x2\x1CB"+
		"\x1CC\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1CF\x5\x1E\x10\x2\x1CE\x1C6"+
		"\x3\x2\x2\x2\x1CF\x1D2\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1D1\x3"+
		"\x2\x2\x2\x1D1\x1D\x3\x2\x2\x2\x1D2\x1D0\x3\x2\x2\x2\x1D3\x217\x5 \x11"+
		"\x2\x1D4\x217\x5\x1A\xE\x2\x1D5\x217\x5\"\x12\x2\x1D6\x217\x5$\x13\x2"+
		"\x1D7\x217\x5&\x14\x2\x1D8\x217\x5(\x15\x2\x1D9\x217\x5*\x16\x2\x1DA\x217"+
		"\x5.\x18\x2\x1DB\x217\x5\x34\x1B\x2\x1DC\x217\x5\x32\x1A\x2\x1DD\x217"+
		"\x5\x36\x1C\x2\x1DE\x217\x5\x38\x1D\x2\x1DF\x217\x5> \x2\x1E0\x217\x5"+
		"@!\x2\x1E1\x217\x5\x44#\x2\x1E2\x217\x5\xD6l\x2\x1E3\x217\x5\x46$\x2\x1E4"+
		"\x217\x5H%\x2\x1E5\x217\x5J&\x2\x1E6\x217\x5N(\x2\x1E7\x217\x5P)\x2\x1E8"+
		"\x217\x5R*\x2\x1E9\x217\x5T+\x2\x1EA\x217\x5^\x30\x2\x1EB\x217\x5\xDC"+
		"o\x2\x1EC\x217\x5`\x31\x2\x1ED\x217\x5\x62\x32\x2\x1EE\x217\x5\x64\x33"+
		"\x2\x1EF\x217\x5\x66\x34\x2\x1F0\x217\x5\x10E\x88\x2\x1F1\x217\x5h\x35"+
		"\x2\x1F2\x217\x5j\x36\x2\x1F3\x217\x5l\x37\x2\x1F4\x217\x5n\x38\x2\x1F5"+
		"\x217\x5v<\x2\x1F6\x217\x5x=\x2\x1F7\x217\x5z>\x2\x1F8\x217\x5|?\x2\x1F9"+
		"\x217\x5~@\x2\x1FA\x217\x5\x80\x41\x2\x1FB\x217\x5\x82\x42\x2\x1FC\x217"+
		"\x5\x88\x45\x2\x1FD\x217\x5\x90I\x2\x1FE\x217\x5\x92J\x2\x1FF\x217\x5"+
		"\x94K\x2\x200\x217\x5\x96L\x2\x201\x217\x5\x9AN\x2\x202\x217\x5\x9CO\x2"+
		"\x203\x217\x5\x9EP\x2\x204\x217\x5\xA0Q\x2\x205\x217\x5\xA2R\x2\x206\x217"+
		"\x5\xA4S\x2\x207\x217\x5\xA6T\x2\x208\x217\x5\xA8U\x2\x209\x217\x5\xAA"+
		"V\x2\x20A\x217\x5\xB0Y\x2\x20B\x217\x5\xB2Z\x2\x20C\x217\x5\xB4[\x2\x20D"+
		"\x217\x5\xB6\\\x2\x20E\x217\x5\xBA^\x2\x20F\x217\x5\xC2\x62\x2\x210\x217"+
		"\x5\xC4\x63\x2\x211\x217\x5\xC8\x65\x2\x212\x217\x5\xCEh\x2\x213\x217"+
		"\x5\xD0i\x2\x214\x217\x5\xD2j\x2\x215\x217\x5\xD4k\x2\x216\x1D3\x3\x2"+
		"\x2\x2\x216\x1D4\x3\x2\x2\x2\x216\x1D5\x3\x2\x2\x2\x216\x1D6\x3\x2\x2"+
		"\x2\x216\x1D7\x3\x2\x2\x2\x216\x1D8\x3\x2\x2\x2\x216\x1D9\x3\x2\x2\x2"+
		"\x216\x1DA\x3\x2\x2\x2\x216\x1DB\x3\x2\x2\x2\x216\x1DC\x3\x2\x2\x2\x216"+
		"\x1DD\x3\x2\x2\x2\x216\x1DE\x3\x2\x2\x2\x216\x1DF\x3\x2\x2\x2\x216\x1E0"+
		"\x3\x2\x2\x2\x216\x1E1\x3\x2\x2\x2\x216\x1E2\x3\x2\x2\x2\x216\x1E3\x3"+
		"\x2\x2\x2\x216\x1E4\x3\x2\x2\x2\x216\x1E5\x3\x2\x2\x2\x216\x1E6\x3\x2"+
		"\x2\x2\x216\x1E7\x3\x2\x2\x2\x216\x1E8\x3\x2\x2\x2\x216\x1E9\x3\x2\x2"+
		"\x2\x216\x1EA\x3\x2\x2\x2\x216\x1EB\x3\x2\x2\x2\x216\x1EC\x3\x2\x2\x2"+
		"\x216\x1ED\x3\x2\x2\x2\x216\x1EE\x3\x2\x2\x2\x216\x1EF\x3\x2\x2\x2\x216"+
		"\x1F0\x3\x2\x2\x2\x216\x1F1\x3\x2\x2\x2\x216\x1F2\x3\x2\x2\x2\x216\x1F3"+
		"\x3\x2\x2\x2\x216\x1F4\x3\x2\x2\x2\x216\x1F5\x3\x2\x2\x2\x216\x1F6\x3"+
		"\x2\x2\x2\x216\x1F7\x3\x2\x2\x2\x216\x1F8\x3\x2\x2\x2\x216\x1F9\x3\x2"+
		"\x2\x2\x216\x1FA\x3\x2\x2\x2\x216\x1FB\x3\x2\x2\x2\x216\x1FC\x3\x2\x2"+
		"\x2\x216\x1FD\x3\x2\x2\x2\x216\x1FE\x3\x2\x2\x2\x216\x1FF\x3\x2\x2\x2"+
		"\x216\x200\x3\x2\x2\x2\x216\x201\x3\x2\x2\x2\x216\x202\x3\x2\x2\x2\x216"+
		"\x203\x3\x2\x2\x2\x216\x204\x3\x2\x2\x2\x216\x205\x3\x2\x2\x2\x216\x206"+
		"\x3\x2\x2\x2\x216\x207\x3\x2\x2\x2\x216\x208\x3\x2\x2\x2\x216\x209\x3"+
		"\x2\x2\x2\x216\x20A\x3\x2\x2\x2\x216\x20B\x3\x2\x2\x2\x216\x20C\x3\x2"+
		"\x2\x2\x216\x20D\x3\x2\x2\x2\x216\x20E\x3\x2\x2\x2\x216\x20F\x3\x2\x2"+
		"\x2\x216\x210\x3\x2\x2\x2\x216\x211\x3\x2\x2\x2\x216\x212\x3\x2\x2\x2"+
		"\x216\x213\x3\x2\x2\x2\x216\x214\x3\x2\x2\x2\x216\x215\x3\x2\x2\x2\x217"+
		"\x1F\x3\x2\x2\x2\x218\x219\a\x11\x2\x2\x219\x21A\a\xD6\x2\x2\x21A\x223"+
		"\x5\xC6\x64\x2\x21B\x21D\a\xD6\x2\x2\x21C\x21B\x3\x2\x2\x2\x21C\x21D\x3"+
		"\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x220\a\x5\x2\x2\x21F\x221\a\xD6\x2"+
		"\x2\x220\x21F\x3\x2\x2\x2\x220\x221\x3\x2\x2\x2\x221\x222\x3\x2\x2\x2"+
		"\x222\x224\x5\xC6\x64\x2\x223\x21C\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2\x224"+
		"!\x3\x2\x2\x2\x225\x226\a\x15\x2\x2\x226#\x3\x2\x2\x2\x227\x228\a\x1D"+
		"\x2\x2\x228\x229\a\xD6\x2\x2\x229\x22A\x5\xC6\x64\x2\x22A%\x3\x2\x2\x2"+
		"\x22B\x22C\a\x1E\x2\x2\x22C\x22D\a\xD6\x2\x2\x22D\x22E\x5\xC6\x64\x2\x22E"+
		"\'\x3\x2\x2\x2\x22F\x23F\a \x2\x2\x230\x231\a\xD6\x2\x2\x231\x23C\x5\xC6"+
		"\x64\x2\x232\x234\a\xD6\x2\x2\x233\x232\x3\x2\x2\x2\x233\x234\x3\x2\x2"+
		"\x2\x234\x235\x3\x2\x2\x2\x235\x237\a\x5\x2\x2\x236\x238\a\xD6\x2\x2\x237"+
		"\x236\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239\x23B"+
		"\x5\xC6\x64\x2\x23A\x233\x3\x2\x2\x2\x23B\x23E\x3\x2\x2\x2\x23C\x23A\x3"+
		"\x2\x2\x2\x23C\x23D\x3\x2\x2\x2\x23D\x240\x3\x2\x2\x2\x23E\x23C\x3\x2"+
		"\x2\x2\x23F\x230\x3\x2\x2\x2\x23F\x240\x3\x2\x2\x2\x240)\x3\x2\x2\x2\x241"+
		"\x242\x5\x116\x8C\x2\x242\x243\a\xD6\x2\x2\x243\x245\x3\x2\x2\x2\x244"+
		"\x241\x3\x2\x2\x2\x244\x245\x3\x2\x2\x2\x245\x246\x3\x2\x2\x2\x246\x247"+
		"\a\"\x2\x2\x247\x248\a\xD6\x2\x2\x248\x253\x5,\x17\x2\x249\x24B\a\xD6"+
		"\x2\x2\x24A\x249\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B\x24C\x3\x2\x2"+
		"\x2\x24C\x24E\a\x5\x2\x2\x24D\x24F\a\xD6\x2\x2\x24E\x24D\x3\x2\x2\x2\x24E"+
		"\x24F\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x252\x5,\x17\x2\x251\x24A"+
		"\x3\x2\x2\x2\x252\x255\x3\x2\x2\x2\x253\x251\x3\x2\x2\x2\x253\x254\x3"+
		"\x2\x2\x2\x254+\x3\x2\x2\x2\x255\x253\x3\x2\x2\x2\x256\x258\x5\xFE\x80"+
		"\x2\x257\x259\x5\x114\x8B\x2\x258\x257\x3\x2\x2\x2\x258\x259\x3\x2\x2"+
		"\x2\x259\x25C\x3\x2\x2\x2\x25A\x25B\a\xD6\x2\x2\x25B\x25D\x5\x100\x81"+
		"\x2\x25C\x25A\x3\x2\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x25F\x3\x2\x2\x2"+
		"\x25E\x260\a\xD6\x2\x2\x25F\x25E\x3\x2\x2\x2\x25F\x260\x3\x2\x2\x2\x260"+
		"\x261\x3\x2\x2\x2\x261\x263\a\xBC\x2\x2\x262\x264\a\xD6\x2\x2\x263\x262"+
		"\x3\x2\x2\x2\x263\x264\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x266\x5"+
		"\xC6\x64\x2\x266-\x3\x2\x2\x2\x267\x269\a#\x2\x2\x268\x26A\a\xD6\x2\x2"+
		"\x269\x268\x3\x2\x2\x2\x269\x26A\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B"+
		"\x26D\a\xBC\x2\x2\x26C\x26E\a\xD6\x2\x2\x26D\x26C\x3\x2\x2\x2\x26D\x26E"+
		"\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\x270\x5\xC6\x64\x2\x270/\x3\x2"+
		"\x2\x2\x271\x272\x5\x116\x8C\x2\x272\x273\a\xD6\x2\x2\x273\x275\x3\x2"+
		"\x2\x2\x274\x271\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2\x275\x276\x3\x2\x2"+
		"\x2\x276\x277\a$\x2\x2\x277\x278\a\xD6\x2\x2\x278\x279\t\x3\x2\x2\x279"+
		"\x27A\a\xD6\x2\x2\x27A\x27B\x5\xFE\x80\x2\x27B\x27C\a\xD6\x2\x2\x27C\x27D"+
		"\a\x62\x2\x2\x27D\x27E\a\xD6\x2\x2\x27E\x283\a\xCC\x2\x2\x27F\x280\a\xD6"+
		"\x2\x2\x280\x281\a\xE\x2\x2\x281\x282\a\xD6\x2\x2\x282\x284\a\xCC\x2\x2"+
		"\x283\x27F\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284\x289\x3\x2\x2\x2\x285"+
		"\x287\a\xD6\x2\x2\x286\x285\x3\x2\x2\x2\x286\x287\x3\x2\x2\x2\x287\x288"+
		"\x3\x2\x2\x2\x288\x28A\x5\xF4{\x2\x289\x286\x3\x2\x2\x2\x289\x28A\x3\x2"+
		"\x2\x2\x28A\x28D\x3\x2\x2\x2\x28B\x28C\a\xD6\x2\x2\x28C\x28E\x5\x100\x81"+
		"\x2\x28D\x28B\x3\x2\x2\x2\x28D\x28E\x3\x2\x2\x2\x28E\x31\x3\x2\x2\x2\x28F"+
		"\x290\t\x4\x2\x2\x290\x291\a\xD6\x2\x2\x291\x29C\x5\x10C\x87\x2\x292\x294"+
		"\a\xD6\x2\x2\x293\x292\x3\x2\x2\x2\x293\x294\x3\x2\x2\x2\x294\x295\x3"+
		"\x2\x2\x2\x295\x297\a\x5\x2\x2\x296\x298\a\xD6\x2\x2\x297\x296\x3\x2\x2"+
		"\x2\x297\x298\x3\x2\x2\x2\x298\x299\x3\x2\x2\x2\x299\x29B\x5\x10C\x87"+
		"\x2\x29A\x293\x3\x2\x2\x2\x29B\x29E\x3\x2\x2\x2\x29C\x29A\x3\x2\x2\x2"+
		"\x29C\x29D\x3\x2\x2\x2\x29D\x33\x3\x2\x2\x2\x29E\x29C\x3\x2\x2\x2\x29F"+
		"\x2A0\a\x31\x2\x2\x2A0\x2A1\a\xD6\x2\x2\x2A1\x2A3\x5\xC6\x64\x2\x2A2\x2A4"+
		"\a\xD6\x2\x2\x2A3\x2A2\x3\x2\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4\x2A5\x3"+
		"\x2\x2\x2\x2A5\x2A7\a\x5\x2\x2\x2A6\x2A8\a\xD6\x2\x2\x2A7\x2A6\x3\x2\x2"+
		"\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2A9\x3\x2\x2\x2\x2A9\x2B2\x5\xC6\x64\x2"+
		"\x2AA\x2AC\a\xD6\x2\x2\x2AB\x2AA\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC"+
		"\x2AD\x3\x2\x2\x2\x2AD\x2AF\a\x5\x2\x2\x2AE\x2B0\a\xD6\x2\x2\x2AF\x2AE"+
		"\x3\x2\x2\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0\x2B1\x3\x2\x2\x2\x2B1\x2B3\x5"+
		"\xC6\x64\x2\x2B2\x2AB\x3\x2\x2\x2\x2B2\x2B3\x3\x2\x2\x2\x2B3\x35\x3\x2"+
		"\x2\x2\x2B4\x2B6\a\x33\x2\x2\x2B5\x2B7\a\xD4\x2\x2\x2B6\x2B5\x3\x2\x2"+
		"\x2\x2B7\x2B8\x3\x2\x2\x2\x2B8\x2B6\x3\x2\x2\x2\x2B8\x2B9\x3\x2\x2\x2"+
		"\x2B9\x2C0\x3\x2\x2\x2\x2BA\x2BC\x5\x1C\xF\x2\x2BB\x2BD\a\xD4\x2\x2\x2BC"+
		"\x2BB\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE\x2BC\x3\x2\x2\x2\x2BE\x2BF"+
		"\x3\x2\x2\x2\x2BF\x2C1\x3\x2\x2\x2\x2C0\x2BA\x3\x2\x2\x2\x2C0\x2C1\x3"+
		"\x2\x2\x2\x2C1\x2C2\x3\x2\x2\x2\x2C2\x2EA\a_\x2\x2\x2C3\x2C4\a\x33\x2"+
		"\x2\x2C4\x2C5\a\xD6\x2\x2\x2C5\x2C6\t\x5\x2\x2\x2C6\x2C7\a\xD6\x2\x2\x2C7"+
		"\x2C9\x5\xC6\x64\x2\x2C8\x2CA\a\xD4\x2\x2\x2C9\x2C8\x3\x2\x2\x2\x2CA\x2CB"+
		"\x3\x2\x2\x2\x2CB\x2C9\x3\x2\x2\x2\x2CB\x2CC\x3\x2\x2\x2\x2CC\x2D3\x3"+
		"\x2\x2\x2\x2CD\x2CF\x5\x1C\xF\x2\x2CE\x2D0\a\xD4\x2\x2\x2CF\x2CE\x3\x2"+
		"\x2\x2\x2D0\x2D1\x3\x2\x2\x2\x2D1\x2CF\x3\x2\x2\x2\x2D1\x2D2\x3\x2\x2"+
		"\x2\x2D2\x2D4\x3\x2\x2\x2\x2D3\x2CD\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2"+
		"\x2D4\x2D5\x3\x2\x2\x2\x2D5\x2D6\a_\x2\x2\x2D6\x2EA\x3\x2\x2\x2\x2D7\x2D9"+
		"\a\x33\x2\x2\x2D8\x2DA\a\xD4\x2\x2\x2D9\x2D8\x3\x2\x2\x2\x2DA\x2DB\x3"+
		"\x2\x2\x2\x2DB\x2D9\x3\x2\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC\x2DD\x3\x2"+
		"\x2\x2\x2DD\x2DF\x5\x1C\xF\x2\x2DE\x2E0\a\xD4\x2\x2\x2DF\x2DE\x3\x2\x2"+
		"\x2\x2E0\x2E1\x3\x2\x2\x2\x2E1\x2DF\x3\x2\x2\x2\x2E1\x2E2\x3\x2\x2\x2"+
		"\x2E2\x2E3\x3\x2\x2\x2\x2E3\x2E4\a_\x2\x2\x2E4\x2E5\a\xD6\x2\x2\x2E5\x2E6"+
		"\t\x5\x2\x2\x2E6\x2E7\a\xD6\x2\x2\x2E7\x2E8\x5\xC6\x64\x2\x2E8\x2EA\x3"+
		"\x2\x2\x2\x2E9\x2B4\x3\x2\x2\x2\x2E9\x2C3\x3\x2\x2\x2\x2E9\x2D7\x3\x2"+
		"\x2\x2\x2EA\x37\x3\x2\x2\x2\x2EB\x2EC\a@\x2\x2\x2EC\x39\x3\x2\x2\x2\x2ED"+
		"\x2EE\x5\x116\x8C\x2\x2EE\x2EF\a\xD6\x2\x2\x2EF\x2F1\x3\x2\x2\x2\x2F0"+
		"\x2ED\x3\x2\x2\x2\x2F0\x2F1\x3\x2\x2\x2\x2F1\x2F2\x3\x2\x2\x2\x2F2\x2F3"+
		"\a\x41\x2\x2\x2F3\x2F4\a\xD6\x2\x2\x2F4\x2F6\x5\xFE\x80\x2\x2F5\x2F7\a"+
		"\xD4\x2\x2\x2F6\x2F5\x3\x2\x2\x2\x2F7\x2F8\x3\x2\x2\x2\x2F8\x2F6\x3\x2"+
		"\x2\x2\x2F8\x2F9\x3\x2\x2\x2\x2F9\x2FD\x3\x2\x2\x2\x2FA\x2FC\x5<\x1F\x2"+
		"\x2FB\x2FA\x3\x2\x2\x2\x2FC\x2FF\x3\x2\x2\x2\x2FD\x2FB\x3\x2\x2\x2\x2FD"+
		"\x2FE\x3\x2\x2\x2\x2FE\x300\x3\x2\x2\x2\x2FF\x2FD\x3\x2\x2\x2\x300\x301"+
		"\a\x38\x2\x2\x301;\x3\x2\x2\x2\x302\x30B\x5\xFE\x80\x2\x303\x305\a\xD6"+
		"\x2\x2\x304\x303\x3\x2\x2\x2\x304\x305\x3\x2\x2\x2\x305\x306\x3\x2\x2"+
		"\x2\x306\x308\a\xBC\x2\x2\x307\x309\a\xD6\x2\x2\x308\x307\x3\x2\x2\x2"+
		"\x308\x309\x3\x2\x2\x2\x309\x30A\x3\x2\x2\x2\x30A\x30C\x5\xC6\x64\x2\x30B"+
		"\x304\x3\x2\x2\x2\x30B\x30C\x3\x2\x2\x2\x30C\x30E\x3\x2\x2\x2\x30D\x30F"+
		"\a\xD4\x2\x2\x30E\x30D\x3\x2\x2\x2\x30F\x310\x3\x2\x2\x2\x310\x30E\x3"+
		"\x2\x2\x2\x310\x311\x3\x2\x2\x2\x311=\x3\x2\x2\x2\x312\x313\a\x43\x2\x2"+
		"\x313\x314\a\xD6\x2\x2\x314\x315\x5\xC6\x64\x2\x315?\x3\x2\x2\x2\x316"+
		"\x317\a\x44\x2\x2\x317\x318\a\xD6\x2\x2\x318\x319\x5\xC6\x64\x2\x319\x41"+
		"\x3\x2\x2\x2\x31A\x31B\x5\x116\x8C\x2\x31B\x31C\a\xD6\x2\x2\x31C\x31E"+
		"\x3\x2\x2\x2\x31D\x31A\x3\x2\x2\x2\x31D\x31E\x3\x2\x2\x2\x31E\x31F\x3"+
		"\x2\x2\x2\x31F\x320\a\x45\x2\x2\x320\x321\a\xD6\x2\x2\x321\x323\x5\xFE"+
		"\x80\x2\x322\x324\a\xD6\x2\x2\x323\x322\x3\x2\x2\x2\x323\x324\x3\x2\x2"+
		"\x2\x324\x325\x3\x2\x2\x2\x325\x326\x5\xF4{\x2\x326\x43\x3\x2\x2\x2\x327"+
		"\x328\t\x6\x2\x2\x328\x45\x3\x2\x2\x2\x329\x32A\aL\x2\x2\x32A\x32B\a\xD6"+
		"\x2\x2\x32B\x32D\x5\xC6\x64\x2\x32C\x32E\a\xD6\x2\x2\x32D\x32C\x3\x2\x2"+
		"\x2\x32D\x32E\x3\x2\x2\x2\x32E\x32F\x3\x2\x2\x2\x32F\x331\a\x5\x2\x2\x330"+
		"\x332\a\xD6\x2\x2\x331\x330\x3\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332\x333"+
		"\x3\x2\x2\x2\x333\x334\x5\xC6\x64\x2\x334G\x3\x2\x2\x2\x335\x336\aN\x2"+
		"\x2\x336\x337\a\xD6\x2\x2\x337\x338\a\x35\x2\x2\x338\x339\a\xD6\x2\x2"+
		"\x339\x33B\x5\xFE\x80\x2\x33A\x33C\x5\x114\x8B\x2\x33B\x33A\x3\x2\x2\x2"+
		"\x33B\x33C\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2\x33D\x33E\a\xD6\x2\x2\x33E"+
		"\x33F\aW\x2\x2\x33F\x340\a\xD6\x2\x2\x340\x342\x5\xC6\x64\x2\x341\x343"+
		"\a\xD4\x2\x2\x342\x341\x3\x2\x2\x2\x343\x344\x3\x2\x2\x2\x344\x342\x3"+
		"\x2\x2\x2\x344\x345\x3\x2\x2\x2\x345\x34C\x3\x2\x2\x2\x346\x348\x5\x1C"+
		"\xF\x2\x347\x349\a\xD4\x2\x2\x348\x347\x3\x2\x2\x2\x349\x34A\x3\x2\x2"+
		"\x2\x34A\x348\x3\x2\x2\x2\x34A\x34B\x3\x2\x2\x2\x34B\x34D\x3\x2\x2\x2"+
		"\x34C\x346\x3\x2\x2\x2\x34C\x34D\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E"+
		"\x351\ar\x2\x2\x34F\x350\a\xD6\x2\x2\x350\x352\x5\xFE\x80\x2\x351\x34F"+
		"\x3\x2\x2\x2\x351\x352\x3\x2\x2\x2\x352I\x3\x2\x2\x2\x353\x354\aN\x2\x2"+
		"\x354\x355\a\xD6\x2\x2\x355\x357\x5\xFE\x80\x2\x356\x358\x5\x114\x8B\x2"+
		"\x357\x356\x3\x2\x2\x2\x357\x358\x3\x2\x2\x2\x358\x35B\x3\x2\x2\x2\x359"+
		"\x35A\a\xD6\x2\x2\x35A\x35C\x5\x100\x81\x2\x35B\x359\x3\x2\x2\x2\x35B"+
		"\x35C\x3\x2\x2\x2\x35C\x35E\x3\x2\x2\x2\x35D\x35F\a\xD6\x2\x2\x35E\x35D"+
		"\x3\x2\x2\x2\x35E\x35F\x3\x2\x2\x2\x35F\x360\x3\x2\x2\x2\x360\x362\a\xBC"+
		"\x2\x2\x361\x363\a\xD6\x2\x2\x362\x361\x3\x2\x2\x2\x362\x363\x3\x2\x2"+
		"\x2\x363\x364\x3\x2\x2\x2\x364\x365\x5\xC6\x64\x2\x365\x366\a\xD6\x2\x2"+
		"\x366\x367\a\xA9\x2\x2\x367\x368\a\xD6\x2\x2\x368\x36D\x5\xC6\x64\x2\x369"+
		"\x36A\a\xD6\x2\x2\x36A\x36B\a\xA1\x2\x2\x36B\x36C\a\xD6\x2\x2\x36C\x36E"+
		"\x5\xC6\x64\x2\x36D\x369\x3\x2\x2\x2\x36D\x36E\x3\x2\x2\x2\x36E\x370\x3"+
		"\x2\x2\x2\x36F\x371\a\xD4\x2\x2\x370\x36F\x3\x2\x2\x2\x371\x372\x3\x2"+
		"\x2\x2\x372\x370\x3\x2\x2\x2\x372\x373\x3\x2\x2\x2\x373\x37A\x3\x2\x2"+
		"\x2\x374\x376\x5\x1C\xF\x2\x375\x377\a\xD4\x2\x2\x376\x375\x3\x2\x2\x2"+
		"\x377\x378\x3\x2\x2\x2\x378\x376\x3\x2\x2\x2\x378\x379\x3\x2\x2\x2\x379"+
		"\x37B\x3\x2\x2\x2\x37A\x374\x3\x2\x2\x2\x37A\x37B\x3\x2\x2\x2\x37B\x37C"+
		"\x3\x2\x2\x2\x37C\x37F\ar\x2\x2\x37D\x37E\a\xD6\x2\x2\x37E\x380\x5\xFE"+
		"\x80\x2\x37F\x37D\x3\x2\x2\x2\x37F\x380\x3\x2\x2\x2\x380K\x3\x2\x2\x2"+
		"\x381\x382\x5\x116\x8C\x2\x382\x383\a\xD6\x2\x2\x383\x385\x3\x2\x2\x2"+
		"\x384\x381\x3\x2\x2\x2\x384\x385\x3\x2\x2\x2\x385\x388\x3\x2\x2\x2\x386"+
		"\x387\a\xA0\x2\x2\x387\x389\a\xD6\x2\x2\x388\x386\x3\x2\x2\x2\x388\x389"+
		"\x3\x2\x2\x2\x389\x38A\x3\x2\x2\x2\x38A\x38B\aO\x2\x2\x38B\x38C\a\xD6"+
		"\x2\x2\x38C\x391\x5\xFE\x80\x2\x38D\x38F\a\xD6\x2\x2\x38E\x38D\x3\x2\x2"+
		"\x2\x38E\x38F\x3\x2\x2\x2\x38F\x390\x3\x2\x2\x2\x390\x392\x5\xF4{\x2\x391"+
		"\x38E\x3\x2\x2\x2\x391\x392\x3\x2\x2\x2\x392\x395\x3\x2\x2\x2\x393\x394"+
		"\a\xD6\x2\x2\x394\x396\x5\x100\x81\x2\x395\x393\x3\x2\x2\x2\x395\x396"+
		"\x3\x2\x2\x2\x396\x398\x3\x2\x2\x2\x397\x399\a\xD4\x2\x2\x398\x397\x3"+
		"\x2\x2\x2\x399\x39A\x3\x2\x2\x2\x39A\x398\x3\x2\x2\x2\x39A\x39B\x3\x2"+
		"\x2\x2\x39B\x3A2\x3\x2\x2\x2\x39C\x39E\x5\x1C\xF\x2\x39D\x39F\a\xD4\x2"+
		"\x2\x39E\x39D\x3\x2\x2\x2\x39F\x3A0\x3\x2\x2\x2\x3A0\x39E\x3\x2\x2\x2"+
		"\x3A0\x3A1\x3\x2\x2\x2\x3A1\x3A3\x3\x2\x2\x2\x3A2\x39C\x3\x2\x2\x2\x3A2"+
		"\x3A3\x3\x2\x2\x2\x3A3\x3A4\x3\x2\x2\x2\x3A4\x3A5\a\x39\x2\x2\x3A5M\x3"+
		"\x2\x2\x2\x3A6\x3A7\aP\x2\x2\x3A7\x3A8\a\xD6\x2\x2\x3A8\x3AA\x5\xC6\x64"+
		"\x2\x3A9\x3AB\a\xD6\x2\x2\x3AA\x3A9\x3\x2\x2\x2\x3AA\x3AB\x3\x2\x2\x2"+
		"\x3AB\x3AC\x3\x2\x2\x2\x3AC\x3AE\a\x5\x2\x2\x3AD\x3AF\a\xD6\x2\x2\x3AE"+
		"\x3AD\x3\x2\x2\x2\x3AE\x3AF\x3\x2\x2\x2\x3AF\x3B1\x3\x2\x2\x2\x3B0\x3B2"+
		"\x5\xC6\x64\x2\x3B1\x3B0\x3\x2\x2\x2\x3B1\x3B2\x3\x2\x2\x2\x3B2\x3B4\x3"+
		"\x2\x2\x2\x3B3\x3B5\a\xD6\x2\x2\x3B4\x3B3\x3\x2\x2\x2\x3B4\x3B5\x3\x2"+
		"\x2\x2\x3B5\x3B6\x3\x2\x2\x2\x3B6\x3B8\a\x5\x2\x2\x3B7\x3B9\a\xD6\x2\x2"+
		"\x3B8\x3B7\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA"+
		"\x3BB\x5\xC6\x64\x2\x3BBO\x3\x2\x2\x2\x3BC\x3BD\aR\x2\x2\x3BD\x3BE\a\xD6"+
		"\x2\x2\x3BE\x3BF\x5\xC6\x64\x2\x3BFQ\x3\x2\x2\x2\x3C0\x3C1\aS\x2\x2\x3C1"+
		"\x3C2\a\xD6\x2\x2\x3C2\x3C3\x5\xC6\x64\x2\x3C3S\x3\x2\x2\x2\x3C4\x3C5"+
		"\aT\x2\x2\x3C5\x3C6\a\xD6\x2\x2\x3C6\x3C7\x5X-\x2\x3C7\x3C8\a\xD6\x2\x2"+
		"\x3C8\x3C9\a\xA7\x2\x2\x3C9\x3CA\a\xD6\x2\x2\x3CA\x3CF\x5\x1E\x10\x2\x3CB"+
		"\x3CC\a\xD6\x2\x2\x3CC\x3CD\a\x36\x2\x2\x3CD\x3CE\a\xD6\x2\x2\x3CE\x3D0"+
		"\x5\x1E\x10\x2\x3CF\x3CB\x3\x2\x2\x2\x3CF\x3D0\x3\x2\x2\x2\x3D0\x3DE\x3"+
		"\x2\x2\x2\x3D1\x3D5\x5V,\x2\x3D2\x3D4\x5Z.\x2\x3D3\x3D2\x3\x2\x2\x2\x3D4"+
		"\x3D7\x3\x2\x2\x2\x3D5\x3D3\x3\x2\x2\x2\x3D5\x3D6\x3\x2\x2\x2\x3D6\x3D9"+
		"\x3\x2\x2\x2\x3D7\x3D5\x3\x2\x2\x2\x3D8\x3DA\x5\\/\x2\x3D9\x3D8\x3\x2"+
		"\x2\x2\x3D9\x3DA\x3\x2\x2\x2\x3DA\x3DB\x3\x2\x2\x2\x3DB\x3DC\a:\x2\x2"+
		"\x3DC\x3DE\x3\x2\x2\x2\x3DD\x3C4\x3\x2\x2\x2\x3DD\x3D1\x3\x2\x2\x2\x3DE"+
		"U\x3\x2\x2\x2\x3DF\x3E0\aT\x2\x2\x3E0\x3E1\a\xD6\x2\x2\x3E1\x3E2\x5X-"+
		"\x2\x3E2\x3E3\a\xD6\x2\x2\x3E3\x3E5\a\xA7\x2\x2\x3E4\x3E6\a\xD4\x2\x2"+
		"\x3E5\x3E4\x3\x2\x2\x2\x3E6\x3E7\x3\x2\x2\x2\x3E7\x3E5\x3\x2\x2\x2\x3E7"+
		"\x3E8\x3\x2\x2\x2\x3E8\x3EF\x3\x2\x2\x2\x3E9\x3EB\x5\x1C\xF\x2\x3EA\x3EC"+
		"\a\xD4\x2\x2\x3EB\x3EA\x3\x2\x2\x2\x3EC\x3ED\x3\x2\x2\x2\x3ED\x3EB\x3"+
		"\x2\x2\x2\x3ED\x3EE\x3\x2\x2\x2\x3EE\x3F0\x3\x2\x2\x2\x3EF\x3E9\x3\x2"+
		"\x2\x2\x3EF\x3F0\x3\x2\x2\x2\x3F0W\x3\x2\x2\x2\x3F1\x3F2\x5\xC6\x64\x2"+
		"\x3F2Y\x3\x2\x2\x2\x3F3\x3F4\a\x37\x2\x2\x3F4\x3F5\a\xD6\x2\x2\x3F5\x3F6"+
		"\x5X-\x2\x3F6\x3F7\a\xD6\x2\x2\x3F7\x3F9\a\xA7\x2\x2\x3F8\x3FA\a\xD4\x2"+
		"\x2\x3F9\x3F8\x3\x2\x2\x2\x3FA\x3FB\x3\x2\x2\x2\x3FB\x3F9\x3\x2\x2\x2"+
		"\x3FB\x3FC\x3\x2\x2\x2\x3FC\x403\x3\x2\x2\x2\x3FD\x3FF\x5\x1C\xF\x2\x3FE"+
		"\x400\a\xD4\x2\x2\x3FF\x3FE\x3\x2\x2\x2\x400\x401\x3\x2\x2\x2\x401\x3FF"+
		"\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x404\x3\x2\x2\x2\x403\x3FD\x3"+
		"\x2\x2\x2\x403\x404\x3\x2\x2\x2\x404[\x3\x2\x2\x2\x405\x407\a\x36\x2\x2"+
		"\x406\x408\a\xD4\x2\x2\x407\x406\x3\x2\x2\x2\x408\x409\x3\x2\x2\x2\x409"+
		"\x407\x3\x2\x2\x2\x409\x40A\x3\x2\x2\x2\x40A\x411\x3\x2\x2\x2\x40B\x40D"+
		"\x5\x1C\xF\x2\x40C\x40E\a\xD4\x2\x2\x40D\x40C\x3\x2\x2\x2\x40E\x40F\x3"+
		"\x2\x2\x2\x40F\x40D\x3\x2\x2\x2\x40F\x410\x3\x2\x2\x2\x410\x412\x3\x2"+
		"\x2\x2\x411\x40B\x3\x2\x2\x2\x411\x412\x3\x2\x2\x2\x412]\x3\x2\x2\x2\x413"+
		"\x414\aV\x2\x2\x414\x415\a\xD6\x2\x2\x415\x416\x5\xFE\x80\x2\x416_\x3"+
		"\x2\x2\x2\x417\x418\aX\x2\x2\x418\x419\a\xD6\x2\x2\x419\x422\x5\xC6\x64"+
		"\x2\x41A\x41C\a\xD6\x2\x2\x41B\x41A\x3\x2\x2\x2\x41B\x41C\x3\x2\x2\x2"+
		"\x41C\x41D\x3\x2\x2\x2\x41D\x41F\a\x5\x2\x2\x41E\x420\a\xD6\x2\x2\x41F"+
		"\x41E\x3\x2\x2\x2\x41F\x420\x3\x2\x2\x2\x420\x421\x3\x2\x2\x2\x421\x423"+
		"\x5\xC6\x64\x2\x422\x41B\x3\x2\x2\x2\x423\x424\x3\x2\x2\x2\x424\x422\x3"+
		"\x2\x2\x2\x424\x425\x3\x2\x2\x2\x425\x61\x3\x2\x2\x2\x426\x427\a[\x2\x2"+
		"\x427\x428\a\xD6\x2\x2\x428\x429\x5\xC6\x64\x2\x429\x63\x3\x2\x2\x2\x42A"+
		"\x42B\a\x61\x2\x2\x42B\x42D\a\xD6\x2\x2\x42C\x42A\x3\x2\x2\x2\x42C\x42D"+
		"\x3\x2\x2\x2\x42D\x42E\x3\x2\x2\x2\x42E\x430\x5\xE2r\x2\x42F\x431\a\xD6"+
		"\x2\x2\x430\x42F\x3\x2\x2\x2\x430\x431\x3\x2\x2\x2\x431\x432\x3\x2\x2"+
		"\x2\x432\x434\t\a\x2\x2\x433\x435\a\xD6\x2\x2\x434\x433\x3\x2\x2\x2\x434"+
		"\x435\x3\x2\x2\x2\x435\x436\x3\x2\x2\x2\x436\x437\x5\xC6\x64\x2\x437\x65"+
		"\x3\x2\x2\x2\x438\x439\a\x64\x2\x2\x439\x43A\a\xD6\x2\x2\x43A\x43C\x5"+
		"\xC6\x64\x2\x43B\x43D\a\xD6\x2\x2\x43C\x43B\x3\x2\x2\x2\x43C\x43D\x3\x2"+
		"\x2\x2\x43D\x43E\x3\x2\x2\x2\x43E\x440\a\x5\x2\x2\x43F\x441\a\xD6\x2\x2"+
		"\x440\x43F\x3\x2\x2\x2\x440\x441\x3\x2\x2\x2\x441\x442\x3\x2\x2\x2\x442"+
		"\x443\x5\xC6\x64\x2\x443g\x3\x2\x2\x2\x444\x445\a\\\x2\x2\x445\x446\a"+
		"\xD6\x2\x2\x446\x447\x5\xC6\x64\x2\x447i\x3\x2\x2\x2\x448\x449\a]\x2\x2"+
		"\x449\x44A\a\xD6\x2\x2\x44A\x459\x5\xC6\x64\x2\x44B\x44D\a\xD6\x2\x2\x44C"+
		"\x44B\x3\x2\x2\x2\x44C\x44D\x3\x2\x2\x2\x44D\x44E\x3\x2\x2\x2\x44E\x450"+
		"\a\x5\x2\x2\x44F\x451\a\xD6\x2\x2\x450\x44F\x3\x2\x2\x2\x450\x451\x3\x2"+
		"\x2\x2\x451\x452\x3\x2\x2\x2\x452\x457\x5\xC6\x64\x2\x453\x454\a\xD6\x2"+
		"\x2\x454\x455\a\xA9\x2\x2\x455\x456\a\xD6\x2\x2\x456\x458\x5\xC6\x64\x2"+
		"\x457\x453\x3\x2\x2\x2\x457\x458\x3\x2\x2\x2\x458\x45A\x3\x2\x2\x2\x459"+
		"\x44C\x3\x2\x2\x2\x459\x45A\x3\x2\x2\x2\x45Ak\x3\x2\x2\x2\x45B\x45C\a"+
		"h\x2\x2\x45C\x45D\a\xD6\x2\x2\x45D\x45F\x5\xE2r\x2\x45E\x460\a\xD6\x2"+
		"\x2\x45F\x45E\x3\x2\x2\x2\x45F\x460\x3\x2\x2\x2\x460\x461\x3\x2\x2\x2"+
		"\x461\x463\a\xBC\x2\x2\x462\x464\a\xD6\x2\x2\x463\x462\x3\x2\x2\x2\x463"+
		"\x464\x3\x2\x2\x2\x464\x465\x3\x2\x2\x2\x465\x466\x5\xC6\x64\x2\x466m"+
		"\x3\x2\x2\x2\x467\x46B\x5p\x39\x2\x468\x46A\x5r:\x2\x469\x468\x3\x2\x2"+
		"\x2\x46A\x46D\x3\x2\x2\x2\x46B\x469\x3\x2\x2\x2\x46B\x46C\x3\x2\x2\x2"+
		"\x46C\x46F\x3\x2\x2\x2\x46D\x46B\x3\x2\x2\x2\x46E\x470\x5t;\x2\x46F\x46E"+
		"\x3\x2\x2\x2\x46F\x470\x3\x2\x2\x2\x470\x471\x3\x2\x2\x2\x471\x472\al"+
		"\x2\x2\x472o\x3\x2\x2\x2\x473\x474\ai\x2\x2\x474\x475\a\xD6\x2\x2\x475"+
		"\x476\x5X-\x2\x476\x477\a\xD6\x2\x2\x477\x479\a\xA7\x2\x2\x478\x47A\a"+
		"\xD4\x2\x2\x479\x478\x3\x2\x2\x2\x47A\x47B\x3\x2\x2\x2\x47B\x479\x3\x2"+
		"\x2\x2\x47B\x47C\x3\x2\x2\x2\x47C\x483\x3\x2\x2\x2\x47D\x47F\x5\x14\v"+
		"\x2\x47E\x480\a\xD4\x2\x2\x47F\x47E\x3\x2\x2\x2\x480\x481\x3\x2\x2\x2"+
		"\x481\x47F\x3\x2\x2\x2\x481\x482\x3\x2\x2\x2\x482\x484\x3\x2\x2\x2\x483"+
		"\x47D\x3\x2\x2\x2\x483\x484\x3\x2\x2\x2\x484q\x3\x2\x2\x2\x485\x486\a"+
		"j\x2\x2\x486\x487\a\xD6\x2\x2\x487\x488\x5X-\x2\x488\x489\a\xD6\x2\x2"+
		"\x489\x48B\a\xA7\x2\x2\x48A\x48C\a\xD4\x2\x2\x48B\x48A\x3\x2\x2\x2\x48C"+
		"\x48D\x3\x2\x2\x2\x48D\x48B\x3\x2\x2\x2\x48D\x48E\x3\x2\x2\x2\x48E\x495"+
		"\x3\x2\x2\x2\x48F\x491\x5\x14\v\x2\x490\x492\a\xD4\x2\x2\x491\x490\x3"+
		"\x2\x2\x2\x492\x493\x3\x2\x2\x2\x493\x491\x3\x2\x2\x2\x493\x494\x3\x2"+
		"\x2\x2\x494\x496\x3\x2\x2\x2\x495\x48F\x3\x2\x2\x2\x495\x496\x3\x2\x2"+
		"\x2\x496s\x3\x2\x2\x2\x497\x499\ak\x2\x2\x498\x49A\a\xD4\x2\x2\x499\x498"+
		"\x3\x2\x2\x2\x49A\x49B\x3\x2\x2\x2\x49B\x499\x3\x2\x2\x2\x49B\x49C\x3"+
		"\x2\x2\x2\x49C\x4A3\x3\x2\x2\x2\x49D\x49F\x5\x14\v\x2\x49E\x4A0\a\xD4"+
		"\x2\x2\x49F\x49E\x3\x2\x2\x2\x4A0\x4A1\x3\x2\x2\x2\x4A1\x49F\x3\x2\x2"+
		"\x2\x4A1\x4A2\x3\x2\x2\x2\x4A2\x4A4\x3\x2\x2\x2\x4A3\x49D\x3\x2\x2\x2"+
		"\x4A3\x4A4\x3\x2\x2\x2\x4A4u\x3\x2\x2\x2\x4A5\x4A7\an\x2\x2\x4A6\x4A8"+
		"\a\xD6\x2\x2\x4A7\x4A6\x3\x2\x2\x2\x4A7\x4A8\x3\x2\x2\x2\x4A8\x4A9\x3"+
		"\x2\x2\x2\x4A9\x4AB\a\xC0\x2\x2\x4AA\x4AC\a\xD6\x2\x2\x4AB\x4AA\x3\x2"+
		"\x2\x2\x4AB\x4AC\x3\x2\x2\x2\x4AC\x4AD\x3\x2\x2\x2\x4AD\x4AF\x5\xEEx\x2"+
		"\x4AE\x4B0\a\xD6\x2\x2\x4AF\x4AE\x3\x2\x2\x2\x4AF\x4B0\x3\x2\x2\x2\x4B0"+
		"\x4B1\x3\x2\x2\x2\x4B1\x4B2\a\xC9\x2\x2\x4B2w\x3\x2\x2\x2\x4B3\x4B4\a"+
		"o\x2\x2\x4B4\x4B5\a\xD6\x2\x2\x4B5\x4B6\x5\xC6\x64\x2\x4B6y\x3\x2\x2\x2"+
		"\x4B7\x4B8\aq\x2\x2\x4B8\x4B9\a\xD6\x2\x2\x4B9\x4BA\x5\xC6\x64\x2\x4BA"+
		"\x4BB\a\xD6\x2\x2\x4BB\x4BC\a\x13\x2\x2\x4BC\x4BD\a\xD6\x2\x2\x4BD\x4BE"+
		"\x5\xC6\x64\x2\x4BE{\x3\x2\x2\x2\x4BF\x4C0\ax\x2\x2\x4C0\x4C7\a\xD6\x2"+
		"\x2\x4C1\x4C2\aS\x2\x2\x4C2\x4C3\a\xD6\x2\x2\x4C3\x4C8\x5\xC6\x64\x2\x4C4"+
		"\x4C5\a\x92\x2\x2\x4C5\x4C6\a\xD6\x2\x2\x4C6\x4C8\ar\x2\x2\x4C7\x4C1\x3"+
		"\x2\x2\x2\x4C7\x4C4\x3\x2\x2\x2\x4C8}\x3\x2\x2\x2\x4C9\x4CA\aw\x2\x2\x4CA"+
		"\x4CB\a\xD6\x2\x2\x4CB\x4CC\x5\xC6\x64\x2\x4CC\x4CD\a\xD6\x2\x2\x4CD\x4CE"+
		"\aS\x2\x2\x4CE\x4CF\a\xD6\x2\x2\x4CF\x4DA\x5\xC6\x64\x2\x4D0\x4D2\a\xD6"+
		"\x2\x2\x4D1\x4D0\x3\x2\x2\x2\x4D1\x4D2\x3\x2\x2\x2\x4D2\x4D3\x3\x2\x2"+
		"\x2\x4D3\x4D5\a\x5\x2\x2\x4D4\x4D6\a\xD6\x2\x2\x4D5\x4D4\x3\x2\x2\x2\x4D5"+
		"\x4D6\x3\x2\x2\x2\x4D6\x4D7\x3\x2\x2\x2\x4D7\x4D9\x5\xC6\x64\x2\x4D8\x4D1"+
		"\x3\x2\x2\x2\x4D9\x4DC\x3\x2\x2\x2\x4DA\x4D8\x3\x2\x2\x2\x4DA\x4DB\x3"+
		"\x2\x2\x2\x4DB\x7F\x3\x2\x2\x2\x4DC\x4DA\x3\x2\x2\x2\x4DD\x4DE\aw\x2\x2"+
		"\x4DE\x4DF\a\xD6\x2\x2\x4DF\x4E0\x5\xC6\x64\x2\x4E0\x4E1\a\xD6\x2\x2\x4E1"+
		"\x4E2\aR\x2\x2\x4E2\x4E3\a\xD6\x2\x2\x4E3\x4EE\x5\xC6\x64\x2\x4E4\x4E6"+
		"\a\xD6\x2\x2\x4E5\x4E4\x3\x2\x2\x2\x4E5\x4E6\x3\x2\x2\x2\x4E6\x4E7\x3"+
		"\x2\x2\x2\x4E7\x4E9\a\x5\x2\x2\x4E8\x4EA\a\xD6\x2\x2\x4E9\x4E8\x3\x2\x2"+
		"\x2\x4E9\x4EA\x3\x2\x2\x2\x4EA\x4EB\x3\x2\x2\x2\x4EB\x4ED\x5\xC6\x64\x2"+
		"\x4EC\x4E5\x3\x2\x2\x2\x4ED\x4F0\x3\x2\x2\x2\x4EE\x4EC\x3\x2\x2\x2\x4EE"+
		"\x4EF\x3\x2\x2\x2\x4EF\x81\x3\x2\x2\x2\x4F0\x4EE\x3\x2\x2\x2\x4F1\x4F2"+
		"\ay\x2\x2\x4F2\x4F3\a\xD6\x2\x2\x4F3\x4F4\x5\xC6\x64\x2\x4F4\x4F5\a\xD6"+
		"\x2\x2\x4F5\x4F6\aN\x2\x2\x4F6\x4F7\a\xD6\x2\x2\x4F7\x4FC\t\b\x2\x2\x4F8"+
		"\x4F9\a\xD6\x2\x2\x4F9\x4FA\a\f\x2\x2\x4FA\x4FB\a\xD6\x2\x2\x4FB\x4FD"+
		"\t\t\x2\x2\x4FC\x4F8\x3\x2\x2\x2\x4FC\x4FD\x3\x2\x2\x2\x4FD\x500\x3\x2"+
		"\x2\x2\x4FE\x4FF\a\xD6\x2\x2\x4FF\x501\t\n\x2\x2\x500\x4FE\x3\x2\x2\x2"+
		"\x500\x501\x3\x2\x2\x2\x501\x502\x3\x2\x2\x2\x502\x503\a\xD6\x2\x2\x503"+
		"\x504\a\x13\x2\x2\x504\x505\a\xD6\x2\x2\x505\x510\x5\xC6\x64\x2\x506\x507"+
		"\a\xD6\x2\x2\x507\x509\a`\x2\x2\x508\x50A\a\xD6\x2\x2\x509\x508\x3\x2"+
		"\x2\x2\x509\x50A\x3\x2\x2\x2\x50A\x50B\x3\x2\x2\x2\x50B\x50D\a\xBC\x2"+
		"\x2\x50C\x50E\a\xD6\x2\x2\x50D\x50C\x3\x2\x2\x2\x50D\x50E\x3\x2\x2\x2"+
		"\x50E\x50F\x3\x2\x2\x2\x50F\x511\x5\xC6\x64\x2\x510\x506\x3\x2\x2\x2\x510"+
		"\x511\x3\x2\x2\x2\x511\x83\x3\x2\x2\x2\x512\x51F\x5\x86\x44\x2\x513\x515"+
		"\a\xD6\x2\x2\x514\x513\x3\x2\x2\x2\x514\x515\x3\x2\x2\x2\x515\x516\x3"+
		"\x2\x2\x2\x516\x518\t\v\x2\x2\x517\x519\a\xD6\x2\x2\x518\x517\x3\x2\x2"+
		"\x2\x518\x519\x3\x2\x2\x2\x519\x51B\x3\x2\x2\x2\x51A\x51C\x5\x86\x44\x2"+
		"\x51B\x51A\x3\x2\x2\x2\x51B\x51C\x3\x2\x2\x2\x51C\x51E\x3\x2\x2\x2\x51D"+
		"\x514\x3\x2\x2\x2\x51E\x521\x3\x2\x2\x2\x51F\x51D\x3\x2\x2\x2\x51F\x520"+
		"\x3\x2\x2\x2\x520\x534\x3\x2\x2\x2\x521\x51F\x3\x2\x2\x2\x522\x524\x5"+
		"\x86\x44\x2\x523\x522\x3\x2\x2\x2\x523\x524\x3\x2\x2\x2\x524\x52F\x3\x2"+
		"\x2\x2\x525\x527\a\xD6\x2\x2\x526\x525\x3\x2\x2\x2\x526\x527\x3\x2\x2"+
		"\x2\x527\x528\x3\x2\x2\x2\x528\x52A\t\v\x2\x2\x529\x52B\a\xD6\x2\x2\x52A"+
		"\x529\x3\x2\x2\x2\x52A\x52B\x3\x2\x2\x2\x52B\x52D\x3\x2\x2\x2\x52C\x52E"+
		"\x5\x86\x44\x2\x52D\x52C\x3\x2\x2\x2\x52D\x52E\x3\x2\x2\x2\x52E\x530\x3"+
		"\x2\x2\x2\x52F\x526\x3\x2\x2\x2\x530\x531\x3\x2\x2\x2\x531\x52F\x3\x2"+
		"\x2\x2\x531\x532\x3\x2\x2\x2\x532\x534\x3\x2\x2\x2\x533\x512\x3\x2\x2"+
		"\x2\x533\x523\x3\x2\x2\x2\x534\x85\x3\x2\x2\x2\x535\x547\x5\xC6\x64\x2"+
		"\x536\x544\t\f\x2\x2\x537\x539\a\xD6\x2\x2\x538\x537\x3\x2\x2\x2\x538"+
		"\x539\x3\x2\x2\x2\x539\x53A\x3\x2\x2\x2\x53A\x53C\a\xC0\x2\x2\x53B\x53D"+
		"\a\xD6\x2\x2\x53C\x53B\x3\x2\x2\x2\x53C\x53D\x3\x2\x2\x2\x53D\x53E\x3"+
		"\x2\x2\x2\x53E\x540\x5\xEEx\x2\x53F\x541\a\xD6\x2\x2\x540\x53F\x3\x2\x2"+
		"\x2\x540\x541\x3\x2\x2\x2\x541\x542\x3\x2\x2\x2\x542\x543\a\xC9\x2\x2"+
		"\x543\x545\x3\x2\x2\x2\x544\x538\x3\x2\x2\x2\x544\x545\x3\x2\x2\x2\x545"+
		"\x547\x3\x2\x2\x2\x546\x535\x3\x2\x2\x2\x546\x536\x3\x2\x2\x2\x547\x87"+
		"\x3\x2\x2\x2\x548\x549\a\x83\x2\x2\x549\x54A\a\xD6\x2\x2\x54A\x54C\x5"+
		"\xC6\x64\x2\x54B\x54D\a\xD6\x2\x2\x54C\x54B\x3\x2\x2\x2\x54C\x54D\x3\x2"+
		"\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E\x553\a\x5\x2\x2\x54F\x551\a\xD6\x2\x2"+
		"\x550\x54F\x3\x2\x2\x2\x550\x551\x3\x2\x2\x2\x551\x552\x3\x2\x2\x2\x552"+
		"\x554\x5\x84\x43\x2\x553\x550\x3\x2\x2\x2\x553\x554\x3\x2\x2\x2\x554\x89"+
		"\x3\x2\x2\x2\x555\x556\x5\x116\x8C\x2\x556\x557\a\xD6\x2\x2\x557\x559"+
		"\x3\x2\x2\x2\x558\x555\x3\x2\x2\x2\x558\x559\x3\x2\x2\x2\x559\x55C\x3"+
		"\x2\x2\x2\x55A\x55B\a\xA0\x2\x2\x55B\x55D\a\xD6\x2\x2\x55C\x55A\x3\x2"+
		"\x2\x2\x55C\x55D\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x55F\a\x85\x2"+
		"\x2\x55F\x560\a\xD6\x2\x2\x560\x565\x5\xFE\x80\x2\x561\x563\a\xD6\x2\x2"+
		"\x562\x561\x3\x2\x2\x2\x562\x563\x3\x2\x2\x2\x563\x564\x3\x2\x2\x2\x564"+
		"\x566\x5\xF4{\x2\x565\x562\x3\x2\x2\x2\x565\x566\x3\x2\x2\x2\x566\x569"+
		"\x3\x2\x2\x2\x567\x568\a\xD6\x2\x2\x568\x56A\x5\x100\x81\x2\x569\x567"+
		"\x3\x2\x2\x2\x569\x56A\x3\x2\x2\x2\x56A\x56C\x3\x2\x2\x2\x56B\x56D\a\xD4"+
		"\x2\x2\x56C\x56B\x3\x2\x2\x2\x56D\x56E\x3\x2\x2\x2\x56E\x56C\x3\x2\x2"+
		"\x2\x56E\x56F\x3\x2\x2\x2\x56F\x576\x3\x2\x2\x2\x570\x572\x5\x1C\xF\x2"+
		"\x571\x573\a\xD4\x2\x2\x572\x571\x3\x2\x2\x2\x573\x574\x3\x2\x2\x2\x574"+
		"\x572\x3\x2\x2\x2\x574\x575\x3\x2\x2\x2\x575\x577\x3\x2\x2\x2\x576\x570"+
		"\x3\x2\x2\x2\x576\x577\x3\x2\x2\x2\x577\x578\x3\x2\x2\x2\x578\x579\a;"+
		"\x2\x2\x579\x8B\x3\x2\x2\x2\x57A\x57B\x5\x116\x8C\x2\x57B\x57C\a\xD6\x2"+
		"\x2\x57C\x57E\x3\x2\x2\x2\x57D\x57A\x3\x2\x2\x2\x57D\x57E\x3\x2\x2\x2"+
		"\x57E\x581\x3\x2\x2\x2\x57F\x580\a\xA0\x2\x2\x580\x582\a\xD6\x2\x2\x581"+
		"\x57F\x3\x2\x2\x2\x581\x582\x3\x2\x2\x2\x582\x583\x3\x2\x2\x2\x583\x584"+
		"\a\x87\x2\x2\x584\x585\a\xD6\x2\x2\x585\x58A\x5\xFE\x80\x2\x586\x588\a"+
		"\xD6\x2\x2\x587\x586\x3\x2\x2\x2\x587\x588\x3\x2\x2\x2\x588\x589\x3\x2"+
		"\x2\x2\x589\x58B\x5\xF4{\x2\x58A\x587\x3\x2\x2\x2\x58A\x58B\x3\x2\x2\x2"+
		"\x58B\x58D\x3\x2\x2\x2\x58C\x58E\a\xD4\x2\x2\x58D\x58C\x3\x2\x2\x2\x58E"+
		"\x58F\x3\x2\x2\x2\x58F\x58D\x3\x2\x2\x2\x58F\x590\x3\x2\x2\x2\x590\x597"+
		"\x3\x2\x2\x2\x591\x593\x5\x1C\xF\x2\x592\x594\a\xD4\x2\x2\x593\x592\x3"+
		"\x2\x2\x2\x594\x595\x3\x2\x2\x2\x595\x593\x3\x2\x2\x2\x595\x596\x3\x2"+
		"\x2\x2\x596\x598\x3\x2\x2\x2\x597\x591\x3\x2\x2\x2\x597\x598\x3\x2\x2"+
		"\x2\x598\x599\x3\x2\x2\x2\x599\x59A\a;\x2\x2\x59A\x8D\x3\x2\x2\x2\x59B"+
		"\x59C\x5\x116\x8C\x2\x59C\x59D\a\xD6\x2\x2\x59D\x59F\x3\x2\x2\x2\x59E"+
		"\x59B\x3\x2\x2\x2\x59E\x59F\x3\x2\x2\x2\x59F\x5A2\x3\x2\x2\x2\x5A0\x5A1"+
		"\a\xA0\x2\x2\x5A1\x5A3\a\xD6\x2\x2\x5A2\x5A0\x3\x2\x2\x2\x5A2\x5A3\x3"+
		"\x2\x2\x2\x5A3\x5A4\x3\x2\x2\x2\x5A4\x5A5\a\x86\x2\x2\x5A5\x5A6\a\xD6"+
		"\x2\x2\x5A6\x5AB\x5\xFE\x80\x2\x5A7\x5A9\a\xD6\x2\x2\x5A8\x5A7\x3\x2\x2"+
		"\x2\x5A8\x5A9\x3\x2\x2\x2\x5A9\x5AA\x3\x2\x2\x2\x5AA\x5AC\x5\xF4{\x2\x5AB"+
		"\x5A8\x3\x2\x2\x2\x5AB\x5AC\x3\x2\x2\x2\x5AC\x5AE\x3\x2\x2\x2\x5AD\x5AF"+
		"\a\xD4\x2\x2\x5AE\x5AD\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2\x2\x5B0\x5AE\x3"+
		"\x2\x2\x2\x5B0\x5B1\x3\x2\x2\x2\x5B1\x5B8\x3\x2\x2\x2\x5B2\x5B4\x5\x1C"+
		"\xF\x2\x5B3\x5B5\a\xD4\x2\x2\x5B4\x5B3\x3\x2\x2\x2\x5B5\x5B6\x3\x2\x2"+
		"\x2\x5B6\x5B4\x3\x2\x2\x2\x5B6\x5B7\x3\x2\x2\x2\x5B7\x5B9\x3\x2\x2\x2"+
		"\x5B8\x5B2\x3\x2\x2\x2\x5B8\x5B9\x3\x2\x2\x2\x5B9\x5BA\x3\x2\x2\x2\x5BA"+
		"\x5BB\a;\x2\x2\x5BB\x8F\x3\x2\x2\x2\x5BC\x5BD\a\x89\x2\x2\x5BD\x5BE\a"+
		"\xD6\x2\x2\x5BE\x5C0\x5\xC6\x64\x2\x5BF\x5C1\a\xD6\x2\x2\x5C0\x5BF\x3"+
		"\x2\x2\x2\x5C0\x5C1\x3\x2\x2\x2\x5C1\x5C2\x3\x2\x2\x2\x5C2\x5C4\a\x5\x2"+
		"\x2\x5C3\x5C5\a\xD6\x2\x2\x5C4\x5C3\x3\x2\x2\x2\x5C4\x5C5\x3\x2\x2\x2"+
		"\x5C5\x5C7\x3\x2\x2\x2\x5C6\x5C8\x5\xC6\x64\x2\x5C7\x5C6\x3\x2\x2\x2\x5C7"+
		"\x5C8\x3\x2\x2\x2\x5C8\x5CA\x3\x2\x2\x2\x5C9\x5CB\a\xD6\x2\x2\x5CA\x5C9"+
		"\x3\x2\x2\x2\x5CA\x5CB\x3\x2\x2\x2\x5CB\x5CC\x3\x2\x2\x2\x5CC\x5CE\a\x5"+
		"\x2\x2\x5CD\x5CF\a\xD6\x2\x2\x5CE\x5CD\x3\x2\x2\x2\x5CE\x5CF\x3\x2\x2"+
		"\x2\x5CF\x5D0\x3\x2\x2\x2\x5D0\x5D1\x5\xC6\x64\x2\x5D1\x91\x3\x2\x2\x2"+
		"\x5D2\x5D3\a\x8C\x2\x2\x5D3\x5D4\a\xD6\x2\x2\x5D4\x5E3\x5\xFE\x80\x2\x5D5"+
		"\x5D7\a\xD6\x2\x2\x5D6\x5D5\x3\x2\x2\x2\x5D6\x5D7\x3\x2\x2\x2\x5D7\x5D8"+
		"\x3\x2\x2\x2\x5D8\x5DA\a\xC0\x2\x2\x5D9\x5DB\a\xD6\x2\x2\x5DA\x5D9\x3"+
		"\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB\x5E0\x3\x2\x2\x2\x5DC\x5DE\x5\xEE"+
		"x\x2\x5DD\x5DF\a\xD6\x2\x2\x5DE\x5DD\x3\x2\x2\x2\x5DE\x5DF\x3\x2\x2\x2"+
		"\x5DF\x5E1\x3\x2\x2\x2\x5E0\x5DC\x3\x2\x2\x2\x5E0\x5E1\x3\x2\x2\x2\x5E1"+
		"\x5E2\x3\x2\x2\x2\x5E2\x5E4\a\xC9\x2\x2\x5E3\x5D6\x3\x2\x2\x2\x5E3\x5E4"+
		"\x3\x2\x2\x2\x5E4\x93\x3\x2\x2\x2\x5E5\x5E8\a\x8B\x2\x2\x5E6\x5E7\a\xD6"+
		"\x2\x2\x5E7\x5E9\x5\xC6\x64\x2\x5E8\x5E6\x3\x2\x2\x2\x5E8\x5E9\x3\x2\x2"+
		"\x2\x5E9\x95\x3\x2\x2\x2\x5EA\x5EB\a\x8F\x2\x2\x5EB\x5EE\a\xD6\x2\x2\x5EC"+
		"\x5ED\a\x82\x2\x2\x5ED\x5EF\a\xD6\x2\x2\x5EE\x5EC\x3\x2\x2\x2\x5EE\x5EF"+
		"\x3\x2\x2\x2\x5EF\x5F0\x3\x2\x2\x2\x5F0\x5FB\x5\x98M\x2\x5F1\x5F3\a\xD6"+
		"\x2\x2\x5F2\x5F1\x3\x2\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\x5F4\x3\x2\x2"+
		"\x2\x5F4\x5F6\a\x5\x2\x2\x5F5\x5F7\a\xD6\x2\x2\x5F6\x5F5\x3\x2\x2\x2\x5F6"+
		"\x5F7\x3\x2\x2\x2\x5F7\x5F8\x3\x2\x2\x2\x5F8\x5FA\x5\x98M\x2\x5F9\x5F2"+
		"\x3\x2\x2\x2\x5FA\x5FD\x3\x2\x2\x2\x5FB\x5F9\x3\x2\x2\x2\x5FB\x5FC\x3"+
		"\x2\x2\x2\x5FC\x97\x3\x2\x2\x2\x5FD\x5FB\x3\x2\x2\x2\x5FE\x600\x5\xE2"+
		"r\x2\x5FF\x601\a\xD6\x2\x2\x600\x5FF\x3\x2\x2\x2\x600\x601\x3\x2\x2\x2"+
		"\x601\x602\x3\x2\x2\x2\x602\x604\a\xC0\x2\x2\x603\x605\a\xD6\x2\x2\x604"+
		"\x603\x3\x2\x2\x2\x604\x605\x3\x2\x2\x2\x605\x606\x3\x2\x2\x2\x606\x608"+
		"\x5\xFA~\x2\x607\x609\a\xD6\x2\x2\x608\x607\x3\x2\x2\x2\x608\x609\x3\x2"+
		"\x2\x2\x609\x60A\x3\x2\x2\x2\x60A\x60D\a\xC9\x2\x2\x60B\x60C\a\xD6\x2"+
		"\x2\x60C\x60E\x5\x100\x81\x2\x60D\x60B\x3\x2\x2\x2\x60D\x60E\x3\x2\x2"+
		"\x2\x60E\x99\x3\x2\x2\x2\x60F\x610\a\x91\x2\x2\x610\x9B\x3\x2\x2\x2\x611"+
		"\x617\a\x92\x2\x2\x612\x615\a\xD6\x2\x2\x613\x616\ar\x2\x2\x614\x616\x5"+
		"\xFE\x80\x2\x615\x613\x3\x2\x2\x2\x615\x614\x3\x2\x2\x2\x616\x618\x3\x2"+
		"\x2\x2\x617\x612\x3\x2\x2\x2\x617\x618\x3\x2\x2\x2\x618\x9D\x3\x2\x2\x2"+
		"\x619\x61A\a\x93\x2\x2\x61A\x9F\x3\x2\x2\x2\x61B\x61C\a\x94\x2\x2\x61C"+
		"\x61D\a\xD6\x2\x2\x61D\x61E\x5\xC6\x64\x2\x61E\xA1\x3\x2\x2\x2\x61F\x620"+
		"\a\x95\x2\x2\x620\x621\a\xD6\x2\x2\x621\x623\x5\xE2r\x2\x622\x624\a\xD6"+
		"\x2\x2\x623\x622\x3\x2\x2\x2\x623\x624\x3\x2\x2\x2\x624\x625\x3\x2\x2"+
		"\x2\x625\x627\a\xBC\x2\x2\x626\x628\a\xD6\x2\x2\x627\x626\x3\x2\x2\x2"+
		"\x627\x628\x3\x2\x2\x2\x628\x629\x3\x2\x2\x2\x629\x62A\x5\xC6\x64\x2\x62A"+
		"\xA3\x3\x2\x2\x2\x62B\x62C\a\x96\x2\x2\x62C\x62D\a\xD6\x2\x2\x62D\x62F"+
		"\x5\xC6\x64\x2\x62E\x630\a\xD6\x2\x2\x62F\x62E\x3\x2\x2\x2\x62F\x630\x3"+
		"\x2\x2\x2\x630\x631\x3\x2\x2\x2\x631\x633\a\x5\x2\x2\x632\x634\a\xD6\x2"+
		"\x2\x633\x632\x3\x2\x2\x2\x633\x634\x3\x2\x2\x2\x634\x635\x3\x2\x2\x2"+
		"\x635\x636\x5\xC6\x64\x2\x636\xA5\x3\x2\x2\x2\x637\x638\a\x97\x2\x2\x638"+
		"\x639\a\xD6\x2\x2\x639\x63B\x5\xC6\x64\x2\x63A\x63C\a\xD6\x2\x2\x63B\x63A"+
		"\x3\x2\x2\x2\x63B\x63C\x3\x2\x2\x2\x63C\x63D\x3\x2\x2\x2\x63D\x63F\a\x5"+
		"\x2\x2\x63E\x640\a\xD6\x2\x2\x63F\x63E\x3\x2\x2\x2\x63F\x640\x3\x2\x2"+
		"\x2\x640\x641\x3\x2\x2\x2\x641\x643\x5\xC6\x64\x2\x642\x644\a\xD6\x2\x2"+
		"\x643\x642\x3\x2\x2\x2\x643\x644\x3\x2\x2\x2\x644\x645\x3\x2\x2\x2\x645"+
		"\x647\a\x5\x2\x2\x646\x648\a\xD6\x2\x2\x647\x646\x3\x2\x2\x2\x647\x648"+
		"\x3\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649\x64B\x5\xC6\x64\x2\x64A\x64C\a"+
		"\xD6\x2\x2\x64B\x64A\x3\x2\x2\x2\x64B\x64C\x3\x2\x2\x2\x64C\x64D\x3\x2"+
		"\x2\x2\x64D\x64F\a\x5\x2\x2\x64E\x650\a\xD6\x2\x2\x64F\x64E\x3\x2\x2\x2"+
		"\x64F\x650\x3\x2\x2\x2\x650\x651\x3\x2\x2\x2\x651\x652\x5\xC6\x64\x2\x652"+
		"\xA7\x3\x2\x2\x2\x653\x654\a\x98\x2\x2\x654\x655\a\xD6\x2\x2\x655\x657"+
		"\x5\xC6\x64\x2\x656\x658\a\xD6\x2\x2\x657\x656\x3\x2\x2\x2\x657\x658\x3"+
		"\x2\x2\x2\x658\x659\x3\x2\x2\x2\x659\x65B\a\x5\x2\x2\x65A\x65C\a\xD6\x2"+
		"\x2\x65B\x65A\x3\x2\x2\x2\x65B\x65C\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2"+
		"\x65D\x65E\x5\xC6\x64\x2\x65E\xA9\x3\x2\x2\x2\x65F\x660\a\x99\x2\x2\x660"+
		"\x661\a\xD6\x2\x2\x661\x662\a\x1C\x2\x2\x662\x663\a\xD6\x2\x2\x663\x665"+
		"\x5\xC6\x64\x2\x664\x666\a\xD4\x2\x2\x665\x664\x3\x2\x2\x2\x666\x667\x3"+
		"\x2\x2\x2\x667\x665\x3\x2\x2\x2\x667\x668\x3\x2\x2\x2\x668\x66C\x3\x2"+
		"\x2\x2\x669\x66B\x5\xACW\x2\x66A\x669\x3\x2\x2\x2\x66B\x66E\x3\x2\x2\x2"+
		"\x66C\x66A\x3\x2\x2\x2\x66C\x66D\x3\x2\x2\x2\x66D\x670\x3\x2\x2\x2\x66E"+
		"\x66C\x3\x2\x2\x2\x66F\x671\a\xD6\x2\x2\x670\x66F\x3\x2\x2\x2\x670\x671"+
		"\x3\x2\x2\x2\x671\x672\x3\x2\x2\x2\x672\x673\a<\x2\x2\x673\xAB\x3\x2\x2"+
		"\x2\x674\x675\a\x1C\x2\x2\x675\x676\a\xD6\x2\x2\x676\x678\x5\xAEX\x2\x677"+
		"\x679\a\xD6\x2\x2\x678\x677\x3\x2\x2\x2\x678\x679\x3\x2\x2\x2\x679\x688"+
		"\x3\x2\x2\x2\x67A\x67C\a\x6\x2\x2\x67B\x67A\x3\x2\x2\x2\x67B\x67C\x3\x2"+
		"\x2\x2\x67C\x680\x3\x2\x2\x2\x67D\x67F\a\xD4\x2\x2\x67E\x67D\x3\x2\x2"+
		"\x2\x67F\x682\x3\x2\x2\x2\x680\x67E\x3\x2\x2\x2\x680\x681\x3\x2\x2\x2"+
		"\x681\x689\x3\x2\x2\x2\x682\x680\x3\x2\x2\x2\x683\x685\a\xD4\x2\x2\x684"+
		"\x683\x3\x2\x2\x2\x685\x686\x3\x2\x2\x2\x686\x684\x3\x2\x2\x2\x686\x687"+
		"\x3\x2\x2\x2\x687\x689\x3\x2\x2\x2\x688\x67B\x3\x2\x2\x2\x688\x684\x3"+
		"\x2\x2\x2\x689\x690\x3\x2\x2\x2\x68A\x68C\x5\x1C\xF\x2\x68B\x68D\a\xD4"+
		"\x2\x2\x68C\x68B\x3\x2\x2\x2\x68D\x68E\x3\x2\x2\x2\x68E\x68C\x3\x2\x2"+
		"\x2\x68E\x68F\x3\x2\x2\x2\x68F\x691\x3\x2\x2\x2\x690\x68A\x3\x2\x2\x2"+
		"\x690\x691\x3\x2\x2\x2\x691\xAD\x3\x2\x2\x2\x692\x6BE\a\x36\x2\x2\x693"+
		"\x695\aY\x2\x2\x694\x696\a\xD6\x2\x2\x695\x694\x3\x2\x2\x2\x695\x696\x3"+
		"\x2\x2\x2\x696\x697\x3\x2\x2\x2\x697\x699\x5\x106\x84\x2\x698\x69A\a\xD6"+
		"\x2\x2\x699\x698\x3\x2\x2\x2\x699\x69A\x3\x2\x2\x2\x69A\x69B\x3\x2\x2"+
		"\x2\x69B\x69C\x5\xC6\x64\x2\x69C\x6BE\x3\x2\x2\x2\x69D\x6A8\x5\xC6\x64"+
		"\x2\x69E\x6A0\a\xD6\x2\x2\x69F\x69E\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2"+
		"\x6A0\x6A1\x3\x2\x2\x2\x6A1\x6A3\a\x5\x2\x2\x6A2\x6A4\a\xD6\x2\x2\x6A3"+
		"\x6A2\x3\x2\x2\x2\x6A3\x6A4\x3\x2\x2\x2\x6A4\x6A5\x3\x2\x2\x2\x6A5\x6A7"+
		"\x5\xC6\x64\x2\x6A6\x69F\x3\x2\x2\x2\x6A7\x6AA\x3\x2\x2\x2\x6A8\x6A6\x3"+
		"\x2\x2\x2\x6A8\x6A9\x3\x2\x2\x2\x6A9\x6BE\x3\x2\x2\x2\x6AA\x6A8\x3\x2"+
		"\x2\x2\x6AB\x6AC\a\xCF\x2\x2\x6AC\x6AD\a\xD6\x2\x2\x6AD\x6AE\a\xA9\x2"+
		"\x2\x6AE\x6AF\a\xD6\x2\x2\x6AF\x6BA\x5\xC6\x64\x2\x6B0\x6B2\a\xD6\x2\x2"+
		"\x6B1\x6B0\x3\x2\x2\x2\x6B1\x6B2\x3\x2\x2\x2\x6B2\x6B3\x3\x2\x2\x2\x6B3"+
		"\x6B5\a\x5\x2\x2\x6B4\x6B6\a\xD6\x2\x2\x6B5\x6B4\x3\x2\x2\x2\x6B5\x6B6"+
		"\x3\x2\x2\x2\x6B6\x6B7\x3\x2\x2\x2\x6B7\x6B9\x5\xC6\x64\x2\x6B8\x6B1\x3"+
		"\x2\x2\x2\x6B9\x6BC\x3\x2\x2\x2\x6BA\x6B8\x3\x2\x2\x2\x6BA\x6BB\x3\x2"+
		"\x2\x2\x6BB\x6BE\x3\x2\x2\x2\x6BC\x6BA\x3\x2\x2\x2\x6BD\x692\x3\x2\x2"+
		"\x2\x6BD\x693\x3\x2\x2\x2\x6BD\x69D\x3\x2\x2\x2\x6BD\x6AB\x3\x2\x2\x2"+
		"\x6BE\xAF\x3\x2\x2\x2\x6BF\x6C0\a\x9A\x2\x2\x6C0\x6C1\a\xD6\x2\x2\x6C1"+
		"\x6CA\x5\xC6\x64\x2\x6C2\x6C4\a\xD6\x2\x2\x6C3\x6C2\x3\x2\x2\x2\x6C3\x6C4"+
		"\x3\x2\x2\x2\x6C4\x6C5\x3\x2\x2\x2\x6C5\x6C7\a\x5\x2\x2\x6C6\x6C8\a\xD6"+
		"\x2\x2\x6C7\x6C6\x3\x2\x2\x2\x6C7\x6C8\x3\x2\x2\x2\x6C8\x6C9\x3\x2\x2"+
		"\x2\x6C9\x6CB\x5\xC6\x64\x2\x6CA\x6C3\x3\x2\x2\x2\x6CA\x6CB\x3\x2\x2\x2"+
		"\x6CB\xB1\x3\x2\x2\x2\x6CC\x6CD\a\x9C\x2\x2\x6CD\x6CE\a\xD6\x2\x2\x6CE"+
		"\x6D0\x5\xC6\x64\x2\x6CF\x6D1\a\xD6\x2\x2\x6D0\x6CF\x3\x2\x2\x2\x6D0\x6D1"+
		"\x3\x2\x2\x2\x6D1\x6D2\x3\x2\x2\x2\x6D2\x6D4\a\x5\x2\x2\x6D3\x6D5\a\xD6"+
		"\x2\x2\x6D4\x6D3\x3\x2\x2\x2\x6D4\x6D5\x3\x2\x2\x2\x6D5\x6D6\x3\x2\x2"+
		"\x2\x6D6\x6D7\x5\xC6\x64\x2\x6D7\xB3\x3\x2\x2\x2\x6D8\x6D9\a\x9B\x2\x2"+
		"\x6D9\x6DA\a\xD6\x2\x2\x6DA\x6DC\x5\xE2r\x2\x6DB\x6DD\a\xD6\x2\x2\x6DC"+
		"\x6DB\x3\x2\x2\x2\x6DC\x6DD\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6E0"+
		"\a\xBC\x2\x2\x6DF\x6E1\a\xD6\x2\x2\x6E0\x6DF\x3\x2\x2\x2\x6E0\x6E1\x3"+
		"\x2\x2\x2\x6E1\x6E2\x3\x2\x2\x2\x6E2\x6E3\x5\xC6\x64\x2\x6E3\xB5\x3\x2"+
		"\x2\x2\x6E4\x6E5\a\xA2\x2\x2\x6E5\xB7\x3\x2\x2\x2\x6E6\x6E7\x5\x116\x8C"+
		"\x2\x6E7\x6E8\a\xD6\x2\x2\x6E8\x6EA\x3\x2\x2\x2\x6E9\x6E6\x3\x2\x2\x2"+
		"\x6E9\x6EA\x3\x2\x2\x2\x6EA\x6ED\x3\x2\x2\x2\x6EB\x6EC\a\xA0\x2\x2\x6EC"+
		"\x6EE\a\xD6\x2\x2\x6ED\x6EB\x3\x2\x2\x2\x6ED\x6EE\x3\x2\x2\x2\x6EE\x6EF"+
		"\x3\x2\x2\x2\x6EF\x6F0\a\xA4\x2\x2\x6F0\x6F1\a\xD6\x2\x2\x6F1\x6F6\x5"+
		"\xFE\x80\x2\x6F2\x6F4\a\xD6\x2\x2\x6F3\x6F2\x3\x2\x2\x2\x6F3\x6F4\x3\x2"+
		"\x2\x2\x6F4\x6F5\x3\x2\x2\x2\x6F5\x6F7\x5\xF4{\x2\x6F6\x6F3\x3\x2\x2\x2"+
		"\x6F6\x6F7\x3\x2\x2\x2\x6F7\x6F9\x3\x2\x2\x2\x6F8\x6FA\a\xD4\x2\x2\x6F9"+
		"\x6F8\x3\x2\x2\x2\x6FA\x6FB\x3\x2\x2\x2\x6FB\x6F9\x3\x2\x2\x2\x6FB\x6FC"+
		"\x3\x2\x2\x2\x6FC\x703\x3\x2\x2\x2\x6FD\x6FF\x5\x1C\xF\x2\x6FE\x700\a"+
		"\xD4\x2\x2\x6FF\x6FE\x3\x2\x2\x2\x700\x701\x3\x2\x2\x2\x701\x6FF\x3\x2"+
		"\x2\x2\x701\x702\x3\x2\x2\x2\x702\x704\x3\x2\x2\x2\x703\x6FD\x3\x2\x2"+
		"\x2\x703\x704\x3\x2\x2\x2\x704\x705\x3\x2\x2\x2\x705\x706\a=\x2\x2\x706"+
		"\xB9\x3\x2\x2\x2\x707\x709\a\xA8\x2\x2\x708\x70A\a\xD6\x2\x2\x709\x708"+
		"\x3\x2\x2\x2\x709\x70A\x3\x2\x2\x2\x70A\x70B\x3\x2\x2\x2\x70B\x70D\a\xBC"+
		"\x2\x2\x70C\x70E\a\xD6\x2\x2\x70D\x70C\x3\x2\x2\x2\x70D\x70E\x3\x2\x2"+
		"\x2\x70E\x70F\x3\x2\x2\x2\x70F\x710\x5\xC6\x64\x2\x710\xBB\x3\x2\x2\x2"+
		"\x711\x712\x5\x116\x8C\x2\x712\x713\a\xD6\x2\x2\x713\x715\x3\x2\x2\x2"+
		"\x714\x711\x3\x2\x2\x2\x714\x715\x3\x2\x2\x2\x715\x716\x3\x2\x2\x2\x716"+
		"\x717\a\xAB\x2\x2\x717\x718\a\xD6\x2\x2\x718\x71A\x5\xFE\x80\x2\x719\x71B"+
		"\a\xD4\x2\x2\x71A\x719\x3\x2\x2\x2\x71B\x71C\x3\x2\x2\x2\x71C\x71A\x3"+
		"\x2\x2\x2\x71C\x71D\x3\x2\x2\x2\x71D\x721\x3\x2\x2\x2\x71E\x720\x5\xBE"+
		"`\x2\x71F\x71E\x3\x2\x2\x2\x720\x723\x3\x2\x2\x2\x721\x71F\x3\x2\x2\x2"+
		"\x721\x722\x3\x2\x2\x2\x722\x724\x3\x2\x2\x2\x723\x721\x3\x2\x2\x2\x724"+
		"\x725\a>\x2\x2\x725\xBD\x3\x2\x2\x2\x726\x735\x5\xFE\x80\x2\x727\x729"+
		"\a\xD6\x2\x2\x728\x727\x3\x2\x2\x2\x728\x729\x3\x2\x2\x2\x729\x72A\x3"+
		"\x2\x2\x2\x72A\x72F\a\xC0\x2\x2\x72B\x72D\a\xD6\x2\x2\x72C\x72B\x3\x2"+
		"\x2\x2\x72C\x72D\x3\x2\x2\x2\x72D\x72E\x3\x2\x2\x2\x72E\x730\x5\xFA~\x2"+
		"\x72F\x72C\x3\x2\x2\x2\x72F\x730\x3\x2\x2\x2\x730\x732\x3\x2\x2\x2\x731"+
		"\x733\a\xD6\x2\x2\x732\x731\x3\x2\x2\x2\x732\x733\x3\x2\x2\x2\x733\x734"+
		"\x3\x2\x2\x2\x734\x736\a\xC9\x2\x2\x735\x728\x3\x2\x2\x2\x735\x736\x3"+
		"\x2\x2\x2\x736\x739\x3\x2\x2\x2\x737\x738\a\xD6\x2\x2\x738\x73A\x5\x100"+
		"\x81\x2\x739\x737\x3\x2\x2\x2\x739\x73A\x3\x2\x2\x2\x73A\x73C\x3\x2\x2"+
		"\x2\x73B\x73D\a\xD4\x2\x2\x73C\x73B\x3\x2\x2\x2\x73D\x73E\x3\x2\x2\x2"+
		"\x73E\x73C\x3\x2\x2\x2\x73E\x73F\x3\x2\x2\x2\x73F\xBF\x3\x2\x2\x2\x740"+
		"\x741\a\xAC\x2\x2\x741\x742\a\xD6\x2\x2\x742\x747\x5\xC6\x64\x2\x743\x744"+
		"\a\xD6\x2\x2\x744\x745\aY\x2\x2\x745\x746\a\xD6\x2\x2\x746\x748\x5\x112"+
		"\x8A\x2\x747\x743\x3\x2\x2\x2\x747\x748\x3\x2\x2\x2\x748\xC1\x3\x2\x2"+
		"\x2\x749\x74A\a\xAD\x2\x2\x74A\x74B\a\xD6\x2\x2\x74B\x74C\x5\xC6\x64\x2"+
		"\x74C\xC3\x3\x2\x2\x2\x74D\x74E\a\xAE\x2\x2\x74E\x74F\a\xD6\x2\x2\x74F"+
		"\x75E\x5\xC6\x64\x2\x750\x752\a\xD6\x2\x2\x751\x750\x3\x2\x2\x2\x751\x752"+
		"\x3\x2\x2\x2\x752\x753\x3\x2\x2\x2\x753\x755\a\x5\x2\x2\x754\x756\a\xD6"+
		"\x2\x2\x755\x754\x3\x2\x2\x2\x755\x756\x3\x2\x2\x2\x756\x757\x3\x2\x2"+
		"\x2\x757\x75C\x5\xC6\x64\x2\x758\x759\a\xD6\x2\x2\x759\x75A\a\xA9\x2\x2"+
		"\x75A\x75B\a\xD6\x2\x2\x75B\x75D\x5\xC6\x64\x2\x75C\x758\x3\x2\x2\x2\x75C"+
		"\x75D\x3\x2\x2\x2\x75D\x75F\x3\x2\x2\x2\x75E\x751\x3\x2\x2\x2\x75E\x75F"+
		"\x3\x2\x2\x2\x75F\xC5\x3\x2\x2\x2\x760\x761\b\x64\x1\x2\x761\x762\as\x2"+
		"\x2\x762\x763\a\xD6\x2\x2\x763\x797\x5\xC6\x64\x1E\x764\x765\a\r\x2\x2"+
		"\x765\x766\a\xD6\x2\x2\x766\x797\x5\xC6\x64\x1B\x767\x769\x5\xE2r\x2\x768"+
		"\x76A\a\xD6\x2\x2\x769\x768\x3\x2\x2\x2\x769\x76A\x3\x2\x2\x2\x76A\x76B"+
		"\x3\x2\x2\x2\x76B\x76D\a\xBA\x2\x2\x76C\x76E\a\xD6\x2\x2\x76D\x76C\x3"+
		"\x2\x2\x2\x76D\x76E\x3\x2\x2\x2\x76E\x76F\x3\x2\x2\x2\x76F\x770\x5\xC6"+
		"\x64\x1A\x770\x797\x3\x2\x2\x2\x771\x773\a\xC2\x2\x2\x772\x774\a\xD6\x2"+
		"\x2\x773\x772\x3\x2\x2\x2\x773\x774\x3\x2\x2\x2\x774\x775\x3\x2\x2\x2"+
		"\x775\x797\x5\xC6\x64\x10\x776\x778\a\xC6\x2\x2\x777\x779\a\xD6\x2\x2"+
		"\x778\x777\x3\x2\x2\x2\x778\x779\x3\x2\x2\x2\x779\x77A\x3\x2\x2\x2\x77A"+
		"\x797\x5\xC6\x64\xF\x77B\x77C\at\x2\x2\x77C\x77D\a\xD6\x2\x2\x77D\x797"+
		"\x5\xC6\x64\x3\x77E\x797\x5\x110\x89\x2\x77F\x797\x5\xE2r\x2\x780\x782"+
		"\a\xC0\x2\x2\x781\x783\a\xD6\x2\x2\x782\x781\x3\x2\x2\x2\x782\x783\x3"+
		"\x2\x2\x2\x783\x784\x3\x2\x2\x2\x784\x78F\x5\xC6\x64\x2\x785\x787\a\xD6"+
		"\x2\x2\x786\x785\x3\x2\x2\x2\x786\x787\x3\x2\x2\x2\x787\x788\x3\x2\x2"+
		"\x2\x788\x78A\a\x5\x2\x2\x789\x78B\a\xD6\x2\x2\x78A\x789\x3\x2\x2\x2\x78A"+
		"\x78B\x3\x2\x2\x2\x78B\x78C\x3\x2\x2\x2\x78C\x78E\x5\xC6\x64\x2\x78D\x786"+
		"\x3\x2\x2\x2\x78E\x791\x3\x2\x2\x2\x78F\x78D\x3\x2\x2\x2\x78F\x790\x3"+
		"\x2\x2\x2\x790\x792\x3\x2\x2\x2\x791\x78F\x3\x2\x2\x2\x792\x793\a\xC9"+
		"\x2\x2\x793\x797\x3\x2\x2\x2\x794\x797\x5\xC0\x61\x2\x795\x797\x5v<\x2"+
		"\x796\x760\x3\x2\x2\x2\x796\x764\x3\x2\x2\x2\x796\x767\x3\x2\x2\x2\x796"+
		"\x771\x3\x2\x2\x2\x796\x776\x3\x2\x2\x2\x796\x77B\x3\x2\x2\x2\x796\x77E"+
		"\x3\x2\x2\x2\x796\x77F\x3\x2\x2\x2\x796\x780\x3\x2\x2\x2\x796\x794\x3"+
		"\x2\x2\x2\x796\x795\x3\x2\x2\x2\x797\x836\x3\x2\x2\x2\x798\x799\f\x19"+
		"\x2\x2\x799\x79A\a\xD6\x2\x2\x79A\x79B\aY\x2\x2\x79B\x79C\a\xD6\x2\x2"+
		"\x79C\x835\x5\xC6\x64\x1A\x79D\x79E\f\x18\x2\x2\x79E\x79F\a\xD6\x2\x2"+
		"\x79F\x7A0\a\x63\x2\x2\x7A0\x7A1\a\xD6\x2\x2\x7A1\x835\x5\xC6\x64\x19"+
		"\x7A2\x7A4\f\x17\x2\x2\x7A3\x7A5\a\xD6\x2\x2\x7A4\x7A3\x3\x2\x2\x2\x7A4"+
		"\x7A5\x3\x2\x2\x2\x7A5\x7A6\x3\x2\x2\x2\x7A6\x7A8\a\xBD\x2\x2\x7A7\x7A9"+
		"\a\xD6\x2\x2\x7A8\x7A7\x3\x2\x2\x2\x7A8\x7A9\x3\x2\x2\x2\x7A9\x7AA\x3"+
		"\x2\x2\x2\x7AA\x835\x5\xC6\x64\x18\x7AB\x7AD\f\x16\x2\x2\x7AC\x7AE\a\xD6"+
		"\x2\x2\x7AD\x7AC\x3\x2\x2\x2\x7AD\x7AE\x3\x2\x2\x2\x7AE\x7AF\x3\x2\x2"+
		"\x2\x7AF\x7B1\a\xBF\x2\x2\x7B0\x7B2\a\xD6\x2\x2\x7B1\x7B0\x3\x2\x2\x2"+
		"\x7B1\x7B2\x3\x2\x2\x2\x7B2\x7B3\x3\x2\x2\x2\x7B3\x835\x5\xC6\x64\x17"+
		"\x7B4\x7B6\f\x15\x2\x2\x7B5\x7B7\a\xD6\x2\x2\x7B6\x7B5\x3\x2\x2\x2\x7B6"+
		"\x7B7\x3\x2\x2\x2\x7B7\x7B8\x3\x2\x2\x2\x7B8\x7BA\a\xBE\x2\x2\x7B9\x7BB"+
		"\a\xD6\x2\x2\x7BA\x7B9\x3\x2\x2\x2\x7BA\x7BB\x3\x2\x2\x2\x7BB\x7BC\x3"+
		"\x2\x2\x2\x7BC\x835\x5\xC6\x64\x16\x7BD\x7BF\f\x14\x2\x2\x7BE\x7C0\a\xD6"+
		"\x2\x2\x7BF\x7BE\x3\x2\x2\x2\x7BF\x7C0\x3\x2\x2\x2\x7C0\x7C1\x3\x2\x2"+
		"\x2\x7C1\x7C3\a\xC1\x2\x2\x7C2\x7C4\a\xD6\x2\x2\x7C3\x7C2\x3\x2\x2\x2"+
		"\x7C3\x7C4\x3\x2\x2\x2\x7C4\x7C5\x3\x2\x2\x2\x7C5\x835\x5\xC6\x64\x15"+
		"\x7C6\x7C8\f\x13\x2\x2\x7C7\x7C9\a\xD6\x2\x2\x7C8\x7C7\x3\x2\x2\x2\x7C8"+
		"\x7C9\x3\x2\x2\x2\x7C9\x7CA\x3\x2\x2\x2\x7CA\x7CC\a\xC5\x2\x2\x7CB\x7CD"+
		"\a\xD6\x2\x2\x7CC\x7CB\x3\x2\x2\x2\x7CC\x7CD\x3\x2\x2\x2\x7CD\x7CE\x3"+
		"\x2\x2\x2\x7CE\x835\x5\xC6\x64\x14\x7CF\x7D1\f\x12\x2\x2\x7D0\x7D2\a\xD6"+
		"\x2\x2\x7D1\x7D0\x3\x2\x2\x2\x7D1\x7D2\x3\x2\x2\x2\x7D2\x7D3\x3\x2\x2"+
		"\x2\x7D3\x7D5\a\xBC\x2\x2\x7D4\x7D6\a\xD6\x2\x2\x7D5\x7D4\x3\x2\x2\x2"+
		"\x7D5\x7D6\x3\x2\x2\x2\x7D6\x7D7\x3\x2\x2\x2\x7D7\x835\x5\xC6\x64\x13"+
		"\x7D8\x7D9\f\x11\x2\x2\x7D9\x7DA\a\xD6\x2\x2\x7DA\x7DB\a\xB9\x2\x2\x7DB"+
		"\x7DC\a\xD6\x2\x2\x7DC\x835\x5\xC6\x64\x12\x7DD\x7DF\f\xE\x2\x2\x7DE\x7E0"+
		"\a\xD6\x2\x2\x7DF\x7DE\x3\x2\x2\x2\x7DF\x7E0\x3\x2\x2\x2\x7E0\x7E1\x3"+
		"\x2\x2\x2\x7E1\x7E3\a\xC6\x2\x2\x7E2\x7E4\a\xD6\x2\x2\x7E3\x7E2\x3\x2"+
		"\x2\x2\x7E3\x7E4\x3\x2\x2\x2\x7E4\x7E5\x3\x2\x2\x2\x7E5\x835\x5\xC6\x64"+
		"\xF\x7E6\x7E8\f\r\x2\x2\x7E7\x7E9\a\xD6\x2\x2\x7E8\x7E7\x3\x2\x2\x2\x7E8"+
		"\x7E9\x3\x2\x2\x2\x7E9\x7EA\x3\x2\x2\x2\x7EA\x7EC\ap\x2\x2\x7EB\x7ED\a"+
		"\xD6\x2\x2\x7EC\x7EB\x3\x2\x2\x2\x7EC\x7ED\x3\x2\x2\x2\x7ED\x7EE\x3\x2"+
		"\x2\x2\x7EE\x835\x5\xC6\x64\xE\x7EF\x7F1\f\f\x2\x2\x7F0\x7F2\a\xD6\x2"+
		"\x2\x7F1\x7F0\x3\x2\x2\x2\x7F1\x7F2\x3\x2\x2\x2\x7F2\x7F3\x3\x2\x2\x2"+
		"\x7F3\x7F5\a\xBB\x2\x2\x7F4\x7F6\a\xD6\x2\x2\x7F5\x7F4\x3\x2\x2\x2\x7F5"+
		"\x7F6\x3\x2\x2\x2\x7F6\x7F7\x3\x2\x2\x2\x7F7\x835\x5\xC6\x64\r\x7F8\x7FA"+
		"\f\v\x2\x2\x7F9\x7FB\a\xD6\x2\x2\x7FA\x7F9\x3\x2\x2\x2\x7FA\x7FB\x3\x2"+
		"\x2\x2\x7FB\x7FC\x3\x2\x2\x2\x7FC\x7FE\a\xC4\x2\x2\x7FD\x7FF\a\xD6\x2"+
		"\x2\x7FE\x7FD\x3\x2\x2\x2\x7FE\x7FF\x3\x2\x2\x2\x7FF\x800\x3\x2\x2\x2"+
		"\x800\x835\x5\xC6\x64\f\x801\x803\f\n\x2\x2\x802\x804\a\xD6\x2\x2\x803"+
		"\x802\x3\x2\x2\x2\x803\x804\x3\x2\x2\x2\x804\x805\x3\x2\x2\x2\x805\x807"+
		"\a\xC2\x2\x2\x806\x808\a\xD6\x2\x2\x807\x806\x3\x2\x2\x2\x807\x808\x3"+
		"\x2\x2\x2\x808\x809\x3\x2\x2\x2\x809\x835\x5\xC6\x64\v\x80A\x80C\f\t\x2"+
		"\x2\x80B\x80D\a\xD6\x2\x2\x80C\x80B\x3\x2\x2\x2\x80C\x80D\x3\x2\x2\x2"+
		"\x80D\x80E\x3\x2\x2\x2\x80E\x810\a\xC8\x2\x2\x80F\x811\a\xD6\x2\x2\x810"+
		"\x80F\x3\x2\x2\x2\x810\x811\x3\x2\x2\x2\x811\x812\x3\x2\x2\x2\x812\x835"+
		"\x5\xC6\x64\n\x813\x814\f\b\x2\x2\x814\x815\a\xD6\x2\x2\x815\x816\aU\x2"+
		"\x2\x816\x817\a\xD6\x2\x2\x817\x835\x5\xC6\x64\t\x818\x819\f\a\x2\x2\x819"+
		"\x81A\a\xD6\x2\x2\x81A\x81B\a\x42\x2\x2\x81B\x81C\a\xD6\x2\x2\x81C\x835"+
		"\x5\xC6\x64\b\x81D\x81F\f\x6\x2\x2\x81E\x820\a\xD6\x2\x2\x81F\x81E\x3"+
		"\x2\x2\x2\x81F\x820\x3\x2\x2\x2\x820\x821\x3\x2\x2\x2\x821\x823\a\xB8"+
		"\x2\x2\x822\x824\a\xD6\x2\x2\x823\x822\x3\x2\x2\x2\x823\x824\x3\x2\x2"+
		"\x2\x824\x825\x3\x2\x2\x2\x825\x835\x5\xC6\x64\a\x826\x828\f\x5\x2\x2"+
		"\x827\x829\a\xD6\x2\x2\x828\x827\x3\x2\x2\x2\x828\x829\x3\x2\x2\x2\x829"+
		"\x82A\x3\x2\x2\x2\x82A\x82C\a\x7F\x2\x2\x82B\x82D\a\xD6\x2\x2\x82C\x82B"+
		"\x3\x2\x2\x2\x82C\x82D\x3\x2\x2\x2\x82D\x82E\x3\x2\x2\x2\x82E\x835\x5"+
		"\xC6\x64\x6\x82F\x830\f\x4\x2\x2\x830\x831\a\xD6\x2\x2\x831\x832\a\xF"+
		"\x2\x2\x832\x833\a\xD6\x2\x2\x833\x835\x5\xC6\x64\x5\x834\x798\x3\x2\x2"+
		"\x2\x834\x79D\x3\x2\x2\x2\x834\x7A2\x3\x2\x2\x2\x834\x7AB\x3\x2\x2\x2"+
		"\x834\x7B4\x3\x2\x2\x2\x834\x7BD\x3\x2\x2\x2\x834\x7C6\x3\x2\x2\x2\x834"+
		"\x7CF\x3\x2\x2\x2\x834\x7D8\x3\x2\x2\x2\x834\x7DD\x3\x2\x2\x2\x834\x7E6"+
		"\x3\x2\x2\x2\x834\x7EF\x3\x2\x2\x2\x834\x7F8\x3\x2\x2\x2\x834\x801\x3"+
		"\x2\x2\x2\x834\x80A\x3\x2\x2\x2\x834\x813\x3\x2\x2\x2\x834\x818\x3\x2"+
		"\x2\x2\x834\x81D\x3\x2\x2\x2\x834\x826\x3\x2\x2\x2\x834\x82F\x3\x2\x2"+
		"\x2\x835\x838\x3\x2\x2\x2\x836\x834\x3\x2\x2\x2\x836\x837\x3\x2\x2\x2"+
		"\x837\xC7\x3\x2\x2\x2\x838\x836\x3\x2\x2\x2\x839\x83D\a\x32\x2\x2\x83A"+
		"\x83D\a\xA0\x2\x2\x83B\x83D\x5\x116\x8C\x2\x83C\x839\x3\x2\x2\x2\x83C"+
		"\x83A\x3\x2\x2\x2\x83C\x83B\x3\x2\x2\x2\x83D\x83E\x3\x2\x2\x2\x83E\x841"+
		"\a\xD6\x2\x2\x83F\x840\a\xB6\x2\x2\x840\x842\a\xD6\x2\x2\x841\x83F\x3"+
		"\x2\x2\x2\x841\x842\x3\x2\x2\x2\x842\x843\x3\x2\x2\x2\x843\x844\x5\xCA"+
		"\x66\x2\x844\xC9\x3\x2\x2\x2\x845\x850\x5\xCCg\x2\x846\x848\a\xD6\x2\x2"+
		"\x847\x846\x3\x2\x2\x2\x847\x848\x3\x2\x2\x2\x848\x849\x3\x2\x2\x2\x849"+
		"\x84B\a\x5\x2\x2\x84A\x84C\a\xD6\x2\x2\x84B\x84A\x3\x2\x2\x2\x84B\x84C"+
		"\x3\x2\x2\x2\x84C\x84D\x3\x2\x2\x2\x84D\x84F\x5\xCCg\x2\x84E\x847\x3\x2"+
		"\x2\x2\x84F\x852\x3\x2\x2\x2\x850\x84E\x3\x2\x2\x2\x850\x851\x3\x2\x2"+
		"\x2\x851\xCB\x3\x2\x2\x2\x852\x850\x3\x2\x2\x2\x853\x865\x5\xFE\x80\x2"+
		"\x854\x856\a\xD6\x2\x2\x855\x854\x3\x2\x2\x2\x855\x856\x3\x2\x2\x2\x856"+
		"\x857\x3\x2\x2\x2\x857\x859\a\xC0\x2\x2\x858\x85A\a\xD6\x2\x2\x859\x858"+
		"\x3\x2\x2\x2\x859\x85A\x3\x2\x2\x2\x85A\x85F\x3\x2\x2\x2\x85B\x85D\x5"+
		"\xFA~\x2\x85C\x85E\a\xD6\x2\x2\x85D\x85C\x3\x2\x2\x2\x85D\x85E\x3\x2\x2"+
		"\x2\x85E\x860\x3\x2\x2\x2\x85F\x85B\x3\x2\x2\x2\x85F\x860\x3\x2\x2\x2"+
		"\x860\x861\x3\x2\x2\x2\x861\x863\a\xC9\x2\x2\x862\x864\a\xD6\x2\x2\x863"+
		"\x862\x3\x2\x2\x2\x863\x864\x3\x2\x2\x2\x864\x866\x3\x2\x2\x2\x865\x855"+
		"\x3\x2\x2\x2\x865\x866\x3\x2\x2\x2\x866\x868\x3\x2\x2\x2\x867\x869\x5"+
		"\x114\x8B\x2\x868\x867\x3\x2\x2\x2\x868\x869\x3\x2\x2\x2\x869\x86C\x3"+
		"\x2\x2\x2\x86A\x86B\a\xD6\x2\x2\x86B\x86D\x5\x100\x81\x2\x86C\x86A\x3"+
		"\x2\x2\x2\x86C\x86D\x3\x2\x2\x2\x86D\xCD\x3\x2\x2\x2\x86E\x86F\a\xB3\x2"+
		"\x2\x86F\x870\a\xD6\x2\x2\x870\x872\x5\xC6\x64\x2\x871\x873\a\xD4\x2\x2"+
		"\x872\x871\x3\x2\x2\x2\x873\x874\x3\x2\x2\x2\x874\x872\x3\x2\x2\x2\x874"+
		"\x875\x3\x2\x2\x2\x875\x87B\x3\x2\x2\x2\x876\x877\x5\x1C\xF\x2\x877\x878"+
		"\a\xD4\x2\x2\x878\x87A\x3\x2\x2\x2\x879\x876\x3\x2\x2\x2\x87A\x87D\x3"+
		"\x2\x2\x2\x87B\x879\x3\x2\x2\x2\x87B\x87C\x3\x2\x2\x2\x87C\x87E\x3\x2"+
		"\x2\x2\x87D\x87B\x3\x2\x2\x2\x87E\x87F\a\xB2\x2\x2\x87F\xCF\x3\x2\x2\x2"+
		"\x880\x881\a\xB4\x2\x2\x881\x882\a\xD6\x2\x2\x882\x884\x5\xC6\x64\x2\x883"+
		"\x885\a\xD6\x2\x2\x884\x883\x3\x2\x2\x2\x884\x885\x3\x2\x2\x2\x885\x886"+
		"\x3\x2\x2\x2\x886\x888\a\x5\x2\x2\x887\x889\a\xD6\x2\x2\x888\x887\x3\x2"+
		"\x2\x2\x888\x889\x3\x2\x2\x2\x889\x88A\x3\x2\x2\x2\x88A\x88B\x5\xC6\x64"+
		"\x2\x88B\xD1\x3\x2\x2\x2\x88C\x88D\a\xB5\x2\x2\x88D\x88E\a\xD6\x2\x2\x88E"+
		"\x890\x5\xE2r\x2\x88F\x891\a\xD4\x2\x2\x890\x88F\x3\x2\x2\x2\x891\x892"+
		"\x3\x2\x2\x2\x892\x890\x3\x2\x2\x2\x892\x893\x3\x2\x2\x2\x893\x89A\x3"+
		"\x2\x2\x2\x894\x896\x5\x1C\xF\x2\x895\x897\a\xD4\x2\x2\x896\x895\x3\x2"+
		"\x2\x2\x897\x898\x3\x2\x2\x2\x898\x896\x3\x2\x2\x2\x898\x899\x3\x2\x2"+
		"\x2\x899\x89B\x3\x2\x2\x2\x89A\x894\x3\x2\x2\x2\x89A\x89B\x3\x2\x2\x2"+
		"\x89B\x89C\x3\x2\x2\x2\x89C\x89D\a?\x2\x2\x89D\xD3\x3\x2\x2\x2\x89E\x89F"+
		"\a\xB7\x2\x2\x89F\x8A0\a\xD6\x2\x2\x8A0\x8A2\x5\xC6\x64\x2\x8A1\x8A3\a"+
		"\xD6\x2\x2\x8A2\x8A1\x3\x2\x2\x2\x8A2\x8A3\x3\x2\x2\x2\x8A3\x8A4\x3\x2"+
		"\x2\x2\x8A4\x8A9\a\x5\x2\x2\x8A5\x8A7\a\xD6\x2\x2\x8A6\x8A5\x3\x2\x2\x2"+
		"\x8A6\x8A7\x3\x2\x2\x2\x8A7\x8A8\x3\x2\x2\x2\x8A8\x8AA\x5\x84\x43\x2\x8A9"+
		"\x8A6\x3\x2\x2\x2\x8A9\x8AA\x3\x2\x2\x2\x8AA\xD5\x3\x2\x2\x2\x8AB\x8AE"+
		"\x5\xD8m\x2\x8AC\x8AE\x5\xDAn\x2\x8AD\x8AB\x3\x2\x2\x2\x8AD\x8AC\x3\x2"+
		"\x2\x2\x8AE\xD7\x3\x2\x2\x2\x8AF\x8B0\a\x1B\x2\x2\x8B0\x8B1\a\xD6\x2\x2"+
		"\x8B1\x8B3\x5\xFE\x80\x2\x8B2\x8B4\x5\x114\x8B\x2\x8B3\x8B2\x3\x2\x2\x2"+
		"\x8B3\x8B4\x3\x2\x2\x2\x8B4\x8C2\x3\x2\x2\x2\x8B5\x8B7\a\xD6\x2\x2\x8B6"+
		"\x8B5\x3\x2\x2\x2\x8B6\x8B7\x3\x2\x2\x2\x8B7\x8B8\x3\x2\x2\x2\x8B8\x8BA"+
		"\a\xC0\x2\x2\x8B9\x8BB\a\xD6\x2\x2\x8BA\x8B9\x3\x2\x2\x2\x8BA\x8BB\x3"+
		"\x2\x2\x2\x8BB\x8BC\x3\x2\x2\x2\x8BC\x8BE\x5\xEEx\x2\x8BD\x8BF\a\xD6\x2"+
		"\x2\x8BE\x8BD\x3\x2\x2\x2\x8BE\x8BF\x3\x2\x2\x2\x8BF\x8C0\x3\x2\x2\x2"+
		"\x8C0\x8C1\a\xC9\x2\x2\x8C1\x8C3\x3\x2\x2\x2\x8C2\x8B6\x3\x2\x2\x2\x8C2"+
		"\x8C3\x3\x2\x2\x2\x8C3\xD9\x3\x2\x2\x2\x8C4\x8C5\a\x1B\x2\x2\x8C5\x8C7"+
		"\a\xD6\x2\x2\x8C6\x8C8\x5\xE2r\x2\x8C7\x8C6\x3\x2\x2\x2\x8C7\x8C8\x3\x2"+
		"\x2\x2\x8C8\x8C9\x3\x2\x2\x2\x8C9\x8CA\a\x4\x2\x2\x8CA\x8CC\x5\xFE\x80"+
		"\x2\x8CB\x8CD\x5\x114\x8B\x2\x8CC\x8CB\x3\x2\x2\x2\x8CC\x8CD\x3\x2\x2"+
		"\x2\x8CD\x8DB\x3\x2\x2\x2\x8CE\x8D0\a\xD6\x2\x2\x8CF\x8CE\x3\x2\x2\x2"+
		"\x8CF\x8D0\x3\x2\x2\x2\x8D0\x8D1\x3\x2\x2\x2\x8D1\x8D3\a\xC0\x2\x2\x8D2"+
		"\x8D4\a\xD6\x2\x2\x8D3\x8D2\x3\x2\x2\x2\x8D3\x8D4\x3\x2\x2\x2\x8D4\x8D5"+
		"\x3\x2\x2\x2\x8D5\x8D7\x5\xEEx\x2\x8D6\x8D8\a\xD6\x2\x2\x8D7\x8D6\x3\x2"+
		"\x2\x2\x8D7\x8D8\x3\x2\x2\x2\x8D8\x8D9\x3\x2\x2\x2\x8D9\x8DA\a\xC9\x2"+
		"\x2\x8DA\x8DC\x3\x2\x2\x2\x8DB\x8CF\x3\x2\x2\x2\x8DB\x8DC\x3\x2\x2\x2"+
		"\x8DC\xDB\x3\x2\x2\x2\x8DD\x8E0\x5\xDEp\x2\x8DE\x8E0\x5\xE0q\x2\x8DF\x8DD"+
		"\x3\x2\x2\x2\x8DF\x8DE\x3\x2\x2\x2\x8E0\xDD\x3\x2\x2\x2\x8E1\x8E4\x5\x104"+
		"\x83\x2\x8E2\x8E3\a\xD6\x2\x2\x8E3\x8E5\x5\xEEx\x2\x8E4\x8E2\x3\x2\x2"+
		"\x2\x8E4\x8E5\x3\x2\x2\x2\x8E5\xDF\x3\x2\x2\x2\x8E6\x8E8\x5\xE2r\x2\x8E7"+
		"\x8E6\x3\x2\x2\x2\x8E7\x8E8\x3\x2\x2\x2\x8E8\x8E9\x3\x2\x2\x2\x8E9\x8EA"+
		"\a\x4\x2\x2\x8EA\x8EC\x5\xFE\x80\x2\x8EB\x8ED\x5\x114\x8B\x2\x8EC\x8EB"+
		"\x3\x2\x2\x2\x8EC\x8ED\x3\x2\x2\x2\x8ED\x8F0\x3\x2\x2\x2\x8EE\x8EF\a\xD6"+
		"\x2\x2\x8EF\x8F1\x5\xEEx\x2\x8F0\x8EE\x3\x2\x2\x2\x8F0\x8F1\x3\x2\x2\x2"+
		"\x8F1\x8F3\x3\x2\x2\x2\x8F2\x8F4\x5\xF2z\x2\x8F3\x8F2\x3\x2\x2\x2\x8F3"+
		"\x8F4\x3\x2\x2\x2\x8F4\xE1\x3\x2\x2\x2\x8F5\x8FA\x5\xE8u\x2\x8F6\x8FA"+
		"\x5\xE4s\x2\x8F7\x8FA\x5\xE6t\x2\x8F8\x8FA\x5\xECw\x2\x8F9\x8F5\x3\x2"+
		"\x2\x2\x8F9\x8F6\x3\x2\x2\x2\x8F9\x8F7\x3\x2\x2\x2\x8F9\x8F8\x3\x2\x2"+
		"\x2\x8FA\xE3\x3\x2\x2\x2\x8FB\x8FD\x5\xFE\x80\x2\x8FC\x8FE\x5\x114\x8B"+
		"\x2\x8FD\x8FC\x3\x2\x2\x2\x8FD\x8FE\x3\x2\x2\x2\x8FE\x900\x3\x2\x2\x2"+
		"\x8FF\x901\x5\xF2z\x2\x900\x8FF\x3\x2\x2\x2\x900\x901\x3\x2\x2\x2\x901"+
		"\xE5\x3\x2\x2\x2\x902\x905\x5\xFE\x80\x2\x903\x905\x5\x102\x82\x2\x904"+
		"\x902\x3\x2\x2\x2\x904\x903\x3\x2\x2\x2\x905\x907\x3\x2\x2\x2\x906\x908"+
		"\x5\x114\x8B\x2\x907\x906\x3\x2\x2\x2\x907\x908\x3\x2\x2\x2\x908\x90A"+
		"\x3\x2\x2\x2\x909\x90B\a\xD6\x2\x2\x90A\x909\x3\x2\x2\x2\x90A\x90B\x3"+
		"\x2\x2\x2\x90B\x90C\x3\x2\x2\x2\x90C\x90E\a\xC0\x2\x2\x90D\x90F\a\xD6"+
		"\x2\x2\x90E\x90D\x3\x2\x2\x2\x90E\x90F\x3\x2\x2\x2\x90F\x914\x3\x2\x2"+
		"\x2\x910\x912\x5\xEEx\x2\x911\x913\a\xD6\x2\x2\x912\x911\x3\x2\x2\x2\x912"+
		"\x913\x3\x2\x2\x2\x913\x915\x3\x2\x2\x2\x914\x910\x3\x2\x2\x2\x914\x915"+
		"\x3\x2\x2\x2\x915\x916\x3\x2\x2\x2\x916\x918\a\xC9\x2\x2\x917\x919\x5"+
		"\xF2z\x2\x918\x917\x3\x2\x2\x2\x918\x919\x3\x2\x2\x2\x919\xE7\x3\x2\x2"+
		"\x2\x91A\x91D\x5\xE4s\x2\x91B\x91D\x5\xE6t\x2\x91C\x91A\x3\x2\x2\x2\x91C"+
		"\x91B\x3\x2\x2\x2\x91C\x91D\x3\x2\x2\x2\x91D\x91F\x3\x2\x2\x2\x91E\x920"+
		"\x5\xEAv\x2\x91F\x91E\x3\x2\x2\x2\x920\x921\x3\x2\x2\x2\x921\x91F\x3\x2"+
		"\x2\x2\x921\x922\x3\x2\x2\x2\x922\x924\x3\x2\x2\x2\x923\x925\x5\xF2z\x2"+
		"\x924\x923\x3\x2\x2\x2\x924\x925\x3\x2\x2\x2\x925\xE9\x3\x2\x2\x2\x926"+
		"\x929\a\x4\x2\x2\x927\x92A\x5\xE4s\x2\x928\x92A\x5\xE6t\x2\x929\x927\x3"+
		"\x2\x2\x2\x929\x928\x3\x2\x2\x2\x92A\xEB\x3\x2\x2\x2\x92B\x92C\x5\xF2"+
		"z\x2\x92C\xED\x3\x2\x2\x2\x92D\x92F\x5\xF0y\x2\x92E\x92D\x3\x2\x2\x2\x92E"+
		"\x92F\x3\x2\x2\x2\x92F\x931\x3\x2\x2\x2\x930\x932\a\xD6\x2\x2\x931\x930"+
		"\x3\x2\x2\x2\x931\x932\x3\x2\x2\x2\x932\x933\x3\x2\x2\x2\x933\x935\t\v"+
		"\x2\x2\x934\x936\a\xD6\x2\x2\x935\x934\x3\x2\x2\x2\x935\x936\x3\x2\x2"+
		"\x2\x936\x938\x3\x2\x2\x2\x937\x92E\x3\x2\x2\x2\x938\x93B\x3\x2\x2\x2"+
		"\x939\x937\x3\x2\x2\x2\x939\x93A\x3\x2\x2\x2\x93A\x93C\x3\x2\x2\x2\x93B"+
		"\x939\x3\x2\x2\x2\x93C\x949\x5\xF0y\x2\x93D\x93F\a\xD6\x2\x2\x93E\x93D"+
		"\x3\x2\x2\x2\x93E\x93F\x3\x2\x2\x2\x93F\x940\x3\x2\x2\x2\x940\x942\t\v"+
		"\x2\x2\x941\x943\a\xD6\x2\x2\x942\x941\x3\x2\x2\x2\x942\x943\x3\x2\x2"+
		"\x2\x943\x945\x3\x2\x2\x2\x944\x946\x5\xF0y\x2\x945\x944\x3\x2\x2\x2\x945"+
		"\x946\x3\x2\x2\x2\x946\x948\x3\x2\x2\x2\x947\x93E\x3\x2\x2\x2\x948\x94B"+
		"\x3\x2\x2\x2\x949\x947\x3\x2\x2\x2\x949\x94A\x3\x2\x2\x2\x94A\xEF\x3\x2"+
		"\x2\x2\x94B\x949\x3\x2\x2\x2\x94C\x94D\t\r\x2\x2\x94D\x94F\a\xD6\x2\x2"+
		"\x94E\x94C\x3\x2\x2\x2\x94E\x94F\x3\x2\x2\x2\x94F\x950\x3\x2\x2\x2\x950"+
		"\x951\x5\xC6\x64\x2\x951\xF1\x3\x2\x2\x2\x952\x953\a\n\x2\x2\x953\x955"+
		"\x5\xFE\x80\x2\x954\x956\x5\x114\x8B\x2\x955\x954\x3\x2\x2\x2\x955\x956"+
		"\x3\x2\x2\x2\x956\xF3\x3\x2\x2\x2\x957\x969\a\xC0\x2\x2\x958\x95A\a\xD6"+
		"\x2\x2\x959\x958\x3\x2\x2\x2\x959\x95A\x3\x2\x2\x2\x95A\x95B\x3\x2\x2"+
		"\x2\x95B\x966\x5\xF6|\x2\x95C\x95E\a\xD6\x2\x2\x95D\x95C\x3\x2\x2\x2\x95D"+
		"\x95E\x3\x2\x2\x2\x95E\x95F\x3\x2\x2\x2\x95F\x961\a\x5\x2\x2\x960\x962"+
		"\a\xD6\x2\x2\x961\x960\x3\x2\x2\x2\x961\x962\x3\x2\x2\x2\x962\x963\x3"+
		"\x2\x2\x2\x963\x965\x5\xF6|\x2\x964\x95D\x3\x2\x2\x2\x965\x968\x3\x2\x2"+
		"\x2\x966\x964\x3\x2\x2\x2\x966\x967\x3\x2\x2\x2\x967\x96A\x3\x2\x2\x2"+
		"\x968\x966\x3\x2\x2\x2\x969\x959\x3\x2\x2\x2\x969\x96A\x3\x2\x2\x2\x96A"+
		"\x96C\x3\x2\x2\x2\x96B\x96D\a\xD6\x2\x2\x96C\x96B\x3\x2\x2\x2\x96C\x96D"+
		"\x3\x2\x2\x2\x96D\x96E\x3\x2\x2\x2\x96E\x96F\a\xC9\x2\x2\x96F\xF5\x3\x2"+
		"\x2\x2\x970\x971\az\x2\x2\x971\x973\a\xD6\x2\x2\x972\x970\x3\x2\x2\x2"+
		"\x972\x973\x3\x2\x2\x2\x973\x976\x3\x2\x2\x2\x974\x975\t\xE\x2\x2\x975"+
		"\x977\a\xD6\x2\x2\x976\x974\x3\x2\x2\x2\x976\x977\x3\x2\x2\x2\x977\x97A"+
		"\x3\x2\x2\x2\x978\x979\a\x81\x2\x2\x979\x97B\a\xD6\x2\x2\x97A\x978\x3"+
		"\x2\x2\x2\x97A\x97B\x3\x2\x2\x2\x97B\x97C\x3\x2\x2\x2\x97C\x985\x5\xFE"+
		"\x80\x2\x97D\x97F\a\xD6\x2\x2\x97E\x97D\x3\x2\x2\x2\x97E\x97F\x3\x2\x2"+
		"\x2\x97F\x980\x3\x2\x2\x2\x980\x982\a\xC0\x2\x2\x981\x983\a\xD6\x2\x2"+
		"\x982\x981\x3\x2\x2\x2\x982\x983\x3\x2\x2\x2\x983\x984\x3\x2\x2\x2\x984"+
		"\x986\a\xC9\x2\x2\x985\x97E\x3\x2\x2\x2\x985\x986\x3\x2\x2\x2\x986\x989"+
		"\x3\x2\x2\x2\x987\x988\a\xD6\x2\x2\x988\x98A\x5\x100\x81\x2\x989\x987"+
		"\x3\x2\x2\x2\x989\x98A\x3\x2\x2\x2\x98A\x98F\x3\x2\x2\x2\x98B\x98D\a\xD6"+
		"\x2\x2\x98C\x98B\x3\x2\x2\x2\x98C\x98D\x3\x2\x2\x2\x98D\x98E\x3\x2\x2"+
		"\x2\x98E\x990\x5\xF8}\x2\x98F\x98C\x3\x2\x2\x2\x98F\x990\x3\x2\x2\x2\x990"+
		"\xF7\x3\x2\x2\x2\x991\x993\a\xBC\x2\x2\x992\x994\a\xD6\x2\x2\x993\x992"+
		"\x3\x2\x2\x2\x993\x994\x3\x2\x2\x2\x994\x997\x3\x2\x2\x2\x995\x998\x5"+
		"\x110\x89\x2\x996\x998\x5\xFE\x80\x2\x997\x995\x3\x2\x2\x2\x997\x996\x3"+
		"\x2\x2\x2\x998\xF9\x3\x2\x2\x2\x999\x9A4\x5\xFC\x7F\x2\x99A\x99C\a\xD6"+
		"\x2\x2\x99B\x99A\x3\x2\x2\x2\x99B\x99C\x3\x2\x2\x2\x99C\x99D\x3\x2\x2"+
		"\x2\x99D\x99F\a\x5\x2\x2\x99E\x9A0\a\xD6\x2\x2\x99F\x99E\x3\x2\x2\x2\x99F"+
		"\x9A0\x3\x2\x2\x2\x9A0\x9A1\x3\x2\x2\x2\x9A1\x9A3\x5\xFC\x7F\x2\x9A2\x99B"+
		"\x3\x2\x2\x2\x9A3\x9A6\x3\x2\x2\x2\x9A4\x9A2\x3\x2\x2\x2\x9A4\x9A5\x3"+
		"\x2\x2\x2\x9A5\xFB\x3\x2\x2\x2\x9A6\x9A4\x3\x2\x2\x2\x9A7\x9A8\x5\xC6"+
		"\x64\x2\x9A8\x9A9\a\xD6\x2\x2\x9A9\x9AA\a\xA9\x2\x2\x9AA\x9AB\a\xD6\x2"+
		"\x2\x9AB\x9AD\x3\x2\x2\x2\x9AC\x9A7\x3\x2\x2\x2\x9AC\x9AD\x3\x2\x2\x2"+
		"\x9AD\x9AE\x3\x2\x2\x2\x9AE\x9AF\x5\xC6\x64\x2\x9AF\xFD\x3\x2\x2\x2\x9B0"+
		"\x9B3\a\xD2\x2\x2\x9B1\x9B3\x5\x118\x8D\x2\x9B2\x9B0\x3\x2\x2\x2\x9B2"+
		"\x9B1\x3\x2\x2\x2\x9B3\x9B4\x3\x2\x2\x2\x9B4\x9B2\x3\x2\x2\x2\x9B4\x9B5"+
		"\x3\x2\x2\x2\x9B5\x9BF\x3\x2\x2\x2\x9B6\x9B9\a\xCA\x2\x2\x9B7\x9BA\a\xD2"+
		"\x2\x2\x9B8\x9BA\x5\x118\x8D\x2\x9B9\x9B7\x3\x2\x2\x2\x9B9\x9B8\x3\x2"+
		"\x2\x2\x9BA\x9BB\x3\x2\x2\x2\x9BB\x9B9\x3\x2\x2\x2\x9BB\x9BC\x3\x2\x2"+
		"\x2\x9BC\x9BD\x3\x2\x2\x2\x9BD\x9BF\a\xCB\x2\x2\x9BE\x9B2\x3\x2\x2\x2"+
		"\x9BE\x9B6\x3\x2\x2\x2\x9BF\xFF\x3\x2\x2\x2\x9C0\x9C1\a\x13\x2\x2\x9C1"+
		"\x9C4\a\xD6\x2\x2\x9C2\x9C3\as\x2\x2\x9C3\x9C5\a\xD6\x2\x2\x9C4\x9C2\x3"+
		"\x2\x2\x2\x9C4\x9C5\x3\x2\x2\x2\x9C5\x9C6\x3\x2\x2\x2\x9C6\x9C9\x5\x112"+
		"\x8A\x2\x9C7\x9C8\a\xD6\x2\x2\x9C8\x9CA\x5\x10A\x86\x2\x9C9\x9C7\x3\x2"+
		"\x2\x2\x9C9\x9CA\x3\x2\x2\x2\x9CA\x101\x3\x2\x2\x2\x9CB\x9CC\t\xF\x2\x2"+
		"\x9CC\x103\x3\x2\x2\x2\x9CD\x9D2\a\xD2\x2\x2\x9CE\x9D1\x5\x118\x8D\x2"+
		"\x9CF\x9D1\a\xD2\x2\x2\x9D0\x9CE\x3\x2\x2\x2\x9D0\x9CF\x3\x2\x2\x2\x9D1"+
		"\x9D4\x3\x2\x2\x2\x9D2\x9D0\x3\x2\x2\x2\x9D2\x9D3\x3\x2\x2\x2\x9D3\x9DD"+
		"\x3\x2\x2\x2\x9D4\x9D2\x3\x2\x2\x2\x9D5\x9D8\x5\x118\x8D\x2\x9D6\x9D9"+
		"\x5\x118\x8D\x2\x9D7\x9D9\a\xD2\x2\x2\x9D8\x9D6\x3\x2\x2\x2\x9D8\x9D7"+
		"\x3\x2\x2\x2\x9D9\x9DA\x3\x2\x2\x2\x9DA\x9D8\x3\x2\x2\x2\x9DA\x9DB\x3"+
		"\x2\x2\x2\x9DB\x9DD\x3\x2\x2\x2\x9DC\x9CD\x3\x2\x2\x2\x9DC\x9D5\x3\x2"+
		"\x2\x2\x9DD\x105\x3\x2\x2\x2\x9DE\x9DF\t\x10\x2\x2\x9DF\x107\x3\x2\x2"+
		"\x2\x9E0\x9E5\x5\xFE\x80\x2\x9E1\x9E2\a\x4\x2\x2\x9E2\x9E4\x5\xFE\x80"+
		"\x2\x9E3\x9E1\x3\x2\x2\x2\x9E4\x9E7\x3\x2\x2\x2\x9E5\x9E3\x3\x2\x2\x2"+
		"\x9E5\x9E6\x3\x2\x2\x2\x9E6\x109\x3\x2\x2\x2\x9E7\x9E5\x3\x2\x2\x2\x9E8"+
		"\x9EA\a\xC4\x2\x2\x9E9\x9EB\a\xD6\x2\x2\x9EA\x9E9\x3\x2\x2\x2\x9EA\x9EB"+
		"\x3\x2\x2\x2\x9EB\x9EE\x3\x2\x2\x2\x9EC\x9EF\a\xCF\x2\x2\x9ED\x9EF\x5"+
		"\xFE\x80\x2\x9EE\x9EC\x3\x2\x2\x2\x9EE\x9ED\x3\x2\x2\x2\x9EF\x10B\x3\x2"+
		"\x2\x2\x9F0\x9F9\x5\x104\x83\x2\x9F1\x9F3\a\xD6\x2\x2\x9F2\x9F1\x3\x2"+
		"\x2\x2\x9F2\x9F3\x3\x2\x2\x2\x9F3\x9F4\x3\x2\x2\x2\x9F4\x9F6\a\xC2\x2"+
		"\x2\x9F5\x9F7\a\xD6\x2\x2\x9F6\x9F5\x3\x2\x2\x2\x9F6\x9F7\x3\x2\x2\x2"+
		"\x9F7\x9F8\x3\x2\x2\x2\x9F8\x9FA\x5\x104\x83\x2\x9F9\x9F2\x3\x2\x2\x2"+
		"\x9F9\x9FA\x3\x2\x2\x2\x9FA\x10D\x3\x2\x2\x2\x9FB\x9FC\x5\xFE\x80\x2\x9FC"+
		"\x9FD\a\x6\x2\x2\x9FD\x10F\x3\x2\x2\x2\x9FE\x9FF\t\x11\x2\x2\x9FF\x111"+
		"\x3\x2\x2\x2\xA00\xA03\x5\x102\x82\x2\xA01\xA03\x5\x108\x85\x2\xA02\xA00"+
		"\x3\x2\x2\x2\xA02\xA01\x3\x2\x2\x2\xA03\xA0C\x3\x2\x2\x2\xA04\xA06\a\xD6"+
		"\x2\x2\xA05\xA04\x3\x2\x2\x2\xA05\xA06\x3\x2\x2\x2\xA06\xA07\x3\x2\x2"+
		"\x2\xA07\xA09\a\xC0\x2\x2\xA08\xA0A\a\xD6\x2\x2\xA09\xA08\x3\x2\x2\x2"+
		"\xA09\xA0A\x3\x2\x2\x2\xA0A\xA0B\x3\x2\x2\x2\xA0B\xA0D\a\xC9\x2\x2\xA0C"+
		"\xA05\x3\x2\x2\x2\xA0C\xA0D\x3\x2\x2\x2\xA0D\x113\x3\x2\x2\x2\xA0E\xA0F"+
		"\t\x12\x2\x2\xA0F\x115\x3\x2\x2\x2\xA10\xA11\t\x13\x2\x2\xA11\x117\x3"+
		"\x2\x2\x2\xA12\xA13\t\x14\x2\x2\xA13\x119\x3\x2\x2\x2\x1B4\x11E\x123\x12A"+
		"\x12C\x12F\x134\x138\x13D\x141\x146\x14A\x156\x15B\x161\x165\x169\x172"+
		"\x176\x17C\x180\x18A\x193\x199\x19E\x1A8\x1B0\x1B4\x1B8\x1BC\x1C1\x1C8"+
		"\x1CB\x1D0\x216\x21C\x220\x223\x233\x237\x23C\x23F\x244\x24A\x24E\x253"+
		"\x258\x25C\x25F\x263\x269\x26D\x274\x283\x286\x289\x28D\x293\x297\x29C"+
		"\x2A3\x2A7\x2AB\x2AF\x2B2\x2B8\x2BE\x2C0\x2CB\x2D1\x2D3\x2DB\x2E1\x2E9"+
		"\x2F0\x2F8\x2FD\x304\x308\x30B\x310\x31D\x323\x32D\x331\x33B\x344\x34A"+
		"\x34C\x351\x357\x35B\x35E\x362\x36D\x372\x378\x37A\x37F\x384\x388\x38E"+
		"\x391\x395\x39A\x3A0\x3A2\x3AA\x3AE\x3B1\x3B4\x3B8\x3CF\x3D5\x3D9\x3DD"+
		"\x3E7\x3ED\x3EF\x3FB\x401\x403\x409\x40F\x411\x41B\x41F\x424\x42C\x430"+
		"\x434\x43C\x440\x44C\x450\x457\x459\x45F\x463\x46B\x46F\x47B\x481\x483"+
		"\x48D\x493\x495\x49B\x4A1\x4A3\x4A7\x4AB\x4AF\x4C7\x4D1\x4D5\x4DA\x4E5"+
		"\x4E9\x4EE\x4FC\x500\x509\x50D\x510\x514\x518\x51B\x51F\x523\x526\x52A"+
		"\x52D\x531\x533\x538\x53C\x540\x544\x546\x54C\x550\x553\x558\x55C\x562"+
		"\x565\x569\x56E\x574\x576\x57D\x581\x587\x58A\x58F\x595\x597\x59E\x5A2"+
		"\x5A8\x5AB\x5B0\x5B6\x5B8\x5C0\x5C4\x5C7\x5CA\x5CE\x5D6\x5DA\x5DE\x5E0"+
		"\x5E3\x5E8\x5EE\x5F2\x5F6\x5FB\x600\x604\x608\x60D\x615\x617\x623\x627"+
		"\x62F\x633\x63B\x63F\x643\x647\x64B\x64F\x657\x65B\x667\x66C\x670\x678"+
		"\x67B\x680\x686\x688\x68E\x690\x695\x699\x69F\x6A3\x6A8\x6B1\x6B5\x6BA"+
		"\x6BD\x6C3\x6C7\x6CA\x6D0\x6D4\x6DC\x6E0\x6E9\x6ED\x6F3\x6F6\x6FB\x701"+
		"\x703\x709\x70D\x714\x71C\x721\x728\x72C\x72F\x732\x735\x739\x73E\x747"+
		"\x751\x755\x75C\x75E\x769\x76D\x773\x778\x782\x786\x78A\x78F\x796\x7A4"+
		"\x7A8\x7AD\x7B1\x7B6\x7BA\x7BF\x7C3\x7C8\x7CC\x7D1\x7D5\x7DF\x7E3\x7E8"+
		"\x7EC\x7F1\x7F5\x7FA\x7FE\x803\x807\x80C\x810\x81F\x823\x828\x82C\x834"+
		"\x836\x83C\x841\x847\x84B\x850\x855\x859\x85D\x85F\x863\x865\x868\x86C"+
		"\x874\x87B\x884\x888\x892\x898\x89A\x8A2\x8A6\x8A9\x8AD\x8B3\x8B6\x8BA"+
		"\x8BE\x8C2\x8C7\x8CC\x8CF\x8D3\x8D7\x8DB\x8DF\x8E4\x8E7\x8EC\x8F0\x8F3"+
		"\x8F9\x8FD\x900\x904\x907\x90A\x90E\x912\x914\x918\x91C\x921\x924\x929"+
		"\x92E\x931\x935\x939\x93E\x942\x945\x949\x94E\x955\x959\x95D\x961\x966"+
		"\x969\x96C\x972\x976\x97A\x97E\x982\x985\x989\x98C\x98F\x993\x997\x99B"+
		"\x99F\x9A4\x9AC\x9B2\x9B4\x9B9\x9BB\x9BE\x9C4\x9C9\x9D0\x9D2\x9D8\x9DA"+
		"\x9DC\x9E5\x9EA\x9EE\x9F2\x9F6\x9F9\xA02\xA05\xA09\xA0C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing
