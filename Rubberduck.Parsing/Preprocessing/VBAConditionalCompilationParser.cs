//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\TestProj\TestProj\VBAConditionalCompilation.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Preprocessing
{
    using Antlr4.Runtime;
    using Antlr4.Runtime.Atn;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections.Generic;
    using DFA = Antlr4.Runtime.Dfa.DFA;

    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
    [System.CLSCompliant(false)]
    public partial class VBAConditionalCompilationParser : Parser
    {
        public const int
            STRINGLITERAL = 1, OCTLITERAL = 2, HEXLITERAL = 3, SHORTLITERAL = 4, INTEGERLITERAL = 5,
            DOUBLELITERAL = 6, DATELITERAL = 7, JANUARY = 8, FEBRUARY = 9, MARCH = 10, APRIL = 11,
            MAY = 12, JUNE = 13, JULY = 14, AUGUST = 15, SEPTEMBER = 16, OCTOBER = 17, NOVEMBER = 18,
            DECEMBER = 19, JAN = 20, FEB = 21, MAR = 22, APR = 23, JUN = 24, JUL = 25, AUG = 26, SEP = 27,
            OCT = 28, NOV = 29, DEC = 30, NOT = 31, TRUE = 32, FALSE = 33, NOTHING = 34, NULL = 35,
            EMPTY = 36, HASHCONST = 37, HASHIF = 38, THEN = 39, HASHELSEIF = 40, HASHELSE = 41,
            HASHENDIF = 42, INT = 43, FIX = 44, ABS = 45, SGN = 46, LEN = 47, LENB = 48, CBOOL = 49,
            CBYTE = 50, CCUR = 51, CDATE = 52, CDBL = 53, CINT = 54, CLNG = 55, CLNGLNG = 56, CLNGPTR = 57,
            CSNG = 58, CSTR = 59, CVAR = 60, IS = 61, LIKE = 62, MOD = 63, AND = 64, OR = 65, XOR = 66,
            EQV = 67, IMP = 68, CONST = 69, HASH = 70, AMPERSAND = 71, PERCENT = 72, EXCLAMATIONMARK = 73,
            AT = 74, DOLLAR = 75, L_PAREN = 76, R_PAREN = 77, L_SQUARE_BRACKET = 78, R_SQUARE_BRACKET = 79,
            UNDERSCORE = 80, EQ = 81, DIV = 82, INTDIV = 83, GEQ = 84, GT = 85, LEQ = 86, LT = 87,
            MINUS = 88, MULT = 89, NEQ = 90, PLUS = 91, POW = 92, SINGLEQUOTE = 93, DOT = 94, COMMA = 95,
            NEWLINE = 96, WS = 97, IDENTIFIER = 98, ANYCHAR = 99;
        public static readonly string[] tokenNames = {
        "<INVALID>", "STRINGLITERAL", "OCTLITERAL", "HEXLITERAL", "SHORTLITERAL",
        "INTEGERLITERAL", "DOUBLELITERAL", "DATELITERAL", "JANUARY", "FEBRUARY",
        "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER",
        "NOVEMBER", "DECEMBER", "JAN", "FEB", "MAR", "APR", "JUN", "JUL", "AUG",
        "SEP", "OCT", "NOV", "DEC", "NOT", "TRUE", "FALSE", "NOTHING", "NULL",
        "EMPTY", "HASHCONST", "HASHIF", "THEN", "HASHELSEIF", "HASHELSE", "HASHENDIF",
        "INT", "FIX", "ABS", "SGN", "LEN", "LENB", "CBOOL", "CBYTE", "CCUR", "CDATE",
        "CDBL", "CINT", "CLNG", "CLNGLNG", "CLNGPTR", "CSNG", "CSTR", "CVAR",
        "IS", "LIKE", "MOD", "AND", "OR", "XOR", "EQV", "IMP", "CONST", "'#'",
        "'&'", "'%'", "'!'", "'@'", "'$'", "'('", "')'", "'['", "']'", "'_'",
        "'='", "'/'", "'\\'", "'>='", "'>'", "'<='", "'<'", "'-'", "'*'", "'<>'",
        "'+'", "'^'", "'''", "'.'", "','", "NEWLINE", "WS", "IDENTIFIER", "ANYCHAR"
    };
        public const int
            RULE_compilationUnit = 0, RULE_ccBlock = 1, RULE_ccConst = 2, RULE_logicalLine = 3,
            RULE_extendedLine = 4, RULE_lineContinuation = 5, RULE_ccVarLhs = 6, RULE_ccExpression = 7,
            RULE_ccIfBlock = 8, RULE_ccIf = 9, RULE_ccElseIfBlock = 10, RULE_ccElseIf = 11,
            RULE_ccElseBlock = 12, RULE_ccElse = 13, RULE_ccEndIf = 14, RULE_ccEol = 15,
            RULE_intrinsicFunction = 16, RULE_intrinsicFunctionName = 17, RULE_name = 18,
            RULE_typeSuffix = 19, RULE_literal = 20;
        public static readonly string[] ruleNames = {
        "compilationUnit", "ccBlock", "ccConst", "logicalLine", "extendedLine",
        "lineContinuation", "ccVarLhs", "ccExpression", "ccIfBlock", "ccIf", "ccElseIfBlock",
        "ccElseIf", "ccElseBlock", "ccElse", "ccEndIf", "ccEol", "intrinsicFunction",
        "intrinsicFunctionName", "name", "typeSuffix", "literal"
    };

        public override string GrammarFileName { get { return "VBAConditionalCompilation.g4"; } }

        public override string[] TokenNames { get { return tokenNames; } }

        public override string[] RuleNames { get { return ruleNames; } }

        public override string SerializedAtn { get { return _serializedATN; } }

        public VBAConditionalCompilationParser(ITokenStream input)
            : base(input)
        {
            _interp = new ParserATNSimulator(this, _ATN);
        }
        public partial class CompilationUnitContext : ParserRuleContext
        {
            public CcBlockContext ccBlock()
            {
                return GetRuleContext<CcBlockContext>(0);
            }
            public ITerminalNode Eof() { return GetToken(VBAConditionalCompilationParser.Eof, 0); }
            public CompilationUnitContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_compilationUnit; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterCompilationUnit(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitCompilationUnit(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CompilationUnitContext compilationUnit()
        {
            CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
            EnterRule(_localctx, 0, RULE_compilationUnit);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 42; ccBlock();
                    State = 43; Match(Eof);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CcBlockContext : ParserRuleContext
        {
            public CcIfBlockContext ccIfBlock(int i)
            {
                return GetRuleContext<CcIfBlockContext>(i);
            }
            public IReadOnlyList<LogicalLineContext> logicalLine()
            {
                return GetRuleContexts<LogicalLineContext>();
            }
            public IReadOnlyList<CcIfBlockContext> ccIfBlock()
            {
                return GetRuleContexts<CcIfBlockContext>();
            }
            public LogicalLineContext logicalLine(int i)
            {
                return GetRuleContext<LogicalLineContext>(i);
            }
            public IReadOnlyList<CcConstContext> ccConst()
            {
                return GetRuleContexts<CcConstContext>();
            }
            public CcConstContext ccConst(int i)
            {
                return GetRuleContext<CcConstContext>(i);
            }
            public CcBlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ccBlock; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterCcBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitCcBlock(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCcBlock(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CcBlockContext ccBlock()
        {
            CcBlockContext _localctx = new CcBlockContext(_ctx, State);
            EnterRule(_localctx, 2, RULE_ccBlock);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 50;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 1, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                State = 48;
                                switch (Interpreter.AdaptivePredict(_input, 0, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 45; ccConst();
                                        }
                                        break;

                                    case 2:
                                        {
                                            State = 46; ccIfBlock();
                                        }
                                        break;

                                    case 3:
                                        {
                                            State = 47; logicalLine();
                                        }
                                        break;
                                }
                            }
                        }
                        State = 52;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 1, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CcConstContext : ParserRuleContext
        {
            public CcVarLhsContext ccVarLhs()
            {
                return GetRuleContext<CcVarLhsContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAConditionalCompilationParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAConditionalCompilationParser.WS); }
            public ITerminalNode EQ() { return GetToken(VBAConditionalCompilationParser.EQ, 0); }
            public ITerminalNode HASHCONST() { return GetToken(VBAConditionalCompilationParser.HASHCONST, 0); }
            public CcEolContext ccEol()
            {
                return GetRuleContext<CcEolContext>(0);
            }
            public CcExpressionContext ccExpression()
            {
                return GetRuleContext<CcExpressionContext>(0);
            }
            public CcConstContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ccConst; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterCcConst(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitCcConst(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCcConst(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CcConstContext ccConst()
        {
            CcConstContext _localctx = new CcConstContext(_ctx, State);
            EnterRule(_localctx, 4, RULE_ccConst);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 56;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == WS)
                    {
                        {
                            {
                                State = 53; Match(WS);
                            }
                        }
                        State = 58;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 59; Match(HASHCONST);
                    State = 61;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 60; Match(WS);
                            }
                        }
                        State = 63;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == WS);
                    State = 65; ccVarLhs();
                    State = 67;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 66; Match(WS);
                            }
                        }
                        State = 69;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == WS);
                    State = 71; Match(EQ);
                    State = 73;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 72; Match(WS);
                            }
                        }
                        State = 75;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == WS);
                    State = 77; ccExpression(0);
                    State = 78; ccEol();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LogicalLineContext : ParserRuleContext
        {
            public IReadOnlyList<ExtendedLineContext> extendedLine()
            {
                return GetRuleContexts<ExtendedLineContext>();
            }
            public ExtendedLineContext extendedLine(int i)
            {
                return GetRuleContext<ExtendedLineContext>(i);
            }
            public LogicalLineContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_logicalLine; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterLogicalLine(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitLogicalLine(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLogicalLine(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LogicalLineContext logicalLine()
        {
            LogicalLineContext _localctx = new LogicalLineContext(_ctx, State);
            EnterRule(_localctx, 6, RULE_logicalLine);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 81;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 80; extendedLine();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 83;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 6, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ExtendedLineContext : ParserRuleContext
        {
            public IReadOnlyList<ITerminalNode> HASHIF() { return GetTokens(VBAConditionalCompilationParser.HASHIF); }
            public IReadOnlyList<ITerminalNode> HASHENDIF() { return GetTokens(VBAConditionalCompilationParser.HASHENDIF); }
            public ITerminalNode HASHENDIF(int i)
            {
                return GetToken(VBAConditionalCompilationParser.HASHENDIF, i);
            }
            public ITerminalNode NEWLINE() { return GetToken(VBAConditionalCompilationParser.NEWLINE, 0); }
            public IReadOnlyList<ITerminalNode> HASHELSE() { return GetTokens(VBAConditionalCompilationParser.HASHELSE); }
            public IReadOnlyList<ITerminalNode> HASHELSEIF() { return GetTokens(VBAConditionalCompilationParser.HASHELSEIF); }
            public IReadOnlyList<LineContinuationContext> lineContinuation()
            {
                return GetRuleContexts<LineContinuationContext>();
            }
            public ITerminalNode HASHCONST(int i)
            {
                return GetToken(VBAConditionalCompilationParser.HASHCONST, i);
            }
            public ITerminalNode HASHIF(int i)
            {
                return GetToken(VBAConditionalCompilationParser.HASHIF, i);
            }
            public IReadOnlyList<ITerminalNode> HASHCONST() { return GetTokens(VBAConditionalCompilationParser.HASHCONST); }
            public ITerminalNode HASHELSEIF(int i)
            {
                return GetToken(VBAConditionalCompilationParser.HASHELSEIF, i);
            }
            public LineContinuationContext lineContinuation(int i)
            {
                return GetRuleContext<LineContinuationContext>(i);
            }
            public ITerminalNode HASHELSE(int i)
            {
                return GetToken(VBAConditionalCompilationParser.HASHELSE, i);
            }
            public ExtendedLineContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_extendedLine; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterExtendedLine(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitExtendedLine(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitExtendedLine(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ExtendedLineContext extendedLine()
        {
            ExtendedLineContext _localctx = new ExtendedLineContext(_ctx, State);
            EnterRule(_localctx, 8, RULE_extendedLine);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 87;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    State = 87;
                                    switch (Interpreter.AdaptivePredict(_input, 7, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 85; lineContinuation();
                                            }
                                            break;

                                        case 2:
                                            {
                                                State = 86;
                                                _la = _input.La(1);
                                                if (_la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HASHCONST) | (1L << HASHIF) | (1L << HASHELSEIF) | (1L << HASHELSE) | (1L << HASHENDIF))) != 0)))
                                                {
                                                    _errHandler.RecoverInline(this);
                                                }
                                                Consume();
                                            }
                                            break;
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 89;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 8, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                    State = 92;
                    switch (Interpreter.AdaptivePredict(_input, 9, _ctx))
                    {
                        case 1:
                            {
                                State = 91; Match(NEWLINE);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LineContinuationContext : ParserRuleContext
        {
            public ITerminalNode UNDERSCORE() { return GetToken(VBAConditionalCompilationParser.UNDERSCORE, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAConditionalCompilationParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAConditionalCompilationParser.WS); }
            public ITerminalNode NEWLINE() { return GetToken(VBAConditionalCompilationParser.NEWLINE, 0); }
            public LineContinuationContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lineContinuation; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterLineContinuation(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitLineContinuation(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLineContinuation(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LineContinuationContext lineContinuation()
        {
            LineContinuationContext _localctx = new LineContinuationContext(_ctx, State);
            EnterRule(_localctx, 10, RULE_lineContinuation);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 97;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == WS)
                    {
                        {
                            {
                                State = 94; Match(WS);
                            }
                        }
                        State = 99;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 100; Match(UNDERSCORE);
                    State = 104;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == WS)
                    {
                        {
                            {
                                State = 101; Match(WS);
                            }
                        }
                        State = 106;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 107; Match(NEWLINE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CcVarLhsContext : ParserRuleContext
        {
            public NameContext name()
            {
                return GetRuleContext<NameContext>(0);
            }
            public CcVarLhsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ccVarLhs; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterCcVarLhs(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitCcVarLhs(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCcVarLhs(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CcVarLhsContext ccVarLhs()
        {
            CcVarLhsContext _localctx = new CcVarLhsContext(_ctx, State);
            EnterRule(_localctx, 12, RULE_ccVarLhs);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 109; name();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CcExpressionContext : ParserRuleContext
        {
            public ITerminalNode R_PAREN() { return GetToken(VBAConditionalCompilationParser.R_PAREN, 0); }
            public ITerminalNode XOR() { return GetToken(VBAConditionalCompilationParser.XOR, 0); }
            public ITerminalNode EQV() { return GetToken(VBAConditionalCompilationParser.EQV, 0); }
            public ITerminalNode AMPERSAND() { return GetToken(VBAConditionalCompilationParser.AMPERSAND, 0); }
            public ITerminalNode L_PAREN() { return GetToken(VBAConditionalCompilationParser.L_PAREN, 0); }
            public IReadOnlyList<CcExpressionContext> ccExpression()
            {
                return GetRuleContexts<CcExpressionContext>();
            }
            public ITerminalNode INTDIV() { return GetToken(VBAConditionalCompilationParser.INTDIV, 0); }
            public ITerminalNode NOT() { return GetToken(VBAConditionalCompilationParser.NOT, 0); }
            public ITerminalNode GEQ() { return GetToken(VBAConditionalCompilationParser.GEQ, 0); }
            public ITerminalNode LEQ() { return GetToken(VBAConditionalCompilationParser.LEQ, 0); }
            public LiteralContext literal()
            {
                return GetRuleContext<LiteralContext>(0);
            }
            public ITerminalNode AND() { return GetToken(VBAConditionalCompilationParser.AND, 0); }
            public NameContext name()
            {
                return GetRuleContext<NameContext>(0);
            }
            public ITerminalNode IMP() { return GetToken(VBAConditionalCompilationParser.IMP, 0); }
            public CcExpressionContext ccExpression(int i)
            {
                return GetRuleContext<CcExpressionContext>(i);
            }
            public ITerminalNode POW() { return GetToken(VBAConditionalCompilationParser.POW, 0); }
            public ITerminalNode DIV() { return GetToken(VBAConditionalCompilationParser.DIV, 0); }
            public ITerminalNode NEQ() { return GetToken(VBAConditionalCompilationParser.NEQ, 0); }
            public IntrinsicFunctionContext intrinsicFunction()
            {
                return GetRuleContext<IntrinsicFunctionContext>(0);
            }
            public ITerminalNode MULT() { return GetToken(VBAConditionalCompilationParser.MULT, 0); }
            public ITerminalNode LT() { return GetToken(VBAConditionalCompilationParser.LT, 0); }
            public ITerminalNode GT() { return GetToken(VBAConditionalCompilationParser.GT, 0); }
            public ITerminalNode MOD() { return GetToken(VBAConditionalCompilationParser.MOD, 0); }
            public ITerminalNode OR() { return GetToken(VBAConditionalCompilationParser.OR, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAConditionalCompilationParser.WS, i);
            }
            public ITerminalNode IS() { return GetToken(VBAConditionalCompilationParser.IS, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAConditionalCompilationParser.WS); }
            public ITerminalNode MINUS() { return GetToken(VBAConditionalCompilationParser.MINUS, 0); }
            public ITerminalNode PLUS() { return GetToken(VBAConditionalCompilationParser.PLUS, 0); }
            public ITerminalNode EQ() { return GetToken(VBAConditionalCompilationParser.EQ, 0); }
            public ITerminalNode LIKE() { return GetToken(VBAConditionalCompilationParser.LIKE, 0); }
            public CcExpressionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ccExpression; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterCcExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitCcExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCcExpression(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CcExpressionContext ccExpression()
        {
            return ccExpression(0);
        }

        private CcExpressionContext ccExpression(int _p)
        {
            ParserRuleContext _parentctx = _ctx;
            int _parentState = State;
            CcExpressionContext _localctx = new CcExpressionContext(_ctx, _parentState);
            CcExpressionContext _prevctx = _localctx;
            int _startState = 14;
            EnterRecursionRule(_localctx, 14, RULE_ccExpression, _p);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 147;
                    switch (_input.La(1))
                    {
                        case MINUS:
                            {
                                State = 112; Match(MINUS);
                                State = 116;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                while (_la == WS)
                                {
                                    {
                                        {
                                            State = 113; Match(WS);
                                        }
                                    }
                                    State = 118;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                }
                                State = 119; ccExpression(16);
                            }
                            break;
                        case NOT:
                            {
                                State = 120; Match(NOT);
                                State = 124;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                while (_la == WS)
                                {
                                    {
                                        {
                                            State = 121; Match(WS);
                                        }
                                    }
                                    State = 126;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                }
                                State = 127; ccExpression(9);
                            }
                            break;
                        case L_PAREN:
                            {
                                State = 128; Match(L_PAREN);
                                State = 132;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                while (_la == WS)
                                {
                                    {
                                        {
                                            State = 129; Match(WS);
                                        }
                                    }
                                    State = 134;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                }
                                State = 135; ccExpression(0);
                                State = 139;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                while (_la == WS)
                                {
                                    {
                                        {
                                            State = 136; Match(WS);
                                        }
                                    }
                                    State = 141;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                }
                                State = 142; Match(R_PAREN);
                            }
                            break;
                        case INT:
                        case FIX:
                        case ABS:
                        case SGN:
                        case LEN:
                        case LENB:
                        case CBOOL:
                        case CBYTE:
                        case CCUR:
                        case CDATE:
                        case CDBL:
                        case CINT:
                        case CLNG:
                        case CLNGLNG:
                        case CLNGPTR:
                        case CSNG:
                        case CSTR:
                        case CVAR:
                            {
                                State = 144; intrinsicFunction();
                            }
                            break;
                        case STRINGLITERAL:
                        case OCTLITERAL:
                        case HEXLITERAL:
                        case SHORTLITERAL:
                        case INTEGERLITERAL:
                        case DOUBLELITERAL:
                        case DATELITERAL:
                        case TRUE:
                        case FALSE:
                        case NOTHING:
                        case NULL:
                        case EMPTY:
                            {
                                State = 145; literal();
                            }
                            break;
                        case IDENTIFIER:
                            {
                                State = 146; name();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    _ctx.stop = _input.Lt(-1);
                    State = 331;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 42, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            if (_parseListeners != null) TriggerExitRuleEvent();
                            _prevctx = _localctx;
                            {
                                State = 329;
                                switch (Interpreter.AdaptivePredict(_input, 41, _ctx))
                                {
                                    case 1:
                                        {
                                            _localctx = new CcExpressionContext(_parentctx, _parentState);
                                            PushNewRecursionContext(_localctx, _startState, RULE_ccExpression);
                                            State = 149;
                                            if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
                                            State = 153;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 150; Match(WS);
                                                    }
                                                }
                                                State = 155;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 156; Match(POW);
                                            State = 160;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 157; Match(WS);
                                                    }
                                                }
                                                State = 162;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 163; ccExpression(18);
                                        }
                                        break;

                                    case 2:
                                        {
                                            _localctx = new CcExpressionContext(_parentctx, _parentState);
                                            PushNewRecursionContext(_localctx, _startState, RULE_ccExpression);
                                            State = 164;
                                            if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
                                            State = 168;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 165; Match(WS);
                                                    }
                                                }
                                                State = 170;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 171;
                                            _la = _input.La(1);
                                            if (!(_la == DIV || _la == MULT))
                                            {
                                                _errHandler.RecoverInline(this);
                                            }
                                            Consume();
                                            State = 175;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 172; Match(WS);
                                                    }
                                                }
                                                State = 177;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 178; ccExpression(16);
                                        }
                                        break;

                                    case 3:
                                        {
                                            _localctx = new CcExpressionContext(_parentctx, _parentState);
                                            PushNewRecursionContext(_localctx, _startState, RULE_ccExpression);
                                            State = 179;
                                            if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
                                            State = 183;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 180; Match(WS);
                                                    }
                                                }
                                                State = 185;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 186; Match(INTDIV);
                                            State = 190;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 187; Match(WS);
                                                    }
                                                }
                                                State = 192;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 193; ccExpression(15);
                                        }
                                        break;

                                    case 4:
                                        {
                                            _localctx = new CcExpressionContext(_parentctx, _parentState);
                                            PushNewRecursionContext(_localctx, _startState, RULE_ccExpression);
                                            State = 194;
                                            if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
                                            State = 198;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 195; Match(WS);
                                                    }
                                                }
                                                State = 200;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 201; Match(MOD);
                                            State = 205;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 202; Match(WS);
                                                    }
                                                }
                                                State = 207;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 208; ccExpression(14);
                                        }
                                        break;

                                    case 5:
                                        {
                                            _localctx = new CcExpressionContext(_parentctx, _parentState);
                                            PushNewRecursionContext(_localctx, _startState, RULE_ccExpression);
                                            State = 209;
                                            if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
                                            State = 213;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 210; Match(WS);
                                                    }
                                                }
                                                State = 215;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 216;
                                            _la = _input.La(1);
                                            if (!(_la == MINUS || _la == PLUS))
                                            {
                                                _errHandler.RecoverInline(this);
                                            }
                                            Consume();
                                            State = 220;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 217; Match(WS);
                                                    }
                                                }
                                                State = 222;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 223; ccExpression(13);
                                        }
                                        break;

                                    case 6:
                                        {
                                            _localctx = new CcExpressionContext(_parentctx, _parentState);
                                            PushNewRecursionContext(_localctx, _startState, RULE_ccExpression);
                                            State = 224;
                                            if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
                                            State = 228;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 225; Match(WS);
                                                    }
                                                }
                                                State = 230;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 231; Match(AMPERSAND);
                                            State = 235;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 232; Match(WS);
                                                    }
                                                }
                                                State = 237;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 238; ccExpression(12);
                                        }
                                        break;

                                    case 7:
                                        {
                                            _localctx = new CcExpressionContext(_parentctx, _parentState);
                                            PushNewRecursionContext(_localctx, _startState, RULE_ccExpression);
                                            State = 239;
                                            if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
                                            State = 243;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 240; Match(WS);
                                                    }
                                                }
                                                State = 245;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 246;
                                            _la = _input.La(1);
                                            if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (IS - 61)) | (1L << (LIKE - 61)) | (1L << (EQ - 61)) | (1L << (GEQ - 61)) | (1L << (GT - 61)) | (1L << (LEQ - 61)) | (1L << (LT - 61)) | (1L << (NEQ - 61)))) != 0)))
                                            {
                                                _errHandler.RecoverInline(this);
                                            }
                                            Consume();
                                            State = 250;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 247; Match(WS);
                                                    }
                                                }
                                                State = 252;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 253; ccExpression(11);
                                        }
                                        break;

                                    case 8:
                                        {
                                            _localctx = new CcExpressionContext(_parentctx, _parentState);
                                            PushNewRecursionContext(_localctx, _startState, RULE_ccExpression);
                                            State = 254;
                                            if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
                                            State = 258;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 255; Match(WS);
                                                    }
                                                }
                                                State = 260;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 261; Match(AND);
                                            State = 265;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 262; Match(WS);
                                                    }
                                                }
                                                State = 267;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 268; ccExpression(9);
                                        }
                                        break;

                                    case 9:
                                        {
                                            _localctx = new CcExpressionContext(_parentctx, _parentState);
                                            PushNewRecursionContext(_localctx, _startState, RULE_ccExpression);
                                            State = 269;
                                            if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
                                            State = 273;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 270; Match(WS);
                                                    }
                                                }
                                                State = 275;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 276; Match(OR);
                                            State = 280;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 277; Match(WS);
                                                    }
                                                }
                                                State = 282;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 283; ccExpression(8);
                                        }
                                        break;

                                    case 10:
                                        {
                                            _localctx = new CcExpressionContext(_parentctx, _parentState);
                                            PushNewRecursionContext(_localctx, _startState, RULE_ccExpression);
                                            State = 284;
                                            if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
                                            State = 288;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 285; Match(WS);
                                                    }
                                                }
                                                State = 290;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 291; Match(XOR);
                                            State = 295;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 292; Match(WS);
                                                    }
                                                }
                                                State = 297;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 298; ccExpression(7);
                                        }
                                        break;

                                    case 11:
                                        {
                                            _localctx = new CcExpressionContext(_parentctx, _parentState);
                                            PushNewRecursionContext(_localctx, _startState, RULE_ccExpression);
                                            State = 299;
                                            if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
                                            State = 303;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 300; Match(WS);
                                                    }
                                                }
                                                State = 305;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 306; Match(EQV);
                                            State = 310;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 307; Match(WS);
                                                    }
                                                }
                                                State = 312;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 313; ccExpression(6);
                                        }
                                        break;

                                    case 12:
                                        {
                                            _localctx = new CcExpressionContext(_parentctx, _parentState);
                                            PushNewRecursionContext(_localctx, _startState, RULE_ccExpression);
                                            State = 314;
                                            if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
                                            State = 318;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 315; Match(WS);
                                                    }
                                                }
                                                State = 320;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 321; Match(IMP);
                                            State = 325;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                            while (_la == WS)
                                            {
                                                {
                                                    {
                                                        State = 322; Match(WS);
                                                    }
                                                }
                                                State = 327;
                                                _errHandler.Sync(this);
                                                _la = _input.La(1);
                                            }
                                            State = 328; ccExpression(5);
                                        }
                                        break;
                                }
                            }
                        }
                        State = 333;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 42, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                UnrollRecursionContexts(_parentctx);
            }
            return _localctx;
        }

        public partial class CcIfBlockContext : ParserRuleContext
        {
            public CcIfContext ccIf()
            {
                return GetRuleContext<CcIfContext>(0);
            }
            public CcBlockContext ccBlock()
            {
                return GetRuleContext<CcBlockContext>(0);
            }
            public CcElseIfBlockContext ccElseIfBlock(int i)
            {
                return GetRuleContext<CcElseIfBlockContext>(i);
            }
            public CcEndIfContext ccEndIf()
            {
                return GetRuleContext<CcEndIfContext>(0);
            }
            public CcElseBlockContext ccElseBlock()
            {
                return GetRuleContext<CcElseBlockContext>(0);
            }
            public IReadOnlyList<CcElseIfBlockContext> ccElseIfBlock()
            {
                return GetRuleContexts<CcElseIfBlockContext>();
            }
            public CcIfBlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ccIfBlock; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterCcIfBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitCcIfBlock(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCcIfBlock(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CcIfBlockContext ccIfBlock()
        {
            CcIfBlockContext _localctx = new CcIfBlockContext(_ctx, State);
            EnterRule(_localctx, 16, RULE_ccIfBlock);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 334; ccIf();
                    State = 335; ccBlock();
                    State = 339;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 43, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 336; ccElseIfBlock();
                                }
                            }
                        }
                        State = 341;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 43, _ctx);
                    }
                    State = 343;
                    switch (Interpreter.AdaptivePredict(_input, 44, _ctx))
                    {
                        case 1:
                            {
                                State = 342; ccElseBlock();
                            }
                            break;
                    }
                    State = 345; ccEndIf();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CcIfContext : ParserRuleContext
        {
            public ITerminalNode HASHIF() { return GetToken(VBAConditionalCompilationParser.HASHIF, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAConditionalCompilationParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAConditionalCompilationParser.WS); }
            public ITerminalNode THEN() { return GetToken(VBAConditionalCompilationParser.THEN, 0); }
            public CcEolContext ccEol()
            {
                return GetRuleContext<CcEolContext>(0);
            }
            public CcExpressionContext ccExpression()
            {
                return GetRuleContext<CcExpressionContext>(0);
            }
            public CcIfContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ccIf; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterCcIf(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitCcIf(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCcIf(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CcIfContext ccIf()
        {
            CcIfContext _localctx = new CcIfContext(_ctx, State);
            EnterRule(_localctx, 18, RULE_ccIf);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 350;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == WS)
                    {
                        {
                            {
                                State = 347; Match(WS);
                            }
                        }
                        State = 352;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 353; Match(HASHIF);
                    State = 355;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 354; Match(WS);
                            }
                        }
                        State = 357;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == WS);
                    State = 359; ccExpression(0);
                    State = 361;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 360; Match(WS);
                            }
                        }
                        State = 363;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == WS);
                    State = 365; Match(THEN);
                    State = 366; ccEol();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CcElseIfBlockContext : ParserRuleContext
        {
            public CcBlockContext ccBlock()
            {
                return GetRuleContext<CcBlockContext>(0);
            }
            public CcElseIfContext ccElseIf()
            {
                return GetRuleContext<CcElseIfContext>(0);
            }
            public CcElseIfBlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ccElseIfBlock; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterCcElseIfBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitCcElseIfBlock(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCcElseIfBlock(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CcElseIfBlockContext ccElseIfBlock()
        {
            CcElseIfBlockContext _localctx = new CcElseIfBlockContext(_ctx, State);
            EnterRule(_localctx, 20, RULE_ccElseIfBlock);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 368; ccElseIf();
                    State = 369; ccBlock();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CcElseIfContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAConditionalCompilationParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAConditionalCompilationParser.WS); }
            public ITerminalNode THEN() { return GetToken(VBAConditionalCompilationParser.THEN, 0); }
            public CcEolContext ccEol()
            {
                return GetRuleContext<CcEolContext>(0);
            }
            public ITerminalNode HASHELSEIF() { return GetToken(VBAConditionalCompilationParser.HASHELSEIF, 0); }
            public CcExpressionContext ccExpression()
            {
                return GetRuleContext<CcExpressionContext>(0);
            }
            public CcElseIfContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ccElseIf; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterCcElseIf(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitCcElseIf(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCcElseIf(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CcElseIfContext ccElseIf()
        {
            CcElseIfContext _localctx = new CcElseIfContext(_ctx, State);
            EnterRule(_localctx, 22, RULE_ccElseIf);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 374;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == WS)
                    {
                        {
                            {
                                State = 371; Match(WS);
                            }
                        }
                        State = 376;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 377; Match(HASHELSEIF);
                    State = 379;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 378; Match(WS);
                            }
                        }
                        State = 381;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == WS);
                    State = 383; ccExpression(0);
                    State = 385;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 384; Match(WS);
                            }
                        }
                        State = 387;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == WS);
                    State = 389; Match(THEN);
                    State = 390; ccEol();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CcElseBlockContext : ParserRuleContext
        {
            public CcBlockContext ccBlock()
            {
                return GetRuleContext<CcBlockContext>(0);
            }
            public CcElseContext ccElse()
            {
                return GetRuleContext<CcElseContext>(0);
            }
            public CcElseBlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ccElseBlock; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterCcElseBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitCcElseBlock(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCcElseBlock(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CcElseBlockContext ccElseBlock()
        {
            CcElseBlockContext _localctx = new CcElseBlockContext(_ctx, State);
            EnterRule(_localctx, 24, RULE_ccElseBlock);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 392; ccElse();
                    State = 393; ccBlock();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CcElseContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAConditionalCompilationParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAConditionalCompilationParser.WS); }
            public ITerminalNode HASHELSE() { return GetToken(VBAConditionalCompilationParser.HASHELSE, 0); }
            public CcEolContext ccEol()
            {
                return GetRuleContext<CcEolContext>(0);
            }
            public CcElseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ccElse; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterCcElse(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitCcElse(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCcElse(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CcElseContext ccElse()
        {
            CcElseContext _localctx = new CcElseContext(_ctx, State);
            EnterRule(_localctx, 26, RULE_ccElse);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 398;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == WS)
                    {
                        {
                            {
                                State = 395; Match(WS);
                            }
                        }
                        State = 400;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 401; Match(HASHELSE);
                    State = 402; ccEol();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CcEndIfContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAConditionalCompilationParser.WS, i);
            }
            public ITerminalNode HASHENDIF() { return GetToken(VBAConditionalCompilationParser.HASHENDIF, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAConditionalCompilationParser.WS); }
            public CcEolContext ccEol()
            {
                return GetRuleContext<CcEolContext>(0);
            }
            public CcEndIfContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ccEndIf; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterCcEndIf(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitCcEndIf(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCcEndIf(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CcEndIfContext ccEndIf()
        {
            CcEndIfContext _localctx = new CcEndIfContext(_ctx, State);
            EnterRule(_localctx, 28, RULE_ccEndIf);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 407;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == WS)
                    {
                        {
                            {
                                State = 404; Match(WS);
                            }
                        }
                        State = 409;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 410; Match(HASHENDIF);
                    State = 411; ccEol();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CcEolContext : ParserRuleContext
        {
            public ITerminalNode SINGLEQUOTE() { return GetToken(VBAConditionalCompilationParser.SINGLEQUOTE, 0); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAConditionalCompilationParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAConditionalCompilationParser.NEWLINE, i);
            }
            public CcEolContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ccEol; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterCcEol(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitCcEol(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCcEol(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CcEolContext ccEol()
        {
            CcEolContext _localctx = new CcEolContext(_ctx, State);
            EnterRule(_localctx, 30, RULE_ccEol);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 420;
                    switch (Interpreter.AdaptivePredict(_input, 54, _ctx))
                    {
                        case 1:
                            {
                                State = 413; Match(SINGLEQUOTE);
                                State = 417;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 53, _ctx);
                                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                                {
                                    if (_alt == 1)
                                    {
                                        {
                                            {
                                                State = 414;
                                                _la = _input.La(1);
                                                if (_la <= 0 || (_la == NEWLINE))
                                                {
                                                    _errHandler.RecoverInline(this);
                                                }
                                                Consume();
                                            }
                                        }
                                    }
                                    State = 419;
                                    _errHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(_input, 53, _ctx);
                                }
                            }
                            break;
                    }
                    State = 423;
                    switch (Interpreter.AdaptivePredict(_input, 55, _ctx))
                    {
                        case 1:
                            {
                                State = 422; Match(NEWLINE);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IntrinsicFunctionContext : ParserRuleContext
        {
            public IntrinsicFunctionNameContext intrinsicFunctionName()
            {
                return GetRuleContext<IntrinsicFunctionNameContext>(0);
            }
            public ITerminalNode R_PAREN() { return GetToken(VBAConditionalCompilationParser.R_PAREN, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAConditionalCompilationParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAConditionalCompilationParser.WS); }
            public ITerminalNode L_PAREN() { return GetToken(VBAConditionalCompilationParser.L_PAREN, 0); }
            public CcExpressionContext ccExpression()
            {
                return GetRuleContext<CcExpressionContext>(0);
            }
            public IntrinsicFunctionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_intrinsicFunction; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterIntrinsicFunction(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitIntrinsicFunction(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIntrinsicFunction(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IntrinsicFunctionContext intrinsicFunction()
        {
            IntrinsicFunctionContext _localctx = new IntrinsicFunctionContext(_ctx, State);
            EnterRule(_localctx, 32, RULE_intrinsicFunction);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 425; intrinsicFunctionName();
                    State = 426; Match(L_PAREN);
                    State = 430;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == WS)
                    {
                        {
                            {
                                State = 427; Match(WS);
                            }
                        }
                        State = 432;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 433; ccExpression(0);
                    State = 437;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == WS)
                    {
                        {
                            {
                                State = 434; Match(WS);
                            }
                        }
                        State = 439;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 440; Match(R_PAREN);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IntrinsicFunctionNameContext : ParserRuleContext
        {
            public ITerminalNode CSTR() { return GetToken(VBAConditionalCompilationParser.CSTR, 0); }
            public ITerminalNode CLNGLNG() { return GetToken(VBAConditionalCompilationParser.CLNGLNG, 0); }
            public ITerminalNode CDATE() { return GetToken(VBAConditionalCompilationParser.CDATE, 0); }
            public ITerminalNode CINT() { return GetToken(VBAConditionalCompilationParser.CINT, 0); }
            public ITerminalNode ABS() { return GetToken(VBAConditionalCompilationParser.ABS, 0); }
            public ITerminalNode LEN() { return GetToken(VBAConditionalCompilationParser.LEN, 0); }
            public ITerminalNode CSNG() { return GetToken(VBAConditionalCompilationParser.CSNG, 0); }
            public ITerminalNode INT() { return GetToken(VBAConditionalCompilationParser.INT, 0); }
            public ITerminalNode CCUR() { return GetToken(VBAConditionalCompilationParser.CCUR, 0); }
            public ITerminalNode LENB() { return GetToken(VBAConditionalCompilationParser.LENB, 0); }
            public ITerminalNode CBOOL() { return GetToken(VBAConditionalCompilationParser.CBOOL, 0); }
            public ITerminalNode CLNGPTR() { return GetToken(VBAConditionalCompilationParser.CLNGPTR, 0); }
            public ITerminalNode SGN() { return GetToken(VBAConditionalCompilationParser.SGN, 0); }
            public ITerminalNode CBYTE() { return GetToken(VBAConditionalCompilationParser.CBYTE, 0); }
            public ITerminalNode FIX() { return GetToken(VBAConditionalCompilationParser.FIX, 0); }
            public ITerminalNode CDBL() { return GetToken(VBAConditionalCompilationParser.CDBL, 0); }
            public ITerminalNode CVAR() { return GetToken(VBAConditionalCompilationParser.CVAR, 0); }
            public ITerminalNode CLNG() { return GetToken(VBAConditionalCompilationParser.CLNG, 0); }
            public IntrinsicFunctionNameContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_intrinsicFunctionName; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterIntrinsicFunctionName(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitIntrinsicFunctionName(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIntrinsicFunctionName(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IntrinsicFunctionNameContext intrinsicFunctionName()
        {
            IntrinsicFunctionNameContext _localctx = new IntrinsicFunctionNameContext(_ctx, State);
            EnterRule(_localctx, 34, RULE_intrinsicFunctionName);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 442;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FIX) | (1L << ABS) | (1L << SGN) | (1L << LEN) | (1L << LENB) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CVAR))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class NameContext : ParserRuleContext
        {
            public TypeSuffixContext typeSuffix()
            {
                return GetRuleContext<TypeSuffixContext>(0);
            }
            public ITerminalNode IDENTIFIER() { return GetToken(VBAConditionalCompilationParser.IDENTIFIER, 0); }
            public NameContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_name; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterName(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitName(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitName(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public NameContext name()
        {
            NameContext _localctx = new NameContext(_ctx, State);
            EnterRule(_localctx, 36, RULE_name);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 444; Match(IDENTIFIER);
                    State = 446;
                    switch (Interpreter.AdaptivePredict(_input, 58, _ctx))
                    {
                        case 1:
                            {
                                State = 445; typeSuffix();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeSuffixContext : ParserRuleContext
        {
            public ITerminalNode AT() { return GetToken(VBAConditionalCompilationParser.AT, 0); }
            public ITerminalNode EXCLAMATIONMARK() { return GetToken(VBAConditionalCompilationParser.EXCLAMATIONMARK, 0); }
            public ITerminalNode DOLLAR() { return GetToken(VBAConditionalCompilationParser.DOLLAR, 0); }
            public ITerminalNode AMPERSAND() { return GetToken(VBAConditionalCompilationParser.AMPERSAND, 0); }
            public ITerminalNode PERCENT() { return GetToken(VBAConditionalCompilationParser.PERCENT, 0); }
            public ITerminalNode HASH() { return GetToken(VBAConditionalCompilationParser.HASH, 0); }
            public TypeSuffixContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_typeSuffix; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterTypeSuffix(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitTypeSuffix(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeSuffix(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeSuffixContext typeSuffix()
        {
            TypeSuffixContext _localctx = new TypeSuffixContext(_ctx, State);
            EnterRule(_localctx, 38, RULE_typeSuffix);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 448;
                    _la = _input.La(1);
                    if (!(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (HASH - 70)) | (1L << (AMPERSAND - 70)) | (1L << (PERCENT - 70)) | (1L << (EXCLAMATIONMARK - 70)) | (1L << (AT - 70)) | (1L << (DOLLAR - 70)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LiteralContext : ParserRuleContext
        {
            public ITerminalNode INTEGERLITERAL() { return GetToken(VBAConditionalCompilationParser.INTEGERLITERAL, 0); }
            public ITerminalNode NULL() { return GetToken(VBAConditionalCompilationParser.NULL, 0); }
            public ITerminalNode STRINGLITERAL() { return GetToken(VBAConditionalCompilationParser.STRINGLITERAL, 0); }
            public ITerminalNode FALSE() { return GetToken(VBAConditionalCompilationParser.FALSE, 0); }
            public ITerminalNode TRUE() { return GetToken(VBAConditionalCompilationParser.TRUE, 0); }
            public ITerminalNode NOTHING() { return GetToken(VBAConditionalCompilationParser.NOTHING, 0); }
            public ITerminalNode DATELITERAL() { return GetToken(VBAConditionalCompilationParser.DATELITERAL, 0); }
            public ITerminalNode HEXLITERAL() { return GetToken(VBAConditionalCompilationParser.HEXLITERAL, 0); }
            public ITerminalNode DOUBLELITERAL() { return GetToken(VBAConditionalCompilationParser.DOUBLELITERAL, 0); }
            public ITerminalNode SHORTLITERAL() { return GetToken(VBAConditionalCompilationParser.SHORTLITERAL, 0); }
            public ITerminalNode EMPTY() { return GetToken(VBAConditionalCompilationParser.EMPTY, 0); }
            public ITerminalNode OCTLITERAL() { return GetToken(VBAConditionalCompilationParser.OCTLITERAL, 0); }
            public LiteralContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_literal; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.EnterLiteral(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAConditionalCompilationListener typedListener = listener as IVBAConditionalCompilationListener;
                if (typedListener != null) typedListener.ExitLiteral(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAConditionalCompilationVisitor<TResult> typedVisitor = visitor as IVBAConditionalCompilationVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LiteralContext literal()
        {
            LiteralContext _localctx = new LiteralContext(_ctx, State);
            EnterRule(_localctx, 40, RULE_literal);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 450;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRINGLITERAL) | (1L << OCTLITERAL) | (1L << HEXLITERAL) | (1L << SHORTLITERAL) | (1L << INTEGERLITERAL) | (1L << DOUBLELITERAL) | (1L << DATELITERAL) | (1L << TRUE) | (1L << FALSE) | (1L << NOTHING) | (1L << NULL) | (1L << EMPTY))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
        {
            switch (ruleIndex)
            {
                case 7: return ccExpression_sempred((CcExpressionContext)_localctx, predIndex);
            }
            return true;
        }
        private bool ccExpression_sempred(CcExpressionContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 0: return Precpred(_ctx, 17);

                case 1: return Precpred(_ctx, 15);

                case 2: return Precpred(_ctx, 14);

                case 3: return Precpred(_ctx, 13);

                case 4: return Precpred(_ctx, 12);

                case 5: return Precpred(_ctx, 11);

                case 6: return Precpred(_ctx, 10);

                case 7: return Precpred(_ctx, 8);

                case 8: return Precpred(_ctx, 7);

                case 9: return Precpred(_ctx, 6);

                case 10: return Precpred(_ctx, 5);

                case 11: return Precpred(_ctx, 4);
            }
            return true;
        }

        public static readonly string _serializedATN =
            "\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x65\x1C7\x4\x2" +
            "\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4" +
            "\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10" +
            "\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15" +
            "\x4\x16\t\x16\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\a\x3\x33\n\x3\f\x3\xE" +
            "\x3\x36\v\x3\x3\x4\a\x4\x39\n\x4\f\x4\xE\x4<\v\x4\x3\x4\x3\x4\x6\x4@\n" +
            "\x4\r\x4\xE\x4\x41\x3\x4\x3\x4\x6\x4\x46\n\x4\r\x4\xE\x4G\x3\x4\x3\x4" +
            "\x6\x4L\n\x4\r\x4\xE\x4M\x3\x4\x3\x4\x3\x4\x3\x5\x6\x5T\n\x5\r\x5\xE\x5" +
            "U\x3\x6\x3\x6\x6\x6Z\n\x6\r\x6\xE\x6[\x3\x6\x5\x6_\n\x6\x3\a\a\a\x62\n" +
            "\a\f\a\xE\a\x65\v\a\x3\a\x3\a\a\ai\n\a\f\a\xE\al\v\a\x3\a\x3\a\x3\b\x3" +
            "\b\x3\t\x3\t\x3\t\a\tu\n\t\f\t\xE\tx\v\t\x3\t\x3\t\x3\t\a\t}\n\t\f\t\xE" +
            "\t\x80\v\t\x3\t\x3\t\x3\t\a\t\x85\n\t\f\t\xE\t\x88\v\t\x3\t\x3\t\a\t\x8C" +
            "\n\t\f\t\xE\t\x8F\v\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x96\n\t\x3\t\x3\t" +
            "\a\t\x9A\n\t\f\t\xE\t\x9D\v\t\x3\t\x3\t\a\t\xA1\n\t\f\t\xE\t\xA4\v\t\x3" +
            "\t\x3\t\x3\t\a\t\xA9\n\t\f\t\xE\t\xAC\v\t\x3\t\x3\t\a\t\xB0\n\t\f\t\xE" +
            "\t\xB3\v\t\x3\t\x3\t\x3\t\a\t\xB8\n\t\f\t\xE\t\xBB\v\t\x3\t\x3\t\a\t\xBF" +
            "\n\t\f\t\xE\t\xC2\v\t\x3\t\x3\t\x3\t\a\t\xC7\n\t\f\t\xE\t\xCA\v\t\x3\t" +
            "\x3\t\a\t\xCE\n\t\f\t\xE\t\xD1\v\t\x3\t\x3\t\x3\t\a\t\xD6\n\t\f\t\xE\t" +
            "\xD9\v\t\x3\t\x3\t\a\t\xDD\n\t\f\t\xE\t\xE0\v\t\x3\t\x3\t\x3\t\a\t\xE5" +
            "\n\t\f\t\xE\t\xE8\v\t\x3\t\x3\t\a\t\xEC\n\t\f\t\xE\t\xEF\v\t\x3\t\x3\t" +
            "\x3\t\a\t\xF4\n\t\f\t\xE\t\xF7\v\t\x3\t\x3\t\a\t\xFB\n\t\f\t\xE\t\xFE" +
            "\v\t\x3\t\x3\t\x3\t\a\t\x103\n\t\f\t\xE\t\x106\v\t\x3\t\x3\t\a\t\x10A" +
            "\n\t\f\t\xE\t\x10D\v\t\x3\t\x3\t\x3\t\a\t\x112\n\t\f\t\xE\t\x115\v\t\x3" +
            "\t\x3\t\a\t\x119\n\t\f\t\xE\t\x11C\v\t\x3\t\x3\t\x3\t\a\t\x121\n\t\f\t" +
            "\xE\t\x124\v\t\x3\t\x3\t\a\t\x128\n\t\f\t\xE\t\x12B\v\t\x3\t\x3\t\x3\t" +
            "\a\t\x130\n\t\f\t\xE\t\x133\v\t\x3\t\x3\t\a\t\x137\n\t\f\t\xE\t\x13A\v" +
            "\t\x3\t\x3\t\x3\t\a\t\x13F\n\t\f\t\xE\t\x142\v\t\x3\t\x3\t\a\t\x146\n" +
            "\t\f\t\xE\t\x149\v\t\x3\t\a\t\x14C\n\t\f\t\xE\t\x14F\v\t\x3\n\x3\n\x3" +
            "\n\a\n\x154\n\n\f\n\xE\n\x157\v\n\x3\n\x5\n\x15A\n\n\x3\n\x3\n\x3\v\a" +
            "\v\x15F\n\v\f\v\xE\v\x162\v\v\x3\v\x3\v\x6\v\x166\n\v\r\v\xE\v\x167\x3" +
            "\v\x3\v\x6\v\x16C\n\v\r\v\xE\v\x16D\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r" +
            "\a\r\x177\n\r\f\r\xE\r\x17A\v\r\x3\r\x3\r\x6\r\x17E\n\r\r\r\xE\r\x17F" +
            "\x3\r\x3\r\x6\r\x184\n\r\r\r\xE\r\x185\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE" +
            "\x3\xF\a\xF\x18F\n\xF\f\xF\xE\xF\x192\v\xF\x3\xF\x3\xF\x3\xF\x3\x10\a" +
            "\x10\x198\n\x10\f\x10\xE\x10\x19B\v\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3" +
            "\x11\a\x11\x1A2\n\x11\f\x11\xE\x11\x1A5\v\x11\x5\x11\x1A7\n\x11\x3\x11" +
            "\x5\x11\x1AA\n\x11\x3\x12\x3\x12\x3\x12\a\x12\x1AF\n\x12\f\x12\xE\x12" +
            "\x1B2\v\x12\x3\x12\x3\x12\a\x12\x1B6\n\x12\f\x12\xE\x12\x1B9\v\x12\x3" +
            "\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x5\x14\x1C1\n\x14\x3\x15\x3\x15" +
            "\x3\x16\x3\x16\x3\x16\x2\x2\x3\x10\x17\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2" +
            "\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2" +
            "$\x2&\x2(\x2*\x2\x2\n\x4\x2\'(*,\x4\x2TT[[\x4\x2ZZ]]\x6\x2?@SSVY\\\\\x3" +
            "\x2\x62\x62\x3\x2->\x3\x2HM\x4\x2\x3\t\"&\x1FB\x2,\x3\x2\x2\x2\x4\x34" +
            "\x3\x2\x2\x2\x6:\x3\x2\x2\x2\bS\x3\x2\x2\x2\nY\x3\x2\x2\x2\f\x63\x3\x2" +
            "\x2\x2\xEo\x3\x2\x2\x2\x10\x95\x3\x2\x2\x2\x12\x150\x3\x2\x2\x2\x14\x160" +
            "\x3\x2\x2\x2\x16\x172\x3\x2\x2\x2\x18\x178\x3\x2\x2\x2\x1A\x18A\x3\x2" +
            "\x2\x2\x1C\x190\x3\x2\x2\x2\x1E\x199\x3\x2\x2\x2 \x1A6\x3\x2\x2\x2\"\x1AB" +
            "\x3\x2\x2\x2$\x1BC\x3\x2\x2\x2&\x1BE\x3\x2\x2\x2(\x1C2\x3\x2\x2\x2*\x1C4" +
            "\x3\x2\x2\x2,-\x5\x4\x3\x2-.\a\x2\x2\x3.\x3\x3\x2\x2\x2/\x33\x5\x6\x4" +
            "\x2\x30\x33\x5\x12\n\x2\x31\x33\x5\b\x5\x2\x32/\x3\x2\x2\x2\x32\x30\x3" +
            "\x2\x2\x2\x32\x31\x3\x2\x2\x2\x33\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2" +
            "\x34\x35\x3\x2\x2\x2\x35\x5\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x37\x39\a" +
            "\x63\x2\x2\x38\x37\x3\x2\x2\x2\x39<\x3\x2\x2\x2:\x38\x3\x2\x2\x2:;\x3" +
            "\x2\x2\x2;=\x3\x2\x2\x2<:\x3\x2\x2\x2=?\a\'\x2\x2>@\a\x63\x2\x2?>\x3\x2" +
            "\x2\x2@\x41\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x43\x3" +
            "\x2\x2\x2\x43\x45\x5\xE\b\x2\x44\x46\a\x63\x2\x2\x45\x44\x3\x2\x2\x2\x46" +
            "G\x3\x2\x2\x2G\x45\x3\x2\x2\x2GH\x3\x2\x2\x2HI\x3\x2\x2\x2IK\aS\x2\x2" +
            "JL\a\x63\x2\x2KJ\x3\x2\x2\x2LM\x3\x2\x2\x2MK\x3\x2\x2\x2MN\x3\x2\x2\x2" +
            "NO\x3\x2\x2\x2OP\x5\x10\t\x2PQ\x5 \x11\x2Q\a\x3\x2\x2\x2RT\x5\n\x6\x2" +
            "SR\x3\x2\x2\x2TU\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2V\t\x3\x2\x2\x2" +
            "WZ\x5\f\a\x2XZ\n\x2\x2\x2YW\x3\x2\x2\x2YX\x3\x2\x2\x2Z[\x3\x2\x2\x2[Y" +
            "\x3\x2\x2\x2[\\\x3\x2\x2\x2\\^\x3\x2\x2\x2]_\a\x62\x2\x2^]\x3\x2\x2\x2" +
            "^_\x3\x2\x2\x2_\v\x3\x2\x2\x2`\x62\a\x63\x2\x2\x61`\x3\x2\x2\x2\x62\x65" +
            "\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x66\x3\x2\x2" +
            "\x2\x65\x63\x3\x2\x2\x2\x66j\aR\x2\x2gi\a\x63\x2\x2hg\x3\x2\x2\x2il\x3" +
            "\x2\x2\x2jh\x3\x2\x2\x2jk\x3\x2\x2\x2km\x3\x2\x2\x2lj\x3\x2\x2\x2mn\a" +
            "\x62\x2\x2n\r\x3\x2\x2\x2op\x5&\x14\x2p\xF\x3\x2\x2\x2qr\b\t\x1\x2rv\a" +
            "Z\x2\x2su\a\x63\x2\x2ts\x3\x2\x2\x2ux\x3\x2\x2\x2vt\x3\x2\x2\x2vw\x3\x2" +
            "\x2\x2wy\x3\x2\x2\x2xv\x3\x2\x2\x2y\x96\x5\x10\t\x12z~\a!\x2\x2{}\a\x63" +
            "\x2\x2|{\x3\x2\x2\x2}\x80\x3\x2\x2\x2~|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F" +
            "\x81\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x81\x96\x5\x10\t\v\x82\x86\aN\x2\x2" +
            "\x83\x85\a\x63\x2\x2\x84\x83\x3\x2\x2\x2\x85\x88\x3\x2\x2\x2\x86\x84\x3" +
            "\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x89\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2" +
            "\x89\x8D\x5\x10\t\x2\x8A\x8C\a\x63\x2\x2\x8B\x8A\x3\x2\x2\x2\x8C\x8F\x3" +
            "\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E\x90\x3\x2\x2\x2" +
            "\x8F\x8D\x3\x2\x2\x2\x90\x91\aO\x2\x2\x91\x96\x3\x2\x2\x2\x92\x96\x5\"" +
            "\x12\x2\x93\x96\x5*\x16\x2\x94\x96\x5&\x14\x2\x95q\x3\x2\x2\x2\x95z\x3" +
            "\x2\x2\x2\x95\x82\x3\x2\x2\x2\x95\x92\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2" +
            "\x95\x94\x3\x2\x2\x2\x96\x14D\x3\x2\x2\x2\x97\x9B\f\x13\x2\x2\x98\x9A" +
            "\a\x63\x2\x2\x99\x98\x3\x2\x2\x2\x9A\x9D\x3\x2\x2\x2\x9B\x99\x3\x2\x2" +
            "\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9E\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9E\xA2" +
            "\a^\x2\x2\x9F\xA1\a\x63\x2\x2\xA0\x9F\x3\x2\x2\x2\xA1\xA4\x3\x2\x2\x2" +
            "\xA2\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA5\x3\x2\x2\x2\xA4\xA2\x3" +
            "\x2\x2\x2\xA5\x14C\x5\x10\t\x14\xA6\xAA\f\x11\x2\x2\xA7\xA9\a\x63\x2\x2" +
            "\xA8\xA7\x3\x2\x2\x2\xA9\xAC\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB\x3" +
            "\x2\x2\x2\xAB\xAD\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xB1\t\x3\x2\x2\xAE" +
            "\xB0\a\x63\x2\x2\xAF\xAE\x3\x2\x2\x2\xB0\xB3\x3\x2\x2\x2\xB1\xAF\x3\x2" +
            "\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB4\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB4" +
            "\x14C\x5\x10\t\x12\xB5\xB9\f\x10\x2\x2\xB6\xB8\a\x63\x2\x2\xB7\xB6\x3" +
            "\x2\x2\x2\xB8\xBB\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2" +
            "\xBA\xBC\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBC\xC0\aU\x2\x2\xBD\xBF\a\x63" +
            "\x2\x2\xBE\xBD\x3\x2\x2\x2\xBF\xC2\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0" +
            "\xC1\x3\x2\x2\x2\xC1\xC3\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC3\x14C\x5\x10" +
            "\t\x11\xC4\xC8\f\xF\x2\x2\xC5\xC7\a\x63\x2\x2\xC6\xC5\x3\x2\x2\x2\xC7" +
            "\xCA\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCB\x3\x2" +
            "\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCF\a\x41\x2\x2\xCC\xCE\a\x63\x2\x2\xCD" +
            "\xCC\x3\x2\x2\x2\xCE\xD1\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2\xCF\xD0\x3\x2" +
            "\x2\x2\xD0\xD2\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\xD2\x14C\x5\x10\t\x10\xD3" +
            "\xD7\f\xE\x2\x2\xD4\xD6\a\x63\x2\x2\xD5\xD4\x3\x2\x2\x2\xD6\xD9\x3\x2" +
            "\x2\x2\xD7\xD5\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xDA\x3\x2\x2\x2\xD9" +
            "\xD7\x3\x2\x2\x2\xDA\xDE\t\x4\x2\x2\xDB\xDD\a\x63\x2\x2\xDC\xDB\x3\x2" +
            "\x2\x2\xDD\xE0\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF" +
            "\xE1\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE1\x14C\x5\x10\t\xF\xE2\xE6\f\r" +
            "\x2\x2\xE3\xE5\a\x63\x2\x2\xE4\xE3\x3\x2\x2\x2\xE5\xE8\x3\x2\x2\x2\xE6" +
            "\xE4\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\xE9\x3\x2\x2\x2\xE8\xE6\x3\x2" +
            "\x2\x2\xE9\xED\aI\x2\x2\xEA\xEC\a\x63\x2\x2\xEB\xEA\x3\x2\x2\x2\xEC\xEF" +
            "\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xF0\x3\x2\x2" +
            "\x2\xEF\xED\x3\x2\x2\x2\xF0\x14C\x5\x10\t\xE\xF1\xF5\f\f\x2\x2\xF2\xF4" +
            "\a\x63\x2\x2\xF3\xF2\x3\x2\x2\x2\xF4\xF7\x3\x2\x2\x2\xF5\xF3\x3\x2\x2" +
            "\x2\xF5\xF6\x3\x2\x2\x2\xF6\xF8\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF8\xFC" +
            "\t\x5\x2\x2\xF9\xFB\a\x63\x2\x2\xFA\xF9\x3\x2\x2\x2\xFB\xFE\x3\x2\x2\x2" +
            "\xFC\xFA\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFF\x3\x2\x2\x2\xFE\xFC\x3" +
            "\x2\x2\x2\xFF\x14C\x5\x10\t\r\x100\x104\f\n\x2\x2\x101\x103\a\x63\x2\x2" +
            "\x102\x101\x3\x2\x2\x2\x103\x106\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2\x104" +
            "\x105\x3\x2\x2\x2\x105\x107\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x107\x10B" +
            "\a\x42\x2\x2\x108\x10A\a\x63\x2\x2\x109\x108\x3\x2\x2\x2\x10A\x10D\x3" +
            "\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10E\x3\x2" +
            "\x2\x2\x10D\x10B\x3\x2\x2\x2\x10E\x14C\x5\x10\t\v\x10F\x113\f\t\x2\x2" +
            "\x110\x112\a\x63\x2\x2\x111\x110\x3\x2\x2\x2\x112\x115\x3\x2\x2\x2\x113" +
            "\x111\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x114\x116\x3\x2\x2\x2\x115\x113" +
            "\x3\x2\x2\x2\x116\x11A\a\x43\x2\x2\x117\x119\a\x63\x2\x2\x118\x117\x3" +
            "\x2\x2\x2\x119\x11C\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2\x11A\x11B\x3\x2" +
            "\x2\x2\x11B\x11D\x3\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11D\x14C\x5\x10\t" +
            "\n\x11E\x122\f\b\x2\x2\x11F\x121\a\x63\x2\x2\x120\x11F\x3\x2\x2\x2\x121" +
            "\x124\x3\x2\x2\x2\x122\x120\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\x125" +
            "\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x125\x129\a\x44\x2\x2\x126\x128\a\x63" +
            "\x2\x2\x127\x126\x3\x2\x2\x2\x128\x12B\x3\x2\x2\x2\x129\x127\x3\x2\x2" +
            "\x2\x129\x12A\x3\x2\x2\x2\x12A\x12C\x3\x2\x2\x2\x12B\x129\x3\x2\x2\x2" +
            "\x12C\x14C\x5\x10\t\t\x12D\x131\f\a\x2\x2\x12E\x130\a\x63\x2\x2\x12F\x12E" +
            "\x3\x2\x2\x2\x130\x133\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2\x131\x132\x3" +
            "\x2\x2\x2\x132\x134\x3\x2\x2\x2\x133\x131\x3\x2\x2\x2\x134\x138\a\x45" +
            "\x2\x2\x135\x137\a\x63\x2\x2\x136\x135\x3\x2\x2\x2\x137\x13A\x3\x2\x2" +
            "\x2\x138\x136\x3\x2\x2\x2\x138\x139\x3\x2\x2\x2\x139\x13B\x3\x2\x2\x2" +
            "\x13A\x138\x3\x2\x2\x2\x13B\x14C\x5\x10\t\b\x13C\x140\f\x6\x2\x2\x13D" +
            "\x13F\a\x63\x2\x2\x13E\x13D\x3\x2\x2\x2\x13F\x142\x3\x2\x2\x2\x140\x13E" +
            "\x3\x2\x2\x2\x140\x141\x3\x2\x2\x2\x141\x143\x3\x2\x2\x2\x142\x140\x3" +
            "\x2\x2\x2\x143\x147\a\x46\x2\x2\x144\x146\a\x63\x2\x2\x145\x144\x3\x2" +
            "\x2\x2\x146\x149\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x147\x148\x3\x2\x2" +
            "\x2\x148\x14A\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x14A\x14C\x5\x10\t\a\x14B" +
            "\x97\x3\x2\x2\x2\x14B\xA6\x3\x2\x2\x2\x14B\xB5\x3\x2\x2\x2\x14B\xC4\x3" +
            "\x2\x2\x2\x14B\xD3\x3\x2\x2\x2\x14B\xE2\x3\x2\x2\x2\x14B\xF1\x3\x2\x2" +
            "\x2\x14B\x100\x3\x2\x2\x2\x14B\x10F\x3\x2\x2\x2\x14B\x11E\x3\x2\x2\x2" +
            "\x14B\x12D\x3\x2\x2\x2\x14B\x13C\x3\x2\x2\x2\x14C\x14F\x3\x2\x2\x2\x14D" +
            "\x14B\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E\x11\x3\x2\x2\x2\x14F\x14D" +
            "\x3\x2\x2\x2\x150\x151\x5\x14\v\x2\x151\x155\x5\x4\x3\x2\x152\x154\x5" +
            "\x16\f\x2\x153\x152\x3\x2\x2\x2\x154\x157\x3\x2\x2\x2\x155\x153\x3\x2" +
            "\x2\x2\x155\x156\x3\x2\x2\x2\x156\x159\x3\x2\x2\x2\x157\x155\x3\x2\x2" +
            "\x2\x158\x15A\x5\x1A\xE\x2\x159\x158\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2" +
            "\x15A\x15B\x3\x2\x2\x2\x15B\x15C\x5\x1E\x10\x2\x15C\x13\x3\x2\x2\x2\x15D" +
            "\x15F\a\x63\x2\x2\x15E\x15D\x3\x2\x2\x2\x15F\x162\x3\x2\x2\x2\x160\x15E" +
            "\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161\x163\x3\x2\x2\x2\x162\x160\x3" +
            "\x2\x2\x2\x163\x165\a(\x2\x2\x164\x166\a\x63\x2\x2\x165\x164\x3\x2\x2" +
            "\x2\x166\x167\x3\x2\x2\x2\x167\x165\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2" +
            "\x168\x169\x3\x2\x2\x2\x169\x16B\x5\x10\t\x2\x16A\x16C\a\x63\x2\x2\x16B" +
            "\x16A\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x16B\x3\x2\x2\x2\x16D\x16E" +
            "\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F\x170\a)\x2\x2\x170\x171\x5 \x11" +
            "\x2\x171\x15\x3\x2\x2\x2\x172\x173\x5\x18\r\x2\x173\x174\x5\x4\x3\x2\x174" +
            "\x17\x3\x2\x2\x2\x175\x177\a\x63\x2\x2\x176\x175\x3\x2\x2\x2\x177\x17A" +
            "\x3\x2\x2\x2\x178\x176\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x17B\x3" +
            "\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17B\x17D\a*\x2\x2\x17C\x17E\a\x63\x2" +
            "\x2\x17D\x17C\x3\x2\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F\x17D\x3\x2\x2\x2" +
            "\x17F\x180\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\x183\x5\x10\t\x2\x182" +
            "\x184\a\x63\x2\x2\x183\x182\x3\x2\x2\x2\x184\x185\x3\x2\x2\x2\x185\x183" +
            "\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\x188\a)" +
            "\x2\x2\x188\x189\x5 \x11\x2\x189\x19\x3\x2\x2\x2\x18A\x18B\x5\x1C\xF\x2" +
            "\x18B\x18C\x5\x4\x3\x2\x18C\x1B\x3\x2\x2\x2\x18D\x18F\a\x63\x2\x2\x18E" +
            "\x18D\x3\x2\x2\x2\x18F\x192\x3\x2\x2\x2\x190\x18E\x3\x2\x2\x2\x190\x191" +
            "\x3\x2\x2\x2\x191\x193\x3\x2\x2\x2\x192\x190\x3\x2\x2\x2\x193\x194\a+" +
            "\x2\x2\x194\x195\x5 \x11\x2\x195\x1D\x3\x2\x2\x2\x196\x198\a\x63\x2\x2" +
            "\x197\x196\x3\x2\x2\x2\x198\x19B\x3\x2\x2\x2\x199\x197\x3\x2\x2\x2\x199" +
            "\x19A\x3\x2\x2\x2\x19A\x19C\x3\x2\x2\x2\x19B\x199\x3\x2\x2\x2\x19C\x19D" +
            "\a,\x2\x2\x19D\x19E\x5 \x11\x2\x19E\x1F\x3\x2\x2\x2\x19F\x1A3\a_\x2\x2" +
            "\x1A0\x1A2\n\x6\x2\x2\x1A1\x1A0\x3\x2\x2\x2\x1A2\x1A5\x3\x2\x2\x2\x1A3" +
            "\x1A1\x3\x2\x2\x2\x1A3\x1A4\x3\x2\x2\x2\x1A4\x1A7\x3\x2\x2\x2\x1A5\x1A3" +
            "\x3\x2\x2\x2\x1A6\x19F\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7\x1A9\x3" +
            "\x2\x2\x2\x1A8\x1AA\a\x62\x2\x2\x1A9\x1A8\x3\x2\x2\x2\x1A9\x1AA\x3\x2" +
            "\x2\x2\x1AA!\x3\x2\x2\x2\x1AB\x1AC\x5$\x13\x2\x1AC\x1B0\aN\x2\x2\x1AD" +
            "\x1AF\a\x63\x2\x2\x1AE\x1AD\x3\x2\x2\x2\x1AF\x1B2\x3\x2\x2\x2\x1B0\x1AE" +
            "\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B3\x3\x2\x2\x2\x1B2\x1B0\x3" +
            "\x2\x2\x2\x1B3\x1B7\x5\x10\t\x2\x1B4\x1B6\a\x63\x2\x2\x1B5\x1B4\x3\x2" +
            "\x2\x2\x1B6\x1B9\x3\x2\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2" +
            "\x2\x1B8\x1BA\x3\x2\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1BA\x1BB\aO\x2\x2\x1BB" +
            "#\x3\x2\x2\x2\x1BC\x1BD\t\a\x2\x2\x1BD%\x3\x2\x2\x2\x1BE\x1C0\a\x64\x2" +
            "\x2\x1BF\x1C1\x5(\x15\x2\x1C0\x1BF\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1" +
            "\'\x3\x2\x2\x2\x1C2\x1C3\t\b\x2\x2\x1C3)\x3\x2\x2\x2\x1C4\x1C5\t\t\x2" +
            "\x2\x1C5+\x3\x2\x2\x2=\x32\x34:\x41GMUY[^\x63jv~\x86\x8D\x95\x9B\xA2\xAA" +
            "\xB1\xB9\xC0\xC8\xCF\xD7\xDE\xE6\xED\xF5\xFC\x104\x10B\x113\x11A\x122" +
            "\x129\x131\x138\x140\x147\x14B\x14D\x155\x159\x160\x167\x16D\x178\x17F" +
            "\x185\x190\x199\x1A3\x1A6\x1A9\x1B0\x1B7\x1C0";
        public static readonly ATN _ATN =
            new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
    }
} // namespace Rubberduck.Parsing.Preprocessing
