//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\TestProj\TestProj\VBALike.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Like {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBALikeParser : Parser {
	public const int
		QUESTIONMARK=1, HASH=2, STAR=3, L_SQUARE_BRACKET=4, R_SQUARE_BRACKET=5, 
		DASH=6, EXCLAMATION=7, NORMALCHAR=8;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'?'", "'#'", "'*'", "'['", "']'", "'-'", "'!'", "NORMALCHAR"
	};
	public const int
		RULE_compilationUnit = 0, RULE_likePatternString = 1, RULE_likePatternElement = 2, 
		RULE_likePatternCharlist = 3, RULE_likePatternCharlistElement = 4, RULE_likePatternCharlistRange = 5;
	public static readonly string[] ruleNames = {
		"compilationUnit", "likePatternString", "likePatternElement", "likePatternCharlist", 
		"likePatternCharlistElement", "likePatternCharlistRange"
	};

	public override string GrammarFileName { get { return "VBALike.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBALikeParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBALikeParser.Eof, 0); }
		public LikePatternStringContext likePatternString() {
			return GetRuleContext<LikePatternStringContext>(0);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBALikeListener typedListener = listener as IVBALikeListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBALikeListener typedListener = listener as IVBALikeListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBALikeVisitor<TResult> typedVisitor = visitor as IVBALikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; likePatternString();
			State = 13; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikePatternStringContext : ParserRuleContext {
		public IReadOnlyList<LikePatternElementContext> likePatternElement() {
			return GetRuleContexts<LikePatternElementContext>();
		}
		public LikePatternElementContext likePatternElement(int i) {
			return GetRuleContext<LikePatternElementContext>(i);
		}
		public LikePatternStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likePatternString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBALikeListener typedListener = listener as IVBALikeListener;
			if (typedListener != null) typedListener.EnterLikePatternString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBALikeListener typedListener = listener as IVBALikeListener;
			if (typedListener != null) typedListener.ExitLikePatternString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBALikeVisitor<TResult> typedVisitor = visitor as IVBALikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikePatternString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikePatternStringContext likePatternString() {
		LikePatternStringContext _localctx = new LikePatternStringContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_likePatternString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTIONMARK) | (1L << HASH) | (1L << STAR) | (1L << L_SQUARE_BRACKET) | (1L << NORMALCHAR))) != 0)) {
				{
				{
				State = 15; likePatternElement();
				}
				}
				State = 20;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikePatternElementContext : ParserRuleContext {
		public ITerminalNode QUESTIONMARK() { return GetToken(VBALikeParser.QUESTIONMARK, 0); }
		public ITerminalNode NORMALCHAR() { return GetToken(VBALikeParser.NORMALCHAR, 0); }
		public ITerminalNode STAR() { return GetToken(VBALikeParser.STAR, 0); }
		public LikePatternCharlistContext likePatternCharlist() {
			return GetRuleContext<LikePatternCharlistContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBALikeParser.HASH, 0); }
		public LikePatternElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likePatternElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBALikeListener typedListener = listener as IVBALikeListener;
			if (typedListener != null) typedListener.EnterLikePatternElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBALikeListener typedListener = listener as IVBALikeListener;
			if (typedListener != null) typedListener.ExitLikePatternElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBALikeVisitor<TResult> typedVisitor = visitor as IVBALikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikePatternElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikePatternElementContext likePatternElement() {
		LikePatternElementContext _localctx = new LikePatternElementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_likePatternElement);
		try {
			State = 26;
			switch (_input.La(1)) {
			case NORMALCHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 21; Match(NORMALCHAR);
				}
				break;
			case QUESTIONMARK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22; Match(QUESTIONMARK);
				}
				break;
			case HASH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 23; Match(HASH);
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 24; Match(STAR);
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 25; likePatternCharlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikePatternCharlistContext : ParserRuleContext {
		public LikePatternCharlistElementContext likePatternCharlistElement(int i) {
			return GetRuleContext<LikePatternCharlistElementContext>(i);
		}
		public ITerminalNode EXCLAMATION() { return GetToken(VBALikeParser.EXCLAMATION, 0); }
		public IReadOnlyList<LikePatternCharlistElementContext> likePatternCharlistElement() {
			return GetRuleContexts<LikePatternCharlistElementContext>();
		}
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBALikeParser.L_SQUARE_BRACKET, 0); }
		public ITerminalNode DASH(int i) {
			return GetToken(VBALikeParser.DASH, i);
		}
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBALikeParser.R_SQUARE_BRACKET, 0); }
		public IReadOnlyList<ITerminalNode> DASH() { return GetTokens(VBALikeParser.DASH); }
		public LikePatternCharlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likePatternCharlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBALikeListener typedListener = listener as IVBALikeListener;
			if (typedListener != null) typedListener.EnterLikePatternCharlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBALikeListener typedListener = listener as IVBALikeListener;
			if (typedListener != null) typedListener.ExitLikePatternCharlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBALikeVisitor<TResult> typedVisitor = visitor as IVBALikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikePatternCharlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikePatternCharlistContext likePatternCharlist() {
		LikePatternCharlistContext _localctx = new LikePatternCharlistContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_likePatternCharlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; Match(L_SQUARE_BRACKET);
			State = 30;
			_la = _input.La(1);
			if (_la==EXCLAMATION) {
				{
				State = 29; Match(EXCLAMATION);
				}
			}

			State = 33;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 32; Match(DASH);
				}
				break;
			}
			State = 38;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NORMALCHAR) {
				{
				{
				State = 35; likePatternCharlistElement();
				}
				}
				State = 40;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 42;
			_la = _input.La(1);
			if (_la==DASH) {
				{
				State = 41; Match(DASH);
				}
			}

			State = 44; Match(R_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikePatternCharlistElementContext : ParserRuleContext {
		public ITerminalNode NORMALCHAR() { return GetToken(VBALikeParser.NORMALCHAR, 0); }
		public LikePatternCharlistRangeContext likePatternCharlistRange() {
			return GetRuleContext<LikePatternCharlistRangeContext>(0);
		}
		public LikePatternCharlistElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likePatternCharlistElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBALikeListener typedListener = listener as IVBALikeListener;
			if (typedListener != null) typedListener.EnterLikePatternCharlistElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBALikeListener typedListener = listener as IVBALikeListener;
			if (typedListener != null) typedListener.ExitLikePatternCharlistElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBALikeVisitor<TResult> typedVisitor = visitor as IVBALikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikePatternCharlistElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikePatternCharlistElementContext likePatternCharlistElement() {
		LikePatternCharlistElementContext _localctx = new LikePatternCharlistElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_likePatternCharlistElement);
		try {
			State = 48;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; Match(NORMALCHAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; likePatternCharlistRange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikePatternCharlistRangeContext : ParserRuleContext {
		public ITerminalNode NORMALCHAR(int i) {
			return GetToken(VBALikeParser.NORMALCHAR, i);
		}
		public IReadOnlyList<ITerminalNode> NORMALCHAR() { return GetTokens(VBALikeParser.NORMALCHAR); }
		public ITerminalNode DASH() { return GetToken(VBALikeParser.DASH, 0); }
		public LikePatternCharlistRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likePatternCharlistRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBALikeListener typedListener = listener as IVBALikeListener;
			if (typedListener != null) typedListener.EnterLikePatternCharlistRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBALikeListener typedListener = listener as IVBALikeListener;
			if (typedListener != null) typedListener.ExitLikePatternCharlistRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBALikeVisitor<TResult> typedVisitor = visitor as IVBALikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikePatternCharlistRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikePatternCharlistRangeContext likePatternCharlistRange() {
		LikePatternCharlistRangeContext _localctx = new LikePatternCharlistRangeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_likePatternCharlistRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(NORMALCHAR);
			State = 51; Match(DASH);
			State = 52; Match(NORMALCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\n\x39\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x3\x2\x3\x2\x3\x2"+
		"\x3\x3\a\x3\x13\n\x3\f\x3\xE\x3\x16\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x5\x4\x1D\n\x4\x3\x5\x3\x5\x5\x5!\n\x5\x3\x5\x5\x5$\n\x5\x3\x5\a\x5\'"+
		"\n\x5\f\x5\xE\x5*\v\x5\x3\x5\x5\x5-\n\x5\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6"+
		"\x33\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x2\x2\x2\b\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\x2\x2<\x2\xE\x3\x2\x2\x2\x4\x14\x3\x2\x2\x2\x6\x1C\x3\x2\x2\x2"+
		"\b\x1E\x3\x2\x2\x2\n\x32\x3\x2\x2\x2\f\x34\x3\x2\x2\x2\xE\xF\x5\x4\x3"+
		"\x2\xF\x10\a\x2\x2\x3\x10\x3\x3\x2\x2\x2\x11\x13\x5\x6\x4\x2\x12\x11\x3"+
		"\x2\x2\x2\x13\x16\x3\x2\x2\x2\x14\x12\x3\x2\x2\x2\x14\x15\x3\x2\x2\x2"+
		"\x15\x5\x3\x2\x2\x2\x16\x14\x3\x2\x2\x2\x17\x1D\a\n\x2\x2\x18\x1D\a\x3"+
		"\x2\x2\x19\x1D\a\x4\x2\x2\x1A\x1D\a\x5\x2\x2\x1B\x1D\x5\b\x5\x2\x1C\x17"+
		"\x3\x2\x2\x2\x1C\x18\x3\x2\x2\x2\x1C\x19\x3\x2\x2\x2\x1C\x1A\x3\x2\x2"+
		"\x2\x1C\x1B\x3\x2\x2\x2\x1D\a\x3\x2\x2\x2\x1E \a\x6\x2\x2\x1F!\a\t\x2"+
		"\x2 \x1F\x3\x2\x2\x2 !\x3\x2\x2\x2!#\x3\x2\x2\x2\"$\a\b\x2\x2#\"\x3\x2"+
		"\x2\x2#$\x3\x2\x2\x2$(\x3\x2\x2\x2%\'\x5\n\x6\x2&%\x3\x2\x2\x2\'*\x3\x2"+
		"\x2\x2(&\x3\x2\x2\x2()\x3\x2\x2\x2),\x3\x2\x2\x2*(\x3\x2\x2\x2+-\a\b\x2"+
		"\x2,+\x3\x2\x2\x2,-\x3\x2\x2\x2-.\x3\x2\x2\x2./\a\a\x2\x2/\t\x3\x2\x2"+
		"\x2\x30\x33\a\n\x2\x2\x31\x33\x5\f\a\x2\x32\x30\x3\x2\x2\x2\x32\x31\x3"+
		"\x2\x2\x2\x33\v\x3\x2\x2\x2\x34\x35\a\n\x2\x2\x35\x36\a\b\x2\x2\x36\x37"+
		"\a\n\x2\x2\x37\r\x3\x2\x2\x2\t\x14\x1C #(,\x32";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Like
