//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\RubberduckParserTest\RubberduckParserTest\VBAParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		PRINT=166, ELSEIF=93, CBYTE=5, CLOSE=69, STATIC=196, MINUS=230, OPTION_EXPLICIT=159, 
		L_SQUARE_BRACKET=241, SETATTR=192, DOEVENTS=21, HASHENDIF=240, DATELITERAL=248, 
		ERROR=107, NOTHING=151, EACH=91, SUB=200, FILECOPY=115, STOP=198, LPAREN=228, 
		MID=144, CVERR=19, BEEP=58, AS=56, END_PROPERTY=98, AT=45, DATABASE=71, 
		GOSUB=121, CSNG=15, HASHCONST=236, CHDIR=66, POW=234, DOLLAR=47, PROPERTY_LET=169, 
		THEN=203, XOR=220, EXIT_FOR=110, DEFINT=79, HASHIF=237, UNLOCK=210, CALL=64, 
		LOCK_READ=139, SET=191, LOCK_READ_WRITE=141, ABS=1, LSET=142, RAISEEVENT=176, 
		MIDBTYPESUFFIX=32, SEEK=188, LONG=133, CBOOL=4, LIB=136, DIM=88, APPEND=55, 
		MKDIR=145, OPEN=156, DIV=222, PROPERTY_SET=170, CDBL=8, PERCENT=46, SENDKEYS=190, 
		END_SELECT=99, STRING=199, HASHELSEIF=238, SGN=37, REM=180, TO=205, DEFDBL=77, 
		BYVAL=61, FRIEND=116, LOOP=134, DELETESETTING=87, CLASS=68, DO=89, VARIANT=212, 
		END_WITH=102, DEFBOOL=74, OPTIONAL=157, ADDRESSOF=50, CONST=70, RSET=185, 
		INTEGER=129, CDEC=9, REMCOMMENT=250, ATTRIBUTE=53, OUTPUT=163, FOR=117, 
		PTRSAFE=171, EQ=224, BOOLEAN=60, CIRCLE=11, NAME=147, END_FUNCTION=96, 
		DEFSNG=84, DEFBYTE=75, NOT=150, CINT=10, SAVESETTING=187, END=103, PRESERVE=165, 
		ON_LOCAL_ERROR=155, FLOATLITERAL=246, HASHELSE=239, LOAD=131, BINARY=59, 
		LENB=28, RETURN=183, EXCLAMATIONPOINT=42, NEXT=148, GLOBAL=120, INPUTB=24, 
		IDENTIFIER=255, WS=254, EMPTY=94, CURRENCY=17, CCUR=6, MOD=146, WITHEVENTS=218, 
		COLON=40, DEFLNGLNG=81, STEP=197, TIME=204, OPTION_BASE=158, GT=226, PUT=173, 
		WITH=217, CSTR=16, LOCK_WRITE=140, LINE_CONTINUATION=256, TYPEOF=208, 
		DEFVAR=86, RMDIR=184, DEFLNG=80, UBOUND=38, FALSE=114, ERRORCHAR=258, 
		UNDERSCORE=253, INTEGERLITERAL=247, END_IF=97, LOCK=132, TEXT=202, SINGLEQUOTE=252, 
		SAVEPICTURE=186, MULT=231, SEMICOLON=41, BYTE=63, HEXLITERAL=245, ELSE=92, 
		IF=123, TYPE=207, AMPERSAND=48, DEFLNGPTR=82, ENUM=104, DEFOBJ=83, IN=126, 
		CHDRIVE=67, OPTION=34, DOT=43, EXIT_DO=109, GUIDLITERAL=257, IS=128, EQV=105, 
		WEND=214, FUNCTION=118, HASH=44, CASE=65, GEQ=225, GET=119, PUBLIC=172, 
		ON_ERROR=154, EXIT=22, MIDB=31, END_ENUM=95, GOTO=122, INTDIV=223, LONGPTR=30, 
		WIDTH=216, BEGIN=57, EXIT_SUB=113, ASSIGN=221, COMMENT=251, WRITE=219, 
		RANDOMIZE=175, DOUBLE=90, EXIT_PROPERTY=112, COMMA=39, RANDOM=174, PROPERTY_GET=168, 
		SELECT=189, PRIVATE=167, ERASE=106, TAB=201, BYREF=62, VERSION=213, NEQ=232, 
		END_TYPE=101, KILL=130, NEW=149, ARRAY=3, INPUT=127, SINGLE=194, UNLOAD=209, 
		ALIAS=51, SPC=195, LT=229, RESET=181, END_SUB=100, EVENT=108, READ_WRITE=178, 
		OPTION_COMPARE=160, ME=143, SCALE=36, CDATE=7, MIDTYPESUFFIX=33, NULL=152, 
		NEWLINE=249, TRUE=206, RPAREN=235, APPACTIVATE=54, IMP=124, STRINGLITERAL=243, 
		OCTLITERAL=244, READ=177, DATE=72, LIKE=137, AND=52, OPTION_PRIVATE_MODULE=161, 
		CLNGLNG=13, PLUS=233, ANY=2, RESUME=182, INT=25, SHARED=193, EXIT_FUNCTION=111, 
		PSET=35, ACCESS=49, LINE_INPUT=138, ON=153, OR=162, PARAMARRAY=164, LBOUND=26, 
		R_SQUARE_BRACKET=242, IMPLEMENTS=125, UNTIL=211, DEBUG=20, DEFCUR=78, 
		CLNGPTR=14, LONGLONG=29, DECLARE=73, DEFDATE=76, FIX=23, LEN=27, REDIM=179, 
		LEQ=227, DEFSTR=85, LET=135, WHILE=215, CVAR=18, CLNG=12, COLLECTION=259, 
		ENDIF=260, RESUME_NEXT=261;
	public static readonly string[] tokenNames = {
		"<INVALID>", "ABS", "ANY", "ARRAY", "CBOOL", "CBYTE", "CCUR", "CDATE", 
		"CDBL", "CDEC", "CINT", "CIRCLE", "CLNG", "CLNGLNG", "CLNGPTR", "CSNG", 
		"CSTR", "CURRENCY", "CVAR", "CVERR", "DEBUG", "DOEVENTS", "EXIT", "FIX", 
		"INPUTB", "INT", "LBOUND", "LEN", "LENB", "LONGLONG", "LONGPTR", "MIDB", 
		"MIDBTYPESUFFIX", "MIDTYPESUFFIX", "OPTION", "PSET", "SCALE", "SGN", "UBOUND", 
		"','", "':'", "';'", "'!'", "'.'", "'#'", "'@'", "'%'", "'$'", "'&'", 
		"ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", "APPEND", 
		"AS", "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", 
		"CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "CONST", "DATABASE", 
		"DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFCUR", 
		"DEFINT", "DEFLNG", "DEFLNGLNG", "DEFLNGPTR", "DEFOBJ", "DEFSNG", "DEFSTR", 
		"DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", 
		"EMPTY", "END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", 
		"END_SUB", "END_TYPE", "END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", 
		"EVENT", "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", 
		"FALSE", "FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", 
		"GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", 
		"LOAD", "LOCK", "LONG", "LOOP", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", 
		"LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "ME", "MID", "MKDIR", "MOD", 
		"NAME", "NEXT", "NEW", "NOT", "NOTHING", "NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR", 
		"OPEN", "OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", "OPTION_COMPARE", 
		"OPTION_PRIVATE_MODULE", "OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", 
		"PRIVATE", "PROPERTY_GET", "PROPERTY_LET", "PROPERTY_SET", "PTRSAFE", 
		"PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", "READ", "READ_WRITE", 
		"REDIM", "REM", "RESET", "RESUME", "RETURN", "RMDIR", "RSET", "SAVEPICTURE", 
		"SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", "SETATTR", "SHARED", 
		"SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", "SUB", "TAB", "TEXT", 
		"THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", "UNLOAD", "UNLOCK", "UNTIL", 
		"VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS", 
		"WRITE", "XOR", "':='", "'/'", "'\\'", "'='", "GEQ", "'>'", "LEQ", "'('", 
		"'<'", "'-'", "'*'", "NEQ", "'+'", "'^'", "')'", "HASHCONST", "HASHIF", 
		"HASHELSEIF", "HASHELSE", "HASHENDIF", "'['", "']'", "STRINGLITERAL", 
		"OCTLITERAL", "HEXLITERAL", "FLOATLITERAL", "INTEGERLITERAL", "DATELITERAL", 
		"NEWLINE", "REMCOMMENT", "COMMENT", "'''", "'_'", "WS", "IDENTIFIER", 
		"LINE_CONTINUATION", "GUIDLITERAL", "ERRORCHAR", "COLLECTION", "ENDIF", 
		"RESUME_NEXT"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleDeclarations = 6, 
		RULE_moduleOption = 7, RULE_moduleDeclarationsElement = 8, RULE_moduleBody = 9, 
		RULE_moduleBodyElement = 10, RULE_attributeStmt = 11, RULE_block = 12, 
		RULE_blockStmt = 13, RULE_appactivateStmt = 14, RULE_beepStmt = 15, RULE_chdirStmt = 16, 
		RULE_chdriveStmt = 17, RULE_closeStmt = 18, RULE_constStmt = 19, RULE_constSubStmt = 20, 
		RULE_dateStmt = 21, RULE_declareStmt = 22, RULE_deftypeStmt = 23, RULE_deleteSettingStmt = 24, 
		RULE_doLoopStmt = 25, RULE_endStmt = 26, RULE_enumerationStmt = 27, RULE_enumerationStmt_Constant = 28, 
		RULE_eraseStmt = 29, RULE_errorStmt = 30, RULE_eventStmt = 31, RULE_exitStmt = 32, 
		RULE_filecopyStmt = 33, RULE_forEachStmt = 34, RULE_forNextStmt = 35, 
		RULE_functionStmt = 36, RULE_getStmt = 37, RULE_goSubStmt = 38, RULE_goToStmt = 39, 
		RULE_ifThenElseStmt = 40, RULE_ifBlockStmt = 41, RULE_ifConditionStmt = 42, 
		RULE_ifElseIfBlockStmt = 43, RULE_ifElseBlockStmt = 44, RULE_implementsStmt = 45, 
		RULE_inputStmt = 46, RULE_killStmt = 47, RULE_letStmt = 48, RULE_lineInputStmt = 49, 
		RULE_loadStmt = 50, RULE_lockStmt = 51, RULE_lsetStmt = 52, RULE_midStmt = 53, 
		RULE_mkdirStmt = 54, RULE_nameStmt = 55, RULE_onErrorStmt = 56, RULE_onGoToStmt = 57, 
		RULE_onGoSubStmt = 58, RULE_openStmt = 59, RULE_outputList = 60, RULE_outputList_Expression = 61, 
		RULE_printStmt = 62, RULE_propertyGetStmt = 63, RULE_propertySetStmt = 64, 
		RULE_propertyLetStmt = 65, RULE_putStmt = 66, RULE_raiseEventStmt = 67, 
		RULE_randomizeStmt = 68, RULE_redimStmt = 69, RULE_redimSubStmt = 70, 
		RULE_resetStmt = 71, RULE_resumeStmt = 72, RULE_returnStmt = 73, RULE_rmdirStmt = 74, 
		RULE_rsetStmt = 75, RULE_savepictureStmt = 76, RULE_saveSettingStmt = 77, 
		RULE_seekStmt = 78, RULE_selectCaseStmt = 79, RULE_sC_Selection = 80, 
		RULE_sC_Case = 81, RULE_sC_Cond = 82, RULE_sendkeysStmt = 83, RULE_setattrStmt = 84, 
		RULE_setStmt = 85, RULE_stopStmt = 86, RULE_subStmt = 87, RULE_timeStmt = 88, 
		RULE_typeStmt = 89, RULE_typeStmt_Element = 90, RULE_unloadStmt = 91, 
		RULE_unlockStmt = 92, RULE_valueStmt = 93, RULE_typeOfIsExpression = 94, 
		RULE_variableStmt = 95, RULE_variableListStmt = 96, RULE_variableSubStmt = 97, 
		RULE_whileWendStmt = 98, RULE_widthStmt = 99, RULE_withStmt = 100, RULE_withStmtExpression = 101, 
		RULE_writeStmt = 102, RULE_fileNumber = 103, RULE_explicitCallStmt = 104, 
		RULE_explicitCallStmtExpression = 105, RULE_implicitCallStmt_InBlock = 106, 
		RULE_iCS_B_MemberProcedureCall = 107, RULE_iCS_B_ProcedureCall = 108, 
		RULE_implicitCallStmt_InStmt = 109, RULE_iCS_S_VariableOrProcedureCall = 110, 
		RULE_iCS_S_ProcedureOrArrayCall = 111, RULE_iCS_S_VariableOrProcedureCallUnrestricted = 112, 
		RULE_iCS_S_ProcedureOrArrayCallUnrestricted = 113, RULE_iCS_S_MembersCall = 114, 
		RULE_iCS_S_MemberCall = 115, RULE_iCS_S_DictionaryCall = 116, RULE_argsCall = 117, 
		RULE_argCall = 118, RULE_dictionaryCallStmt = 119, RULE_argList = 120, 
		RULE_arg = 121, RULE_argDefaultValue = 122, RULE_subscripts = 123, RULE_subscript = 124, 
		RULE_unrestrictedIdentifier = 125, RULE_identifier = 126, RULE_asTypeClause = 127, 
		RULE_baseType = 128, RULE_comparisonOperator = 129, RULE_complexType = 130, 
		RULE_fieldLength = 131, RULE_letterrange = 132, RULE_lineLabel = 133, 
		RULE_literal = 134, RULE_numberLiteral = 135, RULE_type = 136, RULE_typeHint = 137, 
		RULE_visibility = 138, RULE_keyword = 139, RULE_statementKeyword = 140, 
		RULE_endOfLine = 141, RULE_endOfStatement = 142, RULE_remComment = 143, 
		RULE_comment = 144, RULE_annotationList = 145, RULE_annotation = 146, 
		RULE_annotationName = 147, RULE_annotationArgList = 148, RULE_annotationArg = 149, 
		RULE_whiteSpace = 150;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement", 
		"moduleBody", "moduleBodyElement", "attributeStmt", "block", "blockStmt", 
		"appactivateStmt", "beepStmt", "chdirStmt", "chdriveStmt", "closeStmt", 
		"constStmt", "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt", 
		"deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant", 
		"eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", 
		"forNextStmt", "functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt", 
		"ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
		"implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
		"loadStmt", "lockStmt", "lsetStmt", "midStmt", "mkdirStmt", "nameStmt", 
		"onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", "outputList", 
		"outputList_Expression", "printStmt", "propertyGetStmt", "propertySetStmt", 
		"propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
		"redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", "rmdirStmt", 
		"rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt", "selectCaseStmt", 
		"sC_Selection", "sC_Case", "sC_Cond", "sendkeysStmt", "setattrStmt", "setStmt", 
		"stopStmt", "subStmt", "timeStmt", "typeStmt", "typeStmt_Element", "unloadStmt", 
		"unlockStmt", "valueStmt", "typeOfIsExpression", "variableStmt", "variableListStmt", 
		"variableSubStmt", "whileWendStmt", "widthStmt", "withStmt", "withStmtExpression", 
		"writeStmt", "fileNumber", "explicitCallStmt", "explicitCallStmtExpression", 
		"implicitCallStmt_InBlock", "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", 
		"implicitCallStmt_InStmt", "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", 
		"iCS_S_VariableOrProcedureCallUnrestricted", "iCS_S_ProcedureOrArrayCallUnrestricted", 
		"iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", 
		"argCall", "dictionaryCallStmt", "argList", "arg", "argDefaultValue", 
		"subscripts", "subscript", "unrestrictedIdentifier", "identifier", "asTypeClause", 
		"baseType", "comparisonOperator", "complexType", "fieldLength", "letterrange", 
		"lineLabel", "literal", "numberLiteral", "type", "typeHint", "visibility", 
		"keyword", "statementKeyword", "endOfLine", "endOfStatement", "remComment", 
		"comment", "annotationList", "annotation", "annotationName", "annotationArgList", 
		"annotationArg", "whiteSpace"
	};

	public override string GrammarFileName { get { return "VBAParser.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; module();
			State = 303; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleDeclarationsContext moduleDeclarations() {
			return GetRuleContext<ModuleDeclarationsContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 305; whiteSpace();
				}
				break;
			}
			State = 308; endOfStatement();
			State = 312;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 309; moduleHeader();
				State = 310; endOfStatement();
				}
				break;
			}
			State = 315;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 314; moduleConfig();
				}
				break;
			}
			State = 317; endOfStatement();
			State = 319;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 318; moduleAttributes();
				}
				break;
			}
			State = 321; endOfStatement();
			State = 323;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 322; moduleDeclarations();
				}
				break;
			}
			State = 325; endOfStatement();
			State = 327;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 326; moduleBody();
				}
				break;
			}
			State = 329; endOfStatement();
			State = 331;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 330; whiteSpace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(VERSION);
			State = 334; whiteSpace();
			State = 335; numberLiteral();
			State = 337;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 336; whiteSpace();
				}
				break;
			}
			State = 340;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 339; Match(CLASS);
				}
				break;
			}
			State = 342; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public ITerminalNode GUIDLITERAL() { return GetToken(VBAParser.GUIDLITERAL, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(BEGIN);
			State = 352;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 345; whiteSpace();
				State = 346; Match(GUIDLITERAL);
				State = 347; whiteSpace();
				State = 348; unrestrictedIdentifier();
				State = 350;
				switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					State = 349; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 354; endOfStatement();
			State = 356;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 355; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 358;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 360; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; unrestrictedIdentifier();
			State = 366;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 363; whiteSpace();
				}
				}
				State = 368;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 369; Match(EQ);
			State = 373;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 370; whiteSpace();
				}
				}
				State = 375;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 376; literal();
			State = 379;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 377; Match(COLON);
				State = 378; numberLiteral();
				}
				break;
			}
			State = 381; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 383; attributeStmt();
					State = 384; endOfStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 388;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; moduleDeclarationsElement();
			State = 396;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 391; endOfStatement();
					State = 392; moduleDeclarationsElement();
					}
					} 
				}
				State = 398;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			State = 399; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleOption);
		int _la;
		try {
			State = 411;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 401; Match(OPTION_BASE);
				State = 402; whiteSpace();
				State = 403; numberLiteral();
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 405; Match(OPTION_COMPARE);
				State = 406; whiteSpace();
				State = 407;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 409; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 410; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleDeclarationsElement);
		try {
			State = 421;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 413; declareStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 414; enumerationStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 415; eventStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 416; constStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 417; implementsStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 418; variableStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 419; moduleOption();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 420; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 423; moduleBodyElement();
			State = 429;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 424; endOfStatement();
					State = 425; moduleBodyElement();
					}
					} 
				}
				State = 431;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			}
			State = 432; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleBodyElement);
		try {
			State = 439;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434; functionStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435; propertyGetStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 436; propertySetStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 437; propertyLetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 438; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<LiteralContext> literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; Match(ATTRIBUTE);
			State = 442; whiteSpace();
			State = 443; implicitCallStmt_InStmt();
			State = 445;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 444; whiteSpace();
				}
			}

			State = 447; Match(EQ);
			State = 449;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 448; whiteSpace();
				}
			}

			State = 451; literal();
			State = 462;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 453;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 452; whiteSpace();
						}
					}

					State = 455; Match(COMMA);
					State = 457;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 456; whiteSpace();
						}
					}

					State = 459; literal();
					}
					} 
				}
				State = 464;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; blockStmt();
			State = 471;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 466; endOfStatement();
					State = 467; blockStmt();
					}
					} 
				}
				State = 473;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			}
			State = 474; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public LoadStmtContext loadStmt() {
			return GetRuleContext<LoadStmtContext>(0);
		}
		public ChdriveStmtContext chdriveStmt() {
			return GetRuleContext<ChdriveStmtContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public FilecopyStmtContext filecopyStmt() {
			return GetRuleContext<FilecopyStmtContext>(0);
		}
		public RmdirStmtContext rmdirStmt() {
			return GetRuleContext<RmdirStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public ChdirStmtContext chdirStmt() {
			return GetRuleContext<ChdirStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public RandomizeStmtContext randomizeStmt() {
			return GetRuleContext<RandomizeStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public MkdirStmtContext mkdirStmt() {
			return GetRuleContext<MkdirStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public SavepictureStmtContext savepictureStmt() {
			return GetRuleContext<SavepictureStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public IfThenElseStmtContext ifThenElseStmt() {
			return GetRuleContext<IfThenElseStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public SetattrStmtContext setattrStmt() {
			return GetRuleContext<SetattrStmtContext>(0);
		}
		public SaveSettingStmtContext saveSettingStmt() {
			return GetRuleContext<SaveSettingStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public TimeStmtContext timeStmt() {
			return GetRuleContext<TimeStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public SendkeysStmtContext sendkeysStmt() {
			return GetRuleContext<SendkeysStmtContext>(0);
		}
		public DeleteSettingStmtContext deleteSettingStmt() {
			return GetRuleContext<DeleteSettingStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public DateStmtContext dateStmt() {
			return GetRuleContext<DateStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public KillStmtContext killStmt() {
			return GetRuleContext<KillStmtContext>(0);
		}
		public DeftypeStmtContext deftypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public LineLabelContext lineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public BeepStmtContext beepStmt() {
			return GetRuleContext<BeepStmtContext>(0);
		}
		public AppactivateStmtContext appactivateStmt() {
			return GetRuleContext<AppactivateStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public UnloadStmtContext unloadStmt() {
			return GetRuleContext<UnloadStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_blockStmt);
		try {
			State = 542;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476; lineLabel();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 477; appactivateStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 478; attributeStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 479; beepStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 480; chdirStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 481; chdriveStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 482; closeStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 483; constStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 484; dateStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 485; deleteSettingStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 486; deftypeStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 487; doLoopStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 488; endStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 489; eraseStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 490; errorStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 491; exitStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 492; explicitCallStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 493; filecopyStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 494; forEachStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 495; forNextStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 496; getStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 497; goSubStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 498; goToStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 499; ifThenElseStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 500; implementsStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 501; inputStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 502; killStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 503; letStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 504; lineInputStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 505; loadStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 506; lockStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 507; lsetStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 508; midStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 509; mkdirStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 510; nameStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 511; onErrorStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 512; onGoToStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 513; onGoSubStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 514; openStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 515; printStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 516; putStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 517; raiseEventStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 518; randomizeStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 519; redimStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 520; resetStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 521; resumeStmt();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 522; returnStmt();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 523; rmdirStmt();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 524; rsetStmt();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 525; savepictureStmt();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 526; saveSettingStmt();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 527; seekStmt();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 528; selectCaseStmt();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 529; sendkeysStmt();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 530; setattrStmt();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 531; setStmt();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 532; stopStmt();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 533; timeStmt();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 534; unloadStmt();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 535; unlockStmt();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 536; variableStmt();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 537; whileWendStmt();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 538; widthStmt();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 539; withStmt();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 540; writeStmt();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 541; implicitCallStmt_InBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppactivateStmtContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public AppactivateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appactivateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAppactivateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAppactivateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppactivateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppactivateStmtContext appactivateStmt() {
		AppactivateStmtContext _localctx = new AppactivateStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_appactivateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544; Match(APPACTIVATE);
			State = 545; whiteSpace();
			State = 546; valueStmt(0);
			State = 555;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 548;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 547; whiteSpace();
					}
				}

				State = 550; Match(COMMA);
				State = 552;
				switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					State = 551; whiteSpace();
					}
					break;
				}
				State = 554; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepStmtContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public BeepStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBeepStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBeepStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeepStmtContext beepStmt() {
		BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_beepStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ChdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterChdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitChdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdirStmtContext chdirStmt() {
		ChdirStmtContext _localctx = new ChdirStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_chdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559; Match(CHDIR);
			State = 560; whiteSpace();
			State = 561; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdriveStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ChdriveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdriveStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterChdriveStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitChdriveStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdriveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdriveStmtContext chdriveStmt() {
		ChdriveStmtContext _localctx = new ChdriveStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_chdriveStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563; Match(CHDRIVE);
			State = 564; whiteSpace();
			State = 565; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<FileNumberContext> fileNumber() {
			return GetRuleContexts<FileNumberContext>();
		}
		public FileNumberContext fileNumber(int i) {
			return GetRuleContext<FileNumberContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; Match(CLOSE);
			State = 583;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 568; whiteSpace();
				State = 569; fileNumber();
				State = 580;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 571;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 570; whiteSpace();
							}
						}

						State = 573; Match(COMMA);
						State = 575;
						switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
						case 1:
							{
							State = 574; whiteSpace();
							}
							break;
						}
						State = 577; fileNumber();
						}
						} 
					}
					State = 582;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 585; visibility();
				State = 586; whiteSpace();
				}
			}

			State = 590; Match(CONST);
			State = 591; whiteSpace();
			State = 592; constSubStmt();
			State = 603;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 594;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 593; whiteSpace();
						}
					}

					State = 596; Match(COMMA);
					State = 598;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 597; whiteSpace();
						}
					}

					State = 600; constSubStmt();
					}
					} 
				}
				State = 605;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606; identifier();
			State = 608;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 607; typeHint();
				}
			}

			State = 613;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 610; whiteSpace();
				State = 611; asTypeClause();
				}
				break;
			}
			State = 616;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 615; whiteSpace();
				}
			}

			State = 618; Match(EQ);
			State = 620;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 619; whiteSpace();
				}
				break;
			}
			State = 622; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public DateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateStmtContext dateStmt() {
		DateStmtContext _localctx = new DateStmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_dateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624; Match(DATE);
			State = 626;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 625; whiteSpace();
				}
			}

			State = 628; Match(EQ);
			State = 630;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 629; whiteSpace();
				}
				break;
			}
			State = 632; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public IReadOnlyList<TypeHintContext> typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 634; visibility();
				State = 635; whiteSpace();
				}
			}

			State = 639; Match(DECLARE);
			State = 640; whiteSpace();
			State = 643;
			_la = _input.La(1);
			if (_la==PTRSAFE) {
				{
				State = 641; Match(PTRSAFE);
				State = 642; whiteSpace();
				}
			}

			State = 650;
			switch (_input.La(1)) {
			case FUNCTION:
				{
				{
				State = 645; Match(FUNCTION);
				State = 647;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
					{
					State = 646; typeHint();
					}
				}

				}
				}
				break;
			case SUB:
				{
				State = 649; Match(SUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 652; whiteSpace();
			State = 653; identifier();
			State = 655;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 654; typeHint();
				}
			}

			State = 657; whiteSpace();
			State = 658; Match(LIB);
			State = 659; whiteSpace();
			State = 660; Match(STRINGLITERAL);
			State = 666;
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 661; whiteSpace();
				State = 662; Match(ALIAS);
				State = 663; whiteSpace();
				State = 664; Match(STRINGLITERAL);
				}
				break;
			}
			State = 672;
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 669;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 668; whiteSpace();
					}
				}

				State = 671; argList();
				}
				break;
			}
			State = 677;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 674; whiteSpace();
				State = 675; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public IReadOnlyList<LetterrangeContext> letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext deftypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			_la = _input.La(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (DEFBOOL - 74)) | (1L << (DEFBYTE - 74)) | (1L << (DEFDATE - 74)) | (1L << (DEFDBL - 74)) | (1L << (DEFCUR - 74)) | (1L << (DEFINT - 74)) | (1L << (DEFLNG - 74)) | (1L << (DEFLNGLNG - 74)) | (1L << (DEFLNGPTR - 74)) | (1L << (DEFOBJ - 74)) | (1L << (DEFSNG - 74)) | (1L << (DEFSTR - 74)) | (1L << (DEFVAR - 74)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 680; whiteSpace();
			State = 681; letterrange();
			State = 692;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 683;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 682; whiteSpace();
						}
					}

					State = 685; Match(COMMA);
					State = 687;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 686; whiteSpace();
						}
					}

					State = 689; letterrange();
					}
					} 
				}
				State = 694;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSettingStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSettingStmtContext deleteSettingStmt() {
		DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_deleteSettingStmt);
		int _la;
		try {
			State = 733;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 695; Match(DELETESETTING);
				State = 696; whiteSpace();
				State = 697; valueStmt(0);
				State = 699;
				switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					State = 698; whiteSpace();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 701; Match(DELETESETTING);
				State = 702; whiteSpace();
				State = 703; valueStmt(0);
				State = 705;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 704; whiteSpace();
					}
				}

				State = 707; Match(COMMA);
				State = 709;
				switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					State = 708; whiteSpace();
					}
					break;
				}
				State = 711; valueStmt(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 713; Match(DELETESETTING);
				State = 714; whiteSpace();
				State = 715; valueStmt(0);
				State = 717;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 716; whiteSpace();
					}
				}

				State = 719; Match(COMMA);
				State = 721;
				switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					State = 720; whiteSpace();
					}
					break;
				}
				State = 723; valueStmt(0);
				State = 725;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 724; whiteSpace();
					}
				}

				State = 727; Match(COMMA);
				State = 729;
				switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					State = 728; whiteSpace();
					}
					break;
				}
				State = 731; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_doLoopStmt);
		int _la;
		try {
			State = 764;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 735; Match(DO);
				State = 736; endOfStatement();
				State = 738;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
					{
					State = 737; block();
					}
				}

				State = 740; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 742; Match(DO);
				State = 743; whiteSpace();
				State = 744;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 745; whiteSpace();
				State = 746; valueStmt(0);
				State = 747; endOfStatement();
				State = 749;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
					{
					State = 748; block();
					}
				}

				State = 751; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 753; Match(DO);
				State = 754; endOfStatement();
				State = 756;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
					{
					State = 755; block();
					}
				}

				State = 758; Match(LOOP);
				State = 759; whiteSpace();
				State = 760;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 761; whiteSpace();
				State = 762; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 768; visibility();
				State = 769; whiteSpace();
				}
			}

			State = 773; Match(ENUM);
			State = 774; whiteSpace();
			State = 775; identifier();
			State = 776; endOfStatement();
			State = 780;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CHDIR - 66)) | (1L << (CHDRIVE - 66)) | (1L << (CLASS - 66)) | (1L << (DATABASE - 66)) | (1L << (DATE - 66)) | (1L << (DELETESETTING - 66)) | (1L << (DOUBLE - 66)) | (1L << (END_IF - 66)) | (1L << (EQV - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (IMP - 66)) | (1L << (IN - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (KILL - 130)) | (1L << (LOAD - 130)) | (1L << (LONG - 130)) | (1L << (LIB - 130)) | (1L << (LIKE - 130)) | (1L << (ME - 130)) | (1L << (MID - 130)) | (1L << (MKDIR - 130)) | (1L << (MOD - 130)) | (1L << (NAME - 130)) | (1L << (NEW - 130)) | (1L << (NOT - 130)) | (1L << (NOTHING - 130)) | (1L << (NULL - 130)) | (1L << (OPTIONAL - 130)) | (1L << (OR - 130)) | (1L << (PARAMARRAY - 130)) | (1L << (PRESERVE - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (REM - 130)) | (1L << (RMDIR - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SETATTR - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (SINGLE - 194)) | (1L << (SPC - 194)) | (1L << (STRING - 194)) | (1L << (TAB - 194)) | (1L << (TEXT - 194)) | (1L << (THEN - 194)) | (1L << (TIME - 194)) | (1L << (TO - 194)) | (1L << (TRUE - 194)) | (1L << (TYPEOF - 194)) | (1L << (UNLOAD - 194)) | (1L << (UNTIL - 194)) | (1L << (VARIANT - 194)) | (1L << (VERSION - 194)) | (1L << (WITHEVENTS - 194)) | (1L << (XOR - 194)) | (1L << (IDENTIFIER - 194)))) != 0) || _la==COLLECTION) {
				{
				{
				State = 777; enumerationStmt_Constant();
				}
				}
				State = 782;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 783; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; identifier();
			State = 794;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 787;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 786; whiteSpace();
					}
				}

				State = 789; Match(EQ);
				State = 791;
				switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					State = 790; whiteSpace();
					}
					break;
				}
				State = 793; valueStmt(0);
				}
				break;
			}
			State = 796; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 798; Match(ERASE);
			State = 799; whiteSpace();
			State = 800; valueStmt(0);
			State = 811;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,76,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 802;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 801; whiteSpace();
						}
					}

					State = 804; Match(COMMA);
					State = 806;
					switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
					case 1:
						{
						State = 805; whiteSpace();
						}
						break;
					}
					State = 808; valueStmt(0);
					}
					} 
				}
				State = 813;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,76,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814; Match(ERROR);
			State = 815; whiteSpace();
			State = 816; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 818; visibility();
				State = 819; whiteSpace();
				}
			}

			State = 823; Match(EVENT);
			State = 824; whiteSpace();
			State = 825; identifier();
			State = 827;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 826; whiteSpace();
				}
			}

			State = 829; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 831;
			_la = _input.La(1);
			if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (EXIT_DO - 109)) | (1L << (EXIT_FOR - 109)) | (1L << (EXIT_FUNCTION - 109)) | (1L << (EXIT_PROPERTY - 109)) | (1L << (EXIT_SUB - 109)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilecopyStmtContext : ParserRuleContext {
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filecopyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFilecopyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFilecopyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilecopyStmtContext filecopyStmt() {
		FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_filecopyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833; Match(FILECOPY);
			State = 834; whiteSpace();
			State = 835; valueStmt(0);
			State = 837;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 836; whiteSpace();
				}
			}

			State = 839; Match(COMMA);
			State = 841;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 840; whiteSpace();
				}
				break;
			}
			State = 843; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845; Match(FOR);
			State = 846; whiteSpace();
			State = 847; Match(EACH);
			State = 848; whiteSpace();
			State = 849; valueStmt(0);
			State = 850; whiteSpace();
			State = 851; Match(IN);
			State = 852; whiteSpace();
			State = 853; valueStmt(0);
			State = 854; endOfStatement();
			State = 856;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
				{
				State = 855; block();
				}
			}

			State = 858; Match(NEXT);
			State = 862;
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 859; whiteSpace();
				State = 860; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864; Match(FOR);
			State = 865; whiteSpace();
			State = 866; valueStmt(0);
			State = 868;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 867; whiteSpace();
				}
			}

			State = 870; Match(EQ);
			State = 872;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 871; whiteSpace();
				}
				break;
			}
			State = 874; valueStmt(0);
			State = 875; whiteSpace();
			State = 876; Match(TO);
			State = 877; whiteSpace();
			State = 878; valueStmt(0);
			State = 884;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 879; whiteSpace();
				State = 880; Match(STEP);
				State = 881; whiteSpace();
				State = 882; valueStmt(0);
				}
				break;
			}
			State = 886; endOfStatement();
			State = 888;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
				{
				State = 887; block();
				}
			}

			State = 890; Match(NEXT);
			State = 894;
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 891; whiteSpace();
				State = 892; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 899;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 896; visibility();
				State = 897; whiteSpace();
				}
			}

			State = 903;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 901; Match(STATIC);
				State = 902; whiteSpace();
				}
			}

			State = 905; Match(FUNCTION);
			State = 907;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 906; whiteSpace();
				}
			}

			State = 909; identifier();
			State = 911;
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 910; typeHint();
				}
				break;
			}
			State = 917;
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 914;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 913; whiteSpace();
					}
				}

				State = 916; argList();
				}
				break;
			}
			State = 923;
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				State = 920;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 919; whiteSpace();
					}
				}

				State = 922; asTypeClause();
				}
				break;
			}
			State = 925; endOfStatement();
			State = 927;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
				{
				State = 926; block();
				}
			}

			State = 929; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 931; Match(GET);
			State = 932; whiteSpace();
			State = 933; fileNumber();
			State = 935;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 934; whiteSpace();
				}
			}

			State = 937; Match(COMMA);
			State = 939;
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 938; whiteSpace();
				}
				break;
			}
			State = 942;
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 941; valueStmt(0);
				}
				break;
			}
			State = 945;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 944; whiteSpace();
				}
			}

			State = 947; Match(COMMA);
			State = 949;
			switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				State = 948; whiteSpace();
				}
				break;
			}
			State = 951; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953; Match(GOSUB);
			State = 954; whiteSpace();
			State = 955; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957; Match(GOTO);
			State = 958; whiteSpace();
			State = 959; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStmtContext : ParserRuleContext {
		public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStmt; } }
	 
		public IfThenElseStmtContext() { }
		public virtual void CopyFrom(IfThenElseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockIfThenElseContext : IfThenElseStmtContext {
		public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i) {
			return GetRuleContext<IfElseIfBlockStmtContext>(i);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<IfElseIfBlockStmtContext> ifElseIfBlockStmt() {
			return GetRuleContexts<IfElseIfBlockStmtContext>();
		}
		public IfBlockStmtContext ifBlockStmt() {
			return GetRuleContext<IfBlockStmtContext>(0);
		}
		public IfElseBlockStmtContext ifElseBlockStmt() {
			return GetRuleContext<IfElseBlockStmtContext>(0);
		}
		public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineIfThenElseContext : IfThenElseStmtContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStmtContext ifThenElseStmt() {
		IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_ifThenElseStmt);
		int _la;
		try {
			State = 987;
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				_localctx = new InlineIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 961; Match(IF);
				State = 962; whiteSpace();
				State = 963; ifConditionStmt();
				State = 964; whiteSpace();
				State = 965; Match(THEN);
				State = 966; whiteSpace();
				State = 967; blockStmt();
				State = 973;
				switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
				case 1:
					{
					State = 968; whiteSpace();
					State = 969; Match(ELSE);
					State = 970; whiteSpace();
					State = 971; blockStmt();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BlockIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 975; ifBlockStmt();
				State = 979;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 976; ifElseIfBlockStmt();
					}
					}
					State = 981;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 983;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 982; ifElseBlockStmt();
					}
				}

				State = 985; Match(END_IF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStmtContext ifBlockStmt() {
		IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_ifBlockStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989; Match(IF);
			State = 990; whiteSpace();
			State = 991; ifConditionStmt();
			State = 992; whiteSpace();
			State = 993; Match(THEN);
			State = 994; endOfStatement();
			State = 996;
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				State = 995; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfConditionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfConditionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionStmtContext ifConditionStmt() {
		IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_ifConditionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfBlockStmtContext ifElseIfBlockStmt() {
		IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_ifElseIfBlockStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1000; Match(ELSEIF);
			State = 1001; whiteSpace();
			State = 1002; ifConditionStmt();
			State = 1003; whiteSpace();
			State = 1004; Match(THEN);
			State = 1005; endOfStatement();
			State = 1007;
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				State = 1006; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockStmtContext ifElseBlockStmt() {
		IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_ifElseBlockStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009; Match(ELSE);
			State = 1010; endOfStatement();
			State = 1012;
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				State = 1011; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1014; Match(IMPLEMENTS);
			State = 1015; whiteSpace();
			State = 1016; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018; Match(INPUT);
			State = 1019; whiteSpace();
			State = 1020; fileNumber();
			State = 1029;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1022;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1021; whiteSpace();
						}
					}

					State = 1024; Match(COMMA);
					State = 1026;
					switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
					case 1:
						{
						State = 1025; whiteSpace();
						}
						break;
					}
					State = 1028; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1031;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,111,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public KillStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterKillStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitKillStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStmtContext killStmt() {
		KillStmtContext _localctx = new KillStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_killStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033; Match(KILL);
			State = 1034; whiteSpace();
			State = 1035; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1039;
			_la = _input.La(1);
			if (_la==LET) {
				{
				State = 1037; Match(LET);
				State = 1038; whiteSpace();
				}
			}

			State = 1041; implicitCallStmt_InStmt();
			State = 1043;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1042; whiteSpace();
				}
			}

			State = 1045; Match(EQ);
			State = 1047;
			switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
			case 1:
				{
				State = 1046; whiteSpace();
				}
				break;
			}
			State = 1049; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051; Match(LINE_INPUT);
			State = 1052; whiteSpace();
			State = 1053; fileNumber();
			State = 1055;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1054; whiteSpace();
				}
			}

			State = 1057; Match(COMMA);
			State = 1059;
			switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				State = 1058; whiteSpace();
				}
				break;
			}
			State = 1061; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public LoadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLoadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLoadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStmtContext loadStmt() {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_loadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063; Match(LOAD);
			State = 1064; whiteSpace();
			State = 1065; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067; Match(LOCK);
			State = 1068; whiteSpace();
			State = 1069; valueStmt(0);
			State = 1085;
			switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				State = 1071;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1070; whiteSpace();
					}
				}

				State = 1073; Match(COMMA);
				State = 1075;
				switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					State = 1074; whiteSpace();
					}
					break;
				}
				State = 1077; valueStmt(0);
				State = 1083;
				switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					State = 1078; whiteSpace();
					State = 1079; Match(TO);
					State = 1080; whiteSpace();
					State = 1081; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087; Match(LSET);
			State = 1088; whiteSpace();
			State = 1089; implicitCallStmt_InStmt();
			State = 1091;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1090; whiteSpace();
				}
			}

			State = 1093; Match(EQ);
			State = 1095;
			switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				State = 1094; whiteSpace();
				}
				break;
			}
			State = 1097; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099; Match(MID);
			State = 1101;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1100; whiteSpace();
				}
			}

			State = 1103; Match(LPAREN);
			State = 1105;
			switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				State = 1104; whiteSpace();
				}
				break;
			}
			State = 1107; argsCall();
			State = 1109;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1108; whiteSpace();
				}
			}

			State = 1111; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MkdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public MkdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mkdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMkdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMkdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MkdirStmtContext mkdirStmt() {
		MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_mkdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113; Match(MKDIR);
			State = 1114; whiteSpace();
			State = 1115; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117; Match(NAME);
			State = 1118; whiteSpace();
			State = 1119; valueStmt(0);
			State = 1120; whiteSpace();
			State = 1121; Match(AS);
			State = 1122; whiteSpace();
			State = 1123; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParser.ON_LOCAL_ERROR, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1126; whiteSpace();
			State = 1135;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1127; Match(GOTO);
				State = 1128; whiteSpace();
				State = 1129; valueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 1131; Match(RESUME);
				State = 1132; whiteSpace();
				State = 1133; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1137; Match(ON);
			State = 1138; whiteSpace();
			State = 1139; valueStmt(0);
			State = 1140; whiteSpace();
			State = 1141; Match(GOTO);
			State = 1142; whiteSpace();
			State = 1143; valueStmt(0);
			State = 1154;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,129,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1145;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1144; whiteSpace();
						}
					}

					State = 1147; Match(COMMA);
					State = 1149;
					switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
					case 1:
						{
						State = 1148; whiteSpace();
						}
						break;
					}
					State = 1151; valueStmt(0);
					}
					} 
				}
				State = 1156;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,129,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157; Match(ON);
			State = 1158; whiteSpace();
			State = 1159; valueStmt(0);
			State = 1160; whiteSpace();
			State = 1161; Match(GOSUB);
			State = 1162; whiteSpace();
			State = 1163; valueStmt(0);
			State = 1174;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,132,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1165;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1164; whiteSpace();
						}
					}

					State = 1167; Match(COMMA);
					State = 1169;
					switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
					case 1:
						{
						State = 1168; whiteSpace();
						}
						break;
					}
					State = 1171; valueStmt(0);
					}
					} 
				}
				State = 1176;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,132,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1177; Match(OPEN);
			State = 1178; whiteSpace();
			State = 1179; valueStmt(0);
			State = 1180; whiteSpace();
			State = 1181; Match(FOR);
			State = 1182; whiteSpace();
			State = 1183;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (INPUT - 127)) | (1L << (OUTPUT - 127)) | (1L << (RANDOM - 127)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1189;
			switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				State = 1184; whiteSpace();
				State = 1185; Match(ACCESS);
				State = 1186; whiteSpace();
				State = 1187;
				_la = _input.La(1);
				if ( !(((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & ((1L << (READ - 177)) | (1L << (READ_WRITE - 177)) | (1L << (WRITE - 177)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1194;
			switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				State = 1191; whiteSpace();
				State = 1192;
				_la = _input.La(1);
				if ( !(((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (LOCK_READ - 139)) | (1L << (LOCK_WRITE - 139)) | (1L << (LOCK_READ_WRITE - 139)) | (1L << (SHARED - 139)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1196; whiteSpace();
			State = 1197; Match(AS);
			State = 1198; whiteSpace();
			State = 1199; fileNumber();
			State = 1211;
			switch ( Interpreter.AdaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				State = 1200; whiteSpace();
				State = 1201; Match(LEN);
				State = 1203;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1202; whiteSpace();
					}
				}

				State = 1205; Match(EQ);
				State = 1207;
				switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
				case 1:
					{
					State = 1206; whiteSpace();
					}
					break;
				}
				State = 1209; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> SEMICOLON() { return GetTokens(VBAParser.SEMICOLON); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VBAParser.SEMICOLON, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1246;
			switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1213; outputList_Expression();
				State = 1226;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,141,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1215;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1214; whiteSpace();
							}
						}

						State = 1217;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1219;
						switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
						case 1:
							{
							State = 1218; whiteSpace();
							}
							break;
						}
						State = 1222;
						switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
						case 1:
							{
							State = 1221; outputList_Expression();
							}
							break;
						}
						}
						} 
					}
					State = 1228;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,141,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1230;
				switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
				case 1:
					{
					State = 1229; outputList_Expression();
					}
					break;
				}
				State = 1242;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1233;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1232; whiteSpace();
							}
						}

						State = 1235;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1237;
						switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
						case 1:
							{
							State = 1236; whiteSpace();
							}
							break;
						}
						State = 1240;
						switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
						case 1:
							{
							State = 1239; outputList_Expression();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1244;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,146,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_outputList_Expression);
		int _la;
		try {
			State = 1265;
			switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1248; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1249;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1263;
				switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
				case 1:
					{
					State = 1251;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1250; whiteSpace();
						}
					}

					State = 1253; Match(LPAREN);
					State = 1255;
					switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
					case 1:
						{
						State = 1254; whiteSpace();
						}
						break;
					}
					State = 1257; argsCall();
					State = 1259;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1258; whiteSpace();
						}
					}

					State = 1261; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267; Match(PRINT);
			State = 1268; whiteSpace();
			State = 1269; fileNumber();
			State = 1271;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1270; whiteSpace();
				}
			}

			State = 1273; Match(COMMA);
			State = 1278;
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				State = 1275;
				switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
				case 1:
					{
					State = 1274; whiteSpace();
					}
					break;
				}
				State = 1277; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 1280; visibility();
				State = 1281; whiteSpace();
				}
			}

			State = 1287;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1285; Match(STATIC);
				State = 1286; whiteSpace();
				}
			}

			State = 1289; Match(PROPERTY_GET);
			State = 1290; whiteSpace();
			State = 1291; identifier();
			State = 1293;
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				State = 1292; typeHint();
				}
				break;
			}
			State = 1299;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				State = 1296;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1295; whiteSpace();
					}
				}

				State = 1298; argList();
				}
				break;
			}
			State = 1304;
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				State = 1301; whiteSpace();
				State = 1302; asTypeClause();
				}
				break;
			}
			State = 1306; endOfStatement();
			State = 1308;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
				{
				State = 1307; block();
				}
			}

			State = 1310; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1315;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 1312; visibility();
				State = 1313; whiteSpace();
				}
			}

			State = 1319;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1317; Match(STATIC);
				State = 1318; whiteSpace();
				}
			}

			State = 1321; Match(PROPERTY_SET);
			State = 1322; whiteSpace();
			State = 1323; identifier();
			State = 1328;
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				State = 1325;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1324; whiteSpace();
					}
				}

				State = 1327; argList();
				}
				break;
			}
			State = 1330; endOfStatement();
			State = 1332;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
				{
				State = 1331; block();
				}
			}

			State = 1334; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1339;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 1336; visibility();
				State = 1337; whiteSpace();
				}
			}

			State = 1343;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1341; Match(STATIC);
				State = 1342; whiteSpace();
				}
			}

			State = 1345; Match(PROPERTY_LET);
			State = 1346; whiteSpace();
			State = 1347; identifier();
			State = 1352;
			switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				State = 1349;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1348; whiteSpace();
					}
				}

				State = 1351; argList();
				}
				break;
			}
			State = 1354; endOfStatement();
			State = 1356;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
				{
				State = 1355; block();
				}
			}

			State = 1358; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360; Match(PUT);
			State = 1361; whiteSpace();
			State = 1362; fileNumber();
			State = 1364;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1363; whiteSpace();
				}
			}

			State = 1366; Match(COMMA);
			State = 1368;
			switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				State = 1367; whiteSpace();
				}
				break;
			}
			State = 1371;
			switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				State = 1370; valueStmt(0);
				}
				break;
			}
			State = 1374;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1373; whiteSpace();
				}
			}

			State = 1376; Match(COMMA);
			State = 1378;
			switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				State = 1377; whiteSpace();
				}
				break;
			}
			State = 1380; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1382; Match(RAISEEVENT);
			State = 1383; whiteSpace();
			State = 1384; identifier();
			State = 1399;
			switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				State = 1386;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1385; whiteSpace();
					}
				}

				State = 1388; Match(LPAREN);
				State = 1390;
				switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
				case 1:
					{
					State = 1389; whiteSpace();
					}
					break;
				}
				State = 1396;
				switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
				case 1:
					{
					State = 1392; argsCall();
					State = 1394;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1393; whiteSpace();
						}
					}

					}
					break;
				}
				State = 1398; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizeStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRandomizeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRandomizeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizeStmtContext randomizeStmt() {
		RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_randomizeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401; Match(RANDOMIZE);
			State = 1405;
			switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				State = 1402; whiteSpace();
				State = 1403; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<RedimSubStmtContext> redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1407; Match(REDIM);
			State = 1408; whiteSpace();
			State = 1411;
			switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				State = 1409; Match(PRESERVE);
				State = 1410; whiteSpace();
				}
				break;
			}
			State = 1413; redimSubStmt();
			State = 1424;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,187,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1415;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1414; whiteSpace();
						}
					}

					State = 1417; Match(COMMA);
					State = 1419;
					switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
					case 1:
						{
						State = 1418; whiteSpace();
						}
						break;
					}
					State = 1421; redimSubStmt();
					}
					} 
				}
				State = 1426;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,187,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1427; implicitCallStmt_InStmt();
			State = 1429;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1428; whiteSpace();
				}
			}

			State = 1431; Match(LPAREN);
			State = 1433;
			switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				State = 1432; whiteSpace();
				}
				break;
			}
			State = 1435; subscripts();
			State = 1437;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1436; whiteSpace();
				}
			}

			State = 1439; Match(RPAREN);
			State = 1443;
			switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				State = 1440; whiteSpace();
				State = 1441; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447; Match(RESUME);
			State = 1453;
			switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				State = 1448; whiteSpace();
				State = 1451;
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 1449; Match(NEXT);
					}
					break;
				case ABS:
				case ANY:
				case ARRAY:
				case CBOOL:
				case CBYTE:
				case CCUR:
				case CDATE:
				case CDBL:
				case CDEC:
				case CINT:
				case CIRCLE:
				case CLNG:
				case CLNGLNG:
				case CLNGPTR:
				case CSNG:
				case CSTR:
				case CURRENCY:
				case CVAR:
				case CVERR:
				case DEBUG:
				case DOEVENTS:
				case FIX:
				case INPUTB:
				case INT:
				case LBOUND:
				case LEN:
				case LENB:
				case LONGLONG:
				case LONGPTR:
				case MIDB:
				case MIDBTYPESUFFIX:
				case MIDTYPESUFFIX:
				case PSET:
				case SCALE:
				case SGN:
				case UBOUND:
				case ADDRESSOF:
				case ALIAS:
				case AND:
				case ATTRIBUTE:
				case APPACTIVATE:
				case AS:
				case BEGIN:
				case BEEP:
				case BOOLEAN:
				case BYVAL:
				case BYREF:
				case BYTE:
				case CHDIR:
				case CHDRIVE:
				case CLASS:
				case DATABASE:
				case DATE:
				case DELETESETTING:
				case DOUBLE:
				case END_IF:
				case EQV:
				case FALSE:
				case FILECOPY:
				case IMP:
				case IN:
				case IS:
				case INTEGER:
				case KILL:
				case LOAD:
				case LONG:
				case LIB:
				case LIKE:
				case ME:
				case MID:
				case MKDIR:
				case MOD:
				case NAME:
				case NEW:
				case NOT:
				case NOTHING:
				case NULL:
				case OPTIONAL:
				case OR:
				case PARAMARRAY:
				case PRESERVE:
				case RANDOMIZE:
				case REM:
				case RMDIR:
				case SAVEPICTURE:
				case SAVESETTING:
				case SENDKEYS:
				case SETATTR:
				case SINGLE:
				case SPC:
				case STRING:
				case TAB:
				case TEXT:
				case THEN:
				case TIME:
				case TO:
				case TRUE:
				case TYPEOF:
				case UNLOAD:
				case UNTIL:
				case VARIANT:
				case VERSION:
				case WITHEVENTS:
				case XOR:
				case IDENTIFIER:
				case COLLECTION:
					{
					State = 1450; identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1455; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public RmdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRmdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRmdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmdirStmtContext rmdirStmt() {
		RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_rmdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1457; Match(RMDIR);
			State = 1458; whiteSpace();
			State = 1459; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1461; Match(RSET);
			State = 1462; whiteSpace();
			State = 1463; implicitCallStmt_InStmt();
			State = 1465;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1464; whiteSpace();
				}
			}

			State = 1467; Match(EQ);
			State = 1469;
			switch ( Interpreter.AdaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				State = 1468; whiteSpace();
				}
				break;
			}
			State = 1471; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepictureStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepictureStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSavepictureStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSavepictureStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepictureStmtContext savepictureStmt() {
		SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_savepictureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1473; Match(SAVEPICTURE);
			State = 1474; whiteSpace();
			State = 1475; valueStmt(0);
			State = 1477;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1476; whiteSpace();
				}
			}

			State = 1479; Match(COMMA);
			State = 1481;
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				State = 1480; whiteSpace();
				}
				break;
			}
			State = 1483; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveSettingStmtContext : ParserRuleContext {
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveSettingStmtContext saveSettingStmt() {
		SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_saveSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1485; Match(SAVESETTING);
			State = 1486; whiteSpace();
			State = 1487; valueStmt(0);
			State = 1489;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1488; whiteSpace();
				}
			}

			State = 1491; Match(COMMA);
			State = 1493;
			switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				State = 1492; whiteSpace();
				}
				break;
			}
			State = 1495; valueStmt(0);
			State = 1497;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1496; whiteSpace();
				}
			}

			State = 1499; Match(COMMA);
			State = 1501;
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				State = 1500; whiteSpace();
				}
				break;
			}
			State = 1503; valueStmt(0);
			State = 1505;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1504; whiteSpace();
				}
			}

			State = 1507; Match(COMMA);
			State = 1509;
			switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				State = 1508; whiteSpace();
				}
				break;
			}
			State = 1511; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513; Match(SEEK);
			State = 1514; whiteSpace();
			State = 1515; fileNumber();
			State = 1517;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1516; whiteSpace();
				}
			}

			State = 1519; Match(COMMA);
			State = 1521;
			switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				State = 1520; whiteSpace();
				}
				break;
			}
			State = 1523; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public IReadOnlyList<SC_CaseContext> sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1525; Match(SELECT);
			State = 1526; whiteSpace();
			State = 1527; Match(CASE);
			State = 1528; whiteSpace();
			State = 1529; valueStmt(0);
			State = 1530; endOfStatement();
			State = 1534;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1531; sC_Case();
				}
				}
				State = 1536;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1537; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_SelectionContext : ParserRuleContext {
		public SC_SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Selection; } }
	 
		public SC_SelectionContext() { }
		public virtual void CopyFrom(SC_SelectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondValueContext : SC_SelectionContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public CaseCondValueContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondToContext : SC_SelectionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondToContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondIsContext : SC_SelectionContext {
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public CaseCondIsContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_SelectionContext sC_Selection() {
		SC_SelectionContext _localctx = new SC_SelectionContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_sC_Selection);
		int _la;
		try {
			State = 1556;
			switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
			case 1:
				_localctx = new CaseCondIsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1539; Match(IS);
				State = 1541;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1540; whiteSpace();
					}
				}

				State = 1543; comparisonOperator();
				State = 1545;
				switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					State = 1544; whiteSpace();
					}
					break;
				}
				State = 1547; valueStmt(0);
				}
				break;

			case 2:
				_localctx = new CaseCondToContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1549; valueStmt(0);
				State = 1550; whiteSpace();
				State = 1551; Match(TO);
				State = 1552; whiteSpace();
				State = 1553; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1555; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_sC_Case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1558; Match(CASE);
			State = 1559; whiteSpace();
			State = 1560; sC_Cond();
			State = 1561; endOfStatement();
			State = 1563;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
				{
				State = 1562; block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondSelectionContext : SC_CondContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<SC_SelectionContext> sC_Selection() {
			return GetRuleContexts<SC_SelectionContext>();
		}
		public SC_SelectionContext sC_Selection(int i) {
			return GetRuleContext<SC_SelectionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CaseCondSelectionContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondSelection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1580;
			switch (_input.La(1)) {
			case ELSE:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1565; Match(ELSE);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case EXCLAMATIONPOINT:
			case DOT:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case AS:
			case BEGIN:
			case BEEP:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case DATABASE:
			case DATE:
			case DELETESETTING:
			case DOUBLE:
			case EMPTY:
			case END_IF:
			case EQV:
			case FALSE:
			case FILECOPY:
			case IMP:
			case IN:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LONG:
			case LIB:
			case LIKE:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OPTIONAL:
			case OR:
			case PARAMARRAY:
			case PRESERVE:
			case RANDOMIZE:
			case REM:
			case RMDIR:
			case SAVEPICTURE:
			case SAVESETTING:
			case SENDKEYS:
			case SETATTR:
			case SINGLE:
			case SPC:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOAD:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WITHEVENTS:
			case XOR:
			case LPAREN:
			case MINUS:
			case STRINGLITERAL:
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
			case DATELITERAL:
			case WS:
			case IDENTIFIER:
			case LINE_CONTINUATION:
			case COLLECTION:
				_localctx = new CaseCondSelectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1566; sC_Selection();
				State = 1577;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,213,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1568;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1567; whiteSpace();
							}
						}

						State = 1570; Match(COMMA);
						State = 1572;
						switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
						case 1:
							{
							State = 1571; whiteSpace();
							}
							break;
						}
						State = 1574; sC_Selection();
						}
						} 
					}
					State = 1579;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,213,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendkeysStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendkeysStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSendkeysStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSendkeysStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendkeysStmtContext sendkeysStmt() {
		SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_sendkeysStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1582; Match(SENDKEYS);
			State = 1583; whiteSpace();
			State = 1584; valueStmt(0);
			State = 1593;
			switch ( Interpreter.AdaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				State = 1586;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1585; whiteSpace();
					}
				}

				State = 1588; Match(COMMA);
				State = 1590;
				switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
				case 1:
					{
					State = 1589; whiteSpace();
					}
					break;
				}
				State = 1592; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetattrStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SetattrStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setattrStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSetattrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSetattrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetattrStmtContext setattrStmt() {
		SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_setattrStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1595; Match(SETATTR);
			State = 1596; whiteSpace();
			State = 1597; valueStmt(0);
			State = 1599;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1598; whiteSpace();
				}
			}

			State = 1601; Match(COMMA);
			State = 1603;
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				State = 1602; whiteSpace();
				}
				break;
			}
			State = 1605; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1607; Match(SET);
			State = 1608; whiteSpace();
			State = 1609; implicitCallStmt_InStmt();
			State = 1611;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1610; whiteSpace();
				}
			}

			State = 1613; Match(EQ);
			State = 1615;
			switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				State = 1614; whiteSpace();
				}
				break;
			}
			State = 1617; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1619; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 1621; visibility();
				State = 1622; whiteSpace();
				}
			}

			State = 1628;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1626; Match(STATIC);
				State = 1627; whiteSpace();
				}
			}

			State = 1630; Match(SUB);
			State = 1632;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1631; whiteSpace();
				}
			}

			State = 1634; identifier();
			State = 1639;
			switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				State = 1636;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1635; whiteSpace();
					}
				}

				State = 1638; argList();
				}
				break;
			}
			State = 1641; endOfStatement();
			State = 1643;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
				{
				State = 1642; block();
				}
			}

			State = 1645; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public TimeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTimeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTimeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStmtContext timeStmt() {
		TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_timeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1647; Match(TIME);
			State = 1649;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1648; whiteSpace();
				}
			}

			State = 1651; Match(EQ);
			State = 1653;
			switch ( Interpreter.AdaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				State = 1652; whiteSpace();
				}
				break;
			}
			State = 1655; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1660;
			_la = _input.La(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) {
				{
				State = 1657; visibility();
				State = 1658; whiteSpace();
				}
			}

			State = 1662; Match(TYPE);
			State = 1663; whiteSpace();
			State = 1664; identifier();
			State = 1665; endOfStatement();
			State = 1669;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CHDIR - 66)) | (1L << (CHDRIVE - 66)) | (1L << (CLASS - 66)) | (1L << (DATABASE - 66)) | (1L << (DATE - 66)) | (1L << (DELETESETTING - 66)) | (1L << (DOUBLE - 66)) | (1L << (END_IF - 66)) | (1L << (EQV - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (IMP - 66)) | (1L << (IN - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (KILL - 130)) | (1L << (LOAD - 130)) | (1L << (LONG - 130)) | (1L << (LIB - 130)) | (1L << (LIKE - 130)) | (1L << (ME - 130)) | (1L << (MID - 130)) | (1L << (MKDIR - 130)) | (1L << (MOD - 130)) | (1L << (NAME - 130)) | (1L << (NEW - 130)) | (1L << (NOT - 130)) | (1L << (NOTHING - 130)) | (1L << (NULL - 130)) | (1L << (OPTIONAL - 130)) | (1L << (OR - 130)) | (1L << (PARAMARRAY - 130)) | (1L << (PRESERVE - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (REM - 130)) | (1L << (RMDIR - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SETATTR - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (SINGLE - 194)) | (1L << (SPC - 194)) | (1L << (STRING - 194)) | (1L << (TAB - 194)) | (1L << (TEXT - 194)) | (1L << (THEN - 194)) | (1L << (TIME - 194)) | (1L << (TO - 194)) | (1L << (TRUE - 194)) | (1L << (TYPEOF - 194)) | (1L << (UNLOAD - 194)) | (1L << (UNTIL - 194)) | (1L << (VARIANT - 194)) | (1L << (VERSION - 194)) | (1L << (WITHEVENTS - 194)) | (1L << (XOR - 194)) | (1L << (IDENTIFIER - 194)))) != 0) || _la==COLLECTION) {
				{
				{
				State = 1666; typeStmt_Element();
				}
				}
				State = 1671;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1672; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1674; identifier();
			State = 1689;
			switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				State = 1676;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1675; whiteSpace();
					}
				}

				State = 1678; Match(LPAREN);
				State = 1683;
				switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
				case 1:
					{
					State = 1680;
					switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
					case 1:
						{
						State = 1679; whiteSpace();
						}
						break;
					}
					State = 1682; subscripts();
					}
					break;
				}
				State = 1686;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1685; whiteSpace();
					}
				}

				State = 1688; Match(RPAREN);
				}
				break;
			}
			State = 1694;
			switch ( Interpreter.AdaptivePredict(_input,237,_ctx) ) {
			case 1:
				{
				State = 1691; whiteSpace();
				State = 1692; asTypeClause();
				}
				break;
			}
			State = 1696; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnloadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public UnloadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unloadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnloadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnloadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnloadStmtContext unloadStmt() {
		UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_unloadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698; Match(UNLOAD);
			State = 1699; whiteSpace();
			State = 1700; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1702; Match(UNLOCK);
			State = 1703; whiteSpace();
			State = 1704; fileNumber();
			State = 1720;
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				State = 1706;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1705; whiteSpace();
					}
				}

				State = 1708; Match(COMMA);
				State = 1710;
				switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
				case 1:
					{
					State = 1709; whiteSpace();
					}
					break;
				}
				State = 1712; valueStmt(0);
				State = 1718;
				switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
				case 1:
					{
					State = 1713; whiteSpace();
					State = 1714; Match(TO);
					State = 1715; whiteSpace();
					State = 1716; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfIsExpressionContext typeOfIsExpression() {
			return GetRuleContext<TypeOfIsExpressionContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsRelationalContext : ValueStmtContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsRelationalContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsRelational(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsRelational(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIntDivContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INTDIV() { return GetToken(VBAParser.INTDIV, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsIntDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsIntDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsIntDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIntDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 186;
		EnterRecursionRule(_localctx, 186, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1767;
			switch ( Interpreter.AdaptivePredict(_input,250,_ctx) ) {
			case 1:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1723; Match(NEW);
				State = 1725;
				switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
				case 1:
					{
					State = 1724; whiteSpace();
					}
					break;
				}
				State = 1727; valueStmt(19);
				}
				break;

			case 2:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1728; Match(ADDRESSOF);
				State = 1730;
				switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
				case 1:
					{
					State = 1729; whiteSpace();
					}
					break;
				}
				State = 1732; valueStmt(16);
				}
				break;

			case 3:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1733; implicitCallStmt_InStmt();
				State = 1735;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1734; whiteSpace();
					}
				}

				State = 1737; Match(ASSIGN);
				State = 1739;
				switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					State = 1738; whiteSpace();
					}
					break;
				}
				State = 1741; valueStmt(15);
				}
				break;

			case 4:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1743; Match(MINUS);
				State = 1745;
				switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					State = 1744; whiteSpace();
					}
					break;
				}
				State = 1747; valueStmt(13);
				}
				break;

			case 5:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1748; Match(NOT);
				State = 1750;
				switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					State = 1749; whiteSpace();
					}
					break;
				}
				State = 1752; valueStmt(6);
				}
				break;

			case 6:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1753; literal();
				}
				break;

			case 7:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1754; implicitCallStmt_InStmt();
				}
				break;

			case 8:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1755; Match(LPAREN);
				State = 1757;
				switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					State = 1756; whiteSpace();
					}
					break;
				}
				State = 1759; valueStmt(0);
				State = 1761;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1760; whiteSpace();
					}
				}

				State = 1763; Match(RPAREN);
				}
				break;

			case 9:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1765; typeOfIsExpression();
				}
				break;

			case 10:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1766; midStmt();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1879;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,276,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1877;
					switch ( Interpreter.AdaptivePredict(_input,275,_ctx) ) {
					case 1:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1769;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 1771;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1770; whiteSpace();
							}
						}

						State = 1773; Match(POW);
						State = 1775;
						switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
						case 1:
							{
							State = 1774; whiteSpace();
							}
							break;
						}
						State = 1777; valueStmt(15);
						}
						break;

					case 2:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1778;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 1780;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1779; whiteSpace();
							}
						}

						State = 1782;
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1784;
						switch ( Interpreter.AdaptivePredict(_input,254,_ctx) ) {
						case 1:
							{
							State = 1783; whiteSpace();
							}
							break;
						}
						State = 1786; valueStmt(13);
						}
						break;

					case 3:
						{
						_localctx = new VsIntDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1787;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 1789;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1788; whiteSpace();
							}
						}

						State = 1791; Match(INTDIV);
						State = 1793;
						switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
						case 1:
							{
							State = 1792; whiteSpace();
							}
							break;
						}
						State = 1795; valueStmt(12);
						}
						break;

					case 4:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1796;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 1798;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1797; whiteSpace();
							}
						}

						State = 1800; Match(MOD);
						State = 1802;
						switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
						case 1:
							{
							State = 1801; whiteSpace();
							}
							break;
						}
						State = 1804; valueStmt(11);
						}
						break;

					case 5:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1805;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 1807;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1806; whiteSpace();
							}
						}

						State = 1809;
						_la = _input.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1811;
						switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
						case 1:
							{
							State = 1810; whiteSpace();
							}
							break;
						}
						State = 1813; valueStmt(10);
						}
						break;

					case 6:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1814;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 1816;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1815; whiteSpace();
							}
						}

						State = 1818; Match(AMPERSAND);
						State = 1820;
						switch ( Interpreter.AdaptivePredict(_input,262,_ctx) ) {
						case 1:
							{
							State = 1819; whiteSpace();
							}
							break;
						}
						State = 1822; valueStmt(9);
						}
						break;

					case 7:
						{
						_localctx = new VsRelationalContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1823;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 1825;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1824; whiteSpace();
							}
						}

						State = 1827;
						_la = _input.La(1);
						if ( !(_la==IS || _la==LIKE || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (EQ - 224)) | (1L << (GEQ - 224)) | (1L << (GT - 224)) | (1L << (LEQ - 224)) | (1L << (LT - 224)) | (1L << (NEQ - 224)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1829;
						switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
						case 1:
							{
							State = 1828; whiteSpace();
							}
							break;
						}
						State = 1831; valueStmt(8);
						}
						break;

					case 8:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1832;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 1834;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1833; whiteSpace();
							}
						}

						State = 1836; Match(AND);
						State = 1838;
						switch ( Interpreter.AdaptivePredict(_input,266,_ctx) ) {
						case 1:
							{
							State = 1837; whiteSpace();
							}
							break;
						}
						State = 1840; valueStmt(6);
						}
						break;

					case 9:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1841;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 1843;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1842; whiteSpace();
							}
						}

						State = 1845; Match(OR);
						State = 1847;
						switch ( Interpreter.AdaptivePredict(_input,268,_ctx) ) {
						case 1:
							{
							State = 1846; whiteSpace();
							}
							break;
						}
						State = 1849; valueStmt(5);
						}
						break;

					case 10:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1850;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 1852;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1851; whiteSpace();
							}
						}

						State = 1854; Match(XOR);
						State = 1856;
						switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
						case 1:
							{
							State = 1855; whiteSpace();
							}
							break;
						}
						State = 1858; valueStmt(4);
						}
						break;

					case 11:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1859;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 1861;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1860; whiteSpace();
							}
						}

						State = 1863; Match(EQV);
						State = 1865;
						switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
						case 1:
							{
							State = 1864; whiteSpace();
							}
							break;
						}
						State = 1867; valueStmt(3);
						}
						break;

					case 12:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1868;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 1870;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1869; whiteSpace();
							}
						}

						State = 1872; Match(IMP);
						State = 1874;
						switch ( Interpreter.AdaptivePredict(_input,274,_ctx) ) {
						case 1:
							{
							State = 1873; whiteSpace();
							}
							break;
						}
						State = 1876; valueStmt(2);
						}
						break;
					}
					} 
				}
				State = 1881;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,276,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeOfIsExpressionContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeOfIsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfIsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeOfIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeOfIsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfIsExpressionContext typeOfIsExpression() {
		TypeOfIsExpressionContext _localctx = new TypeOfIsExpressionContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_typeOfIsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1882; Match(TYPEOF);
			State = 1883; whiteSpace();
			State = 1884; valueStmt(0);
			State = 1890;
			switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
			case 1:
				{
				State = 1885; whiteSpace();
				State = 1886; Match(IS);
				State = 1887; whiteSpace();
				State = 1888; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1895;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 1892; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 1893; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 1894; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1897; whiteSpace();
			State = 1900;
			switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				State = 1898; Match(WITHEVENTS);
				State = 1899; whiteSpace();
				}
				break;
			}
			State = 1902; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1904; variableSubStmt();
			State = 1915;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,282,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1906;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1905; whiteSpace();
						}
					}

					State = 1908; Match(COMMA);
					State = 1910;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1909; whiteSpace();
						}
					}

					State = 1912; variableSubStmt();
					}
					} 
				}
				State = 1917;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,282,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1918; identifier();
			State = 1936;
			switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				State = 1920;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1919; whiteSpace();
					}
				}

				State = 1922; Match(LPAREN);
				State = 1924;
				switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					State = 1923; whiteSpace();
					}
					break;
				}
				State = 1930;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CHDIR - 66)) | (1L << (CHDRIVE - 66)) | (1L << (CLASS - 66)) | (1L << (DATABASE - 66)) | (1L << (DATE - 66)) | (1L << (DELETESETTING - 66)) | (1L << (DOUBLE - 66)) | (1L << (EMPTY - 66)) | (1L << (END_IF - 66)) | (1L << (EQV - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (IMP - 66)) | (1L << (IN - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (KILL - 130)) | (1L << (LOAD - 130)) | (1L << (LONG - 130)) | (1L << (LIB - 130)) | (1L << (LIKE - 130)) | (1L << (ME - 130)) | (1L << (MID - 130)) | (1L << (MKDIR - 130)) | (1L << (MOD - 130)) | (1L << (NAME - 130)) | (1L << (NEW - 130)) | (1L << (NOT - 130)) | (1L << (NOTHING - 130)) | (1L << (NULL - 130)) | (1L << (OPTIONAL - 130)) | (1L << (OR - 130)) | (1L << (PARAMARRAY - 130)) | (1L << (PRESERVE - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (REM - 130)) | (1L << (RMDIR - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SETATTR - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (SINGLE - 194)) | (1L << (SPC - 194)) | (1L << (STRING - 194)) | (1L << (TAB - 194)) | (1L << (TEXT - 194)) | (1L << (THEN - 194)) | (1L << (TIME - 194)) | (1L << (TO - 194)) | (1L << (TRUE - 194)) | (1L << (TYPEOF - 194)) | (1L << (UNLOAD - 194)) | (1L << (UNTIL - 194)) | (1L << (VARIANT - 194)) | (1L << (VERSION - 194)) | (1L << (WITHEVENTS - 194)) | (1L << (XOR - 194)) | (1L << (LPAREN - 194)) | (1L << (MINUS - 194)) | (1L << (STRINGLITERAL - 194)) | (1L << (OCTLITERAL - 194)) | (1L << (HEXLITERAL - 194)) | (1L << (FLOATLITERAL - 194)) | (1L << (INTEGERLITERAL - 194)) | (1L << (DATELITERAL - 194)) | (1L << (WS - 194)) | (1L << (IDENTIFIER - 194)) | (1L << (LINE_CONTINUATION - 194)))) != 0) || _la==COLLECTION) {
					{
					State = 1926; subscripts();
					State = 1928;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1927; whiteSpace();
						}
					}

					}
				}

				State = 1932; Match(RPAREN);
				State = 1934;
				switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					State = 1933; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 1939;
			switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
			case 1:
				{
				State = 1938; typeHint();
				}
				break;
			}
			State = 1944;
			switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				State = 1941; whiteSpace();
				State = 1942; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_whileWendStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1946; Match(WHILE);
			State = 1947; whiteSpace();
			State = 1948; valueStmt(0);
			State = 1949; endOfStatement();
			State = 1951;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
				{
				State = 1950; block();
				}
			}

			State = 1953; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1955; Match(WIDTH);
			State = 1956; whiteSpace();
			State = 1957; fileNumber();
			State = 1959;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1958; whiteSpace();
				}
			}

			State = 1961; Match(COMMA);
			State = 1963;
			switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				State = 1962; whiteSpace();
				}
				break;
			}
			State = 1965; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public WithStmtExpressionContext withStmtExpression() {
			return GetRuleContext<WithStmtExpressionContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_withStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1967; Match(WITH);
			State = 1968; whiteSpace();
			State = 1969; withStmtExpression();
			State = 1970; endOfStatement();
			State = 1972;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CHDIR - 64)) | (1L << (CHDRIVE - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DELETESETTING - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_IF - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (IS - 128)) | (1L << (INTEGER - 128)) | (1L << (KILL - 128)) | (1L << (LOAD - 128)) | (1L << (LOCK - 128)) | (1L << (LONG - 128)) | (1L << (LET - 128)) | (1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MKDIR - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (SETATTR - 192)) | (1L << (SINGLE - 192)) | (1L << (SPC - 192)) | (1L << (STATIC - 192)) | (1L << (STOP - 192)) | (1L << (STRING - 192)) | (1L << (TAB - 192)) | (1L << (TEXT - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TO - 192)) | (1L << (TRUE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOAD - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)))) != 0) || _la==LINE_CONTINUATION || _la==COLLECTION) {
				{
				State = 1971; block();
				}
			}

			State = 1974; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtExpressionContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WithStmtExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmtExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmtExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmtExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmtExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtExpressionContext withStmtExpression() {
		WithStmtExpressionContext _localctx = new WithStmtExpressionContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_withStmtExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1976; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1978; Match(WRITE);
			State = 1979; whiteSpace();
			State = 1980; fileNumber();
			State = 1982;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1981; whiteSpace();
				}
			}

			State = 1984; Match(COMMA);
			State = 1989;
			switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				State = 1986;
				switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					State = 1985; whiteSpace();
					}
					break;
				}
				State = 1988; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public FileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberContext fileNumber() {
		FileNumberContext _localctx = new FileNumberContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_fileNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1992;
			_la = _input.La(1);
			if (_la==HASH) {
				{
				State = 1991; Match(HASH);
				}
			}

			State = 1994; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ExplicitCallStmtExpressionContext explicitCallStmtExpression() {
			return GetRuleContext<ExplicitCallStmtExpressionContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_explicitCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1996; Match(CALL);
			State = 1997; whiteSpace();
			State = 1998; explicitCallStmtExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtExpressionContext : ParserRuleContext {
		public ExplicitCallStmtExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmtExpression; } }
	 
		public ExplicitCallStmtExpressionContext() { }
		public virtual void CopyFrom(ExplicitCallStmtExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ECS_MemberCallContext : ExplicitCallStmtExpressionContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_MemberCallContext(ExplicitCallStmtExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterECS_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitECS_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ECS_ProcedureCallContext : ExplicitCallStmtExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_ProcedureCallContext(ExplicitCallStmtExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtExpressionContext explicitCallStmtExpression() {
		ExplicitCallStmtExpressionContext _localctx = new ExplicitCallStmtExpressionContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_explicitCallStmtExpression);
		int _la;
		try {
			int _alt;
			State = 2066;
			switch ( Interpreter.AdaptivePredict(_input,314,_ctx) ) {
			case 1:
				_localctx = new ECS_MemberCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2001;
				switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
				case 1:
					{
					State = 2000; implicitCallStmt_InStmt();
					}
					break;
				}
				State = 2003; Match(DOT);
				State = 2004; identifier();
				State = 2006;
				switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
				case 1:
					{
					State = 2005; typeHint();
					}
					break;
				}
				State = 2021;
				switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
				case 1:
					{
					State = 2009;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2008; whiteSpace();
						}
					}

					State = 2011; Match(LPAREN);
					State = 2013;
					switch ( Interpreter.AdaptivePredict(_input,302,_ctx) ) {
					case 1:
						{
						State = 2012; whiteSpace();
						}
						break;
					}
					State = 2015; argsCall();
					State = 2017;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2016; whiteSpace();
						}
					}

					State = 2019; Match(RPAREN);
					}
					break;
				}
				State = 2032;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,306,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2024;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2023; whiteSpace();
							}
						}

						State = 2026; Match(LPAREN);
						State = 2027; subscripts();
						State = 2028; Match(RPAREN);
						}
						} 
					}
					State = 2034;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,306,_ctx);
				}
				}
				break;

			case 2:
				_localctx = new ECS_ProcedureCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2035; identifier();
				State = 2037;
				switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					State = 2036; typeHint();
					}
					break;
				}
				State = 2052;
				switch ( Interpreter.AdaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					State = 2040;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2039; whiteSpace();
						}
					}

					State = 2042; Match(LPAREN);
					State = 2044;
					switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
					case 1:
						{
						State = 2043; whiteSpace();
						}
						break;
					}
					State = 2046; argsCall();
					State = 2048;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2047; whiteSpace();
						}
					}

					State = 2050; Match(RPAREN);
					}
					break;
				}
				State = 2063;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,313,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2055;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2054; whiteSpace();
							}
						}

						State = 2057; Match(LPAREN);
						State = 2058; subscripts();
						State = 2059; Match(RPAREN);
						}
						} 
					}
					State = 2065;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,313,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_implicitCallStmt_InBlock);
		try {
			State = 2070;
			switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2068; iCS_B_MemberProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2069; iCS_B_ProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_iCS_B_MemberProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2073;
			switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
			case 1:
				{
				State = 2072; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2076;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2075; whiteSpace();
				}
			}

			State = 2078; Match(DOT);
			State = 2080;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2079; whiteSpace();
				}
			}

			State = 2082; identifier();
			State = 2084;
			switch ( Interpreter.AdaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				State = 2083; typeHint();
				}
				break;
			}
			State = 2089;
			switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
			case 1:
				{
				State = 2086; whiteSpace();
				State = 2087; argsCall();
				}
				break;
			}
			State = 2095;
			switch ( Interpreter.AdaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				State = 2092;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2091; whiteSpace();
					}
				}

				State = 2094; dictionaryCallStmt();
				}
				break;
			}
			State = 2106;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,324,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2098;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2097; whiteSpace();
						}
					}

					State = 2100; Match(LPAREN);
					State = 2101; subscripts();
					State = 2102; Match(RPAREN);
					}
					} 
				}
				State = 2108;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,324,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_iCS_B_ProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2109; identifier();
			State = 2113;
			switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				State = 2110; whiteSpace();
				State = 2111; argsCall();
				}
				break;
			}
			State = 2124;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,327,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2116;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2115; whiteSpace();
						}
					}

					State = 2118; Match(LPAREN);
					State = 2119; subscripts();
					State = 2120; Match(RPAREN);
					}
					} 
				}
				State = 2126;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,327,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_implicitCallStmt_InStmt);
		try {
			State = 2131;
			switch ( Interpreter.AdaptivePredict(_input,328,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2127; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2128; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2129; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2130; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_iCS_S_VariableOrProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2133; identifier();
			State = 2135;
			switch ( Interpreter.AdaptivePredict(_input,329,_ctx) ) {
			case 1:
				{
				State = 2134; typeHint();
				}
				break;
			}
			State = 2141;
			switch ( Interpreter.AdaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				State = 2138;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2137; whiteSpace();
					}
				}

				State = 2140; dictionaryCallStmt();
				}
				break;
			}
			State = 2152;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,333,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2144;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2143; whiteSpace();
						}
					}

					State = 2146; Match(LPAREN);
					State = 2147; subscripts();
					State = 2148; Match(RPAREN);
					}
					} 
				}
				State = 2154;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,333,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2157;
			switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
			case 1:
				{
				State = 2155; identifier();
				}
				break;

			case 2:
				{
				State = 2156; baseType();
				}
				break;
			}
			State = 2160;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2159; typeHint();
				}
			}

			State = 2163;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2162; whiteSpace();
				}
			}

			State = 2165; Match(LPAREN);
			State = 2167;
			switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
			case 1:
				{
				State = 2166; whiteSpace();
				}
				break;
			}
			State = 2173;
			switch ( Interpreter.AdaptivePredict(_input,339,_ctx) ) {
			case 1:
				{
				State = 2169; argsCall();
				State = 2171;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2170; whiteSpace();
					}
				}

				}
				break;
			}
			State = 2175; Match(RPAREN);
			State = 2180;
			switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				State = 2177;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2176; whiteSpace();
					}
				}

				State = 2179; dictionaryCallStmt();
				}
				break;
			}
			State = 2191;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,343,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2183;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2182; whiteSpace();
						}
					}

					State = 2185; Match(LPAREN);
					State = 2186; subscripts();
					State = 2187; Match(RPAREN);
					}
					} 
				}
				State = 2193;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,343,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallUnrestrictedContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_VariableOrProcedureCallUnrestrictedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCallUnrestricted; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCallUnrestricted(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCallUnrestricted(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCallUnrestricted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallUnrestrictedContext iCS_S_VariableOrProcedureCallUnrestricted() {
		ICS_S_VariableOrProcedureCallUnrestrictedContext _localctx = new ICS_S_VariableOrProcedureCallUnrestrictedContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_iCS_S_VariableOrProcedureCallUnrestricted);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2194; unrestrictedIdentifier();
			State = 2196;
			switch ( Interpreter.AdaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				State = 2195; typeHint();
				}
				break;
			}
			State = 2202;
			switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				State = 2199;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2198; whiteSpace();
					}
				}

				State = 2201; dictionaryCallStmt();
				}
				break;
			}
			State = 2213;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,348,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2205;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2204; whiteSpace();
						}
					}

					State = 2207; Match(LPAREN);
					State = 2208; subscripts();
					State = 2209; Match(RPAREN);
					}
					} 
				}
				State = 2215;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,348,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallUnrestrictedContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_ProcedureOrArrayCallUnrestrictedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCallUnrestricted; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCallUnrestricted(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCallUnrestricted(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCallUnrestricted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallUnrestrictedContext iCS_S_ProcedureOrArrayCallUnrestricted() {
		ICS_S_ProcedureOrArrayCallUnrestrictedContext _localctx = new ICS_S_ProcedureOrArrayCallUnrestrictedContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_iCS_S_ProcedureOrArrayCallUnrestricted);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2218;
			switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				State = 2216; unrestrictedIdentifier();
				}
				break;

			case 2:
				{
				State = 2217; baseType();
				}
				break;
			}
			State = 2221;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2220; typeHint();
				}
			}

			State = 2224;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2223; whiteSpace();
				}
			}

			State = 2226; Match(LPAREN);
			State = 2228;
			switch ( Interpreter.AdaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				State = 2227; whiteSpace();
				}
				break;
			}
			State = 2234;
			switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
			case 1:
				{
				State = 2230; argsCall();
				State = 2232;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2231; whiteSpace();
					}
				}

				}
				break;
			}
			State = 2236; Match(RPAREN);
			State = 2241;
			switch ( Interpreter.AdaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				State = 2238;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2237; whiteSpace();
					}
				}

				State = 2240; dictionaryCallStmt();
				}
				break;
			}
			State = 2252;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,358,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2244;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2243; whiteSpace();
						}
					}

					State = 2246; Match(LPAREN);
					State = 2247; subscripts();
					State = 2248; Match(RPAREN);
					}
					} 
				}
				State = 2254;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,358,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_iCS_S_MembersCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2257;
			switch ( Interpreter.AdaptivePredict(_input,359,_ctx) ) {
			case 1:
				{
				State = 2255; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2256; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2263;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2259; iCS_S_MemberCall();
					State = 2261;
					switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
					case 1:
						{
						State = 2260; whiteSpace();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2265;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,361,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2271;
			switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				State = 2268;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2267; whiteSpace();
					}
				}

				State = 2270; dictionaryCallStmt();
				}
				break;
			}
			State = 2282;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,365,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2274;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2273; whiteSpace();
						}
					}

					State = 2276; Match(LPAREN);
					State = 2277; subscripts();
					State = 2278; Match(RPAREN);
					}
					} 
				}
				State = 2284;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,365,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public ICS_S_ProcedureOrArrayCallUnrestrictedContext iCS_S_ProcedureOrArrayCallUnrestricted() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallUnrestrictedContext>(0);
		}
		public ICS_S_VariableOrProcedureCallUnrestrictedContext iCS_S_VariableOrProcedureCallUnrestricted() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallUnrestrictedContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_iCS_S_MemberCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2285;
			_la = _input.La(1);
			if ( !(_la==EXCLAMATIONPOINT || _la==DOT) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 2287;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2286; whiteSpace();
				}
			}

			State = 2291;
			switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				State = 2289; iCS_S_VariableOrProcedureCallUnrestricted();
				}
				break;

			case 2:
				{
				State = 2290; iCS_S_ProcedureOrArrayCallUnrestricted();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_iCS_S_DictionaryCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2294;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2293; whiteSpace();
				}
			}

			State = 2296; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> SEMICOLON() { return GetTokens(VBAParser.SEMICOLON); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ArgCallContext> argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VBAParser.SEMICOLON, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2310;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,372,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2299;
					switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
					case 1:
						{
						State = 2298; argCall();
						}
						break;
					}
					State = 2302;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2301; whiteSpace();
						}
					}

					State = 2304;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2306;
					switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
					case 1:
						{
						State = 2305; whiteSpace();
						}
						break;
					}
					}
					} 
				}
				State = 2312;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,372,_ctx);
			}
			State = 2313; argCall();
			State = 2326;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,376,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2315;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2314; whiteSpace();
						}
					}

					State = 2317;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2319;
					switch ( Interpreter.AdaptivePredict(_input,374,_ctx) ) {
					case 1:
						{
						State = 2318; whiteSpace();
						}
						break;
					}
					State = 2322;
					switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
					case 1:
						{
						State = 2321; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2328;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,376,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2330;
			switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				State = 2329; Match(LPAREN);
				}
				break;
			}
			State = 2334;
			switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				State = 2332;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2333; whiteSpace();
				}
				break;
			}
			State = 2337;
			_la = _input.La(1);
			if (_la==RPAREN) {
				{
				State = 2336; Match(RPAREN);
				}
			}

			State = 2339; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_dictionaryCallStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2341; Match(EXCLAMATIONPOINT);
			State = 2343;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2342; whiteSpace();
				}
			}

			State = 2345; unrestrictedIdentifier();
			State = 2347;
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 2346; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2349; Match(LPAREN);
			State = 2367;
			switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
			case 1:
				{
				State = 2351;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2350; whiteSpace();
					}
				}

				State = 2353; arg();
				State = 2364;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,385,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2355;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2354; whiteSpace();
							}
						}

						State = 2357; Match(COMMA);
						State = 2359;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2358; whiteSpace();
							}
						}

						State = 2361; arg();
						}
						} 
					}
					State = 2366;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,385,_ctx);
				}
				}
				break;
			}
			State = 2370;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2369; whiteSpace();
				}
			}

			State = 2372; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2376;
			switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				State = 2374; Match(OPTIONAL);
				State = 2375; whiteSpace();
				}
				break;
			}
			State = 2380;
			switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				State = 2378;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2379; whiteSpace();
				}
				break;
			}
			State = 2384;
			switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				State = 2382; Match(PARAMARRAY);
				State = 2383; whiteSpace();
				}
				break;
			}
			State = 2386; unrestrictedIdentifier();
			State = 2388;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2387; typeHint();
				}
			}

			State = 2398;
			switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				State = 2391;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2390; whiteSpace();
					}
				}

				State = 2393; Match(LPAREN);
				State = 2395;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2394; whiteSpace();
					}
				}

				State = 2397; Match(RPAREN);
				}
				break;
			}
			State = 2404;
			switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				State = 2401;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2400; whiteSpace();
					}
				}

				State = 2403; asTypeClause();
				}
				break;
			}
			State = 2410;
			switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				State = 2407;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2406; whiteSpace();
					}
				}

				State = 2409; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_argDefaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2412; Match(EQ);
			State = 2414;
			switch ( Interpreter.AdaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				State = 2413; whiteSpace();
				}
				break;
			}
			State = 2416; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2418; subscript();
			State = 2429;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,402,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2420;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2419; whiteSpace();
						}
					}

					State = 2422; Match(COMMA);
					State = 2424;
					switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
					case 1:
						{
						State = 2423; whiteSpace();
						}
						break;
					}
					State = 2426; subscript();
					}
					} 
				}
				State = 2431;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,402,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2437;
			switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				State = 2432; valueStmt(0);
				State = 2433; whiteSpace();
				State = 2434; Match(TO);
				State = 2435; whiteSpace();
				}
				break;
			}
			State = 2439; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnrestrictedIdentifierContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementKeywordContext statementKeyword() {
			return GetRuleContext<StatementKeywordContext>(0);
		}
		public UnrestrictedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unrestrictedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnrestrictedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnrestrictedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnrestrictedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnrestrictedIdentifierContext unrestrictedIdentifier() {
		UnrestrictedIdentifierContext _localctx = new UnrestrictedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_unrestrictedIdentifier);
		try {
			State = 2443;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case AS:
			case BEGIN:
			case BEEP:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case DATABASE:
			case DATE:
			case DELETESETTING:
			case DOUBLE:
			case END_IF:
			case EQV:
			case FALSE:
			case FILECOPY:
			case IMP:
			case IN:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LONG:
			case LIB:
			case LIKE:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OPTIONAL:
			case OR:
			case PARAMARRAY:
			case PRESERVE:
			case RANDOMIZE:
			case REM:
			case RMDIR:
			case SAVEPICTURE:
			case SAVESETTING:
			case SENDKEYS:
			case SETATTR:
			case SINGLE:
			case SPC:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOAD:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WITHEVENTS:
			case XOR:
			case IDENTIFIER:
			case COLLECTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2441; identifier();
				}
				break;
			case EXIT:
			case OPTION:
			case ACCESS:
			case APPEND:
			case BINARY:
			case CALL:
			case CASE:
			case CLOSE:
			case CONST:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case ELSE:
			case ELSEIF:
			case END_SELECT:
			case END_WITH:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMPLEMENTS:
			case INPUT:
			case LOCK:
			case LOOP:
			case LET:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case LSET:
			case NEXT:
			case ON:
			case ON_ERROR:
			case OPEN:
			case OUTPUT:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RAISEEVENT:
			case READ:
			case READ_WRITE:
			case REDIM:
			case RESET:
			case RESUME:
			case RETURN:
			case RSET:
			case SEEK:
			case SELECT:
			case SET:
			case SHARED:
			case STATIC:
			case STEP:
			case STOP:
			case SUB:
			case TYPE:
			case UNLOCK:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WRITE:
			case ENDIF:
			case RESUME_NEXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2442; statementKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_identifier);
		try {
			State = 2447;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2445; Match(IDENTIFIER);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case AS:
			case BEGIN:
			case BEEP:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case DATABASE:
			case DATE:
			case DELETESETTING:
			case DOUBLE:
			case END_IF:
			case EQV:
			case FALSE:
			case FILECOPY:
			case IMP:
			case IN:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LONG:
			case LIB:
			case LIKE:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OPTIONAL:
			case OR:
			case PARAMARRAY:
			case PRESERVE:
			case RANDOMIZE:
			case REM:
			case RMDIR:
			case SAVEPICTURE:
			case SAVESETTING:
			case SENDKEYS:
			case SETATTR:
			case SINGLE:
			case SPC:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOAD:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WITHEVENTS:
			case XOR:
			case COLLECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2446; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_asTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2449; Match(AS);
			State = 2451;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2450; whiteSpace();
				}
			}

			State = 2455;
			switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				State = 2453; Match(NEW);
				State = 2454; whiteSpace();
				}
				break;
			}
			State = 2457; type();
			State = 2462;
			switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				State = 2459;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2458; whiteSpace();
					}
				}

				State = 2461; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2464;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CURRENCY) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << BOOLEAN) | (1L << BYTE))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (DATE - 72)) | (1L << (DOUBLE - 72)) | (1L << (INTEGER - 72)) | (1L << (LONG - 72)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (SINGLE - 194)) | (1L << (STRING - 194)) | (1L << (VARIANT - 194)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2466;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (EQ - 224)) | (1L << (GEQ - 224)) | (1L << (GT - 224)) | (1L << (LEQ - 224)) | (1L << (LT - 224)) | (1L << (NEQ - 224)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> DOT() { return GetTokens(VBAParser.DOT); }
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IReadOnlyList<ITerminalNode> EXCLAMATIONPOINT() { return GetTokens(VBAParser.EXCLAMATIONPOINT); }
		public IReadOnlyList<IdentifierContext> identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public ITerminalNode EXCLAMATIONPOINT(int i) {
			return GetToken(VBAParser.EXCLAMATIONPOINT, i);
		}
		public ITerminalNode DOT(int i) {
			return GetToken(VBAParser.DOT, i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_complexType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2468; identifier();
			State = 2473;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,410,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2469;
					_la = _input.La(1);
					if ( !(_la==EXCLAMATIONPOINT || _la==DOT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2470; identifier();
					}
					} 
				}
				State = 2475;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,410,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2476; Match(MULT);
			State = 2478;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2477; whiteSpace();
				}
			}

			State = 2482;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				{
				State = 2480; numberLiteral();
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case AS:
			case BEGIN:
			case BEEP:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case DATABASE:
			case DATE:
			case DELETESETTING:
			case DOUBLE:
			case END_IF:
			case EQV:
			case FALSE:
			case FILECOPY:
			case IMP:
			case IN:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LONG:
			case LIB:
			case LIKE:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OPTIONAL:
			case OR:
			case PARAMARRAY:
			case PRESERVE:
			case RANDOMIZE:
			case REM:
			case RMDIR:
			case SAVEPICTURE:
			case SAVESETTING:
			case SENDKEYS:
			case SETATTR:
			case SINGLE:
			case SPC:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOAD:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WITHEVENTS:
			case XOR:
			case IDENTIFIER:
			case COLLECTION:
				{
				State = 2481; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public IReadOnlyList<IdentifierContext> identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2484; identifier();
			State = 2493;
			switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
			case 1:
				{
				State = 2486;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2485; whiteSpace();
					}
				}

				State = 2488; Match(MINUS);
				State = 2490;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2489; whiteSpace();
					}
				}

				State = 2492; identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_lineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2497;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case AS:
			case BEGIN:
			case BEEP:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case DATABASE:
			case DATE:
			case DELETESETTING:
			case DOUBLE:
			case END_IF:
			case EQV:
			case FALSE:
			case FILECOPY:
			case IMP:
			case IN:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LONG:
			case LIB:
			case LIKE:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OPTIONAL:
			case OR:
			case PARAMARRAY:
			case PRESERVE:
			case RANDOMIZE:
			case REM:
			case RMDIR:
			case SAVEPICTURE:
			case SAVESETTING:
			case SENDKEYS:
			case SETATTR:
			case SINGLE:
			case SPC:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOAD:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WITHEVENTS:
			case XOR:
			case IDENTIFIER:
			case COLLECTION:
				{
				State = 2495; identifier();
				}
				break;
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				{
				State = 2496; numberLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2499; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public ITerminalNode EMPTY() { return GetToken(VBAParser.EMPTY, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_literal);
		try {
			State = 2509;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2501; numberLiteral();
				}
				break;
			case DATELITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2502; Match(DATELITERAL);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2503; Match(STRINGLITERAL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2504; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2505; Match(FALSE);
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2506; Match(NOTHING);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2507; Match(NULL);
				}
				break;
			case EMPTY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2508; Match(EMPTY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode FLOATLITERAL() { return GetToken(VBAParser.FLOATLITERAL, 0); }
		public ITerminalNode HEXLITERAL() { return GetToken(VBAParser.HEXLITERAL, 0); }
		public ITerminalNode OCTLITERAL() { return GetToken(VBAParser.OCTLITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2511;
			_la = _input.La(1);
			if ( !(((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (OCTLITERAL - 244)) | (1L << (HEXLITERAL - 244)) | (1L << (FLOATLITERAL - 244)) | (1L << (INTEGERLITERAL - 244)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2515;
			switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				State = 2513; baseType();
				}
				break;

			case 2:
				{
				State = 2514; complexType();
				}
				break;
			}
			State = 2525;
			switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				State = 2518;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2517; whiteSpace();
					}
				}

				State = 2520; Match(LPAREN);
				State = 2522;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2521; whiteSpace();
					}
				}

				State = 2524; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(VBAParser.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VBAParser.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ITerminalNode PERCENT() { return GetToken(VBAParser.PERCENT, 0); }
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2527;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2529;
			_la = _input.La(1);
			if ( !(((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (FRIEND - 116)) | (1L << (GLOBAL - 116)) | (1L << (PRIVATE - 116)) | (1L << (PUBLIC - 116)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public ITerminalNode CLNGLNG() { return GetToken(VBAParser.CLNGLNG, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public ITerminalNode MIDTYPESUFFIX() { return GetToken(VBAParser.MIDTYPESUFFIX, 0); }
		public ITerminalNode SCALE() { return GetToken(VBAParser.SCALE, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode DEBUG() { return GetToken(VBAParser.DEBUG, 0); }
		public ITerminalNode CLNGPTR() { return GetToken(VBAParser.CLNGPTR, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode CDEC() { return GetToken(VBAParser.CDEC, 0); }
		public ITerminalNode CSNG() { return GetToken(VBAParser.CSNG, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode MIDBTYPESUFFIX() { return GetToken(VBAParser.MIDBTYPESUFFIX, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public ITerminalNode SGN() { return GetToken(VBAParser.SGN, 0); }
		public ITerminalNode CBYTE() { return GetToken(VBAParser.CBYTE, 0); }
		public ITerminalNode CVAR() { return GetToken(VBAParser.CVAR, 0); }
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode CDATE() { return GetToken(VBAParser.CDATE, 0); }
		public ITerminalNode ABS() { return GetToken(VBAParser.ABS, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode INT() { return GetToken(VBAParser.INT, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public ITerminalNode LBOUND() { return GetToken(VBAParser.LBOUND, 0); }
		public ITerminalNode UBOUND() { return GetToken(VBAParser.UBOUND, 0); }
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public ITerminalNode ARRAY() { return GetToken(VBAParser.ARRAY, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode MIDB() { return GetToken(VBAParser.MIDB, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode PSET() { return GetToken(VBAParser.PSET, 0); }
		public ITerminalNode CDBL() { return GetToken(VBAParser.CDBL, 0); }
		public ITerminalNode CLNG() { return GetToken(VBAParser.CLNG, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ITerminalNode LENB() { return GetToken(VBAParser.LENB, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ITerminalNode INPUTB() { return GetToken(VBAParser.INPUTB, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode CIRCLE() { return GetToken(VBAParser.CIRCLE, 0); }
		public ITerminalNode LEN(int i) {
			return GetToken(VBAParser.LEN, i);
		}
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode CBOOL() { return GetToken(VBAParser.CBOOL, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode CVERR() { return GetToken(VBAParser.CVERR, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode FIX() { return GetToken(VBAParser.FIX, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode CSTR() { return GetToken(VBAParser.CSTR, 0); }
		public ITerminalNode CINT() { return GetToken(VBAParser.CINT, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public ITerminalNode DOEVENTS() { return GetToken(VBAParser.DOEVENTS, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public IReadOnlyList<ITerminalNode> LEN() { return GetTokens(VBAParser.LEN); }
		public ITerminalNode ANY() { return GetToken(VBAParser.ANY, 0); }
		public ITerminalNode CCUR() { return GetToken(VBAParser.CCUR, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2531;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CHDIR - 66)) | (1L << (CHDRIVE - 66)) | (1L << (CLASS - 66)) | (1L << (DATABASE - 66)) | (1L << (DATE - 66)) | (1L << (DELETESETTING - 66)) | (1L << (DOUBLE - 66)) | (1L << (END_IF - 66)) | (1L << (EQV - 66)) | (1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (IMP - 66)) | (1L << (IN - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (KILL - 130)) | (1L << (LOAD - 130)) | (1L << (LONG - 130)) | (1L << (LIB - 130)) | (1L << (LIKE - 130)) | (1L << (ME - 130)) | (1L << (MID - 130)) | (1L << (MKDIR - 130)) | (1L << (MOD - 130)) | (1L << (NAME - 130)) | (1L << (NEW - 130)) | (1L << (NOT - 130)) | (1L << (NOTHING - 130)) | (1L << (NULL - 130)) | (1L << (OPTIONAL - 130)) | (1L << (OR - 130)) | (1L << (PARAMARRAY - 130)) | (1L << (PRESERVE - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (REM - 130)) | (1L << (RMDIR - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SETATTR - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (SINGLE - 194)) | (1L << (SPC - 194)) | (1L << (STRING - 194)) | (1L << (TAB - 194)) | (1L << (TEXT - 194)) | (1L << (THEN - 194)) | (1L << (TIME - 194)) | (1L << (TO - 194)) | (1L << (TRUE - 194)) | (1L << (TYPEOF - 194)) | (1L << (UNLOAD - 194)) | (1L << (UNTIL - 194)) | (1L << (VARIANT - 194)) | (1L << (VERSION - 194)) | (1L << (WITHEVENTS - 194)) | (1L << (XOR - 194)))) != 0) || _la==COLLECTION) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementKeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode WRITE(int i) {
			return GetToken(VBAParser.WRITE, i);
		}
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode ENDIF() { return GetToken(VBAParser.ENDIF, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode RESUME_NEXT() { return GetToken(VBAParser.RESUME_NEXT, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode OPTION() { return GetToken(VBAParser.OPTION, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public IReadOnlyList<ITerminalNode> WRITE() { return GetTokens(VBAParser.WRITE); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode EXIT() { return GetToken(VBAParser.EXIT, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public StatementKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementKeywordContext statementKeyword() {
		StatementKeywordContext _localctx = new StatementKeywordContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_statementKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2533;
			_la = _input.La(1);
			if ( !(((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (EXIT - 22)) | (1L << (OPTION - 22)) | (1L << (ACCESS - 22)) | (1L << (APPEND - 22)) | (1L << (BINARY - 22)) | (1L << (CALL - 22)) | (1L << (CASE - 22)) | (1L << (CLOSE - 22)) | (1L << (CONST - 22)) | (1L << (DECLARE - 22)) | (1L << (DEFBOOL - 22)) | (1L << (DEFBYTE - 22)) | (1L << (DEFDATE - 22)) | (1L << (DEFDBL - 22)) | (1L << (DEFCUR - 22)) | (1L << (DEFINT - 22)) | (1L << (DEFLNG - 22)) | (1L << (DEFLNGLNG - 22)) | (1L << (DEFLNGPTR - 22)) | (1L << (DEFOBJ - 22)) | (1L << (DEFSNG - 22)) | (1L << (DEFSTR - 22)))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (DEFVAR - 86)) | (1L << (DIM - 86)) | (1L << (DO - 86)) | (1L << (ELSE - 86)) | (1L << (ELSEIF - 86)) | (1L << (END_SELECT - 86)) | (1L << (END_WITH - 86)) | (1L << (END - 86)) | (1L << (ENUM - 86)) | (1L << (ERASE - 86)) | (1L << (ERROR - 86)) | (1L << (EVENT - 86)) | (1L << (EXIT_DO - 86)) | (1L << (EXIT_FOR - 86)) | (1L << (EXIT_FUNCTION - 86)) | (1L << (EXIT_PROPERTY - 86)) | (1L << (EXIT_SUB - 86)) | (1L << (FRIEND - 86)) | (1L << (FOR - 86)) | (1L << (FUNCTION - 86)) | (1L << (GET - 86)) | (1L << (GLOBAL - 86)) | (1L << (GOSUB - 86)) | (1L << (GOTO - 86)) | (1L << (IF - 86)) | (1L << (IMPLEMENTS - 86)) | (1L << (INPUT - 86)) | (1L << (LOCK - 86)) | (1L << (LOOP - 86)) | (1L << (LET - 86)) | (1L << (LINE_INPUT - 86)) | (1L << (LOCK_READ - 86)) | (1L << (LOCK_WRITE - 86)) | (1L << (LOCK_READ_WRITE - 86)) | (1L << (LSET - 86)) | (1L << (NEXT - 86)))) != 0) || ((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & ((1L << (ON - 153)) | (1L << (ON_ERROR - 153)) | (1L << (OPEN - 153)) | (1L << (OUTPUT - 153)) | (1L << (PRINT - 153)) | (1L << (PRIVATE - 153)) | (1L << (PUBLIC - 153)) | (1L << (PUT - 153)) | (1L << (RANDOM - 153)) | (1L << (RAISEEVENT - 153)) | (1L << (READ - 153)) | (1L << (READ_WRITE - 153)) | (1L << (REDIM - 153)) | (1L << (RESET - 153)) | (1L << (RESUME - 153)) | (1L << (RETURN - 153)) | (1L << (RSET - 153)) | (1L << (SEEK - 153)) | (1L << (SELECT - 153)) | (1L << (SET - 153)) | (1L << (SHARED - 153)) | (1L << (STATIC - 153)) | (1L << (STEP - 153)) | (1L << (STOP - 153)) | (1L << (SUB - 153)) | (1L << (TYPE - 153)) | (1L << (UNLOCK - 153)) | (1L << (WEND - 153)) | (1L << (WHILE - 153)) | (1L << (WIDTH - 153)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (WITH - 217)) | (1L << (WRITE - 217)) | (1L << (ENDIF - 217)) | (1L << (RESUME_NEXT - 217)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfLineContext : ParserRuleContext {
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public RemCommentContext remComment() {
			return GetRuleContext<RemCommentContext>(0);
		}
		public EndOfLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfLineContext endOfLine() {
		EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_endOfLine);
		int _la;
		try {
			int _alt;
			State = 2554;
			switch ( Interpreter.AdaptivePredict(_input,427,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2536;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2535; whiteSpace();
					}
				}

				State = 2545;
				switch (_input.La(1)) {
				case NEWLINE:
					{
					State = 2539;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 2538; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2541;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,423,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				case COMMENT:
				case SINGLEQUOTE:
					{
					State = 2543; comment();
					}
					break;
				case REMCOMMENT:
					{
					State = 2544; remComment();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2548;
				switch ( Interpreter.AdaptivePredict(_input,425,_ctx) ) {
				case 1:
					{
					State = 2547; whiteSpace();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2551;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2550; whiteSpace();
					}
				}

				State = 2553; annotationList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfStatementContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfStatementContext endOfStatement() {
		EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_endOfStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2566;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,431,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2564;
					switch ( Interpreter.AdaptivePredict(_input,430,_ctx) ) {
					case 1:
						{
						State = 2556; endOfLine();
						}
						break;

					case 2:
						{
						State = 2558;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2557; whiteSpace();
							}
						}

						State = 2560; Match(COLON);
						State = 2562;
						switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
						case 1:
							{
							State = 2561; whiteSpace();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 2568;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,431,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemCommentContext : ParserRuleContext {
		public ITerminalNode REMCOMMENT() { return GetToken(VBAParser.REMCOMMENT, 0); }
		public RemCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRemComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRemComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemCommentContext remComment() {
		RemCommentContext _localctx = new RemCommentContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_remComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2569; Match(REMCOMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(VBAParser.COMMENT, 0); }
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2571;
			_la = _input.La(1);
			if ( !(_la==COMMENT || _la==SINGLEQUOTE) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public IReadOnlyList<AnnotationContext> annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_annotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2573; Match(SINGLEQUOTE);
			State = 2575;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2574; annotation();
				}
				}
				State = 2577;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==AT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(VBAParser.AT, 0); }
		public AnnotationNameContext annotationName() {
			return GetRuleContext<AnnotationNameContext>(0);
		}
		public AnnotationArgListContext annotationArgList() {
			return GetRuleContext<AnnotationArgListContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2579; Match(AT);
			State = 2580; annotationName();
			State = 2582;
			switch ( Interpreter.AdaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				State = 2581; annotationArgList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParser.IDENTIFIER, 0); }
		public AnnotationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationNameContext annotationName() {
		AnnotationNameContext _localctx = new AnnotationNameContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_annotationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2584; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AnnotationArgContext> annotationArg() {
			return GetRuleContexts<AnnotationArgContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationArgContext annotationArg(int i) {
			return GetRuleContext<AnnotationArgContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AnnotationArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgListContext annotationArgList() {
		AnnotationArgListContext _localctx = new AnnotationArgListContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_annotationArgList);
		int _la;
		try {
			int _alt;
			State = 2647;
			switch ( Interpreter.AdaptivePredict(_input,449,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2586; whiteSpace();
				State = 2587; annotationArg();
				State = 2589;
				switch ( Interpreter.AdaptivePredict(_input,434,_ctx) ) {
				case 1:
					{
					State = 2588; whiteSpace();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2591; whiteSpace();
				State = 2592; annotationArg();
				State = 2601;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2594;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2593; whiteSpace();
							}
						}

						State = 2596; Match(COMMA);
						State = 2598;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2597; whiteSpace();
							}
						}

						State = 2600; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2603;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,437,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2606;
				switch ( Interpreter.AdaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					State = 2605; whiteSpace();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2609;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2608; whiteSpace();
					}
				}

				State = 2611; Match(LPAREN);
				State = 2613;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2612; whiteSpace();
					}
				}

				State = 2615; annotationArg();
				State = 2617;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2616; whiteSpace();
					}
				}

				State = 2619; Match(RPAREN);
				State = 2621;
				switch ( Interpreter.AdaptivePredict(_input,442,_ctx) ) {
				case 1:
					{
					State = 2620; whiteSpace();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2624;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2623; whiteSpace();
					}
				}

				State = 2626; Match(LPAREN);
				State = 2627; annotationArg();
				State = 2636;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2629;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2628; whiteSpace();
							}
						}

						State = 2631; Match(COMMA);
						State = 2633;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2632; whiteSpace();
							}
						}

						State = 2635; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2638;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,446,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2641;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2640; whiteSpace();
					}
				}

				State = 2643; Match(RPAREN);
				State = 2645;
				switch ( Interpreter.AdaptivePredict(_input,448,_ctx) ) {
				case 1:
					{
					State = 2644; whiteSpace();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParser.IDENTIFIER, 0); }
		public AnnotationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgContext annotationArg() {
		AnnotationArgContext _localctx = new AnnotationArgContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_annotationArg);
		try {
			State = 2651;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2649; Match(IDENTIFIER);
				}
				break;
			case EMPTY:
			case FALSE:
			case NOTHING:
			case NULL:
			case TRUE:
			case STRINGLITERAL:
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
			case DATELITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2650; literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhiteSpaceContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public WhiteSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whiteSpace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhiteSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhiteSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhiteSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhiteSpaceContext whiteSpace() {
		WhiteSpaceContext _localctx = new WhiteSpaceContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_whiteSpace);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2654;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2653;
					_la = _input.La(1);
					if ( !(_la==WS || _la==LINE_CONTINUATION) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2656;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,451,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 93: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 14);

		case 1: return Precpred(_ctx, 12);

		case 2: return Precpred(_ctx, 11);

		case 3: return Precpred(_ctx, 10);

		case 4: return Precpred(_ctx, 9);

		case 5: return Precpred(_ctx, 8);

		case 6: return Precpred(_ctx, 7);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x107\xA65\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x135\n\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x5\x3\x13B\n\x3\x3\x3\x5\x3\x13E\n\x3\x3\x3\x3\x3\x5\x3\x142\n\x3\x3"+
		"\x3\x3\x3\x5\x3\x146\n\x3\x3\x3\x3\x3\x5\x3\x14A\n\x3\x3\x3\x3\x3\x5\x3"+
		"\x14E\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x154\n\x4\x3\x4\x5\x4\x157\n"+
		"\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x161\n\x5\x5"+
		"\x5\x163\n\x5\x3\x5\x3\x5\x6\x5\x167\n\x5\r\x5\xE\x5\x168\x3\x5\x3\x5"+
		"\x3\x6\x3\x6\a\x6\x16F\n\x6\f\x6\xE\x6\x172\v\x6\x3\x6\x3\x6\a\x6\x176"+
		"\n\x6\f\x6\xE\x6\x179\v\x6\x3\x6\x3\x6\x3\x6\x5\x6\x17E\n\x6\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\a\x6\a\x185\n\a\r\a\xE\a\x186\x3\b\x3\b\x3\b\x3\b\a\b"+
		"\x18D\n\b\f\b\xE\b\x190\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x5\t\x19E\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x5\n\x1A8\n\n\x3\v\x3\v\x3\v\x3\v\a\v\x1AE\n\v\f\v\xE\v\x1B1\v\v\x3"+
		"\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x1BA\n\f\x3\r\x3\r\x3\r\x3\r\x5"+
		"\r\x1C0\n\r\x3\r\x3\r\x5\r\x1C4\n\r\x3\r\x3\r\x5\r\x1C8\n\r\x3\r\x3\r"+
		"\x5\r\x1CC\n\r\x3\r\a\r\x1CF\n\r\f\r\xE\r\x1D2\v\r\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\a\xE\x1D8\n\xE\f\xE\xE\xE\x1DB\v\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x221\n\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x5\x10\x227\n\x10\x3\x10\x3\x10\x5\x10\x22B\n\x10\x3\x10\x5\x10"+
		"\x22E\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x23E\n\x14\x3\x14\x3\x14"+
		"\x5\x14\x242\n\x14\x3\x14\a\x14\x245\n\x14\f\x14\xE\x14\x248\v\x14\x5"+
		"\x14\x24A\n\x14\x3\x15\x3\x15\x3\x15\x5\x15\x24F\n\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x5\x15\x255\n\x15\x3\x15\x3\x15\x5\x15\x259\n\x15\x3\x15\a"+
		"\x15\x25C\n\x15\f\x15\xE\x15\x25F\v\x15\x3\x16\x3\x16\x5\x16\x263\n\x16"+
		"\x3\x16\x3\x16\x3\x16\x5\x16\x268\n\x16\x3\x16\x5\x16\x26B\n\x16\x3\x16"+
		"\x3\x16\x5\x16\x26F\n\x16\x3\x16\x3\x16\x3\x17\x3\x17\x5\x17\x275\n\x17"+
		"\x3\x17\x3\x17\x5\x17\x279\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x5"+
		"\x18\x280\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x286\n\x18\x3\x18\x3"+
		"\x18\x5\x18\x28A\n\x18\x3\x18\x5\x18\x28D\n\x18\x3\x18\x3\x18\x3\x18\x5"+
		"\x18\x292\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x5\x18\x29D\n\x18\x3\x18\x5\x18\x2A0\n\x18\x3\x18\x5\x18\x2A3"+
		"\n\x18\x3\x18\x3\x18\x3\x18\x5\x18\x2A8\n\x18\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x5\x19\x2AE\n\x19\x3\x19\x3\x19\x5\x19\x2B2\n\x19\x3\x19\a\x19\x2B5"+
		"\n\x19\f\x19\xE\x19\x2B8\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2BE"+
		"\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2C4\n\x1A\x3\x1A\x3\x1A\x5"+
		"\x1A\x2C8\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2D0"+
		"\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2D4\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2D8\n\x1A"+
		"\x3\x1A\x3\x1A\x5\x1A\x2DC\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2E0\n\x1A\x3\x1B"+
		"\x3\x1B\x3\x1B\x5\x1B\x2E5\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2F0\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x5\x1B\x2F7\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5"+
		"\x1B\x2FF\n\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x306\n\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x30D\n\x1D\f\x1D\xE\x1D\x310\v"+
		"\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x5\x1E\x316\n\x1E\x3\x1E\x3\x1E\x5\x1E"+
		"\x31A\n\x1E\x3\x1E\x5\x1E\x31D\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x5\x1F\x325\n\x1F\x3\x1F\x3\x1F\x5\x1F\x329\n\x1F\x3\x1F\a\x1F"+
		"\x32C\n\x1F\f\x1F\xE\x1F\x32F\v\x1F\x3 \x3 \x3 \x3 \x3!\x3!\x3!\x5!\x338"+
		"\n!\x3!\x3!\x3!\x3!\x5!\x33E\n!\x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\x3#\x5#"+
		"\x348\n#\x3#\x3#\x5#\x34C\n#\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3"+
		"$\x3$\x3$\x5$\x35B\n$\x3$\x3$\x3$\x3$\x5$\x361\n$\x3%\x3%\x3%\x3%\x5%"+
		"\x367\n%\x3%\x3%\x5%\x36B\n%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5"+
		"%\x377\n%\x3%\x3%\x5%\x37B\n%\x3%\x3%\x3%\x3%\x5%\x381\n%\x3&\x3&\x3&"+
		"\x5&\x386\n&\x3&\x3&\x5&\x38A\n&\x3&\x3&\x5&\x38E\n&\x3&\x3&\x5&\x392"+
		"\n&\x3&\x5&\x395\n&\x3&\x5&\x398\n&\x3&\x5&\x39B\n&\x3&\x5&\x39E\n&\x3"+
		"&\x3&\x5&\x3A2\n&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x5\'\x3AA\n\'\x3\'\x3\'"+
		"\x5\'\x3AE\n\'\x3\'\x5\'\x3B1\n\'\x3\'\x5\'\x3B4\n\'\x3\'\x3\'\x5\'\x3B8"+
		"\n\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x3D0\n*\x3*\x3*\a*\x3D4\n*\f*\xE*\x3D7\v"+
		"*\x3*\x5*\x3DA\n*\x3*\x3*\x5*\x3DE\n*\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+"+
		"\x3E7\n+\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x3F2\n-\x3.\x3.\x3.\x5"+
		".\x3F7\n.\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x401\n\x30"+
		"\x3\x30\x3\x30\x5\x30\x405\n\x30\x3\x30\x6\x30\x408\n\x30\r\x30\xE\x30"+
		"\x409\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x5\x32\x412\n\x32\x3\x32"+
		"\x3\x32\x5\x32\x416\n\x32\x3\x32\x3\x32\x5\x32\x41A\n\x32\x3\x32\x3\x32"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x422\n\x33\x3\x33\x3\x33\x5\x33\x426"+
		"\n\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35"+
		"\x3\x35\x5\x35\x432\n\x35\x3\x35\x3\x35\x5\x35\x436\n\x35\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x43E\n\x35\x5\x35\x440\n\x35\x3\x36"+
		"\x3\x36\x3\x36\x3\x36\x5\x36\x446\n\x36\x3\x36\x3\x36\x5\x36\x44A\n\x36"+
		"\x3\x36\x3\x36\x3\x37\x3\x37\x5\x37\x450\n\x37\x3\x37\x3\x37\x5\x37\x454"+
		"\n\x37\x3\x37\x3\x37\x5\x37\x458\n\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		":\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x5:\x472\n:\x3;\x3;\x3;\x3;\x3;"+
		"\x3;\x3;\x3;\x5;\x47C\n;\x3;\x3;\x5;\x480\n;\x3;\a;\x483\n;\f;\xE;\x486"+
		"\v;\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x5<\x490\n<\x3<\x3<\x5<\x494\n<\x3"+
		"<\a<\x497\n<\f<\xE<\x49A\v<\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3"+
		"=\x3=\x5=\x4A8\n=\x3=\x3=\x3=\x5=\x4AD\n=\x3=\x3=\x3=\x3=\x3=\x3=\x3="+
		"\x5=\x4B6\n=\x3=\x3=\x5=\x4BA\n=\x3=\x3=\x5=\x4BE\n=\x3>\x3>\x5>\x4C2"+
		"\n>\x3>\x3>\x5>\x4C6\n>\x3>\x5>\x4C9\n>\a>\x4CB\n>\f>\xE>\x4CE\v>\x3>"+
		"\x5>\x4D1\n>\x3>\x5>\x4D4\n>\x3>\x3>\x5>\x4D8\n>\x3>\x5>\x4DB\n>\x6>\x4DD"+
		"\n>\r>\xE>\x4DE\x5>\x4E1\n>\x3?\x3?\x3?\x5?\x4E6\n?\x3?\x3?\x5?\x4EA\n"+
		"?\x3?\x3?\x5?\x4EE\n?\x3?\x3?\x5?\x4F2\n?\x5?\x4F4\n?\x3@\x3@\x3@\x3@"+
		"\x5@\x4FA\n@\x3@\x3@\x5@\x4FE\n@\x3@\x5@\x501\n@\x3\x41\x3\x41\x3\x41"+
		"\x5\x41\x506\n\x41\x3\x41\x3\x41\x5\x41\x50A\n\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x5\x41\x510\n\x41\x3\x41\x5\x41\x513\n\x41\x3\x41\x5\x41\x516"+
		"\n\x41\x3\x41\x3\x41\x3\x41\x5\x41\x51B\n\x41\x3\x41\x3\x41\x5\x41\x51F"+
		"\n\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x5\x42\x526\n\x42\x3\x42\x3"+
		"\x42\x5\x42\x52A\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x530\n\x42\x3"+
		"\x42\x5\x42\x533\n\x42\x3\x42\x3\x42\x5\x42\x537\n\x42\x3\x42\x3\x42\x3"+
		"\x43\x3\x43\x3\x43\x5\x43\x53E\n\x43\x3\x43\x3\x43\x5\x43\x542\n\x43\x3"+
		"\x43\x3\x43\x3\x43\x3\x43\x5\x43\x548\n\x43\x3\x43\x5\x43\x54B\n\x43\x3"+
		"\x43\x3\x43\x5\x43\x54F\n\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x3\x44"+
		"\x5\x44\x557\n\x44\x3\x44\x3\x44\x5\x44\x55B\n\x44\x3\x44\x5\x44\x55E"+
		"\n\x44\x3\x44\x5\x44\x561\n\x44\x3\x44\x3\x44\x5\x44\x565\n\x44\x3\x44"+
		"\x3\x44\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x56D\n\x45\x3\x45\x3\x45\x5"+
		"\x45\x571\n\x45\x3\x45\x3\x45\x5\x45\x575\n\x45\x5\x45\x577\n\x45\x3\x45"+
		"\x5\x45\x57A\n\x45\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x580\n\x46\x3G\x3"+
		"G\x3G\x3G\x5G\x586\nG\x3G\x3G\x5G\x58A\nG\x3G\x3G\x5G\x58E\nG\x3G\aG\x591"+
		"\nG\fG\xEG\x594\vG\x3H\x3H\x5H\x598\nH\x3H\x3H\x5H\x59C\nH\x3H\x3H\x5"+
		"H\x5A0\nH\x3H\x3H\x3H\x3H\x5H\x5A6\nH\x3I\x3I\x3J\x3J\x3J\x3J\x5J\x5AE"+
		"\nJ\x5J\x5B0\nJ\x3K\x3K\x3L\x3L\x3L\x3L\x3M\x3M\x3M\x3M\x5M\x5BC\nM\x3"+
		"M\x3M\x5M\x5C0\nM\x3M\x3M\x3N\x3N\x3N\x3N\x5N\x5C8\nN\x3N\x3N\x5N\x5CC"+
		"\nN\x3N\x3N\x3O\x3O\x3O\x3O\x5O\x5D4\nO\x3O\x3O\x5O\x5D8\nO\x3O\x3O\x5"+
		"O\x5DC\nO\x3O\x3O\x5O\x5E0\nO\x3O\x3O\x5O\x5E4\nO\x3O\x3O\x5O\x5E8\nO"+
		"\x3O\x3O\x3P\x3P\x3P\x3P\x5P\x5F0\nP\x3P\x3P\x5P\x5F4\nP\x3P\x3P\x3Q\x3"+
		"Q\x3Q\x3Q\x3Q\x3Q\x3Q\aQ\x5FF\nQ\fQ\xEQ\x602\vQ\x3Q\x3Q\x3R\x3R\x5R\x608"+
		"\nR\x3R\x3R\x5R\x60C\nR\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x617\n"+
		"R\x3S\x3S\x3S\x3S\x3S\x5S\x61E\nS\x3T\x3T\x3T\x5T\x623\nT\x3T\x3T\x5T"+
		"\x627\nT\x3T\aT\x62A\nT\fT\xET\x62D\vT\x5T\x62F\nT\x3U\x3U\x3U\x3U\x5"+
		"U\x635\nU\x3U\x3U\x5U\x639\nU\x3U\x5U\x63C\nU\x3V\x3V\x3V\x3V\x5V\x642"+
		"\nV\x3V\x3V\x5V\x646\nV\x3V\x3V\x3W\x3W\x3W\x3W\x5W\x64E\nW\x3W\x3W\x5"+
		"W\x652\nW\x3W\x3W\x3X\x3X\x3Y\x3Y\x3Y\x5Y\x65B\nY\x3Y\x3Y\x5Y\x65F\nY"+
		"\x3Y\x3Y\x5Y\x663\nY\x3Y\x3Y\x5Y\x667\nY\x3Y\x5Y\x66A\nY\x3Y\x3Y\x5Y\x66E"+
		"\nY\x3Y\x3Y\x3Z\x3Z\x5Z\x674\nZ\x3Z\x3Z\x5Z\x678\nZ\x3Z\x3Z\x3[\x3[\x3"+
		"[\x5[\x67F\n[\x3[\x3[\x3[\x3[\x3[\a[\x686\n[\f[\xE[\x689\v[\x3[\x3[\x3"+
		"\\\x3\\\x5\\\x68F\n\\\x3\\\x3\\\x5\\\x693\n\\\x3\\\x5\\\x696\n\\\x3\\"+
		"\x5\\\x699\n\\\x3\\\x5\\\x69C\n\\\x3\\\x3\\\x3\\\x5\\\x6A1\n\\\x3\\\x3"+
		"\\\x3]\x3]\x3]\x3]\x3^\x3^\x3^\x3^\x5^\x6AD\n^\x3^\x3^\x5^\x6B1\n^\x3"+
		"^\x3^\x3^\x3^\x3^\x3^\x5^\x6B9\n^\x5^\x6BB\n^\x3_\x3_\x3_\x5_\x6C0\n_"+
		"\x3_\x3_\x3_\x5_\x6C5\n_\x3_\x3_\x3_\x5_\x6CA\n_\x3_\x3_\x5_\x6CE\n_\x3"+
		"_\x3_\x3_\x3_\x5_\x6D4\n_\x3_\x3_\x3_\x5_\x6D9\n_\x3_\x3_\x3_\x3_\x3_"+
		"\x5_\x6E0\n_\x3_\x3_\x5_\x6E4\n_\x3_\x3_\x3_\x3_\x5_\x6EA\n_\x3_\x3_\x5"+
		"_\x6EE\n_\x3_\x3_\x5_\x6F2\n_\x3_\x3_\x3_\x5_\x6F7\n_\x3_\x3_\x5_\x6FB"+
		"\n_\x3_\x3_\x3_\x5_\x700\n_\x3_\x3_\x5_\x704\n_\x3_\x3_\x3_\x5_\x709\n"+
		"_\x3_\x3_\x5_\x70D\n_\x3_\x3_\x3_\x5_\x712\n_\x3_\x3_\x5_\x716\n_\x3_"+
		"\x3_\x3_\x5_\x71B\n_\x3_\x3_\x5_\x71F\n_\x3_\x3_\x3_\x5_\x724\n_\x3_\x3"+
		"_\x5_\x728\n_\x3_\x3_\x3_\x5_\x72D\n_\x3_\x3_\x5_\x731\n_\x3_\x3_\x3_"+
		"\x5_\x736\n_\x3_\x3_\x5_\x73A\n_\x3_\x3_\x3_\x5_\x73F\n_\x3_\x3_\x5_\x743"+
		"\n_\x3_\x3_\x3_\x5_\x748\n_\x3_\x3_\x5_\x74C\n_\x3_\x3_\x3_\x5_\x751\n"+
		"_\x3_\x3_\x5_\x755\n_\x3_\a_\x758\n_\f_\xE_\x75B\v_\x3`\x3`\x3`\x3`\x3"+
		"`\x3`\x3`\x3`\x5`\x765\n`\x3\x61\x3\x61\x3\x61\x5\x61\x76A\n\x61\x3\x61"+
		"\x3\x61\x3\x61\x5\x61\x76F\n\x61\x3\x61\x3\x61\x3\x62\x3\x62\x5\x62\x775"+
		"\n\x62\x3\x62\x3\x62\x5\x62\x779\n\x62\x3\x62\a\x62\x77C\n\x62\f\x62\xE"+
		"\x62\x77F\v\x62\x3\x63\x3\x63\x5\x63\x783\n\x63\x3\x63\x3\x63\x5\x63\x787"+
		"\n\x63\x3\x63\x3\x63\x5\x63\x78B\n\x63\x5\x63\x78D\n\x63\x3\x63\x3\x63"+
		"\x5\x63\x791\n\x63\x5\x63\x793\n\x63\x3\x63\x5\x63\x796\n\x63\x3\x63\x3"+
		"\x63\x3\x63\x5\x63\x79B\n\x63\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64"+
		"\x7A2\n\x64\x3\x64\x3\x64\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x7AA\n\x65"+
		"\x3\x65\x3\x65\x5\x65\x7AE\n\x65\x3\x65\x3\x65\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x3\x66\x5\x66\x7B7\n\x66\x3\x66\x3\x66\x3g\x3g\x3h\x3h\x3h\x3h\x5"+
		"h\x7C1\nh\x3h\x3h\x5h\x7C5\nh\x3h\x5h\x7C8\nh\x3i\x5i\x7CB\ni\x3i\x3i"+
		"\x3j\x3j\x3j\x3j\x3k\x5k\x7D4\nk\x3k\x3k\x3k\x5k\x7D9\nk\x3k\x5k\x7DC"+
		"\nk\x3k\x3k\x5k\x7E0\nk\x3k\x3k\x5k\x7E4\nk\x3k\x3k\x5k\x7E8\nk\x3k\x5"+
		"k\x7EB\nk\x3k\x3k\x3k\x3k\ak\x7F1\nk\fk\xEk\x7F4\vk\x3k\x3k\x5k\x7F8\n"+
		"k\x3k\x5k\x7FB\nk\x3k\x3k\x5k\x7FF\nk\x3k\x3k\x5k\x803\nk\x3k\x3k\x5k"+
		"\x807\nk\x3k\x5k\x80A\nk\x3k\x3k\x3k\x3k\ak\x810\nk\fk\xEk\x813\vk\x5"+
		"k\x815\nk\x3l\x3l\x5l\x819\nl\x3m\x5m\x81C\nm\x3m\x5m\x81F\nm\x3m\x3m"+
		"\x5m\x823\nm\x3m\x3m\x5m\x827\nm\x3m\x3m\x3m\x5m\x82C\nm\x3m\x5m\x82F"+
		"\nm\x3m\x5m\x832\nm\x3m\x5m\x835\nm\x3m\x3m\x3m\x3m\am\x83B\nm\fm\xEm"+
		"\x83E\vm\x3n\x3n\x3n\x3n\x5n\x844\nn\x3n\x5n\x847\nn\x3n\x3n\x3n\x3n\a"+
		"n\x84D\nn\fn\xEn\x850\vn\x3o\x3o\x3o\x3o\x5o\x856\no\x3p\x3p\x5p\x85A"+
		"\np\x3p\x5p\x85D\np\x3p\x5p\x860\np\x3p\x5p\x863\np\x3p\x3p\x3p\x3p\a"+
		"p\x869\np\fp\xEp\x86C\vp\x3q\x3q\x5q\x870\nq\x3q\x5q\x873\nq\x3q\x5q\x876"+
		"\nq\x3q\x3q\x5q\x87A\nq\x3q\x3q\x5q\x87E\nq\x5q\x880\nq\x3q\x3q\x5q\x884"+
		"\nq\x3q\x5q\x887\nq\x3q\x5q\x88A\nq\x3q\x3q\x3q\x3q\aq\x890\nq\fq\xEq"+
		"\x893\vq\x3r\x3r\x5r\x897\nr\x3r\x5r\x89A\nr\x3r\x5r\x89D\nr\x3r\x5r\x8A0"+
		"\nr\x3r\x3r\x3r\x3r\ar\x8A6\nr\fr\xEr\x8A9\vr\x3s\x3s\x5s\x8AD\ns\x3s"+
		"\x5s\x8B0\ns\x3s\x5s\x8B3\ns\x3s\x3s\x5s\x8B7\ns\x3s\x3s\x5s\x8BB\ns\x5"+
		"s\x8BD\ns\x3s\x3s\x5s\x8C1\ns\x3s\x5s\x8C4\ns\x3s\x5s\x8C7\ns\x3s\x3s"+
		"\x3s\x3s\as\x8CD\ns\fs\xEs\x8D0\vs\x3t\x3t\x5t\x8D4\nt\x3t\x3t\x5t\x8D8"+
		"\nt\x6t\x8DA\nt\rt\xEt\x8DB\x3t\x5t\x8DF\nt\x3t\x5t\x8E2\nt\x3t\x5t\x8E5"+
		"\nt\x3t\x3t\x3t\x3t\at\x8EB\nt\ft\xEt\x8EE\vt\x3u\x3u\x5u\x8F2\nu\x3u"+
		"\x3u\x5u\x8F6\nu\x3v\x5v\x8F9\nv\x3v\x3v\x3w\x5w\x8FE\nw\x3w\x5w\x901"+
		"\nw\x3w\x3w\x5w\x905\nw\aw\x907\nw\fw\xEw\x90A\vw\x3w\x3w\x5w\x90E\nw"+
		"\x3w\x3w\x5w\x912\nw\x3w\x5w\x915\nw\aw\x917\nw\fw\xEw\x91A\vw\x3x\x5"+
		"x\x91D\nx\x3x\x3x\x5x\x921\nx\x3x\x5x\x924\nx\x3x\x3x\x3y\x3y\x5y\x92A"+
		"\ny\x3y\x3y\x5y\x92E\ny\x3z\x3z\x5z\x932\nz\x3z\x3z\x5z\x936\nz\x3z\x3"+
		"z\x5z\x93A\nz\x3z\az\x93D\nz\fz\xEz\x940\vz\x5z\x942\nz\x3z\x5z\x945\n"+
		"z\x3z\x3z\x3{\x3{\x5{\x94B\n{\x3{\x3{\x5{\x94F\n{\x3{\x3{\x5{\x953\n{"+
		"\x3{\x3{\x5{\x957\n{\x3{\x5{\x95A\n{\x3{\x3{\x5{\x95E\n{\x3{\x5{\x961"+
		"\n{\x3{\x5{\x964\n{\x3{\x5{\x967\n{\x3{\x5{\x96A\n{\x3{\x5{\x96D\n{\x3"+
		"|\x3|\x5|\x971\n|\x3|\x3|\x3}\x3}\x5}\x977\n}\x3}\x3}\x5}\x97B\n}\x3}"+
		"\a}\x97E\n}\f}\xE}\x981\v}\x3~\x3~\x3~\x3~\x3~\x5~\x988\n~\x3~\x3~\x3"+
		"\x7F\x3\x7F\x5\x7F\x98E\n\x7F\x3\x80\x3\x80\x5\x80\x992\n\x80\x3\x81\x3"+
		"\x81\x5\x81\x996\n\x81\x3\x81\x3\x81\x5\x81\x99A\n\x81\x3\x81\x3\x81\x5"+
		"\x81\x99E\n\x81\x3\x81\x5\x81\x9A1\n\x81\x3\x82\x3\x82\x3\x83\x3\x83\x3"+
		"\x84\x3\x84\x3\x84\a\x84\x9AA\n\x84\f\x84\xE\x84\x9AD\v\x84\x3\x85\x3"+
		"\x85\x5\x85\x9B1\n\x85\x3\x85\x3\x85\x5\x85\x9B5\n\x85\x3\x86\x3\x86\x5"+
		"\x86\x9B9\n\x86\x3\x86\x3\x86\x5\x86\x9BD\n\x86\x3\x86\x5\x86\x9C0\n\x86"+
		"\x3\x87\x3\x87\x5\x87\x9C4\n\x87\x3\x87\x3\x87\x3\x88\x3\x88\x3\x88\x3"+
		"\x88\x3\x88\x3\x88\x3\x88\x3\x88\x5\x88\x9D0\n\x88\x3\x89\x3\x89\x3\x8A"+
		"\x3\x8A\x5\x8A\x9D6\n\x8A\x3\x8A\x5\x8A\x9D9\n\x8A\x3\x8A\x3\x8A\x5\x8A"+
		"\x9DD\n\x8A\x3\x8A\x5\x8A\x9E0\n\x8A\x3\x8B\x3\x8B\x3\x8C\x3\x8C\x3\x8D"+
		"\x3\x8D\x3\x8E\x3\x8E\x3\x8F\x5\x8F\x9EB\n\x8F\x3\x8F\x6\x8F\x9EE\n\x8F"+
		"\r\x8F\xE\x8F\x9EF\x3\x8F\x3\x8F\x5\x8F\x9F4\n\x8F\x3\x8F\x5\x8F\x9F7"+
		"\n\x8F\x3\x8F\x5\x8F\x9FA\n\x8F\x3\x8F\x5\x8F\x9FD\n\x8F\x3\x90\x3\x90"+
		"\x5\x90\xA01\n\x90\x3\x90\x3\x90\x5\x90\xA05\n\x90\a\x90\xA07\n\x90\f"+
		"\x90\xE\x90\xA0A\v\x90\x3\x91\x3\x91\x3\x92\x3\x92\x3\x93\x3\x93\x6\x93"+
		"\xA12\n\x93\r\x93\xE\x93\xA13\x3\x94\x3\x94\x3\x94\x5\x94\xA19\n\x94\x3"+
		"\x95\x3\x95\x3\x96\x3\x96\x3\x96\x5\x96\xA20\n\x96\x3\x96\x3\x96\x3\x96"+
		"\x5\x96\xA25\n\x96\x3\x96\x3\x96\x5\x96\xA29\n\x96\x3\x96\x6\x96\xA2C"+
		"\n\x96\r\x96\xE\x96\xA2D\x3\x96\x5\x96\xA31\n\x96\x3\x96\x5\x96\xA34\n"+
		"\x96\x3\x96\x3\x96\x5\x96\xA38\n\x96\x3\x96\x3\x96\x5\x96\xA3C\n\x96\x3"+
		"\x96\x3\x96\x5\x96\xA40\n\x96\x3\x96\x5\x96\xA43\n\x96\x3\x96\x3\x96\x3"+
		"\x96\x5\x96\xA48\n\x96\x3\x96\x3\x96\x5\x96\xA4C\n\x96\x3\x96\x6\x96\xA4F"+
		"\n\x96\r\x96\xE\x96\xA50\x3\x96\x5\x96\xA54\n\x96\x3\x96\x3\x96\x5\x96"+
		"\xA58\n\x96\x5\x96\xA5A\n\x96\x3\x97\x3\x97\x5\x97\xA5E\n\x97\x3\x98\x6"+
		"\x98\xA61\n\x98\r\x98\xE\x98\xA62\x3\x98\x2\x2\x3\xBC\x99\x2\x2\x4\x2"+
		"\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2"+
		"\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36"+
		"\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2"+
		"T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2"+
		"r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2"+
		"\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2"+
		"\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2"+
		"\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2"+
		"\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2"+
		"\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2"+
		"\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102"+
		"\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114"+
		"\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126"+
		"\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x2\x1A\x5\x2==II\xCC\xCC\x3\x2LX\x4"+
		"\x2\xD5\xD5\xD9\xD9\x3\x2os\x3\x2\x9C\x9D\a\x2\x39\x39==\x81\x81\xA5\xA5"+
		"\xB0\xB0\x4\x2\xB3\xB4\xDD\xDD\x4\x2\x8D\x8F\xC3\xC3\x4\x2))++\x4\x2\xC5"+
		"\xC5\xCB\xCB\x4\x2\xE0\xE0\xE9\xE9\x4\x2\xE8\xE8\xEB\xEB\a\x2\x82\x82"+
		"\x8B\x8B\xE2\xE5\xE7\xE7\xEA\xEA\x3\x2,-\x4\x2?@\xA6\xA6\x3\x2?@\r\x2"+
		"\x13\x13\x1F >>\x41\x41JJ\\\\\x83\x83\x87\x87\xC4\xC4\xC9\xC9\xD6\xD6"+
		"\x3\x2\xF6\xF9\x5\x2,,.\x32\xEC\xEC\x6\x2vvzz\xA9\xA9\xAE\xAE\'\x2\x3"+
		"\x17\x19#%(\x34\x38:<>\x41\x44\x46IJYY\\\\\x63\x63kktu~~\x80\x80\x82\x85"+
		"\x87\x87\x8A\x8B\x91\x95\x97\x9A\x9F\x9F\xA4\xA4\xA6\xA7\xB1\xB1\xB6\xB6"+
		"\xBA\xBA\xBC\xBD\xC0\xC0\xC2\xC2\xC4\xC5\xC9\xC9\xCB\xD0\xD2\xD3\xD5\xD7"+
		"\xDC\xDC\xDE\xDE\x105\x105(\x2\x18\x18$$\x33\x33\x39\x39==\x42\x43GHK"+
		"XZ[^_\x65\x65hjlsv}\x7F\x7F\x81\x81\x86\x86\x88\x89\x8C\x90\x96\x96\x9B"+
		"\x9C\x9E\x9E\xA5\xA5\xA8\xA9\xAE\xB0\xB2\xB5\xB7\xB9\xBB\xBB\xBE\xBF\xC1"+
		"\xC1\xC3\xC3\xC6\xC8\xCA\xCA\xD1\xD1\xD4\xD4\xD8\xDB\xDD\xDD\x106\x107"+
		"\x3\x2\xFD\xFE\x4\x2\x100\x100\x102\x102\xBFE\x2\x130\x3\x2\x2\x2\x4\x134"+
		"\x3\x2\x2\x2\x6\x14F\x3\x2\x2\x2\b\x15A\x3\x2\x2\x2\n\x16C\x3\x2\x2\x2"+
		"\f\x184\x3\x2\x2\x2\xE\x188\x3\x2\x2\x2\x10\x19D\x3\x2\x2\x2\x12\x1A7"+
		"\x3\x2\x2\x2\x14\x1A9\x3\x2\x2\x2\x16\x1B9\x3\x2\x2\x2\x18\x1BB\x3\x2"+
		"\x2\x2\x1A\x1D3\x3\x2\x2\x2\x1C\x220\x3\x2\x2\x2\x1E\x222\x3\x2\x2\x2"+
		" \x22F\x3\x2\x2\x2\"\x231\x3\x2\x2\x2$\x235\x3\x2\x2\x2&\x239\x3\x2\x2"+
		"\x2(\x24E\x3\x2\x2\x2*\x260\x3\x2\x2\x2,\x272\x3\x2\x2\x2.\x27F\x3\x2"+
		"\x2\x2\x30\x2A9\x3\x2\x2\x2\x32\x2DF\x3\x2\x2\x2\x34\x2FE\x3\x2\x2\x2"+
		"\x36\x300\x3\x2\x2\x2\x38\x305\x3\x2\x2\x2:\x313\x3\x2\x2\x2<\x320\x3"+
		"\x2\x2\x2>\x330\x3\x2\x2\x2@\x337\x3\x2\x2\x2\x42\x341\x3\x2\x2\x2\x44"+
		"\x343\x3\x2\x2\x2\x46\x34F\x3\x2\x2\x2H\x362\x3\x2\x2\x2J\x385\x3\x2\x2"+
		"\x2L\x3A5\x3\x2\x2\x2N\x3BB\x3\x2\x2\x2P\x3BF\x3\x2\x2\x2R\x3DD\x3\x2"+
		"\x2\x2T\x3DF\x3\x2\x2\x2V\x3E8\x3\x2\x2\x2X\x3EA\x3\x2\x2\x2Z\x3F3\x3"+
		"\x2\x2\x2\\\x3F8\x3\x2\x2\x2^\x3FC\x3\x2\x2\x2`\x40B\x3\x2\x2\x2\x62\x411"+
		"\x3\x2\x2\x2\x64\x41D\x3\x2\x2\x2\x66\x429\x3\x2\x2\x2h\x42D\x3\x2\x2"+
		"\x2j\x441\x3\x2\x2\x2l\x44D\x3\x2\x2\x2n\x45B\x3\x2\x2\x2p\x45F\x3\x2"+
		"\x2\x2r\x467\x3\x2\x2\x2t\x473\x3\x2\x2\x2v\x487\x3\x2\x2\x2x\x49B\x3"+
		"\x2\x2\x2z\x4E0\x3\x2\x2\x2|\x4F3\x3\x2\x2\x2~\x4F5\x3\x2\x2\x2\x80\x505"+
		"\x3\x2\x2\x2\x82\x525\x3\x2\x2\x2\x84\x53D\x3\x2\x2\x2\x86\x552\x3\x2"+
		"\x2\x2\x88\x568\x3\x2\x2\x2\x8A\x57B\x3\x2\x2\x2\x8C\x581\x3\x2\x2\x2"+
		"\x8E\x595\x3\x2\x2\x2\x90\x5A7\x3\x2\x2\x2\x92\x5A9\x3\x2\x2\x2\x94\x5B1"+
		"\x3\x2\x2\x2\x96\x5B3\x3\x2\x2\x2\x98\x5B7\x3\x2\x2\x2\x9A\x5C3\x3\x2"+
		"\x2\x2\x9C\x5CF\x3\x2\x2\x2\x9E\x5EB\x3\x2\x2\x2\xA0\x5F7\x3\x2\x2\x2"+
		"\xA2\x616\x3\x2\x2\x2\xA4\x618\x3\x2\x2\x2\xA6\x62E\x3\x2\x2\x2\xA8\x630"+
		"\x3\x2\x2\x2\xAA\x63D\x3\x2\x2\x2\xAC\x649\x3\x2\x2\x2\xAE\x655\x3\x2"+
		"\x2\x2\xB0\x65A\x3\x2\x2\x2\xB2\x671\x3\x2\x2\x2\xB4\x67E\x3\x2\x2\x2"+
		"\xB6\x68C\x3\x2\x2\x2\xB8\x6A4\x3\x2\x2\x2\xBA\x6A8\x3\x2\x2\x2\xBC\x6E9"+
		"\x3\x2\x2\x2\xBE\x75C\x3\x2\x2\x2\xC0\x769\x3\x2\x2\x2\xC2\x772\x3\x2"+
		"\x2\x2\xC4\x780\x3\x2\x2\x2\xC6\x79C\x3\x2\x2\x2\xC8\x7A5\x3\x2\x2\x2"+
		"\xCA\x7B1\x3\x2\x2\x2\xCC\x7BA\x3\x2\x2\x2\xCE\x7BC\x3\x2\x2\x2\xD0\x7CA"+
		"\x3\x2\x2\x2\xD2\x7CE\x3\x2\x2\x2\xD4\x814\x3\x2\x2\x2\xD6\x818\x3\x2"+
		"\x2\x2\xD8\x81B\x3\x2\x2\x2\xDA\x83F\x3\x2\x2\x2\xDC\x855\x3\x2\x2\x2"+
		"\xDE\x857\x3\x2\x2\x2\xE0\x86F\x3\x2\x2\x2\xE2\x894\x3\x2\x2\x2\xE4\x8AC"+
		"\x3\x2\x2\x2\xE6\x8D3\x3\x2\x2\x2\xE8\x8EF\x3\x2\x2\x2\xEA\x8F8\x3\x2"+
		"\x2\x2\xEC\x908\x3\x2\x2\x2\xEE\x91C\x3\x2\x2\x2\xF0\x927\x3\x2\x2\x2"+
		"\xF2\x92F\x3\x2\x2\x2\xF4\x94A\x3\x2\x2\x2\xF6\x96E\x3\x2\x2\x2\xF8\x974"+
		"\x3\x2\x2\x2\xFA\x987\x3\x2\x2\x2\xFC\x98D\x3\x2\x2\x2\xFE\x991\x3\x2"+
		"\x2\x2\x100\x993\x3\x2\x2\x2\x102\x9A2\x3\x2\x2\x2\x104\x9A4\x3\x2\x2"+
		"\x2\x106\x9A6\x3\x2\x2\x2\x108\x9AE\x3\x2\x2\x2\x10A\x9B6\x3\x2\x2\x2"+
		"\x10C\x9C3\x3\x2\x2\x2\x10E\x9CF\x3\x2\x2\x2\x110\x9D1\x3\x2\x2\x2\x112"+
		"\x9D5\x3\x2\x2\x2\x114\x9E1\x3\x2\x2\x2\x116\x9E3\x3\x2\x2\x2\x118\x9E5"+
		"\x3\x2\x2\x2\x11A\x9E7\x3\x2\x2\x2\x11C\x9FC\x3\x2\x2\x2\x11E\xA08\x3"+
		"\x2\x2\x2\x120\xA0B\x3\x2\x2\x2\x122\xA0D\x3\x2\x2\x2\x124\xA0F\x3\x2"+
		"\x2\x2\x126\xA15\x3\x2\x2\x2\x128\xA1A\x3\x2\x2\x2\x12A\xA59\x3\x2\x2"+
		"\x2\x12C\xA5D\x3\x2\x2\x2\x12E\xA60\x3\x2\x2\x2\x130\x131\x5\x4\x3\x2"+
		"\x131\x132\a\x2\x2\x3\x132\x3\x3\x2\x2\x2\x133\x135\x5\x12E\x98\x2\x134"+
		"\x133\x3\x2\x2\x2\x134\x135\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x13A"+
		"\x5\x11E\x90\x2\x137\x138\x5\x6\x4\x2\x138\x139\x5\x11E\x90\x2\x139\x13B"+
		"\x3\x2\x2\x2\x13A\x137\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B\x13D\x3"+
		"\x2\x2\x2\x13C\x13E\x5\b\x5\x2\x13D\x13C\x3\x2\x2\x2\x13D\x13E\x3\x2\x2"+
		"\x2\x13E\x13F\x3\x2\x2\x2\x13F\x141\x5\x11E\x90\x2\x140\x142\x5\f\a\x2"+
		"\x141\x140\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143"+
		"\x145\x5\x11E\x90\x2\x144\x146\x5\xE\b\x2\x145\x144\x3\x2\x2\x2\x145\x146"+
		"\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x149\x5\x11E\x90\x2\x148\x14A"+
		"\x5\x14\v\x2\x149\x148\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x14B\x3"+
		"\x2\x2\x2\x14B\x14D\x5\x11E\x90\x2\x14C\x14E\x5\x12E\x98\x2\x14D\x14C"+
		"\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E\x5\x3\x2\x2\x2\x14F\x150\a\xD7"+
		"\x2\x2\x150\x151\x5\x12E\x98\x2\x151\x153\x5\x110\x89\x2\x152\x154\x5"+
		"\x12E\x98\x2\x153\x152\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x156\x3"+
		"\x2\x2\x2\x155\x157\a\x46\x2\x2\x156\x155\x3\x2\x2\x2\x156\x157\x3\x2"+
		"\x2\x2\x157\x158\x3\x2\x2\x2\x158\x159\x5\x11E\x90\x2\x159\a\x3\x2\x2"+
		"\x2\x15A\x162\a;\x2\x2\x15B\x15C\x5\x12E\x98\x2\x15C\x15D\a\x103\x2\x2"+
		"\x15D\x15E\x5\x12E\x98\x2\x15E\x160\x5\xFC\x7F\x2\x15F\x161\x5\x12E\x98"+
		"\x2\x160\x15F\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161\x163\x3\x2\x2\x2"+
		"\x162\x15B\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164"+
		"\x166\x5\x11E\x90\x2\x165\x167\x5\n\x6\x2\x166\x165\x3\x2\x2\x2\x167\x168"+
		"\x3\x2\x2\x2\x168\x166\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16A\x3"+
		"\x2\x2\x2\x16A\x16B\ai\x2\x2\x16B\t\x3\x2\x2\x2\x16C\x170\x5\xFC\x7F\x2"+
		"\x16D\x16F\x5\x12E\x98\x2\x16E\x16D\x3\x2\x2\x2\x16F\x172\x3\x2\x2\x2"+
		"\x170\x16E\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x173\x3\x2\x2\x2\x172"+
		"\x170\x3\x2\x2\x2\x173\x177\a\xE2\x2\x2\x174\x176\x5\x12E\x98\x2\x175"+
		"\x174\x3\x2\x2\x2\x176\x179\x3\x2\x2\x2\x177\x175\x3\x2\x2\x2\x177\x178"+
		"\x3\x2\x2\x2\x178\x17A\x3\x2\x2\x2\x179\x177\x3\x2\x2\x2\x17A\x17D\x5"+
		"\x10E\x88\x2\x17B\x17C\a*\x2\x2\x17C\x17E\x5\x110\x89\x2\x17D\x17B\x3"+
		"\x2\x2\x2\x17D\x17E\x3\x2\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F\x180\x5\x11E"+
		"\x90\x2\x180\v\x3\x2\x2\x2\x181\x182\x5\x18\r\x2\x182\x183\x5\x11E\x90"+
		"\x2\x183\x185\x3\x2\x2\x2\x184\x181\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2"+
		"\x186\x184\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\r\x3\x2\x2\x2\x188\x18E"+
		"\x5\x12\n\x2\x189\x18A\x5\x11E\x90\x2\x18A\x18B\x5\x12\n\x2\x18B\x18D"+
		"\x3\x2\x2\x2\x18C\x189\x3\x2\x2\x2\x18D\x190\x3\x2\x2\x2\x18E\x18C\x3"+
		"\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x191\x3\x2\x2\x2\x190\x18E\x3\x2"+
		"\x2\x2\x191\x192\x5\x11E\x90\x2\x192\xF\x3\x2\x2\x2\x193\x194\a\xA0\x2"+
		"\x2\x194\x195\x5\x12E\x98\x2\x195\x196\x5\x110\x89\x2\x196\x19E\x3\x2"+
		"\x2\x2\x197\x198\a\xA2\x2\x2\x198\x199\x5\x12E\x98\x2\x199\x19A\t\x2\x2"+
		"\x2\x19A\x19E\x3\x2\x2\x2\x19B\x19E\a\xA1\x2\x2\x19C\x19E\a\xA3\x2\x2"+
		"\x19D\x193\x3\x2\x2\x2\x19D\x197\x3\x2\x2\x2\x19D\x19B\x3\x2\x2\x2\x19D"+
		"\x19C\x3\x2\x2\x2\x19E\x11\x3\x2\x2\x2\x19F\x1A8\x5.\x18\x2\x1A0\x1A8"+
		"\x5\x38\x1D\x2\x1A1\x1A8\x5@!\x2\x1A2\x1A8\x5(\x15\x2\x1A3\x1A8\x5\\/"+
		"\x2\x1A4\x1A8\x5\xC0\x61\x2\x1A5\x1A8\x5\x10\t\x2\x1A6\x1A8\x5\xB4[\x2"+
		"\x1A7\x19F\x3\x2\x2\x2\x1A7\x1A0\x3\x2\x2\x2\x1A7\x1A1\x3\x2\x2\x2\x1A7"+
		"\x1A2\x3\x2\x2\x2\x1A7\x1A3\x3\x2\x2\x2\x1A7\x1A4\x3\x2\x2\x2\x1A7\x1A5"+
		"\x3\x2\x2\x2\x1A7\x1A6\x3\x2\x2\x2\x1A8\x13\x3\x2\x2\x2\x1A9\x1AF\x5\x16"+
		"\f\x2\x1AA\x1AB\x5\x11E\x90\x2\x1AB\x1AC\x5\x16\f\x2\x1AC\x1AE\x3\x2\x2"+
		"\x2\x1AD\x1AA\x3\x2\x2\x2\x1AE\x1B1\x3\x2\x2\x2\x1AF\x1AD\x3\x2\x2\x2"+
		"\x1AF\x1B0\x3\x2\x2\x2\x1B0\x1B2\x3\x2\x2\x2\x1B1\x1AF\x3\x2\x2\x2\x1B2"+
		"\x1B3\x5\x11E\x90\x2\x1B3\x15\x3\x2\x2\x2\x1B4\x1BA\x5J&\x2\x1B5\x1BA"+
		"\x5\x80\x41\x2\x1B6\x1BA\x5\x82\x42\x2\x1B7\x1BA\x5\x84\x43\x2\x1B8\x1BA"+
		"\x5\xB0Y\x2\x1B9\x1B4\x3\x2\x2\x2\x1B9\x1B5\x3\x2\x2\x2\x1B9\x1B6\x3\x2"+
		"\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1B9\x1B8\x3\x2\x2\x2\x1BA\x17\x3\x2\x2\x2"+
		"\x1BB\x1BC\a\x37\x2\x2\x1BC\x1BD\x5\x12E\x98\x2\x1BD\x1BF\x5\xDCo\x2\x1BE"+
		"\x1C0\x5\x12E\x98\x2\x1BF\x1BE\x3\x2\x2\x2\x1BF\x1C0\x3\x2\x2\x2\x1C0"+
		"\x1C1\x3\x2\x2\x2\x1C1\x1C3\a\xE2\x2\x2\x1C2\x1C4\x5\x12E\x98\x2\x1C3"+
		"\x1C2\x3\x2\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5\x1D0"+
		"\x5\x10E\x88\x2\x1C6\x1C8\x5\x12E\x98\x2\x1C7\x1C6\x3\x2\x2\x2\x1C7\x1C8"+
		"\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CB\a)\x2\x2\x1CA\x1CC\x5\x12E"+
		"\x98\x2\x1CB\x1CA\x3\x2\x2\x2\x1CB\x1CC\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2"+
		"\x2\x1CD\x1CF\x5\x10E\x88\x2\x1CE\x1C7\x3\x2\x2\x2\x1CF\x1D2\x3\x2\x2"+
		"\x2\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x19\x3\x2\x2\x2\x1D2"+
		"\x1D0\x3\x2\x2\x2\x1D3\x1D9\x5\x1C\xF\x2\x1D4\x1D5\x5\x11E\x90\x2\x1D5"+
		"\x1D6\x5\x1C\xF\x2\x1D6\x1D8\x3\x2\x2\x2\x1D7\x1D4\x3\x2\x2\x2\x1D8\x1DB"+
		"\x3\x2\x2\x2\x1D9\x1D7\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1DC\x3"+
		"\x2\x2\x2\x1DB\x1D9\x3\x2\x2\x2\x1DC\x1DD\x5\x11E\x90\x2\x1DD\x1B\x3\x2"+
		"\x2\x2\x1DE\x221\x5\x10C\x87\x2\x1DF\x221\x5\x1E\x10\x2\x1E0\x221\x5\x18"+
		"\r\x2\x1E1\x221\x5 \x11\x2\x1E2\x221\x5\"\x12\x2\x1E3\x221\x5$\x13\x2"+
		"\x1E4\x221\x5&\x14\x2\x1E5\x221\x5(\x15\x2\x1E6\x221\x5,\x17\x2\x1E7\x221"+
		"\x5\x32\x1A\x2\x1E8\x221\x5\x30\x19\x2\x1E9\x221\x5\x34\x1B\x2\x1EA\x221"+
		"\x5\x36\x1C\x2\x1EB\x221\x5<\x1F\x2\x1EC\x221\x5> \x2\x1ED\x221\x5\x42"+
		"\"\x2\x1EE\x221\x5\xD2j\x2\x1EF\x221\x5\x44#\x2\x1F0\x221\x5\x46$\x2\x1F1"+
		"\x221\x5H%\x2\x1F2\x221\x5L\'\x2\x1F3\x221\x5N(\x2\x1F4\x221\x5P)\x2\x1F5"+
		"\x221\x5R*\x2\x1F6\x221\x5\\/\x2\x1F7\x221\x5^\x30\x2\x1F8\x221\x5`\x31"+
		"\x2\x1F9\x221\x5\x62\x32\x2\x1FA\x221\x5\x64\x33\x2\x1FB\x221\x5\x66\x34"+
		"\x2\x1FC\x221\x5h\x35\x2\x1FD\x221\x5j\x36\x2\x1FE\x221\x5l\x37\x2\x1FF"+
		"\x221\x5n\x38\x2\x200\x221\x5p\x39\x2\x201\x221\x5r:\x2\x202\x221\x5t"+
		";\x2\x203\x221\x5v<\x2\x204\x221\x5x=\x2\x205\x221\x5~@\x2\x206\x221\x5"+
		"\x86\x44\x2\x207\x221\x5\x88\x45\x2\x208\x221\x5\x8A\x46\x2\x209\x221"+
		"\x5\x8CG\x2\x20A\x221\x5\x90I\x2\x20B\x221\x5\x92J\x2\x20C\x221\x5\x94"+
		"K\x2\x20D\x221\x5\x96L\x2\x20E\x221\x5\x98M\x2\x20F\x221\x5\x9AN\x2\x210"+
		"\x221\x5\x9CO\x2\x211\x221\x5\x9EP\x2\x212\x221\x5\xA0Q\x2\x213\x221\x5"+
		"\xA8U\x2\x214\x221\x5\xAAV\x2\x215\x221\x5\xACW\x2\x216\x221\x5\xAEX\x2"+
		"\x217\x221\x5\xB2Z\x2\x218\x221\x5\xB8]\x2\x219\x221\x5\xBA^\x2\x21A\x221"+
		"\x5\xC0\x61\x2\x21B\x221\x5\xC6\x64\x2\x21C\x221\x5\xC8\x65\x2\x21D\x221"+
		"\x5\xCA\x66\x2\x21E\x221\x5\xCEh\x2\x21F\x221\x5\xD6l\x2\x220\x1DE\x3"+
		"\x2\x2\x2\x220\x1DF\x3\x2\x2\x2\x220\x1E0\x3\x2\x2\x2\x220\x1E1\x3\x2"+
		"\x2\x2\x220\x1E2\x3\x2\x2\x2\x220\x1E3\x3\x2\x2\x2\x220\x1E4\x3\x2\x2"+
		"\x2\x220\x1E5\x3\x2\x2\x2\x220\x1E6\x3\x2\x2\x2\x220\x1E7\x3\x2\x2\x2"+
		"\x220\x1E8\x3\x2\x2\x2\x220\x1E9\x3\x2\x2\x2\x220\x1EA\x3\x2\x2\x2\x220"+
		"\x1EB\x3\x2\x2\x2\x220\x1EC\x3\x2\x2\x2\x220\x1ED\x3\x2\x2\x2\x220\x1EE"+
		"\x3\x2\x2\x2\x220\x1EF\x3\x2\x2\x2\x220\x1F0\x3\x2\x2\x2\x220\x1F1\x3"+
		"\x2\x2\x2\x220\x1F2\x3\x2\x2\x2\x220\x1F3\x3\x2\x2\x2\x220\x1F4\x3\x2"+
		"\x2\x2\x220\x1F5\x3\x2\x2\x2\x220\x1F6\x3\x2\x2\x2\x220\x1F7\x3\x2\x2"+
		"\x2\x220\x1F8\x3\x2\x2\x2\x220\x1F9\x3\x2\x2\x2\x220\x1FA\x3\x2\x2\x2"+
		"\x220\x1FB\x3\x2\x2\x2\x220\x1FC\x3\x2\x2\x2\x220\x1FD\x3\x2\x2\x2\x220"+
		"\x1FE\x3\x2\x2\x2\x220\x1FF\x3\x2\x2\x2\x220\x200\x3\x2\x2\x2\x220\x201"+
		"\x3\x2\x2\x2\x220\x202\x3\x2\x2\x2\x220\x203\x3\x2\x2\x2\x220\x204\x3"+
		"\x2\x2\x2\x220\x205\x3\x2\x2\x2\x220\x206\x3\x2\x2\x2\x220\x207\x3\x2"+
		"\x2\x2\x220\x208\x3\x2\x2\x2\x220\x209\x3\x2\x2\x2\x220\x20A\x3\x2\x2"+
		"\x2\x220\x20B\x3\x2\x2\x2\x220\x20C\x3\x2\x2\x2\x220\x20D\x3\x2\x2\x2"+
		"\x220\x20E\x3\x2\x2\x2\x220\x20F\x3\x2\x2\x2\x220\x210\x3\x2\x2\x2\x220"+
		"\x211\x3\x2\x2\x2\x220\x212\x3\x2\x2\x2\x220\x213\x3\x2\x2\x2\x220\x214"+
		"\x3\x2\x2\x2\x220\x215\x3\x2\x2\x2\x220\x216\x3\x2\x2\x2\x220\x217\x3"+
		"\x2\x2\x2\x220\x218\x3\x2\x2\x2\x220\x219\x3\x2\x2\x2\x220\x21A\x3\x2"+
		"\x2\x2\x220\x21B\x3\x2\x2\x2\x220\x21C\x3\x2\x2\x2\x220\x21D\x3\x2\x2"+
		"\x2\x220\x21E\x3\x2\x2\x2\x220\x21F\x3\x2\x2\x2\x221\x1D\x3\x2\x2\x2\x222"+
		"\x223\a\x38\x2\x2\x223\x224\x5\x12E\x98\x2\x224\x22D\x5\xBC_\x2\x225\x227"+
		"\x5\x12E\x98\x2\x226\x225\x3\x2\x2\x2\x226\x227\x3\x2\x2\x2\x227\x228"+
		"\x3\x2\x2\x2\x228\x22A\a)\x2\x2\x229\x22B\x5\x12E\x98\x2\x22A\x229\x3"+
		"\x2\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B\x22C\x3\x2\x2\x2\x22C\x22E\x5\xBC"+
		"_\x2\x22D\x226\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2\x22E\x1F\x3\x2\x2\x2"+
		"\x22F\x230\a<\x2\x2\x230!\x3\x2\x2\x2\x231\x232\a\x44\x2\x2\x232\x233"+
		"\x5\x12E\x98\x2\x233\x234\x5\xBC_\x2\x234#\x3\x2\x2\x2\x235\x236\a\x45"+
		"\x2\x2\x236\x237\x5\x12E\x98\x2\x237\x238\x5\xBC_\x2\x238%\x3\x2\x2\x2"+
		"\x239\x249\aG\x2\x2\x23A\x23B\x5\x12E\x98\x2\x23B\x246\x5\xD0i\x2\x23C"+
		"\x23E\x5\x12E\x98\x2\x23D\x23C\x3\x2\x2\x2\x23D\x23E\x3\x2\x2\x2\x23E"+
		"\x23F\x3\x2\x2\x2\x23F\x241\a)\x2\x2\x240\x242\x5\x12E\x98\x2\x241\x240"+
		"\x3\x2\x2\x2\x241\x242\x3\x2\x2\x2\x242\x243\x3\x2\x2\x2\x243\x245\x5"+
		"\xD0i\x2\x244\x23D\x3\x2\x2\x2\x245\x248\x3\x2\x2\x2\x246\x244\x3\x2\x2"+
		"\x2\x246\x247\x3\x2\x2\x2\x247\x24A\x3\x2\x2\x2\x248\x246\x3\x2\x2\x2"+
		"\x249\x23A\x3\x2\x2\x2\x249\x24A\x3\x2\x2\x2\x24A\'\x3\x2\x2\x2\x24B\x24C"+
		"\x5\x116\x8C\x2\x24C\x24D\x5\x12E\x98\x2\x24D\x24F\x3\x2\x2\x2\x24E\x24B"+
		"\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x251\aH"+
		"\x2\x2\x251\x252\x5\x12E\x98\x2\x252\x25D\x5*\x16\x2\x253\x255\x5\x12E"+
		"\x98\x2\x254\x253\x3\x2\x2\x2\x254\x255\x3\x2\x2\x2\x255\x256\x3\x2\x2"+
		"\x2\x256\x258\a)\x2\x2\x257\x259\x5\x12E\x98\x2\x258\x257\x3\x2\x2\x2"+
		"\x258\x259\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2\x25A\x25C\x5*\x16\x2\x25B"+
		"\x254\x3\x2\x2\x2\x25C\x25F\x3\x2\x2\x2\x25D\x25B\x3\x2\x2\x2\x25D\x25E"+
		"\x3\x2\x2\x2\x25E)\x3\x2\x2\x2\x25F\x25D\x3\x2\x2\x2\x260\x262\x5\xFE"+
		"\x80\x2\x261\x263\x5\x114\x8B\x2\x262\x261\x3\x2\x2\x2\x262\x263\x3\x2"+
		"\x2\x2\x263\x267\x3\x2\x2\x2\x264\x265\x5\x12E\x98\x2\x265\x266\x5\x100"+
		"\x81\x2\x266\x268\x3\x2\x2\x2\x267\x264\x3\x2\x2\x2\x267\x268\x3\x2\x2"+
		"\x2\x268\x26A\x3\x2\x2\x2\x269\x26B\x5\x12E\x98\x2\x26A\x269\x3\x2\x2"+
		"\x2\x26A\x26B\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2\x26C\x26E\a\xE2\x2\x2"+
		"\x26D\x26F\x5\x12E\x98\x2\x26E\x26D\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2"+
		"\x26F\x270\x3\x2\x2\x2\x270\x271\x5\xBC_\x2\x271+\x3\x2\x2\x2\x272\x274"+
		"\aJ\x2\x2\x273\x275\x5\x12E\x98\x2\x274\x273\x3\x2\x2\x2\x274\x275\x3"+
		"\x2\x2\x2\x275\x276\x3\x2\x2\x2\x276\x278\a\xE2\x2\x2\x277\x279\x5\x12E"+
		"\x98\x2\x278\x277\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279\x27A\x3\x2\x2"+
		"\x2\x27A\x27B\x5\xBC_\x2\x27B-\x3\x2\x2\x2\x27C\x27D\x5\x116\x8C\x2\x27D"+
		"\x27E\x5\x12E\x98\x2\x27E\x280\x3\x2\x2\x2\x27F\x27C\x3\x2\x2\x2\x27F"+
		"\x280\x3\x2\x2\x2\x280\x281\x3\x2\x2\x2\x281\x282\aK\x2\x2\x282\x285\x5"+
		"\x12E\x98\x2\x283\x284\a\xAD\x2\x2\x284\x286\x5\x12E\x98\x2\x285\x283"+
		"\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2\x286\x28C\x3\x2\x2\x2\x287\x289\ax"+
		"\x2\x2\x288\x28A\x5\x114\x8B\x2\x289\x288\x3\x2\x2\x2\x289\x28A\x3\x2"+
		"\x2\x2\x28A\x28D\x3\x2\x2\x2\x28B\x28D\a\xCA\x2\x2\x28C\x287\x3\x2\x2"+
		"\x2\x28C\x28B\x3\x2\x2\x2\x28D\x28E\x3\x2\x2\x2\x28E\x28F\x5\x12E\x98"+
		"\x2\x28F\x291\x5\xFE\x80\x2\x290\x292\x5\x114\x8B\x2\x291\x290\x3\x2\x2"+
		"\x2\x291\x292\x3\x2\x2\x2\x292\x293\x3\x2\x2\x2\x293\x294\x5\x12E\x98"+
		"\x2\x294\x295\a\x8A\x2\x2\x295\x296\x5\x12E\x98\x2\x296\x29C\a\xF5\x2"+
		"\x2\x297\x298\x5\x12E\x98\x2\x298\x299\a\x35\x2\x2\x299\x29A\x5\x12E\x98"+
		"\x2\x29A\x29B\a\xF5\x2\x2\x29B\x29D\x3\x2\x2\x2\x29C\x297\x3\x2\x2\x2"+
		"\x29C\x29D\x3\x2\x2\x2\x29D\x2A2\x3\x2\x2\x2\x29E\x2A0\x5\x12E\x98\x2"+
		"\x29F\x29E\x3\x2\x2\x2\x29F\x2A0\x3\x2\x2\x2\x2A0\x2A1\x3\x2\x2\x2\x2A1"+
		"\x2A3\x5\xF2z\x2\x2A2\x29F\x3\x2\x2\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2A7"+
		"\x3\x2\x2\x2\x2A4\x2A5\x5\x12E\x98\x2\x2A5\x2A6\x5\x100\x81\x2\x2A6\x2A8"+
		"\x3\x2\x2\x2\x2A7\x2A4\x3\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8/\x3\x2\x2"+
		"\x2\x2A9\x2AA\t\x3\x2\x2\x2AA\x2AB\x5\x12E\x98\x2\x2AB\x2B6\x5\x10A\x86"+
		"\x2\x2AC\x2AE\x5\x12E\x98\x2\x2AD\x2AC\x3\x2\x2\x2\x2AD\x2AE\x3\x2\x2"+
		"\x2\x2AE\x2AF\x3\x2\x2\x2\x2AF\x2B1\a)\x2\x2\x2B0\x2B2\x5\x12E\x98\x2"+
		"\x2B1\x2B0\x3\x2\x2\x2\x2B1\x2B2\x3\x2\x2\x2\x2B2\x2B3\x3\x2\x2\x2\x2B3"+
		"\x2B5\x5\x10A\x86\x2\x2B4\x2AD\x3\x2\x2\x2\x2B5\x2B8\x3\x2\x2\x2\x2B6"+
		"\x2B4\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7\x31\x3\x2\x2\x2\x2B8\x2B6"+
		"\x3\x2\x2\x2\x2B9\x2BA\aY\x2\x2\x2BA\x2BB\x5\x12E\x98\x2\x2BB\x2BD\x5"+
		"\xBC_\x2\x2BC\x2BE\x5\x12E\x98\x2\x2BD\x2BC\x3\x2\x2\x2\x2BD\x2BE\x3\x2"+
		"\x2\x2\x2BE\x2E0\x3\x2\x2\x2\x2BF\x2C0\aY\x2\x2\x2C0\x2C1\x5\x12E\x98"+
		"\x2\x2C1\x2C3\x5\xBC_\x2\x2C2\x2C4\x5\x12E\x98\x2\x2C3\x2C2\x3\x2\x2\x2"+
		"\x2C3\x2C4\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2\x2\x2C5\x2C7\a)\x2\x2\x2C6\x2C8"+
		"\x5\x12E\x98\x2\x2C7\x2C6\x3\x2\x2\x2\x2C7\x2C8\x3\x2\x2\x2\x2C8\x2C9"+
		"\x3\x2\x2\x2\x2C9\x2CA\x5\xBC_\x2\x2CA\x2E0\x3\x2\x2\x2\x2CB\x2CC\aY\x2"+
		"\x2\x2CC\x2CD\x5\x12E\x98\x2\x2CD\x2CF\x5\xBC_\x2\x2CE\x2D0\x5\x12E\x98"+
		"\x2\x2CF\x2CE\x3\x2\x2\x2\x2CF\x2D0\x3\x2\x2\x2\x2D0\x2D1\x3\x2\x2\x2"+
		"\x2D1\x2D3\a)\x2\x2\x2D2\x2D4\x5\x12E\x98\x2\x2D3\x2D2\x3\x2\x2\x2\x2D3"+
		"\x2D4\x3\x2\x2\x2\x2D4\x2D5\x3\x2\x2\x2\x2D5\x2D7\x5\xBC_\x2\x2D6\x2D8"+
		"\x5\x12E\x98\x2\x2D7\x2D6\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D8\x2D9"+
		"\x3\x2\x2\x2\x2D9\x2DB\a)\x2\x2\x2DA\x2DC\x5\x12E\x98\x2\x2DB\x2DA\x3"+
		"\x2\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC\x2DD\x3\x2\x2\x2\x2DD\x2DE\x5\xBC"+
		"_\x2\x2DE\x2E0\x3\x2\x2\x2\x2DF\x2B9\x3\x2\x2\x2\x2DF\x2BF\x3\x2\x2\x2"+
		"\x2DF\x2CB\x3\x2\x2\x2\x2E0\x33\x3\x2\x2\x2\x2E1\x2E2\a[\x2\x2\x2E2\x2E4"+
		"\x5\x11E\x90\x2\x2E3\x2E5\x5\x1A\xE\x2\x2E4\x2E3\x3\x2\x2\x2\x2E4\x2E5"+
		"\x3\x2\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6\x2E7\a\x88\x2\x2\x2E7\x2FF\x3"+
		"\x2\x2\x2\x2E8\x2E9\a[\x2\x2\x2E9\x2EA\x5\x12E\x98\x2\x2EA\x2EB\t\x4\x2"+
		"\x2\x2EB\x2EC\x5\x12E\x98\x2\x2EC\x2ED\x5\xBC_\x2\x2ED\x2EF\x5\x11E\x90"+
		"\x2\x2EE\x2F0\x5\x1A\xE\x2\x2EF\x2EE\x3\x2\x2\x2\x2EF\x2F0\x3\x2\x2\x2"+
		"\x2F0\x2F1\x3\x2\x2\x2\x2F1\x2F2\a\x88\x2\x2\x2F2\x2FF\x3\x2\x2\x2\x2F3"+
		"\x2F4\a[\x2\x2\x2F4\x2F6\x5\x11E\x90\x2\x2F5\x2F7\x5\x1A\xE\x2\x2F6\x2F5"+
		"\x3\x2\x2\x2\x2F6\x2F7\x3\x2\x2\x2\x2F7\x2F8\x3\x2\x2\x2\x2F8\x2F9\a\x88"+
		"\x2\x2\x2F9\x2FA\x5\x12E\x98\x2\x2FA\x2FB\t\x4\x2\x2\x2FB\x2FC\x5\x12E"+
		"\x98\x2\x2FC\x2FD\x5\xBC_\x2\x2FD\x2FF\x3\x2\x2\x2\x2FE\x2E1\x3\x2\x2"+
		"\x2\x2FE\x2E8\x3\x2\x2\x2\x2FE\x2F3\x3\x2\x2\x2\x2FF\x35\x3\x2\x2\x2\x300"+
		"\x301\ai\x2\x2\x301\x37\x3\x2\x2\x2\x302\x303\x5\x116\x8C\x2\x303\x304"+
		"\x5\x12E\x98\x2\x304\x306\x3\x2\x2\x2\x305\x302\x3\x2\x2\x2\x305\x306"+
		"\x3\x2\x2\x2\x306\x307\x3\x2\x2\x2\x307\x308\aj\x2\x2\x308\x309\x5\x12E"+
		"\x98\x2\x309\x30A\x5\xFE\x80\x2\x30A\x30E\x5\x11E\x90\x2\x30B\x30D\x5"+
		":\x1E\x2\x30C\x30B\x3\x2\x2\x2\x30D\x310\x3\x2\x2\x2\x30E\x30C\x3\x2\x2"+
		"\x2\x30E\x30F\x3\x2\x2\x2\x30F\x311\x3\x2\x2\x2\x310\x30E\x3\x2\x2\x2"+
		"\x311\x312\a\x61\x2\x2\x312\x39\x3\x2\x2\x2\x313\x31C\x5\xFE\x80\x2\x314"+
		"\x316\x5\x12E\x98\x2\x315\x314\x3\x2\x2\x2\x315\x316\x3\x2\x2\x2\x316"+
		"\x317\x3\x2\x2\x2\x317\x319\a\xE2\x2\x2\x318\x31A\x5\x12E\x98\x2\x319"+
		"\x318\x3\x2\x2\x2\x319\x31A\x3\x2\x2\x2\x31A\x31B\x3\x2\x2\x2\x31B\x31D"+
		"\x5\xBC_\x2\x31C\x315\x3\x2\x2\x2\x31C\x31D\x3\x2\x2\x2\x31D\x31E\x3\x2"+
		"\x2\x2\x31E\x31F\x5\x11E\x90\x2\x31F;\x3\x2\x2\x2\x320\x321\al\x2\x2\x321"+
		"\x322\x5\x12E\x98\x2\x322\x32D\x5\xBC_\x2\x323\x325\x5\x12E\x98\x2\x324"+
		"\x323\x3\x2\x2\x2\x324\x325\x3\x2\x2\x2\x325\x326\x3\x2\x2\x2\x326\x328"+
		"\a)\x2\x2\x327\x329\x5\x12E\x98\x2\x328\x327\x3\x2\x2\x2\x328\x329\x3"+
		"\x2\x2\x2\x329\x32A\x3\x2\x2\x2\x32A\x32C\x5\xBC_\x2\x32B\x324\x3\x2\x2"+
		"\x2\x32C\x32F\x3\x2\x2\x2\x32D\x32B\x3\x2\x2\x2\x32D\x32E\x3\x2\x2\x2"+
		"\x32E=\x3\x2\x2\x2\x32F\x32D\x3\x2\x2\x2\x330\x331\am\x2\x2\x331\x332"+
		"\x5\x12E\x98\x2\x332\x333\x5\xBC_\x2\x333?\x3\x2\x2\x2\x334\x335\x5\x116"+
		"\x8C\x2\x335\x336\x5\x12E\x98\x2\x336\x338\x3\x2\x2\x2\x337\x334\x3\x2"+
		"\x2\x2\x337\x338\x3\x2\x2\x2\x338\x339\x3\x2\x2\x2\x339\x33A\an\x2\x2"+
		"\x33A\x33B\x5\x12E\x98\x2\x33B\x33D\x5\xFE\x80\x2\x33C\x33E\x5\x12E\x98"+
		"\x2\x33D\x33C\x3\x2\x2\x2\x33D\x33E\x3\x2\x2\x2\x33E\x33F\x3\x2\x2\x2"+
		"\x33F\x340\x5\xF2z\x2\x340\x41\x3\x2\x2\x2\x341\x342\t\x5\x2\x2\x342\x43"+
		"\x3\x2\x2\x2\x343\x344\au\x2\x2\x344\x345\x5\x12E\x98\x2\x345\x347\x5"+
		"\xBC_\x2\x346\x348\x5\x12E\x98\x2\x347\x346\x3\x2\x2\x2\x347\x348\x3\x2"+
		"\x2\x2\x348\x349\x3\x2\x2\x2\x349\x34B\a)\x2\x2\x34A\x34C\x5\x12E\x98"+
		"\x2\x34B\x34A\x3\x2\x2\x2\x34B\x34C\x3\x2\x2\x2\x34C\x34D\x3\x2\x2\x2"+
		"\x34D\x34E\x5\xBC_\x2\x34E\x45\x3\x2\x2\x2\x34F\x350\aw\x2\x2\x350\x351"+
		"\x5\x12E\x98\x2\x351\x352\a]\x2\x2\x352\x353\x5\x12E\x98\x2\x353\x354"+
		"\x5\xBC_\x2\x354\x355\x5\x12E\x98\x2\x355\x356\a\x80\x2\x2\x356\x357\x5"+
		"\x12E\x98\x2\x357\x358\x5\xBC_\x2\x358\x35A\x5\x11E\x90\x2\x359\x35B\x5"+
		"\x1A\xE\x2\x35A\x359\x3\x2\x2\x2\x35A\x35B\x3\x2\x2\x2\x35B\x35C\x3\x2"+
		"\x2\x2\x35C\x360\a\x96\x2\x2\x35D\x35E\x5\x12E\x98\x2\x35E\x35F\x5\xBC"+
		"_\x2\x35F\x361\x3\x2\x2\x2\x360\x35D\x3\x2\x2\x2\x360\x361\x3\x2\x2\x2"+
		"\x361G\x3\x2\x2\x2\x362\x363\aw\x2\x2\x363\x364\x5\x12E\x98\x2\x364\x366"+
		"\x5\xBC_\x2\x365\x367\x5\x12E\x98\x2\x366\x365\x3\x2\x2\x2\x366\x367\x3"+
		"\x2\x2\x2\x367\x368\x3\x2\x2\x2\x368\x36A\a\xE2\x2\x2\x369\x36B\x5\x12E"+
		"\x98\x2\x36A\x369\x3\x2\x2\x2\x36A\x36B\x3\x2\x2\x2\x36B\x36C\x3\x2\x2"+
		"\x2\x36C\x36D\x5\xBC_\x2\x36D\x36E\x5\x12E\x98\x2\x36E\x36F\a\xCF\x2\x2"+
		"\x36F\x370\x5\x12E\x98\x2\x370\x376\x5\xBC_\x2\x371\x372\x5\x12E\x98\x2"+
		"\x372\x373\a\xC7\x2\x2\x373\x374\x5\x12E\x98\x2\x374\x375\x5\xBC_\x2\x375"+
		"\x377\x3\x2\x2\x2\x376\x371\x3\x2\x2\x2\x376\x377\x3\x2\x2\x2\x377\x378"+
		"\x3\x2\x2\x2\x378\x37A\x5\x11E\x90\x2\x379\x37B\x5\x1A\xE\x2\x37A\x379"+
		"\x3\x2\x2\x2\x37A\x37B\x3\x2\x2\x2\x37B\x37C\x3\x2\x2\x2\x37C\x380\a\x96"+
		"\x2\x2\x37D\x37E\x5\x12E\x98\x2\x37E\x37F\x5\xBC_\x2\x37F\x381\x3\x2\x2"+
		"\x2\x380\x37D\x3\x2\x2\x2\x380\x381\x3\x2\x2\x2\x381I\x3\x2\x2\x2\x382"+
		"\x383\x5\x116\x8C\x2\x383\x384\x5\x12E\x98\x2\x384\x386\x3\x2\x2\x2\x385"+
		"\x382\x3\x2\x2\x2\x385\x386\x3\x2\x2\x2\x386\x389\x3\x2\x2\x2\x387\x388"+
		"\a\xC6\x2\x2\x388\x38A\x5\x12E\x98\x2\x389\x387\x3\x2\x2\x2\x389\x38A"+
		"\x3\x2\x2\x2\x38A\x38B\x3\x2\x2\x2\x38B\x38D\ax\x2\x2\x38C\x38E\x5\x12E"+
		"\x98\x2\x38D\x38C\x3\x2\x2\x2\x38D\x38E\x3\x2\x2\x2\x38E\x38F\x3\x2\x2"+
		"\x2\x38F\x391\x5\xFE\x80\x2\x390\x392\x5\x114\x8B\x2\x391\x390\x3\x2\x2"+
		"\x2\x391\x392\x3\x2\x2\x2\x392\x397\x3\x2\x2\x2\x393\x395\x5\x12E\x98"+
		"\x2\x394\x393\x3\x2\x2\x2\x394\x395\x3\x2\x2\x2\x395\x396\x3\x2\x2\x2"+
		"\x396\x398\x5\xF2z\x2\x397\x394\x3\x2\x2\x2\x397\x398\x3\x2\x2\x2\x398"+
		"\x39D\x3\x2\x2\x2\x399\x39B\x5\x12E\x98\x2\x39A\x399\x3\x2\x2\x2\x39A"+
		"\x39B\x3\x2\x2\x2\x39B\x39C\x3\x2\x2\x2\x39C\x39E\x5\x100\x81\x2\x39D"+
		"\x39A\x3\x2\x2\x2\x39D\x39E\x3\x2\x2\x2\x39E\x39F\x3\x2\x2\x2\x39F\x3A1"+
		"\x5\x11E\x90\x2\x3A0\x3A2\x5\x1A\xE\x2\x3A1\x3A0\x3\x2\x2\x2\x3A1\x3A2"+
		"\x3\x2\x2\x2\x3A2\x3A3\x3\x2\x2\x2\x3A3\x3A4\a\x62\x2\x2\x3A4K\x3\x2\x2"+
		"\x2\x3A5\x3A6\ay\x2\x2\x3A6\x3A7\x5\x12E\x98\x2\x3A7\x3A9\x5\xD0i\x2\x3A8"+
		"\x3AA\x5\x12E\x98\x2\x3A9\x3A8\x3\x2\x2\x2\x3A9\x3AA\x3\x2\x2\x2\x3AA"+
		"\x3AB\x3\x2\x2\x2\x3AB\x3AD\a)\x2\x2\x3AC\x3AE\x5\x12E\x98\x2\x3AD\x3AC"+
		"\x3\x2\x2\x2\x3AD\x3AE\x3\x2\x2\x2\x3AE\x3B0\x3\x2\x2\x2\x3AF\x3B1\x5"+
		"\xBC_\x2\x3B0\x3AF\x3\x2\x2\x2\x3B0\x3B1\x3\x2\x2\x2\x3B1\x3B3\x3\x2\x2"+
		"\x2\x3B2\x3B4\x5\x12E\x98\x2\x3B3\x3B2\x3\x2\x2\x2\x3B3\x3B4\x3\x2\x2"+
		"\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x3B7\a)\x2\x2\x3B6\x3B8\x5\x12E\x98\x2"+
		"\x3B7\x3B6\x3\x2\x2\x2\x3B7\x3B8\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2\x3B9"+
		"\x3BA\x5\xBC_\x2\x3BAM\x3\x2\x2\x2\x3BB\x3BC\a{\x2\x2\x3BC\x3BD\x5\x12E"+
		"\x98\x2\x3BD\x3BE\x5\xBC_\x2\x3BEO\x3\x2\x2\x2\x3BF\x3C0\a|\x2\x2\x3C0"+
		"\x3C1\x5\x12E\x98\x2\x3C1\x3C2\x5\xBC_\x2\x3C2Q\x3\x2\x2\x2\x3C3\x3C4"+
		"\a}\x2\x2\x3C4\x3C5\x5\x12E\x98\x2\x3C5\x3C6\x5V,\x2\x3C6\x3C7\x5\x12E"+
		"\x98\x2\x3C7\x3C8\a\xCD\x2\x2\x3C8\x3C9\x5\x12E\x98\x2\x3C9\x3CF\x5\x1C"+
		"\xF\x2\x3CA\x3CB\x5\x12E\x98\x2\x3CB\x3CC\a^\x2\x2\x3CC\x3CD\x5\x12E\x98"+
		"\x2\x3CD\x3CE\x5\x1C\xF\x2\x3CE\x3D0\x3\x2\x2\x2\x3CF\x3CA\x3\x2\x2\x2"+
		"\x3CF\x3D0\x3\x2\x2\x2\x3D0\x3DE\x3\x2\x2\x2\x3D1\x3D5\x5T+\x2\x3D2\x3D4"+
		"\x5X-\x2\x3D3\x3D2\x3\x2\x2\x2\x3D4\x3D7\x3\x2\x2\x2\x3D5\x3D3\x3\x2\x2"+
		"\x2\x3D5\x3D6\x3\x2\x2\x2\x3D6\x3D9\x3\x2\x2\x2\x3D7\x3D5\x3\x2\x2\x2"+
		"\x3D8\x3DA\x5Z.\x2\x3D9\x3D8\x3\x2\x2\x2\x3D9\x3DA\x3\x2\x2\x2\x3DA\x3DB"+
		"\x3\x2\x2\x2\x3DB\x3DC\a\x63\x2\x2\x3DC\x3DE\x3\x2\x2\x2\x3DD\x3C3\x3"+
		"\x2\x2\x2\x3DD\x3D1\x3\x2\x2\x2\x3DES\x3\x2\x2\x2\x3DF\x3E0\a}\x2\x2\x3E0"+
		"\x3E1\x5\x12E\x98\x2\x3E1\x3E2\x5V,\x2\x3E2\x3E3\x5\x12E\x98\x2\x3E3\x3E4"+
		"\a\xCD\x2\x2\x3E4\x3E6\x5\x11E\x90\x2\x3E5\x3E7\x5\x1A\xE\x2\x3E6\x3E5"+
		"\x3\x2\x2\x2\x3E6\x3E7\x3\x2\x2\x2\x3E7U\x3\x2\x2\x2\x3E8\x3E9\x5\xBC"+
		"_\x2\x3E9W\x3\x2\x2\x2\x3EA\x3EB\a_\x2\x2\x3EB\x3EC\x5\x12E\x98\x2\x3EC"+
		"\x3ED\x5V,\x2\x3ED\x3EE\x5\x12E\x98\x2\x3EE\x3EF\a\xCD\x2\x2\x3EF\x3F1"+
		"\x5\x11E\x90\x2\x3F0\x3F2\x5\x1A\xE\x2\x3F1\x3F0\x3\x2\x2\x2\x3F1\x3F2"+
		"\x3\x2\x2\x2\x3F2Y\x3\x2\x2\x2\x3F3\x3F4\a^\x2\x2\x3F4\x3F6\x5\x11E\x90"+
		"\x2\x3F5\x3F7\x5\x1A\xE\x2\x3F6\x3F5\x3\x2\x2\x2\x3F6\x3F7\x3\x2\x2\x2"+
		"\x3F7[\x3\x2\x2\x2\x3F8\x3F9\a\x7F\x2\x2\x3F9\x3FA\x5\x12E\x98\x2\x3FA"+
		"\x3FB\x5\xBC_\x2\x3FB]\x3\x2\x2\x2\x3FC\x3FD\a\x81\x2\x2\x3FD\x3FE\x5"+
		"\x12E\x98\x2\x3FE\x407\x5\xD0i\x2\x3FF\x401\x5\x12E\x98\x2\x400\x3FF\x3"+
		"\x2\x2\x2\x400\x401\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x404\a)\x2"+
		"\x2\x403\x405\x5\x12E\x98\x2\x404\x403\x3\x2\x2\x2\x404\x405\x3\x2\x2"+
		"\x2\x405\x406\x3\x2\x2\x2\x406\x408\x5\xBC_\x2\x407\x400\x3\x2\x2\x2\x408"+
		"\x409\x3\x2\x2\x2\x409\x407\x3\x2\x2\x2\x409\x40A\x3\x2\x2\x2\x40A_\x3"+
		"\x2\x2\x2\x40B\x40C\a\x84\x2\x2\x40C\x40D\x5\x12E\x98\x2\x40D\x40E\x5"+
		"\xBC_\x2\x40E\x61\x3\x2\x2\x2\x40F\x410\a\x89\x2\x2\x410\x412\x5\x12E"+
		"\x98\x2\x411\x40F\x3\x2\x2\x2\x411\x412\x3\x2\x2\x2\x412\x413\x3\x2\x2"+
		"\x2\x413\x415\x5\xDCo\x2\x414\x416\x5\x12E\x98\x2\x415\x414\x3\x2\x2\x2"+
		"\x415\x416\x3\x2\x2\x2\x416\x417\x3\x2\x2\x2\x417\x419\a\xE2\x2\x2\x418"+
		"\x41A\x5\x12E\x98\x2\x419\x418\x3\x2\x2\x2\x419\x41A\x3\x2\x2\x2\x41A"+
		"\x41B\x3\x2\x2\x2\x41B\x41C\x5\xBC_\x2\x41C\x63\x3\x2\x2\x2\x41D\x41E"+
		"\a\x8C\x2\x2\x41E\x41F\x5\x12E\x98\x2\x41F\x421\x5\xD0i\x2\x420\x422\x5"+
		"\x12E\x98\x2\x421\x420\x3\x2\x2\x2\x421\x422\x3\x2\x2\x2\x422\x423\x3"+
		"\x2\x2\x2\x423\x425\a)\x2\x2\x424\x426\x5\x12E\x98\x2\x425\x424\x3\x2"+
		"\x2\x2\x425\x426\x3\x2\x2\x2\x426\x427\x3\x2\x2\x2\x427\x428\x5\xBC_\x2"+
		"\x428\x65\x3\x2\x2\x2\x429\x42A\a\x85\x2\x2\x42A\x42B\x5\x12E\x98\x2\x42B"+
		"\x42C\x5\xBC_\x2\x42Cg\x3\x2\x2\x2\x42D\x42E\a\x86\x2\x2\x42E\x42F\x5"+
		"\x12E\x98\x2\x42F\x43F\x5\xBC_\x2\x430\x432\x5\x12E\x98\x2\x431\x430\x3"+
		"\x2\x2\x2\x431\x432\x3\x2\x2\x2\x432\x433\x3\x2\x2\x2\x433\x435\a)\x2"+
		"\x2\x434\x436\x5\x12E\x98\x2\x435\x434\x3\x2\x2\x2\x435\x436\x3\x2\x2"+
		"\x2\x436\x437\x3\x2\x2\x2\x437\x43D\x5\xBC_\x2\x438\x439\x5\x12E\x98\x2"+
		"\x439\x43A\a\xCF\x2\x2\x43A\x43B\x5\x12E\x98\x2\x43B\x43C\x5\xBC_\x2\x43C"+
		"\x43E\x3\x2\x2\x2\x43D\x438\x3\x2\x2\x2\x43D\x43E\x3\x2\x2\x2\x43E\x440"+
		"\x3\x2\x2\x2\x43F\x431\x3\x2\x2\x2\x43F\x440\x3\x2\x2\x2\x440i\x3\x2\x2"+
		"\x2\x441\x442\a\x90\x2\x2\x442\x443\x5\x12E\x98\x2\x443\x445\x5\xDCo\x2"+
		"\x444\x446\x5\x12E\x98\x2\x445\x444\x3\x2\x2\x2\x445\x446\x3\x2\x2\x2"+
		"\x446\x447\x3\x2\x2\x2\x447\x449\a\xE2\x2\x2\x448\x44A\x5\x12E\x98\x2"+
		"\x449\x448\x3\x2\x2\x2\x449\x44A\x3\x2\x2\x2\x44A\x44B\x3\x2\x2\x2\x44B"+
		"\x44C\x5\xBC_\x2\x44Ck\x3\x2\x2\x2\x44D\x44F\a\x92\x2\x2\x44E\x450\x5"+
		"\x12E\x98\x2\x44F\x44E\x3\x2\x2\x2\x44F\x450\x3\x2\x2\x2\x450\x451\x3"+
		"\x2\x2\x2\x451\x453\a\xE6\x2\x2\x452\x454\x5\x12E\x98\x2\x453\x452\x3"+
		"\x2\x2\x2\x453\x454\x3\x2\x2\x2\x454\x455\x3\x2\x2\x2\x455\x457\x5\xEC"+
		"w\x2\x456\x458\x5\x12E\x98\x2\x457\x456\x3\x2\x2\x2\x457\x458\x3\x2\x2"+
		"\x2\x458\x459\x3\x2\x2\x2\x459\x45A\a\xED\x2\x2\x45Am\x3\x2\x2\x2\x45B"+
		"\x45C\a\x93\x2\x2\x45C\x45D\x5\x12E\x98\x2\x45D\x45E\x5\xBC_\x2\x45Eo"+
		"\x3\x2\x2\x2\x45F\x460\a\x95\x2\x2\x460\x461\x5\x12E\x98\x2\x461\x462"+
		"\x5\xBC_\x2\x462\x463\x5\x12E\x98\x2\x463\x464\a:\x2\x2\x464\x465\x5\x12E"+
		"\x98\x2\x465\x466\x5\xBC_\x2\x466q\x3\x2\x2\x2\x467\x468\t\x6\x2\x2\x468"+
		"\x471\x5\x12E\x98\x2\x469\x46A\a|\x2\x2\x46A\x46B\x5\x12E\x98\x2\x46B"+
		"\x46C\x5\xBC_\x2\x46C\x472\x3\x2\x2\x2\x46D\x46E\a\xB8\x2\x2\x46E\x46F"+
		"\x5\x12E\x98\x2\x46F\x470\a\x96\x2\x2\x470\x472\x3\x2\x2\x2\x471\x469"+
		"\x3\x2\x2\x2\x471\x46D\x3\x2\x2\x2\x472s\x3\x2\x2\x2\x473\x474\a\x9B\x2"+
		"\x2\x474\x475\x5\x12E\x98\x2\x475\x476\x5\xBC_\x2\x476\x477\x5\x12E\x98"+
		"\x2\x477\x478\a|\x2\x2\x478\x479\x5\x12E\x98\x2\x479\x484\x5\xBC_\x2\x47A"+
		"\x47C\x5\x12E\x98\x2\x47B\x47A\x3\x2\x2\x2\x47B\x47C\x3\x2\x2\x2\x47C"+
		"\x47D\x3\x2\x2\x2\x47D\x47F\a)\x2\x2\x47E\x480\x5\x12E\x98\x2\x47F\x47E"+
		"\x3\x2\x2\x2\x47F\x480\x3\x2\x2\x2\x480\x481\x3\x2\x2\x2\x481\x483\x5"+
		"\xBC_\x2\x482\x47B\x3\x2\x2\x2\x483\x486\x3\x2\x2\x2\x484\x482\x3\x2\x2"+
		"\x2\x484\x485\x3\x2\x2\x2\x485u\x3\x2\x2\x2\x486\x484\x3\x2\x2\x2\x487"+
		"\x488\a\x9B\x2\x2\x488\x489\x5\x12E\x98\x2\x489\x48A\x5\xBC_\x2\x48A\x48B"+
		"\x5\x12E\x98\x2\x48B\x48C\a{\x2\x2\x48C\x48D\x5\x12E\x98\x2\x48D\x498"+
		"\x5\xBC_\x2\x48E\x490\x5\x12E\x98\x2\x48F\x48E\x3\x2\x2\x2\x48F\x490\x3"+
		"\x2\x2\x2\x490\x491\x3\x2\x2\x2\x491\x493\a)\x2\x2\x492\x494\x5\x12E\x98"+
		"\x2\x493\x492\x3\x2\x2\x2\x493\x494\x3\x2\x2\x2\x494\x495\x3\x2\x2\x2"+
		"\x495\x497\x5\xBC_\x2\x496\x48F\x3\x2\x2\x2\x497\x49A\x3\x2\x2\x2\x498"+
		"\x496\x3\x2\x2\x2\x498\x499\x3\x2\x2\x2\x499w\x3\x2\x2\x2\x49A\x498\x3"+
		"\x2\x2\x2\x49B\x49C\a\x9E\x2\x2\x49C\x49D\x5\x12E\x98\x2\x49D\x49E\x5"+
		"\xBC_\x2\x49E\x49F\x5\x12E\x98\x2\x49F\x4A0\aw\x2\x2\x4A0\x4A1\x5\x12E"+
		"\x98\x2\x4A1\x4A7\t\a\x2\x2\x4A2\x4A3\x5\x12E\x98\x2\x4A3\x4A4\a\x33\x2"+
		"\x2\x4A4\x4A5\x5\x12E\x98\x2\x4A5\x4A6\t\b\x2\x2\x4A6\x4A8\x3\x2\x2\x2"+
		"\x4A7\x4A2\x3\x2\x2\x2\x4A7\x4A8\x3\x2\x2\x2\x4A8\x4AC\x3\x2\x2\x2\x4A9"+
		"\x4AA\x5\x12E\x98\x2\x4AA\x4AB\t\t\x2\x2\x4AB\x4AD\x3\x2\x2\x2\x4AC\x4A9"+
		"\x3\x2\x2\x2\x4AC\x4AD\x3\x2\x2\x2\x4AD\x4AE\x3\x2\x2\x2\x4AE\x4AF\x5"+
		"\x12E\x98\x2\x4AF\x4B0\a:\x2\x2\x4B0\x4B1\x5\x12E\x98\x2\x4B1\x4BD\x5"+
		"\xD0i\x2\x4B2\x4B3\x5\x12E\x98\x2\x4B3\x4B5\a\x1D\x2\x2\x4B4\x4B6\x5\x12E"+
		"\x98\x2\x4B5\x4B4\x3\x2\x2\x2\x4B5\x4B6\x3\x2\x2\x2\x4B6\x4B7\x3\x2\x2"+
		"\x2\x4B7\x4B9\a\xE2\x2\x2\x4B8\x4BA\x5\x12E\x98\x2\x4B9\x4B8\x3\x2\x2"+
		"\x2\x4B9\x4BA\x3\x2\x2\x2\x4BA\x4BB\x3\x2\x2\x2\x4BB\x4BC\x5\xBC_\x2\x4BC"+
		"\x4BE\x3\x2\x2\x2\x4BD\x4B2\x3\x2\x2\x2\x4BD\x4BE\x3\x2\x2\x2\x4BEy\x3"+
		"\x2\x2\x2\x4BF\x4CC\x5|?\x2\x4C0\x4C2\x5\x12E\x98\x2\x4C1\x4C0\x3\x2\x2"+
		"\x2\x4C1\x4C2\x3\x2\x2\x2\x4C2\x4C3\x3\x2\x2\x2\x4C3\x4C5\t\n\x2\x2\x4C4"+
		"\x4C6\x5\x12E\x98\x2\x4C5\x4C4\x3\x2\x2\x2\x4C5\x4C6\x3\x2\x2\x2\x4C6"+
		"\x4C8\x3\x2\x2\x2\x4C7\x4C9\x5|?\x2\x4C8\x4C7\x3\x2\x2\x2\x4C8\x4C9\x3"+
		"\x2\x2\x2\x4C9\x4CB\x3\x2\x2\x2\x4CA\x4C1\x3\x2\x2\x2\x4CB\x4CE\x3\x2"+
		"\x2\x2\x4CC\x4CA\x3\x2\x2\x2\x4CC\x4CD\x3\x2\x2\x2\x4CD\x4E1\x3\x2\x2"+
		"\x2\x4CE\x4CC\x3\x2\x2\x2\x4CF\x4D1\x5|?\x2\x4D0\x4CF\x3\x2\x2\x2\x4D0"+
		"\x4D1\x3\x2\x2\x2\x4D1\x4DC\x3\x2\x2\x2\x4D2\x4D4\x5\x12E\x98\x2\x4D3"+
		"\x4D2\x3\x2\x2\x2\x4D3\x4D4\x3\x2\x2\x2\x4D4\x4D5\x3\x2\x2\x2\x4D5\x4D7"+
		"\t\n\x2\x2\x4D6\x4D8\x5\x12E\x98\x2\x4D7\x4D6\x3\x2\x2\x2\x4D7\x4D8\x3"+
		"\x2\x2\x2\x4D8\x4DA\x3\x2\x2\x2\x4D9\x4DB\x5|?\x2\x4DA\x4D9\x3\x2\x2\x2"+
		"\x4DA\x4DB\x3\x2\x2\x2\x4DB\x4DD\x3\x2\x2\x2\x4DC\x4D3\x3\x2\x2\x2\x4DD"+
		"\x4DE\x3\x2\x2\x2\x4DE\x4DC\x3\x2\x2\x2\x4DE\x4DF\x3\x2\x2\x2\x4DF\x4E1"+
		"\x3\x2\x2\x2\x4E0\x4BF\x3\x2\x2\x2\x4E0\x4D0\x3\x2\x2\x2\x4E1{\x3\x2\x2"+
		"\x2\x4E2\x4F4\x5\xBC_\x2\x4E3\x4F1\t\v\x2\x2\x4E4\x4E6\x5\x12E\x98\x2"+
		"\x4E5\x4E4\x3\x2\x2\x2\x4E5\x4E6\x3\x2\x2\x2\x4E6\x4E7\x3\x2\x2\x2\x4E7"+
		"\x4E9\a\xE6\x2\x2\x4E8\x4EA\x5\x12E\x98\x2\x4E9\x4E8\x3\x2\x2\x2\x4E9"+
		"\x4EA\x3\x2\x2\x2\x4EA\x4EB\x3\x2\x2\x2\x4EB\x4ED\x5\xECw\x2\x4EC\x4EE"+
		"\x5\x12E\x98\x2\x4ED\x4EC\x3\x2\x2\x2\x4ED\x4EE\x3\x2\x2\x2\x4EE\x4EF"+
		"\x3\x2\x2\x2\x4EF\x4F0\a\xED\x2\x2\x4F0\x4F2\x3\x2\x2\x2\x4F1\x4E5\x3"+
		"\x2\x2\x2\x4F1\x4F2\x3\x2\x2\x2\x4F2\x4F4\x3\x2\x2\x2\x4F3\x4E2\x3\x2"+
		"\x2\x2\x4F3\x4E3\x3\x2\x2\x2\x4F4}\x3\x2\x2\x2\x4F5\x4F6\a\xA8\x2\x2\x4F6"+
		"\x4F7\x5\x12E\x98\x2\x4F7\x4F9\x5\xD0i\x2\x4F8\x4FA\x5\x12E\x98\x2\x4F9"+
		"\x4F8\x3\x2\x2\x2\x4F9\x4FA\x3\x2\x2\x2\x4FA\x4FB\x3\x2\x2\x2\x4FB\x500"+
		"\a)\x2\x2\x4FC\x4FE\x5\x12E\x98\x2\x4FD\x4FC\x3\x2\x2\x2\x4FD\x4FE\x3"+
		"\x2\x2\x2\x4FE\x4FF\x3\x2\x2\x2\x4FF\x501\x5z>\x2\x500\x4FD\x3\x2\x2\x2"+
		"\x500\x501\x3\x2\x2\x2\x501\x7F\x3\x2\x2\x2\x502\x503\x5\x116\x8C\x2\x503"+
		"\x504\x5\x12E\x98\x2\x504\x506\x3\x2\x2\x2\x505\x502\x3\x2\x2\x2\x505"+
		"\x506\x3\x2\x2\x2\x506\x509\x3\x2\x2\x2\x507\x508\a\xC6\x2\x2\x508\x50A"+
		"\x5\x12E\x98\x2\x509\x507\x3\x2\x2\x2\x509\x50A\x3\x2\x2\x2\x50A\x50B"+
		"\x3\x2\x2\x2\x50B\x50C\a\xAA\x2\x2\x50C\x50D\x5\x12E\x98\x2\x50D\x50F"+
		"\x5\xFE\x80\x2\x50E\x510\x5\x114\x8B\x2\x50F\x50E\x3\x2\x2\x2\x50F\x510"+
		"\x3\x2\x2\x2\x510\x515\x3\x2\x2\x2\x511\x513\x5\x12E\x98\x2\x512\x511"+
		"\x3\x2\x2\x2\x512\x513\x3\x2\x2\x2\x513\x514\x3\x2\x2\x2\x514\x516\x5"+
		"\xF2z\x2\x515\x512\x3\x2\x2\x2\x515\x516\x3\x2\x2\x2\x516\x51A\x3\x2\x2"+
		"\x2\x517\x518\x5\x12E\x98\x2\x518\x519\x5\x100\x81\x2\x519\x51B\x3\x2"+
		"\x2\x2\x51A\x517\x3\x2\x2\x2\x51A\x51B\x3\x2\x2\x2\x51B\x51C\x3\x2\x2"+
		"\x2\x51C\x51E\x5\x11E\x90\x2\x51D\x51F\x5\x1A\xE\x2\x51E\x51D\x3\x2\x2"+
		"\x2\x51E\x51F\x3\x2\x2\x2\x51F\x520\x3\x2\x2\x2\x520\x521\a\x64\x2\x2"+
		"\x521\x81\x3\x2\x2\x2\x522\x523\x5\x116\x8C\x2\x523\x524\x5\x12E\x98\x2"+
		"\x524\x526\x3\x2\x2\x2\x525\x522\x3\x2\x2\x2\x525\x526\x3\x2\x2\x2\x526"+
		"\x529\x3\x2\x2\x2\x527\x528\a\xC6\x2\x2\x528\x52A\x5\x12E\x98\x2\x529"+
		"\x527\x3\x2\x2\x2\x529\x52A\x3\x2\x2\x2\x52A\x52B\x3\x2\x2\x2\x52B\x52C"+
		"\a\xAC\x2\x2\x52C\x52D\x5\x12E\x98\x2\x52D\x532\x5\xFE\x80\x2\x52E\x530"+
		"\x5\x12E\x98\x2\x52F\x52E\x3\x2\x2\x2\x52F\x530\x3\x2\x2\x2\x530\x531"+
		"\x3\x2\x2\x2\x531\x533\x5\xF2z\x2\x532\x52F\x3\x2\x2\x2\x532\x533\x3\x2"+
		"\x2\x2\x533\x534\x3\x2\x2\x2\x534\x536\x5\x11E\x90\x2\x535\x537\x5\x1A"+
		"\xE\x2\x536\x535\x3\x2\x2\x2\x536\x537\x3\x2\x2\x2\x537\x538\x3\x2\x2"+
		"\x2\x538\x539\a\x64\x2\x2\x539\x83\x3\x2\x2\x2\x53A\x53B\x5\x116\x8C\x2"+
		"\x53B\x53C\x5\x12E\x98\x2\x53C\x53E\x3\x2\x2\x2\x53D\x53A\x3\x2\x2\x2"+
		"\x53D\x53E\x3\x2\x2\x2\x53E\x541\x3\x2\x2\x2\x53F\x540\a\xC6\x2\x2\x540"+
		"\x542\x5\x12E\x98\x2\x541\x53F\x3\x2\x2\x2\x541\x542\x3\x2\x2\x2\x542"+
		"\x543\x3\x2\x2\x2\x543\x544\a\xAB\x2\x2\x544\x545\x5\x12E\x98\x2\x545"+
		"\x54A\x5\xFE\x80\x2\x546\x548\x5\x12E\x98\x2\x547\x546\x3\x2\x2\x2\x547"+
		"\x548\x3\x2\x2\x2\x548\x549\x3\x2\x2\x2\x549\x54B\x5\xF2z\x2\x54A\x547"+
		"\x3\x2\x2\x2\x54A\x54B\x3\x2\x2\x2\x54B\x54C\x3\x2\x2\x2\x54C\x54E\x5"+
		"\x11E\x90\x2\x54D\x54F\x5\x1A\xE\x2\x54E\x54D\x3\x2\x2\x2\x54E\x54F\x3"+
		"\x2\x2\x2\x54F\x550\x3\x2\x2\x2\x550\x551\a\x64\x2\x2\x551\x85\x3\x2\x2"+
		"\x2\x552\x553\a\xAF\x2\x2\x553\x554\x5\x12E\x98\x2\x554\x556\x5\xD0i\x2"+
		"\x555\x557\x5\x12E\x98\x2\x556\x555\x3\x2\x2\x2\x556\x557\x3\x2\x2\x2"+
		"\x557\x558\x3\x2\x2\x2\x558\x55A\a)\x2\x2\x559\x55B\x5\x12E\x98\x2\x55A"+
		"\x559\x3\x2\x2\x2\x55A\x55B\x3\x2\x2\x2\x55B\x55D\x3\x2\x2\x2\x55C\x55E"+
		"\x5\xBC_\x2\x55D\x55C\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x560\x3\x2"+
		"\x2\x2\x55F\x561\x5\x12E\x98\x2\x560\x55F\x3\x2\x2\x2\x560\x561\x3\x2"+
		"\x2\x2\x561\x562\x3\x2\x2\x2\x562\x564\a)\x2\x2\x563\x565\x5\x12E\x98"+
		"\x2\x564\x563\x3\x2\x2\x2\x564\x565\x3\x2\x2\x2\x565\x566\x3\x2\x2\x2"+
		"\x566\x567\x5\xBC_\x2\x567\x87\x3\x2\x2\x2\x568\x569\a\xB2\x2\x2\x569"+
		"\x56A\x5\x12E\x98\x2\x56A\x579\x5\xFE\x80\x2\x56B\x56D\x5\x12E\x98\x2"+
		"\x56C\x56B\x3\x2\x2\x2\x56C\x56D\x3\x2\x2\x2\x56D\x56E\x3\x2\x2\x2\x56E"+
		"\x570\a\xE6\x2\x2\x56F\x571\x5\x12E\x98\x2\x570\x56F\x3\x2\x2\x2\x570"+
		"\x571\x3\x2\x2\x2\x571\x576\x3\x2\x2\x2\x572\x574\x5\xECw\x2\x573\x575"+
		"\x5\x12E\x98\x2\x574\x573\x3\x2\x2\x2\x574\x575\x3\x2\x2\x2\x575\x577"+
		"\x3\x2\x2\x2\x576\x572\x3\x2\x2\x2\x576\x577\x3\x2\x2\x2\x577\x578\x3"+
		"\x2\x2\x2\x578\x57A\a\xED\x2\x2\x579\x56C\x3\x2\x2\x2\x579\x57A\x3\x2"+
		"\x2\x2\x57A\x89\x3\x2\x2\x2\x57B\x57F\a\xB1\x2\x2\x57C\x57D\x5\x12E\x98"+
		"\x2\x57D\x57E\x5\xBC_\x2\x57E\x580\x3\x2\x2\x2\x57F\x57C\x3\x2\x2\x2\x57F"+
		"\x580\x3\x2\x2\x2\x580\x8B\x3\x2\x2\x2\x581\x582\a\xB5\x2\x2\x582\x585"+
		"\x5\x12E\x98\x2\x583\x584\a\xA7\x2\x2\x584\x586\x5\x12E\x98\x2\x585\x583"+
		"\x3\x2\x2\x2\x585\x586\x3\x2\x2\x2\x586\x587\x3\x2\x2\x2\x587\x592\x5"+
		"\x8EH\x2\x588\x58A\x5\x12E\x98\x2\x589\x588\x3\x2\x2\x2\x589\x58A\x3\x2"+
		"\x2\x2\x58A\x58B\x3\x2\x2\x2\x58B\x58D\a)\x2\x2\x58C\x58E\x5\x12E\x98"+
		"\x2\x58D\x58C\x3\x2\x2\x2\x58D\x58E\x3\x2\x2\x2\x58E\x58F\x3\x2\x2\x2"+
		"\x58F\x591\x5\x8EH\x2\x590\x589\x3\x2\x2\x2\x591\x594\x3\x2\x2\x2\x592"+
		"\x590\x3\x2\x2\x2\x592\x593\x3\x2\x2\x2\x593\x8D\x3\x2\x2\x2\x594\x592"+
		"\x3\x2\x2\x2\x595\x597\x5\xDCo\x2\x596\x598\x5\x12E\x98\x2\x597\x596\x3"+
		"\x2\x2\x2\x597\x598\x3\x2\x2\x2\x598\x599\x3\x2\x2\x2\x599\x59B\a\xE6"+
		"\x2\x2\x59A\x59C\x5\x12E\x98\x2\x59B\x59A\x3\x2\x2\x2\x59B\x59C\x3\x2"+
		"\x2\x2\x59C\x59D\x3\x2\x2\x2\x59D\x59F\x5\xF8}\x2\x59E\x5A0\x5\x12E\x98"+
		"\x2\x59F\x59E\x3\x2\x2\x2\x59F\x5A0\x3\x2\x2\x2\x5A0\x5A1\x3\x2\x2\x2"+
		"\x5A1\x5A5\a\xED\x2\x2\x5A2\x5A3\x5\x12E\x98\x2\x5A3\x5A4\x5\x100\x81"+
		"\x2\x5A4\x5A6\x3\x2\x2\x2\x5A5\x5A2\x3\x2\x2\x2\x5A5\x5A6\x3\x2\x2\x2"+
		"\x5A6\x8F\x3\x2\x2\x2\x5A7\x5A8\a\xB7\x2\x2\x5A8\x91\x3\x2\x2\x2\x5A9"+
		"\x5AF\a\xB8\x2\x2\x5AA\x5AD\x5\x12E\x98\x2\x5AB\x5AE\a\x96\x2\x2\x5AC"+
		"\x5AE\x5\xFE\x80\x2\x5AD\x5AB\x3\x2\x2\x2\x5AD\x5AC\x3\x2\x2\x2\x5AE\x5B0"+
		"\x3\x2\x2\x2\x5AF\x5AA\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2\x2\x5B0\x93\x3\x2"+
		"\x2\x2\x5B1\x5B2\a\xB9\x2\x2\x5B2\x95\x3\x2\x2\x2\x5B3\x5B4\a\xBA\x2\x2"+
		"\x5B4\x5B5\x5\x12E\x98\x2\x5B5\x5B6\x5\xBC_\x2\x5B6\x97\x3\x2\x2\x2\x5B7"+
		"\x5B8\a\xBB\x2\x2\x5B8\x5B9\x5\x12E\x98\x2\x5B9\x5BB\x5\xDCo\x2\x5BA\x5BC"+
		"\x5\x12E\x98\x2\x5BB\x5BA\x3\x2\x2\x2\x5BB\x5BC\x3\x2\x2\x2\x5BC\x5BD"+
		"\x3\x2\x2\x2\x5BD\x5BF\a\xE2\x2\x2\x5BE\x5C0\x5\x12E\x98\x2\x5BF\x5BE"+
		"\x3\x2\x2\x2\x5BF\x5C0\x3\x2\x2\x2\x5C0\x5C1\x3\x2\x2\x2\x5C1\x5C2\x5"+
		"\xBC_\x2\x5C2\x99\x3\x2\x2\x2\x5C3\x5C4\a\xBC\x2\x2\x5C4\x5C5\x5\x12E"+
		"\x98\x2\x5C5\x5C7\x5\xBC_\x2\x5C6\x5C8\x5\x12E\x98\x2\x5C7\x5C6\x3\x2"+
		"\x2\x2\x5C7\x5C8\x3\x2\x2\x2\x5C8\x5C9\x3\x2\x2\x2\x5C9\x5CB\a)\x2\x2"+
		"\x5CA\x5CC\x5\x12E\x98\x2\x5CB\x5CA\x3\x2\x2\x2\x5CB\x5CC\x3\x2\x2\x2"+
		"\x5CC\x5CD\x3\x2\x2\x2\x5CD\x5CE\x5\xBC_\x2\x5CE\x9B\x3\x2\x2\x2\x5CF"+
		"\x5D0\a\xBD\x2\x2\x5D0\x5D1\x5\x12E\x98\x2\x5D1\x5D3\x5\xBC_\x2\x5D2\x5D4"+
		"\x5\x12E\x98\x2\x5D3\x5D2\x3\x2\x2\x2\x5D3\x5D4\x3\x2\x2\x2\x5D4\x5D5"+
		"\x3\x2\x2\x2\x5D5\x5D7\a)\x2\x2\x5D6\x5D8\x5\x12E\x98\x2\x5D7\x5D6\x3"+
		"\x2\x2\x2\x5D7\x5D8\x3\x2\x2\x2\x5D8\x5D9\x3\x2\x2\x2\x5D9\x5DB\x5\xBC"+
		"_\x2\x5DA\x5DC\x5\x12E\x98\x2\x5DB\x5DA\x3\x2\x2\x2\x5DB\x5DC\x3\x2\x2"+
		"\x2\x5DC\x5DD\x3\x2\x2\x2\x5DD\x5DF\a)\x2\x2\x5DE\x5E0\x5\x12E\x98\x2"+
		"\x5DF\x5DE\x3\x2\x2\x2\x5DF\x5E0\x3\x2\x2\x2\x5E0\x5E1\x3\x2\x2\x2\x5E1"+
		"\x5E3\x5\xBC_\x2\x5E2\x5E4\x5\x12E\x98\x2\x5E3\x5E2\x3\x2\x2\x2\x5E3\x5E4"+
		"\x3\x2\x2\x2\x5E4\x5E5\x3\x2\x2\x2\x5E5\x5E7\a)\x2\x2\x5E6\x5E8\x5\x12E"+
		"\x98\x2\x5E7\x5E6\x3\x2\x2\x2\x5E7\x5E8\x3\x2\x2\x2\x5E8\x5E9\x3\x2\x2"+
		"\x2\x5E9\x5EA\x5\xBC_\x2\x5EA\x9D\x3\x2\x2\x2\x5EB\x5EC\a\xBE\x2\x2\x5EC"+
		"\x5ED\x5\x12E\x98\x2\x5ED\x5EF\x5\xD0i\x2\x5EE\x5F0\x5\x12E\x98\x2\x5EF"+
		"\x5EE\x3\x2\x2\x2\x5EF\x5F0\x3\x2\x2\x2\x5F0\x5F1\x3\x2\x2\x2\x5F1\x5F3"+
		"\a)\x2\x2\x5F2\x5F4\x5\x12E\x98\x2\x5F3\x5F2\x3\x2\x2\x2\x5F3\x5F4\x3"+
		"\x2\x2\x2\x5F4\x5F5\x3\x2\x2\x2\x5F5\x5F6\x5\xBC_\x2\x5F6\x9F\x3\x2\x2"+
		"\x2\x5F7\x5F8\a\xBF\x2\x2\x5F8\x5F9\x5\x12E\x98\x2\x5F9\x5FA\a\x43\x2"+
		"\x2\x5FA\x5FB\x5\x12E\x98\x2\x5FB\x5FC\x5\xBC_\x2\x5FC\x600\x5\x11E\x90"+
		"\x2\x5FD\x5FF\x5\xA4S\x2\x5FE\x5FD\x3\x2\x2\x2\x5FF\x602\x3\x2\x2\x2\x600"+
		"\x5FE\x3\x2\x2\x2\x600\x601\x3\x2\x2\x2\x601\x603\x3\x2\x2\x2\x602\x600"+
		"\x3\x2\x2\x2\x603\x604\a\x65\x2\x2\x604\xA1\x3\x2\x2\x2\x605\x607\a\x82"+
		"\x2\x2\x606\x608\x5\x12E\x98\x2\x607\x606\x3\x2\x2\x2\x607\x608\x3\x2"+
		"\x2\x2\x608\x609\x3\x2\x2\x2\x609\x60B\x5\x104\x83\x2\x60A\x60C\x5\x12E"+
		"\x98\x2\x60B\x60A\x3\x2\x2\x2\x60B\x60C\x3\x2\x2\x2\x60C\x60D\x3\x2\x2"+
		"\x2\x60D\x60E\x5\xBC_\x2\x60E\x617\x3\x2\x2\x2\x60F\x610\x5\xBC_\x2\x610"+
		"\x611\x5\x12E\x98\x2\x611\x612\a\xCF\x2\x2\x612\x613\x5\x12E\x98\x2\x613"+
		"\x614\x5\xBC_\x2\x614\x617\x3\x2\x2\x2\x615\x617\x5\xBC_\x2\x616\x605"+
		"\x3\x2\x2\x2\x616\x60F\x3\x2\x2\x2\x616\x615\x3\x2\x2\x2\x617\xA3\x3\x2"+
		"\x2\x2\x618\x619\a\x43\x2\x2\x619\x61A\x5\x12E\x98\x2\x61A\x61B\x5\xA6"+
		"T\x2\x61B\x61D\x5\x11E\x90\x2\x61C\x61E\x5\x1A\xE\x2\x61D\x61C\x3\x2\x2"+
		"\x2\x61D\x61E\x3\x2\x2\x2\x61E\xA5\x3\x2\x2\x2\x61F\x62F\a^\x2\x2\x620"+
		"\x62B\x5\xA2R\x2\x621\x623\x5\x12E\x98\x2\x622\x621\x3\x2\x2\x2\x622\x623"+
		"\x3\x2\x2\x2\x623\x624\x3\x2\x2\x2\x624\x626\a)\x2\x2\x625\x627\x5\x12E"+
		"\x98\x2\x626\x625\x3\x2\x2\x2\x626\x627\x3\x2\x2\x2\x627\x628\x3\x2\x2"+
		"\x2\x628\x62A\x5\xA2R\x2\x629\x622\x3\x2\x2\x2\x62A\x62D\x3\x2\x2\x2\x62B"+
		"\x629\x3\x2\x2\x2\x62B\x62C\x3\x2\x2\x2\x62C\x62F\x3\x2\x2\x2\x62D\x62B"+
		"\x3\x2\x2\x2\x62E\x61F\x3\x2\x2\x2\x62E\x620\x3\x2\x2\x2\x62F\xA7\x3\x2"+
		"\x2\x2\x630\x631\a\xC0\x2\x2\x631\x632\x5\x12E\x98\x2\x632\x63B\x5\xBC"+
		"_\x2\x633\x635\x5\x12E\x98\x2\x634\x633\x3\x2\x2\x2\x634\x635\x3\x2\x2"+
		"\x2\x635\x636\x3\x2\x2\x2\x636\x638\a)\x2\x2\x637\x639\x5\x12E\x98\x2"+
		"\x638\x637\x3\x2\x2\x2\x638\x639\x3\x2\x2\x2\x639\x63A\x3\x2\x2\x2\x63A"+
		"\x63C\x5\xBC_\x2\x63B\x634\x3\x2\x2\x2\x63B\x63C\x3\x2\x2\x2\x63C\xA9"+
		"\x3\x2\x2\x2\x63D\x63E\a\xC2\x2\x2\x63E\x63F\x5\x12E\x98\x2\x63F\x641"+
		"\x5\xBC_\x2\x640\x642\x5\x12E\x98\x2\x641\x640\x3\x2\x2\x2\x641\x642\x3"+
		"\x2\x2\x2\x642\x643\x3\x2\x2\x2\x643\x645\a)\x2\x2\x644\x646\x5\x12E\x98"+
		"\x2\x645\x644\x3\x2\x2\x2\x645\x646\x3\x2\x2\x2\x646\x647\x3\x2\x2\x2"+
		"\x647\x648\x5\xBC_\x2\x648\xAB\x3\x2\x2\x2\x649\x64A\a\xC1\x2\x2\x64A"+
		"\x64B\x5\x12E\x98\x2\x64B\x64D\x5\xDCo\x2\x64C\x64E\x5\x12E\x98\x2\x64D"+
		"\x64C\x3\x2\x2\x2\x64D\x64E\x3\x2\x2\x2\x64E\x64F\x3\x2\x2\x2\x64F\x651"+
		"\a\xE2\x2\x2\x650\x652\x5\x12E\x98\x2\x651\x650\x3\x2\x2\x2\x651\x652"+
		"\x3\x2\x2\x2\x652\x653\x3\x2\x2\x2\x653\x654\x5\xBC_\x2\x654\xAD\x3\x2"+
		"\x2\x2\x655\x656\a\xC8\x2\x2\x656\xAF\x3\x2\x2\x2\x657\x658\x5\x116\x8C"+
		"\x2\x658\x659\x5\x12E\x98\x2\x659\x65B\x3\x2\x2\x2\x65A\x657\x3\x2\x2"+
		"\x2\x65A\x65B\x3\x2\x2\x2\x65B\x65E\x3\x2\x2\x2\x65C\x65D\a\xC6\x2\x2"+
		"\x65D\x65F\x5\x12E\x98\x2\x65E\x65C\x3\x2\x2\x2\x65E\x65F\x3\x2\x2\x2"+
		"\x65F\x660\x3\x2\x2\x2\x660\x662\a\xCA\x2\x2\x661\x663\x5\x12E\x98\x2"+
		"\x662\x661\x3\x2\x2\x2\x662\x663\x3\x2\x2\x2\x663\x664\x3\x2\x2\x2\x664"+
		"\x669\x5\xFE\x80\x2\x665\x667\x5\x12E\x98\x2\x666\x665\x3\x2\x2\x2\x666"+
		"\x667\x3\x2\x2\x2\x667\x668\x3\x2\x2\x2\x668\x66A\x5\xF2z\x2\x669\x666"+
		"\x3\x2\x2\x2\x669\x66A\x3\x2\x2\x2\x66A\x66B\x3\x2\x2\x2\x66B\x66D\x5"+
		"\x11E\x90\x2\x66C\x66E\x5\x1A\xE\x2\x66D\x66C\x3\x2\x2\x2\x66D\x66E\x3"+
		"\x2\x2\x2\x66E\x66F\x3\x2\x2\x2\x66F\x670\a\x66\x2\x2\x670\xB1\x3\x2\x2"+
		"\x2\x671\x673\a\xCE\x2\x2\x672\x674\x5\x12E\x98\x2\x673\x672\x3\x2\x2"+
		"\x2\x673\x674\x3\x2\x2\x2\x674\x675\x3\x2\x2\x2\x675\x677\a\xE2\x2\x2"+
		"\x676\x678\x5\x12E\x98\x2\x677\x676\x3\x2\x2\x2\x677\x678\x3\x2\x2\x2"+
		"\x678\x679\x3\x2\x2\x2\x679\x67A\x5\xBC_\x2\x67A\xB3\x3\x2\x2\x2\x67B"+
		"\x67C\x5\x116\x8C\x2\x67C\x67D\x5\x12E\x98\x2\x67D\x67F\x3\x2\x2\x2\x67E"+
		"\x67B\x3\x2\x2\x2\x67E\x67F\x3\x2\x2\x2\x67F\x680\x3\x2\x2\x2\x680\x681"+
		"\a\xD1\x2\x2\x681\x682\x5\x12E\x98\x2\x682\x683\x5\xFE\x80\x2\x683\x687"+
		"\x5\x11E\x90\x2\x684\x686\x5\xB6\\\x2\x685\x684\x3\x2\x2\x2\x686\x689"+
		"\x3\x2\x2\x2\x687\x685\x3\x2\x2\x2\x687\x688\x3\x2\x2\x2\x688\x68A\x3"+
		"\x2\x2\x2\x689\x687\x3\x2\x2\x2\x68A\x68B\ag\x2\x2\x68B\xB5\x3\x2\x2\x2"+
		"\x68C\x69B\x5\xFE\x80\x2\x68D\x68F\x5\x12E\x98\x2\x68E\x68D\x3\x2\x2\x2"+
		"\x68E\x68F\x3\x2\x2\x2\x68F\x690\x3\x2\x2\x2\x690\x695\a\xE6\x2\x2\x691"+
		"\x693\x5\x12E\x98\x2\x692\x691\x3\x2\x2\x2\x692\x693\x3\x2\x2\x2\x693"+
		"\x694\x3\x2\x2\x2\x694\x696\x5\xF8}\x2\x695\x692\x3\x2\x2\x2\x695\x696"+
		"\x3\x2\x2\x2\x696\x698\x3\x2\x2\x2\x697\x699\x5\x12E\x98\x2\x698\x697"+
		"\x3\x2\x2\x2\x698\x699\x3\x2\x2\x2\x699\x69A\x3\x2\x2\x2\x69A\x69C\a\xED"+
		"\x2\x2\x69B\x68E\x3\x2\x2\x2\x69B\x69C\x3\x2\x2\x2\x69C\x6A0\x3\x2\x2"+
		"\x2\x69D\x69E\x5\x12E\x98\x2\x69E\x69F\x5\x100\x81\x2\x69F\x6A1\x3\x2"+
		"\x2\x2\x6A0\x69D\x3\x2\x2\x2\x6A0\x6A1\x3\x2\x2\x2\x6A1\x6A2\x3\x2\x2"+
		"\x2\x6A2\x6A3\x5\x11E\x90\x2\x6A3\xB7\x3\x2\x2\x2\x6A4\x6A5\a\xD3\x2\x2"+
		"\x6A5\x6A6\x5\x12E\x98\x2\x6A6\x6A7\x5\xBC_\x2\x6A7\xB9\x3\x2\x2\x2\x6A8"+
		"\x6A9\a\xD4\x2\x2\x6A9\x6AA\x5\x12E\x98\x2\x6AA\x6BA\x5\xD0i\x2\x6AB\x6AD"+
		"\x5\x12E\x98\x2\x6AC\x6AB\x3\x2\x2\x2\x6AC\x6AD\x3\x2\x2\x2\x6AD\x6AE"+
		"\x3\x2\x2\x2\x6AE\x6B0\a)\x2\x2\x6AF\x6B1\x5\x12E\x98\x2\x6B0\x6AF\x3"+
		"\x2\x2\x2\x6B0\x6B1\x3\x2\x2\x2\x6B1\x6B2\x3\x2\x2\x2\x6B2\x6B8\x5\xBC"+
		"_\x2\x6B3\x6B4\x5\x12E\x98\x2\x6B4\x6B5\a\xCF\x2\x2\x6B5\x6B6\x5\x12E"+
		"\x98\x2\x6B6\x6B7\x5\xBC_\x2\x6B7\x6B9\x3\x2\x2\x2\x6B8\x6B3\x3\x2\x2"+
		"\x2\x6B8\x6B9\x3\x2\x2\x2\x6B9\x6BB\x3\x2\x2\x2\x6BA\x6AC\x3\x2\x2\x2"+
		"\x6BA\x6BB\x3\x2\x2\x2\x6BB\xBB\x3\x2\x2\x2\x6BC\x6BD\b_\x1\x2\x6BD\x6BF"+
		"\a\x97\x2\x2\x6BE\x6C0\x5\x12E\x98\x2\x6BF\x6BE\x3\x2\x2\x2\x6BF\x6C0"+
		"\x3\x2\x2\x2\x6C0\x6C1\x3\x2\x2\x2\x6C1\x6EA\x5\xBC_\x15\x6C2\x6C4\a\x34"+
		"\x2\x2\x6C3\x6C5\x5\x12E\x98\x2\x6C4\x6C3\x3\x2\x2\x2\x6C4\x6C5\x3\x2"+
		"\x2\x2\x6C5\x6C6\x3\x2\x2\x2\x6C6\x6EA\x5\xBC_\x12\x6C7\x6C9\x5\xDCo\x2"+
		"\x6C8\x6CA\x5\x12E\x98\x2\x6C9\x6C8\x3\x2\x2\x2\x6C9\x6CA\x3\x2\x2\x2"+
		"\x6CA\x6CB\x3\x2\x2\x2\x6CB\x6CD\a\xDF\x2\x2\x6CC\x6CE\x5\x12E\x98\x2"+
		"\x6CD\x6CC\x3\x2\x2\x2\x6CD\x6CE\x3\x2\x2\x2\x6CE\x6CF\x3\x2\x2\x2\x6CF"+
		"\x6D0\x5\xBC_\x11\x6D0\x6EA\x3\x2\x2\x2\x6D1\x6D3\a\xE8\x2\x2\x6D2\x6D4"+
		"\x5\x12E\x98\x2\x6D3\x6D2\x3\x2\x2\x2\x6D3\x6D4\x3\x2\x2\x2\x6D4\x6D5"+
		"\x3\x2\x2\x2\x6D5\x6EA\x5\xBC_\xF\x6D6\x6D8\a\x98\x2\x2\x6D7\x6D9\x5\x12E"+
		"\x98\x2\x6D8\x6D7\x3\x2\x2\x2\x6D8\x6D9\x3\x2\x2\x2\x6D9\x6DA\x3\x2\x2"+
		"\x2\x6DA\x6EA\x5\xBC_\b\x6DB\x6EA\x5\x10E\x88\x2\x6DC\x6EA\x5\xDCo\x2"+
		"\x6DD\x6DF\a\xE6\x2\x2\x6DE\x6E0\x5\x12E\x98\x2\x6DF\x6DE\x3\x2\x2\x2"+
		"\x6DF\x6E0\x3\x2\x2\x2\x6E0\x6E1\x3\x2\x2\x2\x6E1\x6E3\x5\xBC_\x2\x6E2"+
		"\x6E4\x5\x12E\x98\x2\x6E3\x6E2\x3\x2\x2\x2\x6E3\x6E4\x3\x2\x2\x2\x6E4"+
		"\x6E5\x3\x2\x2\x2\x6E5\x6E6\a\xED\x2\x2\x6E6\x6EA\x3\x2\x2\x2\x6E7\x6EA"+
		"\x5\xBE`\x2\x6E8\x6EA\x5l\x37\x2\x6E9\x6BC\x3\x2\x2\x2\x6E9\x6C2\x3\x2"+
		"\x2\x2\x6E9\x6C7\x3\x2\x2\x2\x6E9\x6D1\x3\x2\x2\x2\x6E9\x6D6\x3\x2\x2"+
		"\x2\x6E9\x6DB\x3\x2\x2\x2\x6E9\x6DC\x3\x2\x2\x2\x6E9\x6DD\x3\x2\x2\x2"+
		"\x6E9\x6E7\x3\x2\x2\x2\x6E9\x6E8\x3\x2\x2\x2\x6EA\x759\x3\x2\x2\x2\x6EB"+
		"\x6ED\f\x10\x2\x2\x6EC\x6EE\x5\x12E\x98\x2\x6ED\x6EC\x3\x2\x2\x2\x6ED"+
		"\x6EE\x3\x2\x2\x2\x6EE\x6EF\x3\x2\x2\x2\x6EF\x6F1\a\xEC\x2\x2\x6F0\x6F2"+
		"\x5\x12E\x98\x2\x6F1\x6F0\x3\x2\x2\x2\x6F1\x6F2\x3\x2\x2\x2\x6F2\x6F3"+
		"\x3\x2\x2\x2\x6F3\x758\x5\xBC_\x11\x6F4\x6F6\f\xE\x2\x2\x6F5\x6F7\x5\x12E"+
		"\x98\x2\x6F6\x6F5\x3\x2\x2\x2\x6F6\x6F7\x3\x2\x2\x2\x6F7\x6F8\x3\x2\x2"+
		"\x2\x6F8\x6FA\t\f\x2\x2\x6F9\x6FB\x5\x12E\x98\x2\x6FA\x6F9\x3\x2\x2\x2"+
		"\x6FA\x6FB\x3\x2\x2\x2\x6FB\x6FC\x3\x2\x2\x2\x6FC\x758\x5\xBC_\xF\x6FD"+
		"\x6FF\f\r\x2\x2\x6FE\x700\x5\x12E\x98\x2\x6FF\x6FE\x3\x2\x2\x2\x6FF\x700"+
		"\x3\x2\x2\x2\x700\x701\x3\x2\x2\x2\x701\x703\a\xE1\x2\x2\x702\x704\x5"+
		"\x12E\x98\x2\x703\x702\x3\x2\x2\x2\x703\x704\x3\x2\x2\x2\x704\x705\x3"+
		"\x2\x2\x2\x705\x758\x5\xBC_\xE\x706\x708\f\f\x2\x2\x707\x709\x5\x12E\x98"+
		"\x2\x708\x707\x3\x2\x2\x2\x708\x709\x3\x2\x2\x2\x709\x70A\x3\x2\x2\x2"+
		"\x70A\x70C\a\x94\x2\x2\x70B\x70D\x5\x12E\x98\x2\x70C\x70B\x3\x2\x2\x2"+
		"\x70C\x70D\x3\x2\x2\x2\x70D\x70E\x3\x2\x2\x2\x70E\x758\x5\xBC_\r\x70F"+
		"\x711\f\v\x2\x2\x710\x712\x5\x12E\x98\x2\x711\x710\x3\x2\x2\x2\x711\x712"+
		"\x3\x2\x2\x2\x712\x713\x3\x2\x2\x2\x713\x715\t\r\x2\x2\x714\x716\x5\x12E"+
		"\x98\x2\x715\x714\x3\x2\x2\x2\x715\x716\x3\x2\x2\x2\x716\x717\x3\x2\x2"+
		"\x2\x717\x758\x5\xBC_\f\x718\x71A\f\n\x2\x2\x719\x71B\x5\x12E\x98\x2\x71A"+
		"\x719\x3\x2\x2\x2\x71A\x71B\x3\x2\x2\x2\x71B\x71C\x3\x2\x2\x2\x71C\x71E"+
		"\a\x32\x2\x2\x71D\x71F\x5\x12E\x98\x2\x71E\x71D\x3\x2\x2\x2\x71E\x71F"+
		"\x3\x2\x2\x2\x71F\x720\x3\x2\x2\x2\x720\x758\x5\xBC_\v\x721\x723\f\t\x2"+
		"\x2\x722\x724\x5\x12E\x98\x2\x723\x722\x3\x2\x2\x2\x723\x724\x3\x2\x2"+
		"\x2\x724\x725\x3\x2\x2\x2\x725\x727\t\xE\x2\x2\x726\x728\x5\x12E\x98\x2"+
		"\x727\x726\x3\x2\x2\x2\x727\x728\x3\x2\x2\x2\x728\x729\x3\x2\x2\x2\x729"+
		"\x758\x5\xBC_\n\x72A\x72C\f\a\x2\x2\x72B\x72D\x5\x12E\x98\x2\x72C\x72B"+
		"\x3\x2\x2\x2\x72C\x72D\x3\x2\x2\x2\x72D\x72E\x3\x2\x2\x2\x72E\x730\a\x36"+
		"\x2\x2\x72F\x731\x5\x12E\x98\x2\x730\x72F\x3\x2\x2\x2\x730\x731\x3\x2"+
		"\x2\x2\x731\x732\x3\x2\x2\x2\x732\x758\x5\xBC_\b\x733\x735\f\x6\x2\x2"+
		"\x734\x736\x5\x12E\x98\x2\x735\x734\x3\x2\x2\x2\x735\x736\x3\x2\x2\x2"+
		"\x736\x737\x3\x2\x2\x2\x737\x739\a\xA4\x2\x2\x738\x73A\x5\x12E\x98\x2"+
		"\x739\x738\x3\x2\x2\x2\x739\x73A\x3\x2\x2\x2\x73A\x73B\x3\x2\x2\x2\x73B"+
		"\x758\x5\xBC_\a\x73C\x73E\f\x5\x2\x2\x73D\x73F\x5\x12E\x98\x2\x73E\x73D"+
		"\x3\x2\x2\x2\x73E\x73F\x3\x2\x2\x2\x73F\x740\x3\x2\x2\x2\x740\x742\a\xDE"+
		"\x2\x2\x741\x743\x5\x12E\x98\x2\x742\x741\x3\x2\x2\x2\x742\x743\x3\x2"+
		"\x2\x2\x743\x744\x3\x2\x2\x2\x744\x758\x5\xBC_\x6\x745\x747\f\x4\x2\x2"+
		"\x746\x748\x5\x12E\x98\x2\x747\x746\x3\x2\x2\x2\x747\x748\x3\x2\x2\x2"+
		"\x748\x749\x3\x2\x2\x2\x749\x74B\ak\x2\x2\x74A\x74C\x5\x12E\x98\x2\x74B"+
		"\x74A\x3\x2\x2\x2\x74B\x74C\x3\x2\x2\x2\x74C\x74D\x3\x2\x2\x2\x74D\x758"+
		"\x5\xBC_\x5\x74E\x750\f\x3\x2\x2\x74F\x751\x5\x12E\x98\x2\x750\x74F\x3"+
		"\x2\x2\x2\x750\x751\x3\x2\x2\x2\x751\x752\x3\x2\x2\x2\x752\x754\a~\x2"+
		"\x2\x753\x755\x5\x12E\x98\x2\x754\x753\x3\x2\x2\x2\x754\x755\x3\x2\x2"+
		"\x2\x755\x756\x3\x2\x2\x2\x756\x758\x5\xBC_\x4\x757\x6EB\x3\x2\x2\x2\x757"+
		"\x6F4\x3\x2\x2\x2\x757\x6FD\x3\x2\x2\x2\x757\x706\x3\x2\x2\x2\x757\x70F"+
		"\x3\x2\x2\x2\x757\x718\x3\x2\x2\x2\x757\x721\x3\x2\x2\x2\x757\x72A\x3"+
		"\x2\x2\x2\x757\x733\x3\x2\x2\x2\x757\x73C\x3\x2\x2\x2\x757\x745\x3\x2"+
		"\x2\x2\x757\x74E\x3\x2\x2\x2\x758\x75B\x3\x2\x2\x2\x759\x757\x3\x2\x2"+
		"\x2\x759\x75A\x3\x2\x2\x2\x75A\xBD\x3\x2\x2\x2\x75B\x759\x3\x2\x2\x2\x75C"+
		"\x75D\a\xD2\x2\x2\x75D\x75E\x5\x12E\x98\x2\x75E\x764\x5\xBC_\x2\x75F\x760"+
		"\x5\x12E\x98\x2\x760\x761\a\x82\x2\x2\x761\x762\x5\x12E\x98\x2\x762\x763"+
		"\x5\x112\x8A\x2\x763\x765\x3\x2\x2\x2\x764\x75F\x3\x2\x2\x2\x764\x765"+
		"\x3\x2\x2\x2\x765\xBF\x3\x2\x2\x2\x766\x76A\aZ\x2\x2\x767\x76A\a\xC6\x2"+
		"\x2\x768\x76A\x5\x116\x8C\x2\x769\x766\x3\x2\x2\x2\x769\x767\x3\x2\x2"+
		"\x2\x769\x768\x3\x2\x2\x2\x76A\x76B\x3\x2\x2\x2\x76B\x76E\x5\x12E\x98"+
		"\x2\x76C\x76D\a\xDC\x2\x2\x76D\x76F\x5\x12E\x98\x2\x76E\x76C\x3\x2\x2"+
		"\x2\x76E\x76F\x3\x2\x2\x2\x76F\x770\x3\x2\x2\x2\x770\x771\x5\xC2\x62\x2"+
		"\x771\xC1\x3\x2\x2\x2\x772\x77D\x5\xC4\x63\x2\x773\x775\x5\x12E\x98\x2"+
		"\x774\x773\x3\x2\x2\x2\x774\x775\x3\x2\x2\x2\x775\x776\x3\x2\x2\x2\x776"+
		"\x778\a)\x2\x2\x777\x779\x5\x12E\x98\x2\x778\x777\x3\x2\x2\x2\x778\x779"+
		"\x3\x2\x2\x2\x779\x77A\x3\x2\x2\x2\x77A\x77C\x5\xC4\x63\x2\x77B\x774\x3"+
		"\x2\x2\x2\x77C\x77F\x3\x2\x2\x2\x77D\x77B\x3\x2\x2\x2\x77D\x77E\x3\x2"+
		"\x2\x2\x77E\xC3\x3\x2\x2\x2\x77F\x77D\x3\x2\x2\x2\x780\x792\x5\xFE\x80"+
		"\x2\x781\x783\x5\x12E\x98\x2\x782\x781\x3\x2\x2\x2\x782\x783\x3\x2\x2"+
		"\x2\x783\x784\x3\x2\x2\x2\x784\x786\a\xE6\x2\x2\x785\x787\x5\x12E\x98"+
		"\x2\x786\x785\x3\x2\x2\x2\x786\x787\x3\x2\x2\x2\x787\x78C\x3\x2\x2\x2"+
		"\x788\x78A\x5\xF8}\x2\x789\x78B\x5\x12E\x98\x2\x78A\x789\x3\x2\x2\x2\x78A"+
		"\x78B\x3\x2\x2\x2\x78B\x78D\x3\x2\x2\x2\x78C\x788\x3\x2\x2\x2\x78C\x78D"+
		"\x3\x2\x2\x2\x78D\x78E\x3\x2\x2\x2\x78E\x790\a\xED\x2\x2\x78F\x791\x5"+
		"\x12E\x98\x2\x790\x78F\x3\x2\x2\x2\x790\x791\x3\x2\x2\x2\x791\x793\x3"+
		"\x2\x2\x2\x792\x782\x3\x2\x2\x2\x792\x793\x3\x2\x2\x2\x793\x795\x3\x2"+
		"\x2\x2\x794\x796\x5\x114\x8B\x2\x795\x794\x3\x2\x2\x2\x795\x796\x3\x2"+
		"\x2\x2\x796\x79A\x3\x2\x2\x2\x797\x798\x5\x12E\x98\x2\x798\x799\x5\x100"+
		"\x81\x2\x799\x79B\x3\x2\x2\x2\x79A\x797\x3\x2\x2\x2\x79A\x79B\x3\x2\x2"+
		"\x2\x79B\xC5\x3\x2\x2\x2\x79C\x79D\a\xD9\x2\x2\x79D\x79E\x5\x12E\x98\x2"+
		"\x79E\x79F\x5\xBC_\x2\x79F\x7A1\x5\x11E\x90\x2\x7A0\x7A2\x5\x1A\xE\x2"+
		"\x7A1\x7A0\x3\x2\x2\x2\x7A1\x7A2\x3\x2\x2\x2\x7A2\x7A3\x3\x2\x2\x2\x7A3"+
		"\x7A4\a\xD8\x2\x2\x7A4\xC7\x3\x2\x2\x2\x7A5\x7A6\a\xDA\x2\x2\x7A6\x7A7"+
		"\x5\x12E\x98\x2\x7A7\x7A9\x5\xD0i\x2\x7A8\x7AA\x5\x12E\x98\x2\x7A9\x7A8"+
		"\x3\x2\x2\x2\x7A9\x7AA\x3\x2\x2\x2\x7AA\x7AB\x3\x2\x2\x2\x7AB\x7AD\a)"+
		"\x2\x2\x7AC\x7AE\x5\x12E\x98\x2\x7AD\x7AC\x3\x2\x2\x2\x7AD\x7AE\x3\x2"+
		"\x2\x2\x7AE\x7AF\x3\x2\x2\x2\x7AF\x7B0\x5\xBC_\x2\x7B0\xC9\x3\x2\x2\x2"+
		"\x7B1\x7B2\a\xDB\x2\x2\x7B2\x7B3\x5\x12E\x98\x2\x7B3\x7B4\x5\xCCg\x2\x7B4"+
		"\x7B6\x5\x11E\x90\x2\x7B5\x7B7\x5\x1A\xE\x2\x7B6\x7B5\x3\x2\x2\x2\x7B6"+
		"\x7B7\x3\x2\x2\x2\x7B7\x7B8\x3\x2\x2\x2\x7B8\x7B9\ah\x2\x2\x7B9\xCB\x3"+
		"\x2\x2\x2\x7BA\x7BB\x5\xBC_\x2\x7BB\xCD\x3\x2\x2\x2\x7BC\x7BD\a\xDD\x2"+
		"\x2\x7BD\x7BE\x5\x12E\x98\x2\x7BE\x7C0\x5\xD0i\x2\x7BF\x7C1\x5\x12E\x98"+
		"\x2\x7C0\x7BF\x3\x2\x2\x2\x7C0\x7C1\x3\x2\x2\x2\x7C1\x7C2\x3\x2\x2\x2"+
		"\x7C2\x7C7\a)\x2\x2\x7C3\x7C5\x5\x12E\x98\x2\x7C4\x7C3\x3\x2\x2\x2\x7C4"+
		"\x7C5\x3\x2\x2\x2\x7C5\x7C6\x3\x2\x2\x2\x7C6\x7C8\x5z>\x2\x7C7\x7C4\x3"+
		"\x2\x2\x2\x7C7\x7C8\x3\x2\x2\x2\x7C8\xCF\x3\x2\x2\x2\x7C9\x7CB\a.\x2\x2"+
		"\x7CA\x7C9\x3\x2\x2\x2\x7CA\x7CB\x3\x2\x2\x2\x7CB\x7CC\x3\x2\x2\x2\x7CC"+
		"\x7CD\x5\xBC_\x2\x7CD\xD1\x3\x2\x2\x2\x7CE\x7CF\a\x42\x2\x2\x7CF\x7D0"+
		"\x5\x12E\x98\x2\x7D0\x7D1\x5\xD4k\x2\x7D1\xD3\x3\x2\x2\x2\x7D2\x7D4\x5"+
		"\xDCo\x2\x7D3\x7D2\x3\x2\x2\x2\x7D3\x7D4\x3\x2\x2\x2\x7D4\x7D5\x3\x2\x2"+
		"\x2\x7D5\x7D6\a-\x2\x2\x7D6\x7D8\x5\xFE\x80\x2\x7D7\x7D9\x5\x114\x8B\x2"+
		"\x7D8\x7D7\x3\x2\x2\x2\x7D8\x7D9\x3\x2\x2\x2\x7D9\x7E7\x3\x2\x2\x2\x7DA"+
		"\x7DC\x5\x12E\x98\x2\x7DB\x7DA\x3\x2\x2\x2\x7DB\x7DC\x3\x2\x2\x2\x7DC"+
		"\x7DD\x3\x2\x2\x2\x7DD\x7DF\a\xE6\x2\x2\x7DE\x7E0\x5\x12E\x98\x2\x7DF"+
		"\x7DE\x3\x2\x2\x2\x7DF\x7E0\x3\x2\x2\x2\x7E0\x7E1\x3\x2\x2\x2\x7E1\x7E3"+
		"\x5\xECw\x2\x7E2\x7E4\x5\x12E\x98\x2\x7E3\x7E2\x3\x2\x2\x2\x7E3\x7E4\x3"+
		"\x2\x2\x2\x7E4\x7E5\x3\x2\x2\x2\x7E5\x7E6\a\xED\x2\x2\x7E6\x7E8\x3\x2"+
		"\x2\x2\x7E7\x7DB\x3\x2\x2\x2\x7E7\x7E8\x3\x2\x2\x2\x7E8\x7F2\x3\x2\x2"+
		"\x2\x7E9\x7EB\x5\x12E\x98\x2\x7EA\x7E9\x3\x2\x2\x2\x7EA\x7EB\x3\x2\x2"+
		"\x2\x7EB\x7EC\x3\x2\x2\x2\x7EC\x7ED\a\xE6\x2\x2\x7ED\x7EE\x5\xF8}\x2\x7EE"+
		"\x7EF\a\xED\x2\x2\x7EF\x7F1\x3\x2\x2\x2\x7F0\x7EA\x3\x2\x2\x2\x7F1\x7F4"+
		"\x3\x2\x2\x2\x7F2\x7F0\x3\x2\x2\x2\x7F2\x7F3\x3\x2\x2\x2\x7F3\x815\x3"+
		"\x2\x2\x2\x7F4\x7F2\x3\x2\x2\x2\x7F5\x7F7\x5\xFE\x80\x2\x7F6\x7F8\x5\x114"+
		"\x8B\x2\x7F7\x7F6\x3\x2\x2\x2\x7F7\x7F8\x3\x2\x2\x2\x7F8\x806\x3\x2\x2"+
		"\x2\x7F9\x7FB\x5\x12E\x98\x2\x7FA\x7F9\x3\x2\x2\x2\x7FA\x7FB\x3\x2\x2"+
		"\x2\x7FB\x7FC\x3\x2\x2\x2\x7FC\x7FE\a\xE6\x2\x2\x7FD\x7FF\x5\x12E\x98"+
		"\x2\x7FE\x7FD\x3\x2\x2\x2\x7FE\x7FF\x3\x2\x2\x2\x7FF\x800\x3\x2\x2\x2"+
		"\x800\x802\x5\xECw\x2\x801\x803\x5\x12E\x98\x2\x802\x801\x3\x2\x2\x2\x802"+
		"\x803\x3\x2\x2\x2\x803\x804\x3\x2\x2\x2\x804\x805\a\xED\x2\x2\x805\x807"+
		"\x3\x2\x2\x2\x806\x7FA\x3\x2\x2\x2\x806\x807\x3\x2\x2\x2\x807\x811\x3"+
		"\x2\x2\x2\x808\x80A\x5\x12E\x98\x2\x809\x808\x3\x2\x2\x2\x809\x80A\x3"+
		"\x2\x2\x2\x80A\x80B\x3\x2\x2\x2\x80B\x80C\a\xE6\x2\x2\x80C\x80D\x5\xF8"+
		"}\x2\x80D\x80E\a\xED\x2\x2\x80E\x810\x3\x2\x2\x2\x80F\x809\x3\x2\x2\x2"+
		"\x810\x813\x3\x2\x2\x2\x811\x80F\x3\x2\x2\x2\x811\x812\x3\x2\x2\x2\x812"+
		"\x815\x3\x2\x2\x2\x813\x811\x3\x2\x2\x2\x814\x7D3\x3\x2\x2\x2\x814\x7F5"+
		"\x3\x2\x2\x2\x815\xD5\x3\x2\x2\x2\x816\x819\x5\xD8m\x2\x817\x819\x5\xDA"+
		"n\x2\x818\x816\x3\x2\x2\x2\x818\x817\x3\x2\x2\x2\x819\xD7\x3\x2\x2\x2"+
		"\x81A\x81C\x5\xDCo\x2\x81B\x81A\x3\x2\x2\x2\x81B\x81C\x3\x2\x2\x2\x81C"+
		"\x81E\x3\x2\x2\x2\x81D\x81F\x5\x12E\x98\x2\x81E\x81D\x3\x2\x2\x2\x81E"+
		"\x81F\x3\x2\x2\x2\x81F\x820\x3\x2\x2\x2\x820\x822\a-\x2\x2\x821\x823\x5"+
		"\x12E\x98\x2\x822\x821\x3\x2\x2\x2\x822\x823\x3\x2\x2\x2\x823\x824\x3"+
		"\x2\x2\x2\x824\x826\x5\xFE\x80\x2\x825\x827\x5\x114\x8B\x2\x826\x825\x3"+
		"\x2\x2\x2\x826\x827\x3\x2\x2\x2\x827\x82B\x3\x2\x2\x2\x828\x829\x5\x12E"+
		"\x98\x2\x829\x82A\x5\xECw\x2\x82A\x82C\x3\x2\x2\x2\x82B\x828\x3\x2\x2"+
		"\x2\x82B\x82C\x3\x2\x2\x2\x82C\x831\x3\x2\x2\x2\x82D\x82F\x5\x12E\x98"+
		"\x2\x82E\x82D\x3\x2\x2\x2\x82E\x82F\x3\x2\x2\x2\x82F\x830\x3\x2\x2\x2"+
		"\x830\x832\x5\xF0y\x2\x831\x82E\x3\x2\x2\x2\x831\x832\x3\x2\x2\x2\x832"+
		"\x83C\x3\x2\x2\x2\x833\x835\x5\x12E\x98\x2\x834\x833\x3\x2\x2\x2\x834"+
		"\x835\x3\x2\x2\x2\x835\x836\x3\x2\x2\x2\x836\x837\a\xE6\x2\x2\x837\x838"+
		"\x5\xF8}\x2\x838\x839\a\xED\x2\x2\x839\x83B\x3\x2\x2\x2\x83A\x834\x3\x2"+
		"\x2\x2\x83B\x83E\x3\x2\x2\x2\x83C\x83A\x3\x2\x2\x2\x83C\x83D\x3\x2\x2"+
		"\x2\x83D\xD9\x3\x2\x2\x2\x83E\x83C\x3\x2\x2\x2\x83F\x843\x5\xFE\x80\x2"+
		"\x840\x841\x5\x12E\x98\x2\x841\x842\x5\xECw\x2\x842\x844\x3\x2\x2\x2\x843"+
		"\x840\x3\x2\x2\x2\x843\x844\x3\x2\x2\x2\x844\x84E\x3\x2\x2\x2\x845\x847"+
		"\x5\x12E\x98\x2\x846\x845\x3\x2\x2\x2\x846\x847\x3\x2\x2\x2\x847\x848"+
		"\x3\x2\x2\x2\x848\x849\a\xE6\x2\x2\x849\x84A\x5\xF8}\x2\x84A\x84B\a\xED"+
		"\x2\x2\x84B\x84D\x3\x2\x2\x2\x84C\x846\x3\x2\x2\x2\x84D\x850\x3\x2\x2"+
		"\x2\x84E\x84C\x3\x2\x2\x2\x84E\x84F\x3\x2\x2\x2\x84F\xDB\x3\x2\x2\x2\x850"+
		"\x84E\x3\x2\x2\x2\x851\x856\x5\xE6t\x2\x852\x856\x5\xDEp\x2\x853\x856"+
		"\x5\xE0q\x2\x854\x856\x5\xEAv\x2\x855\x851\x3\x2\x2\x2\x855\x852\x3\x2"+
		"\x2\x2\x855\x853\x3\x2\x2\x2\x855\x854\x3\x2\x2\x2\x856\xDD\x3\x2\x2\x2"+
		"\x857\x859\x5\xFE\x80\x2\x858\x85A\x5\x114\x8B\x2\x859\x858\x3\x2\x2\x2"+
		"\x859\x85A\x3\x2\x2\x2\x85A\x85F\x3\x2\x2\x2\x85B\x85D\x5\x12E\x98\x2"+
		"\x85C\x85B\x3\x2\x2\x2\x85C\x85D\x3\x2\x2\x2\x85D\x85E\x3\x2\x2\x2\x85E"+
		"\x860\x5\xF0y\x2\x85F\x85C\x3\x2\x2\x2\x85F\x860\x3\x2\x2\x2\x860\x86A"+
		"\x3\x2\x2\x2\x861\x863\x5\x12E\x98\x2\x862\x861\x3\x2\x2\x2\x862\x863"+
		"\x3\x2\x2\x2\x863\x864\x3\x2\x2\x2\x864\x865\a\xE6\x2\x2\x865\x866\x5"+
		"\xF8}\x2\x866\x867\a\xED\x2\x2\x867\x869\x3\x2\x2\x2\x868\x862\x3\x2\x2"+
		"\x2\x869\x86C\x3\x2\x2\x2\x86A\x868\x3\x2\x2\x2\x86A\x86B\x3\x2\x2\x2"+
		"\x86B\xDF\x3\x2\x2\x2\x86C\x86A\x3\x2\x2\x2\x86D\x870\x5\xFE\x80\x2\x86E"+
		"\x870\x5\x102\x82\x2\x86F\x86D\x3\x2\x2\x2\x86F\x86E\x3\x2\x2\x2\x870"+
		"\x872\x3\x2\x2\x2\x871\x873\x5\x114\x8B\x2\x872\x871\x3\x2\x2\x2\x872"+
		"\x873\x3\x2\x2\x2\x873\x875\x3\x2\x2\x2\x874\x876\x5\x12E\x98\x2\x875"+
		"\x874\x3\x2\x2\x2\x875\x876\x3\x2\x2\x2\x876\x877\x3\x2\x2\x2\x877\x879"+
		"\a\xE6\x2\x2\x878\x87A\x5\x12E\x98\x2\x879\x878\x3\x2\x2\x2\x879\x87A"+
		"\x3\x2\x2\x2\x87A\x87F\x3\x2\x2\x2\x87B\x87D\x5\xECw\x2\x87C\x87E\x5\x12E"+
		"\x98\x2\x87D\x87C\x3\x2\x2\x2\x87D\x87E\x3\x2\x2\x2\x87E\x880\x3\x2\x2"+
		"\x2\x87F\x87B\x3\x2\x2\x2\x87F\x880\x3\x2\x2\x2\x880\x881\x3\x2\x2\x2"+
		"\x881\x886\a\xED\x2\x2\x882\x884\x5\x12E\x98\x2\x883\x882\x3\x2\x2\x2"+
		"\x883\x884\x3\x2\x2\x2\x884\x885\x3\x2\x2\x2\x885\x887\x5\xF0y\x2\x886"+
		"\x883\x3\x2\x2\x2\x886\x887\x3\x2\x2\x2\x887\x891\x3\x2\x2\x2\x888\x88A"+
		"\x5\x12E\x98\x2\x889\x888\x3\x2\x2\x2\x889\x88A\x3\x2\x2\x2\x88A\x88B"+
		"\x3\x2\x2\x2\x88B\x88C\a\xE6\x2\x2\x88C\x88D\x5\xF8}\x2\x88D\x88E\a\xED"+
		"\x2\x2\x88E\x890\x3\x2\x2\x2\x88F\x889\x3\x2\x2\x2\x890\x893\x3\x2\x2"+
		"\x2\x891\x88F\x3\x2\x2\x2\x891\x892\x3\x2\x2\x2\x892\xE1\x3\x2\x2\x2\x893"+
		"\x891\x3\x2\x2\x2\x894\x896\x5\xFC\x7F\x2\x895\x897\x5\x114\x8B\x2\x896"+
		"\x895\x3\x2\x2\x2\x896\x897\x3\x2\x2\x2\x897\x89C\x3\x2\x2\x2\x898\x89A"+
		"\x5\x12E\x98\x2\x899\x898\x3\x2\x2\x2\x899\x89A\x3\x2\x2\x2\x89A\x89B"+
		"\x3\x2\x2\x2\x89B\x89D\x5\xF0y\x2\x89C\x899\x3\x2\x2\x2\x89C\x89D\x3\x2"+
		"\x2\x2\x89D\x8A7\x3\x2\x2\x2\x89E\x8A0\x5\x12E\x98\x2\x89F\x89E\x3\x2"+
		"\x2\x2\x89F\x8A0\x3\x2\x2\x2\x8A0\x8A1\x3\x2\x2\x2\x8A1\x8A2\a\xE6\x2"+
		"\x2\x8A2\x8A3\x5\xF8}\x2\x8A3\x8A4\a\xED\x2\x2\x8A4\x8A6\x3\x2\x2\x2\x8A5"+
		"\x89F\x3\x2\x2\x2\x8A6\x8A9\x3\x2\x2\x2\x8A7\x8A5\x3\x2\x2\x2\x8A7\x8A8"+
		"\x3\x2\x2\x2\x8A8\xE3\x3\x2\x2\x2\x8A9\x8A7\x3\x2\x2\x2\x8AA\x8AD\x5\xFC"+
		"\x7F\x2\x8AB\x8AD\x5\x102\x82\x2\x8AC\x8AA\x3\x2\x2\x2\x8AC\x8AB\x3\x2"+
		"\x2\x2\x8AD\x8AF\x3\x2\x2\x2\x8AE\x8B0\x5\x114\x8B\x2\x8AF\x8AE\x3\x2"+
		"\x2\x2\x8AF\x8B0\x3\x2\x2\x2\x8B0\x8B2\x3\x2\x2\x2\x8B1\x8B3\x5\x12E\x98"+
		"\x2\x8B2\x8B1\x3\x2\x2\x2\x8B2\x8B3\x3\x2\x2\x2\x8B3\x8B4\x3\x2\x2\x2"+
		"\x8B4\x8B6\a\xE6\x2\x2\x8B5\x8B7\x5\x12E\x98\x2\x8B6\x8B5\x3\x2\x2\x2"+
		"\x8B6\x8B7\x3\x2\x2\x2\x8B7\x8BC\x3\x2\x2\x2\x8B8\x8BA\x5\xECw\x2\x8B9"+
		"\x8BB\x5\x12E\x98\x2\x8BA\x8B9\x3\x2\x2\x2\x8BA\x8BB\x3\x2\x2\x2\x8BB"+
		"\x8BD\x3\x2\x2\x2\x8BC\x8B8\x3\x2\x2\x2\x8BC\x8BD\x3\x2\x2\x2\x8BD\x8BE"+
		"\x3\x2\x2\x2\x8BE\x8C3\a\xED\x2\x2\x8BF\x8C1\x5\x12E\x98\x2\x8C0\x8BF"+
		"\x3\x2\x2\x2\x8C0\x8C1\x3\x2\x2\x2\x8C1\x8C2\x3\x2\x2\x2\x8C2\x8C4\x5"+
		"\xF0y\x2\x8C3\x8C0\x3\x2\x2\x2\x8C3\x8C4\x3\x2\x2\x2\x8C4\x8CE\x3\x2\x2"+
		"\x2\x8C5\x8C7\x5\x12E\x98\x2\x8C6\x8C5\x3\x2\x2\x2\x8C6\x8C7\x3\x2\x2"+
		"\x2\x8C7\x8C8\x3\x2\x2\x2\x8C8\x8C9\a\xE6\x2\x2\x8C9\x8CA\x5\xF8}\x2\x8CA"+
		"\x8CB\a\xED\x2\x2\x8CB\x8CD\x3\x2\x2\x2\x8CC\x8C6\x3\x2\x2\x2\x8CD\x8D0"+
		"\x3\x2\x2\x2\x8CE\x8CC\x3\x2\x2\x2\x8CE\x8CF\x3\x2\x2\x2\x8CF\xE5\x3\x2"+
		"\x2\x2\x8D0\x8CE\x3\x2\x2\x2\x8D1\x8D4\x5\xDEp\x2\x8D2\x8D4\x5\xE0q\x2"+
		"\x8D3\x8D1\x3\x2\x2\x2\x8D3\x8D2\x3\x2\x2\x2\x8D3\x8D4\x3\x2\x2\x2\x8D4"+
		"\x8D9\x3\x2\x2\x2\x8D5\x8D7\x5\xE8u\x2\x8D6\x8D8\x5\x12E\x98\x2\x8D7\x8D6"+
		"\x3\x2\x2\x2\x8D7\x8D8\x3\x2\x2\x2\x8D8\x8DA\x3\x2\x2\x2\x8D9\x8D5\x3"+
		"\x2\x2\x2\x8DA\x8DB\x3\x2\x2\x2\x8DB\x8D9\x3\x2\x2\x2\x8DB\x8DC\x3\x2"+
		"\x2\x2\x8DC\x8E1\x3\x2\x2\x2\x8DD\x8DF\x5\x12E\x98\x2\x8DE\x8DD\x3\x2"+
		"\x2\x2\x8DE\x8DF\x3\x2\x2\x2\x8DF\x8E0\x3\x2\x2\x2\x8E0\x8E2\x5\xF0y\x2"+
		"\x8E1\x8DE\x3\x2\x2\x2\x8E1\x8E2\x3\x2\x2\x2\x8E2\x8EC\x3\x2\x2\x2\x8E3"+
		"\x8E5\x5\x12E\x98\x2\x8E4\x8E3\x3\x2\x2\x2\x8E4\x8E5\x3\x2\x2\x2\x8E5"+
		"\x8E6\x3\x2\x2\x2\x8E6\x8E7\a\xE6\x2\x2\x8E7\x8E8\x5\xF8}\x2\x8E8\x8E9"+
		"\a\xED\x2\x2\x8E9\x8EB\x3\x2\x2\x2\x8EA\x8E4\x3\x2\x2\x2\x8EB\x8EE\x3"+
		"\x2\x2\x2\x8EC\x8EA\x3\x2\x2\x2\x8EC\x8ED\x3\x2\x2\x2\x8ED\xE7\x3\x2\x2"+
		"\x2\x8EE\x8EC\x3\x2\x2\x2\x8EF\x8F1\t\xF\x2\x2\x8F0\x8F2\x5\x12E\x98\x2"+
		"\x8F1\x8F0\x3\x2\x2\x2\x8F1\x8F2\x3\x2\x2\x2\x8F2\x8F5\x3\x2\x2\x2\x8F3"+
		"\x8F6\x5\xE2r\x2\x8F4\x8F6\x5\xE4s\x2\x8F5\x8F3\x3\x2\x2\x2\x8F5\x8F4"+
		"\x3\x2\x2\x2\x8F6\xE9\x3\x2\x2\x2\x8F7\x8F9\x5\x12E\x98\x2\x8F8\x8F7\x3"+
		"\x2\x2\x2\x8F8\x8F9\x3\x2\x2\x2\x8F9\x8FA\x3\x2\x2\x2\x8FA\x8FB\x5\xF0"+
		"y\x2\x8FB\xEB\x3\x2\x2\x2\x8FC\x8FE\x5\xEEx\x2\x8FD\x8FC\x3\x2\x2\x2\x8FD"+
		"\x8FE\x3\x2\x2\x2\x8FE\x900\x3\x2\x2\x2\x8FF\x901\x5\x12E\x98\x2\x900"+
		"\x8FF\x3\x2\x2\x2\x900\x901\x3\x2\x2\x2\x901\x902\x3\x2\x2\x2\x902\x904"+
		"\t\n\x2\x2\x903\x905\x5\x12E\x98\x2\x904\x903\x3\x2\x2\x2\x904\x905\x3"+
		"\x2\x2\x2\x905\x907\x3\x2\x2\x2\x906\x8FD\x3\x2\x2\x2\x907\x90A\x3\x2"+
		"\x2\x2\x908\x906\x3\x2\x2\x2\x908\x909\x3\x2\x2\x2\x909\x90B\x3\x2\x2"+
		"\x2\x90A\x908\x3\x2\x2\x2\x90B\x918\x5\xEEx\x2\x90C\x90E\x5\x12E\x98\x2"+
		"\x90D\x90C\x3\x2\x2\x2\x90D\x90E\x3\x2\x2\x2\x90E\x90F\x3\x2\x2\x2\x90F"+
		"\x911\t\n\x2\x2\x910\x912\x5\x12E\x98\x2\x911\x910\x3\x2\x2\x2\x911\x912"+
		"\x3\x2\x2\x2\x912\x914\x3\x2\x2\x2\x913\x915\x5\xEEx\x2\x914\x913\x3\x2"+
		"\x2\x2\x914\x915\x3\x2\x2\x2\x915\x917\x3\x2\x2\x2\x916\x90D\x3\x2\x2"+
		"\x2\x917\x91A\x3\x2\x2\x2\x918\x916\x3\x2\x2\x2\x918\x919\x3\x2\x2\x2"+
		"\x919\xED\x3\x2\x2\x2\x91A\x918\x3\x2\x2\x2\x91B\x91D\a\xE6\x2\x2\x91C"+
		"\x91B\x3\x2\x2\x2\x91C\x91D\x3\x2\x2\x2\x91D\x920\x3\x2\x2\x2\x91E\x91F"+
		"\t\x10\x2\x2\x91F\x921\x5\x12E\x98\x2\x920\x91E\x3\x2\x2\x2\x920\x921"+
		"\x3\x2\x2\x2\x921\x923\x3\x2\x2\x2\x922\x924\a\xED\x2\x2\x923\x922\x3"+
		"\x2\x2\x2\x923\x924\x3\x2\x2\x2\x924\x925\x3\x2\x2\x2\x925\x926\x5\xBC"+
		"_\x2\x926\xEF\x3\x2\x2\x2\x927\x929\a,\x2\x2\x928\x92A\x5\x12E\x98\x2"+
		"\x929\x928\x3\x2\x2\x2\x929\x92A\x3\x2\x2\x2\x92A\x92B\x3\x2\x2\x2\x92B"+
		"\x92D\x5\xFC\x7F\x2\x92C\x92E\x5\x114\x8B\x2\x92D\x92C\x3\x2\x2\x2\x92D"+
		"\x92E\x3\x2\x2\x2\x92E\xF1\x3\x2\x2\x2\x92F\x941\a\xE6\x2\x2\x930\x932"+
		"\x5\x12E\x98\x2\x931\x930\x3\x2\x2\x2\x931\x932\x3\x2\x2\x2\x932\x933"+
		"\x3\x2\x2\x2\x933\x93E\x5\xF4{\x2\x934\x936\x5\x12E\x98\x2\x935\x934\x3"+
		"\x2\x2\x2\x935\x936\x3\x2\x2\x2\x936\x937\x3\x2\x2\x2\x937\x939\a)\x2"+
		"\x2\x938\x93A\x5\x12E\x98\x2\x939\x938\x3\x2\x2\x2\x939\x93A\x3\x2\x2"+
		"\x2\x93A\x93B\x3\x2\x2\x2\x93B\x93D\x5\xF4{\x2\x93C\x935\x3\x2\x2\x2\x93D"+
		"\x940\x3\x2\x2\x2\x93E\x93C\x3\x2\x2\x2\x93E\x93F\x3\x2\x2\x2\x93F\x942"+
		"\x3\x2\x2\x2\x940\x93E\x3\x2\x2\x2\x941\x931\x3\x2\x2\x2\x941\x942\x3"+
		"\x2\x2\x2\x942\x944\x3\x2\x2\x2\x943\x945\x5\x12E\x98\x2\x944\x943\x3"+
		"\x2\x2\x2\x944\x945\x3\x2\x2\x2\x945\x946\x3\x2\x2\x2\x946\x947\a\xED"+
		"\x2\x2\x947\xF3\x3\x2\x2\x2\x948\x949\a\x9F\x2\x2\x949\x94B\x5\x12E\x98"+
		"\x2\x94A\x948\x3\x2\x2\x2\x94A\x94B\x3\x2\x2\x2\x94B\x94E\x3\x2\x2\x2"+
		"\x94C\x94D\t\x11\x2\x2\x94D\x94F\x5\x12E\x98\x2\x94E\x94C\x3\x2\x2\x2"+
		"\x94E\x94F\x3\x2\x2\x2\x94F\x952\x3\x2\x2\x2\x950\x951\a\xA6\x2\x2\x951"+
		"\x953\x5\x12E\x98\x2\x952\x950\x3\x2\x2\x2\x952\x953\x3\x2\x2\x2\x953"+
		"\x954\x3\x2\x2\x2\x954\x956\x5\xFC\x7F\x2\x955\x957\x5\x114\x8B\x2\x956"+
		"\x955\x3\x2\x2\x2\x956\x957\x3\x2\x2\x2\x957\x960\x3\x2\x2\x2\x958\x95A"+
		"\x5\x12E\x98\x2\x959\x958\x3\x2\x2\x2\x959\x95A\x3\x2\x2\x2\x95A\x95B"+
		"\x3\x2\x2\x2\x95B\x95D\a\xE6\x2\x2\x95C\x95E\x5\x12E\x98\x2\x95D\x95C"+
		"\x3\x2\x2\x2\x95D\x95E\x3\x2\x2\x2\x95E\x95F\x3\x2\x2\x2\x95F\x961\a\xED"+
		"\x2\x2\x960\x959\x3\x2\x2\x2\x960\x961\x3\x2\x2\x2\x961\x966\x3\x2\x2"+
		"\x2\x962\x964\x5\x12E\x98\x2\x963\x962\x3\x2\x2\x2\x963\x964\x3\x2\x2"+
		"\x2\x964\x965\x3\x2\x2\x2\x965\x967\x5\x100\x81\x2\x966\x963\x3\x2\x2"+
		"\x2\x966\x967\x3\x2\x2\x2\x967\x96C\x3\x2\x2\x2\x968\x96A\x5\x12E\x98"+
		"\x2\x969\x968\x3\x2\x2\x2\x969\x96A\x3\x2\x2\x2\x96A\x96B\x3\x2\x2\x2"+
		"\x96B\x96D\x5\xF6|\x2\x96C\x969\x3\x2\x2\x2\x96C\x96D\x3\x2\x2\x2\x96D"+
		"\xF5\x3\x2\x2\x2\x96E\x970\a\xE2\x2\x2\x96F\x971\x5\x12E\x98\x2\x970\x96F"+
		"\x3\x2\x2\x2\x970\x971\x3\x2\x2\x2\x971\x972\x3\x2\x2\x2\x972\x973\x5"+
		"\xBC_\x2\x973\xF7\x3\x2\x2\x2\x974\x97F\x5\xFA~\x2\x975\x977\x5\x12E\x98"+
		"\x2\x976\x975\x3\x2\x2\x2\x976\x977\x3\x2\x2\x2\x977\x978\x3\x2\x2\x2"+
		"\x978\x97A\a)\x2\x2\x979\x97B\x5\x12E\x98\x2\x97A\x979\x3\x2\x2\x2\x97A"+
		"\x97B\x3\x2\x2\x2\x97B\x97C\x3\x2\x2\x2\x97C\x97E\x5\xFA~\x2\x97D\x976"+
		"\x3\x2\x2\x2\x97E\x981\x3\x2\x2\x2\x97F\x97D\x3\x2\x2\x2\x97F\x980\x3"+
		"\x2\x2\x2\x980\xF9\x3\x2\x2\x2\x981\x97F\x3\x2\x2\x2\x982\x983\x5\xBC"+
		"_\x2\x983\x984\x5\x12E\x98\x2\x984\x985\a\xCF\x2\x2\x985\x986\x5\x12E"+
		"\x98\x2\x986\x988\x3\x2\x2\x2\x987\x982\x3\x2\x2\x2\x987\x988\x3\x2\x2"+
		"\x2\x988\x989\x3\x2\x2\x2\x989\x98A\x5\xBC_\x2\x98A\xFB\x3\x2\x2\x2\x98B"+
		"\x98E\x5\xFE\x80\x2\x98C\x98E\x5\x11A\x8E\x2\x98D\x98B\x3\x2\x2\x2\x98D"+
		"\x98C\x3\x2\x2\x2\x98E\xFD\x3\x2\x2\x2\x98F\x992\a\x101\x2\x2\x990\x992"+
		"\x5\x118\x8D\x2\x991\x98F\x3\x2\x2\x2\x991\x990\x3\x2\x2\x2\x992\xFF\x3"+
		"\x2\x2\x2\x993\x995\a:\x2\x2\x994\x996\x5\x12E\x98\x2\x995\x994\x3\x2"+
		"\x2\x2\x995\x996\x3\x2\x2\x2\x996\x999\x3\x2\x2\x2\x997\x998\a\x97\x2"+
		"\x2\x998\x99A\x5\x12E\x98\x2\x999\x997\x3\x2\x2\x2\x999\x99A\x3\x2\x2"+
		"\x2\x99A\x99B\x3\x2\x2\x2\x99B\x9A0\x5\x112\x8A\x2\x99C\x99E\x5\x12E\x98"+
		"\x2\x99D\x99C\x3\x2\x2\x2\x99D\x99E\x3\x2\x2\x2\x99E\x99F\x3\x2\x2\x2"+
		"\x99F\x9A1\x5\x108\x85\x2\x9A0\x99D\x3\x2\x2\x2\x9A0\x9A1\x3\x2\x2\x2"+
		"\x9A1\x101\x3\x2\x2\x2\x9A2\x9A3\t\x12\x2\x2\x9A3\x103\x3\x2\x2\x2\x9A4"+
		"\x9A5\t\xE\x2\x2\x9A5\x105\x3\x2\x2\x2\x9A6\x9AB\x5\xFE\x80\x2\x9A7\x9A8"+
		"\t\xF\x2\x2\x9A8\x9AA\x5\xFE\x80\x2\x9A9\x9A7\x3\x2\x2\x2\x9AA\x9AD\x3"+
		"\x2\x2\x2\x9AB\x9A9\x3\x2\x2\x2\x9AB\x9AC\x3\x2\x2\x2\x9AC\x107\x3\x2"+
		"\x2\x2\x9AD\x9AB\x3\x2\x2\x2\x9AE\x9B0\a\xE9\x2\x2\x9AF\x9B1\x5\x12E\x98"+
		"\x2\x9B0\x9AF\x3\x2\x2\x2\x9B0\x9B1\x3\x2\x2\x2\x9B1\x9B4\x3\x2\x2\x2"+
		"\x9B2\x9B5\x5\x110\x89\x2\x9B3\x9B5\x5\xFE\x80\x2\x9B4\x9B2\x3\x2\x2\x2"+
		"\x9B4\x9B3\x3\x2\x2\x2\x9B5\x109\x3\x2\x2\x2\x9B6\x9BF\x5\xFE\x80\x2\x9B7"+
		"\x9B9\x5\x12E\x98\x2\x9B8\x9B7\x3\x2\x2\x2\x9B8\x9B9\x3\x2\x2\x2\x9B9"+
		"\x9BA\x3\x2\x2\x2\x9BA\x9BC\a\xE8\x2\x2\x9BB\x9BD\x5\x12E\x98\x2\x9BC"+
		"\x9BB\x3\x2\x2\x2\x9BC\x9BD\x3\x2\x2\x2\x9BD\x9BE\x3\x2\x2\x2\x9BE\x9C0"+
		"\x5\xFE\x80\x2\x9BF\x9B8\x3\x2\x2\x2\x9BF\x9C0\x3\x2\x2\x2\x9C0\x10B\x3"+
		"\x2\x2\x2\x9C1\x9C4\x5\xFE\x80\x2\x9C2\x9C4\x5\x110\x89\x2\x9C3\x9C1\x3"+
		"\x2\x2\x2\x9C3\x9C2\x3\x2\x2\x2\x9C4\x9C5\x3\x2\x2\x2\x9C5\x9C6\a*\x2"+
		"\x2\x9C6\x10D\x3\x2\x2\x2\x9C7\x9D0\x5\x110\x89\x2\x9C8\x9D0\a\xFA\x2"+
		"\x2\x9C9\x9D0\a\xF5\x2\x2\x9CA\x9D0\a\xD0\x2\x2\x9CB\x9D0\at\x2\x2\x9CC"+
		"\x9D0\a\x99\x2\x2\x9CD\x9D0\a\x9A\x2\x2\x9CE\x9D0\a`\x2\x2\x9CF\x9C7\x3"+
		"\x2\x2\x2\x9CF\x9C8\x3\x2\x2\x2\x9CF\x9C9\x3\x2\x2\x2\x9CF\x9CA\x3\x2"+
		"\x2\x2\x9CF\x9CB\x3\x2\x2\x2\x9CF\x9CC\x3\x2\x2\x2\x9CF\x9CD\x3\x2\x2"+
		"\x2\x9CF\x9CE\x3\x2\x2\x2\x9D0\x10F\x3\x2\x2\x2\x9D1\x9D2\t\x13\x2\x2"+
		"\x9D2\x111\x3\x2\x2\x2\x9D3\x9D6\x5\x102\x82\x2\x9D4\x9D6\x5\x106\x84"+
		"\x2\x9D5\x9D3\x3\x2\x2\x2\x9D5\x9D4\x3\x2\x2\x2\x9D6\x9DF\x3\x2\x2\x2"+
		"\x9D7\x9D9\x5\x12E\x98\x2\x9D8\x9D7\x3\x2\x2\x2\x9D8\x9D9\x3\x2\x2\x2"+
		"\x9D9\x9DA\x3\x2\x2\x2\x9DA\x9DC\a\xE6\x2\x2\x9DB\x9DD\x5\x12E\x98\x2"+
		"\x9DC\x9DB\x3\x2\x2\x2\x9DC\x9DD\x3\x2\x2\x2\x9DD\x9DE\x3\x2\x2\x2\x9DE"+
		"\x9E0\a\xED\x2\x2\x9DF\x9D8\x3\x2\x2\x2\x9DF\x9E0\x3\x2\x2\x2\x9E0\x113"+
		"\x3\x2\x2\x2\x9E1\x9E2\t\x14\x2\x2\x9E2\x115\x3\x2\x2\x2\x9E3\x9E4\t\x15"+
		"\x2\x2\x9E4\x117\x3\x2\x2\x2\x9E5\x9E6\t\x16\x2\x2\x9E6\x119\x3\x2\x2"+
		"\x2\x9E7\x9E8\t\x17\x2\x2\x9E8\x11B\x3\x2\x2\x2\x9E9\x9EB\x5\x12E\x98"+
		"\x2\x9EA\x9E9\x3\x2\x2\x2\x9EA\x9EB\x3\x2\x2\x2\x9EB\x9F3\x3\x2\x2\x2"+
		"\x9EC\x9EE\a\xFB\x2\x2\x9ED\x9EC\x3\x2\x2\x2\x9EE\x9EF\x3\x2\x2\x2\x9EF"+
		"\x9ED\x3\x2\x2\x2\x9EF\x9F0\x3\x2\x2\x2\x9F0\x9F4\x3\x2\x2\x2\x9F1\x9F4"+
		"\x5\x122\x92\x2\x9F2\x9F4\x5\x120\x91\x2\x9F3\x9ED\x3\x2\x2\x2\x9F3\x9F1"+
		"\x3\x2\x2\x2\x9F3\x9F2\x3\x2\x2\x2\x9F4\x9F6\x3\x2\x2\x2\x9F5\x9F7\x5"+
		"\x12E\x98\x2\x9F6\x9F5\x3\x2\x2\x2\x9F6\x9F7\x3\x2\x2\x2\x9F7\x9FD\x3"+
		"\x2\x2\x2\x9F8\x9FA\x5\x12E\x98\x2\x9F9\x9F8\x3\x2\x2\x2\x9F9\x9FA\x3"+
		"\x2\x2\x2\x9FA\x9FB\x3\x2\x2\x2\x9FB\x9FD\x5\x124\x93\x2\x9FC\x9EA\x3"+
		"\x2\x2\x2\x9FC\x9F9\x3\x2\x2\x2\x9FD\x11D\x3\x2\x2\x2\x9FE\xA07\x5\x11C"+
		"\x8F\x2\x9FF\xA01\x5\x12E\x98\x2\xA00\x9FF\x3\x2\x2\x2\xA00\xA01\x3\x2"+
		"\x2\x2\xA01\xA02\x3\x2\x2\x2\xA02\xA04\a*\x2\x2\xA03\xA05\x5\x12E\x98"+
		"\x2\xA04\xA03\x3\x2\x2\x2\xA04\xA05\x3\x2\x2\x2\xA05\xA07\x3\x2\x2\x2"+
		"\xA06\x9FE\x3\x2\x2\x2\xA06\xA00\x3\x2\x2\x2\xA07\xA0A\x3\x2\x2\x2\xA08"+
		"\xA06\x3\x2\x2\x2\xA08\xA09\x3\x2\x2\x2\xA09\x11F\x3\x2\x2\x2\xA0A\xA08"+
		"\x3\x2\x2\x2\xA0B\xA0C\a\xFC\x2\x2\xA0C\x121\x3\x2\x2\x2\xA0D\xA0E\t\x18"+
		"\x2\x2\xA0E\x123\x3\x2\x2\x2\xA0F\xA11\a\xFE\x2\x2\xA10\xA12\x5\x126\x94"+
		"\x2\xA11\xA10\x3\x2\x2\x2\xA12\xA13\x3\x2\x2\x2\xA13\xA11\x3\x2\x2\x2"+
		"\xA13\xA14\x3\x2\x2\x2\xA14\x125\x3\x2\x2\x2\xA15\xA16\a/\x2\x2\xA16\xA18"+
		"\x5\x128\x95\x2\xA17\xA19\x5\x12A\x96\x2\xA18\xA17\x3\x2\x2\x2\xA18\xA19"+
		"\x3\x2\x2\x2\xA19\x127\x3\x2\x2\x2\xA1A\xA1B\a\x101\x2\x2\xA1B\x129\x3"+
		"\x2\x2\x2\xA1C\xA1D\x5\x12E\x98\x2\xA1D\xA1F\x5\x12C\x97\x2\xA1E\xA20"+
		"\x5\x12E\x98\x2\xA1F\xA1E\x3\x2\x2\x2\xA1F\xA20\x3\x2\x2\x2\xA20\xA5A"+
		"\x3\x2\x2\x2\xA21\xA22\x5\x12E\x98\x2\xA22\xA2B\x5\x12C\x97\x2\xA23\xA25"+
		"\x5\x12E\x98\x2\xA24\xA23\x3\x2\x2\x2\xA24\xA25\x3\x2\x2\x2\xA25\xA26"+
		"\x3\x2\x2\x2\xA26\xA28\a)\x2\x2\xA27\xA29\x5\x12E\x98\x2\xA28\xA27\x3"+
		"\x2\x2\x2\xA28\xA29\x3\x2\x2\x2\xA29\xA2A\x3\x2\x2\x2\xA2A\xA2C\x5\x12C"+
		"\x97\x2\xA2B\xA24\x3\x2\x2\x2\xA2C\xA2D\x3\x2\x2\x2\xA2D\xA2B\x3\x2\x2"+
		"\x2\xA2D\xA2E\x3\x2\x2\x2\xA2E\xA30\x3\x2\x2\x2\xA2F\xA31\x5\x12E\x98"+
		"\x2\xA30\xA2F\x3\x2\x2\x2\xA30\xA31\x3\x2\x2\x2\xA31\xA5A\x3\x2\x2\x2"+
		"\xA32\xA34\x5\x12E\x98\x2\xA33\xA32\x3\x2\x2\x2\xA33\xA34\x3\x2\x2\x2"+
		"\xA34\xA35\x3\x2\x2\x2\xA35\xA37\a\xE6\x2\x2\xA36\xA38\x5\x12E\x98\x2"+
		"\xA37\xA36\x3\x2\x2\x2\xA37\xA38\x3\x2\x2\x2\xA38\xA39\x3\x2\x2\x2\xA39"+
		"\xA3B\x5\x12C\x97\x2\xA3A\xA3C\x5\x12E\x98\x2\xA3B\xA3A\x3\x2\x2\x2\xA3B"+
		"\xA3C\x3\x2\x2\x2\xA3C\xA3D\x3\x2\x2\x2\xA3D\xA3F\a\xED\x2\x2\xA3E\xA40"+
		"\x5\x12E\x98\x2\xA3F\xA3E\x3\x2\x2\x2\xA3F\xA40\x3\x2\x2\x2\xA40\xA5A"+
		"\x3\x2\x2\x2\xA41\xA43\x5\x12E\x98\x2\xA42\xA41\x3\x2\x2\x2\xA42\xA43"+
		"\x3\x2\x2\x2\xA43\xA44\x3\x2\x2\x2\xA44\xA45\a\xE6\x2\x2\xA45\xA4E\x5"+
		"\x12C\x97\x2\xA46\xA48\x5\x12E\x98\x2\xA47\xA46\x3\x2\x2\x2\xA47\xA48"+
		"\x3\x2\x2\x2\xA48\xA49\x3\x2\x2\x2\xA49\xA4B\a)\x2\x2\xA4A\xA4C\x5\x12E"+
		"\x98\x2\xA4B\xA4A\x3\x2\x2\x2\xA4B\xA4C\x3\x2\x2\x2\xA4C\xA4D\x3\x2\x2"+
		"\x2\xA4D\xA4F\x5\x12C\x97\x2\xA4E\xA47\x3\x2\x2\x2\xA4F\xA50\x3\x2\x2"+
		"\x2\xA50\xA4E\x3\x2\x2\x2\xA50\xA51\x3\x2\x2\x2\xA51\xA53\x3\x2\x2\x2"+
		"\xA52\xA54\x5\x12E\x98\x2\xA53\xA52\x3\x2\x2\x2\xA53\xA54\x3\x2\x2\x2"+
		"\xA54\xA55\x3\x2\x2\x2\xA55\xA57\a\xED\x2\x2\xA56\xA58\x5\x12E\x98\x2"+
		"\xA57\xA56\x3\x2\x2\x2\xA57\xA58\x3\x2\x2\x2\xA58\xA5A\x3\x2\x2\x2\xA59"+
		"\xA1C\x3\x2\x2\x2\xA59\xA21\x3\x2\x2\x2\xA59\xA33\x3\x2\x2\x2\xA59\xA42"+
		"\x3\x2\x2\x2\xA5A\x12B\x3\x2\x2\x2\xA5B\xA5E\a\x101\x2\x2\xA5C\xA5E\x5"+
		"\x10E\x88\x2\xA5D\xA5B\x3\x2\x2\x2\xA5D\xA5C\x3\x2\x2\x2\xA5E\x12D\x3"+
		"\x2\x2\x2\xA5F\xA61\t\x19\x2\x2\xA60\xA5F\x3\x2\x2\x2\xA61\xA62\x3\x2"+
		"\x2\x2\xA62\xA60\x3\x2\x2\x2\xA62\xA63\x3\x2\x2\x2\xA63\x12F\x3\x2\x2"+
		"\x2\x1C6\x134\x13A\x13D\x141\x145\x149\x14D\x153\x156\x160\x162\x168\x170"+
		"\x177\x17D\x186\x18E\x19D\x1A7\x1AF\x1B9\x1BF\x1C3\x1C7\x1CB\x1D0\x1D9"+
		"\x220\x226\x22A\x22D\x23D\x241\x246\x249\x24E\x254\x258\x25D\x262\x267"+
		"\x26A\x26E\x274\x278\x27F\x285\x289\x28C\x291\x29C\x29F\x2A2\x2A7\x2AD"+
		"\x2B1\x2B6\x2BD\x2C3\x2C7\x2CF\x2D3\x2D7\x2DB\x2DF\x2E4\x2EF\x2F6\x2FE"+
		"\x305\x30E\x315\x319\x31C\x324\x328\x32D\x337\x33D\x347\x34B\x35A\x360"+
		"\x366\x36A\x376\x37A\x380\x385\x389\x38D\x391\x394\x397\x39A\x39D\x3A1"+
		"\x3A9\x3AD\x3B0\x3B3\x3B7\x3CF\x3D5\x3D9\x3DD\x3E6\x3F1\x3F6\x400\x404"+
		"\x409\x411\x415\x419\x421\x425\x431\x435\x43D\x43F\x445\x449\x44F\x453"+
		"\x457\x471\x47B\x47F\x484\x48F\x493\x498\x4A7\x4AC\x4B5\x4B9\x4BD\x4C1"+
		"\x4C5\x4C8\x4CC\x4D0\x4D3\x4D7\x4DA\x4DE\x4E0\x4E5\x4E9\x4ED\x4F1\x4F3"+
		"\x4F9\x4FD\x500\x505\x509\x50F\x512\x515\x51A\x51E\x525\x529\x52F\x532"+
		"\x536\x53D\x541\x547\x54A\x54E\x556\x55A\x55D\x560\x564\x56C\x570\x574"+
		"\x576\x579\x57F\x585\x589\x58D\x592\x597\x59B\x59F\x5A5\x5AD\x5AF\x5BB"+
		"\x5BF\x5C7\x5CB\x5D3\x5D7\x5DB\x5DF\x5E3\x5E7\x5EF\x5F3\x600\x607\x60B"+
		"\x616\x61D\x622\x626\x62B\x62E\x634\x638\x63B\x641\x645\x64D\x651\x65A"+
		"\x65E\x662\x666\x669\x66D\x673\x677\x67E\x687\x68E\x692\x695\x698\x69B"+
		"\x6A0\x6AC\x6B0\x6B8\x6BA\x6BF\x6C4\x6C9\x6CD\x6D3\x6D8\x6DF\x6E3\x6E9"+
		"\x6ED\x6F1\x6F6\x6FA\x6FF\x703\x708\x70C\x711\x715\x71A\x71E\x723\x727"+
		"\x72C\x730\x735\x739\x73E\x742\x747\x74B\x750\x754\x757\x759\x764\x769"+
		"\x76E\x774\x778\x77D\x782\x786\x78A\x78C\x790\x792\x795\x79A\x7A1\x7A9"+
		"\x7AD\x7B6\x7C0\x7C4\x7C7\x7CA\x7D3\x7D8\x7DB\x7DF\x7E3\x7E7\x7EA\x7F2"+
		"\x7F7\x7FA\x7FE\x802\x806\x809\x811\x814\x818\x81B\x81E\x822\x826\x82B"+
		"\x82E\x831\x834\x83C\x843\x846\x84E\x855\x859\x85C\x85F\x862\x86A\x86F"+
		"\x872\x875\x879\x87D\x87F\x883\x886\x889\x891\x896\x899\x89C\x89F\x8A7"+
		"\x8AC\x8AF\x8B2\x8B6\x8BA\x8BC\x8C0\x8C3\x8C6\x8CE\x8D3\x8D7\x8DB\x8DE"+
		"\x8E1\x8E4\x8EC\x8F1\x8F5\x8F8\x8FD\x900\x904\x908\x90D\x911\x914\x918"+
		"\x91C\x920\x923\x929\x92D\x931\x935\x939\x93E\x941\x944\x94A\x94E\x952"+
		"\x956\x959\x95D\x960\x963\x966\x969\x96C\x970\x976\x97A\x97F\x987\x98D"+
		"\x991\x995\x999\x99D\x9A0\x9AB\x9B0\x9B4\x9B8\x9BC\x9BF\x9C3\x9CF\x9D5"+
		"\x9D8\x9DC\x9DF\x9EA\x9EF\x9F3\x9F6\x9F9\x9FC\xA00\xA04\xA06\xA08\xA13"+
		"\xA18\xA1F\xA24\xA28\xA2D\xA30\xA33\xA37\xA3B\xA3F\xA42\xA47\xA4B\xA50"+
		"\xA53\xA57\xA59\xA5D\xA62";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Grammar
