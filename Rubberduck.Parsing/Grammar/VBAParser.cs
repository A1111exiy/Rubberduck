//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\RubberduckParserTest\RubberduckParserTest\VBAParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		PRINT=156, ELSEIF=88, CBYTE=5, CLOSE=65, STATIC=180, MINUS=212, OPTION_EXPLICIT=149, 
		L_SQUARE_BRACKET=223, DOEVENTS=21, HASHENDIF=222, DATELITERAL=230, ERROR=102, 
		NOTHING=141, EACH=86, SUB=184, STOP=182, LPAREN=210, MID=136, CVERR=19, 
		AS=55, END_PROPERTY=93, AT=45, DATABASE=67, GOSUB=115, CSNG=15, HASHCONST=218, 
		POW=216, DOLLAR=47, PROPERTY_LET=159, THEN=187, XOR=202, EXIT_FOR=105, 
		DEFINT=75, HASHIF=219, UNLOCK=192, CALL=62, LOCK_READ=131, SET=176, LOCK_READ_WRITE=133, 
		ABS=1, LSET=134, RAISEEVENT=165, MIDBTYPESUFFIX=32, SEEK=174, LONG=125, 
		CBOOL=4, LIB=128, DIM=83, APPEND=54, OPEN=146, DIV=204, PROPERTY_SET=160, 
		CDBL=8, PERCENT=46, END_SELECT=94, STRING=183, HASHELSEIF=220, SGN=37, 
		REM=169, TO=188, DEFDBL=73, BYVAL=59, FRIEND=110, LOOP=126, CLASS=64, 
		DO=84, VARIANT=194, END_WITH=97, DEFBOOL=70, OPTIONAL=147, ADDRESSOF=50, 
		CONST=66, RSET=173, INTEGER=123, CDEC=9, ATTRIBUTE=53, OUTPUT=153, FOR=111, 
		PTRSAFE=161, EQ=206, BOOLEAN=58, CIRCLE=11, END_FUNCTION=91, DEFSNG=80, 
		DEFBYTE=71, NOT=140, CINT=10, END=98, PRESERVE=155, ON_LOCAL_ERROR=145, 
		FLOATLITERAL=228, HASHELSE=221, BINARY=57, LENB=28, RETURN=172, EXCLAMATIONPOINT=42, 
		NEXT=138, GLOBAL=114, INPUTB=24, IDENTIFIER=236, WS=234, EMPTY=89, CURRENCY=17, 
		CCUR=6, MOD=137, WITHEVENTS=200, COLON=40, DEFLNGLNG=77, STEP=181, OPTION_BASE=148, 
		GT=208, PUT=163, WITH=199, CSTR=16, LOCK_WRITE=132, LINE_CONTINUATION=237, 
		TYPEOF=191, DEFVAR=82, DEFLNG=76, UBOUND=38, FALSE=109, ERRORCHAR=238, 
		UNDERSCORE=233, INTEGERLITERAL=229, END_IF=92, LOCK=124, TEXT=186, SINGLEQUOTE=232, 
		MULT=213, SEMICOLON=41, BYTE=61, HEXLITERAL=227, ELSE=87, IF=117, TYPE=190, 
		AMPERSAND=48, DEFLNGPTR=78, ENUM=99, DEFOBJ=79, IN=120, OPTION=34, DOT=43, 
		EXIT_DO=104, GUIDLITERAL=235, IS=122, EQV=100, WEND=196, FUNCTION=112, 
		HASH=44, CASE=63, GEQ=207, GET=113, PUBLIC=162, ON_ERROR=144, EXIT=22, 
		MIDB=31, END_ENUM=90, GOTO=116, INTDIV=205, LONGPTR=30, WIDTH=198, BEGIN=56, 
		EXIT_SUB=108, ASSIGN=203, WRITE=201, DOUBLE=85, EXIT_PROPERTY=107, COMMA=39, 
		RANDOM=164, PROPERTY_GET=158, SELECT=175, PRIVATE=157, ERASE=101, TAB=185, 
		BYREF=60, VERSION=195, NEQ=214, END_TYPE=96, NEW=139, ARRAY=3, INPUT=121, 
		SINGLE=178, ALIAS=51, SPC=179, LT=211, RESET=170, END_SUB=95, EVENT=103, 
		READ_WRITE=167, OPTION_COMPARE=150, ME=135, SCALE=36, CDATE=7, MIDTYPESUFFIX=33, 
		NULL=142, NEWLINE=231, TRUE=189, RPAREN=217, IMP=118, STRINGLITERAL=225, 
		OCTLITERAL=226, READ=166, DATE=68, LIKE=129, AND=52, OPTION_PRIVATE_MODULE=151, 
		CLNGLNG=13, PLUS=215, ANY=2, RESUME=171, INT=25, SHARED=177, EXIT_FUNCTION=106, 
		PSET=35, ACCESS=49, LINE_INPUT=130, ON=143, OR=152, PARAMARRAY=154, LBOUND=26, 
		R_SQUARE_BRACKET=224, IMPLEMENTS=119, UNTIL=193, DEBUG=20, DEFCUR=74, 
		CLNGPTR=14, LONGLONG=29, DECLARE=69, DEFDATE=72, FIX=23, LEN=27, REDIM=168, 
		LEQ=209, DEFSTR=81, LET=127, WHILE=197, CVAR=18, CLNG=12, COLLECTION=239, 
		DELETESETTING=240, LOAD=241, RMDIR=242, SENDKEYS=243, SETATTR=244, RESUME_NEXT=245;
	public static readonly string[] tokenNames = {
		"<INVALID>", "ABS", "ANY", "ARRAY", "CBOOL", "CBYTE", "CCUR", "CDATE", 
		"CDBL", "CDEC", "CINT", "CIRCLE", "CLNG", "CLNGLNG", "CLNGPTR", "CSNG", 
		"CSTR", "CURRENCY", "CVAR", "CVERR", "DEBUG", "DOEVENTS", "EXIT", "FIX", 
		"INPUTB", "INT", "LBOUND", "LEN", "LENB", "LONGLONG", "LONGPTR", "MIDB", 
		"MIDBTYPESUFFIX", "MIDTYPESUFFIX", "OPTION", "PSET", "SCALE", "SGN", "UBOUND", 
		"','", "':'", "';'", "'!'", "'.'", "'#'", "'@'", "'%'", "'$'", "'&'", 
		"ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPEND", "AS", "BEGIN", 
		"BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", "CALL", "CASE", "CLASS", 
		"CLOSE", "CONST", "DATABASE", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", 
		"DEFDATE", "DEFDBL", "DEFCUR", "DEFINT", "DEFLNG", "DEFLNGLNG", "DEFLNGPTR", 
		"DEFOBJ", "DEFSNG", "DEFSTR", "DEFVAR", "DIM", "DO", "DOUBLE", "EACH", 
		"ELSE", "ELSEIF", "EMPTY", "END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", 
		"END_SELECT", "END_SUB", "END_TYPE", "END_WITH", "END", "ENUM", "EQV", 
		"ERASE", "ERROR", "EVENT", "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", 
		"EXIT_SUB", "FALSE", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", 
		"GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "LOCK", 
		"LONG", "LOOP", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", "LOCK_WRITE", 
		"LOCK_READ_WRITE", "LSET", "ME", "MID", "MOD", "NEXT", "NEW", "NOT", "NOTHING", 
		"NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM", "RAISEEVENT", "READ", 
		"READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RSET", "SEEK", 
		"SELECT", "SET", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", 
		"STRING", "SUB", "TAB", "TEXT", "THEN", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", "WITH", 
		"WITHEVENTS", "WRITE", "XOR", "':='", "'/'", "'\\'", "'='", "GEQ", "'>'", 
		"LEQ", "'('", "'<'", "'-'", "'*'", "NEQ", "'+'", "'^'", "')'", "HASHCONST", 
		"HASHIF", "HASHELSEIF", "HASHELSE", "HASHENDIF", "'['", "']'", "STRINGLITERAL", 
		"OCTLITERAL", "HEXLITERAL", "FLOATLITERAL", "INTEGERLITERAL", "DATELITERAL", 
		"NEWLINE", "'''", "'_'", "WS", "GUIDLITERAL", "IDENTIFIER", "LINE_CONTINUATION", 
		"ERRORCHAR", "COLLECTION", "DELETESETTING", "LOAD", "RMDIR", "SENDKEYS", 
		"SETATTR", "RESUME_NEXT"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleDeclarations = 6, 
		RULE_moduleOption = 7, RULE_moduleDeclarationsElement = 8, RULE_moduleBody = 9, 
		RULE_moduleBodyElement = 10, RULE_attributeStmt = 11, RULE_attributeName = 12, 
		RULE_attributeValue = 13, RULE_block = 14, RULE_blockStmt = 15, RULE_closeStmt = 16, 
		RULE_constStmt = 17, RULE_constSubStmt = 18, RULE_declareStmt = 19, RULE_defDirective = 20, 
		RULE_defType = 21, RULE_letterSpec = 22, RULE_singleLetter = 23, RULE_universalLetterRange = 24, 
		RULE_upperCaseA = 25, RULE_upperCaseZ = 26, RULE_letterRange = 27, RULE_firstLetter = 28, 
		RULE_lastLetter = 29, RULE_doLoopStmt = 30, RULE_enumerationStmt = 31, 
		RULE_enumerationStmt_Constant = 32, RULE_eraseStmt = 33, RULE_errorStmt = 34, 
		RULE_eventStmt = 35, RULE_exitStmt = 36, RULE_forEachStmt = 37, RULE_forNextStmt = 38, 
		RULE_functionStmt = 39, RULE_functionName = 40, RULE_getStmt = 41, RULE_goSubStmt = 42, 
		RULE_goToStmt = 43, RULE_ifStmt = 44, RULE_elseIfBlock = 45, RULE_elseBlock = 46, 
		RULE_singleLineIfStmt = 47, RULE_ifWithNonEmptyThen = 48, RULE_ifWithEmptyThen = 49, 
		RULE_singleLineElseClause = 50, RULE_listOrLabel = 51, RULE_sameLineStatement = 52, 
		RULE_booleanExpression = 53, RULE_implementsStmt = 54, RULE_inputStmt = 55, 
		RULE_letStmt = 56, RULE_lineInputStmt = 57, RULE_lockStmt = 58, RULE_lsetStmt = 59, 
		RULE_midStmt = 60, RULE_onErrorStmt = 61, RULE_onGoToStmt = 62, RULE_onGoSubStmt = 63, 
		RULE_openStmt = 64, RULE_outputList = 65, RULE_outputList_Expression = 66, 
		RULE_printStmt = 67, RULE_propertyGetStmt = 68, RULE_propertySetStmt = 69, 
		RULE_propertyLetStmt = 70, RULE_putStmt = 71, RULE_raiseEventStmt = 72, 
		RULE_redimStmt = 73, RULE_redimSubStmt = 74, RULE_resetStmt = 75, RULE_resumeStmt = 76, 
		RULE_returnStmt = 77, RULE_rsetStmt = 78, RULE_stopStmt = 79, RULE_seekStmt = 80, 
		RULE_selectCaseStmt = 81, RULE_sC_Selection = 82, RULE_sC_Case = 83, RULE_sC_Cond = 84, 
		RULE_setStmt = 85, RULE_subStmt = 86, RULE_subroutineName = 87, RULE_typeStmt = 88, 
		RULE_typeStmt_Element = 89, RULE_unlockStmt = 90, RULE_valueStmt = 91, 
		RULE_typeOfIsExpression = 92, RULE_variableStmt = 93, RULE_variableListStmt = 94, 
		RULE_variableSubStmt = 95, RULE_whileWendStmt = 96, RULE_widthStmt = 97, 
		RULE_withStmt = 98, RULE_withStmtExpression = 99, RULE_writeStmt = 100, 
		RULE_fileNumber = 101, RULE_explicitCallStmt = 102, RULE_explicitCallStmtExpression = 103, 
		RULE_implicitCallStmt_InBlock = 104, RULE_iCS_B_MemberProcedureCall = 105, 
		RULE_iCS_B_ProcedureCall = 106, RULE_implicitCallStmt_InStmt = 107, RULE_iCS_S_VariableOrProcedureCall = 108, 
		RULE_iCS_S_ProcedureOrArrayCall = 109, RULE_iCS_S_VariableOrProcedureCallUnrestricted = 110, 
		RULE_iCS_S_ProcedureOrArrayCallUnrestricted = 111, RULE_iCS_S_MembersCall = 112, 
		RULE_iCS_S_MemberCall = 113, RULE_iCS_S_DictionaryCall = 114, RULE_argsCall = 115, 
		RULE_argCall = 116, RULE_dictionaryCallStmt = 117, RULE_argList = 118, 
		RULE_arg = 119, RULE_argDefaultValue = 120, RULE_subscripts = 121, RULE_subscript = 122, 
		RULE_unrestrictedIdentifier = 123, RULE_identifier = 124, RULE_asTypeClause = 125, 
		RULE_baseType = 126, RULE_comparisonOperator = 127, RULE_complexType = 128, 
		RULE_fieldLength = 129, RULE_statementLabelDefinition = 130, RULE_statementLabel = 131, 
		RULE_identifierStatementLabel = 132, RULE_lineNumberLabel = 133, RULE_literal = 134, 
		RULE_numberLiteral = 135, RULE_type = 136, RULE_typeHint = 137, RULE_visibility = 138, 
		RULE_keyword = 139, RULE_markerKeyword = 140, RULE_statementKeyword = 141, 
		RULE_endOfLine = 142, RULE_endOfStatement = 143, RULE_commentOrAnnotation = 144, 
		RULE_remComment = 145, RULE_comment = 146, RULE_commentBody = 147, RULE_annotationList = 148, 
		RULE_annotation = 149, RULE_annotationName = 150, RULE_annotationArgList = 151, 
		RULE_annotationArg = 152, RULE_whiteSpace = 153;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement", 
		"moduleBody", "moduleBodyElement", "attributeStmt", "attributeName", "attributeValue", 
		"block", "blockStmt", "closeStmt", "constStmt", "constSubStmt", "declareStmt", 
		"defDirective", "defType", "letterSpec", "singleLetter", "universalLetterRange", 
		"upperCaseA", "upperCaseZ", "letterRange", "firstLetter", "lastLetter", 
		"doLoopStmt", "enumerationStmt", "enumerationStmt_Constant", "eraseStmt", 
		"errorStmt", "eventStmt", "exitStmt", "forEachStmt", "forNextStmt", "functionStmt", 
		"functionName", "getStmt", "goSubStmt", "goToStmt", "ifStmt", "elseIfBlock", 
		"elseBlock", "singleLineIfStmt", "ifWithNonEmptyThen", "ifWithEmptyThen", 
		"singleLineElseClause", "listOrLabel", "sameLineStatement", "booleanExpression", 
		"implementsStmt", "inputStmt", "letStmt", "lineInputStmt", "lockStmt", 
		"lsetStmt", "midStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", 
		"outputList", "outputList_Expression", "printStmt", "propertyGetStmt", 
		"propertySetStmt", "propertyLetStmt", "putStmt", "raiseEventStmt", "redimStmt", 
		"redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", "rsetStmt", "stopStmt", 
		"seekStmt", "selectCaseStmt", "sC_Selection", "sC_Case", "sC_Cond", "setStmt", 
		"subStmt", "subroutineName", "typeStmt", "typeStmt_Element", "unlockStmt", 
		"valueStmt", "typeOfIsExpression", "variableStmt", "variableListStmt", 
		"variableSubStmt", "whileWendStmt", "widthStmt", "withStmt", "withStmtExpression", 
		"writeStmt", "fileNumber", "explicitCallStmt", "explicitCallStmtExpression", 
		"implicitCallStmt_InBlock", "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", 
		"implicitCallStmt_InStmt", "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", 
		"iCS_S_VariableOrProcedureCallUnrestricted", "iCS_S_ProcedureOrArrayCallUnrestricted", 
		"iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", 
		"argCall", "dictionaryCallStmt", "argList", "arg", "argDefaultValue", 
		"subscripts", "subscript", "unrestrictedIdentifier", "identifier", "asTypeClause", 
		"baseType", "comparisonOperator", "complexType", "fieldLength", "statementLabelDefinition", 
		"statementLabel", "identifierStatementLabel", "lineNumberLabel", "literal", 
		"numberLiteral", "type", "typeHint", "visibility", "keyword", "markerKeyword", 
		"statementKeyword", "endOfLine", "endOfStatement", "commentOrAnnotation", 
		"remComment", "comment", "commentBody", "annotationList", "annotation", 
		"annotationName", "annotationArgList", "annotationArg", "whiteSpace"
	};

	public override string GrammarFileName { get { return "VBAParser.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; module();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleDeclarationsContext moduleDeclarations() {
			return GetRuleContext<ModuleDeclarationsContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 310; whiteSpace();
				}
				break;
			}
			State = 313; endOfStatement();
			State = 317;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 314; moduleHeader();
				State = 315; endOfStatement();
				}
				break;
			}
			State = 320;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 319; moduleConfig();
				}
				break;
			}
			State = 322; endOfStatement();
			State = 324;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 323; moduleAttributes();
				}
				break;
			}
			State = 326; endOfStatement();
			State = 328;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 327; moduleDeclarations();
				}
				break;
			}
			State = 330; endOfStatement();
			State = 332;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 331; moduleBody();
				}
				break;
			}
			State = 334; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(VERSION);
			State = 337; whiteSpace();
			State = 338; numberLiteral();
			State = 340;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 339; whiteSpace();
				}
				break;
			}
			State = 343;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 342; Match(CLASS);
				}
				break;
			}
			State = 345; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public ITerminalNode GUIDLITERAL() { return GetToken(VBAParser.GUIDLITERAL, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(BEGIN);
			State = 355;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 348; whiteSpace();
				State = 349; Match(GUIDLITERAL);
				State = 350; whiteSpace();
				State = 351; unrestrictedIdentifier();
				State = 353;
				switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					State = 352; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 357; endOfStatement();
			State = 359;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 358; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 361;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 363; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; unrestrictedIdentifier();
			State = 369;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 366; whiteSpace();
				}
				}
				State = 371;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 372; Match(EQ);
			State = 376;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 373; whiteSpace();
					}
					} 
				}
				State = 378;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			State = 379; valueStmt(0);
			State = 382;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 380; Match(COLON);
				State = 381; numberLiteral();
				}
				break;
			}
			State = 384; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 386; attributeStmt();
					State = 387; endOfStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 391;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; moduleDeclarationsElement();
			State = 399;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 394; endOfStatement();
					State = 395; moduleDeclarationsElement();
					}
					} 
				}
				State = 401;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			State = 402; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleOption);
		int _la;
		try {
			State = 414;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 404; Match(OPTION_BASE);
				State = 405; whiteSpace();
				State = 406; numberLiteral();
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 408; Match(OPTION_COMPARE);
				State = 409; whiteSpace();
				State = 410;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 412; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 413; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public DefDirectiveContext defDirective() {
			return GetRuleContext<DefDirectiveContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleDeclarationsElement);
		try {
			State = 425;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416; declareStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417; defDirective();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 418; enumerationStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 419; eventStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 420; constStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 421; implementsStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 422; variableStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 423; moduleOption();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 424; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; moduleBodyElement();
			State = 433;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 428; endOfStatement();
					State = 429; moduleBodyElement();
					}
					} 
				}
				State = 435;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			State = 436; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleBodyElement);
		try {
			State = 443;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 438; functionStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 439; propertyGetStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 440; propertySetStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 441; propertyLetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 442; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AttributeValueContext> attributeValue() {
			return GetRuleContexts<AttributeValueContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public AttributeValueContext attributeValue(int i) {
			return GetRuleContext<AttributeValueContext>(i);
		}
		public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 445; Match(ATTRIBUTE);
			State = 446; whiteSpace();
			State = 447; attributeName();
			State = 449;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 448; whiteSpace();
				}
			}

			State = 451; Match(EQ);
			State = 453;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 452; whiteSpace();
				}
				break;
			}
			State = 455; attributeValue();
			State = 466;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 457;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 456; whiteSpace();
						}
					}

					State = 459; Match(COMMA);
					State = 461;
					switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
					case 1:
						{
						State = 460; whiteSpace();
						}
						break;
					}
					State = 463; attributeValue();
					}
					} 
				}
				State = 468;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNameContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public AttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNameContext attributeName() {
		AttributeNameContext _localctx = new AttributeNameContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_attributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; implicitCallStmt_InStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeValueContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeValueContext attributeValue() {
		AttributeValueContext _localctx = new AttributeValueContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_attributeValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; blockStmt();
			State = 479;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 474; endOfStatement();
					State = 475; blockStmt();
					}
					} 
				}
				State = 481;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			State = 482; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public SingleLineIfStmtContext singleLineIfStmt() {
			return GetRuleContext<SingleLineIfStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_blockStmt);
		try {
			State = 530;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 484; statementLabelDefinition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 485; attributeStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 486; closeStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 487; constStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 488; doLoopStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 489; eraseStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 490; errorStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 491; exitStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 492; explicitCallStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 493; forEachStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 494; forNextStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 495; getStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 496; goSubStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 497; goToStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 498; ifStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 499; singleLineIfStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 500; implementsStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 501; inputStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 502; letStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 503; lineInputStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 504; lockStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 505; lsetStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 506; midStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 507; onErrorStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 508; onGoToStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 509; onGoSubStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 510; openStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 511; printStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 512; putStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 513; raiseEventStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 514; redimStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 515; resetStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 516; resumeStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 517; returnStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 518; rsetStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 519; seekStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 520; selectCaseStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 521; setStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 522; stopStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 523; unlockStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 524; variableStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 525; whileWendStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 526; widthStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 527; withStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 528; writeStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 529; implicitCallStmt_InBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<FileNumberContext> fileNumber() {
			return GetRuleContexts<FileNumberContext>();
		}
		public FileNumberContext fileNumber(int i) {
			return GetRuleContext<FileNumberContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 532; Match(CLOSE);
			State = 548;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 533; whiteSpace();
				State = 534; fileNumber();
				State = 545;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 536;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 535; whiteSpace();
							}
						}

						State = 538; Match(COMMA);
						State = 540;
						switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
						case 1:
							{
							State = 539; whiteSpace();
							}
							break;
						}
						State = 542; fileNumber();
						}
						} 
					}
					State = 547;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 550; visibility();
				State = 551; whiteSpace();
				}
			}

			State = 555; Match(CONST);
			State = 556; whiteSpace();
			State = 557; constSubStmt();
			State = 568;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 559;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 558; whiteSpace();
						}
					}

					State = 561; Match(COMMA);
					State = 563;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 562; whiteSpace();
						}
					}

					State = 565; constSubStmt();
					}
					} 
				}
				State = 570;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; identifier();
			State = 573;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 572; typeHint();
				}
			}

			State = 578;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 575; whiteSpace();
				State = 576; asTypeClause();
				}
				break;
			}
			State = 581;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 580; whiteSpace();
				}
			}

			State = 583; Match(EQ);
			State = 585;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 584; whiteSpace();
				}
				break;
			}
			State = 587; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public IReadOnlyList<TypeHintContext> typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 589; visibility();
				State = 590; whiteSpace();
				}
			}

			State = 594; Match(DECLARE);
			State = 595; whiteSpace();
			State = 598;
			_la = _input.La(1);
			if (_la==PTRSAFE) {
				{
				State = 596; Match(PTRSAFE);
				State = 597; whiteSpace();
				}
			}

			State = 605;
			switch (_input.La(1)) {
			case FUNCTION:
				{
				{
				State = 600; Match(FUNCTION);
				State = 602;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
					{
					State = 601; typeHint();
					}
				}

				}
				}
				break;
			case SUB:
				{
				State = 604; Match(SUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 607; whiteSpace();
			State = 608; identifier();
			State = 610;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 609; typeHint();
				}
			}

			State = 612; whiteSpace();
			State = 613; Match(LIB);
			State = 614; whiteSpace();
			State = 615; Match(STRINGLITERAL);
			State = 621;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 616; whiteSpace();
				State = 617; Match(ALIAS);
				State = 618; whiteSpace();
				State = 619; Match(STRINGLITERAL);
				}
				break;
			}
			State = 627;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 624;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 623; whiteSpace();
					}
				}

				State = 626; argList();
				}
				break;
			}
			State = 632;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 629; whiteSpace();
				State = 630; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefDirectiveContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public LetterSpecContext letterSpec(int i) {
			return GetRuleContext<LetterSpecContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<LetterSpecContext> letterSpec() {
			return GetRuleContexts<LetterSpecContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public DefTypeContext defType() {
			return GetRuleContext<DefTypeContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public DefDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDefDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDefDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefDirectiveContext defDirective() {
		DefDirectiveContext _localctx = new DefDirectiveContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_defDirective);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 634; defType();
			State = 635; whiteSpace();
			State = 636; letterSpec();
			State = 647;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,50,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 638;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 637; whiteSpace();
						}
					}

					State = 640; Match(COMMA);
					State = 642;
					switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
					case 1:
						{
						State = 641; whiteSpace();
						}
						break;
					}
					State = 644; letterSpec();
					}
					} 
				}
				State = 649;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,50,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefTypeContext : ParserRuleContext {
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public DefTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDefType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDefType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefTypeContext defType() {
		DefTypeContext _localctx = new DefTypeContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_defType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			_la = _input.La(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (DEFBOOL - 70)) | (1L << (DEFBYTE - 70)) | (1L << (DEFDATE - 70)) | (1L << (DEFDBL - 70)) | (1L << (DEFCUR - 70)) | (1L << (DEFINT - 70)) | (1L << (DEFLNG - 70)) | (1L << (DEFLNGLNG - 70)) | (1L << (DEFLNGPTR - 70)) | (1L << (DEFOBJ - 70)) | (1L << (DEFSNG - 70)) | (1L << (DEFSTR - 70)) | (1L << (DEFVAR - 70)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterSpecContext : ParserRuleContext {
		public SingleLetterContext singleLetter() {
			return GetRuleContext<SingleLetterContext>(0);
		}
		public UniversalLetterRangeContext universalLetterRange() {
			return GetRuleContext<UniversalLetterRangeContext>(0);
		}
		public LetterRangeContext letterRange() {
			return GetRuleContext<LetterRangeContext>(0);
		}
		public LetterSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterSpecContext letterSpec() {
		LetterSpecContext _localctx = new LetterSpecContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_letterSpec);
		try {
			State = 655;
			switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 652; singleLetter();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 653; universalLetterRange();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 654; letterRange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public SingleLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLetterContext singleLetter() {
		SingleLetterContext _localctx = new SingleLetterContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_singleLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniversalLetterRangeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public UpperCaseAContext upperCaseA() {
			return GetRuleContext<UpperCaseAContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public UpperCaseZContext upperCaseZ() {
			return GetRuleContext<UpperCaseZContext>(0);
		}
		public UniversalLetterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_universalLetterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUniversalLetterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUniversalLetterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalLetterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniversalLetterRangeContext universalLetterRange() {
		UniversalLetterRangeContext _localctx = new UniversalLetterRangeContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_universalLetterRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659; upperCaseA();
			State = 661;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 660; whiteSpace();
				}
			}

			State = 663; Match(MINUS);
			State = 665;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 664; whiteSpace();
				}
				break;
			}
			State = 667; upperCaseZ();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperCaseAContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public UpperCaseAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperCaseA; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperCaseA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperCaseA(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperCaseA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperCaseAContext upperCaseA() {
		UpperCaseAContext _localctx = new UpperCaseAContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_upperCaseA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			if (!(_input.Lt(1).Text.Equals("A"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"A\")");
			State = 670; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperCaseZContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public UpperCaseZContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperCaseZ; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperCaseZ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperCaseZ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperCaseZ(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperCaseZContext upperCaseZ() {
		UpperCaseZContext _localctx = new UpperCaseZContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_upperCaseZ);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			if (!(_input.Lt(1).Text.Equals("Z"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"Z\")");
			State = 673; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterRangeContext : ParserRuleContext {
		public LastLetterContext lastLetter() {
			return GetRuleContext<LastLetterContext>(0);
		}
		public FirstLetterContext firstLetter() {
			return GetRuleContext<FirstLetterContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public LetterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterRangeContext letterRange() {
		LetterRangeContext _localctx = new LetterRangeContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_letterRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675; firstLetter();
			State = 677;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 676; whiteSpace();
				}
			}

			State = 679; Match(MINUS);
			State = 681;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 680; whiteSpace();
				}
			}

			State = 683; lastLetter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public FirstLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFirstLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFirstLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstLetterContext firstLetter() {
		FirstLetterContext _localctx = new FirstLetterContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_firstLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LastLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLastLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLastLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastLetterContext lastLetter() {
		LastLetterContext _localctx = new LastLetterContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_lastLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_doLoopStmt);
		int _la;
		try {
			State = 718;
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 689; Match(DO);
				State = 690; endOfStatement();
				State = 692;
				switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
				case 1:
					{
					State = 691; block();
					}
					break;
				}
				State = 694; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 696; Match(DO);
				State = 697; whiteSpace();
				State = 698;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 699; whiteSpace();
				State = 700; valueStmt(0);
				State = 701; endOfStatement();
				State = 703;
				switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					State = 702; block();
					}
					break;
				}
				State = 705; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 707; Match(DO);
				State = 708; endOfStatement();
				State = 710;
				switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					State = 709; block();
					}
					break;
				}
				State = 712; Match(LOOP);
				State = 713; whiteSpace();
				State = 714;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 715; whiteSpace();
				State = 716; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 720; visibility();
				State = 721; whiteSpace();
				}
			}

			State = 725; Match(ENUM);
			State = 726; whiteSpace();
			State = 727; identifier();
			State = 728; endOfStatement();
			State = 732;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (COLLECTION - 193)) | (1L << (DELETESETTING - 193)) | (1L << (LOAD - 193)) | (1L << (RMDIR - 193)) | (1L << (SENDKEYS - 193)) | (1L << (SETATTR - 193)) | (1L << (RESUME_NEXT - 193)))) != 0)) {
				{
				{
				State = 729; enumerationStmt_Constant();
				}
				}
				State = 734;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 735; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737; identifier();
			State = 746;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 739;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 738; whiteSpace();
					}
				}

				State = 741; Match(EQ);
				State = 743;
				switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					State = 742; whiteSpace();
					}
					break;
				}
				State = 745; valueStmt(0);
				}
				break;
			}
			State = 748; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 750; Match(ERASE);
			State = 751; whiteSpace();
			State = 752; valueStmt(0);
			State = 763;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,67,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 754;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 753; whiteSpace();
						}
					}

					State = 756; Match(COMMA);
					State = 758;
					switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
					case 1:
						{
						State = 757; whiteSpace();
						}
						break;
					}
					State = 760; valueStmt(0);
					}
					} 
				}
				State = 765;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,67,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766; Match(ERROR);
			State = 767; whiteSpace();
			State = 768; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 770; visibility();
				State = 771; whiteSpace();
				}
			}

			State = 775; Match(EVENT);
			State = 776; whiteSpace();
			State = 777; identifier();
			State = 779;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 778; whiteSpace();
				}
			}

			State = 781; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			_la = _input.La(1);
			if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (EXIT_DO - 104)) | (1L << (EXIT_FOR - 104)) | (1L << (EXIT_FUNCTION - 104)) | (1L << (EXIT_PROPERTY - 104)) | (1L << (EXIT_SUB - 104)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_forEachStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; Match(FOR);
			State = 786; whiteSpace();
			State = 787; Match(EACH);
			State = 788; whiteSpace();
			State = 789; valueStmt(0);
			State = 790; whiteSpace();
			State = 791; Match(IN);
			State = 792; whiteSpace();
			State = 793; valueStmt(0);
			State = 794; endOfStatement();
			State = 796;
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 795; block();
				}
				break;
			}
			State = 798; Match(NEXT);
			State = 802;
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 799; whiteSpace();
				State = 800; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804; Match(FOR);
			State = 805; whiteSpace();
			State = 806; valueStmt(0);
			State = 808;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 807; whiteSpace();
				}
			}

			State = 810; Match(EQ);
			State = 812;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 811; whiteSpace();
				}
				break;
			}
			State = 814; valueStmt(0);
			State = 815; whiteSpace();
			State = 816; Match(TO);
			State = 817; whiteSpace();
			State = 818; valueStmt(0);
			State = 824;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 819; whiteSpace();
				State = 820; Match(STEP);
				State = 821; whiteSpace();
				State = 822; valueStmt(0);
				}
				break;
			}
			State = 826; endOfStatement();
			State = 828;
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 827; block();
				}
				break;
			}
			State = 830; Match(NEXT);
			State = 834;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 831; whiteSpace();
				State = 832; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 836; visibility();
				State = 837; whiteSpace();
				}
			}

			State = 843;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 841; Match(STATIC);
				State = 842; whiteSpace();
				}
			}

			State = 845; Match(FUNCTION);
			State = 847;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 846; whiteSpace();
				}
			}

			State = 849; functionName();
			State = 851;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 850; typeHint();
				}
				break;
			}
			State = 857;
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 854;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 853; whiteSpace();
					}
				}

				State = 856; argList();
				}
				break;
			}
			State = 863;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 860;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 859; whiteSpace();
					}
				}

				State = 862; asTypeClause();
				}
				break;
			}
			State = 865; endOfStatement();
			State = 867;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 866; block();
				}
			}

			State = 869; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873; Match(GET);
			State = 874; whiteSpace();
			State = 875; fileNumber();
			State = 877;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 876; whiteSpace();
				}
			}

			State = 879; Match(COMMA);
			State = 881;
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 880; whiteSpace();
				}
				break;
			}
			State = 884;
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 883; valueStmt(0);
				}
				break;
			}
			State = 887;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 886; whiteSpace();
				}
			}

			State = 889; Match(COMMA);
			State = 891;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 890; whiteSpace();
				}
				break;
			}
			State = 893; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895; Match(GOSUB);
			State = 896; whiteSpace();
			State = 897; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 899; Match(GOTO);
			State = 900; whiteSpace();
			State = 901; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<ElseIfBlockContext> elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 903; Match(IF);
			State = 904; whiteSpace();
			State = 905; booleanExpression();
			State = 906; whiteSpace();
			State = 907; Match(THEN);
			State = 908; endOfStatement();
			State = 910;
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 909; block();
				}
				break;
			}
			State = 915;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ELSEIF) {
				{
				{
				State = 912; elseIfBlock();
				}
				}
				State = 917;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 919;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 918; elseBlock();
				}
			}

			State = 921; Match(END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_elseIfBlock);
		try {
			State = 943;
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 923; Match(ELSEIF);
				State = 924; whiteSpace();
				State = 925; booleanExpression();
				State = 926; whiteSpace();
				State = 927; Match(THEN);
				State = 928; endOfStatement();
				State = 930;
				switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
				case 1:
					{
					State = 929; block();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 932; Match(ELSEIF);
				State = 933; whiteSpace();
				State = 934; booleanExpression();
				State = 935; whiteSpace();
				State = 936; Match(THEN);
				State = 938;
				switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
				case 1:
					{
					State = 937; whiteSpace();
					}
					break;
				}
				State = 941;
				switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					State = 940; block();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_elseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945; Match(ELSE);
			State = 946; endOfStatement();
			State = 948;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 947; block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineIfStmtContext : ParserRuleContext {
		public IfWithEmptyThenContext ifWithEmptyThen() {
			return GetRuleContext<IfWithEmptyThenContext>(0);
		}
		public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
			return GetRuleContext<IfWithNonEmptyThenContext>(0);
		}
		public SingleLineIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineIfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineIfStmtContext singleLineIfStmt() {
		SingleLineIfStmtContext _localctx = new SingleLineIfStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_singleLineIfStmt);
		try {
			State = 952;
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 950; ifWithNonEmptyThen();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 951; ifWithEmptyThen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithNonEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public IfWithNonEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithNonEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithNonEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithNonEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithNonEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
		IfWithNonEmptyThenContext _localctx = new IfWithNonEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_ifWithNonEmptyThen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954; Match(IF);
			State = 956;
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				State = 955; whiteSpace();
				}
				break;
			}
			State = 958; booleanExpression();
			State = 960;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 959; whiteSpace();
				}
			}

			State = 962; Match(THEN);
			State = 964;
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				State = 963; whiteSpace();
				}
				break;
			}
			State = 966; listOrLabel();
			State = 970;
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				State = 967; whiteSpace();
				State = 968; singleLineElseClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public IfWithEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithEmptyThenContext ifWithEmptyThen() {
		IfWithEmptyThenContext _localctx = new IfWithEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_ifWithEmptyThen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972; Match(IF);
			State = 974;
			switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				State = 973; whiteSpace();
				}
				break;
			}
			State = 976; booleanExpression();
			State = 978;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 977; whiteSpace();
				}
			}

			State = 980; Match(THEN);
			State = 981; endOfStatement();
			State = 983;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 982; whiteSpace();
				}
			}

			State = 985; singleLineElseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineElseClauseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public SingleLineElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineElseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineElseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineElseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineElseClauseContext singleLineElseClause() {
		SingleLineElseClauseContext _localctx = new SingleLineElseClauseContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_singleLineElseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987; Match(ELSE);
			State = 989;
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				State = 988; whiteSpace();
				}
				break;
			}
			State = 992;
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				State = 991; listOrLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOrLabelContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public SameLineStatementContext sameLineStatement(int i) {
			return GetRuleContext<SameLineStatementContext>(i);
		}
		public IReadOnlyList<SameLineStatementContext> sameLineStatement() {
			return GetRuleContexts<SameLineStatementContext>();
		}
		public ListOrLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOrLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterListOrLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitListOrLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOrLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOrLabelContext listOrLabel() {
		ListOrLabelContext _localctx = new ListOrLabelContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_listOrLabel);
		int _la;
		try {
			int _alt;
			State = 1032;
			switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 994; lineNumberLabel();
				State = 1007;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,112,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 996;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 995; whiteSpace();
							}
						}

						State = 998; Match(COLON);
						State = 1000;
						switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
						case 1:
							{
							State = 999; whiteSpace();
							}
							break;
						}
						State = 1003;
						switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
						case 1:
							{
							State = 1002; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1009;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,112,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1014;
				_la = _input.La(1);
				if (_la==COLON) {
					{
					State = 1010; Match(COLON);
					State = 1012;
					switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
					case 1:
						{
						State = 1011; whiteSpace();
						}
						break;
					}
					}
				}

				State = 1016; sameLineStatement();
				State = 1029;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,118,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1018;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1017; whiteSpace();
							}
						}

						State = 1020; Match(COLON);
						State = 1022;
						switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
						case 1:
							{
							State = 1021; whiteSpace();
							}
							break;
						}
						State = 1025;
						switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
						case 1:
							{
							State = 1024; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1031;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,118,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SameLineStatementContext : ParserRuleContext {
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public SameLineStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sameLineStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSameLineStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSameLineStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSameLineStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SameLineStatementContext sameLineStatement() {
		SameLineStatementContext _localctx = new SameLineStatementContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_sameLineStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1034; blockStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_booleanExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1038; Match(IMPLEMENTS);
			State = 1039; whiteSpace();
			State = 1040; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1042; Match(INPUT);
			State = 1043; whiteSpace();
			State = 1044; fileNumber();
			State = 1053;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1046;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1045; whiteSpace();
						}
					}

					State = 1048; Match(COMMA);
					State = 1050;
					switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
					case 1:
						{
						State = 1049; whiteSpace();
						}
						break;
					}
					State = 1052; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1055;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,122,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059;
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 1057; Match(LET);
				State = 1058; whiteSpace();
				}
				break;
			}
			State = 1061; valueStmt(0);
			State = 1063;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1062; whiteSpace();
				}
			}

			State = 1065; Match(EQ);
			State = 1067;
			switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				State = 1066; whiteSpace();
				}
				break;
			}
			State = 1069; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071; Match(LINE_INPUT);
			State = 1072; whiteSpace();
			State = 1073; fileNumber();
			State = 1075;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1074; whiteSpace();
				}
			}

			State = 1077; Match(COMMA);
			State = 1079;
			switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				State = 1078; whiteSpace();
				}
				break;
			}
			State = 1081; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1083; Match(LOCK);
			State = 1084; whiteSpace();
			State = 1085; valueStmt(0);
			State = 1101;
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				State = 1087;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1086; whiteSpace();
					}
				}

				State = 1089; Match(COMMA);
				State = 1091;
				switch ( Interpreter.AdaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					State = 1090; whiteSpace();
					}
					break;
				}
				State = 1093; valueStmt(0);
				State = 1099;
				switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
				case 1:
					{
					State = 1094; whiteSpace();
					State = 1095; Match(TO);
					State = 1096; whiteSpace();
					State = 1097; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1103; Match(LSET);
			State = 1104; whiteSpace();
			State = 1105; valueStmt(0);
			State = 1107;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1106; whiteSpace();
				}
			}

			State = 1109; Match(EQ);
			State = 1111;
			switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				State = 1110; whiteSpace();
				}
				break;
			}
			State = 1113; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115; Match(MID);
			State = 1117;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1116; whiteSpace();
				}
			}

			State = 1119; Match(LPAREN);
			State = 1121;
			switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				State = 1120; whiteSpace();
				}
				break;
			}
			State = 1123; argsCall();
			State = 1125;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1124; whiteSpace();
				}
			}

			State = 1127; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParser.ON_LOCAL_ERROR, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1129;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1130; whiteSpace();
			State = 1139;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1131; Match(GOTO);
				State = 1132; whiteSpace();
				State = 1133; valueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 1135; Match(RESUME);
				State = 1136; whiteSpace();
				State = 1137; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1141; Match(ON);
			State = 1142; whiteSpace();
			State = 1143; valueStmt(0);
			State = 1144; whiteSpace();
			State = 1145; Match(GOTO);
			State = 1146; whiteSpace();
			State = 1147; valueStmt(0);
			State = 1158;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,140,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1149;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1148; whiteSpace();
						}
					}

					State = 1151; Match(COMMA);
					State = 1153;
					switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
					case 1:
						{
						State = 1152; whiteSpace();
						}
						break;
					}
					State = 1155; valueStmt(0);
					}
					} 
				}
				State = 1160;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,140,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1161; Match(ON);
			State = 1162; whiteSpace();
			State = 1163; valueStmt(0);
			State = 1164; whiteSpace();
			State = 1165; Match(GOSUB);
			State = 1166; whiteSpace();
			State = 1167; valueStmt(0);
			State = 1178;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,143,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1169;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1168; whiteSpace();
						}
					}

					State = 1171; Match(COMMA);
					State = 1173;
					switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
					case 1:
						{
						State = 1172; whiteSpace();
						}
						break;
					}
					State = 1175; valueStmt(0);
					}
					} 
				}
				State = 1180;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,143,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181; Match(OPEN);
			State = 1182; whiteSpace();
			State = 1183; valueStmt(0);
			State = 1184; whiteSpace();
			State = 1185; Match(FOR);
			State = 1186; whiteSpace();
			State = 1187;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (INPUT - 121)) | (1L << (OUTPUT - 121)) | (1L << (RANDOM - 121)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1193;
			switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				State = 1188; whiteSpace();
				State = 1189; Match(ACCESS);
				State = 1190; whiteSpace();
				State = 1191;
				_la = _input.La(1);
				if ( !(((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & ((1L << (READ - 166)) | (1L << (READ_WRITE - 166)) | (1L << (WRITE - 166)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1198;
			switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				State = 1195; whiteSpace();
				State = 1196;
				_la = _input.La(1);
				if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (LOCK_READ - 131)) | (1L << (LOCK_WRITE - 131)) | (1L << (LOCK_READ_WRITE - 131)) | (1L << (SHARED - 131)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1200; whiteSpace();
			State = 1201; Match(AS);
			State = 1202; whiteSpace();
			State = 1203; fileNumber();
			State = 1215;
			switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				State = 1204; whiteSpace();
				State = 1205; Match(LEN);
				State = 1207;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1206; whiteSpace();
					}
				}

				State = 1209; Match(EQ);
				State = 1211;
				switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
				case 1:
					{
					State = 1210; whiteSpace();
					}
					break;
				}
				State = 1213; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> SEMICOLON() { return GetTokens(VBAParser.SEMICOLON); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VBAParser.SEMICOLON, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1250;
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1217; outputList_Expression();
				State = 1230;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,152,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1219;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1218; whiteSpace();
							}
						}

						State = 1221;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1223;
						switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
						case 1:
							{
							State = 1222; whiteSpace();
							}
							break;
						}
						State = 1226;
						switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
						case 1:
							{
							State = 1225; outputList_Expression();
							}
							break;
						}
						}
						} 
					}
					State = 1232;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,152,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1234;
				switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
				case 1:
					{
					State = 1233; outputList_Expression();
					}
					break;
				}
				State = 1246;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1237;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1236; whiteSpace();
							}
						}

						State = 1239;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1241;
						switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
						case 1:
							{
							State = 1240; whiteSpace();
							}
							break;
						}
						State = 1244;
						switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
						case 1:
							{
							State = 1243; outputList_Expression();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1248;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,157,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_outputList_Expression);
		int _la;
		try {
			State = 1269;
			switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1252; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1253;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1267;
				switch ( Interpreter.AdaptivePredict(_input,162,_ctx) ) {
				case 1:
					{
					State = 1255;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1254; whiteSpace();
						}
					}

					State = 1257; Match(LPAREN);
					State = 1259;
					switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
					case 1:
						{
						State = 1258; whiteSpace();
						}
						break;
					}
					State = 1261; argsCall();
					State = 1263;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1262; whiteSpace();
						}
					}

					State = 1265; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271; Match(PRINT);
			State = 1272; whiteSpace();
			State = 1273; fileNumber();
			State = 1275;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1274; whiteSpace();
				}
			}

			State = 1277; Match(COMMA);
			State = 1282;
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				State = 1279;
				switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					State = 1278; whiteSpace();
					}
					break;
				}
				State = 1281; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1284; visibility();
				State = 1285; whiteSpace();
				}
			}

			State = 1291;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1289; Match(STATIC);
				State = 1290; whiteSpace();
				}
			}

			State = 1293; Match(PROPERTY_GET);
			State = 1294; whiteSpace();
			State = 1295; functionName();
			State = 1297;
			switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				State = 1296; typeHint();
				}
				break;
			}
			State = 1303;
			switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				State = 1300;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1299; whiteSpace();
					}
				}

				State = 1302; argList();
				}
				break;
			}
			State = 1308;
			switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				State = 1305; whiteSpace();
				State = 1306; asTypeClause();
				}
				break;
			}
			State = 1310; endOfStatement();
			State = 1312;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 1311; block();
				}
			}

			State = 1314; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1319;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1316; visibility();
				State = 1317; whiteSpace();
				}
			}

			State = 1323;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1321; Match(STATIC);
				State = 1322; whiteSpace();
				}
			}

			State = 1325; Match(PROPERTY_SET);
			State = 1326; whiteSpace();
			State = 1327; subroutineName();
			State = 1332;
			switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				State = 1329;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1328; whiteSpace();
					}
				}

				State = 1331; argList();
				}
				break;
			}
			State = 1334; endOfStatement();
			State = 1336;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 1335; block();
				}
			}

			State = 1338; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1343;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1340; visibility();
				State = 1341; whiteSpace();
				}
			}

			State = 1347;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1345; Match(STATIC);
				State = 1346; whiteSpace();
				}
			}

			State = 1349; Match(PROPERTY_LET);
			State = 1350; whiteSpace();
			State = 1351; subroutineName();
			State = 1356;
			switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				State = 1353;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1352; whiteSpace();
					}
				}

				State = 1355; argList();
				}
				break;
			}
			State = 1358; endOfStatement();
			State = 1360;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 1359; block();
				}
			}

			State = 1362; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1364; Match(PUT);
			State = 1365; whiteSpace();
			State = 1366; fileNumber();
			State = 1368;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1367; whiteSpace();
				}
			}

			State = 1370; Match(COMMA);
			State = 1372;
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 1371; whiteSpace();
				}
				break;
			}
			State = 1375;
			switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				State = 1374; valueStmt(0);
				}
				break;
			}
			State = 1378;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1377; whiteSpace();
				}
			}

			State = 1380; Match(COMMA);
			State = 1382;
			switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				State = 1381; whiteSpace();
				}
				break;
			}
			State = 1384; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386; Match(RAISEEVENT);
			State = 1387; whiteSpace();
			State = 1388; identifier();
			State = 1403;
			switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				State = 1390;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1389; whiteSpace();
					}
				}

				State = 1392; Match(LPAREN);
				State = 1394;
				switch ( Interpreter.AdaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					State = 1393; whiteSpace();
					}
					break;
				}
				State = 1400;
				switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
				case 1:
					{
					State = 1396; argsCall();
					State = 1398;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1397; whiteSpace();
						}
					}

					}
					break;
				}
				State = 1402; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<RedimSubStmtContext> redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1405; Match(REDIM);
			State = 1406; whiteSpace();
			State = 1409;
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				State = 1407; Match(PRESERVE);
				State = 1408; whiteSpace();
				}
				break;
			}
			State = 1411; redimSubStmt();
			State = 1422;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,197,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1413;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1412; whiteSpace();
						}
					}

					State = 1415; Match(COMMA);
					State = 1417;
					switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
					case 1:
						{
						State = 1416; whiteSpace();
						}
						break;
					}
					State = 1419; redimSubStmt();
					}
					} 
				}
				State = 1424;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,197,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425; implicitCallStmt_InStmt();
			State = 1427;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1426; whiteSpace();
				}
			}

			State = 1429; Match(LPAREN);
			State = 1431;
			switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				State = 1430; whiteSpace();
				}
				break;
			}
			State = 1433; subscripts();
			State = 1435;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1434; whiteSpace();
				}
			}

			State = 1437; Match(RPAREN);
			State = 1441;
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				State = 1438; whiteSpace();
				State = 1439; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1443; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445; Match(RESUME);
			State = 1451;
			switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				State = 1446; whiteSpace();
				State = 1449;
				switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
				case 1:
					{
					State = 1447; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1448; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1453; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1455; Match(RSET);
			State = 1456; whiteSpace();
			State = 1457; valueStmt(0);
			State = 1459;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1458; whiteSpace();
				}
			}

			State = 1461; Match(EQ);
			State = 1463;
			switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				State = 1462; whiteSpace();
				}
				break;
			}
			State = 1465; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1467; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1469; Match(SEEK);
			State = 1470; whiteSpace();
			State = 1471; fileNumber();
			State = 1473;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1472; whiteSpace();
				}
			}

			State = 1475; Match(COMMA);
			State = 1477;
			switch ( Interpreter.AdaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				State = 1476; whiteSpace();
				}
				break;
			}
			State = 1479; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public IReadOnlyList<SC_CaseContext> sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1481; Match(SELECT);
			State = 1482; whiteSpace();
			State = 1483; Match(CASE);
			State = 1484; whiteSpace();
			State = 1485; valueStmt(0);
			State = 1486; endOfStatement();
			State = 1490;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1487; sC_Case();
				}
				}
				State = 1492;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1493; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_SelectionContext : ParserRuleContext {
		public SC_SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Selection; } }
	 
		public SC_SelectionContext() { }
		public virtual void CopyFrom(SC_SelectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondValueContext : SC_SelectionContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public CaseCondValueContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondToContext : SC_SelectionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondToContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondIsContext : SC_SelectionContext {
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public CaseCondIsContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_SelectionContext sC_Selection() {
		SC_SelectionContext _localctx = new SC_SelectionContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_sC_Selection);
		int _la;
		try {
			State = 1512;
			switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
			case 1:
				_localctx = new CaseCondIsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1495; Match(IS);
				State = 1497;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1496; whiteSpace();
					}
				}

				State = 1499; comparisonOperator();
				State = 1501;
				switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
				case 1:
					{
					State = 1500; whiteSpace();
					}
					break;
				}
				State = 1503; valueStmt(0);
				}
				break;

			case 2:
				_localctx = new CaseCondToContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1505; valueStmt(0);
				State = 1506; whiteSpace();
				State = 1507; Match(TO);
				State = 1508; whiteSpace();
				State = 1509; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1511; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_sC_Case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514; Match(CASE);
			State = 1515; whiteSpace();
			State = 1516; sC_Cond();
			State = 1517; endOfStatement();
			State = 1519;
			switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
			case 1:
				{
				State = 1518; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondSelectionContext : SC_CondContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<SC_SelectionContext> sC_Selection() {
			return GetRuleContexts<SC_SelectionContext>();
		}
		public SC_SelectionContext sC_Selection(int i) {
			return GetRuleContext<SC_SelectionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CaseCondSelectionContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondSelection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1536;
			switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1521; Match(ELSE);
				}
				break;

			case 2:
				_localctx = new CaseCondSelectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1522; sC_Selection();
				State = 1533;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,215,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1524;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1523; whiteSpace();
							}
						}

						State = 1526; Match(COMMA);
						State = 1528;
						switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
						case 1:
							{
							State = 1527; whiteSpace();
							}
							break;
						}
						State = 1530; sC_Selection();
						}
						} 
					}
					State = 1535;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,215,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1538; Match(SET);
			State = 1539; whiteSpace();
			State = 1540; valueStmt(0);
			State = 1542;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1541; whiteSpace();
				}
			}

			State = 1544; Match(EQ);
			State = 1546;
			switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				State = 1545; whiteSpace();
				}
				break;
			}
			State = 1548; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1553;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1550; visibility();
				State = 1551; whiteSpace();
				}
			}

			State = 1557;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1555; Match(STATIC);
				State = 1556; whiteSpace();
				}
			}

			State = 1559; Match(SUB);
			State = 1561;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1560; whiteSpace();
				}
			}

			State = 1563; subroutineName();
			State = 1568;
			switch ( Interpreter.AdaptivePredict(_input,223,_ctx) ) {
			case 1:
				{
				State = 1565;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1564; whiteSpace();
					}
				}

				State = 1567; argList();
				}
				break;
			}
			State = 1570; endOfStatement();
			State = 1572;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 1571; block();
				}
			}

			State = 1574; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubroutineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubroutineName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubroutineName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineNameContext subroutineName() {
		SubroutineNameContext _localctx = new SubroutineNameContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_subroutineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1576; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1578; visibility();
				State = 1579; whiteSpace();
				}
			}

			State = 1583; Match(TYPE);
			State = 1584; whiteSpace();
			State = 1585; identifier();
			State = 1586; endOfStatement();
			State = 1590;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (COLLECTION - 193)) | (1L << (DELETESETTING - 193)) | (1L << (LOAD - 193)) | (1L << (RMDIR - 193)) | (1L << (SENDKEYS - 193)) | (1L << (SETATTR - 193)) | (1L << (RESUME_NEXT - 193)))) != 0)) {
				{
				{
				State = 1587; typeStmt_Element();
				}
				}
				State = 1592;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1593; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1595; identifier();
			State = 1610;
			switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				State = 1597;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1596; whiteSpace();
					}
				}

				State = 1599; Match(LPAREN);
				State = 1604;
				switch ( Interpreter.AdaptivePredict(_input,229,_ctx) ) {
				case 1:
					{
					State = 1601;
					switch ( Interpreter.AdaptivePredict(_input,228,_ctx) ) {
					case 1:
						{
						State = 1600; whiteSpace();
						}
						break;
					}
					State = 1603; subscripts();
					}
					break;
				}
				State = 1607;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1606; whiteSpace();
					}
				}

				State = 1609; Match(RPAREN);
				}
				break;
			}
			State = 1615;
			switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				State = 1612; whiteSpace();
				State = 1613; asTypeClause();
				}
				break;
			}
			State = 1617; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1619; Match(UNLOCK);
			State = 1620; whiteSpace();
			State = 1621; fileNumber();
			State = 1637;
			switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				State = 1623;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1622; whiteSpace();
					}
				}

				State = 1625; Match(COMMA);
				State = 1627;
				switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
				case 1:
					{
					State = 1626; whiteSpace();
					}
					break;
				}
				State = 1629; valueStmt(0);
				State = 1635;
				switch ( Interpreter.AdaptivePredict(_input,235,_ctx) ) {
				case 1:
					{
					State = 1630; whiteSpace();
					State = 1631; Match(TO);
					State = 1632; whiteSpace();
					State = 1633; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfIsExpressionContext typeOfIsExpression() {
			return GetRuleContext<TypeOfIsExpressionContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsRelationalContext : ValueStmtContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsRelationalContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsRelational(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsRelational(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIntDivContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INTDIV() { return GetToken(VBAParser.INTDIV, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsIntDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsIntDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsIntDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIntDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 182;
		EnterRecursionRule(_localctx, 182, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1684;
			switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
			case 1:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1640; Match(NEW);
				State = 1642;
				switch ( Interpreter.AdaptivePredict(_input,237,_ctx) ) {
				case 1:
					{
					State = 1641; whiteSpace();
					}
					break;
				}
				State = 1644; valueStmt(19);
				}
				break;

			case 2:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1645; Match(ADDRESSOF);
				State = 1647;
				switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
				case 1:
					{
					State = 1646; whiteSpace();
					}
					break;
				}
				State = 1649; valueStmt(16);
				}
				break;

			case 3:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1650; unrestrictedIdentifier();
				State = 1652;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1651; whiteSpace();
					}
				}

				State = 1654; Match(ASSIGN);
				State = 1656;
				switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
				case 1:
					{
					State = 1655; whiteSpace();
					}
					break;
				}
				State = 1658; valueStmt(15);
				}
				break;

			case 4:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1660; Match(MINUS);
				State = 1662;
				switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
				case 1:
					{
					State = 1661; whiteSpace();
					}
					break;
				}
				State = 1664; valueStmt(13);
				}
				break;

			case 5:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1665; Match(NOT);
				State = 1667;
				switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
				case 1:
					{
					State = 1666; whiteSpace();
					}
					break;
				}
				State = 1669; valueStmt(6);
				}
				break;

			case 6:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1670; literal();
				}
				break;

			case 7:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1671; implicitCallStmt_InStmt();
				}
				break;

			case 8:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1672; Match(LPAREN);
				State = 1674;
				switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
				case 1:
					{
					State = 1673; whiteSpace();
					}
					break;
				}
				State = 1676; valueStmt(0);
				State = 1678;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1677; whiteSpace();
					}
				}

				State = 1680; Match(RPAREN);
				}
				break;

			case 9:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1682; typeOfIsExpression();
				}
				break;

			case 10:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1683; midStmt();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1796;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,271,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1794;
					switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
					case 1:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1686;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 1688;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1687; whiteSpace();
							}
						}

						State = 1690; Match(POW);
						State = 1692;
						switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
						case 1:
							{
							State = 1691; whiteSpace();
							}
							break;
						}
						State = 1694; valueStmt(15);
						}
						break;

					case 2:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1695;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 1697;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1696; whiteSpace();
							}
						}

						State = 1699;
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1701;
						switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
						case 1:
							{
							State = 1700; whiteSpace();
							}
							break;
						}
						State = 1703; valueStmt(13);
						}
						break;

					case 3:
						{
						_localctx = new VsIntDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1704;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 1706;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1705; whiteSpace();
							}
						}

						State = 1708; Match(INTDIV);
						State = 1710;
						switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
						case 1:
							{
							State = 1709; whiteSpace();
							}
							break;
						}
						State = 1712; valueStmt(12);
						}
						break;

					case 4:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1713;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 1715;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1714; whiteSpace();
							}
						}

						State = 1717; Match(MOD);
						State = 1719;
						switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
						case 1:
							{
							State = 1718; whiteSpace();
							}
							break;
						}
						State = 1721; valueStmt(11);
						}
						break;

					case 5:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1722;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 1724;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1723; whiteSpace();
							}
						}

						State = 1726;
						_la = _input.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1728;
						switch ( Interpreter.AdaptivePredict(_input,255,_ctx) ) {
						case 1:
							{
							State = 1727; whiteSpace();
							}
							break;
						}
						State = 1730; valueStmt(10);
						}
						break;

					case 6:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1731;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 1733;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1732; whiteSpace();
							}
						}

						State = 1735; Match(AMPERSAND);
						State = 1737;
						switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
						case 1:
							{
							State = 1736; whiteSpace();
							}
							break;
						}
						State = 1739; valueStmt(9);
						}
						break;

					case 7:
						{
						_localctx = new VsRelationalContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1740;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 1742;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1741; whiteSpace();
							}
						}

						State = 1744;
						_la = _input.La(1);
						if ( !(_la==IS || _la==LIKE || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (EQ - 206)) | (1L << (GEQ - 206)) | (1L << (GT - 206)) | (1L << (LEQ - 206)) | (1L << (LT - 206)) | (1L << (NEQ - 206)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1746;
						switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
						case 1:
							{
							State = 1745; whiteSpace();
							}
							break;
						}
						State = 1748; valueStmt(8);
						}
						break;

					case 8:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1749;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 1751;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1750; whiteSpace();
							}
						}

						State = 1753; Match(AND);
						State = 1755;
						switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
						case 1:
							{
							State = 1754; whiteSpace();
							}
							break;
						}
						State = 1757; valueStmt(6);
						}
						break;

					case 9:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1758;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 1760;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1759; whiteSpace();
							}
						}

						State = 1762; Match(OR);
						State = 1764;
						switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
						case 1:
							{
							State = 1763; whiteSpace();
							}
							break;
						}
						State = 1766; valueStmt(5);
						}
						break;

					case 10:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1767;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 1769;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1768; whiteSpace();
							}
						}

						State = 1771; Match(XOR);
						State = 1773;
						switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
						case 1:
							{
							State = 1772; whiteSpace();
							}
							break;
						}
						State = 1775; valueStmt(4);
						}
						break;

					case 11:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1776;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 1778;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1777; whiteSpace();
							}
						}

						State = 1780; Match(EQV);
						State = 1782;
						switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
						case 1:
							{
							State = 1781; whiteSpace();
							}
							break;
						}
						State = 1784; valueStmt(3);
						}
						break;

					case 12:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1785;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 1787;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1786; whiteSpace();
							}
						}

						State = 1789; Match(IMP);
						State = 1791;
						switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
						case 1:
							{
							State = 1790; whiteSpace();
							}
							break;
						}
						State = 1793; valueStmt(2);
						}
						break;
					}
					} 
				}
				State = 1798;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,271,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeOfIsExpressionContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeOfIsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfIsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeOfIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeOfIsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfIsExpressionContext typeOfIsExpression() {
		TypeOfIsExpressionContext _localctx = new TypeOfIsExpressionContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_typeOfIsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1799; Match(TYPEOF);
			State = 1800; whiteSpace();
			State = 1801; valueStmt(0);
			State = 1807;
			switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				State = 1802; whiteSpace();
				State = 1803; Match(IS);
				State = 1804; whiteSpace();
				State = 1805; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 1809; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 1810; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 1811; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1814; whiteSpace();
			State = 1817;
			switch ( Interpreter.AdaptivePredict(_input,274,_ctx) ) {
			case 1:
				{
				State = 1815; Match(WITHEVENTS);
				State = 1816; whiteSpace();
				}
				break;
			}
			State = 1819; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1821; variableSubStmt();
			State = 1832;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,277,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1823;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1822; whiteSpace();
						}
					}

					State = 1825; Match(COMMA);
					State = 1827;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1826; whiteSpace();
						}
					}

					State = 1829; variableSubStmt();
					}
					} 
				}
				State = 1834;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,277,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1835; identifier();
			State = 1853;
			switch ( Interpreter.AdaptivePredict(_input,283,_ctx) ) {
			case 1:
				{
				State = 1837;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1836; whiteSpace();
					}
				}

				State = 1839; Match(LPAREN);
				State = 1841;
				switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
				case 1:
					{
					State = 1840; whiteSpace();
					}
					break;
				}
				State = 1847;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (WS - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
					{
					State = 1843; subscripts();
					State = 1845;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1844; whiteSpace();
						}
					}

					}
				}

				State = 1849; Match(RPAREN);
				State = 1851;
				switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					State = 1850; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 1856;
			switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				State = 1855; typeHint();
				}
				break;
			}
			State = 1861;
			switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				State = 1858; whiteSpace();
				State = 1859; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_whileWendStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1863; Match(WHILE);
			State = 1864; whiteSpace();
			State = 1865; valueStmt(0);
			State = 1866; endOfStatement();
			State = 1868;
			switch ( Interpreter.AdaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				State = 1867; block();
				}
				break;
			}
			State = 1870; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1872; Match(WIDTH);
			State = 1873; whiteSpace();
			State = 1874; fileNumber();
			State = 1876;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1875; whiteSpace();
				}
			}

			State = 1878; Match(COMMA);
			State = 1880;
			switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				State = 1879; whiteSpace();
				}
				break;
			}
			State = 1882; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public WithStmtExpressionContext withStmtExpression() {
			return GetRuleContext<WithStmtExpressionContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_withStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1884; Match(WITH);
			State = 1885; whiteSpace();
			State = 1886; withStmtExpression();
			State = 1887; endOfStatement();
			State = 1889;
			switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
			case 1:
				{
				State = 1888; block();
				}
				break;
			}
			State = 1891; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtExpressionContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WithStmtExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmtExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmtExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmtExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmtExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtExpressionContext withStmtExpression() {
		WithStmtExpressionContext _localctx = new WithStmtExpressionContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_withStmtExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1893; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1895; Match(WRITE);
			State = 1896; whiteSpace();
			State = 1897; fileNumber();
			State = 1899;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1898; whiteSpace();
				}
			}

			State = 1901; Match(COMMA);
			State = 1906;
			switch ( Interpreter.AdaptivePredict(_input,292,_ctx) ) {
			case 1:
				{
				State = 1903;
				switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					State = 1902; whiteSpace();
					}
					break;
				}
				State = 1905; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public FileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberContext fileNumber() {
		FileNumberContext _localctx = new FileNumberContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_fileNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1909;
			_la = _input.La(1);
			if (_la==HASH) {
				{
				State = 1908; Match(HASH);
				}
			}

			State = 1911; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ExplicitCallStmtExpressionContext explicitCallStmtExpression() {
			return GetRuleContext<ExplicitCallStmtExpressionContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_explicitCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1913; Match(CALL);
			State = 1914; whiteSpace();
			State = 1915; explicitCallStmtExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtExpressionContext : ParserRuleContext {
		public ExplicitCallStmtExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmtExpression; } }
	 
		public ExplicitCallStmtExpressionContext() { }
		public virtual void CopyFrom(ExplicitCallStmtExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ECS_MemberCallContext : ExplicitCallStmtExpressionContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_MemberCallContext(ExplicitCallStmtExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterECS_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitECS_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ECS_ProcedureCallContext : ExplicitCallStmtExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_ProcedureCallContext(ExplicitCallStmtExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtExpressionContext explicitCallStmtExpression() {
		ExplicitCallStmtExpressionContext _localctx = new ExplicitCallStmtExpressionContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_explicitCallStmtExpression);
		int _la;
		try {
			int _alt;
			State = 1983;
			switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
			case 1:
				_localctx = new ECS_MemberCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1918;
				switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					State = 1917; implicitCallStmt_InStmt();
					}
					break;
				}
				State = 1920; Match(DOT);
				State = 1921; identifier();
				State = 1923;
				switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					State = 1922; typeHint();
					}
					break;
				}
				State = 1938;
				switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
				case 1:
					{
					State = 1926;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1925; whiteSpace();
						}
					}

					State = 1928; Match(LPAREN);
					State = 1930;
					switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
					case 1:
						{
						State = 1929; whiteSpace();
						}
						break;
					}
					State = 1932; argsCall();
					State = 1934;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1933; whiteSpace();
						}
					}

					State = 1936; Match(RPAREN);
					}
					break;
				}
				State = 1949;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,301,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1941;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1940; whiteSpace();
							}
						}

						State = 1943; Match(LPAREN);
						State = 1944; subscripts();
						State = 1945; Match(RPAREN);
						}
						} 
					}
					State = 1951;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,301,_ctx);
				}
				}
				break;

			case 2:
				_localctx = new ECS_ProcedureCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1952; identifier();
				State = 1954;
				switch ( Interpreter.AdaptivePredict(_input,302,_ctx) ) {
				case 1:
					{
					State = 1953; typeHint();
					}
					break;
				}
				State = 1969;
				switch ( Interpreter.AdaptivePredict(_input,306,_ctx) ) {
				case 1:
					{
					State = 1957;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1956; whiteSpace();
						}
					}

					State = 1959; Match(LPAREN);
					State = 1961;
					switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
					case 1:
						{
						State = 1960; whiteSpace();
						}
						break;
					}
					State = 1963; argsCall();
					State = 1965;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1964; whiteSpace();
						}
					}

					State = 1967; Match(RPAREN);
					}
					break;
				}
				State = 1980;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,308,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1972;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1971; whiteSpace();
							}
						}

						State = 1974; Match(LPAREN);
						State = 1975; subscripts();
						State = 1976; Match(RPAREN);
						}
						} 
					}
					State = 1982;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,308,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_implicitCallStmt_InBlock);
		try {
			State = 1987;
			switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1985; iCS_B_MemberProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1986; iCS_B_ProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_iCS_B_MemberProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1990;
			switch ( Interpreter.AdaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				State = 1989; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 1993;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1992; whiteSpace();
				}
			}

			State = 1995; Match(DOT);
			State = 1997;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1996; whiteSpace();
				}
			}

			State = 1999; unrestrictedIdentifier();
			State = 2001;
			switch ( Interpreter.AdaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				State = 2000; typeHint();
				}
				break;
			}
			State = 2006;
			switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
			case 1:
				{
				State = 2003; whiteSpace();
				State = 2004; argsCall();
				}
				break;
			}
			State = 2012;
			switch ( Interpreter.AdaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				State = 2009;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2008; whiteSpace();
					}
				}

				State = 2011; dictionaryCallStmt();
				}
				break;
			}
			State = 2023;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,319,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2015;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2014; whiteSpace();
						}
					}

					State = 2017; Match(LPAREN);
					State = 2018; subscripts();
					State = 2019; Match(RPAREN);
					}
					} 
				}
				State = 2025;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,319,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_iCS_B_ProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2026; identifier();
			State = 2030;
			switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
			case 1:
				{
				State = 2027; whiteSpace();
				State = 2028; argsCall();
				}
				break;
			}
			State = 2041;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,322,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2033;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2032; whiteSpace();
						}
					}

					State = 2035; Match(LPAREN);
					State = 2036; subscripts();
					State = 2037; Match(RPAREN);
					}
					} 
				}
				State = 2043;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,322,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_implicitCallStmt_InStmt);
		try {
			State = 2048;
			switch ( Interpreter.AdaptivePredict(_input,323,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2044; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2045; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2046; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2047; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_iCS_S_VariableOrProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2050; identifier();
			State = 2052;
			switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				State = 2051; typeHint();
				}
				break;
			}
			State = 2058;
			switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				State = 2055;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2054; whiteSpace();
					}
				}

				State = 2057; dictionaryCallStmt();
				}
				break;
			}
			State = 2069;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,328,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2061;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2060; whiteSpace();
						}
					}

					State = 2063; Match(LPAREN);
					State = 2064; subscripts();
					State = 2065; Match(RPAREN);
					}
					} 
				}
				State = 2071;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,328,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2074;
			switch ( Interpreter.AdaptivePredict(_input,329,_ctx) ) {
			case 1:
				{
				State = 2072; identifier();
				}
				break;

			case 2:
				{
				State = 2073; baseType();
				}
				break;
			}
			State = 2077;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2076; typeHint();
				}
			}

			State = 2080;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2079; whiteSpace();
				}
			}

			State = 2082; Match(LPAREN);
			State = 2084;
			switch ( Interpreter.AdaptivePredict(_input,332,_ctx) ) {
			case 1:
				{
				State = 2083; whiteSpace();
				}
				break;
			}
			State = 2090;
			switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
			case 1:
				{
				State = 2086; argsCall();
				State = 2088;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2087; whiteSpace();
					}
				}

				}
				break;
			}
			State = 2092; Match(RPAREN);
			State = 2097;
			switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				State = 2094;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2093; whiteSpace();
					}
				}

				State = 2096; dictionaryCallStmt();
				}
				break;
			}
			State = 2108;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,338,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2100;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2099; whiteSpace();
						}
					}

					State = 2102; Match(LPAREN);
					State = 2103; subscripts();
					State = 2104; Match(RPAREN);
					}
					} 
				}
				State = 2110;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,338,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallUnrestrictedContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_VariableOrProcedureCallUnrestrictedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCallUnrestricted; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCallUnrestricted(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCallUnrestricted(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCallUnrestricted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallUnrestrictedContext iCS_S_VariableOrProcedureCallUnrestricted() {
		ICS_S_VariableOrProcedureCallUnrestrictedContext _localctx = new ICS_S_VariableOrProcedureCallUnrestrictedContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_iCS_S_VariableOrProcedureCallUnrestricted);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2111; unrestrictedIdentifier();
			State = 2113;
			switch ( Interpreter.AdaptivePredict(_input,339,_ctx) ) {
			case 1:
				{
				State = 2112; typeHint();
				}
				break;
			}
			State = 2119;
			switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				State = 2116;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2115; whiteSpace();
					}
				}

				State = 2118; dictionaryCallStmt();
				}
				break;
			}
			State = 2130;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,343,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2122;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2121; whiteSpace();
						}
					}

					State = 2124; Match(LPAREN);
					State = 2125; subscripts();
					State = 2126; Match(RPAREN);
					}
					} 
				}
				State = 2132;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,343,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallUnrestrictedContext : ParserRuleContext {
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_ProcedureOrArrayCallUnrestrictedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCallUnrestricted; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCallUnrestricted(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCallUnrestricted(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCallUnrestricted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallUnrestrictedContext iCS_S_ProcedureOrArrayCallUnrestricted() {
		ICS_S_ProcedureOrArrayCallUnrestrictedContext _localctx = new ICS_S_ProcedureOrArrayCallUnrestrictedContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_iCS_S_ProcedureOrArrayCallUnrestricted);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2135;
			switch ( Interpreter.AdaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				State = 2133; unrestrictedIdentifier();
				}
				break;

			case 2:
				{
				State = 2134; baseType();
				}
				break;
			}
			State = 2138;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2137; typeHint();
				}
			}

			State = 2141;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2140; whiteSpace();
				}
			}

			State = 2143; Match(LPAREN);
			State = 2145;
			switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				State = 2144; whiteSpace();
				}
				break;
			}
			State = 2151;
			switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				State = 2147; argsCall();
				State = 2149;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2148; whiteSpace();
					}
				}

				}
				break;
			}
			State = 2153; Match(RPAREN);
			State = 2158;
			switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				State = 2155;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2154; whiteSpace();
					}
				}

				State = 2157; dictionaryCallStmt();
				}
				break;
			}
			State = 2169;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,353,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2161;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2160; whiteSpace();
						}
					}

					State = 2163; Match(LPAREN);
					State = 2164; subscripts();
					State = 2165; Match(RPAREN);
					}
					} 
				}
				State = 2171;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,353,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_iCS_S_MembersCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2174;
			switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
			case 1:
				{
				State = 2172; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2173; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2180;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2176; iCS_S_MemberCall();
					State = 2178;
					switch ( Interpreter.AdaptivePredict(_input,355,_ctx) ) {
					case 1:
						{
						State = 2177; whiteSpace();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2182;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,356,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2188;
			switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				State = 2185;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2184; whiteSpace();
					}
				}

				State = 2187; dictionaryCallStmt();
				}
				break;
			}
			State = 2199;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,360,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2191;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2190; whiteSpace();
						}
					}

					State = 2193; Match(LPAREN);
					State = 2194; subscripts();
					State = 2195; Match(RPAREN);
					}
					} 
				}
				State = 2201;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,360,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public ICS_S_ProcedureOrArrayCallUnrestrictedContext iCS_S_ProcedureOrArrayCallUnrestricted() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallUnrestrictedContext>(0);
		}
		public ICS_S_VariableOrProcedureCallUnrestrictedContext iCS_S_VariableOrProcedureCallUnrestricted() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallUnrestrictedContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_iCS_S_MemberCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2202;
			_la = _input.La(1);
			if ( !(_la==EXCLAMATIONPOINT || _la==DOT) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 2204;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2203; whiteSpace();
				}
			}

			State = 2208;
			switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				State = 2206; iCS_S_VariableOrProcedureCallUnrestricted();
				}
				break;

			case 2:
				{
				State = 2207; iCS_S_ProcedureOrArrayCallUnrestricted();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_iCS_S_DictionaryCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2211;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2210; whiteSpace();
				}
			}

			State = 2213; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> SEMICOLON() { return GetTokens(VBAParser.SEMICOLON); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ArgCallContext> argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VBAParser.SEMICOLON, i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2227;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,367,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2216;
					switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
					case 1:
						{
						State = 2215; argCall();
						}
						break;
					}
					State = 2219;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2218; whiteSpace();
						}
					}

					State = 2221;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2223;
					switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
					case 1:
						{
						State = 2222; whiteSpace();
						}
						break;
					}
					}
					} 
				}
				State = 2229;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,367,_ctx);
			}
			State = 2230; argCall();
			State = 2243;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,371,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2232;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2231; whiteSpace();
						}
					}

					State = 2234;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2236;
					switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
					case 1:
						{
						State = 2235; whiteSpace();
						}
						break;
					}
					State = 2239;
					switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
					case 1:
						{
						State = 2238; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2245;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,371,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2247;
			switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				State = 2246; Match(LPAREN);
				}
				break;
			}
			State = 2251;
			switch ( Interpreter.AdaptivePredict(_input,373,_ctx) ) {
			case 1:
				{
				State = 2249;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2250; whiteSpace();
				}
				break;
			}
			State = 2254;
			_la = _input.La(1);
			if (_la==RPAREN) {
				{
				State = 2253; Match(RPAREN);
				}
			}

			State = 2256; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_dictionaryCallStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2258; Match(EXCLAMATIONPOINT);
			State = 2260;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2259; whiteSpace();
				}
			}

			State = 2262; unrestrictedIdentifier();
			State = 2264;
			switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				State = 2263; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2266; Match(LPAREN);
			State = 2284;
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 2268;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2267; whiteSpace();
					}
				}

				State = 2270; arg();
				State = 2281;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,380,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2272;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2271; whiteSpace();
							}
						}

						State = 2274; Match(COMMA);
						State = 2276;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2275; whiteSpace();
							}
						}

						State = 2278; arg();
						}
						} 
					}
					State = 2283;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,380,_ctx);
				}
				}
				break;
			}
			State = 2287;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2286; whiteSpace();
				}
			}

			State = 2289; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2293;
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				State = 2291; Match(OPTIONAL);
				State = 2292; whiteSpace();
				}
				break;
			}
			State = 2297;
			switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				State = 2295;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2296; whiteSpace();
				}
				break;
			}
			State = 2301;
			switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				State = 2299; Match(PARAMARRAY);
				State = 2300; whiteSpace();
				}
				break;
			}
			State = 2303; unrestrictedIdentifier();
			State = 2305;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) {
				{
				State = 2304; typeHint();
				}
			}

			State = 2315;
			switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				State = 2308;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2307; whiteSpace();
					}
				}

				State = 2310; Match(LPAREN);
				State = 2312;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2311; whiteSpace();
					}
				}

				State = 2314; Match(RPAREN);
				}
				break;
			}
			State = 2321;
			switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				State = 2318;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2317; whiteSpace();
					}
				}

				State = 2320; asTypeClause();
				}
				break;
			}
			State = 2327;
			switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				State = 2324;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2323; whiteSpace();
					}
				}

				State = 2326; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_argDefaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2329; Match(EQ);
			State = 2331;
			switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				State = 2330; whiteSpace();
				}
				break;
			}
			State = 2333; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2335; subscript();
			State = 2346;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,397,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2337;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2336; whiteSpace();
						}
					}

					State = 2339; Match(COMMA);
					State = 2341;
					switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
					case 1:
						{
						State = 2340; whiteSpace();
						}
						break;
					}
					State = 2343; subscript();
					}
					} 
				}
				State = 2348;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,397,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2354;
			switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				State = 2349; valueStmt(0);
				State = 2350; whiteSpace();
				State = 2351; Match(TO);
				State = 2352; whiteSpace();
				}
				break;
			}
			State = 2356; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnrestrictedIdentifierContext : ParserRuleContext {
		public MarkerKeywordContext markerKeyword() {
			return GetRuleContext<MarkerKeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementKeywordContext statementKeyword() {
			return GetRuleContext<StatementKeywordContext>(0);
		}
		public UnrestrictedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unrestrictedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnrestrictedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnrestrictedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnrestrictedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnrestrictedIdentifierContext unrestrictedIdentifier() {
		UnrestrictedIdentifierContext _localctx = new UnrestrictedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_unrestrictedIdentifier);
		try {
			State = 2361;
			switch ( Interpreter.AdaptivePredict(_input,399,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2358; identifier();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2359; statementKeyword();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2360; markerKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_identifier);
		try {
			State = 2365;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2363; Match(IDENTIFIER);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END_SELECT:
			case END_WITH:
			case EQV:
			case ERROR:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case IMP:
			case IN:
			case IS:
			case INTEGER:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON_ERROR:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case COLLECTION:
			case DELETESETTING:
			case LOAD:
			case RMDIR:
			case SENDKEYS:
			case SETATTR:
			case RESUME_NEXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2364; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_asTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2367; Match(AS);
			State = 2369;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2368; whiteSpace();
				}
			}

			State = 2373;
			switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				State = 2371; Match(NEW);
				State = 2372; whiteSpace();
				}
				break;
			}
			State = 2375; type();
			State = 2380;
			switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				State = 2377;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2376; whiteSpace();
					}
				}

				State = 2379; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2382;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CURRENCY) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << BOOLEAN) | (1L << BYTE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DATE - 68)) | (1L << (DOUBLE - 68)) | (1L << (INTEGER - 68)) | (1L << (LONG - 68)))) != 0) || ((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (SINGLE - 178)) | (1L << (STRING - 178)) | (1L << (VARIANT - 178)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2384;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (EQ - 206)) | (1L << (GEQ - 206)) | (1L << (GT - 206)) | (1L << (LEQ - 206)) | (1L << (LT - 206)) | (1L << (NEQ - 206)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> DOT() { return GetTokens(VBAParser.DOT); }
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IReadOnlyList<ITerminalNode> EXCLAMATIONPOINT() { return GetTokens(VBAParser.EXCLAMATIONPOINT); }
		public IReadOnlyList<IdentifierContext> identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public ITerminalNode EXCLAMATIONPOINT(int i) {
			return GetToken(VBAParser.EXCLAMATIONPOINT, i);
		}
		public ITerminalNode DOT(int i) {
			return GetToken(VBAParser.DOT, i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_complexType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2386; identifier();
			State = 2391;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,405,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2387;
					_la = _input.La(1);
					if ( !(_la==EXCLAMATIONPOINT || _la==DOT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2388; identifier();
					}
					} 
				}
				State = 2393;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,405,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2394; Match(MULT);
			State = 2396;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2395; whiteSpace();
				}
			}

			State = 2400;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				{
				State = 2398; numberLiteral();
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END_SELECT:
			case END_WITH:
			case EQV:
			case ERROR:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case IMP:
			case IN:
			case IS:
			case INTEGER:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON_ERROR:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
			case COLLECTION:
			case DELETESETTING:
			case LOAD:
			case RMDIR:
			case SENDKEYS:
			case SETATTR:
			case RESUME_NEXT:
				{
				State = 2399; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLabelDefinitionContext : ParserRuleContext {
		public StatementLabelContext statementLabel() {
			return GetRuleContext<StatementLabelContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public StatementLabelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLabelDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementLabelDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementLabelDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLabelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLabelDefinitionContext statementLabelDefinition() {
		StatementLabelDefinitionContext _localctx = new StatementLabelDefinitionContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_statementLabelDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2402; statementLabel();
			State = 2404;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2403; whiteSpace();
				}
			}

			State = 2406; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLabelContext : ParserRuleContext {
		public IdentifierStatementLabelContext identifierStatementLabel() {
			return GetRuleContext<IdentifierStatementLabelContext>(0);
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public StatementLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLabelContext statementLabel() {
		StatementLabelContext _localctx = new StatementLabelContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_statementLabel);
		try {
			State = 2410;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case EXIT:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case OPTION:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case AS:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CLASS:
			case CLOSE:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case DOUBLE:
			case ELSE:
			case ELSEIF:
			case END_SELECT:
			case END_WITH:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case LSET:
			case ME:
			case MID:
			case MOD:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RAISEEVENT:
			case READ:
			case READ_WRITE:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RSET:
			case SEEK:
			case SELECT:
			case SET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
			case COLLECTION:
			case DELETESETTING:
			case LOAD:
			case RMDIR:
			case SENDKEYS:
			case SETATTR:
			case RESUME_NEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2408; identifierStatementLabel();
				}
				break;
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2409; lineNumberLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStatementLabelContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IdentifierStatementLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierStatementLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifierStatementLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifierStatementLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierStatementLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStatementLabelContext identifierStatementLabel() {
		IdentifierStatementLabelContext _localctx = new IdentifierStatementLabelContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_identifierStatementLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2412; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineNumberLabelContext : ParserRuleContext {
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public LineNumberLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineNumberLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineNumberLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineNumberLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineNumberLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineNumberLabelContext lineNumberLabel() {
		LineNumberLabelContext _localctx = new LineNumberLabelContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_lineNumberLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2414; numberLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public ITerminalNode EMPTY() { return GetToken(VBAParser.EMPTY, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_literal);
		try {
			State = 2424;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2416; numberLiteral();
				}
				break;
			case DATELITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2417; Match(DATELITERAL);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2418; Match(STRINGLITERAL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2419; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2420; Match(FALSE);
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2421; Match(NOTHING);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2422; Match(NULL);
				}
				break;
			case EMPTY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2423; Match(EMPTY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode FLOATLITERAL() { return GetToken(VBAParser.FLOATLITERAL, 0); }
		public ITerminalNode HEXLITERAL() { return GetToken(VBAParser.HEXLITERAL, 0); }
		public ITerminalNode OCTLITERAL() { return GetToken(VBAParser.OCTLITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2426;
			_la = _input.La(1);
			if ( !(((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OCTLITERAL - 226)) | (1L << (HEXLITERAL - 226)) | (1L << (FLOATLITERAL - 226)) | (1L << (INTEGERLITERAL - 226)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2430;
			switch ( Interpreter.AdaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				State = 2428; baseType();
				}
				break;

			case 2:
				{
				State = 2429; complexType();
				}
				break;
			}
			State = 2440;
			switch ( Interpreter.AdaptivePredict(_input,414,_ctx) ) {
			case 1:
				{
				State = 2433;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2432; whiteSpace();
					}
				}

				State = 2435; Match(LPAREN);
				State = 2437;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2436; whiteSpace();
					}
				}

				State = 2439; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(VBAParser.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VBAParser.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ITerminalNode PERCENT() { return GetToken(VBAParser.PERCENT, 0); }
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2442;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2444;
			_la = _input.La(1);
			if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode CLNGLNG() { return GetToken(VBAParser.CLNGLNG, 0); }
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public ITerminalNode MIDTYPESUFFIX() { return GetToken(VBAParser.MIDTYPESUFFIX, 0); }
		public ITerminalNode SCALE() { return GetToken(VBAParser.SCALE, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode DEBUG() { return GetToken(VBAParser.DEBUG, 0); }
		public ITerminalNode CLNGPTR() { return GetToken(VBAParser.CLNGPTR, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode CDEC() { return GetToken(VBAParser.CDEC, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode CSNG() { return GetToken(VBAParser.CSNG, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode MIDBTYPESUFFIX() { return GetToken(VBAParser.MIDBTYPESUFFIX, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public ITerminalNode SGN() { return GetToken(VBAParser.SGN, 0); }
		public ITerminalNode CBYTE() { return GetToken(VBAParser.CBYTE, 0); }
		public ITerminalNode CVAR() { return GetToken(VBAParser.CVAR, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode CDATE() { return GetToken(VBAParser.CDATE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode ABS() { return GetToken(VBAParser.ABS, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode INT() { return GetToken(VBAParser.INT, 0); }
		public ITerminalNode RESUME_NEXT() { return GetToken(VBAParser.RESUME_NEXT, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode LBOUND() { return GetToken(VBAParser.LBOUND, 0); }
		public ITerminalNode UBOUND() { return GetToken(VBAParser.UBOUND, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public ITerminalNode ARRAY() { return GetToken(VBAParser.ARRAY, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode MIDB() { return GetToken(VBAParser.MIDB, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode PSET() { return GetToken(VBAParser.PSET, 0); }
		public ITerminalNode CDBL() { return GetToken(VBAParser.CDBL, 0); }
		public ITerminalNode CLNG() { return GetToken(VBAParser.CLNG, 0); }
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode LENB() { return GetToken(VBAParser.LENB, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode INPUTB() { return GetToken(VBAParser.INPUTB, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode CIRCLE() { return GetToken(VBAParser.CIRCLE, 0); }
		public ITerminalNode LEN(int i) {
			return GetToken(VBAParser.LEN, i);
		}
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode CBOOL() { return GetToken(VBAParser.CBOOL, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode CVERR() { return GetToken(VBAParser.CVERR, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode FIX() { return GetToken(VBAParser.FIX, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode CSTR() { return GetToken(VBAParser.CSTR, 0); }
		public ITerminalNode CINT() { return GetToken(VBAParser.CINT, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public ITerminalNode DOEVENTS() { return GetToken(VBAParser.DOEVENTS, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<ITerminalNode> LEN() { return GetTokens(VBAParser.LEN); }
		public ITerminalNode ANY() { return GetToken(VBAParser.ANY, 0); }
		public ITerminalNode CCUR() { return GetToken(VBAParser.CCUR, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2446;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_WITH - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (COLLECTION - 193)) | (1L << (DELETESETTING - 193)) | (1L << (LOAD - 193)) | (1L << (RMDIR - 193)) | (1L << (SENDKEYS - 193)) | (1L << (SETATTR - 193)) | (1L << (RESUME_NEXT - 193)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerKeywordContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public MarkerKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkerKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkerKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerKeywordContext markerKeyword() {
		MarkerKeywordContext _localctx = new MarkerKeywordContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_markerKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2448; Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementKeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode OPTION() { return GetToken(VBAParser.OPTION, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode EXIT() { return GetToken(VBAParser.EXIT, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public StatementKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementKeywordContext statementKeyword() {
		StatementKeywordContext _localctx = new StatementKeywordContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_statementKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2450;
			_la = _input.La(1);
			if ( !(((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (EXIT - 22)) | (1L << (OPTION - 22)) | (1L << (CALL - 22)) | (1L << (CASE - 22)) | (1L << (CLOSE - 22)) | (1L << (CONST - 22)) | (1L << (DECLARE - 22)) | (1L << (DEFBOOL - 22)) | (1L << (DEFBYTE - 22)) | (1L << (DEFDATE - 22)) | (1L << (DEFDBL - 22)) | (1L << (DEFCUR - 22)) | (1L << (DEFINT - 22)) | (1L << (DEFLNG - 22)) | (1L << (DEFLNGLNG - 22)) | (1L << (DEFLNGPTR - 22)) | (1L << (DEFOBJ - 22)) | (1L << (DEFSNG - 22)) | (1L << (DEFSTR - 22)) | (1L << (DEFVAR - 22)) | (1L << (DIM - 22)) | (1L << (DO - 22)))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (ELSE - 87)) | (1L << (ELSEIF - 87)) | (1L << (END - 87)) | (1L << (ENUM - 87)) | (1L << (ERASE - 87)) | (1L << (EVENT - 87)) | (1L << (FRIEND - 87)) | (1L << (FOR - 87)) | (1L << (FUNCTION - 87)) | (1L << (GET - 87)) | (1L << (GLOBAL - 87)) | (1L << (GOSUB - 87)) | (1L << (GOTO - 87)) | (1L << (IF - 87)) | (1L << (IMPLEMENTS - 87)) | (1L << (INPUT - 87)) | (1L << (LOCK - 87)) | (1L << (LOOP - 87)) | (1L << (LET - 87)) | (1L << (LSET - 87)) | (1L << (NEXT - 87)) | (1L << (ON - 87)) | (1L << (OPEN - 87)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (PRINT - 156)) | (1L << (PRIVATE - 156)) | (1L << (PUBLIC - 156)) | (1L << (PUT - 156)) | (1L << (RAISEEVENT - 156)) | (1L << (REDIM - 156)) | (1L << (RESUME - 156)) | (1L << (RETURN - 156)) | (1L << (RSET - 156)) | (1L << (SEEK - 156)) | (1L << (SELECT - 156)) | (1L << (SET - 156)) | (1L << (STATIC - 156)) | (1L << (STOP - 156)) | (1L << (SUB - 156)) | (1L << (TYPE - 156)) | (1L << (UNLOCK - 156)) | (1L << (WEND - 156)) | (1L << (WHILE - 156)) | (1L << (WITH - 156)) | (1L << (WRITE - 156)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfLineContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public CommentOrAnnotationContext commentOrAnnotation() {
			return GetRuleContext<CommentOrAnnotationContext>(0);
		}
		public EndOfLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfLineContext endOfLine() {
		EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_endOfLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2453;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2452; whiteSpace();
				}
			}

			State = 2456;
			_la = _input.La(1);
			if (_la==REM || _la==SINGLEQUOTE) {
				{
				State = 2455; commentOrAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfStatementContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfStatementContext endOfStatement() {
		EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_endOfStatement);
		int _la;
		try {
			int _alt;
			State = 2480;
			switch ( Interpreter.AdaptivePredict(_input,422,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2474;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,421,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2470;
						switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
						case 1:
							{
							{
							State = 2458; endOfLine();
							State = 2459; Match(NEWLINE);
							State = 2461;
							switch ( Interpreter.AdaptivePredict(_input,417,_ctx) ) {
							case 1:
								{
								State = 2460; whiteSpace();
								}
								break;
							}
							}
							}
							break;

						case 2:
							{
							{
							State = 2464;
							_la = _input.La(1);
							if (_la==WS || _la==LINE_CONTINUATION) {
								{
								State = 2463; whiteSpace();
								}
							}

							State = 2466; Match(COLON);
							State = 2468;
							switch ( Interpreter.AdaptivePredict(_input,419,_ctx) ) {
							case 1:
								{
								State = 2467; whiteSpace();
								}
								break;
							}
							}
							}
							break;
						}
						}
						} 
					}
					State = 2476;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,421,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2477; endOfLine();
				State = 2478; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentOrAnnotationContext : ParserRuleContext {
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public RemCommentContext remComment() {
			return GetRuleContext<RemCommentContext>(0);
		}
		public CommentOrAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentOrAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentOrAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentOrAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentOrAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentOrAnnotationContext commentOrAnnotation() {
		CommentOrAnnotationContext _localctx = new CommentOrAnnotationContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_commentOrAnnotation);
		try {
			State = 2485;
			switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2482; annotationList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2483; comment();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2484; remComment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemCommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public RemCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRemComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRemComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemCommentContext remComment() {
		RemCommentContext _localctx = new RemCommentContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_remComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2487; Match(REM);
			State = 2489;
			switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				State = 2488; whiteSpace();
				}
				break;
			}
			State = 2491; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2493; Match(SINGLEQUOTE);
			State = 2494; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentBodyContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public CommentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentBodyContext commentBody() {
		CommentBodyContext _localctx = new CommentBodyContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_commentBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2500;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << COMMA) | (1L << COLON) | (1L << SEMICOLON) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_ENUM - 64)) | (1L << (END_FUNCTION - 64)) | (1L << (END_IF - 64)) | (1L << (END_PROPERTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_SUB - 64)) | (1L << (END_TYPE - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OPTION_BASE - 128)) | (1L << (OPTION_EXPLICIT - 128)) | (1L << (OPTION_COMPARE - 128)) | (1L << (OPTION_PRIVATE_MODULE - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (ASSIGN - 192)) | (1L << (DIV - 192)) | (1L << (INTDIV - 192)) | (1L << (EQ - 192)) | (1L << (GEQ - 192)) | (1L << (GT - 192)) | (1L << (LEQ - 192)) | (1L << (LPAREN - 192)) | (1L << (LT - 192)) | (1L << (MINUS - 192)) | (1L << (MULT - 192)) | (1L << (NEQ - 192)) | (1L << (PLUS - 192)) | (1L << (POW - 192)) | (1L << (RPAREN - 192)) | (1L << (HASHCONST - 192)) | (1L << (HASHIF - 192)) | (1L << (HASHELSEIF - 192)) | (1L << (HASHELSE - 192)) | (1L << (HASHENDIF - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (R_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (SINGLEQUOTE - 192)) | (1L << (UNDERSCORE - 192)) | (1L << (WS - 192)) | (1L << (GUIDLITERAL - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (ERRORCHAR - 192)) | (1L << (COLLECTION - 192)) | (1L << (DELETESETTING - 192)) | (1L << (LOAD - 192)) | (1L << (RMDIR - 192)) | (1L << (SENDKEYS - 192)) | (1L << (SETATTR - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 2498;
				switch ( Interpreter.AdaptivePredict(_input,425,_ctx) ) {
				case 1:
					{
					State = 2496; Match(LINE_CONTINUATION);
					}
					break;

				case 2:
					{
					State = 2497;
					_la = _input.La(1);
					if ( _la <= 0 || (_la==NEWLINE) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					break;
				}
				}
				State = 2502;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> AT() { return GetTokens(VBAParser.AT); }
		public IReadOnlyList<AnnotationContext> annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode AT(int i) {
			return GetToken(VBAParser.AT, i);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_annotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2503; Match(SINGLEQUOTE);
			State = 2509;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2504; Match(AT);
				State = 2505; annotation();
				State = 2507;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2506; whiteSpace();
					}
				}

				}
				}
				State = 2511;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==AT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public AnnotationNameContext annotationName() {
			return GetRuleContext<AnnotationNameContext>(0);
		}
		public AnnotationArgListContext annotationArgList() {
			return GetRuleContext<AnnotationArgListContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2513; annotationName();
			State = 2515;
			switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				State = 2514; annotationArgList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationNameContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public AnnotationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationNameContext annotationName() {
		AnnotationNameContext _localctx = new AnnotationNameContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_annotationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2517; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AnnotationArgContext> annotationArg() {
			return GetRuleContexts<AnnotationArgContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationArgContext annotationArg(int i) {
			return GetRuleContext<AnnotationArgContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AnnotationArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgListContext annotationArgList() {
		AnnotationArgListContext _localctx = new AnnotationArgListContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_annotationArgList);
		int _la;
		try {
			int _alt;
			State = 2571;
			switch ( Interpreter.AdaptivePredict(_input,441,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2519; whiteSpace();
				State = 2520; annotationArg();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2522; whiteSpace();
				State = 2523; annotationArg();
				State = 2532;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2525;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2524; whiteSpace();
							}
						}

						State = 2527; Match(COMMA);
						State = 2529;
						switch ( Interpreter.AdaptivePredict(_input,431,_ctx) ) {
						case 1:
							{
							State = 2528; whiteSpace();
							}
							break;
						}
						State = 2531; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2534;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,432,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2537;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2536; whiteSpace();
					}
				}

				State = 2539; Match(LPAREN);
				State = 2541;
				switch ( Interpreter.AdaptivePredict(_input,434,_ctx) ) {
				case 1:
					{
					State = 2540; whiteSpace();
					}
					break;
				}
				State = 2543; annotationArg();
				State = 2545;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2544; whiteSpace();
					}
				}

				State = 2547; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2550;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2549; whiteSpace();
					}
				}

				State = 2552; Match(LPAREN);
				State = 2553; annotationArg();
				State = 2562;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2555;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2554; whiteSpace();
							}
						}

						State = 2557; Match(COMMA);
						State = 2559;
						switch ( Interpreter.AdaptivePredict(_input,438,_ctx) ) {
						case 1:
							{
							State = 2558; whiteSpace();
							}
							break;
						}
						State = 2561; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2564;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,439,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2567;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2566; whiteSpace();
					}
				}

				State = 2569; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AnnotationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgContext annotationArg() {
		AnnotationArgContext _localctx = new AnnotationArgContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_annotationArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2573; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhiteSpaceContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public WhiteSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whiteSpace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhiteSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhiteSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhiteSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhiteSpaceContext whiteSpace() {
		WhiteSpaceContext _localctx = new WhiteSpaceContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_whiteSpace);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2576;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2575;
					_la = _input.La(1);
					if ( !(_la==WS || _la==LINE_CONTINUATION) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2578;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,442,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return upperCaseA_sempred((UpperCaseAContext)_localctx, predIndex);

		case 26: return upperCaseZ_sempred((UpperCaseZContext)_localctx, predIndex);

		case 91: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 14);

		case 3: return Precpred(_ctx, 12);

		case 4: return Precpred(_ctx, 11);

		case 5: return Precpred(_ctx, 10);

		case 6: return Precpred(_ctx, 9);

		case 7: return Precpred(_ctx, 8);

		case 8: return Precpred(_ctx, 7);

		case 9: return Precpred(_ctx, 5);

		case 10: return Precpred(_ctx, 4);

		case 11: return Precpred(_ctx, 3);

		case 12: return Precpred(_ctx, 2);

		case 13: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool upperCaseZ_sempred(UpperCaseZContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return _input.Lt(1).Text.Equals("Z");
		}
		return true;
	}
	private bool upperCaseA_sempred(UpperCaseAContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return _input.Lt(1).Text.Equals("A");
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xF7\xA17\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x3\x2\x3\x2\x3\x3\x5\x3"+
		"\x13A\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x140\n\x3\x3\x3\x5\x3\x143\n"+
		"\x3\x3\x3\x3\x3\x5\x3\x147\n\x3\x3\x3\x3\x3\x5\x3\x14B\n\x3\x3\x3\x3\x3"+
		"\x5\x3\x14F\n\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x157\n\x4\x3"+
		"\x4\x5\x4\x15A\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5"+
		"\x5\x164\n\x5\x5\x5\x166\n\x5\x3\x5\x3\x5\x6\x5\x16A\n\x5\r\x5\xE\x5\x16B"+
		"\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\x172\n\x6\f\x6\xE\x6\x175\v\x6\x3\x6\x3"+
		"\x6\a\x6\x179\n\x6\f\x6\xE\x6\x17C\v\x6\x3\x6\x3\x6\x3\x6\x5\x6\x181\n"+
		"\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x6\a\x188\n\a\r\a\xE\a\x189\x3\b\x3\b\x3"+
		"\b\x3\b\a\b\x190\n\b\f\b\xE\b\x193\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x1A1\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x5\n\x1AC\n\n\x3\v\x3\v\x3\v\x3\v\a\v\x1B2\n\v\f\v\xE"+
		"\v\x1B5\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x1BE\n\f\x3\r\x3\r"+
		"\x3\r\x3\r\x5\r\x1C4\n\r\x3\r\x3\r\x5\r\x1C8\n\r\x3\r\x3\r\x5\r\x1CC\n"+
		"\r\x3\r\x3\r\x5\r\x1D0\n\r\x3\r\a\r\x1D3\n\r\f\r\xE\r\x1D6\v\r\x3\xE\x3"+
		"\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x1E0\n\x10\f\x10\xE"+
		"\x10\x1E3\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x5\x11\x215\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x21B\n\x12\x3\x12"+
		"\x3\x12\x5\x12\x21F\n\x12\x3\x12\a\x12\x222\n\x12\f\x12\xE\x12\x225\v"+
		"\x12\x5\x12\x227\n\x12\x3\x13\x3\x13\x3\x13\x5\x13\x22C\n\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x5\x13\x232\n\x13\x3\x13\x3\x13\x5\x13\x236\n\x13\x3"+
		"\x13\a\x13\x239\n\x13\f\x13\xE\x13\x23C\v\x13\x3\x14\x3\x14\x5\x14\x240"+
		"\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x245\n\x14\x3\x14\x5\x14\x248\n\x14"+
		"\x3\x14\x3\x14\x5\x14\x24C\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x5"+
		"\x15\x253\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x259\n\x15\x3\x15\x3"+
		"\x15\x5\x15\x25D\n\x15\x3\x15\x5\x15\x260\n\x15\x3\x15\x3\x15\x3\x15\x5"+
		"\x15\x265\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x5\x15\x270\n\x15\x3\x15\x5\x15\x273\n\x15\x3\x15\x5\x15\x276"+
		"\n\x15\x3\x15\x3\x15\x3\x15\x5\x15\x27B\n\x15\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x5\x16\x281\n\x16\x3\x16\x3\x16\x5\x16\x285\n\x16\x3\x16\a\x16\x288"+
		"\n\x16\f\x16\xE\x16\x28B\v\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x5\x18"+
		"\x292\n\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x5\x1A\x298\n\x1A\x3\x1A\x3\x1A"+
		"\x5\x1A\x29C\n\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1D\x3\x1D\x5\x1D\x2A8\n\x1D\x3\x1D\x3\x1D\x5\x1D\x2AC\n\x1D\x3"+
		"\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3 \x5 \x2B7\n \x3 \x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x2C2\n \x3 \x3 \x3 \x3 \x3 \x5 \x2C9"+
		"\n \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x2D1\n \x3!\x3!\x3!\x5!\x2D6\n!\x3!\x3"+
		"!\x3!\x3!\x3!\a!\x2DD\n!\f!\xE!\x2E0\v!\x3!\x3!\x3\"\x3\"\x5\"\x2E6\n"+
		"\"\x3\"\x3\"\x5\"\x2EA\n\"\x3\"\x5\"\x2ED\n\"\x3\"\x3\"\x3#\x3#\x3#\x3"+
		"#\x5#\x2F5\n#\x3#\x3#\x5#\x2F9\n#\x3#\a#\x2FC\n#\f#\xE#\x2FF\v#\x3$\x3"+
		"$\x3$\x3$\x3%\x3%\x3%\x5%\x308\n%\x3%\x3%\x3%\x3%\x5%\x30E\n%\x3%\x3%"+
		"\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x31F"+
		"\n\'\x3\'\x3\'\x3\'\x3\'\x5\'\x325\n\'\x3(\x3(\x3(\x3(\x5(\x32B\n(\x3"+
		"(\x3(\x5(\x32F\n(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x33B\n("+
		"\x3(\x3(\x5(\x33F\n(\x3(\x3(\x3(\x3(\x5(\x345\n(\x3)\x3)\x3)\x5)\x34A"+
		"\n)\x3)\x3)\x5)\x34E\n)\x3)\x3)\x5)\x352\n)\x3)\x3)\x5)\x356\n)\x3)\x5"+
		")\x359\n)\x3)\x5)\x35C\n)\x3)\x5)\x35F\n)\x3)\x5)\x362\n)\x3)\x3)\x5)"+
		"\x366\n)\x3)\x3)\x3*\x3*\x3+\x3+\x3+\x3+\x5+\x370\n+\x3+\x3+\x5+\x374"+
		"\n+\x3+\x5+\x377\n+\x3+\x5+\x37A\n+\x3+\x3+\x5+\x37E\n+\x3+\x3+\x3,\x3"+
		",\x3,\x3,\x3-\x3-\x3-\x3-\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x391\n.\x3."+
		"\a.\x394\n.\f.\xE.\x397\v.\x3.\x5.\x39A\n.\x3.\x3.\x3/\x3/\x3/\x3/\x3"+
		"/\x3/\x3/\x5/\x3A5\n/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x3AD\n/\x3/\x5/\x3B0"+
		"\n/\x5/\x3B2\n/\x3\x30\x3\x30\x3\x30\x5\x30\x3B7\n\x30\x3\x31\x3\x31\x5"+
		"\x31\x3BB\n\x31\x3\x32\x3\x32\x5\x32\x3BF\n\x32\x3\x32\x3\x32\x5\x32\x3C3"+
		"\n\x32\x3\x32\x3\x32\x5\x32\x3C7\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5"+
		"\x32\x3CD\n\x32\x3\x33\x3\x33\x5\x33\x3D1\n\x33\x3\x33\x3\x33\x5\x33\x3D5"+
		"\n\x33\x3\x33\x3\x33\x3\x33\x5\x33\x3DA\n\x33\x3\x33\x3\x33\x3\x34\x3"+
		"\x34\x5\x34\x3E0\n\x34\x3\x34\x5\x34\x3E3\n\x34\x3\x35\x3\x35\x5\x35\x3E7"+
		"\n\x35\x3\x35\x3\x35\x5\x35\x3EB\n\x35\x3\x35\x5\x35\x3EE\n\x35\a\x35"+
		"\x3F0\n\x35\f\x35\xE\x35\x3F3\v\x35\x3\x35\x3\x35\x5\x35\x3F7\n\x35\x5"+
		"\x35\x3F9\n\x35\x3\x35\x3\x35\x5\x35\x3FD\n\x35\x3\x35\x3\x35\x5\x35\x401"+
		"\n\x35\x3\x35\x5\x35\x404\n\x35\a\x35\x406\n\x35\f\x35\xE\x35\x409\v\x35"+
		"\x5\x35\x40B\n\x35\x3\x36\x3\x36\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3"+
		"\x38\x3\x39\x3\x39\x3\x39\x3\x39\x5\x39\x419\n\x39\x3\x39\x3\x39\x5\x39"+
		"\x41D\n\x39\x3\x39\x6\x39\x420\n\x39\r\x39\xE\x39\x421\x3:\x3:\x5:\x426"+
		"\n:\x3:\x3:\x5:\x42A\n:\x3:\x3:\x5:\x42E\n:\x3:\x3:\x3;\x3;\x3;\x3;\x5"+
		";\x436\n;\x3;\x3;\x5;\x43A\n;\x3;\x3;\x3<\x3<\x3<\x3<\x5<\x442\n<\x3<"+
		"\x3<\x5<\x446\n<\x3<\x3<\x3<\x3<\x3<\x3<\x5<\x44E\n<\x5<\x450\n<\x3=\x3"+
		"=\x3=\x3=\x5=\x456\n=\x3=\x3=\x5=\x45A\n=\x3=\x3=\x3>\x3>\x5>\x460\n>"+
		"\x3>\x3>\x5>\x464\n>\x3>\x3>\x5>\x468\n>\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3"+
		"?\x3?\x3?\x3?\x3?\x5?\x476\n?\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x5@\x480"+
		"\n@\x3@\x3@\x5@\x484\n@\x3@\a@\x487\n@\f@\xE@\x48A\v@\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x494\n\x41\x3\x41\x3\x41"+
		"\x5\x41\x498\n\x41\x3\x41\a\x41\x49B\n\x41\f\x41\xE\x41\x49E\v\x41\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x5\x42\x4AC\n\x42\x3\x42\x3\x42\x3\x42\x5\x42\x4B1\n\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x4BA\n\x42\x3\x42"+
		"\x3\x42\x5\x42\x4BE\n\x42\x3\x42\x3\x42\x5\x42\x4C2\n\x42\x3\x43\x3\x43"+
		"\x5\x43\x4C6\n\x43\x3\x43\x3\x43\x5\x43\x4CA\n\x43\x3\x43\x5\x43\x4CD"+
		"\n\x43\a\x43\x4CF\n\x43\f\x43\xE\x43\x4D2\v\x43\x3\x43\x5\x43\x4D5\n\x43"+
		"\x3\x43\x5\x43\x4D8\n\x43\x3\x43\x3\x43\x5\x43\x4DC\n\x43\x3\x43\x5\x43"+
		"\x4DF\n\x43\x6\x43\x4E1\n\x43\r\x43\xE\x43\x4E2\x5\x43\x4E5\n\x43\x3\x44"+
		"\x3\x44\x3\x44\x5\x44\x4EA\n\x44\x3\x44\x3\x44\x5\x44\x4EE\n\x44\x3\x44"+
		"\x3\x44\x5\x44\x4F2\n\x44\x3\x44\x3\x44\x5\x44\x4F6\n\x44\x5\x44\x4F8"+
		"\n\x44\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x4FE\n\x45\x3\x45\x3\x45\x5"+
		"\x45\x502\n\x45\x3\x45\x5\x45\x505\n\x45\x3\x46\x3\x46\x3\x46\x5\x46\x50A"+
		"\n\x46\x3\x46\x3\x46\x5\x46\x50E\n\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5"+
		"\x46\x514\n\x46\x3\x46\x5\x46\x517\n\x46\x3\x46\x5\x46\x51A\n\x46\x3\x46"+
		"\x3\x46\x3\x46\x5\x46\x51F\n\x46\x3\x46\x3\x46\x5\x46\x523\n\x46\x3\x46"+
		"\x3\x46\x3G\x3G\x3G\x5G\x52A\nG\x3G\x3G\x5G\x52E\nG\x3G\x3G\x3G\x3G\x5"+
		"G\x534\nG\x3G\x5G\x537\nG\x3G\x3G\x5G\x53B\nG\x3G\x3G\x3H\x3H\x3H\x5H"+
		"\x542\nH\x3H\x3H\x5H\x546\nH\x3H\x3H\x3H\x3H\x5H\x54C\nH\x3H\x5H\x54F"+
		"\nH\x3H\x3H\x5H\x553\nH\x3H\x3H\x3I\x3I\x3I\x3I\x5I\x55B\nI\x3I\x3I\x5"+
		"I\x55F\nI\x3I\x5I\x562\nI\x3I\x5I\x565\nI\x3I\x3I\x5I\x569\nI\x3I\x3I"+
		"\x3J\x3J\x3J\x3J\x5J\x571\nJ\x3J\x3J\x5J\x575\nJ\x3J\x3J\x5J\x579\nJ\x5"+
		"J\x57B\nJ\x3J\x5J\x57E\nJ\x3K\x3K\x3K\x3K\x5K\x584\nK\x3K\x3K\x5K\x588"+
		"\nK\x3K\x3K\x5K\x58C\nK\x3K\aK\x58F\nK\fK\xEK\x592\vK\x3L\x3L\x5L\x596"+
		"\nL\x3L\x3L\x5L\x59A\nL\x3L\x3L\x5L\x59E\nL\x3L\x3L\x3L\x3L\x5L\x5A4\n"+
		"L\x3M\x3M\x3N\x3N\x3N\x3N\x5N\x5AC\nN\x5N\x5AE\nN\x3O\x3O\x3P\x3P\x3P"+
		"\x3P\x5P\x5B6\nP\x3P\x3P\x5P\x5BA\nP\x3P\x3P\x3Q\x3Q\x3R\x3R\x3R\x3R\x5"+
		"R\x5C4\nR\x3R\x3R\x5R\x5C8\nR\x3R\x3R\x3S\x3S\x3S\x3S\x3S\x3S\x3S\aS\x5D3"+
		"\nS\fS\xES\x5D6\vS\x3S\x3S\x3T\x3T\x5T\x5DC\nT\x3T\x3T\x5T\x5E0\nT\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x5EB\nT\x3U\x3U\x3U\x3U\x3U\x5U"+
		"\x5F2\nU\x3V\x3V\x3V\x5V\x5F7\nV\x3V\x3V\x5V\x5FB\nV\x3V\aV\x5FE\nV\f"+
		"V\xEV\x601\vV\x5V\x603\nV\x3W\x3W\x3W\x3W\x5W\x609\nW\x3W\x3W\x5W\x60D"+
		"\nW\x3W\x3W\x3X\x3X\x3X\x5X\x614\nX\x3X\x3X\x5X\x618\nX\x3X\x3X\x5X\x61C"+
		"\nX\x3X\x3X\x5X\x620\nX\x3X\x5X\x623\nX\x3X\x3X\x5X\x627\nX\x3X\x3X\x3"+
		"Y\x3Y\x3Z\x3Z\x3Z\x5Z\x630\nZ\x3Z\x3Z\x3Z\x3Z\x3Z\aZ\x637\nZ\fZ\xEZ\x63A"+
		"\vZ\x3Z\x3Z\x3[\x3[\x5[\x640\n[\x3[\x3[\x5[\x644\n[\x3[\x5[\x647\n[\x3"+
		"[\x5[\x64A\n[\x3[\x5[\x64D\n[\x3[\x3[\x3[\x5[\x652\n[\x3[\x3[\x3\\\x3"+
		"\\\x3\\\x3\\\x5\\\x65A\n\\\x3\\\x3\\\x5\\\x65E\n\\\x3\\\x3\\\x3\\\x3\\"+
		"\x3\\\x3\\\x5\\\x666\n\\\x5\\\x668\n\\\x3]\x3]\x3]\x5]\x66D\n]\x3]\x3"+
		"]\x3]\x5]\x672\n]\x3]\x3]\x3]\x5]\x677\n]\x3]\x3]\x5]\x67B\n]\x3]\x3]"+
		"\x3]\x3]\x5]\x681\n]\x3]\x3]\x3]\x5]\x686\n]\x3]\x3]\x3]\x3]\x3]\x5]\x68D"+
		"\n]\x3]\x3]\x5]\x691\n]\x3]\x3]\x3]\x3]\x5]\x697\n]\x3]\x3]\x5]\x69B\n"+
		"]\x3]\x3]\x5]\x69F\n]\x3]\x3]\x3]\x5]\x6A4\n]\x3]\x3]\x5]\x6A8\n]\x3]"+
		"\x3]\x3]\x5]\x6AD\n]\x3]\x3]\x5]\x6B1\n]\x3]\x3]\x3]\x5]\x6B6\n]\x3]\x3"+
		"]\x5]\x6BA\n]\x3]\x3]\x3]\x5]\x6BF\n]\x3]\x3]\x5]\x6C3\n]\x3]\x3]\x3]"+
		"\x5]\x6C8\n]\x3]\x3]\x5]\x6CC\n]\x3]\x3]\x3]\x5]\x6D1\n]\x3]\x3]\x5]\x6D5"+
		"\n]\x3]\x3]\x3]\x5]\x6DA\n]\x3]\x3]\x5]\x6DE\n]\x3]\x3]\x3]\x5]\x6E3\n"+
		"]\x3]\x3]\x5]\x6E7\n]\x3]\x3]\x3]\x5]\x6EC\n]\x3]\x3]\x5]\x6F0\n]\x3]"+
		"\x3]\x3]\x5]\x6F5\n]\x3]\x3]\x5]\x6F9\n]\x3]\x3]\x3]\x5]\x6FE\n]\x3]\x3"+
		"]\x5]\x702\n]\x3]\a]\x705\n]\f]\xE]\x708\v]\x3^\x3^\x3^\x3^\x3^\x3^\x3"+
		"^\x3^\x5^\x712\n^\x3_\x3_\x3_\x5_\x717\n_\x3_\x3_\x3_\x5_\x71C\n_\x3_"+
		"\x3_\x3`\x3`\x5`\x722\n`\x3`\x3`\x5`\x726\n`\x3`\a`\x729\n`\f`\xE`\x72C"+
		"\v`\x3\x61\x3\x61\x5\x61\x730\n\x61\x3\x61\x3\x61\x5\x61\x734\n\x61\x3"+
		"\x61\x3\x61\x5\x61\x738\n\x61\x5\x61\x73A\n\x61\x3\x61\x3\x61\x5\x61\x73E"+
		"\n\x61\x5\x61\x740\n\x61\x3\x61\x5\x61\x743\n\x61\x3\x61\x3\x61\x3\x61"+
		"\x5\x61\x748\n\x61\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x5\x62\x74F\n\x62"+
		"\x3\x62\x3\x62\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x757\n\x63\x3\x63\x3"+
		"\x63\x5\x63\x75B\n\x63\x3\x63\x3\x63\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64"+
		"\x5\x64\x764\n\x64\x3\x64\x3\x64\x3\x65\x3\x65\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x5\x66\x76E\n\x66\x3\x66\x3\x66\x5\x66\x772\n\x66\x3\x66\x5\x66\x775"+
		"\n\x66\x3g\x5g\x778\ng\x3g\x3g\x3h\x3h\x3h\x3h\x3i\x5i\x781\ni\x3i\x3"+
		"i\x3i\x5i\x786\ni\x3i\x5i\x789\ni\x3i\x3i\x5i\x78D\ni\x3i\x3i\x5i\x791"+
		"\ni\x3i\x3i\x5i\x795\ni\x3i\x5i\x798\ni\x3i\x3i\x3i\x3i\ai\x79E\ni\fi"+
		"\xEi\x7A1\vi\x3i\x3i\x5i\x7A5\ni\x3i\x5i\x7A8\ni\x3i\x3i\x5i\x7AC\ni\x3"+
		"i\x3i\x5i\x7B0\ni\x3i\x3i\x5i\x7B4\ni\x3i\x5i\x7B7\ni\x3i\x3i\x3i\x3i"+
		"\ai\x7BD\ni\fi\xEi\x7C0\vi\x5i\x7C2\ni\x3j\x3j\x5j\x7C6\nj\x3k\x5k\x7C9"+
		"\nk\x3k\x5k\x7CC\nk\x3k\x3k\x5k\x7D0\nk\x3k\x3k\x5k\x7D4\nk\x3k\x3k\x3"+
		"k\x5k\x7D9\nk\x3k\x5k\x7DC\nk\x3k\x5k\x7DF\nk\x3k\x5k\x7E2\nk\x3k\x3k"+
		"\x3k\x3k\ak\x7E8\nk\fk\xEk\x7EB\vk\x3l\x3l\x3l\x3l\x5l\x7F1\nl\x3l\x5"+
		"l\x7F4\nl\x3l\x3l\x3l\x3l\al\x7FA\nl\fl\xEl\x7FD\vl\x3m\x3m\x3m\x3m\x5"+
		"m\x803\nm\x3n\x3n\x5n\x807\nn\x3n\x5n\x80A\nn\x3n\x5n\x80D\nn\x3n\x5n"+
		"\x810\nn\x3n\x3n\x3n\x3n\an\x816\nn\fn\xEn\x819\vn\x3o\x3o\x5o\x81D\n"+
		"o\x3o\x5o\x820\no\x3o\x5o\x823\no\x3o\x3o\x5o\x827\no\x3o\x3o\x5o\x82B"+
		"\no\x5o\x82D\no\x3o\x3o\x5o\x831\no\x3o\x5o\x834\no\x3o\x5o\x837\no\x3"+
		"o\x3o\x3o\x3o\ao\x83D\no\fo\xEo\x840\vo\x3p\x3p\x5p\x844\np\x3p\x5p\x847"+
		"\np\x3p\x5p\x84A\np\x3p\x5p\x84D\np\x3p\x3p\x3p\x3p\ap\x853\np\fp\xEp"+
		"\x856\vp\x3q\x3q\x5q\x85A\nq\x3q\x5q\x85D\nq\x3q\x5q\x860\nq\x3q\x3q\x5"+
		"q\x864\nq\x3q\x3q\x5q\x868\nq\x5q\x86A\nq\x3q\x3q\x5q\x86E\nq\x3q\x5q"+
		"\x871\nq\x3q\x5q\x874\nq\x3q\x3q\x3q\x3q\aq\x87A\nq\fq\xEq\x87D\vq\x3"+
		"r\x3r\x5r\x881\nr\x3r\x3r\x5r\x885\nr\x6r\x887\nr\rr\xEr\x888\x3r\x5r"+
		"\x88C\nr\x3r\x5r\x88F\nr\x3r\x5r\x892\nr\x3r\x3r\x3r\x3r\ar\x898\nr\f"+
		"r\xEr\x89B\vr\x3s\x3s\x5s\x89F\ns\x3s\x3s\x5s\x8A3\ns\x3t\x5t\x8A6\nt"+
		"\x3t\x3t\x3u\x5u\x8AB\nu\x3u\x5u\x8AE\nu\x3u\x3u\x5u\x8B2\nu\au\x8B4\n"+
		"u\fu\xEu\x8B7\vu\x3u\x3u\x5u\x8BB\nu\x3u\x3u\x5u\x8BF\nu\x3u\x5u\x8C2"+
		"\nu\au\x8C4\nu\fu\xEu\x8C7\vu\x3v\x5v\x8CA\nv\x3v\x3v\x5v\x8CE\nv\x3v"+
		"\x5v\x8D1\nv\x3v\x3v\x3w\x3w\x5w\x8D7\nw\x3w\x3w\x5w\x8DB\nw\x3x\x3x\x5"+
		"x\x8DF\nx\x3x\x3x\x5x\x8E3\nx\x3x\x3x\x5x\x8E7\nx\x3x\ax\x8EA\nx\fx\xE"+
		"x\x8ED\vx\x5x\x8EF\nx\x3x\x5x\x8F2\nx\x3x\x3x\x3y\x3y\x5y\x8F8\ny\x3y"+
		"\x3y\x5y\x8FC\ny\x3y\x3y\x5y\x900\ny\x3y\x3y\x5y\x904\ny\x3y\x5y\x907"+
		"\ny\x3y\x3y\x5y\x90B\ny\x3y\x5y\x90E\ny\x3y\x5y\x911\ny\x3y\x5y\x914\n"+
		"y\x3y\x5y\x917\ny\x3y\x5y\x91A\ny\x3z\x3z\x5z\x91E\nz\x3z\x3z\x3{\x3{"+
		"\x5{\x924\n{\x3{\x3{\x5{\x928\n{\x3{\a{\x92B\n{\f{\xE{\x92E\v{\x3|\x3"+
		"|\x3|\x3|\x3|\x5|\x935\n|\x3|\x3|\x3}\x3}\x3}\x5}\x93C\n}\x3~\x3~\x5~"+
		"\x940\n~\x3\x7F\x3\x7F\x5\x7F\x944\n\x7F\x3\x7F\x3\x7F\x5\x7F\x948\n\x7F"+
		"\x3\x7F\x3\x7F\x5\x7F\x94C\n\x7F\x3\x7F\x5\x7F\x94F\n\x7F\x3\x80\x3\x80"+
		"\x3\x81\x3\x81\x3\x82\x3\x82\x3\x82\a\x82\x958\n\x82\f\x82\xE\x82\x95B"+
		"\v\x82\x3\x83\x3\x83\x5\x83\x95F\n\x83\x3\x83\x3\x83\x5\x83\x963\n\x83"+
		"\x3\x84\x3\x84\x5\x84\x967\n\x84\x3\x84\x3\x84\x3\x85\x3\x85\x5\x85\x96D"+
		"\n\x85\x3\x86\x3\x86\x3\x87\x3\x87\x3\x88\x3\x88\x3\x88\x3\x88\x3\x88"+
		"\x3\x88\x3\x88\x3\x88\x5\x88\x97B\n\x88\x3\x89\x3\x89\x3\x8A\x3\x8A\x5"+
		"\x8A\x981\n\x8A\x3\x8A\x5\x8A\x984\n\x8A\x3\x8A\x3\x8A\x5\x8A\x988\n\x8A"+
		"\x3\x8A\x5\x8A\x98B\n\x8A\x3\x8B\x3\x8B\x3\x8C\x3\x8C\x3\x8D\x3\x8D\x3"+
		"\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x90\x5\x90\x998\n\x90\x3\x90\x5\x90\x99B"+
		"\n\x90\x3\x91\x3\x91\x3\x91\x5\x91\x9A0\n\x91\x3\x91\x5\x91\x9A3\n\x91"+
		"\x3\x91\x3\x91\x5\x91\x9A7\n\x91\x5\x91\x9A9\n\x91\a\x91\x9AB\n\x91\f"+
		"\x91\xE\x91\x9AE\v\x91\x3\x91\x3\x91\x3\x91\x5\x91\x9B3\n\x91\x3\x92\x3"+
		"\x92\x3\x92\x5\x92\x9B8\n\x92\x3\x93\x3\x93\x5\x93\x9BC\n\x93\x3\x93\x3"+
		"\x93\x3\x94\x3\x94\x3\x94\x3\x95\x3\x95\a\x95\x9C5\n\x95\f\x95\xE\x95"+
		"\x9C8\v\x95\x3\x96\x3\x96\x3\x96\x3\x96\x5\x96\x9CE\n\x96\x6\x96\x9D0"+
		"\n\x96\r\x96\xE\x96\x9D1\x3\x97\x3\x97\x5\x97\x9D6\n\x97\x3\x98\x3\x98"+
		"\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x5\x99\x9E0\n\x99\x3\x99\x3"+
		"\x99\x5\x99\x9E4\n\x99\x3\x99\x6\x99\x9E7\n\x99\r\x99\xE\x99\x9E8\x3\x99"+
		"\x5\x99\x9EC\n\x99\x3\x99\x3\x99\x5\x99\x9F0\n\x99\x3\x99\x3\x99\x5\x99"+
		"\x9F4\n\x99\x3\x99\x3\x99\x3\x99\x5\x99\x9F9\n\x99\x3\x99\x3\x99\x3\x99"+
		"\x5\x99\x9FE\n\x99\x3\x99\x3\x99\x5\x99\xA02\n\x99\x3\x99\x6\x99\xA05"+
		"\n\x99\r\x99\xE\x99\xA06\x3\x99\x5\x99\xA0A\n\x99\x3\x99\x3\x99\x5\x99"+
		"\xA0E\n\x99\x3\x9A\x3\x9A\x3\x9B\x6\x9B\xA13\n\x9B\r\x9B\xE\x9B\xA14\x3"+
		"\x9B\x2\x2\x3\xB8\x9C\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12"+
		"\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2"+
		",\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44"+
		"\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2"+
		"\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2"+
		"\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2"+
		"\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2"+
		"\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2"+
		"\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2"+
		"\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2"+
		"\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2"+
		"\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2"+
		"\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C"+
		"\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E"+
		"\x2\x130\x2\x132\x2\x134\x2\x2\x1A\x5\x2;;\x45\x45\xBC\xBC\x3\x2HT\x4"+
		"\x2\xC3\xC3\xC7\xC7\x3\x2jn\x3\x2\x92\x93\a\x2\x38\x38;;{{\x9B\x9B\xA6"+
		"\xA6\x4\x2\xA8\xA9\xCB\xCB\x4\x2\x85\x87\xB3\xB3\x4\x2))++\x4\x2\xB5\xB5"+
		"\xBB\xBB\x4\x2\xCE\xCE\xD7\xD7\x4\x2\xD6\xD6\xD9\xD9\a\x2||\x83\x83\xD0"+
		"\xD3\xD5\xD5\xD8\xD8\x3\x2,-\x4\x2=>\x9C\x9C\x3\x2=>\r\x2\x13\x13\x1F"+
		" <<??\x46\x46WW}}\x7F\x7F\xB4\xB4\xB9\xB9\xC4\xC4\x3\x2\xE4\xE7\x5\x2"+
		",,.\x32\xDA\xDA\x6\x2pptt\x9F\x9F\xA4\xA4%\x2\x3\x17\x19#%(\x33\x38:?"+
		"\x42\x42\x45\x46WW``\x63\x63\x66\x66hhjoxxzz|}\x7F\x7F\x82\x87\x89\x8B"+
		"\x8D\x90\x92\x92\x95\x95\x9A\x9D\xA6\xA6\xA8\xA9\xAB\xAC\xB3\xB5\xB7\xB7"+
		"\xB9\xB9\xBB\xBF\xC1\xC1\xC3\xC5\xC8\xC8\xCA\xCC\xF1\xF7!\x2\x18\x18$"+
		"$@\x41\x43\x44GVYZ\x64\x65ggiipwyy{{~~\x80\x81\x88\x88\x8C\x8C\x91\x91"+
		"\x94\x94\x9E\x9F\xA4\xA5\xA7\xA7\xAA\xAA\xAD\xB2\xB6\xB6\xB8\xB8\xBA\xBA"+
		"\xC0\xC0\xC2\xC2\xC6\xC7\xC9\xC9\xCB\xCB\x3\x2\xE9\xE9\x4\x2\xEC\xEC\xEF"+
		"\xEF\xB92\x2\x136\x3\x2\x2\x2\x4\x139\x3\x2\x2\x2\x6\x152\x3\x2\x2\x2"+
		"\b\x15D\x3\x2\x2\x2\n\x16F\x3\x2\x2\x2\f\x187\x3\x2\x2\x2\xE\x18B\x3\x2"+
		"\x2\x2\x10\x1A0\x3\x2\x2\x2\x12\x1AB\x3\x2\x2\x2\x14\x1AD\x3\x2\x2\x2"+
		"\x16\x1BD\x3\x2\x2\x2\x18\x1BF\x3\x2\x2\x2\x1A\x1D7\x3\x2\x2\x2\x1C\x1D9"+
		"\x3\x2\x2\x2\x1E\x1DB\x3\x2\x2\x2 \x214\x3\x2\x2\x2\"\x216\x3\x2\x2\x2"+
		"$\x22B\x3\x2\x2\x2&\x23D\x3\x2\x2\x2(\x252\x3\x2\x2\x2*\x27C\x3\x2\x2"+
		"\x2,\x28C\x3\x2\x2\x2.\x291\x3\x2\x2\x2\x30\x293\x3\x2\x2\x2\x32\x295"+
		"\x3\x2\x2\x2\x34\x29F\x3\x2\x2\x2\x36\x2A2\x3\x2\x2\x2\x38\x2A5\x3\x2"+
		"\x2\x2:\x2AF\x3\x2\x2\x2<\x2B1\x3\x2\x2\x2>\x2D0\x3\x2\x2\x2@\x2D5\x3"+
		"\x2\x2\x2\x42\x2E3\x3\x2\x2\x2\x44\x2F0\x3\x2\x2\x2\x46\x300\x3\x2\x2"+
		"\x2H\x307\x3\x2\x2\x2J\x311\x3\x2\x2\x2L\x313\x3\x2\x2\x2N\x326\x3\x2"+
		"\x2\x2P\x349\x3\x2\x2\x2R\x369\x3\x2\x2\x2T\x36B\x3\x2\x2\x2V\x381\x3"+
		"\x2\x2\x2X\x385\x3\x2\x2\x2Z\x389\x3\x2\x2\x2\\\x3B1\x3\x2\x2\x2^\x3B3"+
		"\x3\x2\x2\x2`\x3BA\x3\x2\x2\x2\x62\x3BC\x3\x2\x2\x2\x64\x3CE\x3\x2\x2"+
		"\x2\x66\x3DD\x3\x2\x2\x2h\x40A\x3\x2\x2\x2j\x40C\x3\x2\x2\x2l\x40E\x3"+
		"\x2\x2\x2n\x410\x3\x2\x2\x2p\x414\x3\x2\x2\x2r\x425\x3\x2\x2\x2t\x431"+
		"\x3\x2\x2\x2v\x43D\x3\x2\x2\x2x\x451\x3\x2\x2\x2z\x45D\x3\x2\x2\x2|\x46B"+
		"\x3\x2\x2\x2~\x477\x3\x2\x2\x2\x80\x48B\x3\x2\x2\x2\x82\x49F\x3\x2\x2"+
		"\x2\x84\x4E4\x3\x2\x2\x2\x86\x4F7\x3\x2\x2\x2\x88\x4F9\x3\x2\x2\x2\x8A"+
		"\x509\x3\x2\x2\x2\x8C\x529\x3\x2\x2\x2\x8E\x541\x3\x2\x2\x2\x90\x556\x3"+
		"\x2\x2\x2\x92\x56C\x3\x2\x2\x2\x94\x57F\x3\x2\x2\x2\x96\x593\x3\x2\x2"+
		"\x2\x98\x5A5\x3\x2\x2\x2\x9A\x5A7\x3\x2\x2\x2\x9C\x5AF\x3\x2\x2\x2\x9E"+
		"\x5B1\x3\x2\x2\x2\xA0\x5BD\x3\x2\x2\x2\xA2\x5BF\x3\x2\x2\x2\xA4\x5CB\x3"+
		"\x2\x2\x2\xA6\x5EA\x3\x2\x2\x2\xA8\x5EC\x3\x2\x2\x2\xAA\x602\x3\x2\x2"+
		"\x2\xAC\x604\x3\x2\x2\x2\xAE\x613\x3\x2\x2\x2\xB0\x62A\x3\x2\x2\x2\xB2"+
		"\x62F\x3\x2\x2\x2\xB4\x63D\x3\x2\x2\x2\xB6\x655\x3\x2\x2\x2\xB8\x696\x3"+
		"\x2\x2\x2\xBA\x709\x3\x2\x2\x2\xBC\x716\x3\x2\x2\x2\xBE\x71F\x3\x2\x2"+
		"\x2\xC0\x72D\x3\x2\x2\x2\xC2\x749\x3\x2\x2\x2\xC4\x752\x3\x2\x2\x2\xC6"+
		"\x75E\x3\x2\x2\x2\xC8\x767\x3\x2\x2\x2\xCA\x769\x3\x2\x2\x2\xCC\x777\x3"+
		"\x2\x2\x2\xCE\x77B\x3\x2\x2\x2\xD0\x7C1\x3\x2\x2\x2\xD2\x7C5\x3\x2\x2"+
		"\x2\xD4\x7C8\x3\x2\x2\x2\xD6\x7EC\x3\x2\x2\x2\xD8\x802\x3\x2\x2\x2\xDA"+
		"\x804\x3\x2\x2\x2\xDC\x81C\x3\x2\x2\x2\xDE\x841\x3\x2\x2\x2\xE0\x859\x3"+
		"\x2\x2\x2\xE2\x880\x3\x2\x2\x2\xE4\x89C\x3\x2\x2\x2\xE6\x8A5\x3\x2\x2"+
		"\x2\xE8\x8B5\x3\x2\x2\x2\xEA\x8C9\x3\x2\x2\x2\xEC\x8D4\x3\x2\x2\x2\xEE"+
		"\x8DC\x3\x2\x2\x2\xF0\x8F7\x3\x2\x2\x2\xF2\x91B\x3\x2\x2\x2\xF4\x921\x3"+
		"\x2\x2\x2\xF6\x934\x3\x2\x2\x2\xF8\x93B\x3\x2\x2\x2\xFA\x93F\x3\x2\x2"+
		"\x2\xFC\x941\x3\x2\x2\x2\xFE\x950\x3\x2\x2\x2\x100\x952\x3\x2\x2\x2\x102"+
		"\x954\x3\x2\x2\x2\x104\x95C\x3\x2\x2\x2\x106\x964\x3\x2\x2\x2\x108\x96C"+
		"\x3\x2\x2\x2\x10A\x96E\x3\x2\x2\x2\x10C\x970\x3\x2\x2\x2\x10E\x97A\x3"+
		"\x2\x2\x2\x110\x97C\x3\x2\x2\x2\x112\x980\x3\x2\x2\x2\x114\x98C\x3\x2"+
		"\x2\x2\x116\x98E\x3\x2\x2\x2\x118\x990\x3\x2\x2\x2\x11A\x992\x3\x2\x2"+
		"\x2\x11C\x994\x3\x2\x2\x2\x11E\x997\x3\x2\x2\x2\x120\x9B2\x3\x2\x2\x2"+
		"\x122\x9B7\x3\x2\x2\x2\x124\x9B9\x3\x2\x2\x2\x126\x9BF\x3\x2\x2\x2\x128"+
		"\x9C6\x3\x2\x2\x2\x12A\x9C9\x3\x2\x2\x2\x12C\x9D3\x3\x2\x2\x2\x12E\x9D7"+
		"\x3\x2\x2\x2\x130\xA0D\x3\x2\x2\x2\x132\xA0F\x3\x2\x2\x2\x134\xA12\x3"+
		"\x2\x2\x2\x136\x137\x5\x4\x3\x2\x137\x3\x3\x2\x2\x2\x138\x13A\x5\x134"+
		"\x9B\x2\x139\x138\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x13B\x3\x2\x2"+
		"\x2\x13B\x13F\x5\x120\x91\x2\x13C\x13D\x5\x6\x4\x2\x13D\x13E\x5\x120\x91"+
		"\x2\x13E\x140\x3\x2\x2\x2\x13F\x13C\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2"+
		"\x140\x142\x3\x2\x2\x2\x141\x143\x5\b\x5\x2\x142\x141\x3\x2\x2\x2\x142"+
		"\x143\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x146\x5\x120\x91\x2\x145"+
		"\x147\x5\f\a\x2\x146\x145\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x148"+
		"\x3\x2\x2\x2\x148\x14A\x5\x120\x91\x2\x149\x14B\x5\xE\b\x2\x14A\x149\x3"+
		"\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x14E\x5\x120"+
		"\x91\x2\x14D\x14F\x5\x14\v\x2\x14E\x14D\x3\x2\x2\x2\x14E\x14F\x3\x2\x2"+
		"\x2\x14F\x150\x3\x2\x2\x2\x150\x151\x5\x120\x91\x2\x151\x5\x3\x2\x2\x2"+
		"\x152\x153\a\xC5\x2\x2\x153\x154\x5\x134\x9B\x2\x154\x156\x5\x110\x89"+
		"\x2\x155\x157\x5\x134\x9B\x2\x156\x155\x3\x2\x2\x2\x156\x157\x3\x2\x2"+
		"\x2\x157\x159\x3\x2\x2\x2\x158\x15A\a\x42\x2\x2\x159\x158\x3\x2\x2\x2"+
		"\x159\x15A\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B\x15C\x5\x120\x91\x2"+
		"\x15C\a\x3\x2\x2\x2\x15D\x165\a:\x2\x2\x15E\x15F\x5\x134\x9B\x2\x15F\x160"+
		"\a\xED\x2\x2\x160\x161\x5\x134\x9B\x2\x161\x163\x5\xF8}\x2\x162\x164\x5"+
		"\x134\x9B\x2\x163\x162\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164\x166\x3"+
		"\x2\x2\x2\x165\x15E\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2\x166\x167\x3\x2"+
		"\x2\x2\x167\x169\x5\x120\x91\x2\x168\x16A\x5\n\x6\x2\x169\x168\x3\x2\x2"+
		"\x2\x16A\x16B\x3\x2\x2\x2\x16B\x169\x3\x2\x2\x2\x16B\x16C\x3\x2\x2\x2"+
		"\x16C\x16D\x3\x2\x2\x2\x16D\x16E\a\x64\x2\x2\x16E\t\x3\x2\x2\x2\x16F\x173"+
		"\x5\xF8}\x2\x170\x172\x5\x134\x9B\x2\x171\x170\x3\x2\x2\x2\x172\x175\x3"+
		"\x2\x2\x2\x173\x171\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174\x176\x3\x2"+
		"\x2\x2\x175\x173\x3\x2\x2\x2\x176\x17A\a\xD0\x2\x2\x177\x179\x5\x134\x9B"+
		"\x2\x178\x177\x3\x2\x2\x2\x179\x17C\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2"+
		"\x17A\x17B\x3\x2\x2\x2\x17B\x17D\x3\x2\x2\x2\x17C\x17A\x3\x2\x2\x2\x17D"+
		"\x180\x5\xB8]\x2\x17E\x17F\a*\x2\x2\x17F\x181\x5\x110\x89\x2\x180\x17E"+
		"\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182\x183\x5"+
		"\x120\x91\x2\x183\v\x3\x2\x2\x2\x184\x185\x5\x18\r\x2\x185\x186\x5\x120"+
		"\x91\x2\x186\x188\x3\x2\x2\x2\x187\x184\x3\x2\x2\x2\x188\x189\x3\x2\x2"+
		"\x2\x189\x187\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\r\x3\x2\x2\x2\x18B"+
		"\x191\x5\x12\n\x2\x18C\x18D\x5\x120\x91\x2\x18D\x18E\x5\x12\n\x2\x18E"+
		"\x190\x3\x2\x2\x2\x18F\x18C\x3\x2\x2\x2\x190\x193\x3\x2\x2\x2\x191\x18F"+
		"\x3\x2\x2\x2\x191\x192\x3\x2\x2\x2\x192\x194\x3\x2\x2\x2\x193\x191\x3"+
		"\x2\x2\x2\x194\x195\x5\x120\x91\x2\x195\xF\x3\x2\x2\x2\x196\x197\a\x96"+
		"\x2\x2\x197\x198\x5\x134\x9B\x2\x198\x199\x5\x110\x89\x2\x199\x1A1\x3"+
		"\x2\x2\x2\x19A\x19B\a\x98\x2\x2\x19B\x19C\x5\x134\x9B\x2\x19C\x19D\t\x2"+
		"\x2\x2\x19D\x1A1\x3\x2\x2\x2\x19E\x1A1\a\x97\x2\x2\x19F\x1A1\a\x99\x2"+
		"\x2\x1A0\x196\x3\x2\x2\x2\x1A0\x19A\x3\x2\x2\x2\x1A0\x19E\x3\x2\x2\x2"+
		"\x1A0\x19F\x3\x2\x2\x2\x1A1\x11\x3\x2\x2\x2\x1A2\x1AC\x5(\x15\x2\x1A3"+
		"\x1AC\x5*\x16\x2\x1A4\x1AC\x5@!\x2\x1A5\x1AC\x5H%\x2\x1A6\x1AC\x5$\x13"+
		"\x2\x1A7\x1AC\x5n\x38\x2\x1A8\x1AC\x5\xBC_\x2\x1A9\x1AC\x5\x10\t\x2\x1AA"+
		"\x1AC\x5\xB2Z\x2\x1AB\x1A2\x3\x2\x2\x2\x1AB\x1A3\x3\x2\x2\x2\x1AB\x1A4"+
		"\x3\x2\x2\x2\x1AB\x1A5\x3\x2\x2\x2\x1AB\x1A6\x3\x2\x2\x2\x1AB\x1A7\x3"+
		"\x2\x2\x2\x1AB\x1A8\x3\x2\x2\x2\x1AB\x1A9\x3\x2\x2\x2\x1AB\x1AA\x3\x2"+
		"\x2\x2\x1AC\x13\x3\x2\x2\x2\x1AD\x1B3\x5\x16\f\x2\x1AE\x1AF\x5\x120\x91"+
		"\x2\x1AF\x1B0\x5\x16\f\x2\x1B0\x1B2\x3\x2\x2\x2\x1B1\x1AE\x3\x2\x2\x2"+
		"\x1B2\x1B5\x3\x2\x2\x2\x1B3\x1B1\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4"+
		"\x1B6\x3\x2\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B6\x1B7\x5\x120\x91\x2\x1B7"+
		"\x15\x3\x2\x2\x2\x1B8\x1BE\x5P)\x2\x1B9\x1BE\x5\x8A\x46\x2\x1BA\x1BE\x5"+
		"\x8CG\x2\x1BB\x1BE\x5\x8EH\x2\x1BC\x1BE\x5\xAEX\x2\x1BD\x1B8\x3\x2\x2"+
		"\x2\x1BD\x1B9\x3\x2\x2\x2\x1BD\x1BA\x3\x2\x2\x2\x1BD\x1BB\x3\x2\x2\x2"+
		"\x1BD\x1BC\x3\x2\x2\x2\x1BE\x17\x3\x2\x2\x2\x1BF\x1C0\a\x37\x2\x2\x1C0"+
		"\x1C1\x5\x134\x9B\x2\x1C1\x1C3\x5\x1A\xE\x2\x1C2\x1C4\x5\x134\x9B\x2\x1C3"+
		"\x1C2\x3\x2\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5\x1C7"+
		"\a\xD0\x2\x2\x1C6\x1C8\x5\x134\x9B\x2\x1C7\x1C6\x3\x2\x2\x2\x1C7\x1C8"+
		"\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1D4\x5\x1C\xF\x2\x1CA\x1CC\x5"+
		"\x134\x9B\x2\x1CB\x1CA\x3\x2\x2\x2\x1CB\x1CC\x3\x2\x2\x2\x1CC\x1CD\x3"+
		"\x2\x2\x2\x1CD\x1CF\a)\x2\x2\x1CE\x1D0\x5\x134\x9B\x2\x1CF\x1CE\x3\x2"+
		"\x2\x2\x1CF\x1D0\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x1D3\x5\x1C\xF"+
		"\x2\x1D2\x1CB\x3\x2\x2\x2\x1D3\x1D6\x3\x2\x2\x2\x1D4\x1D2\x3\x2\x2\x2"+
		"\x1D4\x1D5\x3\x2\x2\x2\x1D5\x19\x3\x2\x2\x2\x1D6\x1D4\x3\x2\x2\x2\x1D7"+
		"\x1D8\x5\xD8m\x2\x1D8\x1B\x3\x2\x2\x2\x1D9\x1DA\x5\xB8]\x2\x1DA\x1D\x3"+
		"\x2\x2\x2\x1DB\x1E1\x5 \x11\x2\x1DC\x1DD\x5\x120\x91\x2\x1DD\x1DE\x5 "+
		"\x11\x2\x1DE\x1E0\x3\x2\x2\x2\x1DF\x1DC\x3\x2\x2\x2\x1E0\x1E3\x3\x2\x2"+
		"\x2\x1E1\x1DF\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2\x1E4\x3\x2\x2\x2"+
		"\x1E3\x1E1\x3\x2\x2\x2\x1E4\x1E5\x5\x120\x91\x2\x1E5\x1F\x3\x2\x2\x2\x1E6"+
		"\x215\x5\x106\x84\x2\x1E7\x215\x5\x18\r\x2\x1E8\x215\x5\"\x12\x2\x1E9"+
		"\x215\x5$\x13\x2\x1EA\x215\x5> \x2\x1EB\x215\x5\x44#\x2\x1EC\x215\x5\x46"+
		"$\x2\x1ED\x215\x5J&\x2\x1EE\x215\x5\xCEh\x2\x1EF\x215\x5L\'\x2\x1F0\x215"+
		"\x5N(\x2\x1F1\x215\x5T+\x2\x1F2\x215\x5V,\x2\x1F3\x215\x5X-\x2\x1F4\x215"+
		"\x5Z.\x2\x1F5\x215\x5`\x31\x2\x1F6\x215\x5n\x38\x2\x1F7\x215\x5p\x39\x2"+
		"\x1F8\x215\x5r:\x2\x1F9\x215\x5t;\x2\x1FA\x215\x5v<\x2\x1FB\x215\x5x="+
		"\x2\x1FC\x215\x5z>\x2\x1FD\x215\x5|?\x2\x1FE\x215\x5~@\x2\x1FF\x215\x5"+
		"\x80\x41\x2\x200\x215\x5\x82\x42\x2\x201\x215\x5\x88\x45\x2\x202\x215"+
		"\x5\x90I\x2\x203\x215\x5\x92J\x2\x204\x215\x5\x94K\x2\x205\x215\x5\x98"+
		"M\x2\x206\x215\x5\x9AN\x2\x207\x215\x5\x9CO\x2\x208\x215\x5\x9EP\x2\x209"+
		"\x215\x5\xA2R\x2\x20A\x215\x5\xA4S\x2\x20B\x215\x5\xACW\x2\x20C\x215\x5"+
		"\xA0Q\x2\x20D\x215\x5\xB6\\\x2\x20E\x215\x5\xBC_\x2\x20F\x215\x5\xC2\x62"+
		"\x2\x210\x215\x5\xC4\x63\x2\x211\x215\x5\xC6\x64\x2\x212\x215\x5\xCA\x66"+
		"\x2\x213\x215\x5\xD2j\x2\x214\x1E6\x3\x2\x2\x2\x214\x1E7\x3\x2\x2\x2\x214"+
		"\x1E8\x3\x2\x2\x2\x214\x1E9\x3\x2\x2\x2\x214\x1EA\x3\x2\x2\x2\x214\x1EB"+
		"\x3\x2\x2\x2\x214\x1EC\x3\x2\x2\x2\x214\x1ED\x3\x2\x2\x2\x214\x1EE\x3"+
		"\x2\x2\x2\x214\x1EF\x3\x2\x2\x2\x214\x1F0\x3\x2\x2\x2\x214\x1F1\x3\x2"+
		"\x2\x2\x214\x1F2\x3\x2\x2\x2\x214\x1F3\x3\x2\x2\x2\x214\x1F4\x3\x2\x2"+
		"\x2\x214\x1F5\x3\x2\x2\x2\x214\x1F6\x3\x2\x2\x2\x214\x1F7\x3\x2\x2\x2"+
		"\x214\x1F8\x3\x2\x2\x2\x214\x1F9\x3\x2\x2\x2\x214\x1FA\x3\x2\x2\x2\x214"+
		"\x1FB\x3\x2\x2\x2\x214\x1FC\x3\x2\x2\x2\x214\x1FD\x3\x2\x2\x2\x214\x1FE"+
		"\x3\x2\x2\x2\x214\x1FF\x3\x2\x2\x2\x214\x200\x3\x2\x2\x2\x214\x201\x3"+
		"\x2\x2\x2\x214\x202\x3\x2\x2\x2\x214\x203\x3\x2\x2\x2\x214\x204\x3\x2"+
		"\x2\x2\x214\x205\x3\x2\x2\x2\x214\x206\x3\x2\x2\x2\x214\x207\x3\x2\x2"+
		"\x2\x214\x208\x3\x2\x2\x2\x214\x209\x3\x2\x2\x2\x214\x20A\x3\x2\x2\x2"+
		"\x214\x20B\x3\x2\x2\x2\x214\x20C\x3\x2\x2\x2\x214\x20D\x3\x2\x2\x2\x214"+
		"\x20E\x3\x2\x2\x2\x214\x20F\x3\x2\x2\x2\x214\x210\x3\x2\x2\x2\x214\x211"+
		"\x3\x2\x2\x2\x214\x212\x3\x2\x2\x2\x214\x213\x3\x2\x2\x2\x215!\x3\x2\x2"+
		"\x2\x216\x226\a\x43\x2\x2\x217\x218\x5\x134\x9B\x2\x218\x223\x5\xCCg\x2"+
		"\x219\x21B\x5\x134\x9B\x2\x21A\x219\x3\x2\x2\x2\x21A\x21B\x3\x2\x2\x2"+
		"\x21B\x21C\x3\x2\x2\x2\x21C\x21E\a)\x2\x2\x21D\x21F\x5\x134\x9B\x2\x21E"+
		"\x21D\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2\x220\x222"+
		"\x5\xCCg\x2\x221\x21A\x3\x2\x2\x2\x222\x225\x3\x2\x2\x2\x223\x221\x3\x2"+
		"\x2\x2\x223\x224\x3\x2\x2\x2\x224\x227\x3\x2\x2\x2\x225\x223\x3\x2\x2"+
		"\x2\x226\x217\x3\x2\x2\x2\x226\x227\x3\x2\x2\x2\x227#\x3\x2\x2\x2\x228"+
		"\x229\x5\x116\x8C\x2\x229\x22A\x5\x134\x9B\x2\x22A\x22C\x3\x2\x2\x2\x22B"+
		"\x228\x3\x2\x2\x2\x22B\x22C\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x22E"+
		"\a\x44\x2\x2\x22E\x22F\x5\x134\x9B\x2\x22F\x23A\x5&\x14\x2\x230\x232\x5"+
		"\x134\x9B\x2\x231\x230\x3\x2\x2\x2\x231\x232\x3\x2\x2\x2\x232\x233\x3"+
		"\x2\x2\x2\x233\x235\a)\x2\x2\x234\x236\x5\x134\x9B\x2\x235\x234\x3\x2"+
		"\x2\x2\x235\x236\x3\x2\x2\x2\x236\x237\x3\x2\x2\x2\x237\x239\x5&\x14\x2"+
		"\x238\x231\x3\x2\x2\x2\x239\x23C\x3\x2\x2\x2\x23A\x238\x3\x2\x2\x2\x23A"+
		"\x23B\x3\x2\x2\x2\x23B%\x3\x2\x2\x2\x23C\x23A\x3\x2\x2\x2\x23D\x23F\x5"+
		"\xFA~\x2\x23E\x240\x5\x114\x8B\x2\x23F\x23E\x3\x2\x2\x2\x23F\x240\x3\x2"+
		"\x2\x2\x240\x244\x3\x2\x2\x2\x241\x242\x5\x134\x9B\x2\x242\x243\x5\xFC"+
		"\x7F\x2\x243\x245\x3\x2\x2\x2\x244\x241\x3\x2\x2\x2\x244\x245\x3\x2\x2"+
		"\x2\x245\x247\x3\x2\x2\x2\x246\x248\x5\x134\x9B\x2\x247\x246\x3\x2\x2"+
		"\x2\x247\x248\x3\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249\x24B\a\xD0\x2\x2"+
		"\x24A\x24C\x5\x134\x9B\x2\x24B\x24A\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2"+
		"\x24C\x24D\x3\x2\x2\x2\x24D\x24E\x5\xB8]\x2\x24E\'\x3\x2\x2\x2\x24F\x250"+
		"\x5\x116\x8C\x2\x250\x251\x5\x134\x9B\x2\x251\x253\x3\x2\x2\x2\x252\x24F"+
		"\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2\x253\x254\x3\x2\x2\x2\x254\x255\aG"+
		"\x2\x2\x255\x258\x5\x134\x9B\x2\x256\x257\a\xA3\x2\x2\x257\x259\x5\x134"+
		"\x9B\x2\x258\x256\x3\x2\x2\x2\x258\x259\x3\x2\x2\x2\x259\x25F\x3\x2\x2"+
		"\x2\x25A\x25C\ar\x2\x2\x25B\x25D\x5\x114\x8B\x2\x25C\x25B\x3\x2\x2\x2"+
		"\x25C\x25D\x3\x2\x2\x2\x25D\x260\x3\x2\x2\x2\x25E\x260\a\xBA\x2\x2\x25F"+
		"\x25A\x3\x2\x2\x2\x25F\x25E\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261\x262"+
		"\x5\x134\x9B\x2\x262\x264\x5\xFA~\x2\x263\x265\x5\x114\x8B\x2\x264\x263"+
		"\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x266\x3\x2\x2\x2\x266\x267\x5"+
		"\x134\x9B\x2\x267\x268\a\x82\x2\x2\x268\x269\x5\x134\x9B\x2\x269\x26F"+
		"\a\xE3\x2\x2\x26A\x26B\x5\x134\x9B\x2\x26B\x26C\a\x35\x2\x2\x26C\x26D"+
		"\x5\x134\x9B\x2\x26D\x26E\a\xE3\x2\x2\x26E\x270\x3\x2\x2\x2\x26F\x26A"+
		"\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x275\x3\x2\x2\x2\x271\x273\x5"+
		"\x134\x9B\x2\x272\x271\x3\x2\x2\x2\x272\x273\x3\x2\x2\x2\x273\x274\x3"+
		"\x2\x2\x2\x274\x276\x5\xEEx\x2\x275\x272\x3\x2\x2\x2\x275\x276\x3\x2\x2"+
		"\x2\x276\x27A\x3\x2\x2\x2\x277\x278\x5\x134\x9B\x2\x278\x279\x5\xFC\x7F"+
		"\x2\x279\x27B\x3\x2\x2\x2\x27A\x277\x3\x2\x2\x2\x27A\x27B\x3\x2\x2\x2"+
		"\x27B)\x3\x2\x2\x2\x27C\x27D\x5,\x17\x2\x27D\x27E\x5\x134\x9B\x2\x27E"+
		"\x289\x5.\x18\x2\x27F\x281\x5\x134\x9B\x2\x280\x27F\x3\x2\x2\x2\x280\x281"+
		"\x3\x2\x2\x2\x281\x282\x3\x2\x2\x2\x282\x284\a)\x2\x2\x283\x285\x5\x134"+
		"\x9B\x2\x284\x283\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285\x286\x3\x2\x2"+
		"\x2\x286\x288\x5.\x18\x2\x287\x280\x3\x2\x2\x2\x288\x28B\x3\x2\x2\x2\x289"+
		"\x287\x3\x2\x2\x2\x289\x28A\x3\x2\x2\x2\x28A+\x3\x2\x2\x2\x28B\x289\x3"+
		"\x2\x2\x2\x28C\x28D\t\x3\x2\x2\x28D-\x3\x2\x2\x2\x28E\x292\x5\x30\x19"+
		"\x2\x28F\x292\x5\x32\x1A\x2\x290\x292\x5\x38\x1D\x2\x291\x28E\x3\x2\x2"+
		"\x2\x291\x28F\x3\x2\x2\x2\x291\x290\x3\x2\x2\x2\x292/\x3\x2\x2\x2\x293"+
		"\x294\x5\xF8}\x2\x294\x31\x3\x2\x2\x2\x295\x297\x5\x34\x1B\x2\x296\x298"+
		"\x5\x134\x9B\x2\x297\x296\x3\x2\x2\x2\x297\x298\x3\x2\x2\x2\x298\x299"+
		"\x3\x2\x2\x2\x299\x29B\a\xD6\x2\x2\x29A\x29C\x5\x134\x9B\x2\x29B\x29A"+
		"\x3\x2\x2\x2\x29B\x29C\x3\x2\x2\x2\x29C\x29D\x3\x2\x2\x2\x29D\x29E\x5"+
		"\x36\x1C\x2\x29E\x33\x3\x2\x2\x2\x29F\x2A0\x6\x1B\x2\x2\x2A0\x2A1\x5\xF8"+
		"}\x2\x2A1\x35\x3\x2\x2\x2\x2A2\x2A3\x6\x1C\x3\x2\x2A3\x2A4\x5\xF8}\x2"+
		"\x2A4\x37\x3\x2\x2\x2\x2A5\x2A7\x5:\x1E\x2\x2A6\x2A8\x5\x134\x9B\x2\x2A7"+
		"\x2A6\x3\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2A9\x3\x2\x2\x2\x2A9\x2AB"+
		"\a\xD6\x2\x2\x2AA\x2AC\x5\x134\x9B\x2\x2AB\x2AA\x3\x2\x2\x2\x2AB\x2AC"+
		"\x3\x2\x2\x2\x2AC\x2AD\x3\x2\x2\x2\x2AD\x2AE\x5<\x1F\x2\x2AE\x39\x3\x2"+
		"\x2\x2\x2AF\x2B0\x5\xF8}\x2\x2B0;\x3\x2\x2\x2\x2B1\x2B2\x5\xF8}\x2\x2B2"+
		"=\x3\x2\x2\x2\x2B3\x2B4\aV\x2\x2\x2B4\x2B6\x5\x120\x91\x2\x2B5\x2B7\x5"+
		"\x1E\x10\x2\x2B6\x2B5\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7\x2B8\x3\x2"+
		"\x2\x2\x2B8\x2B9\a\x80\x2\x2\x2B9\x2D1\x3\x2\x2\x2\x2BA\x2BB\aV\x2\x2"+
		"\x2BB\x2BC\x5\x134\x9B\x2\x2BC\x2BD\t\x4\x2\x2\x2BD\x2BE\x5\x134\x9B\x2"+
		"\x2BE\x2BF\x5\xB8]\x2\x2BF\x2C1\x5\x120\x91\x2\x2C0\x2C2\x5\x1E\x10\x2"+
		"\x2C1\x2C0\x3\x2\x2\x2\x2C1\x2C2\x3\x2\x2\x2\x2C2\x2C3\x3\x2\x2\x2\x2C3"+
		"\x2C4\a\x80\x2\x2\x2C4\x2D1\x3\x2\x2\x2\x2C5\x2C6\aV\x2\x2\x2C6\x2C8\x5"+
		"\x120\x91\x2\x2C7\x2C9\x5\x1E\x10\x2\x2C8\x2C7\x3\x2\x2\x2\x2C8\x2C9\x3"+
		"\x2\x2\x2\x2C9\x2CA\x3\x2\x2\x2\x2CA\x2CB\a\x80\x2\x2\x2CB\x2CC\x5\x134"+
		"\x9B\x2\x2CC\x2CD\t\x4\x2\x2\x2CD\x2CE\x5\x134\x9B\x2\x2CE\x2CF\x5\xB8"+
		"]\x2\x2CF\x2D1\x3\x2\x2\x2\x2D0\x2B3\x3\x2\x2\x2\x2D0\x2BA\x3\x2\x2\x2"+
		"\x2D0\x2C5\x3\x2\x2\x2\x2D1?\x3\x2\x2\x2\x2D2\x2D3\x5\x116\x8C\x2\x2D3"+
		"\x2D4\x5\x134\x9B\x2\x2D4\x2D6\x3\x2\x2\x2\x2D5\x2D2\x3\x2\x2\x2\x2D5"+
		"\x2D6\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2D8\a\x65\x2\x2\x2D8\x2D9"+
		"\x5\x134\x9B\x2\x2D9\x2DA\x5\xFA~\x2\x2DA\x2DE\x5\x120\x91\x2\x2DB\x2DD"+
		"\x5\x42\"\x2\x2DC\x2DB\x3\x2\x2\x2\x2DD\x2E0\x3\x2\x2\x2\x2DE\x2DC\x3"+
		"\x2\x2\x2\x2DE\x2DF\x3\x2\x2\x2\x2DF\x2E1\x3\x2\x2\x2\x2E0\x2DE\x3\x2"+
		"\x2\x2\x2E1\x2E2\a\\\x2\x2\x2E2\x41\x3\x2\x2\x2\x2E3\x2EC\x5\xFA~\x2\x2E4"+
		"\x2E6\x5\x134\x9B\x2\x2E5\x2E4\x3\x2\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6"+
		"\x2E7\x3\x2\x2\x2\x2E7\x2E9\a\xD0\x2\x2\x2E8\x2EA\x5\x134\x9B\x2\x2E9"+
		"\x2E8\x3\x2\x2\x2\x2E9\x2EA\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2\x2\x2EB\x2ED"+
		"\x5\xB8]\x2\x2EC\x2E5\x3\x2\x2\x2\x2EC\x2ED\x3\x2\x2\x2\x2ED\x2EE\x3\x2"+
		"\x2\x2\x2EE\x2EF\x5\x120\x91\x2\x2EF\x43\x3\x2\x2\x2\x2F0\x2F1\ag\x2\x2"+
		"\x2F1\x2F2\x5\x134\x9B\x2\x2F2\x2FD\x5\xB8]\x2\x2F3\x2F5\x5\x134\x9B\x2"+
		"\x2F4\x2F3\x3\x2\x2\x2\x2F4\x2F5\x3\x2\x2\x2\x2F5\x2F6\x3\x2\x2\x2\x2F6"+
		"\x2F8\a)\x2\x2\x2F7\x2F9\x5\x134\x9B\x2\x2F8\x2F7\x3\x2\x2\x2\x2F8\x2F9"+
		"\x3\x2\x2\x2\x2F9\x2FA\x3\x2\x2\x2\x2FA\x2FC\x5\xB8]\x2\x2FB\x2F4\x3\x2"+
		"\x2\x2\x2FC\x2FF\x3\x2\x2\x2\x2FD\x2FB\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2"+
		"\x2\x2FE\x45\x3\x2\x2\x2\x2FF\x2FD\x3\x2\x2\x2\x300\x301\ah\x2\x2\x301"+
		"\x302\x5\x134\x9B\x2\x302\x303\x5\xB8]\x2\x303G\x3\x2\x2\x2\x304\x305"+
		"\x5\x116\x8C\x2\x305\x306\x5\x134\x9B\x2\x306\x308\x3\x2\x2\x2\x307\x304"+
		"\x3\x2\x2\x2\x307\x308\x3\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309\x30A\ai"+
		"\x2\x2\x30A\x30B\x5\x134\x9B\x2\x30B\x30D\x5\xFA~\x2\x30C\x30E\x5\x134"+
		"\x9B\x2\x30D\x30C\x3\x2\x2\x2\x30D\x30E\x3\x2\x2\x2\x30E\x30F\x3\x2\x2"+
		"\x2\x30F\x310\x5\xEEx\x2\x310I\x3\x2\x2\x2\x311\x312\t\x5\x2\x2\x312K"+
		"\x3\x2\x2\x2\x313\x314\aq\x2\x2\x314\x315\x5\x134\x9B\x2\x315\x316\aX"+
		"\x2\x2\x316\x317\x5\x134\x9B\x2\x317\x318\x5\xB8]\x2\x318\x319\x5\x134"+
		"\x9B\x2\x319\x31A\az\x2\x2\x31A\x31B\x5\x134\x9B\x2\x31B\x31C\x5\xB8]"+
		"\x2\x31C\x31E\x5\x120\x91\x2\x31D\x31F\x5\x1E\x10\x2\x31E\x31D\x3\x2\x2"+
		"\x2\x31E\x31F\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320\x324\a\x8C\x2\x2"+
		"\x321\x322\x5\x134\x9B\x2\x322\x323\x5\xB8]\x2\x323\x325\x3\x2\x2\x2\x324"+
		"\x321\x3\x2\x2\x2\x324\x325\x3\x2\x2\x2\x325M\x3\x2\x2\x2\x326\x327\a"+
		"q\x2\x2\x327\x328\x5\x134\x9B\x2\x328\x32A\x5\xB8]\x2\x329\x32B\x5\x134"+
		"\x9B\x2\x32A\x329\x3\x2\x2\x2\x32A\x32B\x3\x2\x2\x2\x32B\x32C\x3\x2\x2"+
		"\x2\x32C\x32E\a\xD0\x2\x2\x32D\x32F\x5\x134\x9B\x2\x32E\x32D\x3\x2\x2"+
		"\x2\x32E\x32F\x3\x2\x2\x2\x32F\x330\x3\x2\x2\x2\x330\x331\x5\xB8]\x2\x331"+
		"\x332\x5\x134\x9B\x2\x332\x333\a\xBE\x2\x2\x333\x334\x5\x134\x9B\x2\x334"+
		"\x33A\x5\xB8]\x2\x335\x336\x5\x134\x9B\x2\x336\x337\a\xB7\x2\x2\x337\x338"+
		"\x5\x134\x9B\x2\x338\x339\x5\xB8]\x2\x339\x33B\x3\x2\x2\x2\x33A\x335\x3"+
		"\x2\x2\x2\x33A\x33B\x3\x2\x2\x2\x33B\x33C\x3\x2\x2\x2\x33C\x33E\x5\x120"+
		"\x91\x2\x33D\x33F\x5\x1E\x10\x2\x33E\x33D\x3\x2\x2\x2\x33E\x33F\x3\x2"+
		"\x2\x2\x33F\x340\x3\x2\x2\x2\x340\x344\a\x8C\x2\x2\x341\x342\x5\x134\x9B"+
		"\x2\x342\x343\x5\xB8]\x2\x343\x345\x3\x2\x2\x2\x344\x341\x3\x2\x2\x2\x344"+
		"\x345\x3\x2\x2\x2\x345O\x3\x2\x2\x2\x346\x347\x5\x116\x8C\x2\x347\x348"+
		"\x5\x134\x9B\x2\x348\x34A\x3\x2\x2\x2\x349\x346\x3\x2\x2\x2\x349\x34A"+
		"\x3\x2\x2\x2\x34A\x34D\x3\x2\x2\x2\x34B\x34C\a\xB6\x2\x2\x34C\x34E\x5"+
		"\x134\x9B\x2\x34D\x34B\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E\x34F\x3"+
		"\x2\x2\x2\x34F\x351\ar\x2\x2\x350\x352\x5\x134\x9B\x2\x351\x350\x3\x2"+
		"\x2\x2\x351\x352\x3\x2\x2\x2\x352\x353\x3\x2\x2\x2\x353\x355\x5R*\x2\x354"+
		"\x356\x5\x114\x8B\x2\x355\x354\x3\x2\x2\x2\x355\x356\x3\x2\x2\x2\x356"+
		"\x35B\x3\x2\x2\x2\x357\x359\x5\x134\x9B\x2\x358\x357\x3\x2\x2\x2\x358"+
		"\x359\x3\x2\x2\x2\x359\x35A\x3\x2\x2\x2\x35A\x35C\x5\xEEx\x2\x35B\x358"+
		"\x3\x2\x2\x2\x35B\x35C\x3\x2\x2\x2\x35C\x361\x3\x2\x2\x2\x35D\x35F\x5"+
		"\x134\x9B\x2\x35E\x35D\x3\x2\x2\x2\x35E\x35F\x3\x2\x2\x2\x35F\x360\x3"+
		"\x2\x2\x2\x360\x362\x5\xFC\x7F\x2\x361\x35E\x3\x2\x2\x2\x361\x362\x3\x2"+
		"\x2\x2\x362\x363\x3\x2\x2\x2\x363\x365\x5\x120\x91\x2\x364\x366\x5\x1E"+
		"\x10\x2\x365\x364\x3\x2\x2\x2\x365\x366\x3\x2\x2\x2\x366\x367\x3\x2\x2"+
		"\x2\x367\x368\a]\x2\x2\x368Q\x3\x2\x2\x2\x369\x36A\x5\xFA~\x2\x36AS\x3"+
		"\x2\x2\x2\x36B\x36C\as\x2\x2\x36C\x36D\x5\x134\x9B\x2\x36D\x36F\x5\xCC"+
		"g\x2\x36E\x370\x5\x134\x9B\x2\x36F\x36E\x3\x2\x2\x2\x36F\x370\x3\x2\x2"+
		"\x2\x370\x371\x3\x2\x2\x2\x371\x373\a)\x2\x2\x372\x374\x5\x134\x9B\x2"+
		"\x373\x372\x3\x2\x2\x2\x373\x374\x3\x2\x2\x2\x374\x376\x3\x2\x2\x2\x375"+
		"\x377\x5\xB8]\x2\x376\x375\x3\x2\x2\x2\x376\x377\x3\x2\x2\x2\x377\x379"+
		"\x3\x2\x2\x2\x378\x37A\x5\x134\x9B\x2\x379\x378\x3\x2\x2\x2\x379\x37A"+
		"\x3\x2\x2\x2\x37A\x37B\x3\x2\x2\x2\x37B\x37D\a)\x2\x2\x37C\x37E\x5\x134"+
		"\x9B\x2\x37D\x37C\x3\x2\x2\x2\x37D\x37E\x3\x2\x2\x2\x37E\x37F\x3\x2\x2"+
		"\x2\x37F\x380\x5\xB8]\x2\x380U\x3\x2\x2\x2\x381\x382\au\x2\x2\x382\x383"+
		"\x5\x134\x9B\x2\x383\x384\x5\xB8]\x2\x384W\x3\x2\x2\x2\x385\x386\av\x2"+
		"\x2\x386\x387\x5\x134\x9B\x2\x387\x388\x5\xB8]\x2\x388Y\x3\x2\x2\x2\x389"+
		"\x38A\aw\x2\x2\x38A\x38B\x5\x134\x9B\x2\x38B\x38C\x5l\x37\x2\x38C\x38D"+
		"\x5\x134\x9B\x2\x38D\x38E\a\xBD\x2\x2\x38E\x390\x5\x120\x91\x2\x38F\x391"+
		"\x5\x1E\x10\x2\x390\x38F\x3\x2\x2\x2\x390\x391\x3\x2\x2\x2\x391\x395\x3"+
		"\x2\x2\x2\x392\x394\x5\\/\x2\x393\x392\x3\x2\x2\x2\x394\x397\x3\x2\x2"+
		"\x2\x395\x393\x3\x2\x2\x2\x395\x396\x3\x2\x2\x2\x396\x399\x3\x2\x2\x2"+
		"\x397\x395\x3\x2\x2\x2\x398\x39A\x5^\x30\x2\x399\x398\x3\x2\x2\x2\x399"+
		"\x39A\x3\x2\x2\x2\x39A\x39B\x3\x2\x2\x2\x39B\x39C\a^\x2\x2\x39C[\x3\x2"+
		"\x2\x2\x39D\x39E\aZ\x2\x2\x39E\x39F\x5\x134\x9B\x2\x39F\x3A0\x5l\x37\x2"+
		"\x3A0\x3A1\x5\x134\x9B\x2\x3A1\x3A2\a\xBD\x2\x2\x3A2\x3A4\x5\x120\x91"+
		"\x2\x3A3\x3A5\x5\x1E\x10\x2\x3A4\x3A3\x3\x2\x2\x2\x3A4\x3A5\x3\x2\x2\x2"+
		"\x3A5\x3B2\x3\x2\x2\x2\x3A6\x3A7\aZ\x2\x2\x3A7\x3A8\x5\x134\x9B\x2\x3A8"+
		"\x3A9\x5l\x37\x2\x3A9\x3AA\x5\x134\x9B\x2\x3AA\x3AC\a\xBD\x2\x2\x3AB\x3AD"+
		"\x5\x134\x9B\x2\x3AC\x3AB\x3\x2\x2\x2\x3AC\x3AD\x3\x2\x2\x2\x3AD\x3AF"+
		"\x3\x2\x2\x2\x3AE\x3B0\x5\x1E\x10\x2\x3AF\x3AE\x3\x2\x2\x2\x3AF\x3B0\x3"+
		"\x2\x2\x2\x3B0\x3B2\x3\x2\x2\x2\x3B1\x39D\x3\x2\x2\x2\x3B1\x3A6\x3\x2"+
		"\x2\x2\x3B2]\x3\x2\x2\x2\x3B3\x3B4\aY\x2\x2\x3B4\x3B6\x5\x120\x91\x2\x3B5"+
		"\x3B7\x5\x1E\x10\x2\x3B6\x3B5\x3\x2\x2\x2\x3B6\x3B7\x3\x2\x2\x2\x3B7_"+
		"\x3\x2\x2\x2\x3B8\x3BB\x5\x62\x32\x2\x3B9\x3BB\x5\x64\x33\x2\x3BA\x3B8"+
		"\x3\x2\x2\x2\x3BA\x3B9\x3\x2\x2\x2\x3BB\x61\x3\x2\x2\x2\x3BC\x3BE\aw\x2"+
		"\x2\x3BD\x3BF\x5\x134\x9B\x2\x3BE\x3BD\x3\x2\x2\x2\x3BE\x3BF\x3\x2\x2"+
		"\x2\x3BF\x3C0\x3\x2\x2\x2\x3C0\x3C2\x5l\x37\x2\x3C1\x3C3\x5\x134\x9B\x2"+
		"\x3C2\x3C1\x3\x2\x2\x2\x3C2\x3C3\x3\x2\x2\x2\x3C3\x3C4\x3\x2\x2\x2\x3C4"+
		"\x3C6\a\xBD\x2\x2\x3C5\x3C7\x5\x134\x9B\x2\x3C6\x3C5\x3\x2\x2\x2\x3C6"+
		"\x3C7\x3\x2\x2\x2\x3C7\x3C8\x3\x2\x2\x2\x3C8\x3CC\x5h\x35\x2\x3C9\x3CA"+
		"\x5\x134\x9B\x2\x3CA\x3CB\x5\x66\x34\x2\x3CB\x3CD\x3\x2\x2\x2\x3CC\x3C9"+
		"\x3\x2\x2\x2\x3CC\x3CD\x3\x2\x2\x2\x3CD\x63\x3\x2\x2\x2\x3CE\x3D0\aw\x2"+
		"\x2\x3CF\x3D1\x5\x134\x9B\x2\x3D0\x3CF\x3\x2\x2\x2\x3D0\x3D1\x3\x2\x2"+
		"\x2\x3D1\x3D2\x3\x2\x2\x2\x3D2\x3D4\x5l\x37\x2\x3D3\x3D5\x5\x134\x9B\x2"+
		"\x3D4\x3D3\x3\x2\x2\x2\x3D4\x3D5\x3\x2\x2\x2\x3D5\x3D6\x3\x2\x2\x2\x3D6"+
		"\x3D7\a\xBD\x2\x2\x3D7\x3D9\x5\x120\x91\x2\x3D8\x3DA\x5\x134\x9B\x2\x3D9"+
		"\x3D8\x3\x2\x2\x2\x3D9\x3DA\x3\x2\x2\x2\x3DA\x3DB\x3\x2\x2\x2\x3DB\x3DC"+
		"\x5\x66\x34\x2\x3DC\x65\x3\x2\x2\x2\x3DD\x3DF\aY\x2\x2\x3DE\x3E0\x5\x134"+
		"\x9B\x2\x3DF\x3DE\x3\x2\x2\x2\x3DF\x3E0\x3\x2\x2\x2\x3E0\x3E2\x3\x2\x2"+
		"\x2\x3E1\x3E3\x5h\x35\x2\x3E2\x3E1\x3\x2\x2\x2\x3E2\x3E3\x3\x2\x2\x2\x3E3"+
		"g\x3\x2\x2\x2\x3E4\x3F1\x5\x10C\x87\x2\x3E5\x3E7\x5\x134\x9B\x2\x3E6\x3E5"+
		"\x3\x2\x2\x2\x3E6\x3E7\x3\x2\x2\x2\x3E7\x3E8\x3\x2\x2\x2\x3E8\x3EA\a*"+
		"\x2\x2\x3E9\x3EB\x5\x134\x9B\x2\x3EA\x3E9\x3\x2\x2\x2\x3EA\x3EB\x3\x2"+
		"\x2\x2\x3EB\x3ED\x3\x2\x2\x2\x3EC\x3EE\x5j\x36\x2\x3ED\x3EC\x3\x2\x2\x2"+
		"\x3ED\x3EE\x3\x2\x2\x2\x3EE\x3F0\x3\x2\x2\x2\x3EF\x3E6\x3\x2\x2\x2\x3F0"+
		"\x3F3\x3\x2\x2\x2\x3F1\x3EF\x3\x2\x2\x2\x3F1\x3F2\x3\x2\x2\x2\x3F2\x40B"+
		"\x3\x2\x2\x2\x3F3\x3F1\x3\x2\x2\x2\x3F4\x3F6\a*\x2\x2\x3F5\x3F7\x5\x134"+
		"\x9B\x2\x3F6\x3F5\x3\x2\x2\x2\x3F6\x3F7\x3\x2\x2\x2\x3F7\x3F9\x3\x2\x2"+
		"\x2\x3F8\x3F4\x3\x2\x2\x2\x3F8\x3F9\x3\x2\x2\x2\x3F9\x3FA\x3\x2\x2\x2"+
		"\x3FA\x407\x5j\x36\x2\x3FB\x3FD\x5\x134\x9B\x2\x3FC\x3FB\x3\x2\x2\x2\x3FC"+
		"\x3FD\x3\x2\x2\x2\x3FD\x3FE\x3\x2\x2\x2\x3FE\x400\a*\x2\x2\x3FF\x401\x5"+
		"\x134\x9B\x2\x400\x3FF\x3\x2\x2\x2\x400\x401\x3\x2\x2\x2\x401\x403\x3"+
		"\x2\x2\x2\x402\x404\x5j\x36\x2\x403\x402\x3\x2\x2\x2\x403\x404\x3\x2\x2"+
		"\x2\x404\x406\x3\x2\x2\x2\x405\x3FC\x3\x2\x2\x2\x406\x409\x3\x2\x2\x2"+
		"\x407\x405\x3\x2\x2\x2\x407\x408\x3\x2\x2\x2\x408\x40B\x3\x2\x2\x2\x409"+
		"\x407\x3\x2\x2\x2\x40A\x3E4\x3\x2\x2\x2\x40A\x3F8\x3\x2\x2\x2\x40Bi\x3"+
		"\x2\x2\x2\x40C\x40D\x5 \x11\x2\x40Dk\x3\x2\x2\x2\x40E\x40F\x5\xB8]\x2"+
		"\x40Fm\x3\x2\x2\x2\x410\x411\ay\x2\x2\x411\x412\x5\x134\x9B\x2\x412\x413"+
		"\x5\xB8]\x2\x413o\x3\x2\x2\x2\x414\x415\a{\x2\x2\x415\x416\x5\x134\x9B"+
		"\x2\x416\x41F\x5\xCCg\x2\x417\x419\x5\x134\x9B\x2\x418\x417\x3\x2\x2\x2"+
		"\x418\x419\x3\x2\x2\x2\x419\x41A\x3\x2\x2\x2\x41A\x41C\a)\x2\x2\x41B\x41D"+
		"\x5\x134\x9B\x2\x41C\x41B\x3\x2\x2\x2\x41C\x41D\x3\x2\x2\x2\x41D\x41E"+
		"\x3\x2\x2\x2\x41E\x420\x5\xB8]\x2\x41F\x418\x3\x2\x2\x2\x420\x421\x3\x2"+
		"\x2\x2\x421\x41F\x3\x2\x2\x2\x421\x422\x3\x2\x2\x2\x422q\x3\x2\x2\x2\x423"+
		"\x424\a\x81\x2\x2\x424\x426\x5\x134\x9B\x2\x425\x423\x3\x2\x2\x2\x425"+
		"\x426\x3\x2\x2\x2\x426\x427\x3\x2\x2\x2\x427\x429\x5\xB8]\x2\x428\x42A"+
		"\x5\x134\x9B\x2\x429\x428\x3\x2\x2\x2\x429\x42A\x3\x2\x2\x2\x42A\x42B"+
		"\x3\x2\x2\x2\x42B\x42D\a\xD0\x2\x2\x42C\x42E\x5\x134\x9B\x2\x42D\x42C"+
		"\x3\x2\x2\x2\x42D\x42E\x3\x2\x2\x2\x42E\x42F\x3\x2\x2\x2\x42F\x430\x5"+
		"\xB8]\x2\x430s\x3\x2\x2\x2\x431\x432\a\x84\x2\x2\x432\x433\x5\x134\x9B"+
		"\x2\x433\x435\x5\xCCg\x2\x434\x436\x5\x134\x9B\x2\x435\x434\x3\x2\x2\x2"+
		"\x435\x436\x3\x2\x2\x2\x436\x437\x3\x2\x2\x2\x437\x439\a)\x2\x2\x438\x43A"+
		"\x5\x134\x9B\x2\x439\x438\x3\x2\x2\x2\x439\x43A\x3\x2\x2\x2\x43A\x43B"+
		"\x3\x2\x2\x2\x43B\x43C\x5\xB8]\x2\x43Cu\x3\x2\x2\x2\x43D\x43E\a~\x2\x2"+
		"\x43E\x43F\x5\x134\x9B\x2\x43F\x44F\x5\xB8]\x2\x440\x442\x5\x134\x9B\x2"+
		"\x441\x440\x3\x2\x2\x2\x441\x442\x3\x2\x2\x2\x442\x443\x3\x2\x2\x2\x443"+
		"\x445\a)\x2\x2\x444\x446\x5\x134\x9B\x2\x445\x444\x3\x2\x2\x2\x445\x446"+
		"\x3\x2\x2\x2\x446\x447\x3\x2\x2\x2\x447\x44D\x5\xB8]\x2\x448\x449\x5\x134"+
		"\x9B\x2\x449\x44A\a\xBE\x2\x2\x44A\x44B\x5\x134\x9B\x2\x44B\x44C\x5\xB8"+
		"]\x2\x44C\x44E\x3\x2\x2\x2\x44D\x448\x3\x2\x2\x2\x44D\x44E\x3\x2\x2\x2"+
		"\x44E\x450\x3\x2\x2\x2\x44F\x441\x3\x2\x2\x2\x44F\x450\x3\x2\x2\x2\x450"+
		"w\x3\x2\x2\x2\x451\x452\a\x88\x2\x2\x452\x453\x5\x134\x9B\x2\x453\x455"+
		"\x5\xB8]\x2\x454\x456\x5\x134\x9B\x2\x455\x454\x3\x2\x2\x2\x455\x456\x3"+
		"\x2\x2\x2\x456\x457\x3\x2\x2\x2\x457\x459\a\xD0\x2\x2\x458\x45A\x5\x134"+
		"\x9B\x2\x459\x458\x3\x2\x2\x2\x459\x45A\x3\x2\x2\x2\x45A\x45B\x3\x2\x2"+
		"\x2\x45B\x45C\x5\xB8]\x2\x45Cy\x3\x2\x2\x2\x45D\x45F\a\x8A\x2\x2\x45E"+
		"\x460\x5\x134\x9B\x2\x45F\x45E\x3\x2\x2\x2\x45F\x460\x3\x2\x2\x2\x460"+
		"\x461\x3\x2\x2\x2\x461\x463\a\xD4\x2\x2\x462\x464\x5\x134\x9B\x2\x463"+
		"\x462\x3\x2\x2\x2\x463\x464\x3\x2\x2\x2\x464\x465\x3\x2\x2\x2\x465\x467"+
		"\x5\xE8u\x2\x466\x468\x5\x134\x9B\x2\x467\x466\x3\x2\x2\x2\x467\x468\x3"+
		"\x2\x2\x2\x468\x469\x3\x2\x2\x2\x469\x46A\a\xDB\x2\x2\x46A{\x3\x2\x2\x2"+
		"\x46B\x46C\t\x6\x2\x2\x46C\x475\x5\x134\x9B\x2\x46D\x46E\av\x2\x2\x46E"+
		"\x46F\x5\x134\x9B\x2\x46F\x470\x5\xB8]\x2\x470\x476\x3\x2\x2\x2\x471\x472"+
		"\a\xAD\x2\x2\x472\x473\x5\x134\x9B\x2\x473\x474\a\x8C\x2\x2\x474\x476"+
		"\x3\x2\x2\x2\x475\x46D\x3\x2\x2\x2\x475\x471\x3\x2\x2\x2\x476}\x3\x2\x2"+
		"\x2\x477\x478\a\x91\x2\x2\x478\x479\x5\x134\x9B\x2\x479\x47A\x5\xB8]\x2"+
		"\x47A\x47B\x5\x134\x9B\x2\x47B\x47C\av\x2\x2\x47C\x47D\x5\x134\x9B\x2"+
		"\x47D\x488\x5\xB8]\x2\x47E\x480\x5\x134\x9B\x2\x47F\x47E\x3\x2\x2\x2\x47F"+
		"\x480\x3\x2\x2\x2\x480\x481\x3\x2\x2\x2\x481\x483\a)\x2\x2\x482\x484\x5"+
		"\x134\x9B\x2\x483\x482\x3\x2\x2\x2\x483\x484\x3\x2\x2\x2\x484\x485\x3"+
		"\x2\x2\x2\x485\x487\x5\xB8]\x2\x486\x47F\x3\x2\x2\x2\x487\x48A\x3\x2\x2"+
		"\x2\x488\x486\x3\x2\x2\x2\x488\x489\x3\x2\x2\x2\x489\x7F\x3\x2\x2\x2\x48A"+
		"\x488\x3\x2\x2\x2\x48B\x48C\a\x91\x2\x2\x48C\x48D\x5\x134\x9B\x2\x48D"+
		"\x48E\x5\xB8]\x2\x48E\x48F\x5\x134\x9B\x2\x48F\x490\au\x2\x2\x490\x491"+
		"\x5\x134\x9B\x2\x491\x49C\x5\xB8]\x2\x492\x494\x5\x134\x9B\x2\x493\x492"+
		"\x3\x2\x2\x2\x493\x494\x3\x2\x2\x2\x494\x495\x3\x2\x2\x2\x495\x497\a)"+
		"\x2\x2\x496\x498\x5\x134\x9B\x2\x497\x496\x3\x2\x2\x2\x497\x498\x3\x2"+
		"\x2\x2\x498\x499\x3\x2\x2\x2\x499\x49B\x5\xB8]\x2\x49A\x493\x3\x2\x2\x2"+
		"\x49B\x49E\x3\x2\x2\x2\x49C\x49A\x3\x2\x2\x2\x49C\x49D\x3\x2\x2\x2\x49D"+
		"\x81\x3\x2\x2\x2\x49E\x49C\x3\x2\x2\x2\x49F\x4A0\a\x94\x2\x2\x4A0\x4A1"+
		"\x5\x134\x9B\x2\x4A1\x4A2\x5\xB8]\x2\x4A2\x4A3\x5\x134\x9B\x2\x4A3\x4A4"+
		"\aq\x2\x2\x4A4\x4A5\x5\x134\x9B\x2\x4A5\x4AB\t\a\x2\x2\x4A6\x4A7\x5\x134"+
		"\x9B\x2\x4A7\x4A8\a\x33\x2\x2\x4A8\x4A9\x5\x134\x9B\x2\x4A9\x4AA\t\b\x2"+
		"\x2\x4AA\x4AC\x3\x2\x2\x2\x4AB\x4A6\x3\x2\x2\x2\x4AB\x4AC\x3\x2\x2\x2"+
		"\x4AC\x4B0\x3\x2\x2\x2\x4AD\x4AE\x5\x134\x9B\x2\x4AE\x4AF\t\t\x2\x2\x4AF"+
		"\x4B1\x3\x2\x2\x2\x4B0\x4AD\x3\x2\x2\x2\x4B0\x4B1\x3\x2\x2\x2\x4B1\x4B2"+
		"\x3\x2\x2\x2\x4B2\x4B3\x5\x134\x9B\x2\x4B3\x4B4\a\x39\x2\x2\x4B4\x4B5"+
		"\x5\x134\x9B\x2\x4B5\x4C1\x5\xCCg\x2\x4B6\x4B7\x5\x134\x9B\x2\x4B7\x4B9"+
		"\a\x1D\x2\x2\x4B8\x4BA\x5\x134\x9B\x2\x4B9\x4B8\x3\x2\x2\x2\x4B9\x4BA"+
		"\x3\x2\x2\x2\x4BA\x4BB\x3\x2\x2\x2\x4BB\x4BD\a\xD0\x2\x2\x4BC\x4BE\x5"+
		"\x134\x9B\x2\x4BD\x4BC\x3\x2\x2\x2\x4BD\x4BE\x3\x2\x2\x2\x4BE\x4BF\x3"+
		"\x2\x2\x2\x4BF\x4C0\x5\xB8]\x2\x4C0\x4C2\x3\x2\x2\x2\x4C1\x4B6\x3\x2\x2"+
		"\x2\x4C1\x4C2\x3\x2\x2\x2\x4C2\x83\x3\x2\x2\x2\x4C3\x4D0\x5\x86\x44\x2"+
		"\x4C4\x4C6\x5\x134\x9B\x2\x4C5\x4C4\x3\x2\x2\x2\x4C5\x4C6\x3\x2\x2\x2"+
		"\x4C6\x4C7\x3\x2\x2\x2\x4C7\x4C9\t\n\x2\x2\x4C8\x4CA\x5\x134\x9B\x2\x4C9"+
		"\x4C8\x3\x2\x2\x2\x4C9\x4CA\x3\x2\x2\x2\x4CA\x4CC\x3\x2\x2\x2\x4CB\x4CD"+
		"\x5\x86\x44\x2\x4CC\x4CB\x3\x2\x2\x2\x4CC\x4CD\x3\x2\x2\x2\x4CD\x4CF\x3"+
		"\x2\x2\x2\x4CE\x4C5\x3\x2\x2\x2\x4CF\x4D2\x3\x2\x2\x2\x4D0\x4CE\x3\x2"+
		"\x2\x2\x4D0\x4D1\x3\x2\x2\x2\x4D1\x4E5\x3\x2\x2\x2\x4D2\x4D0\x3\x2\x2"+
		"\x2\x4D3\x4D5\x5\x86\x44\x2\x4D4\x4D3\x3\x2\x2\x2\x4D4\x4D5\x3\x2\x2\x2"+
		"\x4D5\x4E0\x3\x2\x2\x2\x4D6\x4D8\x5\x134\x9B\x2\x4D7\x4D6\x3\x2\x2\x2"+
		"\x4D7\x4D8\x3\x2\x2\x2\x4D8\x4D9\x3\x2\x2\x2\x4D9\x4DB\t\n\x2\x2\x4DA"+
		"\x4DC\x5\x134\x9B\x2\x4DB\x4DA\x3\x2\x2\x2\x4DB\x4DC\x3\x2\x2\x2\x4DC"+
		"\x4DE\x3\x2\x2\x2\x4DD\x4DF\x5\x86\x44\x2\x4DE\x4DD\x3\x2\x2\x2\x4DE\x4DF"+
		"\x3\x2\x2\x2\x4DF\x4E1\x3\x2\x2\x2\x4E0\x4D7\x3\x2\x2\x2\x4E1\x4E2\x3"+
		"\x2\x2\x2\x4E2\x4E0\x3\x2\x2\x2\x4E2\x4E3\x3\x2\x2\x2\x4E3\x4E5\x3\x2"+
		"\x2\x2\x4E4\x4C3\x3\x2\x2\x2\x4E4\x4D4\x3\x2\x2\x2\x4E5\x85\x3\x2\x2\x2"+
		"\x4E6\x4F8\x5\xB8]\x2\x4E7\x4F5\t\v\x2\x2\x4E8\x4EA\x5\x134\x9B\x2\x4E9"+
		"\x4E8\x3\x2\x2\x2\x4E9\x4EA\x3\x2\x2\x2\x4EA\x4EB\x3\x2\x2\x2\x4EB\x4ED"+
		"\a\xD4\x2\x2\x4EC\x4EE\x5\x134\x9B\x2\x4ED\x4EC\x3\x2\x2\x2\x4ED\x4EE"+
		"\x3\x2\x2\x2\x4EE\x4EF\x3\x2\x2\x2\x4EF\x4F1\x5\xE8u\x2\x4F0\x4F2\x5\x134"+
		"\x9B\x2\x4F1\x4F0\x3\x2\x2\x2\x4F1\x4F2\x3\x2\x2\x2\x4F2\x4F3\x3\x2\x2"+
		"\x2\x4F3\x4F4\a\xDB\x2\x2\x4F4\x4F6\x3\x2\x2\x2\x4F5\x4E9\x3\x2\x2\x2"+
		"\x4F5\x4F6\x3\x2\x2\x2\x4F6\x4F8\x3\x2\x2\x2\x4F7\x4E6\x3\x2\x2\x2\x4F7"+
		"\x4E7\x3\x2\x2\x2\x4F8\x87\x3\x2\x2\x2\x4F9\x4FA\a\x9E\x2\x2\x4FA\x4FB"+
		"\x5\x134\x9B\x2\x4FB\x4FD\x5\xCCg\x2\x4FC\x4FE\x5\x134\x9B\x2\x4FD\x4FC"+
		"\x3\x2\x2\x2\x4FD\x4FE\x3\x2\x2\x2\x4FE\x4FF\x3\x2\x2\x2\x4FF\x504\a)"+
		"\x2\x2\x500\x502\x5\x134\x9B\x2\x501\x500\x3\x2\x2\x2\x501\x502\x3\x2"+
		"\x2\x2\x502\x503\x3\x2\x2\x2\x503\x505\x5\x84\x43\x2\x504\x501\x3\x2\x2"+
		"\x2\x504\x505\x3\x2\x2\x2\x505\x89\x3\x2\x2\x2\x506\x507\x5\x116\x8C\x2"+
		"\x507\x508\x5\x134\x9B\x2\x508\x50A\x3\x2\x2\x2\x509\x506\x3\x2\x2\x2"+
		"\x509\x50A\x3\x2\x2\x2\x50A\x50D\x3\x2\x2\x2\x50B\x50C\a\xB6\x2\x2\x50C"+
		"\x50E\x5\x134\x9B\x2\x50D\x50B\x3\x2\x2\x2\x50D\x50E\x3\x2\x2\x2\x50E"+
		"\x50F\x3\x2\x2\x2\x50F\x510\a\xA0\x2\x2\x510\x511\x5\x134\x9B\x2\x511"+
		"\x513\x5R*\x2\x512\x514\x5\x114\x8B\x2\x513\x512\x3\x2\x2\x2\x513\x514"+
		"\x3\x2\x2\x2\x514\x519\x3\x2\x2\x2\x515\x517\x5\x134\x9B\x2\x516\x515"+
		"\x3\x2\x2\x2\x516\x517\x3\x2\x2\x2\x517\x518\x3\x2\x2\x2\x518\x51A\x5"+
		"\xEEx\x2\x519\x516\x3\x2\x2\x2\x519\x51A\x3\x2\x2\x2\x51A\x51E\x3\x2\x2"+
		"\x2\x51B\x51C\x5\x134\x9B\x2\x51C\x51D\x5\xFC\x7F\x2\x51D\x51F\x3\x2\x2"+
		"\x2\x51E\x51B\x3\x2\x2\x2\x51E\x51F\x3\x2\x2\x2\x51F\x520\x3\x2\x2\x2"+
		"\x520\x522\x5\x120\x91\x2\x521\x523\x5\x1E\x10\x2\x522\x521\x3\x2\x2\x2"+
		"\x522\x523\x3\x2\x2\x2\x523\x524\x3\x2\x2\x2\x524\x525\a_\x2\x2\x525\x8B"+
		"\x3\x2\x2\x2\x526\x527\x5\x116\x8C\x2\x527\x528\x5\x134\x9B\x2\x528\x52A"+
		"\x3\x2\x2\x2\x529\x526\x3\x2\x2\x2\x529\x52A\x3\x2\x2\x2\x52A\x52D\x3"+
		"\x2\x2\x2\x52B\x52C\a\xB6\x2\x2\x52C\x52E\x5\x134\x9B\x2\x52D\x52B\x3"+
		"\x2\x2\x2\x52D\x52E\x3\x2\x2\x2\x52E\x52F\x3\x2\x2\x2\x52F\x530\a\xA2"+
		"\x2\x2\x530\x531\x5\x134\x9B\x2\x531\x536\x5\xB0Y\x2\x532\x534\x5\x134"+
		"\x9B\x2\x533\x532\x3\x2\x2\x2\x533\x534\x3\x2\x2\x2\x534\x535\x3\x2\x2"+
		"\x2\x535\x537\x5\xEEx\x2\x536\x533\x3\x2\x2\x2\x536\x537\x3\x2\x2\x2\x537"+
		"\x538\x3\x2\x2\x2\x538\x53A\x5\x120\x91\x2\x539\x53B\x5\x1E\x10\x2\x53A"+
		"\x539\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2\x53B\x53C\x3\x2\x2\x2\x53C\x53D"+
		"\a_\x2\x2\x53D\x8D\x3\x2\x2\x2\x53E\x53F\x5\x116\x8C\x2\x53F\x540\x5\x134"+
		"\x9B\x2\x540\x542\x3\x2\x2\x2\x541\x53E\x3\x2\x2\x2\x541\x542\x3\x2\x2"+
		"\x2\x542\x545\x3\x2\x2\x2\x543\x544\a\xB6\x2\x2\x544\x546\x5\x134\x9B"+
		"\x2\x545\x543\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546\x547\x3\x2\x2\x2"+
		"\x547\x548\a\xA1\x2\x2\x548\x549\x5\x134\x9B\x2\x549\x54E\x5\xB0Y\x2\x54A"+
		"\x54C\x5\x134\x9B\x2\x54B\x54A\x3\x2\x2\x2\x54B\x54C\x3\x2\x2\x2\x54C"+
		"\x54D\x3\x2\x2\x2\x54D\x54F\x5\xEEx\x2\x54E\x54B\x3\x2\x2\x2\x54E\x54F"+
		"\x3\x2\x2\x2\x54F\x550\x3\x2\x2\x2\x550\x552\x5\x120\x91\x2\x551\x553"+
		"\x5\x1E\x10\x2\x552\x551\x3\x2\x2\x2\x552\x553\x3\x2\x2\x2\x553\x554\x3"+
		"\x2\x2\x2\x554\x555\a_\x2\x2\x555\x8F\x3\x2\x2\x2\x556\x557\a\xA5\x2\x2"+
		"\x557\x558\x5\x134\x9B\x2\x558\x55A\x5\xCCg\x2\x559\x55B\x5\x134\x9B\x2"+
		"\x55A\x559\x3\x2\x2\x2\x55A\x55B\x3\x2\x2\x2\x55B\x55C\x3\x2\x2\x2\x55C"+
		"\x55E\a)\x2\x2\x55D\x55F\x5\x134\x9B\x2\x55E\x55D\x3\x2\x2\x2\x55E\x55F"+
		"\x3\x2\x2\x2\x55F\x561\x3\x2\x2\x2\x560\x562\x5\xB8]\x2\x561\x560\x3\x2"+
		"\x2\x2\x561\x562\x3\x2\x2\x2\x562\x564\x3\x2\x2\x2\x563\x565\x5\x134\x9B"+
		"\x2\x564\x563\x3\x2\x2\x2\x564\x565\x3\x2\x2\x2\x565\x566\x3\x2\x2\x2"+
		"\x566\x568\a)\x2\x2\x567\x569\x5\x134\x9B\x2\x568\x567\x3\x2\x2\x2\x568"+
		"\x569\x3\x2\x2\x2\x569\x56A\x3\x2\x2\x2\x56A\x56B\x5\xB8]\x2\x56B\x91"+
		"\x3\x2\x2\x2\x56C\x56D\a\xA7\x2\x2\x56D\x56E\x5\x134\x9B\x2\x56E\x57D"+
		"\x5\xFA~\x2\x56F\x571\x5\x134\x9B\x2\x570\x56F\x3\x2\x2\x2\x570\x571\x3"+
		"\x2\x2\x2\x571\x572\x3\x2\x2\x2\x572\x574\a\xD4\x2\x2\x573\x575\x5\x134"+
		"\x9B\x2\x574\x573\x3\x2\x2\x2\x574\x575\x3\x2\x2\x2\x575\x57A\x3\x2\x2"+
		"\x2\x576\x578\x5\xE8u\x2\x577\x579\x5\x134\x9B\x2\x578\x577\x3\x2\x2\x2"+
		"\x578\x579\x3\x2\x2\x2\x579\x57B\x3\x2\x2\x2\x57A\x576\x3\x2\x2\x2\x57A"+
		"\x57B\x3\x2\x2\x2\x57B\x57C\x3\x2\x2\x2\x57C\x57E\a\xDB\x2\x2\x57D\x570"+
		"\x3\x2\x2\x2\x57D\x57E\x3\x2\x2\x2\x57E\x93\x3\x2\x2\x2\x57F\x580\a\xAA"+
		"\x2\x2\x580\x583\x5\x134\x9B\x2\x581\x582\a\x9D\x2\x2\x582\x584\x5\x134"+
		"\x9B\x2\x583\x581\x3\x2\x2\x2\x583\x584\x3\x2\x2\x2\x584\x585\x3\x2\x2"+
		"\x2\x585\x590\x5\x96L\x2\x586\x588\x5\x134\x9B\x2\x587\x586\x3\x2\x2\x2"+
		"\x587\x588\x3\x2\x2\x2\x588\x589\x3\x2\x2\x2\x589\x58B\a)\x2\x2\x58A\x58C"+
		"\x5\x134\x9B\x2\x58B\x58A\x3\x2\x2\x2\x58B\x58C\x3\x2\x2\x2\x58C\x58D"+
		"\x3\x2\x2\x2\x58D\x58F\x5\x96L\x2\x58E\x587\x3\x2\x2\x2\x58F\x592\x3\x2"+
		"\x2\x2\x590\x58E\x3\x2\x2\x2\x590\x591\x3\x2\x2\x2\x591\x95\x3\x2\x2\x2"+
		"\x592\x590\x3\x2\x2\x2\x593\x595\x5\xD8m\x2\x594\x596\x5\x134\x9B\x2\x595"+
		"\x594\x3\x2\x2\x2\x595\x596\x3\x2\x2\x2\x596\x597\x3\x2\x2\x2\x597\x599"+
		"\a\xD4\x2\x2\x598\x59A\x5\x134\x9B\x2\x599\x598\x3\x2\x2\x2\x599\x59A"+
		"\x3\x2\x2\x2\x59A\x59B\x3\x2\x2\x2\x59B\x59D\x5\xF4{\x2\x59C\x59E\x5\x134"+
		"\x9B\x2\x59D\x59C\x3\x2\x2\x2\x59D\x59E\x3\x2\x2\x2\x59E\x59F\x3\x2\x2"+
		"\x2\x59F\x5A3\a\xDB\x2\x2\x5A0\x5A1\x5\x134\x9B\x2\x5A1\x5A2\x5\xFC\x7F"+
		"\x2\x5A2\x5A4\x3\x2\x2\x2\x5A3\x5A0\x3\x2\x2\x2\x5A3\x5A4\x3\x2\x2\x2"+
		"\x5A4\x97\x3\x2\x2\x2\x5A5\x5A6\a\xAC\x2\x2\x5A6\x99\x3\x2\x2\x2\x5A7"+
		"\x5AD\a\xAD\x2\x2\x5A8\x5AB\x5\x134\x9B\x2\x5A9\x5AC\a\x8C\x2\x2\x5AA"+
		"\x5AC\x5\xB8]\x2\x5AB\x5A9\x3\x2\x2\x2\x5AB\x5AA\x3\x2\x2\x2\x5AC\x5AE"+
		"\x3\x2\x2\x2\x5AD\x5A8\x3\x2\x2\x2\x5AD\x5AE\x3\x2\x2\x2\x5AE\x9B\x3\x2"+
		"\x2\x2\x5AF\x5B0\a\xAE\x2\x2\x5B0\x9D\x3\x2\x2\x2\x5B1\x5B2\a\xAF\x2\x2"+
		"\x5B2\x5B3\x5\x134\x9B\x2\x5B3\x5B5\x5\xB8]\x2\x5B4\x5B6\x5\x134\x9B\x2"+
		"\x5B5\x5B4\x3\x2\x2\x2\x5B5\x5B6\x3\x2\x2\x2\x5B6\x5B7\x3\x2\x2\x2\x5B7"+
		"\x5B9\a\xD0\x2\x2\x5B8\x5BA\x5\x134\x9B\x2\x5B9\x5B8\x3\x2\x2\x2\x5B9"+
		"\x5BA\x3\x2\x2\x2\x5BA\x5BB\x3\x2\x2\x2\x5BB\x5BC\x5\xB8]\x2\x5BC\x9F"+
		"\x3\x2\x2\x2\x5BD\x5BE\a\xB8\x2\x2\x5BE\xA1\x3\x2\x2\x2\x5BF\x5C0\a\xB0"+
		"\x2\x2\x5C0\x5C1\x5\x134\x9B\x2\x5C1\x5C3\x5\xCCg\x2\x5C2\x5C4\x5\x134"+
		"\x9B\x2\x5C3\x5C2\x3\x2\x2\x2\x5C3\x5C4\x3\x2\x2\x2\x5C4\x5C5\x3\x2\x2"+
		"\x2\x5C5\x5C7\a)\x2\x2\x5C6\x5C8\x5\x134\x9B\x2\x5C7\x5C6\x3\x2\x2\x2"+
		"\x5C7\x5C8\x3\x2\x2\x2\x5C8\x5C9\x3\x2\x2\x2\x5C9\x5CA\x5\xB8]\x2\x5CA"+
		"\xA3\x3\x2\x2\x2\x5CB\x5CC\a\xB1\x2\x2\x5CC\x5CD\x5\x134\x9B\x2\x5CD\x5CE"+
		"\a\x41\x2\x2\x5CE\x5CF\x5\x134\x9B\x2\x5CF\x5D0\x5\xB8]\x2\x5D0\x5D4\x5"+
		"\x120\x91\x2\x5D1\x5D3\x5\xA8U\x2\x5D2\x5D1\x3\x2\x2\x2\x5D3\x5D6\x3\x2"+
		"\x2\x2\x5D4\x5D2\x3\x2\x2\x2\x5D4\x5D5\x3\x2\x2\x2\x5D5\x5D7\x3\x2\x2"+
		"\x2\x5D6\x5D4\x3\x2\x2\x2\x5D7\x5D8\a`\x2\x2\x5D8\xA5\x3\x2\x2\x2\x5D9"+
		"\x5DB\a|\x2\x2\x5DA\x5DC\x5\x134\x9B\x2\x5DB\x5DA\x3\x2\x2\x2\x5DB\x5DC"+
		"\x3\x2\x2\x2\x5DC\x5DD\x3\x2\x2\x2\x5DD\x5DF\x5\x100\x81\x2\x5DE\x5E0"+
		"\x5\x134\x9B\x2\x5DF\x5DE\x3\x2\x2\x2\x5DF\x5E0\x3\x2\x2\x2\x5E0\x5E1"+
		"\x3\x2\x2\x2\x5E1\x5E2\x5\xB8]\x2\x5E2\x5EB\x3\x2\x2\x2\x5E3\x5E4\x5\xB8"+
		"]\x2\x5E4\x5E5\x5\x134\x9B\x2\x5E5\x5E6\a\xBE\x2\x2\x5E6\x5E7\x5\x134"+
		"\x9B\x2\x5E7\x5E8\x5\xB8]\x2\x5E8\x5EB\x3\x2\x2\x2\x5E9\x5EB\x5\xB8]\x2"+
		"\x5EA\x5D9\x3\x2\x2\x2\x5EA\x5E3\x3\x2\x2\x2\x5EA\x5E9\x3\x2\x2\x2\x5EB"+
		"\xA7\x3\x2\x2\x2\x5EC\x5ED\a\x41\x2\x2\x5ED\x5EE\x5\x134\x9B\x2\x5EE\x5EF"+
		"\x5\xAAV\x2\x5EF\x5F1\x5\x120\x91\x2\x5F0\x5F2\x5\x1E\x10\x2\x5F1\x5F0"+
		"\x3\x2\x2\x2\x5F1\x5F2\x3\x2\x2\x2\x5F2\xA9\x3\x2\x2\x2\x5F3\x603\aY\x2"+
		"\x2\x5F4\x5FF\x5\xA6T\x2\x5F5\x5F7\x5\x134\x9B\x2\x5F6\x5F5\x3\x2\x2\x2"+
		"\x5F6\x5F7\x3\x2\x2\x2\x5F7\x5F8\x3\x2\x2\x2\x5F8\x5FA\a)\x2\x2\x5F9\x5FB"+
		"\x5\x134\x9B\x2\x5FA\x5F9\x3\x2\x2\x2\x5FA\x5FB\x3\x2\x2\x2\x5FB\x5FC"+
		"\x3\x2\x2\x2\x5FC\x5FE\x5\xA6T\x2\x5FD\x5F6\x3\x2\x2\x2\x5FE\x601\x3\x2"+
		"\x2\x2\x5FF\x5FD\x3\x2\x2\x2\x5FF\x600\x3\x2\x2\x2\x600\x603\x3\x2\x2"+
		"\x2\x601\x5FF\x3\x2\x2\x2\x602\x5F3\x3\x2\x2\x2\x602\x5F4\x3\x2\x2\x2"+
		"\x603\xAB\x3\x2\x2\x2\x604\x605\a\xB2\x2\x2\x605\x606\x5\x134\x9B\x2\x606"+
		"\x608\x5\xB8]\x2\x607\x609\x5\x134\x9B\x2\x608\x607\x3\x2\x2\x2\x608\x609"+
		"\x3\x2\x2\x2\x609\x60A\x3\x2\x2\x2\x60A\x60C\a\xD0\x2\x2\x60B\x60D\x5"+
		"\x134\x9B\x2\x60C\x60B\x3\x2\x2\x2\x60C\x60D\x3\x2\x2\x2\x60D\x60E\x3"+
		"\x2\x2\x2\x60E\x60F\x5\xB8]\x2\x60F\xAD\x3\x2\x2\x2\x610\x611\x5\x116"+
		"\x8C\x2\x611\x612\x5\x134\x9B\x2\x612\x614\x3\x2\x2\x2\x613\x610\x3\x2"+
		"\x2\x2\x613\x614\x3\x2\x2\x2\x614\x617\x3\x2\x2\x2\x615\x616\a\xB6\x2"+
		"\x2\x616\x618\x5\x134\x9B\x2\x617\x615\x3\x2\x2\x2\x617\x618\x3\x2\x2"+
		"\x2\x618\x619\x3\x2\x2\x2\x619\x61B\a\xBA\x2\x2\x61A\x61C\x5\x134\x9B"+
		"\x2\x61B\x61A\x3\x2\x2\x2\x61B\x61C\x3\x2\x2\x2\x61C\x61D\x3\x2\x2\x2"+
		"\x61D\x622\x5\xB0Y\x2\x61E\x620\x5\x134\x9B\x2\x61F\x61E\x3\x2\x2\x2\x61F"+
		"\x620\x3\x2\x2\x2\x620\x621\x3\x2\x2\x2\x621\x623\x5\xEEx\x2\x622\x61F"+
		"\x3\x2\x2\x2\x622\x623\x3\x2\x2\x2\x623\x624\x3\x2\x2\x2\x624\x626\x5"+
		"\x120\x91\x2\x625\x627\x5\x1E\x10\x2\x626\x625\x3\x2\x2\x2\x626\x627\x3"+
		"\x2\x2\x2\x627\x628\x3\x2\x2\x2\x628\x629\a\x61\x2\x2\x629\xAF\x3\x2\x2"+
		"\x2\x62A\x62B\x5\xFA~\x2\x62B\xB1\x3\x2\x2\x2\x62C\x62D\x5\x116\x8C\x2"+
		"\x62D\x62E\x5\x134\x9B\x2\x62E\x630\x3\x2\x2\x2\x62F\x62C\x3\x2\x2\x2"+
		"\x62F\x630\x3\x2\x2\x2\x630\x631\x3\x2\x2\x2\x631\x632\a\xC0\x2\x2\x632"+
		"\x633\x5\x134\x9B\x2\x633\x634\x5\xFA~\x2\x634\x638\x5\x120\x91\x2\x635"+
		"\x637\x5\xB4[\x2\x636\x635\x3\x2\x2\x2\x637\x63A\x3\x2\x2\x2\x638\x636"+
		"\x3\x2\x2\x2\x638\x639\x3\x2\x2\x2\x639\x63B\x3\x2\x2\x2\x63A\x638\x3"+
		"\x2\x2\x2\x63B\x63C\a\x62\x2\x2\x63C\xB3\x3\x2\x2\x2\x63D\x64C\x5\xFA"+
		"~\x2\x63E\x640\x5\x134\x9B\x2\x63F\x63E\x3\x2\x2\x2\x63F\x640\x3\x2\x2"+
		"\x2\x640\x641\x3\x2\x2\x2\x641\x646\a\xD4\x2\x2\x642\x644\x5\x134\x9B"+
		"\x2\x643\x642\x3\x2\x2\x2\x643\x644\x3\x2\x2\x2\x644\x645\x3\x2\x2\x2"+
		"\x645\x647\x5\xF4{\x2\x646\x643\x3\x2\x2\x2\x646\x647\x3\x2\x2\x2\x647"+
		"\x649\x3\x2\x2\x2\x648\x64A\x5\x134\x9B\x2\x649\x648\x3\x2\x2\x2\x649"+
		"\x64A\x3\x2\x2\x2\x64A\x64B\x3\x2\x2\x2\x64B\x64D\a\xDB\x2\x2\x64C\x63F"+
		"\x3\x2\x2\x2\x64C\x64D\x3\x2\x2\x2\x64D\x651\x3\x2\x2\x2\x64E\x64F\x5"+
		"\x134\x9B\x2\x64F\x650\x5\xFC\x7F\x2\x650\x652\x3\x2\x2\x2\x651\x64E\x3"+
		"\x2\x2\x2\x651\x652\x3\x2\x2\x2\x652\x653\x3\x2\x2\x2\x653\x654\x5\x120"+
		"\x91\x2\x654\xB5\x3\x2\x2\x2\x655\x656\a\xC2\x2\x2\x656\x657\x5\x134\x9B"+
		"\x2\x657\x667\x5\xCCg\x2\x658\x65A\x5\x134\x9B\x2\x659\x658\x3\x2\x2\x2"+
		"\x659\x65A\x3\x2\x2\x2\x65A\x65B\x3\x2\x2\x2\x65B\x65D\a)\x2\x2\x65C\x65E"+
		"\x5\x134\x9B\x2\x65D\x65C\x3\x2\x2\x2\x65D\x65E\x3\x2\x2\x2\x65E\x65F"+
		"\x3\x2\x2\x2\x65F\x665\x5\xB8]\x2\x660\x661\x5\x134\x9B\x2\x661\x662\a"+
		"\xBE\x2\x2\x662\x663\x5\x134\x9B\x2\x663\x664\x5\xB8]\x2\x664\x666\x3"+
		"\x2\x2\x2\x665\x660\x3\x2\x2\x2\x665\x666\x3\x2\x2\x2\x666\x668\x3\x2"+
		"\x2\x2\x667\x659\x3\x2\x2\x2\x667\x668\x3\x2\x2\x2\x668\xB7\x3\x2\x2\x2"+
		"\x669\x66A\b]\x1\x2\x66A\x66C\a\x8D\x2\x2\x66B\x66D\x5\x134\x9B\x2\x66C"+
		"\x66B\x3\x2\x2\x2\x66C\x66D\x3\x2\x2\x2\x66D\x66E\x3\x2\x2\x2\x66E\x697"+
		"\x5\xB8]\x15\x66F\x671\a\x34\x2\x2\x670\x672\x5\x134\x9B\x2\x671\x670"+
		"\x3\x2\x2\x2\x671\x672\x3\x2\x2\x2\x672\x673\x3\x2\x2\x2\x673\x697\x5"+
		"\xB8]\x12\x674\x676\x5\xF8}\x2\x675\x677\x5\x134\x9B\x2\x676\x675\x3\x2"+
		"\x2\x2\x676\x677\x3\x2\x2\x2\x677\x678\x3\x2\x2\x2\x678\x67A\a\xCD\x2"+
		"\x2\x679\x67B\x5\x134\x9B\x2\x67A\x679\x3\x2\x2\x2\x67A\x67B\x3\x2\x2"+
		"\x2\x67B\x67C\x3\x2\x2\x2\x67C\x67D\x5\xB8]\x11\x67D\x697\x3\x2\x2\x2"+
		"\x67E\x680\a\xD6\x2\x2\x67F\x681\x5\x134\x9B\x2\x680\x67F\x3\x2\x2\x2"+
		"\x680\x681\x3\x2\x2\x2\x681\x682\x3\x2\x2\x2\x682\x697\x5\xB8]\xF\x683"+
		"\x685\a\x8E\x2\x2\x684\x686\x5\x134\x9B\x2\x685\x684\x3\x2\x2\x2\x685"+
		"\x686\x3\x2\x2\x2\x686\x687\x3\x2\x2\x2\x687\x697\x5\xB8]\b\x688\x697"+
		"\x5\x10E\x88\x2\x689\x697\x5\xD8m\x2\x68A\x68C\a\xD4\x2\x2\x68B\x68D\x5"+
		"\x134\x9B\x2\x68C\x68B\x3\x2\x2\x2\x68C\x68D\x3\x2\x2\x2\x68D\x68E\x3"+
		"\x2\x2\x2\x68E\x690\x5\xB8]\x2\x68F\x691\x5\x134\x9B\x2\x690\x68F\x3\x2"+
		"\x2\x2\x690\x691\x3\x2\x2\x2\x691\x692\x3\x2\x2\x2\x692\x693\a\xDB\x2"+
		"\x2\x693\x697\x3\x2\x2\x2\x694\x697\x5\xBA^\x2\x695\x697\x5z>\x2\x696"+
		"\x669\x3\x2\x2\x2\x696\x66F\x3\x2\x2\x2\x696\x674\x3\x2\x2\x2\x696\x67E"+
		"\x3\x2\x2\x2\x696\x683\x3\x2\x2\x2\x696\x688\x3\x2\x2\x2\x696\x689\x3"+
		"\x2\x2\x2\x696\x68A\x3\x2\x2\x2\x696\x694\x3\x2\x2\x2\x696\x695\x3\x2"+
		"\x2\x2\x697\x706\x3\x2\x2\x2\x698\x69A\f\x10\x2\x2\x699\x69B\x5\x134\x9B"+
		"\x2\x69A\x699\x3\x2\x2\x2\x69A\x69B\x3\x2\x2\x2\x69B\x69C\x3\x2\x2\x2"+
		"\x69C\x69E\a\xDA\x2\x2\x69D\x69F\x5\x134\x9B\x2\x69E\x69D\x3\x2\x2\x2"+
		"\x69E\x69F\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x705\x5\xB8]\x11\x6A1"+
		"\x6A3\f\xE\x2\x2\x6A2\x6A4\x5\x134\x9B\x2\x6A3\x6A2\x3\x2\x2\x2\x6A3\x6A4"+
		"\x3\x2\x2\x2\x6A4\x6A5\x3\x2\x2\x2\x6A5\x6A7\t\f\x2\x2\x6A6\x6A8\x5\x134"+
		"\x9B\x2\x6A7\x6A6\x3\x2\x2\x2\x6A7\x6A8\x3\x2\x2\x2\x6A8\x6A9\x3\x2\x2"+
		"\x2\x6A9\x705\x5\xB8]\xF\x6AA\x6AC\f\r\x2\x2\x6AB\x6AD\x5\x134\x9B\x2"+
		"\x6AC\x6AB\x3\x2\x2\x2\x6AC\x6AD\x3\x2\x2\x2\x6AD\x6AE\x3\x2\x2\x2\x6AE"+
		"\x6B0\a\xCF\x2\x2\x6AF\x6B1\x5\x134\x9B\x2\x6B0\x6AF\x3\x2\x2\x2\x6B0"+
		"\x6B1\x3\x2\x2\x2\x6B1\x6B2\x3\x2\x2\x2\x6B2\x705\x5\xB8]\xE\x6B3\x6B5"+
		"\f\f\x2\x2\x6B4\x6B6\x5\x134\x9B\x2\x6B5\x6B4\x3\x2\x2\x2\x6B5\x6B6\x3"+
		"\x2\x2\x2\x6B6\x6B7\x3\x2\x2\x2\x6B7\x6B9\a\x8B\x2\x2\x6B8\x6BA\x5\x134"+
		"\x9B\x2\x6B9\x6B8\x3\x2\x2\x2\x6B9\x6BA\x3\x2\x2\x2\x6BA\x6BB\x3\x2\x2"+
		"\x2\x6BB\x705\x5\xB8]\r\x6BC\x6BE\f\v\x2\x2\x6BD\x6BF\x5\x134\x9B\x2\x6BE"+
		"\x6BD\x3\x2\x2\x2\x6BE\x6BF\x3\x2\x2\x2\x6BF\x6C0\x3\x2\x2\x2\x6C0\x6C2"+
		"\t\r\x2\x2\x6C1\x6C3\x5\x134\x9B\x2\x6C2\x6C1\x3\x2\x2\x2\x6C2\x6C3\x3"+
		"\x2\x2\x2\x6C3\x6C4\x3\x2\x2\x2\x6C4\x705\x5\xB8]\f\x6C5\x6C7\f\n\x2\x2"+
		"\x6C6\x6C8\x5\x134\x9B\x2\x6C7\x6C6\x3\x2\x2\x2\x6C7\x6C8\x3\x2\x2\x2"+
		"\x6C8\x6C9\x3\x2\x2\x2\x6C9\x6CB\a\x32\x2\x2\x6CA\x6CC\x5\x134\x9B\x2"+
		"\x6CB\x6CA\x3\x2\x2\x2\x6CB\x6CC\x3\x2\x2\x2\x6CC\x6CD\x3\x2\x2\x2\x6CD"+
		"\x705\x5\xB8]\v\x6CE\x6D0\f\t\x2\x2\x6CF\x6D1\x5\x134\x9B\x2\x6D0\x6CF"+
		"\x3\x2\x2\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1\x6D2\x3\x2\x2\x2\x6D2\x6D4\t\xE"+
		"\x2\x2\x6D3\x6D5\x5\x134\x9B\x2\x6D4\x6D3\x3\x2\x2\x2\x6D4\x6D5\x3\x2"+
		"\x2\x2\x6D5\x6D6\x3\x2\x2\x2\x6D6\x705\x5\xB8]\n\x6D7\x6D9\f\a\x2\x2\x6D8"+
		"\x6DA\x5\x134\x9B\x2\x6D9\x6D8\x3\x2\x2\x2\x6D9\x6DA\x3\x2\x2\x2\x6DA"+
		"\x6DB\x3\x2\x2\x2\x6DB\x6DD\a\x36\x2\x2\x6DC\x6DE\x5\x134\x9B\x2\x6DD"+
		"\x6DC\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6DF\x3\x2\x2\x2\x6DF\x705"+
		"\x5\xB8]\b\x6E0\x6E2\f\x6\x2\x2\x6E1\x6E3\x5\x134\x9B\x2\x6E2\x6E1\x3"+
		"\x2\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6E4\x3\x2\x2\x2\x6E4\x6E6\a\x9A"+
		"\x2\x2\x6E5\x6E7\x5\x134\x9B\x2\x6E6\x6E5\x3\x2\x2\x2\x6E6\x6E7\x3\x2"+
		"\x2\x2\x6E7\x6E8\x3\x2\x2\x2\x6E8\x705\x5\xB8]\a\x6E9\x6EB\f\x5\x2\x2"+
		"\x6EA\x6EC\x5\x134\x9B\x2\x6EB\x6EA\x3\x2\x2\x2\x6EB\x6EC\x3\x2\x2\x2"+
		"\x6EC\x6ED\x3\x2\x2\x2\x6ED\x6EF\a\xCC\x2\x2\x6EE\x6F0\x5\x134\x9B\x2"+
		"\x6EF\x6EE\x3\x2\x2\x2\x6EF\x6F0\x3\x2\x2\x2\x6F0\x6F1\x3\x2\x2\x2\x6F1"+
		"\x705\x5\xB8]\x6\x6F2\x6F4\f\x4\x2\x2\x6F3\x6F5\x5\x134\x9B\x2\x6F4\x6F3"+
		"\x3\x2\x2\x2\x6F4\x6F5\x3\x2\x2\x2\x6F5\x6F6\x3\x2\x2\x2\x6F6\x6F8\a\x66"+
		"\x2\x2\x6F7\x6F9\x5\x134\x9B\x2\x6F8\x6F7\x3\x2\x2\x2\x6F8\x6F9\x3\x2"+
		"\x2\x2\x6F9\x6FA\x3\x2\x2\x2\x6FA\x705\x5\xB8]\x5\x6FB\x6FD\f\x3\x2\x2"+
		"\x6FC\x6FE\x5\x134\x9B\x2\x6FD\x6FC\x3\x2\x2\x2\x6FD\x6FE\x3\x2\x2\x2"+
		"\x6FE\x6FF\x3\x2\x2\x2\x6FF\x701\ax\x2\x2\x700\x702\x5\x134\x9B\x2\x701"+
		"\x700\x3\x2\x2\x2\x701\x702\x3\x2\x2\x2\x702\x703\x3\x2\x2\x2\x703\x705"+
		"\x5\xB8]\x4\x704\x698\x3\x2\x2\x2\x704\x6A1\x3\x2\x2\x2\x704\x6AA\x3\x2"+
		"\x2\x2\x704\x6B3\x3\x2\x2\x2\x704\x6BC\x3\x2\x2\x2\x704\x6C5\x3\x2\x2"+
		"\x2\x704\x6CE\x3\x2\x2\x2\x704\x6D7\x3\x2\x2\x2\x704\x6E0\x3\x2\x2\x2"+
		"\x704\x6E9\x3\x2\x2\x2\x704\x6F2\x3\x2\x2\x2\x704\x6FB\x3\x2\x2\x2\x705"+
		"\x708\x3\x2\x2\x2\x706\x704\x3\x2\x2\x2\x706\x707\x3\x2\x2\x2\x707\xB9"+
		"\x3\x2\x2\x2\x708\x706\x3\x2\x2\x2\x709\x70A\a\xC1\x2\x2\x70A\x70B\x5"+
		"\x134\x9B\x2\x70B\x711\x5\xB8]\x2\x70C\x70D\x5\x134\x9B\x2\x70D\x70E\a"+
		"|\x2\x2\x70E\x70F\x5\x134\x9B\x2\x70F\x710\x5\x112\x8A\x2\x710\x712\x3"+
		"\x2\x2\x2\x711\x70C\x3\x2\x2\x2\x711\x712\x3\x2\x2\x2\x712\xBB\x3\x2\x2"+
		"\x2\x713\x717\aU\x2\x2\x714\x717\a\xB6\x2\x2\x715\x717\x5\x116\x8C\x2"+
		"\x716\x713\x3\x2\x2\x2\x716\x714\x3\x2\x2\x2\x716\x715\x3\x2\x2\x2\x717"+
		"\x718\x3\x2\x2\x2\x718\x71B\x5\x134\x9B\x2\x719\x71A\a\xCA\x2\x2\x71A"+
		"\x71C\x5\x134\x9B\x2\x71B\x719\x3\x2\x2\x2\x71B\x71C\x3\x2\x2\x2\x71C"+
		"\x71D\x3\x2\x2\x2\x71D\x71E\x5\xBE`\x2\x71E\xBD\x3\x2\x2\x2\x71F\x72A"+
		"\x5\xC0\x61\x2\x720\x722\x5\x134\x9B\x2\x721\x720\x3\x2\x2\x2\x721\x722"+
		"\x3\x2\x2\x2\x722\x723\x3\x2\x2\x2\x723\x725\a)\x2\x2\x724\x726\x5\x134"+
		"\x9B\x2\x725\x724\x3\x2\x2\x2\x725\x726\x3\x2\x2\x2\x726\x727\x3\x2\x2"+
		"\x2\x727\x729\x5\xC0\x61\x2\x728\x721\x3\x2\x2\x2\x729\x72C\x3\x2\x2\x2"+
		"\x72A\x728\x3\x2\x2\x2\x72A\x72B\x3\x2\x2\x2\x72B\xBF\x3\x2\x2\x2\x72C"+
		"\x72A\x3\x2\x2\x2\x72D\x73F\x5\xFA~\x2\x72E\x730\x5\x134\x9B\x2\x72F\x72E"+
		"\x3\x2\x2\x2\x72F\x730\x3\x2\x2\x2\x730\x731\x3\x2\x2\x2\x731\x733\a\xD4"+
		"\x2\x2\x732\x734\x5\x134\x9B\x2\x733\x732\x3\x2\x2\x2\x733\x734\x3\x2"+
		"\x2\x2\x734\x739\x3\x2\x2\x2\x735\x737\x5\xF4{\x2\x736\x738\x5\x134\x9B"+
		"\x2\x737\x736\x3\x2\x2\x2\x737\x738\x3\x2\x2\x2\x738\x73A\x3\x2\x2\x2"+
		"\x739\x735\x3\x2\x2\x2\x739\x73A\x3\x2\x2\x2\x73A\x73B\x3\x2\x2\x2\x73B"+
		"\x73D\a\xDB\x2\x2\x73C\x73E\x5\x134\x9B\x2\x73D\x73C\x3\x2\x2\x2\x73D"+
		"\x73E\x3\x2\x2\x2\x73E\x740\x3\x2\x2\x2\x73F\x72F\x3\x2\x2\x2\x73F\x740"+
		"\x3\x2\x2\x2\x740\x742\x3\x2\x2\x2\x741\x743\x5\x114\x8B\x2\x742\x741"+
		"\x3\x2\x2\x2\x742\x743\x3\x2\x2\x2\x743\x747\x3\x2\x2\x2\x744\x745\x5"+
		"\x134\x9B\x2\x745\x746\x5\xFC\x7F\x2\x746\x748\x3\x2\x2\x2\x747\x744\x3"+
		"\x2\x2\x2\x747\x748\x3\x2\x2\x2\x748\xC1\x3\x2\x2\x2\x749\x74A\a\xC7\x2"+
		"\x2\x74A\x74B\x5\x134\x9B\x2\x74B\x74C\x5\xB8]\x2\x74C\x74E\x5\x120\x91"+
		"\x2\x74D\x74F\x5\x1E\x10\x2\x74E\x74D\x3\x2\x2\x2\x74E\x74F\x3\x2\x2\x2"+
		"\x74F\x750\x3\x2\x2\x2\x750\x751\a\xC6\x2\x2\x751\xC3\x3\x2\x2\x2\x752"+
		"\x753\a\xC8\x2\x2\x753\x754\x5\x134\x9B\x2\x754\x756\x5\xCCg\x2\x755\x757"+
		"\x5\x134\x9B\x2\x756\x755\x3\x2\x2\x2\x756\x757\x3\x2\x2\x2\x757\x758"+
		"\x3\x2\x2\x2\x758\x75A\a)\x2\x2\x759\x75B\x5\x134\x9B\x2\x75A\x759\x3"+
		"\x2\x2\x2\x75A\x75B\x3\x2\x2\x2\x75B\x75C\x3\x2\x2\x2\x75C\x75D\x5\xB8"+
		"]\x2\x75D\xC5\x3\x2\x2\x2\x75E\x75F\a\xC9\x2\x2\x75F\x760\x5\x134\x9B"+
		"\x2\x760\x761\x5\xC8\x65\x2\x761\x763\x5\x120\x91\x2\x762\x764\x5\x1E"+
		"\x10\x2\x763\x762\x3\x2\x2\x2\x763\x764\x3\x2\x2\x2\x764\x765\x3\x2\x2"+
		"\x2\x765\x766\a\x63\x2\x2\x766\xC7\x3\x2\x2\x2\x767\x768\x5\xB8]\x2\x768"+
		"\xC9\x3\x2\x2\x2\x769\x76A\a\xCB\x2\x2\x76A\x76B\x5\x134\x9B\x2\x76B\x76D"+
		"\x5\xCCg\x2\x76C\x76E\x5\x134\x9B\x2\x76D\x76C\x3\x2\x2\x2\x76D\x76E\x3"+
		"\x2\x2\x2\x76E\x76F\x3\x2\x2\x2\x76F\x774\a)\x2\x2\x770\x772\x5\x134\x9B"+
		"\x2\x771\x770\x3\x2\x2\x2\x771\x772\x3\x2\x2\x2\x772\x773\x3\x2\x2\x2"+
		"\x773\x775\x5\x84\x43\x2\x774\x771\x3\x2\x2\x2\x774\x775\x3\x2\x2\x2\x775"+
		"\xCB\x3\x2\x2\x2\x776\x778\a.\x2\x2\x777\x776\x3\x2\x2\x2\x777\x778\x3"+
		"\x2\x2\x2\x778\x779\x3\x2\x2\x2\x779\x77A\x5\xB8]\x2\x77A\xCD\x3\x2\x2"+
		"\x2\x77B\x77C\a@\x2\x2\x77C\x77D\x5\x134\x9B\x2\x77D\x77E\x5\xD0i\x2\x77E"+
		"\xCF\x3\x2\x2\x2\x77F\x781\x5\xD8m\x2\x780\x77F\x3\x2\x2\x2\x780\x781"+
		"\x3\x2\x2\x2\x781\x782\x3\x2\x2\x2\x782\x783\a-\x2\x2\x783\x785\x5\xFA"+
		"~\x2\x784\x786\x5\x114\x8B\x2\x785\x784\x3\x2\x2\x2\x785\x786\x3\x2\x2"+
		"\x2\x786\x794\x3\x2\x2\x2\x787\x789\x5\x134\x9B\x2\x788\x787\x3\x2\x2"+
		"\x2\x788\x789\x3\x2\x2\x2\x789\x78A\x3\x2\x2\x2\x78A\x78C\a\xD4\x2\x2"+
		"\x78B\x78D\x5\x134\x9B\x2\x78C\x78B\x3\x2\x2\x2\x78C\x78D\x3\x2\x2\x2"+
		"\x78D\x78E\x3\x2\x2\x2\x78E\x790\x5\xE8u\x2\x78F\x791\x5\x134\x9B\x2\x790"+
		"\x78F\x3\x2\x2\x2\x790\x791\x3\x2\x2\x2\x791\x792\x3\x2\x2\x2\x792\x793"+
		"\a\xDB\x2\x2\x793\x795\x3\x2\x2\x2\x794\x788\x3\x2\x2\x2\x794\x795\x3"+
		"\x2\x2\x2\x795\x79F\x3\x2\x2\x2\x796\x798\x5\x134\x9B\x2\x797\x796\x3"+
		"\x2\x2\x2\x797\x798\x3\x2\x2\x2\x798\x799\x3\x2\x2\x2\x799\x79A\a\xD4"+
		"\x2\x2\x79A\x79B\x5\xF4{\x2\x79B\x79C\a\xDB\x2\x2\x79C\x79E\x3\x2\x2\x2"+
		"\x79D\x797\x3\x2\x2\x2\x79E\x7A1\x3\x2\x2\x2\x79F\x79D\x3\x2\x2\x2\x79F"+
		"\x7A0\x3\x2\x2\x2\x7A0\x7C2\x3\x2\x2\x2\x7A1\x79F\x3\x2\x2\x2\x7A2\x7A4"+
		"\x5\xFA~\x2\x7A3\x7A5\x5\x114\x8B\x2\x7A4\x7A3\x3\x2\x2\x2\x7A4\x7A5\x3"+
		"\x2\x2\x2\x7A5\x7B3\x3\x2\x2\x2\x7A6\x7A8\x5\x134\x9B\x2\x7A7\x7A6\x3"+
		"\x2\x2\x2\x7A7\x7A8\x3\x2\x2\x2\x7A8\x7A9\x3\x2\x2\x2\x7A9\x7AB\a\xD4"+
		"\x2\x2\x7AA\x7AC\x5\x134\x9B\x2\x7AB\x7AA\x3\x2\x2\x2\x7AB\x7AC\x3\x2"+
		"\x2\x2\x7AC\x7AD\x3\x2\x2\x2\x7AD\x7AF\x5\xE8u\x2\x7AE\x7B0\x5\x134\x9B"+
		"\x2\x7AF\x7AE\x3\x2\x2\x2\x7AF\x7B0\x3\x2\x2\x2\x7B0\x7B1\x3\x2\x2\x2"+
		"\x7B1\x7B2\a\xDB\x2\x2\x7B2\x7B4\x3\x2\x2\x2\x7B3\x7A7\x3\x2\x2\x2\x7B3"+
		"\x7B4\x3\x2\x2\x2\x7B4\x7BE\x3\x2\x2\x2\x7B5\x7B7\x5\x134\x9B\x2\x7B6"+
		"\x7B5\x3\x2\x2\x2\x7B6\x7B7\x3\x2\x2\x2\x7B7\x7B8\x3\x2\x2\x2\x7B8\x7B9"+
		"\a\xD4\x2\x2\x7B9\x7BA\x5\xF4{\x2\x7BA\x7BB\a\xDB\x2\x2\x7BB\x7BD\x3\x2"+
		"\x2\x2\x7BC\x7B6\x3\x2\x2\x2\x7BD\x7C0\x3\x2\x2\x2\x7BE\x7BC\x3\x2\x2"+
		"\x2\x7BE\x7BF\x3\x2\x2\x2\x7BF\x7C2\x3\x2\x2\x2\x7C0\x7BE\x3\x2\x2\x2"+
		"\x7C1\x780\x3\x2\x2\x2\x7C1\x7A2\x3\x2\x2\x2\x7C2\xD1\x3\x2\x2\x2\x7C3"+
		"\x7C6\x5\xD4k\x2\x7C4\x7C6\x5\xD6l\x2\x7C5\x7C3\x3\x2\x2\x2\x7C5\x7C4"+
		"\x3\x2\x2\x2\x7C6\xD3\x3\x2\x2\x2\x7C7\x7C9\x5\xD8m\x2\x7C8\x7C7\x3\x2"+
		"\x2\x2\x7C8\x7C9\x3\x2\x2\x2\x7C9\x7CB\x3\x2\x2\x2\x7CA\x7CC\x5\x134\x9B"+
		"\x2\x7CB\x7CA\x3\x2\x2\x2\x7CB\x7CC\x3\x2\x2\x2\x7CC\x7CD\x3\x2\x2\x2"+
		"\x7CD\x7CF\a-\x2\x2\x7CE\x7D0\x5\x134\x9B\x2\x7CF\x7CE\x3\x2\x2\x2\x7CF"+
		"\x7D0\x3\x2\x2\x2\x7D0\x7D1\x3\x2\x2\x2\x7D1\x7D3\x5\xF8}\x2\x7D2\x7D4"+
		"\x5\x114\x8B\x2\x7D3\x7D2\x3\x2\x2\x2\x7D3\x7D4\x3\x2\x2\x2\x7D4\x7D8"+
		"\x3\x2\x2\x2\x7D5\x7D6\x5\x134\x9B\x2\x7D6\x7D7\x5\xE8u\x2\x7D7\x7D9\x3"+
		"\x2\x2\x2\x7D8\x7D5\x3\x2\x2\x2\x7D8\x7D9\x3\x2\x2\x2\x7D9\x7DE\x3\x2"+
		"\x2\x2\x7DA\x7DC\x5\x134\x9B\x2\x7DB\x7DA\x3\x2\x2\x2\x7DB\x7DC\x3\x2"+
		"\x2\x2\x7DC\x7DD\x3\x2\x2\x2\x7DD\x7DF\x5\xECw\x2\x7DE\x7DB\x3\x2\x2\x2"+
		"\x7DE\x7DF\x3\x2\x2\x2\x7DF\x7E9\x3\x2\x2\x2\x7E0\x7E2\x5\x134\x9B\x2"+
		"\x7E1\x7E0\x3\x2\x2\x2\x7E1\x7E2\x3\x2\x2\x2\x7E2\x7E3\x3\x2\x2\x2\x7E3"+
		"\x7E4\a\xD4\x2\x2\x7E4\x7E5\x5\xF4{\x2\x7E5\x7E6\a\xDB\x2\x2\x7E6\x7E8"+
		"\x3\x2\x2\x2\x7E7\x7E1\x3\x2\x2\x2\x7E8\x7EB\x3\x2\x2\x2\x7E9\x7E7\x3"+
		"\x2\x2\x2\x7E9\x7EA\x3\x2\x2\x2\x7EA\xD5\x3\x2\x2\x2\x7EB\x7E9\x3\x2\x2"+
		"\x2\x7EC\x7F0\x5\xFA~\x2\x7ED\x7EE\x5\x134\x9B\x2\x7EE\x7EF\x5\xE8u\x2"+
		"\x7EF\x7F1\x3\x2\x2\x2\x7F0\x7ED\x3\x2\x2\x2\x7F0\x7F1\x3\x2\x2\x2\x7F1"+
		"\x7FB\x3\x2\x2\x2\x7F2\x7F4\x5\x134\x9B\x2\x7F3\x7F2\x3\x2\x2\x2\x7F3"+
		"\x7F4\x3\x2\x2\x2\x7F4\x7F5\x3\x2\x2\x2\x7F5\x7F6\a\xD4\x2\x2\x7F6\x7F7"+
		"\x5\xF4{\x2\x7F7\x7F8\a\xDB\x2\x2\x7F8\x7FA\x3\x2\x2\x2\x7F9\x7F3\x3\x2"+
		"\x2\x2\x7FA\x7FD\x3\x2\x2\x2\x7FB\x7F9\x3\x2\x2\x2\x7FB\x7FC\x3\x2\x2"+
		"\x2\x7FC\xD7\x3\x2\x2\x2\x7FD\x7FB\x3\x2\x2\x2\x7FE\x803\x5\xE2r\x2\x7FF"+
		"\x803\x5\xDAn\x2\x800\x803\x5\xDCo\x2\x801\x803\x5\xE6t\x2\x802\x7FE\x3"+
		"\x2\x2\x2\x802\x7FF\x3\x2\x2\x2\x802\x800\x3\x2\x2\x2\x802\x801\x3\x2"+
		"\x2\x2\x803\xD9\x3\x2\x2\x2\x804\x806\x5\xFA~\x2\x805\x807\x5\x114\x8B"+
		"\x2\x806\x805\x3\x2\x2\x2\x806\x807\x3\x2\x2\x2\x807\x80C\x3\x2\x2\x2"+
		"\x808\x80A\x5\x134\x9B\x2\x809\x808\x3\x2\x2\x2\x809\x80A\x3\x2\x2\x2"+
		"\x80A\x80B\x3\x2\x2\x2\x80B\x80D\x5\xECw\x2\x80C\x809\x3\x2\x2\x2\x80C"+
		"\x80D\x3\x2\x2\x2\x80D\x817\x3\x2\x2\x2\x80E\x810\x5\x134\x9B\x2\x80F"+
		"\x80E\x3\x2\x2\x2\x80F\x810\x3\x2\x2\x2\x810\x811\x3\x2\x2\x2\x811\x812"+
		"\a\xD4\x2\x2\x812\x813\x5\xF4{\x2\x813\x814\a\xDB\x2\x2\x814\x816\x3\x2"+
		"\x2\x2\x815\x80F\x3\x2\x2\x2\x816\x819\x3\x2\x2\x2\x817\x815\x3\x2\x2"+
		"\x2\x817\x818\x3\x2\x2\x2\x818\xDB\x3\x2\x2\x2\x819\x817\x3\x2\x2\x2\x81A"+
		"\x81D\x5\xFA~\x2\x81B\x81D\x5\xFE\x80\x2\x81C\x81A\x3\x2\x2\x2\x81C\x81B"+
		"\x3\x2\x2\x2\x81D\x81F\x3\x2\x2\x2\x81E\x820\x5\x114\x8B\x2\x81F\x81E"+
		"\x3\x2\x2\x2\x81F\x820\x3\x2\x2\x2\x820\x822\x3\x2\x2\x2\x821\x823\x5"+
		"\x134\x9B\x2\x822\x821\x3\x2\x2\x2\x822\x823\x3\x2\x2\x2\x823\x824\x3"+
		"\x2\x2\x2\x824\x826\a\xD4\x2\x2\x825\x827\x5\x134\x9B\x2\x826\x825\x3"+
		"\x2\x2\x2\x826\x827\x3\x2\x2\x2\x827\x82C\x3\x2\x2\x2\x828\x82A\x5\xE8"+
		"u\x2\x829\x82B\x5\x134\x9B\x2\x82A\x829\x3\x2\x2\x2\x82A\x82B\x3\x2\x2"+
		"\x2\x82B\x82D\x3\x2\x2\x2\x82C\x828\x3\x2\x2\x2\x82C\x82D\x3\x2\x2\x2"+
		"\x82D\x82E\x3\x2\x2\x2\x82E\x833\a\xDB\x2\x2\x82F\x831\x5\x134\x9B\x2"+
		"\x830\x82F\x3\x2\x2\x2\x830\x831\x3\x2\x2\x2\x831\x832\x3\x2\x2\x2\x832"+
		"\x834\x5\xECw\x2\x833\x830\x3\x2\x2\x2\x833\x834\x3\x2\x2\x2\x834\x83E"+
		"\x3\x2\x2\x2\x835\x837\x5\x134\x9B\x2\x836\x835\x3\x2\x2\x2\x836\x837"+
		"\x3\x2\x2\x2\x837\x838\x3\x2\x2\x2\x838\x839\a\xD4\x2\x2\x839\x83A\x5"+
		"\xF4{\x2\x83A\x83B\a\xDB\x2\x2\x83B\x83D\x3\x2\x2\x2\x83C\x836\x3\x2\x2"+
		"\x2\x83D\x840\x3\x2\x2\x2\x83E\x83C\x3\x2\x2\x2\x83E\x83F\x3\x2\x2\x2"+
		"\x83F\xDD\x3\x2\x2\x2\x840\x83E\x3\x2\x2\x2\x841\x843\x5\xF8}\x2\x842"+
		"\x844\x5\x114\x8B\x2\x843\x842\x3\x2\x2\x2\x843\x844\x3\x2\x2\x2\x844"+
		"\x849\x3\x2\x2\x2\x845\x847\x5\x134\x9B\x2\x846\x845\x3\x2\x2\x2\x846"+
		"\x847\x3\x2\x2\x2\x847\x848\x3\x2\x2\x2\x848\x84A\x5\xECw\x2\x849\x846"+
		"\x3\x2\x2\x2\x849\x84A\x3\x2\x2\x2\x84A\x854\x3\x2\x2\x2\x84B\x84D\x5"+
		"\x134\x9B\x2\x84C\x84B\x3\x2\x2\x2\x84C\x84D\x3\x2\x2\x2\x84D\x84E\x3"+
		"\x2\x2\x2\x84E\x84F\a\xD4\x2\x2\x84F\x850\x5\xF4{\x2\x850\x851\a\xDB\x2"+
		"\x2\x851\x853\x3\x2\x2\x2\x852\x84C\x3\x2\x2\x2\x853\x856\x3\x2\x2\x2"+
		"\x854\x852\x3\x2\x2\x2\x854\x855\x3\x2\x2\x2\x855\xDF\x3\x2\x2\x2\x856"+
		"\x854\x3\x2\x2\x2\x857\x85A\x5\xF8}\x2\x858\x85A\x5\xFE\x80\x2\x859\x857"+
		"\x3\x2\x2\x2\x859\x858\x3\x2\x2\x2\x85A\x85C\x3\x2\x2\x2\x85B\x85D\x5"+
		"\x114\x8B\x2\x85C\x85B\x3\x2\x2\x2\x85C\x85D\x3\x2\x2\x2\x85D\x85F\x3"+
		"\x2\x2\x2\x85E\x860\x5\x134\x9B\x2\x85F\x85E\x3\x2\x2\x2\x85F\x860\x3"+
		"\x2\x2\x2\x860\x861\x3\x2\x2\x2\x861\x863\a\xD4\x2\x2\x862\x864\x5\x134"+
		"\x9B\x2\x863\x862\x3\x2\x2\x2\x863\x864\x3\x2\x2\x2\x864\x869\x3\x2\x2"+
		"\x2\x865\x867\x5\xE8u\x2\x866\x868\x5\x134\x9B\x2\x867\x866\x3\x2\x2\x2"+
		"\x867\x868\x3\x2\x2\x2\x868\x86A\x3\x2\x2\x2\x869\x865\x3\x2\x2\x2\x869"+
		"\x86A\x3\x2\x2\x2\x86A\x86B\x3\x2\x2\x2\x86B\x870\a\xDB\x2\x2\x86C\x86E"+
		"\x5\x134\x9B\x2\x86D\x86C\x3\x2\x2\x2\x86D\x86E\x3\x2\x2\x2\x86E\x86F"+
		"\x3\x2\x2\x2\x86F\x871\x5\xECw\x2\x870\x86D\x3\x2\x2\x2\x870\x871\x3\x2"+
		"\x2\x2\x871\x87B\x3\x2\x2\x2\x872\x874\x5\x134\x9B\x2\x873\x872\x3\x2"+
		"\x2\x2\x873\x874\x3\x2\x2\x2\x874\x875\x3\x2\x2\x2\x875\x876\a\xD4\x2"+
		"\x2\x876\x877\x5\xF4{\x2\x877\x878\a\xDB\x2\x2\x878\x87A\x3\x2\x2\x2\x879"+
		"\x873\x3\x2\x2\x2\x87A\x87D\x3\x2\x2\x2\x87B\x879\x3\x2\x2\x2\x87B\x87C"+
		"\x3\x2\x2\x2\x87C\xE1\x3\x2\x2\x2\x87D\x87B\x3\x2\x2\x2\x87E\x881\x5\xDA"+
		"n\x2\x87F\x881\x5\xDCo\x2\x880\x87E\x3\x2\x2\x2\x880\x87F\x3\x2\x2\x2"+
		"\x880\x881\x3\x2\x2\x2\x881\x886\x3\x2\x2\x2\x882\x884\x5\xE4s\x2\x883"+
		"\x885\x5\x134\x9B\x2\x884\x883\x3\x2\x2\x2\x884\x885\x3\x2\x2\x2\x885"+
		"\x887\x3\x2\x2\x2\x886\x882\x3\x2\x2\x2\x887\x888\x3\x2\x2\x2\x888\x886"+
		"\x3\x2\x2\x2\x888\x889\x3\x2\x2\x2\x889\x88E\x3\x2\x2\x2\x88A\x88C\x5"+
		"\x134\x9B\x2\x88B\x88A\x3\x2\x2\x2\x88B\x88C\x3\x2\x2\x2\x88C\x88D\x3"+
		"\x2\x2\x2\x88D\x88F\x5\xECw\x2\x88E\x88B\x3\x2\x2\x2\x88E\x88F\x3\x2\x2"+
		"\x2\x88F\x899\x3\x2\x2\x2\x890\x892\x5\x134\x9B\x2\x891\x890\x3\x2\x2"+
		"\x2\x891\x892\x3\x2\x2\x2\x892\x893\x3\x2\x2\x2\x893\x894\a\xD4\x2\x2"+
		"\x894\x895\x5\xF4{\x2\x895\x896\a\xDB\x2\x2\x896\x898\x3\x2\x2\x2\x897"+
		"\x891\x3\x2\x2\x2\x898\x89B\x3\x2\x2\x2\x899\x897\x3\x2\x2\x2\x899\x89A"+
		"\x3\x2\x2\x2\x89A\xE3\x3\x2\x2\x2\x89B\x899\x3\x2\x2\x2\x89C\x89E\t\xF"+
		"\x2\x2\x89D\x89F\x5\x134\x9B\x2\x89E\x89D\x3\x2\x2\x2\x89E\x89F\x3\x2"+
		"\x2\x2\x89F\x8A2\x3\x2\x2\x2\x8A0\x8A3\x5\xDEp\x2\x8A1\x8A3\x5\xE0q\x2"+
		"\x8A2\x8A0\x3\x2\x2\x2\x8A2\x8A1\x3\x2\x2\x2\x8A3\xE5\x3\x2\x2\x2\x8A4"+
		"\x8A6\x5\x134\x9B\x2\x8A5\x8A4\x3\x2\x2\x2\x8A5\x8A6\x3\x2\x2\x2\x8A6"+
		"\x8A7\x3\x2\x2\x2\x8A7\x8A8\x5\xECw\x2\x8A8\xE7\x3\x2\x2\x2\x8A9\x8AB"+
		"\x5\xEAv\x2\x8AA\x8A9\x3\x2\x2\x2\x8AA\x8AB\x3\x2\x2\x2\x8AB\x8AD\x3\x2"+
		"\x2\x2\x8AC\x8AE\x5\x134\x9B\x2\x8AD\x8AC\x3\x2\x2\x2\x8AD\x8AE\x3\x2"+
		"\x2\x2\x8AE\x8AF\x3\x2\x2\x2\x8AF\x8B1\t\n\x2\x2\x8B0\x8B2\x5\x134\x9B"+
		"\x2\x8B1\x8B0\x3\x2\x2\x2\x8B1\x8B2\x3\x2\x2\x2\x8B2\x8B4\x3\x2\x2\x2"+
		"\x8B3\x8AA\x3\x2\x2\x2\x8B4\x8B7\x3\x2\x2\x2\x8B5\x8B3\x3\x2\x2\x2\x8B5"+
		"\x8B6\x3\x2\x2\x2\x8B6\x8B8\x3\x2\x2\x2\x8B7\x8B5\x3\x2\x2\x2\x8B8\x8C5"+
		"\x5\xEAv\x2\x8B9\x8BB\x5\x134\x9B\x2\x8BA\x8B9\x3\x2\x2\x2\x8BA\x8BB\x3"+
		"\x2\x2\x2\x8BB\x8BC\x3\x2\x2\x2\x8BC\x8BE\t\n\x2\x2\x8BD\x8BF\x5\x134"+
		"\x9B\x2\x8BE\x8BD\x3\x2\x2\x2\x8BE\x8BF\x3\x2\x2\x2\x8BF\x8C1\x3\x2\x2"+
		"\x2\x8C0\x8C2\x5\xEAv\x2\x8C1\x8C0\x3\x2\x2\x2\x8C1\x8C2\x3\x2\x2\x2\x8C2"+
		"\x8C4\x3\x2\x2\x2\x8C3\x8BA\x3\x2\x2\x2\x8C4\x8C7\x3\x2\x2\x2\x8C5\x8C3"+
		"\x3\x2\x2\x2\x8C5\x8C6\x3\x2\x2\x2\x8C6\xE9\x3\x2\x2\x2\x8C7\x8C5\x3\x2"+
		"\x2\x2\x8C8\x8CA\a\xD4\x2\x2\x8C9\x8C8\x3\x2\x2\x2\x8C9\x8CA\x3\x2\x2"+
		"\x2\x8CA\x8CD\x3\x2\x2\x2\x8CB\x8CC\t\x10\x2\x2\x8CC\x8CE\x5\x134\x9B"+
		"\x2\x8CD\x8CB\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE\x8D0\x3\x2\x2\x2"+
		"\x8CF\x8D1\a\xDB\x2\x2\x8D0\x8CF\x3\x2\x2\x2\x8D0\x8D1\x3\x2\x2\x2\x8D1"+
		"\x8D2\x3\x2\x2\x2\x8D2\x8D3\x5\xB8]\x2\x8D3\xEB\x3\x2\x2\x2\x8D4\x8D6"+
		"\a,\x2\x2\x8D5\x8D7\x5\x134\x9B\x2\x8D6\x8D5\x3\x2\x2\x2\x8D6\x8D7\x3"+
		"\x2\x2\x2\x8D7\x8D8\x3\x2\x2\x2\x8D8\x8DA\x5\xF8}\x2\x8D9\x8DB\x5\x114"+
		"\x8B\x2\x8DA\x8D9\x3\x2\x2\x2\x8DA\x8DB\x3\x2\x2\x2\x8DB\xED\x3\x2\x2"+
		"\x2\x8DC\x8EE\a\xD4\x2\x2\x8DD\x8DF\x5\x134\x9B\x2\x8DE\x8DD\x3\x2\x2"+
		"\x2\x8DE\x8DF\x3\x2\x2\x2\x8DF\x8E0\x3\x2\x2\x2\x8E0\x8EB\x5\xF0y\x2\x8E1"+
		"\x8E3\x5\x134\x9B\x2\x8E2\x8E1\x3\x2\x2\x2\x8E2\x8E3\x3\x2\x2\x2\x8E3"+
		"\x8E4\x3\x2\x2\x2\x8E4\x8E6\a)\x2\x2\x8E5\x8E7\x5\x134\x9B\x2\x8E6\x8E5"+
		"\x3\x2\x2\x2\x8E6\x8E7\x3\x2\x2\x2\x8E7\x8E8\x3\x2\x2\x2\x8E8\x8EA\x5"+
		"\xF0y\x2\x8E9\x8E2\x3\x2\x2\x2\x8EA\x8ED\x3\x2\x2\x2\x8EB\x8E9\x3\x2\x2"+
		"\x2\x8EB\x8EC\x3\x2\x2\x2\x8EC\x8EF\x3\x2\x2\x2\x8ED\x8EB\x3\x2\x2\x2"+
		"\x8EE\x8DE\x3\x2\x2\x2\x8EE\x8EF\x3\x2\x2\x2\x8EF\x8F1\x3\x2\x2\x2\x8F0"+
		"\x8F2\x5\x134\x9B\x2\x8F1\x8F0\x3\x2\x2\x2\x8F1\x8F2\x3\x2\x2\x2\x8F2"+
		"\x8F3\x3\x2\x2\x2\x8F3\x8F4\a\xDB\x2\x2\x8F4\xEF\x3\x2\x2\x2\x8F5\x8F6"+
		"\a\x95\x2\x2\x8F6\x8F8\x5\x134\x9B\x2\x8F7\x8F5\x3\x2\x2\x2\x8F7\x8F8"+
		"\x3\x2\x2\x2\x8F8\x8FB\x3\x2\x2\x2\x8F9\x8FA\t\x11\x2\x2\x8FA\x8FC\x5"+
		"\x134\x9B\x2\x8FB\x8F9\x3\x2\x2\x2\x8FB\x8FC\x3\x2\x2\x2\x8FC\x8FF\x3"+
		"\x2\x2\x2\x8FD\x8FE\a\x9C\x2\x2\x8FE\x900\x5\x134\x9B\x2\x8FF\x8FD\x3"+
		"\x2\x2\x2\x8FF\x900\x3\x2\x2\x2\x900\x901\x3\x2\x2\x2\x901\x903\x5\xF8"+
		"}\x2\x902\x904\x5\x114\x8B\x2\x903\x902\x3\x2\x2\x2\x903\x904\x3\x2\x2"+
		"\x2\x904\x90D\x3\x2\x2\x2\x905\x907\x5\x134\x9B\x2\x906\x905\x3\x2\x2"+
		"\x2\x906\x907\x3\x2\x2\x2\x907\x908\x3\x2\x2\x2\x908\x90A\a\xD4\x2\x2"+
		"\x909\x90B\x5\x134\x9B\x2\x90A\x909\x3\x2\x2\x2\x90A\x90B\x3\x2\x2\x2"+
		"\x90B\x90C\x3\x2\x2\x2\x90C\x90E\a\xDB\x2\x2\x90D\x906\x3\x2\x2\x2\x90D"+
		"\x90E\x3\x2\x2\x2\x90E\x913\x3\x2\x2\x2\x90F\x911\x5\x134\x9B\x2\x910"+
		"\x90F\x3\x2\x2\x2\x910\x911\x3\x2\x2\x2\x911\x912\x3\x2\x2\x2\x912\x914"+
		"\x5\xFC\x7F\x2\x913\x910\x3\x2\x2\x2\x913\x914\x3\x2\x2\x2\x914\x919\x3"+
		"\x2\x2\x2\x915\x917\x5\x134\x9B\x2\x916\x915\x3\x2\x2\x2\x916\x917\x3"+
		"\x2\x2\x2\x917\x918\x3\x2\x2\x2\x918\x91A\x5\xF2z\x2\x919\x916\x3\x2\x2"+
		"\x2\x919\x91A\x3\x2\x2\x2\x91A\xF1\x3\x2\x2\x2\x91B\x91D\a\xD0\x2\x2\x91C"+
		"\x91E\x5\x134\x9B\x2\x91D\x91C\x3\x2\x2\x2\x91D\x91E\x3\x2\x2\x2\x91E"+
		"\x91F\x3\x2\x2\x2\x91F\x920\x5\xB8]\x2\x920\xF3\x3\x2\x2\x2\x921\x92C"+
		"\x5\xF6|\x2\x922\x924\x5\x134\x9B\x2\x923\x922\x3\x2\x2\x2\x923\x924\x3"+
		"\x2\x2\x2\x924\x925\x3\x2\x2\x2\x925\x927\a)\x2\x2\x926\x928\x5\x134\x9B"+
		"\x2\x927\x926\x3\x2\x2\x2\x927\x928\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2"+
		"\x929\x92B\x5\xF6|\x2\x92A\x923\x3\x2\x2\x2\x92B\x92E\x3\x2\x2\x2\x92C"+
		"\x92A\x3\x2\x2\x2\x92C\x92D\x3\x2\x2\x2\x92D\xF5\x3\x2\x2\x2\x92E\x92C"+
		"\x3\x2\x2\x2\x92F\x930\x5\xB8]\x2\x930\x931\x5\x134\x9B\x2\x931\x932\a"+
		"\xBE\x2\x2\x932\x933\x5\x134\x9B\x2\x933\x935\x3\x2\x2\x2\x934\x92F\x3"+
		"\x2\x2\x2\x934\x935\x3\x2\x2\x2\x935\x936\x3\x2\x2\x2\x936\x937\x5\xB8"+
		"]\x2\x937\xF7\x3\x2\x2\x2\x938\x93C\x5\xFA~\x2\x939\x93C\x5\x11C\x8F\x2"+
		"\x93A\x93C\x5\x11A\x8E\x2\x93B\x938\x3\x2\x2\x2\x93B\x939\x3\x2\x2\x2"+
		"\x93B\x93A\x3\x2\x2\x2\x93C\xF9\x3\x2\x2\x2\x93D\x940\a\xEE\x2\x2\x93E"+
		"\x940\x5\x118\x8D\x2\x93F\x93D\x3\x2\x2\x2\x93F\x93E\x3\x2\x2\x2\x940"+
		"\xFB\x3\x2\x2\x2\x941\x943\a\x39\x2\x2\x942\x944\x5\x134\x9B\x2\x943\x942"+
		"\x3\x2\x2\x2\x943\x944\x3\x2\x2\x2\x944\x947\x3\x2\x2\x2\x945\x946\a\x8D"+
		"\x2\x2\x946\x948\x5\x134\x9B\x2\x947\x945\x3\x2\x2\x2\x947\x948\x3\x2"+
		"\x2\x2\x948\x949\x3\x2\x2\x2\x949\x94E\x5\x112\x8A\x2\x94A\x94C\x5\x134"+
		"\x9B\x2\x94B\x94A\x3\x2\x2\x2\x94B\x94C\x3\x2\x2\x2\x94C\x94D\x3\x2\x2"+
		"\x2\x94D\x94F\x5\x104\x83\x2\x94E\x94B\x3\x2\x2\x2\x94E\x94F\x3\x2\x2"+
		"\x2\x94F\xFD\x3\x2\x2\x2\x950\x951\t\x12\x2\x2\x951\xFF\x3\x2\x2\x2\x952"+
		"\x953\t\xE\x2\x2\x953\x101\x3\x2\x2\x2\x954\x959\x5\xFA~\x2\x955\x956"+
		"\t\xF\x2\x2\x956\x958\x5\xFA~\x2\x957\x955\x3\x2\x2\x2\x958\x95B\x3\x2"+
		"\x2\x2\x959\x957\x3\x2\x2\x2\x959\x95A\x3\x2\x2\x2\x95A\x103\x3\x2\x2"+
		"\x2\x95B\x959\x3\x2\x2\x2\x95C\x95E\a\xD7\x2\x2\x95D\x95F\x5\x134\x9B"+
		"\x2\x95E\x95D\x3\x2\x2\x2\x95E\x95F\x3\x2\x2\x2\x95F\x962\x3\x2\x2\x2"+
		"\x960\x963\x5\x110\x89\x2\x961\x963\x5\xFA~\x2\x962\x960\x3\x2\x2\x2\x962"+
		"\x961\x3\x2\x2\x2\x963\x105\x3\x2\x2\x2\x964\x966\x5\x108\x85\x2\x965"+
		"\x967\x5\x134\x9B\x2\x966\x965\x3\x2\x2\x2\x966\x967\x3\x2\x2\x2\x967"+
		"\x968\x3\x2\x2\x2\x968\x969\a*\x2\x2\x969\x107\x3\x2\x2\x2\x96A\x96D\x5"+
		"\x10A\x86\x2\x96B\x96D\x5\x10C\x87\x2\x96C\x96A\x3\x2\x2\x2\x96C\x96B"+
		"\x3\x2\x2\x2\x96D\x109\x3\x2\x2\x2\x96E\x96F\x5\xF8}\x2\x96F\x10B\x3\x2"+
		"\x2\x2\x970\x971\x5\x110\x89\x2\x971\x10D\x3\x2\x2\x2\x972\x97B\x5\x110"+
		"\x89\x2\x973\x97B\a\xE8\x2\x2\x974\x97B\a\xE3\x2\x2\x975\x97B\a\xBF\x2"+
		"\x2\x976\x97B\ao\x2\x2\x977\x97B\a\x8F\x2\x2\x978\x97B\a\x90\x2\x2\x979"+
		"\x97B\a[\x2\x2\x97A\x972\x3\x2\x2\x2\x97A\x973\x3\x2\x2\x2\x97A\x974\x3"+
		"\x2\x2\x2\x97A\x975\x3\x2\x2\x2\x97A\x976\x3\x2\x2\x2\x97A\x977\x3\x2"+
		"\x2\x2\x97A\x978\x3\x2\x2\x2\x97A\x979\x3\x2\x2\x2\x97B\x10F\x3\x2\x2"+
		"\x2\x97C\x97D\t\x13\x2\x2\x97D\x111\x3\x2\x2\x2\x97E\x981\x5\xFE\x80\x2"+
		"\x97F\x981\x5\x102\x82\x2\x980\x97E\x3\x2\x2\x2\x980\x97F\x3\x2\x2\x2"+
		"\x981\x98A\x3\x2\x2\x2\x982\x984\x5\x134\x9B\x2\x983\x982\x3\x2\x2\x2"+
		"\x983\x984\x3\x2\x2\x2\x984\x985\x3\x2\x2\x2\x985\x987\a\xD4\x2\x2\x986"+
		"\x988\x5\x134\x9B\x2\x987\x986\x3\x2\x2\x2\x987\x988\x3\x2\x2\x2\x988"+
		"\x989\x3\x2\x2\x2\x989\x98B\a\xDB\x2\x2\x98A\x983\x3\x2\x2\x2\x98A\x98B"+
		"\x3\x2\x2\x2\x98B\x113\x3\x2\x2\x2\x98C\x98D\t\x14\x2\x2\x98D\x115\x3"+
		"\x2\x2\x2\x98E\x98F\t\x15\x2\x2\x98F\x117\x3\x2\x2\x2\x990\x991\t\x16"+
		"\x2\x2\x991\x119\x3\x2\x2\x2\x992\x993\a\x39\x2\x2\x993\x11B\x3\x2\x2"+
		"\x2\x994\x995\t\x17\x2\x2\x995\x11D\x3\x2\x2\x2\x996\x998\x5\x134\x9B"+
		"\x2\x997\x996\x3\x2\x2\x2\x997\x998\x3\x2\x2\x2\x998\x99A\x3\x2\x2\x2"+
		"\x999\x99B\x5\x122\x92\x2\x99A\x999\x3\x2\x2\x2\x99A\x99B\x3\x2\x2\x2"+
		"\x99B\x11F\x3\x2\x2\x2\x99C\x99D\x5\x11E\x90\x2\x99D\x99F\a\xE9\x2\x2"+
		"\x99E\x9A0\x5\x134\x9B\x2\x99F\x99E\x3\x2\x2\x2\x99F\x9A0\x3\x2\x2\x2"+
		"\x9A0\x9A9\x3\x2\x2\x2\x9A1\x9A3\x5\x134\x9B\x2\x9A2\x9A1\x3\x2\x2\x2"+
		"\x9A2\x9A3\x3\x2\x2\x2\x9A3\x9A4\x3\x2\x2\x2\x9A4\x9A6\a*\x2\x2\x9A5\x9A7"+
		"\x5\x134\x9B\x2\x9A6\x9A5\x3\x2\x2\x2\x9A6\x9A7\x3\x2\x2\x2\x9A7\x9A9"+
		"\x3\x2\x2\x2\x9A8\x99C\x3\x2\x2\x2\x9A8\x9A2\x3\x2\x2\x2\x9A9\x9AB\x3"+
		"\x2\x2\x2\x9AA\x9A8\x3\x2\x2\x2\x9AB\x9AE\x3\x2\x2\x2\x9AC\x9AA\x3\x2"+
		"\x2\x2\x9AC\x9AD\x3\x2\x2\x2\x9AD\x9B3\x3\x2\x2\x2\x9AE\x9AC\x3\x2\x2"+
		"\x2\x9AF\x9B0\x5\x11E\x90\x2\x9B0\x9B1\a\x2\x2\x3\x9B1\x9B3\x3\x2\x2\x2"+
		"\x9B2\x9AC\x3\x2\x2\x2\x9B2\x9AF\x3\x2\x2\x2\x9B3\x121\x3\x2\x2\x2\x9B4"+
		"\x9B8\x5\x12A\x96\x2\x9B5\x9B8\x5\x126\x94\x2\x9B6\x9B8\x5\x124\x93\x2"+
		"\x9B7\x9B4\x3\x2\x2\x2\x9B7\x9B5\x3\x2\x2\x2\x9B7\x9B6\x3\x2\x2\x2\x9B8"+
		"\x123\x3\x2\x2\x2\x9B9\x9BB\a\xAB\x2\x2\x9BA\x9BC\x5\x134\x9B\x2\x9BB"+
		"\x9BA\x3\x2\x2\x2\x9BB\x9BC\x3\x2\x2\x2\x9BC\x9BD\x3\x2\x2\x2\x9BD\x9BE"+
		"\x5\x128\x95\x2\x9BE\x125\x3\x2\x2\x2\x9BF\x9C0\a\xEA\x2\x2\x9C0\x9C1"+
		"\x5\x128\x95\x2\x9C1\x127\x3\x2\x2\x2\x9C2\x9C5\a\xEF\x2\x2\x9C3\x9C5"+
		"\n\x18\x2\x2\x9C4\x9C2\x3\x2\x2\x2\x9C4\x9C3\x3\x2\x2\x2\x9C5\x9C8\x3"+
		"\x2\x2\x2\x9C6\x9C4\x3\x2\x2\x2\x9C6\x9C7\x3\x2\x2\x2\x9C7\x129\x3\x2"+
		"\x2\x2\x9C8\x9C6\x3\x2\x2\x2\x9C9\x9CF\a\xEA\x2\x2\x9CA\x9CB\a/\x2\x2"+
		"\x9CB\x9CD\x5\x12C\x97\x2\x9CC\x9CE\x5\x134\x9B\x2\x9CD\x9CC\x3\x2\x2"+
		"\x2\x9CD\x9CE\x3\x2\x2\x2\x9CE\x9D0\x3\x2\x2\x2\x9CF\x9CA\x3\x2\x2\x2"+
		"\x9D0\x9D1\x3\x2\x2\x2\x9D1\x9CF\x3\x2\x2\x2\x9D1\x9D2\x3\x2\x2\x2\x9D2"+
		"\x12B\x3\x2\x2\x2\x9D3\x9D5\x5\x12E\x98\x2\x9D4\x9D6\x5\x130\x99\x2\x9D5"+
		"\x9D4\x3\x2\x2\x2\x9D5\x9D6\x3\x2\x2\x2\x9D6\x12D\x3\x2\x2\x2\x9D7\x9D8"+
		"\x5\xF8}\x2\x9D8\x12F\x3\x2\x2\x2\x9D9\x9DA\x5\x134\x9B\x2\x9DA\x9DB\x5"+
		"\x132\x9A\x2\x9DB\xA0E\x3\x2\x2\x2\x9DC\x9DD\x5\x134\x9B\x2\x9DD\x9E6"+
		"\x5\x132\x9A\x2\x9DE\x9E0\x5\x134\x9B\x2\x9DF\x9DE\x3\x2\x2\x2\x9DF\x9E0"+
		"\x3\x2\x2\x2\x9E0\x9E1\x3\x2\x2\x2\x9E1\x9E3\a)\x2\x2\x9E2\x9E4\x5\x134"+
		"\x9B\x2\x9E3\x9E2\x3\x2\x2\x2\x9E3\x9E4\x3\x2\x2\x2\x9E4\x9E5\x3\x2\x2"+
		"\x2\x9E5\x9E7\x5\x132\x9A\x2\x9E6\x9DF\x3\x2\x2\x2\x9E7\x9E8\x3\x2\x2"+
		"\x2\x9E8\x9E6\x3\x2\x2\x2\x9E8\x9E9\x3\x2\x2\x2\x9E9\xA0E\x3\x2\x2\x2"+
		"\x9EA\x9EC\x5\x134\x9B\x2\x9EB\x9EA\x3\x2\x2\x2\x9EB\x9EC\x3\x2\x2\x2"+
		"\x9EC\x9ED\x3\x2\x2\x2\x9ED\x9EF\a\xD4\x2\x2\x9EE\x9F0\x5\x134\x9B\x2"+
		"\x9EF\x9EE\x3\x2\x2\x2\x9EF\x9F0\x3\x2\x2\x2\x9F0\x9F1\x3\x2\x2\x2\x9F1"+
		"\x9F3\x5\x132\x9A\x2\x9F2\x9F4\x5\x134\x9B\x2\x9F3\x9F2\x3\x2\x2\x2\x9F3"+
		"\x9F4\x3\x2\x2\x2\x9F4\x9F5\x3\x2\x2\x2\x9F5\x9F6\a\xDB\x2\x2\x9F6\xA0E"+
		"\x3\x2\x2\x2\x9F7\x9F9\x5\x134\x9B\x2\x9F8\x9F7\x3\x2\x2\x2\x9F8\x9F9"+
		"\x3\x2\x2\x2\x9F9\x9FA\x3\x2\x2\x2\x9FA\x9FB\a\xD4\x2\x2\x9FB\xA04\x5"+
		"\x132\x9A\x2\x9FC\x9FE\x5\x134\x9B\x2\x9FD\x9FC\x3\x2\x2\x2\x9FD\x9FE"+
		"\x3\x2\x2\x2\x9FE\x9FF\x3\x2\x2\x2\x9FF\xA01\a)\x2\x2\xA00\xA02\x5\x134"+
		"\x9B\x2\xA01\xA00\x3\x2\x2\x2\xA01\xA02\x3\x2\x2\x2\xA02\xA03\x3\x2\x2"+
		"\x2\xA03\xA05\x5\x132\x9A\x2\xA04\x9FD\x3\x2\x2\x2\xA05\xA06\x3\x2\x2"+
		"\x2\xA06\xA04\x3\x2\x2\x2\xA06\xA07\x3\x2\x2\x2\xA07\xA09\x3\x2\x2\x2"+
		"\xA08\xA0A\x5\x134\x9B\x2\xA09\xA08\x3\x2\x2\x2\xA09\xA0A\x3\x2\x2\x2"+
		"\xA0A\xA0B\x3\x2\x2\x2\xA0B\xA0C\a\xDB\x2\x2\xA0C\xA0E\x3\x2\x2\x2\xA0D"+
		"\x9D9\x3\x2\x2\x2\xA0D\x9DC\x3\x2\x2\x2\xA0D\x9EB\x3\x2\x2\x2\xA0D\x9F8"+
		"\x3\x2\x2\x2\xA0E\x131\x3\x2\x2\x2\xA0F\xA10\x5\xB8]\x2\xA10\x133\x3\x2"+
		"\x2\x2\xA11\xA13\t\x19\x2\x2\xA12\xA11\x3\x2\x2\x2\xA13\xA14\x3\x2\x2"+
		"\x2\xA14\xA12\x3\x2\x2\x2\xA14\xA15\x3\x2\x2\x2\xA15\x135\x3\x2\x2\x2"+
		"\x1BD\x139\x13F\x142\x146\x14A\x14E\x156\x159\x163\x165\x16B\x173\x17A"+
		"\x180\x189\x191\x1A0\x1AB\x1B3\x1BD\x1C3\x1C7\x1CB\x1CF\x1D4\x1E1\x214"+
		"\x21A\x21E\x223\x226\x22B\x231\x235\x23A\x23F\x244\x247\x24B\x252\x258"+
		"\x25C\x25F\x264\x26F\x272\x275\x27A\x280\x284\x289\x291\x297\x29B\x2A7"+
		"\x2AB\x2B6\x2C1\x2C8\x2D0\x2D5\x2DE\x2E5\x2E9\x2EC\x2F4\x2F8\x2FD\x307"+
		"\x30D\x31E\x324\x32A\x32E\x33A\x33E\x344\x349\x34D\x351\x355\x358\x35B"+
		"\x35E\x361\x365\x36F\x373\x376\x379\x37D\x390\x395\x399\x3A4\x3AC\x3AF"+
		"\x3B1\x3B6\x3BA\x3BE\x3C2\x3C6\x3CC\x3D0\x3D4\x3D9\x3DF\x3E2\x3E6\x3EA"+
		"\x3ED\x3F1\x3F6\x3F8\x3FC\x400\x403\x407\x40A\x418\x41C\x421\x425\x429"+
		"\x42D\x435\x439\x441\x445\x44D\x44F\x455\x459\x45F\x463\x467\x475\x47F"+
		"\x483\x488\x493\x497\x49C\x4AB\x4B0\x4B9\x4BD\x4C1\x4C5\x4C9\x4CC\x4D0"+
		"\x4D4\x4D7\x4DB\x4DE\x4E2\x4E4\x4E9\x4ED\x4F1\x4F5\x4F7\x4FD\x501\x504"+
		"\x509\x50D\x513\x516\x519\x51E\x522\x529\x52D\x533\x536\x53A\x541\x545"+
		"\x54B\x54E\x552\x55A\x55E\x561\x564\x568\x570\x574\x578\x57A\x57D\x583"+
		"\x587\x58B\x590\x595\x599\x59D\x5A3\x5AB\x5AD\x5B5\x5B9\x5C3\x5C7\x5D4"+
		"\x5DB\x5DF\x5EA\x5F1\x5F6\x5FA\x5FF\x602\x608\x60C\x613\x617\x61B\x61F"+
		"\x622\x626\x62F\x638\x63F\x643\x646\x649\x64C\x651\x659\x65D\x665\x667"+
		"\x66C\x671\x676\x67A\x680\x685\x68C\x690\x696\x69A\x69E\x6A3\x6A7\x6AC"+
		"\x6B0\x6B5\x6B9\x6BE\x6C2\x6C7\x6CB\x6D0\x6D4\x6D9\x6DD\x6E2\x6E6\x6EB"+
		"\x6EF\x6F4\x6F8\x6FD\x701\x704\x706\x711\x716\x71B\x721\x725\x72A\x72F"+
		"\x733\x737\x739\x73D\x73F\x742\x747\x74E\x756\x75A\x763\x76D\x771\x774"+
		"\x777\x780\x785\x788\x78C\x790\x794\x797\x79F\x7A4\x7A7\x7AB\x7AF\x7B3"+
		"\x7B6\x7BE\x7C1\x7C5\x7C8\x7CB\x7CF\x7D3\x7D8\x7DB\x7DE\x7E1\x7E9\x7F0"+
		"\x7F3\x7FB\x802\x806\x809\x80C\x80F\x817\x81C\x81F\x822\x826\x82A\x82C"+
		"\x830\x833\x836\x83E\x843\x846\x849\x84C\x854\x859\x85C\x85F\x863\x867"+
		"\x869\x86D\x870\x873\x87B\x880\x884\x888\x88B\x88E\x891\x899\x89E\x8A2"+
		"\x8A5\x8AA\x8AD\x8B1\x8B5\x8BA\x8BE\x8C1\x8C5\x8C9\x8CD\x8D0\x8D6\x8DA"+
		"\x8DE\x8E2\x8E6\x8EB\x8EE\x8F1\x8F7\x8FB\x8FF\x903\x906\x90A\x90D\x910"+
		"\x913\x916\x919\x91D\x923\x927\x92C\x934\x93B\x93F\x943\x947\x94B\x94E"+
		"\x959\x95E\x962\x966\x96C\x97A\x980\x983\x987\x98A\x997\x99A\x99F\x9A2"+
		"\x9A6\x9A8\x9AC\x9B2\x9B7\x9BB\x9C4\x9C6\x9CD\x9D1\x9D5\x9DF\x9E3\x9E8"+
		"\x9EB\x9EF\x9F3\x9F8\x9FD\xA01\xA06\xA09\xA0D\xA14";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Grammar
