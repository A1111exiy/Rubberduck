//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\TestProj\TestProj\VBA.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar
{
    using Antlr4.Runtime;
    using Antlr4.Runtime.Atn;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections.Generic;
    using DFA = Antlr4.Runtime.Dfa.DFA;

    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
    [System.CLSCompliant(false)]
    public partial class VBAParser : Parser
    {
        public const int
            T__7 = 1, T__6 = 2, T__5 = 3, T__4 = 4, T__3 = 5, T__2 = 6, T__1 = 7, T__0 = 8, ACCESS = 9,
            ADDRESSOF = 10, ALIAS = 11, AND = 12, ATTRIBUTE = 13, APPACTIVATE = 14, APPEND = 15,
            AS = 16, BEGIN = 17, BEEP = 18, BINARY = 19, BOOLEAN = 20, BYVAL = 21, BYREF = 22, BYTE = 23,
            CALL = 24, CASE = 25, CHDIR = 26, CHDRIVE = 27, CLASS = 28, CLOSE = 29, COLLECTION = 30,
            CONST = 31, DATABASE = 32, DATE = 33, DECLARE = 34, DEFBOOL = 35, DEFBYTE = 36, DEFDATE = 37,
            DEFDBL = 38, DEFDEC = 39, DEFCUR = 40, DEFINT = 41, DEFLNG = 42, DEFOBJ = 43, DEFSNG = 44,
            DEFSTR = 45, DEFVAR = 46, DELETESETTING = 47, DIM = 48, DO = 49, DOUBLE = 50, EACH = 51,
            ELSE = 52, ELSEIF = 53, END_ENUM = 54, END_FUNCTION = 55, END_IF = 56, END_PROPERTY = 57,
            END_SELECT = 58, END_SUB = 59, END_TYPE = 60, END_WITH = 61, END = 62, ENUM = 63,
            EQV = 64, ERASE = 65, ERROR = 66, EVENT = 67, EXIT_DO = 68, EXIT_FOR = 69, EXIT_FUNCTION = 70,
            EXIT_PROPERTY = 71, EXIT_SUB = 72, FALSE = 73, FILECOPY = 74, FRIEND = 75, FOR = 76,
            FUNCTION = 77, GET = 78, GLOBAL = 79, GOSUB = 80, GOTO = 81, IF = 82, IMP = 83, IMPLEMENTS = 84,
            IN = 85, INPUT = 86, IS = 87, INTEGER = 88, KILL = 89, LOAD = 90, LOCK = 91, LONG = 92,
            LOOP = 93, LEN = 94, LET = 95, LIB = 96, LIKE = 97, LINE_INPUT = 98, LOCK_READ = 99,
            LOCK_WRITE = 100, LOCK_READ_WRITE = 101, LSET = 102, MACRO_CONST = 103, MACRO_IF = 104,
            MACRO_ELSEIF = 105, MACRO_ELSE = 106, MACRO_END_IF = 107, ME = 108, MID = 109, MKDIR = 110,
            MOD = 111, NAME = 112, NEXT = 113, NEW = 114, NOT = 115, NOTHING = 116, NULL = 117,
            ON = 118, ON_ERROR = 119, ON_LOCAL_ERROR = 120, OPEN = 121, OPTIONAL = 122, OPTION_BASE = 123,
            OPTION_EXPLICIT = 124, OPTION_COMPARE = 125, OPTION_PRIVATE_MODULE = 126, OR = 127,
            OUTPUT = 128, PARAMARRAY = 129, PRESERVE = 130, PRINT = 131, PRIVATE = 132, PROPERTY_GET = 133,
            PROPERTY_LET = 134, PROPERTY_SET = 135, PTRSAFE = 136, PUBLIC = 137, PUT = 138,
            RANDOM = 139, RANDOMIZE = 140, RAISEEVENT = 141, READ = 142, READ_WRITE = 143, REDIM = 144,
            REM = 145, RESET = 146, RESUME = 147, RETURN = 148, RMDIR = 149, RSET = 150, SAVEPICTURE = 151,
            SAVESETTING = 152, SEEK = 153, SELECT = 154, SENDKEYS = 155, SET = 156, SETATTR = 157,
            SHARED = 158, SINGLE = 159, SPC = 160, STATIC = 161, STEP = 162, STOP = 163, STRING = 164,
            SUB = 165, TAB = 166, TEXT = 167, THEN = 168, TIME = 169, TO = 170, TRUE = 171, TYPE = 172,
            TYPEOF = 173, UNLOAD = 174, UNLOCK = 175, UNTIL = 176, VARIANT = 177, VERSION = 178,
            WEND = 179, WHILE = 180, WIDTH = 181, WITH = 182, WITHEVENTS = 183, WRITE = 184, XOR = 185,
            AMPERSAND = 186, ASSIGN = 187, DIV = 188, INTDIV = 189, EQ = 190, GEQ = 191, GT = 192,
            LEQ = 193, LPAREN = 194, LT = 195, MINUS = 196, MULT = 197, NEQ = 198, PLUS = 199, POW = 200,
            RPAREN = 201, L_SQUARE_BRACKET = 202, R_SQUARE_BRACKET = 203, STRINGLITERAL = 204,
            OCTLITERAL = 205, HEXLITERAL = 206, SHORTLITERAL = 207, INTEGERLITERAL = 208,
            DOUBLELITERAL = 209, DATELITERAL = 210, LINE_CONTINUATION = 211, NEWLINE = 212,
            REMCOMMENT = 213, COMMENT = 214, SINGLEQUOTE = 215, COLON = 216, UNDERSCORE = 217,
            WS = 218, IDENTIFIER = 219;
        public static readonly string[] tokenNames = {
        "<INVALID>", "'@'", "'!'", "'#'", "'$'", "'%'", "';'", "','", "'.'", "ACCESS",
        "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", "APPEND", "AS",
        "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", "CALL",
        "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "COLLECTION", "CONST", "DATABASE",
        "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFDEC",
        "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR", "DEFVAR",
        "DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", "END_ENUM",
        "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", "END_TYPE",
        "END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", "EXIT_DO",
        "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", "FILECOPY",
        "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", "IF", "IMP",
        "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", "LOAD", "LOCK",
        "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ",
        "LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_CONST", "MACRO_IF", "MACRO_ELSEIF",
        "MACRO_ELSE", "MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT",
        "NEW", "NOT", "NOTHING", "NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN",
        "OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE",
        "OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET",
        "PROPERTY_LET", "PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM",
        "RANDOMIZE", "RAISEEVENT", "READ", "READ_WRITE", "REDIM", "REM", "RESET",
        "RESUME", "RETURN", "RMDIR", "RSET", "SAVEPICTURE", "SAVESETTING", "SEEK",
        "SELECT", "SENDKEYS", "SET", "SETATTR", "SHARED", "SINGLE", "SPC", "STATIC",
        "STEP", "STOP", "STRING", "SUB", "TAB", "TEXT", "THEN", "TIME", "TO",
        "TRUE", "TYPE", "TYPEOF", "UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION",
        "WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS", "WRITE", "XOR", "'&'",
        "':='", "'/'", "'\\'", "'='", "'>='", "'>'", "'<='", "'('", "'<'", "'-'",
        "'*'", "'<>'", "'+'", "'^'", "')'", "'['", "']'", "STRINGLITERAL", "OCTLITERAL",
        "HEXLITERAL", "SHORTLITERAL", "INTEGERLITERAL", "DOUBLELITERAL", "DATELITERAL",
        "LINE_CONTINUATION", "NEWLINE", "REMCOMMENT", "COMMENT", "'''", "':'",
        "'_'", "WS", "IDENTIFIER"
    };
        public const int
            RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3,
            RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleDeclarations = 6,
            RULE_moduleOption = 7, RULE_moduleDeclarationsElement = 8, RULE_macroStmt = 9,
            RULE_moduleBody = 10, RULE_moduleBodyElement = 11, RULE_attributeStmt = 12,
            RULE_block = 13, RULE_blockStmt = 14, RULE_appactivateStmt = 15, RULE_beepStmt = 16,
            RULE_chdirStmt = 17, RULE_chdriveStmt = 18, RULE_closeStmt = 19, RULE_constStmt = 20,
            RULE_constSubStmt = 21, RULE_dateStmt = 22, RULE_declareStmt = 23, RULE_deftypeStmt = 24,
            RULE_deleteSettingStmt = 25, RULE_doLoopStmt = 26, RULE_endStmt = 27,
            RULE_enumerationStmt = 28, RULE_enumerationStmt_Constant = 29, RULE_eraseStmt = 30,
            RULE_errorStmt = 31, RULE_eventStmt = 32, RULE_exitStmt = 33, RULE_filecopyStmt = 34,
            RULE_forEachStmt = 35, RULE_forNextStmt = 36, RULE_functionStmt = 37,
            RULE_getStmt = 38, RULE_goSubStmt = 39, RULE_goToStmt = 40, RULE_ifThenElseStmt = 41,
            RULE_ifBlockStmt = 42, RULE_ifConditionStmt = 43, RULE_ifElseIfBlockStmt = 44,
            RULE_ifElseBlockStmt = 45, RULE_implementsStmt = 46, RULE_inputStmt = 47,
            RULE_killStmt = 48, RULE_letStmt = 49, RULE_lineInputStmt = 50, RULE_loadStmt = 51,
            RULE_lockStmt = 52, RULE_lsetStmt = 53, RULE_macroConstStmt = 54, RULE_macroIfThenElseStmt = 55,
            RULE_macroIfBlockStmt = 56, RULE_macroElseIfBlockStmt = 57, RULE_macroElseBlockStmt = 58,
            RULE_midStmt = 59, RULE_mkdirStmt = 60, RULE_nameStmt = 61, RULE_onErrorStmt = 62,
            RULE_onGoToStmt = 63, RULE_onGoSubStmt = 64, RULE_openStmt = 65, RULE_outputList = 66,
            RULE_outputList_Expression = 67, RULE_printStmt = 68, RULE_propertyGetStmt = 69,
            RULE_propertySetStmt = 70, RULE_propertyLetStmt = 71, RULE_putStmt = 72,
            RULE_raiseEventStmt = 73, RULE_randomizeStmt = 74, RULE_redimStmt = 75,
            RULE_redimSubStmt = 76, RULE_resetStmt = 77, RULE_resumeStmt = 78, RULE_returnStmt = 79,
            RULE_rmdirStmt = 80, RULE_rsetStmt = 81, RULE_savepictureStmt = 82, RULE_saveSettingStmt = 83,
            RULE_seekStmt = 84, RULE_selectCaseStmt = 85, RULE_sC_Selection = 86,
            RULE_sC_Case = 87, RULE_sC_Cond = 88, RULE_sendkeysStmt = 89, RULE_setattrStmt = 90,
            RULE_setStmt = 91, RULE_stopStmt = 92, RULE_subStmt = 93, RULE_timeStmt = 94,
            RULE_typeStmt = 95, RULE_typeStmt_Element = 96, RULE_typeOfStmt = 97,
            RULE_unloadStmt = 98, RULE_unlockStmt = 99, RULE_valueStmt = 100, RULE_variableStmt = 101,
            RULE_variableListStmt = 102, RULE_variableSubStmt = 103, RULE_whileWendStmt = 104,
            RULE_widthStmt = 105, RULE_withStmt = 106, RULE_writeStmt = 107, RULE_fileNumber = 108,
            RULE_explicitCallStmt = 109, RULE_eCS_ProcedureCall = 110, RULE_eCS_MemberProcedureCall = 111,
            RULE_implicitCallStmt_InBlock = 112, RULE_iCS_B_MemberProcedureCall = 113,
            RULE_iCS_B_ProcedureCall = 114, RULE_implicitCallStmt_InStmt = 115, RULE_iCS_S_VariableOrProcedureCall = 116,
            RULE_iCS_S_ProcedureOrArrayCall = 117, RULE_iCS_S_MembersCall = 118, RULE_iCS_S_MemberCall = 119,
            RULE_iCS_S_DictionaryCall = 120, RULE_argsCall = 121, RULE_argCall = 122,
            RULE_dictionaryCallStmt = 123, RULE_argList = 124, RULE_arg = 125, RULE_argDefaultValue = 126,
            RULE_subscripts = 127, RULE_subscript = 128, RULE_ambiguousIdentifier = 129,
            RULE_asTypeClause = 130, RULE_baseType = 131, RULE_certainIdentifier = 132,
            RULE_comparisonOperator = 133, RULE_complexType = 134, RULE_fieldLength = 135,
            RULE_letterrange = 136, RULE_lineLabel = 137, RULE_literal = 138, RULE_type = 139,
            RULE_typeHint = 140, RULE_visibility = 141, RULE_ambiguousKeyword = 142,
            RULE_remComment = 143, RULE_comment = 144, RULE_endOfLine = 145, RULE_endOfStatement = 146;
        public static readonly string[] ruleNames = {
        "startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement",
        "moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement",
        "macroStmt", "moduleBody", "moduleBodyElement", "attributeStmt", "block",
        "blockStmt", "appactivateStmt", "beepStmt", "chdirStmt", "chdriveStmt",
        "closeStmt", "constStmt", "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt",
        "deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant",
        "eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt",
        "forNextStmt", "functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt",
        "ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt",
        "implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt",
        "loadStmt", "lockStmt", "lsetStmt", "macroConstStmt", "macroIfThenElseStmt",
        "macroIfBlockStmt", "macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt",
        "mkdirStmt", "nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt",
        "outputList", "outputList_Expression", "printStmt", "propertyGetStmt",
        "propertySetStmt", "propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt",
        "redimStmt", "redimSubStmt", "resetStmt", "resumeStmt", "returnStmt",
        "rmdirStmt", "rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt",
        "selectCaseStmt", "sC_Selection", "sC_Case", "sC_Cond", "sendkeysStmt",
        "setattrStmt", "setStmt", "stopStmt", "subStmt", "timeStmt", "typeStmt",
        "typeStmt_Element", "typeOfStmt", "unloadStmt", "unlockStmt", "valueStmt",
        "variableStmt", "variableListStmt", "variableSubStmt", "whileWendStmt",
        "widthStmt", "withStmt", "writeStmt", "fileNumber", "explicitCallStmt",
        "eCS_ProcedureCall", "eCS_MemberProcedureCall", "implicitCallStmt_InBlock",
        "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", "implicitCallStmt_InStmt",
        "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_MembersCall",
        "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", "argCall", "dictionaryCallStmt",
        "argList", "arg", "argDefaultValue", "subscripts", "subscript", "ambiguousIdentifier",
        "asTypeClause", "baseType", "certainIdentifier", "comparisonOperator",
        "complexType", "fieldLength", "letterrange", "lineLabel", "literal", "type",
        "typeHint", "visibility", "ambiguousKeyword", "remComment", "comment",
        "endOfLine", "endOfStatement"
    };

        public override string GrammarFileName { get { return "VBA.g4"; } }

        public override string[] TokenNames { get { return tokenNames; } }

        public override string[] RuleNames { get { return ruleNames; } }

        public override string SerializedAtn { get { return _serializedATN; } }

        public VBAParser(ITokenStream input)
            : base(input)
        {
            _interp = new ParserATNSimulator(this, _ATN);
        }
        public partial class StartRuleContext : ParserRuleContext
        {
            public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
            public ModuleContext module()
            {
                return GetRuleContext<ModuleContext>(0);
            }
            public StartRuleContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_startRule; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterStartRule(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitStartRule(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public StartRuleContext startRule()
        {
            StartRuleContext _localctx = new StartRuleContext(_ctx, State);
            EnterRule(_localctx, 0, RULE_startRule);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 294; module();
                    State = 295; Match(Eof);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleContext : ParserRuleContext
        {
            public IReadOnlyList<EndOfLineContext> endOfLine()
            {
                return GetRuleContexts<EndOfLineContext>();
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public EndOfLineContext endOfLine(int i)
            {
                return GetRuleContext<EndOfLineContext>(i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ModuleHeaderContext moduleHeader()
            {
                return GetRuleContext<ModuleHeaderContext>(0);
            }
            public ModuleConfigContext moduleConfig()
            {
                return GetRuleContext<ModuleConfigContext>(0);
            }
            public ModuleAttributesContext moduleAttributes()
            {
                return GetRuleContext<ModuleAttributesContext>(0);
            }
            public ModuleBodyContext moduleBody()
            {
                return GetRuleContext<ModuleBodyContext>(0);
            }
            public ModuleDeclarationsContext moduleDeclarations()
            {
                return GetRuleContext<ModuleDeclarationsContext>(0);
            }
            public ModuleContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_module; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModule(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModule(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModule(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleContext module()
        {
            ModuleContext _localctx = new ModuleContext(_ctx, State);
            EnterRule(_localctx, 2, RULE_module);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 298;
                    switch (Interpreter.AdaptivePredict(_input, 0, _ctx))
                    {
                        case 1:
                            {
                                State = 297; Match(WS);
                            }
                            break;
                    }
                    State = 303;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 1, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 300; endOfLine();
                                }
                            }
                        }
                        State = 305;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 1, _ctx);
                    }
                    State = 313;
                    _la = _input.La(1);
                    if (_la == VERSION)
                    {
                        {
                            State = 306; moduleHeader();
                            State = 310;
                            _errHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(_input, 2, _ctx);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 307; endOfLine();
                                        }
                                    }
                                }
                                State = 312;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 2, _ctx);
                            }
                        }
                    }

                    State = 316;
                    _la = _input.La(1);
                    if (_la == BEGIN)
                    {
                        {
                            State = 315; moduleConfig();
                        }
                    }

                    State = 321;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 5, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 318; endOfLine();
                                }
                            }
                        }
                        State = 323;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 5, _ctx);
                    }
                    State = 325;
                    _la = _input.La(1);
                    if (_la == ATTRIBUTE)
                    {
                        {
                            State = 324; moduleAttributes();
                        }
                    }

                    State = 330;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 7, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 327; endOfLine();
                                }
                            }
                        }
                        State = 332;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 7, _ctx);
                    }
                    State = 334;
                    switch (Interpreter.AdaptivePredict(_input, 8, _ctx))
                    {
                        case 1:
                            {
                                State = 333; moduleDeclarations();
                            }
                            break;
                    }
                    State = 339;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 9, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 336; endOfLine();
                                }
                            }
                        }
                        State = 341;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 9, _ctx);
                    }
                    State = 343;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (FUNCTION - 75)) | (1L << (GLOBAL - 75)) | (1L << (MACRO_CONST - 75)) | (1L << (MACRO_IF - 75)) | (1L << (PRIVATE - 75)) | (1L << (PROPERTY_GET - 75)) | (1L << (PROPERTY_LET - 75)) | (1L << (PROPERTY_SET - 75)) | (1L << (PUBLIC - 75)))) != 0) || _la == STATIC || _la == SUB)
                    {
                        {
                            State = 342; moduleBody();
                        }
                    }

                    State = 348;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 11, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 345; endOfLine();
                                }
                            }
                        }
                        State = 350;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 11, _ctx);
                    }
                    State = 352;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 351; Match(WS);
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleHeaderContext : ParserRuleContext
        {
            public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
            public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
            public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleHeader; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleHeader(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleHeader(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleHeaderContext moduleHeader()
        {
            ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
            EnterRule(_localctx, 4, RULE_moduleHeader);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 354; Match(VERSION);
                    State = 355; Match(WS);
                    State = 356; Match(DOUBLELITERAL);
                    State = 357; Match(WS);
                    State = 358; Match(CLASS);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleConfigContext : ParserRuleContext
        {
            public IReadOnlyList<EndOfLineContext> endOfLine()
            {
                return GetRuleContexts<EndOfLineContext>();
            }
            public EndOfLineContext endOfLine(int i)
            {
                return GetRuleContext<EndOfLineContext>(i);
            }
            public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement()
            {
                return GetRuleContexts<ModuleConfigElementContext>();
            }
            public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
            public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
            public ModuleConfigElementContext moduleConfigElement(int i)
            {
                return GetRuleContext<ModuleConfigElementContext>(i);
            }
            public ModuleConfigContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleConfig; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleConfig(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleConfig(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleConfigContext moduleConfig()
        {
            ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
            EnterRule(_localctx, 6, RULE_moduleConfig);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 360; Match(BEGIN);
                    State = 364;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (NEWLINE - 212)) | (1L << (REMCOMMENT - 212)) | (1L << (COMMENT - 212)) | (1L << (WS - 212)))) != 0))
                    {
                        {
                            {
                                State = 361; endOfLine();
                            }
                        }
                        State = 366;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 368;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 367; moduleConfigElement();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 370;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 14, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                    State = 372; Match(END);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleConfigElementContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public IReadOnlyList<EndOfLineContext> endOfLine()
            {
                return GetRuleContexts<EndOfLineContext>();
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public EndOfLineContext endOfLine(int i)
            {
                return GetRuleContext<EndOfLineContext>(i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public LiteralContext literal()
            {
                return GetRuleContext<LiteralContext>(0);
            }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleConfigElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleConfigElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleConfigElement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleConfigElementContext moduleConfigElement()
        {
            ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
            EnterRule(_localctx, 8, RULE_moduleConfigElement);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 374; ambiguousIdentifier();
                    State = 376;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 375; Match(WS);
                        }
                    }

                    State = 378; Match(EQ);
                    State = 380;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 379; Match(WS);
                        }
                    }

                    State = 382; literal();
                    State = 386;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (NEWLINE - 212)) | (1L << (REMCOMMENT - 212)) | (1L << (COMMENT - 212)) | (1L << (WS - 212)))) != 0))
                    {
                        {
                            {
                                State = 383; endOfLine();
                            }
                        }
                        State = 388;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleAttributesContext : ParserRuleContext
        {
            public IReadOnlyList<EndOfLineContext> endOfLine()
            {
                return GetRuleContexts<EndOfLineContext>();
            }
            public EndOfLineContext endOfLine(int i)
            {
                return GetRuleContext<EndOfLineContext>(i);
            }
            public AttributeStmtContext attributeStmt(int i)
            {
                return GetRuleContext<AttributeStmtContext>(i);
            }
            public IReadOnlyList<AttributeStmtContext> attributeStmt()
            {
                return GetRuleContexts<AttributeStmtContext>();
            }
            public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleAttributes; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleAttributes(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleAttributes(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleAttributesContext moduleAttributes()
        {
            ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
            EnterRule(_localctx, 10, RULE_moduleAttributes);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 395;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 389; attributeStmt();
                                State = 391;
                                _errHandler.Sync(this);
                                _alt = 1;
                                do
                                {
                                    switch (_alt)
                                    {
                                        case 1:
                                            {
                                                {
                                                    State = 390; endOfLine();
                                                }
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                    State = 393;
                                    _errHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(_input, 18, _ctx);
                                } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                            }
                        }
                        State = 397;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == ATTRIBUTE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleDeclarationsContext : ParserRuleContext
        {
            public IReadOnlyList<EndOfLineContext> endOfLine()
            {
                return GetRuleContexts<EndOfLineContext>();
            }
            public EndOfLineContext endOfLine(int i)
            {
                return GetRuleContext<EndOfLineContext>(i);
            }
            public ModuleDeclarationsElementContext moduleDeclarationsElement(int i)
            {
                return GetRuleContext<ModuleDeclarationsElementContext>(i);
            }
            public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement()
            {
                return GetRuleContexts<ModuleDeclarationsElementContext>();
            }
            public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleDeclarations; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleDeclarations(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleDeclarations(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleDeclarationsContext moduleDeclarations()
        {
            ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
            EnterRule(_localctx, 12, RULE_moduleDeclarations);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 399; moduleDeclarationsElement();
                    State = 409;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 21, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 401;
                                    _errHandler.Sync(this);
                                    _alt = 1;
                                    do
                                    {
                                        switch (_alt)
                                        {
                                            case 1:
                                                {
                                                    {
                                                        State = 400; endOfLine();
                                                    }
                                                }
                                                break;
                                            default:
                                                throw new NoViableAltException(this);
                                        }
                                        State = 403;
                                        _errHandler.Sync(this);
                                        _alt = Interpreter.AdaptivePredict(_input, 20, _ctx);
                                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                                    State = 405; moduleDeclarationsElement();
                                }
                            }
                        }
                        State = 411;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 21, _ctx);
                    }
                    State = 415;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 22, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 412; endOfLine();
                                }
                            }
                        }
                        State = 417;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 22, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleOptionContext : ParserRuleContext
        {
            public ModuleOptionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleOption; } }

            public ModuleOptionContext() { }
            public virtual void CopyFrom(ModuleOptionContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class OptionExplicitStmtContext : ModuleOptionContext
        {
            public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
            public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class OptionBaseStmtContext : ModuleOptionContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
            public ITerminalNode SHORTLITERAL() { return GetToken(VBAParser.SHORTLITERAL, 0); }
            public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class OptionPrivateModuleStmtContext : ModuleOptionContext
        {
            public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
            public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class OptionCompareStmtContext : ModuleOptionContext
        {
            public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
            public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
            public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
            public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleOptionContext moduleOption()
        {
            ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
            EnterRule(_localctx, 14, RULE_moduleOption);
            int _la;
            try
            {
                State = 426;
                switch (_input.La(1))
                {
                    case OPTION_BASE:
                        _localctx = new OptionBaseStmtContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 418; Match(OPTION_BASE);
                            State = 419; Match(WS);
                            State = 420; Match(SHORTLITERAL);
                        }
                        break;
                    case OPTION_COMPARE:
                        _localctx = new OptionCompareStmtContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 421; Match(OPTION_COMPARE);
                            State = 422; Match(WS);
                            State = 423;
                            _la = _input.La(1);
                            if (!(_la == BINARY || _la == DATABASE || _la == TEXT))
                            {
                                _errHandler.RecoverInline(this);
                            }
                            Consume();
                        }
                        break;
                    case OPTION_EXPLICIT:
                        _localctx = new OptionExplicitStmtContext(_localctx);
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 424; Match(OPTION_EXPLICIT);
                        }
                        break;
                    case OPTION_PRIVATE_MODULE:
                        _localctx = new OptionPrivateModuleStmtContext(_localctx);
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 425; Match(OPTION_PRIVATE_MODULE);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleDeclarationsElementContext : ParserRuleContext
        {
            public CommentContext comment()
            {
                return GetRuleContext<CommentContext>(0);
            }
            public EnumerationStmtContext enumerationStmt()
            {
                return GetRuleContext<EnumerationStmtContext>(0);
            }
            public ConstStmtContext constStmt()
            {
                return GetRuleContext<ConstStmtContext>(0);
            }
            public TypeStmtContext typeStmt()
            {
                return GetRuleContext<TypeStmtContext>(0);
            }
            public EventStmtContext eventStmt()
            {
                return GetRuleContext<EventStmtContext>(0);
            }
            public VariableStmtContext variableStmt()
            {
                return GetRuleContext<VariableStmtContext>(0);
            }
            public ImplementsStmtContext implementsStmt()
            {
                return GetRuleContext<ImplementsStmtContext>(0);
            }
            public ModuleOptionContext moduleOption()
            {
                return GetRuleContext<ModuleOptionContext>(0);
            }
            public DeclareStmtContext declareStmt()
            {
                return GetRuleContext<DeclareStmtContext>(0);
            }
            public MacroStmtContext macroStmt()
            {
                return GetRuleContext<MacroStmtContext>(0);
            }
            public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleDeclarationsElementContext moduleDeclarationsElement()
        {
            ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
            EnterRule(_localctx, 16, RULE_moduleDeclarationsElement);
            try
            {
                State = 438;
                switch (Interpreter.AdaptivePredict(_input, 24, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 428; comment();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 429; declareStmt();
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 430; enumerationStmt();
                        }
                        break;

                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 431; eventStmt();
                        }
                        break;

                    case 5:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 432; constStmt();
                        }
                        break;

                    case 6:
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 433; implementsStmt();
                        }
                        break;

                    case 7:
                        EnterOuterAlt(_localctx, 7);
                        {
                            State = 434; variableStmt();
                        }
                        break;

                    case 8:
                        EnterOuterAlt(_localctx, 8);
                        {
                            State = 435; moduleOption();
                        }
                        break;

                    case 9:
                        EnterOuterAlt(_localctx, 9);
                        {
                            State = 436; typeStmt();
                        }
                        break;

                    case 10:
                        EnterOuterAlt(_localctx, 10);
                        {
                            State = 437; macroStmt();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroStmtContext : ParserRuleContext
        {
            public MacroConstStmtContext macroConstStmt()
            {
                return GetRuleContext<MacroConstStmtContext>(0);
            }
            public MacroIfThenElseStmtContext macroIfThenElseStmt()
            {
                return GetRuleContext<MacroIfThenElseStmtContext>(0);
            }
            public MacroStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroStmtContext macroStmt()
        {
            MacroStmtContext _localctx = new MacroStmtContext(_ctx, State);
            EnterRule(_localctx, 18, RULE_macroStmt);
            try
            {
                State = 442;
                switch (_input.La(1))
                {
                    case MACRO_CONST:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 440; macroConstStmt();
                        }
                        break;
                    case MACRO_IF:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 441; macroIfThenElseStmt();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleBodyContext : ParserRuleContext
        {
            public IReadOnlyList<EndOfLineContext> endOfLine()
            {
                return GetRuleContexts<EndOfLineContext>();
            }
            public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement()
            {
                return GetRuleContexts<ModuleBodyElementContext>();
            }
            public EndOfLineContext endOfLine(int i)
            {
                return GetRuleContext<EndOfLineContext>(i);
            }
            public ModuleBodyElementContext moduleBodyElement(int i)
            {
                return GetRuleContext<ModuleBodyElementContext>(i);
            }
            public ModuleBodyContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleBody; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleBody(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleBody(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleBodyContext moduleBody()
        {
            ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
            EnterRule(_localctx, 20, RULE_moduleBody);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 444; moduleBodyElement();
                    State = 454;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 27, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 446;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                    do
                                    {
                                        {
                                            {
                                                State = 445; endOfLine();
                                            }
                                        }
                                        State = 448;
                                        _errHandler.Sync(this);
                                        _la = _input.La(1);
                                    } while (((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (NEWLINE - 212)) | (1L << (REMCOMMENT - 212)) | (1L << (COMMENT - 212)) | (1L << (WS - 212)))) != 0));
                                    State = 450; moduleBodyElement();
                                }
                            }
                        }
                        State = 456;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 27, _ctx);
                    }
                    State = 460;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 28, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 457; endOfLine();
                                }
                            }
                        }
                        State = 462;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 28, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleBodyElementContext : ParserRuleContext
        {
            public PropertySetStmtContext propertySetStmt()
            {
                return GetRuleContext<PropertySetStmtContext>(0);
            }
            public PropertyLetStmtContext propertyLetStmt()
            {
                return GetRuleContext<PropertyLetStmtContext>(0);
            }
            public PropertyGetStmtContext propertyGetStmt()
            {
                return GetRuleContext<PropertyGetStmtContext>(0);
            }
            public MacroStmtContext macroStmt()
            {
                return GetRuleContext<MacroStmtContext>(0);
            }
            public SubStmtContext subStmt()
            {
                return GetRuleContext<SubStmtContext>(0);
            }
            public FunctionStmtContext functionStmt()
            {
                return GetRuleContext<FunctionStmtContext>(0);
            }
            public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleBodyElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleBodyElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleBodyElement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleBodyElementContext moduleBodyElement()
        {
            ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
            EnterRule(_localctx, 22, RULE_moduleBodyElement);
            try
            {
                State = 469;
                switch (Interpreter.AdaptivePredict(_input, 29, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 463; functionStmt();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 464; propertyGetStmt();
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 465; propertySetStmt();
                        }
                        break;

                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 466; propertyLetStmt();
                        }
                        break;

                    case 5:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 467; subStmt();
                        }
                        break;

                    case 6:
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 468; macroStmt();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AttributeStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public LiteralContext literal(int i)
            {
                return GetRuleContext<LiteralContext>(i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<LiteralContext> literal()
            {
                return GetRuleContexts<LiteralContext>();
            }
            public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public AttributeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_attributeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAttributeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAttributeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AttributeStmtContext attributeStmt()
        {
            AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
            EnterRule(_localctx, 24, RULE_attributeStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 471; Match(ATTRIBUTE);
                    State = 472; Match(WS);
                    State = 473; implicitCallStmt_InStmt();
                    State = 475;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 474; Match(WS);
                        }
                    }

                    State = 477; Match(EQ);
                    State = 479;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 478; Match(WS);
                        }
                    }

                    State = 481; literal();
                    State = 492;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 34, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 483;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 482; Match(WS);
                                        }
                                    }

                                    State = 485; Match(T__1);
                                    State = 487;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 486; Match(WS);
                                        }
                                    }

                                    State = 489; literal();
                                }
                            }
                        }
                        State = 494;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 34, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BlockContext : ParserRuleContext
        {
            public EndOfStatementContext endOfStatement(int i)
            {
                return GetRuleContext<EndOfStatementContext>(i);
            }
            public IReadOnlyList<BlockStmtContext> blockStmt()
            {
                return GetRuleContexts<BlockStmtContext>();
            }
            public IReadOnlyList<EndOfStatementContext> endOfStatement()
            {
                return GetRuleContexts<EndOfStatementContext>();
            }
            public BlockStmtContext blockStmt(int i)
            {
                return GetRuleContext<BlockStmtContext>(i);
            }
            public BlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_block; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBlock(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBlock(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BlockContext block()
        {
            BlockContext _localctx = new BlockContext(_ctx, State);
            EnterRule(_localctx, 26, RULE_block);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 495; blockStmt();
                    State = 501;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 35, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 496; endOfStatement();
                                    State = 497; blockStmt();
                                }
                            }
                        }
                        State = 503;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 35, _ctx);
                    }
                    State = 504; endOfStatement();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BlockStmtContext : ParserRuleContext
        {
            public GoToStmtContext goToStmt()
            {
                return GetRuleContext<GoToStmtContext>(0);
            }
            public LoadStmtContext loadStmt()
            {
                return GetRuleContext<LoadStmtContext>(0);
            }
            public ChdriveStmtContext chdriveStmt()
            {
                return GetRuleContext<ChdriveStmtContext>(0);
            }
            public EndStmtContext endStmt()
            {
                return GetRuleContext<EndStmtContext>(0);
            }
            public LetStmtContext letStmt()
            {
                return GetRuleContext<LetStmtContext>(0);
            }
            public FilecopyStmtContext filecopyStmt()
            {
                return GetRuleContext<FilecopyStmtContext>(0);
            }
            public RmdirStmtContext rmdirStmt()
            {
                return GetRuleContext<RmdirStmtContext>(0);
            }
            public RsetStmtContext rsetStmt()
            {
                return GetRuleContext<RsetStmtContext>(0);
            }
            public EraseStmtContext eraseStmt()
            {
                return GetRuleContext<EraseStmtContext>(0);
            }
            public ChdirStmtContext chdirStmt()
            {
                return GetRuleContext<ChdirStmtContext>(0);
            }
            public WriteStmtContext writeStmt()
            {
                return GetRuleContext<WriteStmtContext>(0);
            }
            public ExplicitCallStmtContext explicitCallStmt()
            {
                return GetRuleContext<ExplicitCallStmtContext>(0);
            }
            public RandomizeStmtContext randomizeStmt()
            {
                return GetRuleContext<RandomizeStmtContext>(0);
            }
            public ConstStmtContext constStmt()
            {
                return GetRuleContext<ConstStmtContext>(0);
            }
            public SelectCaseStmtContext selectCaseStmt()
            {
                return GetRuleContext<SelectCaseStmtContext>(0);
            }
            public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock()
            {
                return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
            }
            public MkdirStmtContext mkdirStmt()
            {
                return GetRuleContext<MkdirStmtContext>(0);
            }
            public RaiseEventStmtContext raiseEventStmt()
            {
                return GetRuleContext<RaiseEventStmtContext>(0);
            }
            public SavepictureStmtContext savepictureStmt()
            {
                return GetRuleContext<SavepictureStmtContext>(0);
            }
            public ExitStmtContext exitStmt()
            {
                return GetRuleContext<ExitStmtContext>(0);
            }
            public IfThenElseStmtContext ifThenElseStmt()
            {
                return GetRuleContext<IfThenElseStmtContext>(0);
            }
            public OpenStmtContext openStmt()
            {
                return GetRuleContext<OpenStmtContext>(0);
            }
            public SetattrStmtContext setattrStmt()
            {
                return GetRuleContext<SetattrStmtContext>(0);
            }
            public SaveSettingStmtContext saveSettingStmt()
            {
                return GetRuleContext<SaveSettingStmtContext>(0);
            }
            public AttributeStmtContext attributeStmt()
            {
                return GetRuleContext<AttributeStmtContext>(0);
            }
            public ForEachStmtContext forEachStmt()
            {
                return GetRuleContext<ForEachStmtContext>(0);
            }
            public ForNextStmtContext forNextStmt()
            {
                return GetRuleContext<ForNextStmtContext>(0);
            }
            public RedimStmtContext redimStmt()
            {
                return GetRuleContext<RedimStmtContext>(0);
            }
            public TimeStmtContext timeStmt()
            {
                return GetRuleContext<TimeStmtContext>(0);
            }
            public OnGoSubStmtContext onGoSubStmt()
            {
                return GetRuleContext<OnGoSubStmtContext>(0);
            }
            public SendkeysStmtContext sendkeysStmt()
            {
                return GetRuleContext<SendkeysStmtContext>(0);
            }
            public DeleteSettingStmtContext deleteSettingStmt()
            {
                return GetRuleContext<DeleteSettingStmtContext>(0);
            }
            public ErrorStmtContext errorStmt()
            {
                return GetRuleContext<ErrorStmtContext>(0);
            }
            public SetStmtContext setStmt()
            {
                return GetRuleContext<SetStmtContext>(0);
            }
            public WithStmtContext withStmt()
            {
                return GetRuleContext<WithStmtContext>(0);
            }
            public OnErrorStmtContext onErrorStmt()
            {
                return GetRuleContext<OnErrorStmtContext>(0);
            }
            public WhileWendStmtContext whileWendStmt()
            {
                return GetRuleContext<WhileWendStmtContext>(0);
            }
            public UnlockStmtContext unlockStmt()
            {
                return GetRuleContext<UnlockStmtContext>(0);
            }
            public StopStmtContext stopStmt()
            {
                return GetRuleContext<StopStmtContext>(0);
            }
            public NameStmtContext nameStmt()
            {
                return GetRuleContext<NameStmtContext>(0);
            }
            public LineInputStmtContext lineInputStmt()
            {
                return GetRuleContext<LineInputStmtContext>(0);
            }
            public DateStmtContext dateStmt()
            {
                return GetRuleContext<DateStmtContext>(0);
            }
            public InputStmtContext inputStmt()
            {
                return GetRuleContext<InputStmtContext>(0);
            }
            public ResetStmtContext resetStmt()
            {
                return GetRuleContext<ResetStmtContext>(0);
            }
            public ImplementsStmtContext implementsStmt()
            {
                return GetRuleContext<ImplementsStmtContext>(0);
            }
            public CloseStmtContext closeStmt()
            {
                return GetRuleContext<CloseStmtContext>(0);
            }
            public GoSubStmtContext goSubStmt()
            {
                return GetRuleContext<GoSubStmtContext>(0);
            }
            public KillStmtContext killStmt()
            {
                return GetRuleContext<KillStmtContext>(0);
            }
            public DeftypeStmtContext deftypeStmt()
            {
                return GetRuleContext<DeftypeStmtContext>(0);
            }
            public ReturnStmtContext returnStmt()
            {
                return GetRuleContext<ReturnStmtContext>(0);
            }
            public LockStmtContext lockStmt()
            {
                return GetRuleContext<LockStmtContext>(0);
            }
            public DoLoopStmtContext doLoopStmt()
            {
                return GetRuleContext<DoLoopStmtContext>(0);
            }
            public LineLabelContext lineLabel()
            {
                return GetRuleContext<LineLabelContext>(0);
            }
            public BeepStmtContext beepStmt()
            {
                return GetRuleContext<BeepStmtContext>(0);
            }
            public AppactivateStmtContext appactivateStmt()
            {
                return GetRuleContext<AppactivateStmtContext>(0);
            }
            public LsetStmtContext lsetStmt()
            {
                return GetRuleContext<LsetStmtContext>(0);
            }
            public MidStmtContext midStmt()
            {
                return GetRuleContext<MidStmtContext>(0);
            }
            public GetStmtContext getStmt()
            {
                return GetRuleContext<GetStmtContext>(0);
            }
            public OnGoToStmtContext onGoToStmt()
            {
                return GetRuleContext<OnGoToStmtContext>(0);
            }
            public WidthStmtContext widthStmt()
            {
                return GetRuleContext<WidthStmtContext>(0);
            }
            public PrintStmtContext printStmt()
            {
                return GetRuleContext<PrintStmtContext>(0);
            }
            public MacroStmtContext macroStmt()
            {
                return GetRuleContext<MacroStmtContext>(0);
            }
            public SeekStmtContext seekStmt()
            {
                return GetRuleContext<SeekStmtContext>(0);
            }
            public ResumeStmtContext resumeStmt()
            {
                return GetRuleContext<ResumeStmtContext>(0);
            }
            public VariableStmtContext variableStmt()
            {
                return GetRuleContext<VariableStmtContext>(0);
            }
            public PutStmtContext putStmt()
            {
                return GetRuleContext<PutStmtContext>(0);
            }
            public UnloadStmtContext unloadStmt()
            {
                return GetRuleContext<UnloadStmtContext>(0);
            }
            public BlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_blockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BlockStmtContext blockStmt()
        {
            BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
            EnterRule(_localctx, 28, RULE_blockStmt);
            try
            {
                State = 573;
                switch (Interpreter.AdaptivePredict(_input, 36, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 506; lineLabel();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 507; appactivateStmt();
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 508; attributeStmt();
                        }
                        break;

                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 509; beepStmt();
                        }
                        break;

                    case 5:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 510; chdirStmt();
                        }
                        break;

                    case 6:
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 511; chdriveStmt();
                        }
                        break;

                    case 7:
                        EnterOuterAlt(_localctx, 7);
                        {
                            State = 512; closeStmt();
                        }
                        break;

                    case 8:
                        EnterOuterAlt(_localctx, 8);
                        {
                            State = 513; constStmt();
                        }
                        break;

                    case 9:
                        EnterOuterAlt(_localctx, 9);
                        {
                            State = 514; dateStmt();
                        }
                        break;

                    case 10:
                        EnterOuterAlt(_localctx, 10);
                        {
                            State = 515; deleteSettingStmt();
                        }
                        break;

                    case 11:
                        EnterOuterAlt(_localctx, 11);
                        {
                            State = 516; deftypeStmt();
                        }
                        break;

                    case 12:
                        EnterOuterAlt(_localctx, 12);
                        {
                            State = 517; doLoopStmt();
                        }
                        break;

                    case 13:
                        EnterOuterAlt(_localctx, 13);
                        {
                            State = 518; endStmt();
                        }
                        break;

                    case 14:
                        EnterOuterAlt(_localctx, 14);
                        {
                            State = 519; eraseStmt();
                        }
                        break;

                    case 15:
                        EnterOuterAlt(_localctx, 15);
                        {
                            State = 520; errorStmt();
                        }
                        break;

                    case 16:
                        EnterOuterAlt(_localctx, 16);
                        {
                            State = 521; exitStmt();
                        }
                        break;

                    case 17:
                        EnterOuterAlt(_localctx, 17);
                        {
                            State = 522; explicitCallStmt();
                        }
                        break;

                    case 18:
                        EnterOuterAlt(_localctx, 18);
                        {
                            State = 523; filecopyStmt();
                        }
                        break;

                    case 19:
                        EnterOuterAlt(_localctx, 19);
                        {
                            State = 524; forEachStmt();
                        }
                        break;

                    case 20:
                        EnterOuterAlt(_localctx, 20);
                        {
                            State = 525; forNextStmt();
                        }
                        break;

                    case 21:
                        EnterOuterAlt(_localctx, 21);
                        {
                            State = 526; getStmt();
                        }
                        break;

                    case 22:
                        EnterOuterAlt(_localctx, 22);
                        {
                            State = 527; goSubStmt();
                        }
                        break;

                    case 23:
                        EnterOuterAlt(_localctx, 23);
                        {
                            State = 528; goToStmt();
                        }
                        break;

                    case 24:
                        EnterOuterAlt(_localctx, 24);
                        {
                            State = 529; ifThenElseStmt();
                        }
                        break;

                    case 25:
                        EnterOuterAlt(_localctx, 25);
                        {
                            State = 530; implementsStmt();
                        }
                        break;

                    case 26:
                        EnterOuterAlt(_localctx, 26);
                        {
                            State = 531; inputStmt();
                        }
                        break;

                    case 27:
                        EnterOuterAlt(_localctx, 27);
                        {
                            State = 532; killStmt();
                        }
                        break;

                    case 28:
                        EnterOuterAlt(_localctx, 28);
                        {
                            State = 533; letStmt();
                        }
                        break;

                    case 29:
                        EnterOuterAlt(_localctx, 29);
                        {
                            State = 534; lineInputStmt();
                        }
                        break;

                    case 30:
                        EnterOuterAlt(_localctx, 30);
                        {
                            State = 535; loadStmt();
                        }
                        break;

                    case 31:
                        EnterOuterAlt(_localctx, 31);
                        {
                            State = 536; lockStmt();
                        }
                        break;

                    case 32:
                        EnterOuterAlt(_localctx, 32);
                        {
                            State = 537; lsetStmt();
                        }
                        break;

                    case 33:
                        EnterOuterAlt(_localctx, 33);
                        {
                            State = 538; macroStmt();
                        }
                        break;

                    case 34:
                        EnterOuterAlt(_localctx, 34);
                        {
                            State = 539; midStmt();
                        }
                        break;

                    case 35:
                        EnterOuterAlt(_localctx, 35);
                        {
                            State = 540; mkdirStmt();
                        }
                        break;

                    case 36:
                        EnterOuterAlt(_localctx, 36);
                        {
                            State = 541; nameStmt();
                        }
                        break;

                    case 37:
                        EnterOuterAlt(_localctx, 37);
                        {
                            State = 542; onErrorStmt();
                        }
                        break;

                    case 38:
                        EnterOuterAlt(_localctx, 38);
                        {
                            State = 543; onGoToStmt();
                        }
                        break;

                    case 39:
                        EnterOuterAlt(_localctx, 39);
                        {
                            State = 544; onGoSubStmt();
                        }
                        break;

                    case 40:
                        EnterOuterAlt(_localctx, 40);
                        {
                            State = 545; openStmt();
                        }
                        break;

                    case 41:
                        EnterOuterAlt(_localctx, 41);
                        {
                            State = 546; printStmt();
                        }
                        break;

                    case 42:
                        EnterOuterAlt(_localctx, 42);
                        {
                            State = 547; putStmt();
                        }
                        break;

                    case 43:
                        EnterOuterAlt(_localctx, 43);
                        {
                            State = 548; raiseEventStmt();
                        }
                        break;

                    case 44:
                        EnterOuterAlt(_localctx, 44);
                        {
                            State = 549; randomizeStmt();
                        }
                        break;

                    case 45:
                        EnterOuterAlt(_localctx, 45);
                        {
                            State = 550; redimStmt();
                        }
                        break;

                    case 46:
                        EnterOuterAlt(_localctx, 46);
                        {
                            State = 551; resetStmt();
                        }
                        break;

                    case 47:
                        EnterOuterAlt(_localctx, 47);
                        {
                            State = 552; resumeStmt();
                        }
                        break;

                    case 48:
                        EnterOuterAlt(_localctx, 48);
                        {
                            State = 553; returnStmt();
                        }
                        break;

                    case 49:
                        EnterOuterAlt(_localctx, 49);
                        {
                            State = 554; rmdirStmt();
                        }
                        break;

                    case 50:
                        EnterOuterAlt(_localctx, 50);
                        {
                            State = 555; rsetStmt();
                        }
                        break;

                    case 51:
                        EnterOuterAlt(_localctx, 51);
                        {
                            State = 556; savepictureStmt();
                        }
                        break;

                    case 52:
                        EnterOuterAlt(_localctx, 52);
                        {
                            State = 557; saveSettingStmt();
                        }
                        break;

                    case 53:
                        EnterOuterAlt(_localctx, 53);
                        {
                            State = 558; seekStmt();
                        }
                        break;

                    case 54:
                        EnterOuterAlt(_localctx, 54);
                        {
                            State = 559; selectCaseStmt();
                        }
                        break;

                    case 55:
                        EnterOuterAlt(_localctx, 55);
                        {
                            State = 560; sendkeysStmt();
                        }
                        break;

                    case 56:
                        EnterOuterAlt(_localctx, 56);
                        {
                            State = 561; setattrStmt();
                        }
                        break;

                    case 57:
                        EnterOuterAlt(_localctx, 57);
                        {
                            State = 562; setStmt();
                        }
                        break;

                    case 58:
                        EnterOuterAlt(_localctx, 58);
                        {
                            State = 563; stopStmt();
                        }
                        break;

                    case 59:
                        EnterOuterAlt(_localctx, 59);
                        {
                            State = 564; timeStmt();
                        }
                        break;

                    case 60:
                        EnterOuterAlt(_localctx, 60);
                        {
                            State = 565; unloadStmt();
                        }
                        break;

                    case 61:
                        EnterOuterAlt(_localctx, 61);
                        {
                            State = 566; unlockStmt();
                        }
                        break;

                    case 62:
                        EnterOuterAlt(_localctx, 62);
                        {
                            State = 567; variableStmt();
                        }
                        break;

                    case 63:
                        EnterOuterAlt(_localctx, 63);
                        {
                            State = 568; whileWendStmt();
                        }
                        break;

                    case 64:
                        EnterOuterAlt(_localctx, 64);
                        {
                            State = 569; widthStmt();
                        }
                        break;

                    case 65:
                        EnterOuterAlt(_localctx, 65);
                        {
                            State = 570; withStmt();
                        }
                        break;

                    case 66:
                        EnterOuterAlt(_localctx, 66);
                        {
                            State = 571; writeStmt();
                        }
                        break;

                    case 67:
                        EnterOuterAlt(_localctx, 67);
                        {
                            State = 572; implicitCallStmt_InBlock();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AppactivateStmtContext : ParserRuleContext
        {
            public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public AppactivateStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_appactivateStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAppactivateStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAppactivateStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAppactivateStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AppactivateStmtContext appactivateStmt()
        {
            AppactivateStmtContext _localctx = new AppactivateStmtContext(_ctx, State);
            EnterRule(_localctx, 30, RULE_appactivateStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 575; Match(APPACTIVATE);
                    State = 576; Match(WS);
                    State = 577; valueStmt(0);
                    State = 586;
                    switch (Interpreter.AdaptivePredict(_input, 39, _ctx))
                    {
                        case 1:
                            {
                                State = 579;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 578; Match(WS);
                                    }
                                }

                                State = 581; Match(T__1);
                                State = 583;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 582; Match(WS);
                                    }
                                }

                                State = 585; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BeepStmtContext : ParserRuleContext
        {
            public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
            public BeepStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_beepStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBeepStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBeepStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BeepStmtContext beepStmt()
        {
            BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
            EnterRule(_localctx, 32, RULE_beepStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 588; Match(BEEP);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ChdirStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
            public ChdirStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_chdirStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterChdirStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitChdirStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitChdirStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ChdirStmtContext chdirStmt()
        {
            ChdirStmtContext _localctx = new ChdirStmtContext(_ctx, State);
            EnterRule(_localctx, 34, RULE_chdirStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 590; Match(CHDIR);
                    State = 591; Match(WS);
                    State = 592; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ChdriveStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
            public ChdriveStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_chdriveStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterChdriveStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitChdriveStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitChdriveStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ChdriveStmtContext chdriveStmt()
        {
            ChdriveStmtContext _localctx = new ChdriveStmtContext(_ctx, State);
            EnterRule(_localctx, 36, RULE_chdriveStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 594; Match(CHDRIVE);
                    State = 595; Match(WS);
                    State = 596; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CloseStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
            public IReadOnlyList<FileNumberContext> fileNumber()
            {
                return GetRuleContexts<FileNumberContext>();
            }
            public FileNumberContext fileNumber(int i)
            {
                return GetRuleContext<FileNumberContext>(i);
            }
            public CloseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_closeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCloseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCloseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CloseStmtContext closeStmt()
        {
            CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
            EnterRule(_localctx, 38, RULE_closeStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 598; Match(CLOSE);
                    State = 614;
                    switch (Interpreter.AdaptivePredict(_input, 43, _ctx))
                    {
                        case 1:
                            {
                                State = 599; Match(WS);
                                State = 600; fileNumber();
                                State = 611;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 42, _ctx);
                                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                                {
                                    if (_alt == 1)
                                    {
                                        {
                                            {
                                                State = 602;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 601; Match(WS);
                                                    }
                                                }

                                                State = 604; Match(T__1);
                                                State = 606;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 605; Match(WS);
                                                    }
                                                }

                                                State = 608; fileNumber();
                                            }
                                        }
                                    }
                                    State = 613;
                                    _errHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(_input, 42, _ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ConstStmtContext : ParserRuleContext
        {
            public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ConstSubStmtContext> constSubStmt()
            {
                return GetRuleContexts<ConstSubStmtContext>();
            }
            public ConstSubStmtContext constSubStmt(int i)
            {
                return GetRuleContext<ConstSubStmtContext>(i);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ConstStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_constStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterConstStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitConstStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ConstStmtContext constStmt()
        {
            ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
            EnterRule(_localctx, 40, RULE_constStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 619;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 616; visibility();
                            State = 617; Match(WS);
                        }
                    }

                    State = 621; Match(CONST);
                    State = 622; Match(WS);
                    State = 623; constSubStmt();
                    State = 634;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 47, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 625;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 624; Match(WS);
                                        }
                                    }

                                    State = 627; Match(T__1);
                                    State = 629;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 628; Match(WS);
                                        }
                                    }

                                    State = 631; constSubStmt();
                                }
                            }
                        }
                        State = 636;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 47, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ConstSubStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_constSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterConstSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitConstSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ConstSubStmtContext constSubStmt()
        {
            ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
            EnterRule(_localctx, 42, RULE_constSubStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 637; ambiguousIdentifier();
                    State = 639;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 638; typeHint();
                        }
                    }

                    State = 643;
                    switch (Interpreter.AdaptivePredict(_input, 49, _ctx))
                    {
                        case 1:
                            {
                                State = 641; Match(WS);
                                State = 642; asTypeClause();
                            }
                            break;
                    }
                    State = 646;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 645; Match(WS);
                        }
                    }

                    State = 648; Match(EQ);
                    State = 650;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 649; Match(WS);
                        }
                    }

                    State = 652; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DateStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
            public DateStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_dateStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDateStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDateStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DateStmtContext dateStmt()
        {
            DateStmtContext _localctx = new DateStmtContext(_ctx, State);
            EnterRule(_localctx, 44, RULE_dateStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 654; Match(DATE);
                    State = 656;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 655; Match(WS);
                        }
                    }

                    State = 658; Match(EQ);
                    State = 660;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 659; Match(WS);
                        }
                    }

                    State = 662; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DeclareStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode STRINGLITERAL(int i)
            {
                return GetToken(VBAParser.STRINGLITERAL, i);
            }
            public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
            public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
            public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public TypeHintContext typeHint(int i)
            {
                return GetRuleContext<TypeHintContext>(i);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
            public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<TypeHintContext> typeHint()
            {
                return GetRuleContexts<TypeHintContext>();
            }
            public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
            public DeclareStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_declareStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDeclareStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDeclareStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DeclareStmtContext declareStmt()
        {
            DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
            EnterRule(_localctx, 46, RULE_declareStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 667;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 664; visibility();
                            State = 665; Match(WS);
                        }
                    }

                    State = 669; Match(DECLARE);
                    State = 670; Match(WS);
                    State = 673;
                    _la = _input.La(1);
                    if (_la == PTRSAFE)
                    {
                        {
                            State = 671; Match(PTRSAFE);
                            State = 672; Match(WS);
                        }
                    }

                    State = 680;
                    switch (_input.La(1))
                    {
                        case FUNCTION:
                            {
                                {
                                    State = 675; Match(FUNCTION);
                                    State = 677;
                                    _la = _input.La(1);
                                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                                    {
                                        {
                                            State = 676; typeHint();
                                        }
                                    }

                                }
                            }
                            break;
                        case SUB:
                            {
                                State = 679; Match(SUB);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 682; Match(WS);
                    State = 683; ambiguousIdentifier();
                    State = 685;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 684; typeHint();
                        }
                    }

                    State = 687; Match(WS);
                    State = 688; Match(LIB);
                    State = 689; Match(WS);
                    State = 690; Match(STRINGLITERAL);
                    State = 695;
                    switch (Interpreter.AdaptivePredict(_input, 59, _ctx))
                    {
                        case 1:
                            {
                                State = 691; Match(WS);
                                State = 692; Match(ALIAS);
                                State = 693; Match(WS);
                                State = 694; Match(STRINGLITERAL);
                            }
                            break;
                    }
                    State = 701;
                    switch (Interpreter.AdaptivePredict(_input, 61, _ctx))
                    {
                        case 1:
                            {
                                State = 698;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 697; Match(WS);
                                    }
                                }

                                State = 700; argList();
                            }
                            break;
                    }
                    State = 705;
                    switch (Interpreter.AdaptivePredict(_input, 62, _ctx))
                    {
                        case 1:
                            {
                                State = 703; Match(WS);
                                State = 704; asTypeClause();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DeftypeStmtContext : ParserRuleContext
        {
            public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
            public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
            public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
            public IReadOnlyList<LetterrangeContext> letterrange()
            {
                return GetRuleContexts<LetterrangeContext>();
            }
            public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
            public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
            public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
            public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
            public LetterrangeContext letterrange(int i)
            {
                return GetRuleContext<LetterrangeContext>(i);
            }
            public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
            public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
            public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
            public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
            public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_deftypeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDeftypeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDeftypeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DeftypeStmtContext deftypeStmt()
        {
            DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
            EnterRule(_localctx, 48, RULE_deftypeStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 707;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                    State = 708; Match(WS);
                    State = 709; letterrange();
                    State = 720;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 65, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 711;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 710; Match(WS);
                                        }
                                    }

                                    State = 713; Match(T__1);
                                    State = 715;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 714; Match(WS);
                                        }
                                    }

                                    State = 717; letterrange();
                                }
                            }
                        }
                        State = 722;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 65, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DeleteSettingStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DeleteSettingStmtContext deleteSettingStmt()
        {
            DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
            EnterRule(_localctx, 50, RULE_deleteSettingStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 723; Match(DELETESETTING);
                    State = 724; Match(WS);
                    State = 725; valueStmt(0);
                    State = 727;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 726; Match(WS);
                        }
                    }

                    State = 729; Match(T__1);
                    State = 731;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 730; Match(WS);
                        }
                    }

                    State = 733; valueStmt(0);
                    State = 742;
                    switch (Interpreter.AdaptivePredict(_input, 70, _ctx))
                    {
                        case 1:
                            {
                                State = 735;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 734; Match(WS);
                                    }
                                }

                                State = 737; Match(T__1);
                                State = 739;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 738; Match(WS);
                                    }
                                }

                                State = 741; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DoLoopStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
            public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
            public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_doLoopStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDoLoopStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDoLoopStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DoLoopStmtContext doLoopStmt()
        {
            DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
            EnterRule(_localctx, 52, RULE_doLoopStmt);
            int _la;
            try
            {
                State = 771;
                switch (Interpreter.AdaptivePredict(_input, 73, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 744; Match(DO);
                            State = 745; endOfStatement();
                            State = 747;
                            switch (Interpreter.AdaptivePredict(_input, 71, _ctx))
                            {
                                case 1:
                                    {
                                        State = 746; block();
                                    }
                                    break;
                            }
                            State = 749; Match(LOOP);
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 751; Match(DO);
                            State = 752; Match(WS);
                            State = 753;
                            _la = _input.La(1);
                            if (!(_la == UNTIL || _la == WHILE))
                            {
                                _errHandler.RecoverInline(this);
                            }
                            Consume();
                            State = 754; Match(WS);
                            State = 755; valueStmt(0);
                            State = 756; endOfStatement();
                            State = 758;
                            switch (Interpreter.AdaptivePredict(_input, 72, _ctx))
                            {
                                case 1:
                                    {
                                        State = 757; block();
                                    }
                                    break;
                            }
                            State = 760; Match(LOOP);
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 762; Match(DO);
                            State = 763; endOfStatement();
                            State = 764; block();
                            State = 765; Match(LOOP);
                            State = 766; Match(WS);
                            State = 767;
                            _la = _input.La(1);
                            if (!(_la == UNTIL || _la == WHILE))
                            {
                                _errHandler.RecoverInline(this);
                            }
                            Consume();
                            State = 768; Match(WS);
                            State = 769; valueStmt(0);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EndStmtContext : ParserRuleContext
        {
            public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
            public EndStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_endStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEndStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEndStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EndStmtContext endStmt()
        {
            EndStmtContext _localctx = new EndStmtContext(_ctx, State);
            EnterRule(_localctx, 54, RULE_endStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 773; Match(END);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EnumerationStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant()
            {
                return GetRuleContexts<EnumerationStmt_ConstantContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i)
            {
                return GetRuleContext<EnumerationStmt_ConstantContext>(i);
            }
            public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
            public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_enumerationStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEnumerationStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEnumerationStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EnumerationStmtContext enumerationStmt()
        {
            EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
            EnterRule(_localctx, 56, RULE_enumerationStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 778;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 775; visibility();
                            State = 776; Match(WS);
                        }
                    }

                    State = 780; Match(ENUM);
                    State = 781; Match(WS);
                    State = 782; ambiguousIdentifier();
                    State = 783; endOfStatement();
                    State = 787;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            {
                                State = 784; enumerationStmt_Constant();
                            }
                        }
                        State = 789;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 790; Match(END_ENUM);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EnumerationStmt_ConstantContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EnumerationStmt_ConstantContext enumerationStmt_Constant()
        {
            EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
            EnterRule(_localctx, 58, RULE_enumerationStmt_Constant);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 792; ambiguousIdentifier();
                    State = 801;
                    switch (Interpreter.AdaptivePredict(_input, 78, _ctx))
                    {
                        case 1:
                            {
                                State = 794;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 793; Match(WS);
                                    }
                                }

                                State = 796; Match(EQ);
                                State = 798;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 797; Match(WS);
                                    }
                                }

                                State = 800; valueStmt(0);
                            }
                            break;
                    }
                    State = 803; endOfStatement();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EraseStmtContext : ParserRuleContext
        {
            public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public EraseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_eraseStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEraseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEraseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EraseStmtContext eraseStmt()
        {
            EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
            EnterRule(_localctx, 60, RULE_eraseStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 805; Match(ERASE);
                    State = 806; Match(WS);
                    State = 807; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ErrorStmtContext : ParserRuleContext
        {
            public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ErrorStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_errorStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterErrorStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitErrorStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ErrorStmtContext errorStmt()
        {
            ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
            EnterRule(_localctx, 62, RULE_errorStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 809; Match(ERROR);
                    State = 810; Match(WS);
                    State = 811; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EventStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
            public EventStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_eventStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEventStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEventStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EventStmtContext eventStmt()
        {
            EventStmtContext _localctx = new EventStmtContext(_ctx, State);
            EnterRule(_localctx, 64, RULE_eventStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 816;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 813; visibility();
                            State = 814; Match(WS);
                        }
                    }

                    State = 818; Match(EVENT);
                    State = 819; Match(WS);
                    State = 820; ambiguousIdentifier();
                    State = 822;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 821; Match(WS);
                        }
                    }

                    State = 824; argList();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ExitStmtContext : ParserRuleContext
        {
            public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
            public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
            public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
            public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
            public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
            public ExitStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_exitStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterExitStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitExitStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ExitStmtContext exitStmt()
        {
            ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
            EnterRule(_localctx, 66, RULE_exitStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 826;
                    _la = _input.La(1);
                    if (!(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (EXIT_DO - 68)) | (1L << (EXIT_FOR - 68)) | (1L << (EXIT_FUNCTION - 68)) | (1L << (EXIT_PROPERTY - 68)) | (1L << (EXIT_SUB - 68)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FilecopyStmtContext : ParserRuleContext
        {
            public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_filecopyStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterFilecopyStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitFilecopyStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FilecopyStmtContext filecopyStmt()
        {
            FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
            EnterRule(_localctx, 68, RULE_filecopyStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 828; Match(FILECOPY);
                    State = 829; Match(WS);
                    State = 830; valueStmt(0);
                    State = 832;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 831; Match(WS);
                        }
                    }

                    State = 834; Match(T__1);
                    State = 836;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 835; Match(WS);
                        }
                    }

                    State = 838; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ForEachStmtContext : ParserRuleContext
        {
            public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier()
            {
                return GetRuleContexts<AmbiguousIdentifierContext>();
            }
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public AmbiguousIdentifierContext ambiguousIdentifier(int i)
            {
                return GetRuleContext<AmbiguousIdentifierContext>(i);
            }
            public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
            public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
            public ForEachStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_forEachStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterForEachStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitForEachStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ForEachStmtContext forEachStmt()
        {
            ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
            EnterRule(_localctx, 70, RULE_forEachStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 840; Match(FOR);
                    State = 841; Match(WS);
                    State = 842; Match(EACH);
                    State = 843; Match(WS);
                    State = 844; ambiguousIdentifier();
                    State = 846;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 845; typeHint();
                        }
                    }

                    State = 848; Match(WS);
                    State = 849; Match(IN);
                    State = 850; Match(WS);
                    State = 851; valueStmt(0);
                    State = 852; endOfStatement();
                    State = 854;
                    switch (Interpreter.AdaptivePredict(_input, 84, _ctx))
                    {
                        case 1:
                            {
                                State = 853; block();
                            }
                            break;
                    }
                    State = 856; Match(NEXT);
                    State = 859;
                    switch (Interpreter.AdaptivePredict(_input, 85, _ctx))
                    {
                        case 1:
                            {
                                State = 857; Match(WS);
                                State = 858; ambiguousIdentifier();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ForNextStmtContext : ParserRuleContext
        {
            public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier()
            {
                return GetRuleContexts<AmbiguousIdentifierContext>();
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public AmbiguousIdentifierContext ambiguousIdentifier(int i)
            {
                return GetRuleContext<AmbiguousIdentifierContext>(i);
            }
            public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public ForNextStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_forNextStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterForNextStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitForNextStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ForNextStmtContext forNextStmt()
        {
            ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
            EnterRule(_localctx, 72, RULE_forNextStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 861; Match(FOR);
                    State = 862; Match(WS);
                    State = 863; ambiguousIdentifier();
                    State = 865;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 864; typeHint();
                        }
                    }

                    State = 869;
                    switch (Interpreter.AdaptivePredict(_input, 87, _ctx))
                    {
                        case 1:
                            {
                                State = 867; Match(WS);
                                State = 868; asTypeClause();
                            }
                            break;
                    }
                    State = 872;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 871; Match(WS);
                        }
                    }

                    State = 874; Match(EQ);
                    State = 876;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 875; Match(WS);
                        }
                    }

                    State = 878; valueStmt(0);
                    State = 879; Match(WS);
                    State = 880; Match(TO);
                    State = 881; Match(WS);
                    State = 882; valueStmt(0);
                    State = 887;
                    switch (Interpreter.AdaptivePredict(_input, 90, _ctx))
                    {
                        case 1:
                            {
                                State = 883; Match(WS);
                                State = 884; Match(STEP);
                                State = 885; Match(WS);
                                State = 886; valueStmt(0);
                            }
                            break;
                    }
                    State = 889; endOfStatement();
                    State = 891;
                    switch (Interpreter.AdaptivePredict(_input, 91, _ctx))
                    {
                        case 1:
                            {
                                State = 890; block();
                            }
                            break;
                    }
                    State = 893; Match(NEXT);
                    State = 896;
                    switch (Interpreter.AdaptivePredict(_input, 92, _ctx))
                    {
                        case 1:
                            {
                                State = 894; Match(WS);
                                State = 895; ambiguousIdentifier();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FunctionStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public FunctionStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_functionStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterFunctionStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitFunctionStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FunctionStmtContext functionStmt()
        {
            FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
            EnterRule(_localctx, 74, RULE_functionStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 901;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 898; visibility();
                            State = 899; Match(WS);
                        }
                    }

                    State = 905;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 903; Match(STATIC);
                            State = 904; Match(WS);
                        }
                    }

                    State = 907; Match(FUNCTION);
                    State = 909;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 908; Match(WS);
                        }
                    }

                    State = 911; ambiguousIdentifier();
                    State = 913;
                    switch (Interpreter.AdaptivePredict(_input, 96, _ctx))
                    {
                        case 1:
                            {
                                State = 912; typeHint();
                            }
                            break;
                    }
                    State = 919;
                    switch (Interpreter.AdaptivePredict(_input, 98, _ctx))
                    {
                        case 1:
                            {
                                State = 916;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 915; Match(WS);
                                    }
                                }

                                State = 918; argList();
                            }
                            break;
                    }
                    State = 925;
                    switch (Interpreter.AdaptivePredict(_input, 100, _ctx))
                    {
                        case 1:
                            {
                                State = 922;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 921; Match(WS);
                                    }
                                }

                                State = 924; asTypeClause();
                            }
                            break;
                    }
                    State = 927; endOfStatement();
                    State = 929;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 928; block();
                        }
                    }

                    State = 931; Match(END_FUNCTION);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class GetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public GetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_getStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterGetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitGetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public GetStmtContext getStmt()
        {
            GetStmtContext _localctx = new GetStmtContext(_ctx, State);
            EnterRule(_localctx, 76, RULE_getStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 933; Match(GET);
                    State = 934; Match(WS);
                    State = 935; fileNumber();
                    State = 937;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 936; Match(WS);
                        }
                    }

                    State = 939; Match(T__1);
                    State = 941;
                    switch (Interpreter.AdaptivePredict(_input, 103, _ctx))
                    {
                        case 1:
                            {
                                State = 940; Match(WS);
                            }
                            break;
                    }
                    State = 944;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (LPAREN - 194)) | (1L << (MINUS - 194)) | (1L << (STRINGLITERAL - 194)) | (1L << (OCTLITERAL - 194)) | (1L << (HEXLITERAL - 194)) | (1L << (SHORTLITERAL - 194)) | (1L << (INTEGERLITERAL - 194)) | (1L << (DOUBLELITERAL - 194)) | (1L << (DATELITERAL - 194)) | (1L << (IDENTIFIER - 194)))) != 0))
                    {
                        {
                            State = 943; valueStmt(0);
                        }
                    }

                    State = 947;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 946; Match(WS);
                        }
                    }

                    State = 949; Match(T__1);
                    State = 951;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 950; Match(WS);
                        }
                    }

                    State = 953; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class GoSubStmtContext : ParserRuleContext
        {
            public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public GoSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_goSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterGoSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitGoSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public GoSubStmtContext goSubStmt()
        {
            GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
            EnterRule(_localctx, 78, RULE_goSubStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 955; Match(GOSUB);
                    State = 956; Match(WS);
                    State = 957; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class GoToStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
            public GoToStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_goToStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterGoToStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitGoToStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public GoToStmtContext goToStmt()
        {
            GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
            EnterRule(_localctx, 80, RULE_goToStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 959; Match(GOTO);
                    State = 960; Match(WS);
                    State = 961; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfThenElseStmtContext : ParserRuleContext
        {
            public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifThenElseStmt; } }

            public IfThenElseStmtContext() { }
            public virtual void CopyFrom(IfThenElseStmtContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class BlockIfThenElseContext : IfThenElseStmtContext
        {
            public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i)
            {
                return GetRuleContext<IfElseIfBlockStmtContext>(i);
            }
            public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
            public IReadOnlyList<IfElseIfBlockStmtContext> ifElseIfBlockStmt()
            {
                return GetRuleContexts<IfElseIfBlockStmtContext>();
            }
            public IfBlockStmtContext ifBlockStmt()
            {
                return GetRuleContext<IfBlockStmtContext>(0);
            }
            public IfElseBlockStmtContext ifElseBlockStmt()
            {
                return GetRuleContext<IfElseBlockStmtContext>(0);
            }
            public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class InlineIfThenElseContext : IfThenElseStmtContext
        {
            public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
            public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<BlockStmtContext> blockStmt()
            {
                return GetRuleContexts<BlockStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public BlockStmtContext blockStmt(int i)
            {
                return GetRuleContext<BlockStmtContext>(i);
            }
            public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfThenElseStmtContext ifThenElseStmt()
        {
            IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
            EnterRule(_localctx, 82, RULE_ifThenElseStmt);
            int _la;
            try
            {
                State = 988;
                switch (Interpreter.AdaptivePredict(_input, 110, _ctx))
                {
                    case 1:
                        _localctx = new InlineIfThenElseContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 963; Match(IF);
                            State = 964; Match(WS);
                            State = 965; ifConditionStmt();
                            State = 966; Match(WS);
                            State = 967; Match(THEN);
                            State = 968; Match(WS);
                            State = 969; blockStmt();
                            State = 974;
                            switch (Interpreter.AdaptivePredict(_input, 107, _ctx))
                            {
                                case 1:
                                    {
                                        State = 970; Match(WS);
                                        State = 971; Match(ELSE);
                                        State = 972; Match(WS);
                                        State = 973; blockStmt();
                                    }
                                    break;
                            }
                        }
                        break;

                    case 2:
                        _localctx = new BlockIfThenElseContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 976; ifBlockStmt();
                            State = 980;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                            while (_la == ELSEIF)
                            {
                                {
                                    {
                                        State = 977; ifElseIfBlockStmt();
                                    }
                                }
                                State = 982;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                            }
                            State = 984;
                            _la = _input.La(1);
                            if (_la == ELSE)
                            {
                                {
                                    State = 983; ifElseBlockStmt();
                                }
                            }

                            State = 986; Match(END_IF);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfBlockStmtContext : ParserRuleContext
        {
            public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterIfBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitIfBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfBlockStmtContext ifBlockStmt()
        {
            IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 84, RULE_ifBlockStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 990; Match(IF);
                    State = 991; Match(WS);
                    State = 992; ifConditionStmt();
                    State = 993; Match(WS);
                    State = 994; Match(THEN);
                    State = 995; endOfStatement();
                    State = 997;
                    switch (Interpreter.AdaptivePredict(_input, 111, _ctx))
                    {
                        case 1:
                            {
                                State = 996; block();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfConditionStmtContext : ParserRuleContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifConditionStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterIfConditionStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitIfConditionStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfConditionStmtContext ifConditionStmt()
        {
            IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
            EnterRule(_localctx, 86, RULE_ifConditionStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 999; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfElseIfBlockStmtContext : ParserRuleContext
        {
            public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfElseIfBlockStmtContext ifElseIfBlockStmt()
        {
            IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 88, RULE_ifElseIfBlockStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1001; Match(ELSEIF);
                    State = 1002; Match(WS);
                    State = 1003; ifConditionStmt();
                    State = 1004; Match(WS);
                    State = 1005; Match(THEN);
                    State = 1006; endOfStatement();
                    State = 1008;
                    switch (Interpreter.AdaptivePredict(_input, 112, _ctx))
                    {
                        case 1:
                            {
                                State = 1007; block();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfElseBlockStmtContext : ParserRuleContext
        {
            public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfElseBlockStmtContext ifElseBlockStmt()
        {
            IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 90, RULE_ifElseBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1010; Match(ELSE);
                    State = 1011; endOfStatement();
                    State = 1013;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 1012; block();
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ImplementsStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
            public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_implementsStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterImplementsStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitImplementsStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ImplementsStmtContext implementsStmt()
        {
            ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
            EnterRule(_localctx, 92, RULE_implementsStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1015; Match(IMPLEMENTS);
                    State = 1016; Match(WS);
                    State = 1017; ambiguousIdentifier();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class InputStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public InputStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_inputStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterInputStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitInputStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public InputStmtContext inputStmt()
        {
            InputStmtContext _localctx = new InputStmtContext(_ctx, State);
            EnterRule(_localctx, 94, RULE_inputStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1019; Match(INPUT);
                    State = 1020; Match(WS);
                    State = 1021; fileNumber();
                    State = 1030;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 1023;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 1022; Match(WS);
                                            }
                                        }

                                        State = 1025; Match(T__1);
                                        State = 1027;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 1026; Match(WS);
                                            }
                                        }

                                        State = 1029; valueStmt(0);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 1032;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 116, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class KillStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
            public KillStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_killStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterKillStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitKillStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public KillStmtContext killStmt()
        {
            KillStmtContext _localctx = new KillStmtContext(_ctx, State);
            EnterRule(_localctx, 96, RULE_killStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1034; Match(KILL);
                    State = 1035; Match(WS);
                    State = 1036; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
            public LetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_letStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LetStmtContext letStmt()
        {
            LetStmtContext _localctx = new LetStmtContext(_ctx, State);
            EnterRule(_localctx, 98, RULE_letStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1040;
                    switch (Interpreter.AdaptivePredict(_input, 117, _ctx))
                    {
                        case 1:
                            {
                                State = 1038; Match(LET);
                                State = 1039; Match(WS);
                            }
                            break;
                    }
                    State = 1042; implicitCallStmt_InStmt();
                    State = 1044;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1043; Match(WS);
                        }
                    }

                    State = 1046; Match(EQ);
                    State = 1048;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1047; Match(WS);
                        }
                    }

                    State = 1050; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LineInputStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
            public LineInputStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lineInputStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLineInputStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLineInputStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LineInputStmtContext lineInputStmt()
        {
            LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
            EnterRule(_localctx, 100, RULE_lineInputStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1052; Match(LINE_INPUT);
                    State = 1053; Match(WS);
                    State = 1054; fileNumber();
                    State = 1056;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1055; Match(WS);
                        }
                    }

                    State = 1058; Match(T__1);
                    State = 1060;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1059; Match(WS);
                        }
                    }

                    State = 1062; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LoadStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
            public LoadStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_loadStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLoadStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLoadStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LoadStmtContext loadStmt()
        {
            LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
            EnterRule(_localctx, 102, RULE_loadStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1064; Match(LOAD);
                    State = 1065; Match(WS);
                    State = 1066; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LockStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public LockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LockStmtContext lockStmt()
        {
            LockStmtContext _localctx = new LockStmtContext(_ctx, State);
            EnterRule(_localctx, 104, RULE_lockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1068; Match(LOCK);
                    State = 1069; Match(WS);
                    State = 1070; valueStmt(0);
                    State = 1085;
                    switch (Interpreter.AdaptivePredict(_input, 125, _ctx))
                    {
                        case 1:
                            {
                                State = 1072;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1071; Match(WS);
                                    }
                                }

                                State = 1074; Match(T__1);
                                State = 1076;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1075; Match(WS);
                                    }
                                }

                                State = 1078; valueStmt(0);
                                State = 1083;
                                switch (Interpreter.AdaptivePredict(_input, 124, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1079; Match(WS);
                                            State = 1080; Match(TO);
                                            State = 1081; Match(WS);
                                            State = 1082; valueStmt(0);
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LsetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public LsetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lsetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLsetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLsetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LsetStmtContext lsetStmt()
        {
            LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
            EnterRule(_localctx, 106, RULE_lsetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1087; Match(LSET);
                    State = 1088; Match(WS);
                    State = 1089; implicitCallStmt_InStmt();
                    State = 1091;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1090; Match(WS);
                        }
                    }

                    State = 1093; Match(EQ);
                    State = 1095;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1094; Match(WS);
                        }
                    }

                    State = 1097; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroConstStmtContext : ParserRuleContext
        {
            public ITerminalNode MACRO_CONST() { return GetToken(VBAParser.MACRO_CONST, 0); }
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public MacroConstStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroConstStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroConstStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroConstStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroConstStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroConstStmtContext macroConstStmt()
        {
            MacroConstStmtContext _localctx = new MacroConstStmtContext(_ctx, State);
            EnterRule(_localctx, 108, RULE_macroConstStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1099; Match(MACRO_CONST);
                    State = 1101;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1100; Match(WS);
                        }
                    }

                    State = 1103; ambiguousIdentifier();
                    State = 1105;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1104; Match(WS);
                        }
                    }

                    State = 1107; Match(EQ);
                    State = 1109;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1108; Match(WS);
                        }
                    }

                    State = 1111; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroIfThenElseStmtContext : ParserRuleContext
        {
            public IReadOnlyList<MacroElseIfBlockStmtContext> macroElseIfBlockStmt()
            {
                return GetRuleContexts<MacroElseIfBlockStmtContext>();
            }
            public ITerminalNode MACRO_END_IF() { return GetToken(VBAParser.MACRO_END_IF, 0); }
            public MacroIfBlockStmtContext macroIfBlockStmt()
            {
                return GetRuleContext<MacroIfBlockStmtContext>(0);
            }
            public MacroElseIfBlockStmtContext macroElseIfBlockStmt(int i)
            {
                return GetRuleContext<MacroElseIfBlockStmtContext>(i);
            }
            public MacroElseBlockStmtContext macroElseBlockStmt()
            {
                return GetRuleContext<MacroElseBlockStmtContext>(0);
            }
            public MacroIfThenElseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroIfThenElseStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroIfThenElseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroIfThenElseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroIfThenElseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroIfThenElseStmtContext macroIfThenElseStmt()
        {
            MacroIfThenElseStmtContext _localctx = new MacroIfThenElseStmtContext(_ctx, State);
            EnterRule(_localctx, 110, RULE_macroIfThenElseStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1113; macroIfBlockStmt();
                    State = 1117;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == MACRO_ELSEIF)
                    {
                        {
                            {
                                State = 1114; macroElseIfBlockStmt();
                            }
                        }
                        State = 1119;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 1121;
                    _la = _input.La(1);
                    if (_la == MACRO_ELSE)
                    {
                        {
                            State = 1120; macroElseBlockStmt();
                        }
                    }

                    State = 1123; Match(MACRO_END_IF);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroIfBlockStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ModuleBodyContext moduleBody(int i)
            {
                return GetRuleContext<ModuleBodyContext>(i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public BlockContext block(int i)
            {
                return GetRuleContext<BlockContext>(i);
            }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public ModuleDeclarationsContext moduleDeclarations(int i)
            {
                return GetRuleContext<ModuleDeclarationsContext>(i);
            }
            public ITerminalNode MACRO_IF() { return GetToken(VBAParser.MACRO_IF, 0); }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public IReadOnlyList<ModuleBodyContext> moduleBody()
            {
                return GetRuleContexts<ModuleBodyContext>();
            }
            public IReadOnlyList<ModuleDeclarationsContext> moduleDeclarations()
            {
                return GetRuleContexts<ModuleDeclarationsContext>();
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public IReadOnlyList<BlockContext> block()
            {
                return GetRuleContexts<BlockContext>();
            }
            public MacroIfBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroIfBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroIfBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroIfBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroIfBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroIfBlockStmtContext macroIfBlockStmt()
        {
            MacroIfBlockStmtContext _localctx = new MacroIfBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 112, RULE_macroIfBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1125; Match(MACRO_IF);
                    State = 1127;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1126; Match(WS);
                        }
                    }

                    State = 1129; ifConditionStmt();
                    State = 1130; Match(WS);
                    State = 1131; Match(THEN);
                    State = 1132; endOfStatement();
                    State = 1138;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == COMMENT || _la == IDENTIFIER)
                    {
                        {
                            State = 1136;
                            switch (Interpreter.AdaptivePredict(_input, 134, _ctx))
                            {
                                case 1:
                                    {
                                        State = 1133; moduleDeclarations();
                                    }
                                    break;

                                case 2:
                                    {
                                        State = 1134; moduleBody();
                                    }
                                    break;

                                case 3:
                                    {
                                        State = 1135; block();
                                    }
                                    break;
                            }
                        }
                        State = 1140;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroElseIfBlockStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ModuleBodyContext moduleBody(int i)
            {
                return GetRuleContext<ModuleBodyContext>(i);
            }
            public ITerminalNode MACRO_ELSEIF() { return GetToken(VBAParser.MACRO_ELSEIF, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public BlockContext block(int i)
            {
                return GetRuleContext<BlockContext>(i);
            }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public ModuleDeclarationsContext moduleDeclarations(int i)
            {
                return GetRuleContext<ModuleDeclarationsContext>(i);
            }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public IReadOnlyList<ModuleBodyContext> moduleBody()
            {
                return GetRuleContexts<ModuleBodyContext>();
            }
            public IReadOnlyList<ModuleDeclarationsContext> moduleDeclarations()
            {
                return GetRuleContexts<ModuleDeclarationsContext>();
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public IReadOnlyList<BlockContext> block()
            {
                return GetRuleContexts<BlockContext>();
            }
            public MacroElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroElseIfBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroElseIfBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroElseIfBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroElseIfBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroElseIfBlockStmtContext macroElseIfBlockStmt()
        {
            MacroElseIfBlockStmtContext _localctx = new MacroElseIfBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 114, RULE_macroElseIfBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1141; Match(MACRO_ELSEIF);
                    State = 1143;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1142; Match(WS);
                        }
                    }

                    State = 1145; ifConditionStmt();
                    State = 1146; Match(WS);
                    State = 1147; Match(THEN);
                    State = 1148; endOfStatement();
                    State = 1154;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == COMMENT || _la == IDENTIFIER)
                    {
                        {
                            State = 1152;
                            switch (Interpreter.AdaptivePredict(_input, 137, _ctx))
                            {
                                case 1:
                                    {
                                        State = 1149; moduleDeclarations();
                                    }
                                    break;

                                case 2:
                                    {
                                        State = 1150; moduleBody();
                                    }
                                    break;

                                case 3:
                                    {
                                        State = 1151; block();
                                    }
                                    break;
                            }
                        }
                        State = 1156;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroElseBlockStmtContext : ParserRuleContext
        {
            public ModuleBodyContext moduleBody(int i)
            {
                return GetRuleContext<ModuleBodyContext>(i);
            }
            public BlockContext block(int i)
            {
                return GetRuleContext<BlockContext>(i);
            }
            public ITerminalNode MACRO_ELSE() { return GetToken(VBAParser.MACRO_ELSE, 0); }
            public ModuleDeclarationsContext moduleDeclarations(int i)
            {
                return GetRuleContext<ModuleDeclarationsContext>(i);
            }
            public IReadOnlyList<ModuleBodyContext> moduleBody()
            {
                return GetRuleContexts<ModuleBodyContext>();
            }
            public IReadOnlyList<ModuleDeclarationsContext> moduleDeclarations()
            {
                return GetRuleContexts<ModuleDeclarationsContext>();
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public IReadOnlyList<BlockContext> block()
            {
                return GetRuleContexts<BlockContext>();
            }
            public MacroElseBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroElseBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroElseBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroElseBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroElseBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroElseBlockStmtContext macroElseBlockStmt()
        {
            MacroElseBlockStmtContext _localctx = new MacroElseBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 116, RULE_macroElseBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1157; Match(MACRO_ELSE);
                    State = 1158; endOfStatement();
                    State = 1164;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == COMMENT || _la == IDENTIFIER)
                    {
                        {
                            State = 1162;
                            switch (Interpreter.AdaptivePredict(_input, 139, _ctx))
                            {
                                case 1:
                                    {
                                        State = 1159; moduleDeclarations();
                                    }
                                    break;

                                case 2:
                                    {
                                        State = 1160; moduleBody();
                                    }
                                    break;

                                case 3:
                                    {
                                        State = 1161; block();
                                    }
                                    break;
                            }
                        }
                        State = 1166;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MidStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
            public MidStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_midStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMidStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMidStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MidStmtContext midStmt()
        {
            MidStmtContext _localctx = new MidStmtContext(_ctx, State);
            EnterRule(_localctx, 118, RULE_midStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1167; Match(MID);
                    State = 1169;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1168; Match(WS);
                        }
                    }

                    State = 1171; Match(LPAREN);
                    State = 1173;
                    switch (Interpreter.AdaptivePredict(_input, 142, _ctx))
                    {
                        case 1:
                            {
                                State = 1172; Match(WS);
                            }
                            break;
                    }
                    State = 1175; argsCall();
                    State = 1177;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1176; Match(WS);
                        }
                    }

                    State = 1179; Match(RPAREN);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MkdirStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
            public MkdirStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_mkdirStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMkdirStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMkdirStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MkdirStmtContext mkdirStmt()
        {
            MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
            EnterRule(_localctx, 120, RULE_mkdirStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1181; Match(MKDIR);
                    State = 1182; Match(WS);
                    State = 1183; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class NameStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
            public NameStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_nameStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterNameStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitNameStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public NameStmtContext nameStmt()
        {
            NameStmtContext _localctx = new NameStmtContext(_ctx, State);
            EnterRule(_localctx, 122, RULE_nameStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1185; Match(NAME);
                    State = 1186; Match(WS);
                    State = 1187; valueStmt(0);
                    State = 1188; Match(WS);
                    State = 1189; Match(AS);
                    State = 1190; Match(WS);
                    State = 1191; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OnErrorStmtContext : ParserRuleContext
        {
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
            public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
            public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParser.ON_LOCAL_ERROR, 0); }
            public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_onErrorStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOnErrorStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOnErrorStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OnErrorStmtContext onErrorStmt()
        {
            OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
            EnterRule(_localctx, 124, RULE_onErrorStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1193;
                    _la = _input.La(1);
                    if (!(_la == ON_ERROR || _la == ON_LOCAL_ERROR))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                    State = 1194; Match(WS);
                    State = 1201;
                    switch (_input.La(1))
                    {
                        case GOTO:
                            {
                                State = 1195; Match(GOTO);
                                State = 1196; Match(WS);
                                State = 1197; valueStmt(0);
                            }
                            break;
                        case RESUME:
                            {
                                State = 1198; Match(RESUME);
                                State = 1199; Match(WS);
                                State = 1200; Match(NEXT);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OnGoToStmtContext : ParserRuleContext
        {
            public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_onGoToStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOnGoToStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOnGoToStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OnGoToStmtContext onGoToStmt()
        {
            OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
            EnterRule(_localctx, 126, RULE_onGoToStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1203; Match(ON);
                    State = 1204; Match(WS);
                    State = 1205; valueStmt(0);
                    State = 1206; Match(WS);
                    State = 1207; Match(GOTO);
                    State = 1208; Match(WS);
                    State = 1209; valueStmt(0);
                    State = 1220;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 147, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 1211;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1210; Match(WS);
                                        }
                                    }

                                    State = 1213; Match(T__1);
                                    State = 1215;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1214; Match(WS);
                                        }
                                    }

                                    State = 1217; valueStmt(0);
                                }
                            }
                        }
                        State = 1222;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 147, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OnGoSubStmtContext : ParserRuleContext
        {
            public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_onGoSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OnGoSubStmtContext onGoSubStmt()
        {
            OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
            EnterRule(_localctx, 128, RULE_onGoSubStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1223; Match(ON);
                    State = 1224; Match(WS);
                    State = 1225; valueStmt(0);
                    State = 1226; Match(WS);
                    State = 1227; Match(GOSUB);
                    State = 1228; Match(WS);
                    State = 1229; valueStmt(0);
                    State = 1240;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 150, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 1231;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1230; Match(WS);
                                        }
                                    }

                                    State = 1233; Match(T__1);
                                    State = 1235;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1234; Match(WS);
                                        }
                                    }

                                    State = 1237; valueStmt(0);
                                }
                            }
                        }
                        State = 1242;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 150, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OpenStmtContext : ParserRuleContext
        {
            public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
            public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
            public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
            public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
            public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
            public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
            public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
            public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
            public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
            public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
            public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
            public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public OpenStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_openStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOpenStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOpenStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OpenStmtContext openStmt()
        {
            OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
            EnterRule(_localctx, 130, RULE_openStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1243; Match(OPEN);
                    State = 1244; Match(WS);
                    State = 1245; valueStmt(0);
                    State = 1246; Match(WS);
                    State = 1247; Match(FOR);
                    State = 1248; Match(WS);
                    State = 1249;
                    _la = _input.La(1);
                    if (!(_la == APPEND || _la == BINARY || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (INPUT - 86)) | (1L << (OUTPUT - 86)) | (1L << (RANDOM - 86)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                    State = 1254;
                    switch (Interpreter.AdaptivePredict(_input, 151, _ctx))
                    {
                        case 1:
                            {
                                State = 1250; Match(WS);
                                State = 1251; Match(ACCESS);
                                State = 1252; Match(WS);
                                State = 1253;
                                _la = _input.La(1);
                                if (!(((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (READ - 142)) | (1L << (READ_WRITE - 142)) | (1L << (WRITE - 142)))) != 0)))
                                {
                                    _errHandler.RecoverInline(this);
                                }
                                Consume();
                            }
                            break;
                    }
                    State = 1258;
                    switch (Interpreter.AdaptivePredict(_input, 152, _ctx))
                    {
                        case 1:
                            {
                                State = 1256; Match(WS);
                                State = 1257;
                                _la = _input.La(1);
                                if (!(((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & ((1L << (LOCK_READ - 99)) | (1L << (LOCK_WRITE - 99)) | (1L << (LOCK_READ_WRITE - 99)) | (1L << (SHARED - 99)))) != 0)))
                                {
                                    _errHandler.RecoverInline(this);
                                }
                                Consume();
                            }
                            break;
                    }
                    State = 1260; Match(WS);
                    State = 1261; Match(AS);
                    State = 1262; Match(WS);
                    State = 1263; fileNumber();
                    State = 1274;
                    switch (Interpreter.AdaptivePredict(_input, 155, _ctx))
                    {
                        case 1:
                            {
                                State = 1264; Match(WS);
                                State = 1265; Match(LEN);
                                State = 1267;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1266; Match(WS);
                                    }
                                }

                                State = 1269; Match(EQ);
                                State = 1271;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1270; Match(WS);
                                    }
                                }

                                State = 1273; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OutputListContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression()
            {
                return GetRuleContexts<OutputList_ExpressionContext>();
            }
            public OutputList_ExpressionContext outputList_Expression(int i)
            {
                return GetRuleContext<OutputList_ExpressionContext>(i);
            }
            public OutputListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_outputList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOutputList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOutputList(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OutputListContext outputList()
        {
            OutputListContext _localctx = new OutputListContext(_ctx, State);
            EnterRule(_localctx, 132, RULE_outputList);
            int _la;
            try
            {
                int _alt;
                State = 1309;
                switch (Interpreter.AdaptivePredict(_input, 165, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1276; outputList_Expression();
                            State = 1289;
                            _errHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(_input, 159, _ctx);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 1278;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1277; Match(WS);
                                                }
                                            }

                                            State = 1280;
                                            _la = _input.La(1);
                                            if (!(_la == T__2 || _la == T__1))
                                            {
                                                _errHandler.RecoverInline(this);
                                            }
                                            Consume();
                                            State = 1282;
                                            switch (Interpreter.AdaptivePredict(_input, 157, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1281; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1285;
                                            switch (Interpreter.AdaptivePredict(_input, 158, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1284; outputList_Expression();
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                }
                                State = 1291;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 159, _ctx);
                            }
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1293;
                            _la = _input.La(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (LPAREN - 194)) | (1L << (MINUS - 194)) | (1L << (STRINGLITERAL - 194)) | (1L << (OCTLITERAL - 194)) | (1L << (HEXLITERAL - 194)) | (1L << (SHORTLITERAL - 194)) | (1L << (INTEGERLITERAL - 194)) | (1L << (DOUBLELITERAL - 194)) | (1L << (DATELITERAL - 194)) | (1L << (IDENTIFIER - 194)))) != 0))
                            {
                                {
                                    State = 1292; outputList_Expression();
                                }
                            }

                            State = 1305;
                            _errHandler.Sync(this);
                            _alt = 1;
                            do
                            {
                                switch (_alt)
                                {
                                    case 1:
                                        {
                                            {
                                                State = 1296;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 1295; Match(WS);
                                                    }
                                                }

                                                State = 1298;
                                                _la = _input.La(1);
                                                if (!(_la == T__2 || _la == T__1))
                                                {
                                                    _errHandler.RecoverInline(this);
                                                }
                                                Consume();
                                                State = 1300;
                                                switch (Interpreter.AdaptivePredict(_input, 162, _ctx))
                                                {
                                                    case 1:
                                                        {
                                                            State = 1299; Match(WS);
                                                        }
                                                        break;
                                                }
                                                State = 1303;
                                                switch (Interpreter.AdaptivePredict(_input, 163, _ctx))
                                                {
                                                    case 1:
                                                        {
                                                            State = 1302; outputList_Expression();
                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                                State = 1307;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 164, _ctx);
                            } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OutputList_ExpressionContext : ParserRuleContext
        {
            public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_outputList_Expression; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOutputList_Expression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOutputList_Expression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OutputList_ExpressionContext outputList_Expression()
        {
            OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
            EnterRule(_localctx, 134, RULE_outputList_Expression);
            int _la;
            try
            {
                State = 1328;
                switch (Interpreter.AdaptivePredict(_input, 170, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1311; valueStmt(0);
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1312;
                            _la = _input.La(1);
                            if (!(_la == SPC || _la == TAB))
                            {
                                _errHandler.RecoverInline(this);
                            }
                            Consume();
                            State = 1326;
                            switch (Interpreter.AdaptivePredict(_input, 169, _ctx))
                            {
                                case 1:
                                    {
                                        State = 1314;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 1313; Match(WS);
                                            }
                                        }

                                        State = 1316; Match(LPAREN);
                                        State = 1318;
                                        switch (Interpreter.AdaptivePredict(_input, 167, _ctx))
                                        {
                                            case 1:
                                                {
                                                    State = 1317; Match(WS);
                                                }
                                                break;
                                        }
                                        State = 1320; argsCall();
                                        State = 1322;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 1321; Match(WS);
                                            }
                                        }

                                        State = 1324; Match(RPAREN);
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PrintStmtContext : ParserRuleContext
        {
            public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public OutputListContext outputList()
            {
                return GetRuleContext<OutputListContext>(0);
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public PrintStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_printStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPrintStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPrintStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PrintStmtContext printStmt()
        {
            PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
            EnterRule(_localctx, 136, RULE_printStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1330; Match(PRINT);
                    State = 1331; Match(WS);
                    State = 1332; fileNumber();
                    State = 1334;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1333; Match(WS);
                        }
                    }

                    State = 1336; Match(T__1);
                    State = 1341;
                    switch (Interpreter.AdaptivePredict(_input, 173, _ctx))
                    {
                        case 1:
                            {
                                State = 1338;
                                switch (Interpreter.AdaptivePredict(_input, 172, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1337; Match(WS);
                                        }
                                        break;
                                }
                                State = 1340; outputList();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PropertyGetStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
            public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_propertyGetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PropertyGetStmtContext propertyGetStmt()
        {
            PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
            EnterRule(_localctx, 138, RULE_propertyGetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1346;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 1343; visibility();
                            State = 1344; Match(WS);
                        }
                    }

                    State = 1350;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 1348; Match(STATIC);
                            State = 1349; Match(WS);
                        }
                    }

                    State = 1352; Match(PROPERTY_GET);
                    State = 1353; Match(WS);
                    State = 1354; ambiguousIdentifier();
                    State = 1356;
                    switch (Interpreter.AdaptivePredict(_input, 176, _ctx))
                    {
                        case 1:
                            {
                                State = 1355; typeHint();
                            }
                            break;
                    }
                    State = 1362;
                    switch (Interpreter.AdaptivePredict(_input, 178, _ctx))
                    {
                        case 1:
                            {
                                State = 1359;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1358; Match(WS);
                                    }
                                }

                                State = 1361; argList();
                            }
                            break;
                    }
                    State = 1366;
                    switch (Interpreter.AdaptivePredict(_input, 179, _ctx))
                    {
                        case 1:
                            {
                                State = 1364; Match(WS);
                                State = 1365; asTypeClause();
                            }
                            break;
                    }
                    State = 1368; endOfStatement();
                    State = 1370;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 1369; block();
                        }
                    }

                    State = 1372; Match(END_PROPERTY);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PropertySetStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
            public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
            public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_propertySetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPropertySetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPropertySetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PropertySetStmtContext propertySetStmt()
        {
            PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
            EnterRule(_localctx, 140, RULE_propertySetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1377;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 1374; visibility();
                            State = 1375; Match(WS);
                        }
                    }

                    State = 1381;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 1379; Match(STATIC);
                            State = 1380; Match(WS);
                        }
                    }

                    State = 1383; Match(PROPERTY_SET);
                    State = 1384; Match(WS);
                    State = 1385; ambiguousIdentifier();
                    State = 1390;
                    switch (Interpreter.AdaptivePredict(_input, 184, _ctx))
                    {
                        case 1:
                            {
                                State = 1387;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1386; Match(WS);
                                    }
                                }

                                State = 1389; argList();
                            }
                            break;
                    }
                    State = 1392; endOfStatement();
                    State = 1394;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 1393; block();
                        }
                    }

                    State = 1396; Match(END_PROPERTY);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PropertyLetStmtContext : ParserRuleContext
        {
            public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
            public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_propertyLetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PropertyLetStmtContext propertyLetStmt()
        {
            PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
            EnterRule(_localctx, 142, RULE_propertyLetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1401;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 1398; visibility();
                            State = 1399; Match(WS);
                        }
                    }

                    State = 1405;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 1403; Match(STATIC);
                            State = 1404; Match(WS);
                        }
                    }

                    State = 1407; Match(PROPERTY_LET);
                    State = 1408; Match(WS);
                    State = 1409; ambiguousIdentifier();
                    State = 1414;
                    switch (Interpreter.AdaptivePredict(_input, 189, _ctx))
                    {
                        case 1:
                            {
                                State = 1411;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1410; Match(WS);
                                    }
                                }

                                State = 1413; argList();
                            }
                            break;
                    }
                    State = 1416; endOfStatement();
                    State = 1418;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 1417; block();
                        }
                    }

                    State = 1420; Match(END_PROPERTY);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PutStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public PutStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_putStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPutStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPutStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PutStmtContext putStmt()
        {
            PutStmtContext _localctx = new PutStmtContext(_ctx, State);
            EnterRule(_localctx, 144, RULE_putStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1422; Match(PUT);
                    State = 1423; Match(WS);
                    State = 1424; fileNumber();
                    State = 1426;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1425; Match(WS);
                        }
                    }

                    State = 1428; Match(T__1);
                    State = 1430;
                    switch (Interpreter.AdaptivePredict(_input, 192, _ctx))
                    {
                        case 1:
                            {
                                State = 1429; Match(WS);
                            }
                            break;
                    }
                    State = 1433;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (LPAREN - 194)) | (1L << (MINUS - 194)) | (1L << (STRINGLITERAL - 194)) | (1L << (OCTLITERAL - 194)) | (1L << (HEXLITERAL - 194)) | (1L << (SHORTLITERAL - 194)) | (1L << (INTEGERLITERAL - 194)) | (1L << (DOUBLELITERAL - 194)) | (1L << (DATELITERAL - 194)) | (1L << (IDENTIFIER - 194)))) != 0))
                    {
                        {
                            State = 1432; valueStmt(0);
                        }
                    }

                    State = 1436;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1435; Match(WS);
                        }
                    }

                    State = 1438; Match(T__1);
                    State = 1440;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1439; Match(WS);
                        }
                    }

                    State = 1442; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RaiseEventStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_raiseEventStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RaiseEventStmtContext raiseEventStmt()
        {
            RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
            EnterRule(_localctx, 146, RULE_raiseEventStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1444; Match(RAISEEVENT);
                    State = 1445; Match(WS);
                    State = 1446; ambiguousIdentifier();
                    State = 1461;
                    switch (Interpreter.AdaptivePredict(_input, 200, _ctx))
                    {
                        case 1:
                            {
                                State = 1448;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1447; Match(WS);
                                    }
                                }

                                State = 1450; Match(LPAREN);
                                State = 1452;
                                switch (Interpreter.AdaptivePredict(_input, 197, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1451; Match(WS);
                                        }
                                        break;
                                }
                                State = 1458;
                                switch (Interpreter.AdaptivePredict(_input, 199, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1454; argsCall();
                                            State = 1456;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1455; Match(WS);
                                                }
                                            }

                                        }
                                        break;
                                }
                                State = 1460; Match(RPAREN);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RandomizeStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
            public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_randomizeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRandomizeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRandomizeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RandomizeStmtContext randomizeStmt()
        {
            RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
            EnterRule(_localctx, 148, RULE_randomizeStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1463; Match(RANDOMIZE);
                    State = 1466;
                    switch (Interpreter.AdaptivePredict(_input, 201, _ctx))
                    {
                        case 1:
                            {
                                State = 1464; Match(WS);
                                State = 1465; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RedimStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<RedimSubStmtContext> redimSubStmt()
            {
                return GetRuleContexts<RedimSubStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
            public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
            public RedimSubStmtContext redimSubStmt(int i)
            {
                return GetRuleContext<RedimSubStmtContext>(i);
            }
            public RedimStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_redimStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRedimStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRedimStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RedimStmtContext redimStmt()
        {
            RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
            EnterRule(_localctx, 150, RULE_redimStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1468; Match(REDIM);
                    State = 1469; Match(WS);
                    State = 1472;
                    switch (Interpreter.AdaptivePredict(_input, 202, _ctx))
                    {
                        case 1:
                            {
                                State = 1470; Match(PRESERVE);
                                State = 1471; Match(WS);
                            }
                            break;
                    }
                    State = 1474; redimSubStmt();
                    State = 1485;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 205, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 1476;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1475; Match(WS);
                                        }
                                    }

                                    State = 1478; Match(T__1);
                                    State = 1480;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1479; Match(WS);
                                        }
                                    }

                                    State = 1482; redimSubStmt();
                                }
                            }
                        }
                        State = 1487;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 205, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RedimSubStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public SubscriptsContext subscripts()
            {
                return GetRuleContext<SubscriptsContext>(0);
            }
            public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_redimSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRedimSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRedimSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RedimSubStmtContext redimSubStmt()
        {
            RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
            EnterRule(_localctx, 152, RULE_redimSubStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1488; implicitCallStmt_InStmt();
                    State = 1490;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1489; Match(WS);
                        }
                    }

                    State = 1492; Match(LPAREN);
                    State = 1494;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1493; Match(WS);
                        }
                    }

                    State = 1496; subscripts();
                    State = 1498;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1497; Match(WS);
                        }
                    }

                    State = 1500; Match(RPAREN);
                    State = 1503;
                    switch (Interpreter.AdaptivePredict(_input, 209, _ctx))
                    {
                        case 1:
                            {
                                State = 1501; Match(WS);
                                State = 1502; asTypeClause();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ResetStmtContext : ParserRuleContext
        {
            public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
            public ResetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_resetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterResetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitResetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ResetStmtContext resetStmt()
        {
            ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
            EnterRule(_localctx, 154, RULE_resetStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1505; Match(RESET);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ResumeStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
            public ResumeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_resumeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterResumeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitResumeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ResumeStmtContext resumeStmt()
        {
            ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
            EnterRule(_localctx, 156, RULE_resumeStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1507; Match(RESUME);
                    State = 1513;
                    switch (Interpreter.AdaptivePredict(_input, 211, _ctx))
                    {
                        case 1:
                            {
                                State = 1508; Match(WS);
                                State = 1511;
                                switch (Interpreter.AdaptivePredict(_input, 210, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1509; Match(NEXT);
                                        }
                                        break;

                                    case 2:
                                        {
                                            State = 1510; ambiguousIdentifier();
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ReturnStmtContext : ParserRuleContext
        {
            public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
            public ReturnStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_returnStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterReturnStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitReturnStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ReturnStmtContext returnStmt()
        {
            ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
            EnterRule(_localctx, 158, RULE_returnStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1515; Match(RETURN);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RmdirStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
            public RmdirStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_rmdirStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRmdirStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRmdirStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RmdirStmtContext rmdirStmt()
        {
            RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
            EnterRule(_localctx, 160, RULE_rmdirStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1517; Match(RMDIR);
                    State = 1518; Match(WS);
                    State = 1519; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RsetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public RsetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_rsetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRsetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRsetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RsetStmtContext rsetStmt()
        {
            RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
            EnterRule(_localctx, 162, RULE_rsetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1521; Match(RSET);
                    State = 1522; Match(WS);
                    State = 1523; implicitCallStmt_InStmt();
                    State = 1525;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1524; Match(WS);
                        }
                    }

                    State = 1527; Match(EQ);
                    State = 1529;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1528; Match(WS);
                        }
                    }

                    State = 1531; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SavepictureStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_savepictureStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSavepictureStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSavepictureStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SavepictureStmtContext savepictureStmt()
        {
            SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
            EnterRule(_localctx, 164, RULE_savepictureStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1533; Match(SAVEPICTURE);
                    State = 1534; Match(WS);
                    State = 1535; valueStmt(0);
                    State = 1537;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1536; Match(WS);
                        }
                    }

                    State = 1539; Match(T__1);
                    State = 1541;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1540; Match(WS);
                        }
                    }

                    State = 1543; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SaveSettingStmtContext : ParserRuleContext
        {
            public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_saveSettingStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SaveSettingStmtContext saveSettingStmt()
        {
            SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
            EnterRule(_localctx, 166, RULE_saveSettingStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1545; Match(SAVESETTING);
                    State = 1546; Match(WS);
                    State = 1547; valueStmt(0);
                    State = 1549;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1548; Match(WS);
                        }
                    }

                    State = 1551; Match(T__1);
                    State = 1553;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1552; Match(WS);
                        }
                    }

                    State = 1555; valueStmt(0);
                    State = 1557;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1556; Match(WS);
                        }
                    }

                    State = 1559; Match(T__1);
                    State = 1561;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1560; Match(WS);
                        }
                    }

                    State = 1563; valueStmt(0);
                    State = 1565;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1564; Match(WS);
                        }
                    }

                    State = 1567; Match(T__1);
                    State = 1569;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1568; Match(WS);
                        }
                    }

                    State = 1571; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SeekStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
            public SeekStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_seekStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSeekStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSeekStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SeekStmtContext seekStmt()
        {
            SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
            EnterRule(_localctx, 168, RULE_seekStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1573; Match(SEEK);
                    State = 1574; Match(WS);
                    State = 1575; fileNumber();
                    State = 1577;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1576; Match(WS);
                        }
                    }

                    State = 1579; Match(T__1);
                    State = 1581;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1580; Match(WS);
                        }
                    }

                    State = 1583; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SelectCaseStmtContext : ParserRuleContext
        {
            public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public SC_CaseContext sC_Case(int i)
            {
                return GetRuleContext<SC_CaseContext>(i);
            }
            public IReadOnlyList<SC_CaseContext> sC_Case()
            {
                return GetRuleContexts<SC_CaseContext>();
            }
            public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_selectCaseStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SelectCaseStmtContext selectCaseStmt()
        {
            SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
            EnterRule(_localctx, 170, RULE_selectCaseStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1585; Match(SELECT);
                    State = 1586; Match(WS);
                    State = 1587; Match(CASE);
                    State = 1588; Match(WS);
                    State = 1589; valueStmt(0);
                    State = 1590; endOfStatement();
                    State = 1594;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == CASE)
                    {
                        {
                            {
                                State = 1591; sC_Case();
                            }
                        }
                        State = 1596;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 1597; Match(END_SELECT);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SC_SelectionContext : ParserRuleContext
        {
            public SC_SelectionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sC_Selection; } }

            public SC_SelectionContext() { }
            public virtual void CopyFrom(SC_SelectionContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class CaseCondValueContext : SC_SelectionContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public CaseCondValueContext(SC_SelectionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondValue(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondValue(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class CaseCondToContext : SC_SelectionContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public CaseCondToContext(SC_SelectionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondTo(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondTo(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class CaseCondIsContext : SC_SelectionContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ComparisonOperatorContext comparisonOperator()
            {
                return GetRuleContext<ComparisonOperatorContext>(0);
            }
            public CaseCondIsContext(SC_SelectionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondIs(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondIs(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SC_SelectionContext sC_Selection()
        {
            SC_SelectionContext _localctx = new SC_SelectionContext(_ctx, State);
            EnterRule(_localctx, 172, RULE_sC_Selection);
            int _la;
            try
            {
                State = 1616;
                switch (Interpreter.AdaptivePredict(_input, 227, _ctx))
                {
                    case 1:
                        _localctx = new CaseCondIsContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1599; Match(IS);
                            State = 1601;
                            _la = _input.La(1);
                            if (_la == WS)
                            {
                                {
                                    State = 1600; Match(WS);
                                }
                            }

                            State = 1603; comparisonOperator();
                            State = 1605;
                            _la = _input.La(1);
                            if (_la == WS)
                            {
                                {
                                    State = 1604; Match(WS);
                                }
                            }

                            State = 1607; valueStmt(0);
                        }
                        break;

                    case 2:
                        _localctx = new CaseCondToContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1609; valueStmt(0);
                            State = 1610; Match(WS);
                            State = 1611; Match(TO);
                            State = 1612; Match(WS);
                            State = 1613; valueStmt(0);
                        }
                        break;

                    case 3:
                        _localctx = new CaseCondValueContext(_localctx);
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 1615; valueStmt(0);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SC_CaseContext : ParserRuleContext
        {
            public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public SC_CondContext sC_Cond()
            {
                return GetRuleContext<SC_CondContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public SC_CaseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sC_Case; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSC_Case(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSC_Case(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SC_CaseContext sC_Case()
        {
            SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
            EnterRule(_localctx, 174, RULE_sC_Case);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1618; Match(CASE);
                    State = 1619; Match(WS);
                    State = 1620; sC_Cond();
                    State = 1621; endOfStatement();
                    State = 1623;
                    switch (Interpreter.AdaptivePredict(_input, 228, _ctx))
                    {
                        case 1:
                            {
                                State = 1622; block();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SC_CondContext : ParserRuleContext
        {
            public SC_CondContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sC_Cond; } }

            public SC_CondContext() { }
            public virtual void CopyFrom(SC_CondContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class CaseCondSelectionContext : SC_CondContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<SC_SelectionContext> sC_Selection()
            {
                return GetRuleContexts<SC_SelectionContext>();
            }
            public SC_SelectionContext sC_Selection(int i)
            {
                return GetRuleContext<SC_SelectionContext>(i);
            }
            public CaseCondSelectionContext(SC_CondContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondSelection(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondSelection(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondSelection(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class CaseCondElseContext : SC_CondContext
        {
            public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
            public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondElse(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondElse(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SC_CondContext sC_Cond()
        {
            SC_CondContext _localctx = new SC_CondContext(_ctx, State);
            EnterRule(_localctx, 176, RULE_sC_Cond);
            int _la;
            try
            {
                int _alt;
                State = 1640;
                switch (Interpreter.AdaptivePredict(_input, 232, _ctx))
                {
                    case 1:
                        _localctx = new CaseCondElseContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1625; Match(ELSE);
                        }
                        break;

                    case 2:
                        _localctx = new CaseCondSelectionContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1626; sC_Selection();
                            State = 1637;
                            _errHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(_input, 231, _ctx);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 1628;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1627; Match(WS);
                                                }
                                            }

                                            State = 1630; Match(T__1);
                                            State = 1632;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1631; Match(WS);
                                                }
                                            }

                                            State = 1634; sC_Selection();
                                        }
                                    }
                                }
                                State = 1639;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 231, _ctx);
                            }
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SendkeysStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sendkeysStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSendkeysStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSendkeysStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SendkeysStmtContext sendkeysStmt()
        {
            SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
            EnterRule(_localctx, 178, RULE_sendkeysStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1642; Match(SENDKEYS);
                    State = 1643; Match(WS);
                    State = 1644; valueStmt(0);
                    State = 1653;
                    switch (Interpreter.AdaptivePredict(_input, 235, _ctx))
                    {
                        case 1:
                            {
                                State = 1646;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1645; Match(WS);
                                    }
                                }

                                State = 1648; Match(T__1);
                                State = 1650;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1649; Match(WS);
                                    }
                                }

                                State = 1652; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SetattrStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SetattrStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_setattrStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSetattrStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSetattrStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SetattrStmtContext setattrStmt()
        {
            SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
            EnterRule(_localctx, 180, RULE_setattrStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1655; Match(SETATTR);
                    State = 1656; Match(WS);
                    State = 1657; valueStmt(0);
                    State = 1659;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1658; Match(WS);
                        }
                    }

                    State = 1661; Match(T__1);
                    State = 1663;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1662; Match(WS);
                        }
                    }

                    State = 1665; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
            public SetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_setStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SetStmtContext setStmt()
        {
            SetStmtContext _localctx = new SetStmtContext(_ctx, State);
            EnterRule(_localctx, 182, RULE_setStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1667; Match(SET);
                    State = 1668; Match(WS);
                    State = 1669; implicitCallStmt_InStmt();
                    State = 1671;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1670; Match(WS);
                        }
                    }

                    State = 1673; Match(EQ);
                    State = 1675;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1674; Match(WS);
                        }
                    }

                    State = 1677; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class StopStmtContext : ParserRuleContext
        {
            public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
            public StopStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_stopStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterStopStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitStopStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public StopStmtContext stopStmt()
        {
            StopStmtContext _localctx = new StopStmtContext(_ctx, State);
            EnterRule(_localctx, 184, RULE_stopStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1679; Match(STOP);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SubStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public SubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_subStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SubStmtContext subStmt()
        {
            SubStmtContext _localctx = new SubStmtContext(_ctx, State);
            EnterRule(_localctx, 186, RULE_subStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1684;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 1681; visibility();
                            State = 1682; Match(WS);
                        }
                    }

                    State = 1688;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 1686; Match(STATIC);
                            State = 1687; Match(WS);
                        }
                    }

                    State = 1690; Match(SUB);
                    State = 1692;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1691; Match(WS);
                        }
                    }

                    State = 1694; ambiguousIdentifier();
                    State = 1699;
                    switch (Interpreter.AdaptivePredict(_input, 244, _ctx))
                    {
                        case 1:
                            {
                                State = 1696;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1695; Match(WS);
                                    }
                                }

                                State = 1698; argList();
                            }
                            break;
                    }
                    State = 1701; endOfStatement();
                    State = 1703;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 1702; block();
                        }
                    }

                    State = 1705; Match(END_SUB);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TimeStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public TimeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_timeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTimeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTimeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TimeStmtContext timeStmt()
        {
            TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
            EnterRule(_localctx, 188, RULE_timeStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1707; Match(TIME);
                    State = 1709;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1708; Match(WS);
                        }
                    }

                    State = 1711; Match(EQ);
                    State = 1713;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1712; Match(WS);
                        }
                    }

                    State = 1715; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element()
            {
                return GetRuleContexts<TypeStmt_ElementContext>();
            }
            public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeStmt_ElementContext typeStmt_Element(int i)
            {
                return GetRuleContext<TypeStmt_ElementContext>(i);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
            public TypeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_typeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTypeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTypeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeStmtContext typeStmt()
        {
            TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
            EnterRule(_localctx, 190, RULE_typeStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1720;
                    _la = _input.La(1);
                    if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0))
                    {
                        {
                            State = 1717; visibility();
                            State = 1718; Match(WS);
                        }
                    }

                    State = 1722; Match(TYPE);
                    State = 1723; Match(WS);
                    State = 1724; ambiguousIdentifier();
                    State = 1725; endOfStatement();
                    State = 1729;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            {
                                State = 1726; typeStmt_Element();
                            }
                        }
                        State = 1731;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 1732; Match(END_TYPE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeStmt_ElementContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public SubscriptsContext subscripts()
            {
                return GetRuleContext<SubscriptsContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_typeStmt_Element; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeStmt_ElementContext typeStmt_Element()
        {
            TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
            EnterRule(_localctx, 192, RULE_typeStmt_Element);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1734; ambiguousIdentifier();
                    State = 1749;
                    switch (Interpreter.AdaptivePredict(_input, 254, _ctx))
                    {
                        case 1:
                            {
                                State = 1736;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1735; Match(WS);
                                    }
                                }

                                State = 1738; Match(LPAREN);
                                State = 1743;
                                switch (Interpreter.AdaptivePredict(_input, 252, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1740;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1739; Match(WS);
                                                }
                                            }

                                            State = 1742; subscripts();
                                        }
                                        break;
                                }
                                State = 1746;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1745; Match(WS);
                                    }
                                }

                                State = 1748; Match(RPAREN);
                            }
                            break;
                    }
                    State = 1753;
                    switch (Interpreter.AdaptivePredict(_input, 255, _ctx))
                    {
                        case 1:
                            {
                                State = 1751; Match(WS);
                                State = 1752; asTypeClause();
                            }
                            break;
                    }
                    State = 1755; endOfStatement();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeOfStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
            public TypeContext type()
            {
                return GetRuleContext<TypeContext>(0);
            }
            public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_typeOfStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTypeOfStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTypeOfStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeOfStmtContext typeOfStmt()
        {
            TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
            EnterRule(_localctx, 194, RULE_typeOfStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1757; Match(TYPEOF);
                    State = 1758; Match(WS);
                    State = 1759; valueStmt(0);
                    State = 1764;
                    switch (Interpreter.AdaptivePredict(_input, 256, _ctx))
                    {
                        case 1:
                            {
                                State = 1760; Match(WS);
                                State = 1761; Match(IS);
                                State = 1762; Match(WS);
                                State = 1763; type();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class UnloadStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
            public UnloadStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_unloadStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterUnloadStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitUnloadStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public UnloadStmtContext unloadStmt()
        {
            UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
            EnterRule(_localctx, 196, RULE_unloadStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1766; Match(UNLOAD);
                    State = 1767; Match(WS);
                    State = 1768; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class UnlockStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public UnlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_unlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterUnlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitUnlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public UnlockStmtContext unlockStmt()
        {
            UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
            EnterRule(_localctx, 198, RULE_unlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1770; Match(UNLOCK);
                    State = 1771; Match(WS);
                    State = 1772; fileNumber();
                    State = 1787;
                    switch (Interpreter.AdaptivePredict(_input, 260, _ctx))
                    {
                        case 1:
                            {
                                State = 1774;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1773; Match(WS);
                                    }
                                }

                                State = 1776; Match(T__1);
                                State = 1778;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1777; Match(WS);
                                    }
                                }

                                State = 1780; valueStmt(0);
                                State = 1785;
                                switch (Interpreter.AdaptivePredict(_input, 259, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1781; Match(WS);
                                            State = 1782; Match(TO);
                                            State = 1783; Match(WS);
                                            State = 1784; valueStmt(0);
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ValueStmtContext : ParserRuleContext
        {
            public ValueStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_valueStmt; } }

            public ValueStmtContext() { }
            public virtual void CopyFrom(ValueStmtContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class VsAssignContext : ValueStmtContext
        {
            public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAssign(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAssign(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsNotContext : ValueStmtContext
        {
            public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsNot(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsNot(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsStructContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsStruct(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsStruct(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsTypeOfContext : ValueStmtContext
        {
            public TypeOfStmtContext typeOfStmt()
            {
                return GetRuleContext<TypeOfStmtContext>(0);
            }
            public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsTypeOf(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsTypeOf(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsICSContext : ValueStmtContext
        {
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsICS(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsICS(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsRelationalContext : ValueStmtContext
        {
            public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
            public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
            public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsRelationalContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsRelational(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsRelational(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsRelational(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsXorContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsXor(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsXor(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsAndContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAnd(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAnd(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsPowContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
            public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsPow(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsPow(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsAddContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
            public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAdd(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAdd(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsModContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsModContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsMod(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsMod(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsIntDivContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode INTDIV() { return GetToken(VBAParser.INTDIV, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsIntDivContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsIntDiv(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsIntDiv(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsIntDiv(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsAmpContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAmp(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAmp(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsAddressOfContext : ValueStmtContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
            public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAddressOf(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAddressOf(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsNewContext : ValueStmtContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
            public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsNew(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsNew(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsOrContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsOr(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsOr(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsMultContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
            public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsMult(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsMult(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsLiteralContext : ValueStmtContext
        {
            public LiteralContext literal()
            {
                return GetRuleContext<LiteralContext>(0);
            }
            public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsLiteral(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsLiteral(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsEqvContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsEqv(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsEqv(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsNegationContext : ValueStmtContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
            public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsNegation(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsNegation(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsImpContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsImp(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsImp(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsMidContext : ValueStmtContext
        {
            public MidStmtContext midStmt()
            {
                return GetRuleContext<MidStmtContext>(0);
            }
            public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsMid(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsMid(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ValueStmtContext valueStmt()
        {
            return valueStmt(0);
        }

        private ValueStmtContext valueStmt(int _p)
        {
            ParserRuleContext _parentctx = _ctx;
            int _parentState = State;
            ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
            ValueStmtContext _prevctx = _localctx;
            int _startState = 200;
            EnterRecursionRule(_localctx, 200, RULE_valueStmt, _p);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1844;
                    switch (Interpreter.AdaptivePredict(_input, 271, _ctx))
                    {
                        case 1:
                            {
                                _localctx = new VsNewContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;

                                State = 1790; Match(NEW);
                                State = 1792;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1791; Match(WS);
                                    }
                                }

                                State = 1794; valueStmt(19);
                            }
                            break;

                        case 2:
                            {
                                _localctx = new VsAddressOfContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1795; Match(ADDRESSOF);
                                State = 1797;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1796; Match(WS);
                                    }
                                }

                                State = 1799; valueStmt(16);
                            }
                            break;

                        case 3:
                            {
                                _localctx = new VsAssignContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1800; implicitCallStmt_InStmt();
                                State = 1802;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1801; Match(WS);
                                    }
                                }

                                State = 1804; Match(ASSIGN);
                                State = 1806;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1805; Match(WS);
                                    }
                                }

                                State = 1808; valueStmt(15);
                            }
                            break;

                        case 4:
                            {
                                _localctx = new VsNegationContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1810; Match(MINUS);
                                State = 1812;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1811; Match(WS);
                                    }
                                }

                                State = 1814; valueStmt(13);
                            }
                            break;

                        case 5:
                            {
                                _localctx = new VsNotContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1815; Match(NOT);
                                State = 1817;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1816; Match(WS);
                                    }
                                }

                                State = 1819; valueStmt(6);
                            }
                            break;

                        case 6:
                            {
                                _localctx = new VsLiteralContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1820; literal();
                            }
                            break;

                        case 7:
                            {
                                _localctx = new VsICSContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1821; implicitCallStmt_InStmt();
                            }
                            break;

                        case 8:
                            {
                                _localctx = new VsStructContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1822; Match(LPAREN);
                                State = 1824;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1823; Match(WS);
                                    }
                                }

                                State = 1826; valueStmt(0);
                                State = 1837;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                while (_la == T__1 || _la == WS)
                                {
                                    {
                                        {
                                            State = 1828;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1827; Match(WS);
                                                }
                                            }

                                            State = 1830; Match(T__1);
                                            State = 1832;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1831; Match(WS);
                                                }
                                            }

                                            State = 1834; valueStmt(0);
                                        }
                                    }
                                    State = 1839;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                }
                                State = 1840; Match(RPAREN);
                            }
                            break;

                        case 9:
                            {
                                _localctx = new VsTypeOfContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1842; typeOfStmt();
                            }
                            break;

                        case 10:
                            {
                                _localctx = new VsMidContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1843; midStmt();
                            }
                            break;
                    }
                    _ctx.stop = _input.Lt(-1);
                    State = 1956;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 297, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            if (_parseListeners != null) TriggerExitRuleEvent();
                            _prevctx = _localctx;
                            {
                                State = 1954;
                                switch (Interpreter.AdaptivePredict(_input, 296, _ctx))
                                {
                                    case 1:
                                        {
                                            _localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1846;
                                            if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
                                            State = 1848;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1847; Match(WS);
                                                }
                                            }

                                            State = 1850; Match(POW);
                                            State = 1852;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1851; Match(WS);
                                                }
                                            }

                                            State = 1854; valueStmt(15);
                                        }
                                        break;

                                    case 2:
                                        {
                                            _localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1855;
                                            if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
                                            State = 1857;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1856; Match(WS);
                                                }
                                            }

                                            State = 1859;
                                            _la = _input.La(1);
                                            if (!(_la == DIV || _la == MULT))
                                            {
                                                _errHandler.RecoverInline(this);
                                            }
                                            Consume();
                                            State = 1861;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1860; Match(WS);
                                                }
                                            }

                                            State = 1863; valueStmt(13);
                                        }
                                        break;

                                    case 3:
                                        {
                                            _localctx = new VsIntDivContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1864;
                                            if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
                                            State = 1866;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1865; Match(WS);
                                                }
                                            }

                                            State = 1868; Match(INTDIV);
                                            State = 1870;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1869; Match(WS);
                                                }
                                            }

                                            State = 1872; valueStmt(12);
                                        }
                                        break;

                                    case 4:
                                        {
                                            _localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1873;
                                            if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
                                            State = 1875;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1874; Match(WS);
                                                }
                                            }

                                            State = 1877; Match(MOD);
                                            State = 1879;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1878; Match(WS);
                                                }
                                            }

                                            State = 1881; valueStmt(11);
                                        }
                                        break;

                                    case 5:
                                        {
                                            _localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1882;
                                            if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
                                            State = 1884;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1883; Match(WS);
                                                }
                                            }

                                            State = 1886;
                                            _la = _input.La(1);
                                            if (!(_la == MINUS || _la == PLUS))
                                            {
                                                _errHandler.RecoverInline(this);
                                            }
                                            Consume();
                                            State = 1888;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1887; Match(WS);
                                                }
                                            }

                                            State = 1890; valueStmt(10);
                                        }
                                        break;

                                    case 6:
                                        {
                                            _localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1891;
                                            if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
                                            State = 1893;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1892; Match(WS);
                                                }
                                            }

                                            State = 1895; Match(AMPERSAND);
                                            State = 1897;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1896; Match(WS);
                                                }
                                            }

                                            State = 1899; valueStmt(9);
                                        }
                                        break;

                                    case 7:
                                        {
                                            _localctx = new VsRelationalContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1900;
                                            if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
                                            State = 1902;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1901; Match(WS);
                                                }
                                            }

                                            State = 1904;
                                            _la = _input.La(1);
                                            if (!(_la == IS || _la == LIKE || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (EQ - 190)) | (1L << (GEQ - 190)) | (1L << (GT - 190)) | (1L << (LEQ - 190)) | (1L << (LT - 190)) | (1L << (NEQ - 190)))) != 0)))
                                            {
                                                _errHandler.RecoverInline(this);
                                            }
                                            Consume();
                                            State = 1906;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1905; Match(WS);
                                                }
                                            }

                                            State = 1908; valueStmt(8);
                                        }
                                        break;

                                    case 8:
                                        {
                                            _localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1909;
                                            if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
                                            State = 1911;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1910; Match(WS);
                                                }
                                            }

                                            State = 1913; Match(AND);
                                            State = 1915;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1914; Match(WS);
                                                }
                                            }

                                            State = 1917; valueStmt(6);
                                        }
                                        break;

                                    case 9:
                                        {
                                            _localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1918;
                                            if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
                                            State = 1920;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1919; Match(WS);
                                                }
                                            }

                                            State = 1922; Match(OR);
                                            State = 1924;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1923; Match(WS);
                                                }
                                            }

                                            State = 1926; valueStmt(5);
                                        }
                                        break;

                                    case 10:
                                        {
                                            _localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1927;
                                            if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
                                            State = 1929;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1928; Match(WS);
                                                }
                                            }

                                            State = 1931; Match(XOR);
                                            State = 1933;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1932; Match(WS);
                                                }
                                            }

                                            State = 1935; valueStmt(4);
                                        }
                                        break;

                                    case 11:
                                        {
                                            _localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1936;
                                            if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
                                            State = 1938;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1937; Match(WS);
                                                }
                                            }

                                            State = 1940; Match(EQV);
                                            State = 1942;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1941; Match(WS);
                                                }
                                            }

                                            State = 1944; valueStmt(3);
                                        }
                                        break;

                                    case 12:
                                        {
                                            _localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 1945;
                                            if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
                                            State = 1947;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1946; Match(WS);
                                                }
                                            }

                                            State = 1949; Match(IMP);
                                            State = 1951;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1950; Match(WS);
                                                }
                                            }

                                            State = 1953; valueStmt(2);
                                        }
                                        break;
                                }
                            }
                        }
                        State = 1958;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 297, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                UnrollRecursionContexts(_parentctx);
            }
            return _localctx;
        }

        public partial class VariableStmtContext : ParserRuleContext
        {
            public VariableListStmtContext variableListStmt()
            {
                return GetRuleContext<VariableListStmtContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
            public VariableStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_variableStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVariableStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVariableStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VariableStmtContext variableStmt()
        {
            VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
            EnterRule(_localctx, 202, RULE_variableStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1962;
                    switch (_input.La(1))
                    {
                        case DIM:
                            {
                                State = 1959; Match(DIM);
                            }
                            break;
                        case STATIC:
                            {
                                State = 1960; Match(STATIC);
                            }
                            break;
                        case FRIEND:
                        case GLOBAL:
                        case PRIVATE:
                        case PUBLIC:
                            {
                                State = 1961; visibility();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 1964; Match(WS);
                    State = 1967;
                    switch (Interpreter.AdaptivePredict(_input, 299, _ctx))
                    {
                        case 1:
                            {
                                State = 1965; Match(WITHEVENTS);
                                State = 1966; Match(WS);
                            }
                            break;
                    }
                    State = 1969; variableListStmt();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class VariableListStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<VariableSubStmtContext> variableSubStmt()
            {
                return GetRuleContexts<VariableSubStmtContext>();
            }
            public VariableSubStmtContext variableSubStmt(int i)
            {
                return GetRuleContext<VariableSubStmtContext>(i);
            }
            public VariableListStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_variableListStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVariableListStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVariableListStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VariableListStmtContext variableListStmt()
        {
            VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
            EnterRule(_localctx, 204, RULE_variableListStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1971; variableSubStmt();
                    State = 1982;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 302, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 1973;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1972; Match(WS);
                                        }
                                    }

                                    State = 1975; Match(T__1);
                                    State = 1977;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1976; Match(WS);
                                        }
                                    }

                                    State = 1979; variableSubStmt();
                                }
                            }
                        }
                        State = 1984;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 302, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class VariableSubStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public SubscriptsContext subscripts()
            {
                return GetRuleContext<SubscriptsContext>(0);
            }
            public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_variableSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVariableSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVariableSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VariableSubStmtContext variableSubStmt()
        {
            VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
            EnterRule(_localctx, 206, RULE_variableSubStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1985; ambiguousIdentifier();
                    State = 2003;
                    switch (Interpreter.AdaptivePredict(_input, 308, _ctx))
                    {
                        case 1:
                            {
                                State = 1987;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1986; Match(WS);
                                    }
                                }

                                State = 1989; Match(LPAREN);
                                State = 1991;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1990; Match(WS);
                                    }
                                }

                                State = 1997;
                                _la = _input.La(1);
                                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (LPAREN - 194)) | (1L << (MINUS - 194)) | (1L << (STRINGLITERAL - 194)) | (1L << (OCTLITERAL - 194)) | (1L << (HEXLITERAL - 194)) | (1L << (SHORTLITERAL - 194)) | (1L << (INTEGERLITERAL - 194)) | (1L << (DOUBLELITERAL - 194)) | (1L << (DATELITERAL - 194)) | (1L << (IDENTIFIER - 194)))) != 0))
                                {
                                    {
                                        State = 1993; subscripts();
                                        State = 1995;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 1994; Match(WS);
                                            }
                                        }

                                    }
                                }

                                State = 1999; Match(RPAREN);
                                State = 2001;
                                switch (Interpreter.AdaptivePredict(_input, 307, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 2000; Match(WS);
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                    State = 2006;
                    switch (Interpreter.AdaptivePredict(_input, 309, _ctx))
                    {
                        case 1:
                            {
                                State = 2005; typeHint();
                            }
                            break;
                    }
                    State = 2010;
                    switch (Interpreter.AdaptivePredict(_input, 310, _ctx))
                    {
                        case 1:
                            {
                                State = 2008; Match(WS);
                                State = 2009; asTypeClause();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class WhileWendStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
            public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_whileWendStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterWhileWendStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitWhileWendStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public WhileWendStmtContext whileWendStmt()
        {
            WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
            EnterRule(_localctx, 208, RULE_whileWendStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2012; Match(WHILE);
                    State = 2013; Match(WS);
                    State = 2014; valueStmt(0);
                    State = 2015; endOfStatement();
                    State = 2017;
                    switch (Interpreter.AdaptivePredict(_input, 311, _ctx))
                    {
                        case 1:
                            {
                                State = 2016; block();
                            }
                            break;
                    }
                    State = 2019; Match(WEND);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class WidthStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public WidthStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_widthStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterWidthStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitWidthStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public WidthStmtContext widthStmt()
        {
            WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
            EnterRule(_localctx, 210, RULE_widthStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2021; Match(WIDTH);
                    State = 2022; Match(WS);
                    State = 2023; fileNumber();
                    State = 2025;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2024; Match(WS);
                        }
                    }

                    State = 2027; Match(T__1);
                    State = 2029;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2028; Match(WS);
                        }
                    }

                    State = 2031; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class WithStmtContext : ParserRuleContext
        {
            public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
            public TypeContext type()
            {
                return GetRuleContext<TypeContext>(0);
            }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public EndOfStatementContext endOfStatement()
            {
                return GetRuleContext<EndOfStatementContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
            public WithStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_withStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterWithStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitWithStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public WithStmtContext withStmt()
        {
            WithStmtContext _localctx = new WithStmtContext(_ctx, State);
            EnterRule(_localctx, 212, RULE_withStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2033; Match(WITH);
                    State = 2034; Match(WS);
                    State = 2039;
                    switch (Interpreter.AdaptivePredict(_input, 314, _ctx))
                    {
                        case 1:
                            {
                                State = 2035; implicitCallStmt_InStmt();
                            }
                            break;

                        case 2:
                            {
                                {
                                    State = 2036; Match(NEW);
                                    State = 2037; Match(WS);
                                    State = 2038; type();
                                }
                            }
                            break;
                    }
                    State = 2041; endOfStatement();
                    State = 2043;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 2042; block();
                        }
                    }

                    State = 2045; Match(END_WITH);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class WriteStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public OutputListContext outputList()
            {
                return GetRuleContext<OutputListContext>(0);
            }
            public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public WriteStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_writeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterWriteStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitWriteStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public WriteStmtContext writeStmt()
        {
            WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
            EnterRule(_localctx, 214, RULE_writeStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2047; Match(WRITE);
                    State = 2048; Match(WS);
                    State = 2049; fileNumber();
                    State = 2051;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2050; Match(WS);
                        }
                    }

                    State = 2053; Match(T__1);
                    State = 2058;
                    switch (Interpreter.AdaptivePredict(_input, 318, _ctx))
                    {
                        case 1:
                            {
                                State = 2055;
                                switch (Interpreter.AdaptivePredict(_input, 317, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 2054; Match(WS);
                                        }
                                        break;
                                }
                                State = 2057; outputList();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FileNumberContext : ParserRuleContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public FileNumberContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_fileNumber; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterFileNumber(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitFileNumber(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FileNumberContext fileNumber()
        {
            FileNumberContext _localctx = new FileNumberContext(_ctx, State);
            EnterRule(_localctx, 216, RULE_fileNumber);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2061;
                    _la = _input.La(1);
                    if (_la == T__5)
                    {
                        {
                            State = 2060; Match(T__5);
                        }
                    }

                    State = 2063; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ExplicitCallStmtContext : ParserRuleContext
        {
            public ECS_ProcedureCallContext eCS_ProcedureCall()
            {
                return GetRuleContext<ECS_ProcedureCallContext>(0);
            }
            public ECS_MemberProcedureCallContext eCS_MemberProcedureCall()
            {
                return GetRuleContext<ECS_MemberProcedureCallContext>(0);
            }
            public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_explicitCallStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ExplicitCallStmtContext explicitCallStmt()
        {
            ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
            EnterRule(_localctx, 218, RULE_explicitCallStmt);
            try
            {
                State = 2067;
                switch (Interpreter.AdaptivePredict(_input, 320, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 2065; eCS_ProcedureCall();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 2066; eCS_MemberProcedureCall();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ECS_ProcedureCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ECS_ProcedureCallContext eCS_ProcedureCall()
        {
            ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 220, RULE_eCS_ProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2069; Match(CALL);
                    State = 2070; Match(WS);
                    State = 2071; ambiguousIdentifier();
                    State = 2073;
                    switch (Interpreter.AdaptivePredict(_input, 321, _ctx))
                    {
                        case 1:
                            {
                                State = 2072; typeHint();
                            }
                            break;
                    }
                    State = 2088;
                    switch (Interpreter.AdaptivePredict(_input, 325, _ctx))
                    {
                        case 1:
                            {
                                State = 2076;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2075; Match(WS);
                                    }
                                }

                                State = 2078; Match(LPAREN);
                                State = 2080;
                                switch (Interpreter.AdaptivePredict(_input, 323, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 2079; Match(WS);
                                        }
                                        break;
                                }
                                State = 2082; argsCall();
                                State = 2084;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2083; Match(WS);
                                    }
                                }

                                State = 2086; Match(RPAREN);
                            }
                            break;
                    }
                    State = 2099;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 327, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2091;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2090; Match(WS);
                                        }
                                    }

                                    State = 2093; Match(LPAREN);
                                    State = 2094; subscripts();
                                    State = 2095; Match(RPAREN);
                                }
                            }
                        }
                        State = 2101;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 327, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ECS_MemberProcedureCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ECS_MemberProcedureCallContext eCS_MemberProcedureCall()
        {
            ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 222, RULE_eCS_MemberProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2102; Match(CALL);
                    State = 2103; Match(WS);
                    State = 2105;
                    switch (Interpreter.AdaptivePredict(_input, 328, _ctx))
                    {
                        case 1:
                            {
                                State = 2104; implicitCallStmt_InStmt();
                            }
                            break;
                    }
                    State = 2107; Match(T__0);
                    State = 2108; ambiguousIdentifier();
                    State = 2110;
                    switch (Interpreter.AdaptivePredict(_input, 329, _ctx))
                    {
                        case 1:
                            {
                                State = 2109; typeHint();
                            }
                            break;
                    }
                    State = 2125;
                    switch (Interpreter.AdaptivePredict(_input, 333, _ctx))
                    {
                        case 1:
                            {
                                State = 2113;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2112; Match(WS);
                                    }
                                }

                                State = 2115; Match(LPAREN);
                                State = 2117;
                                switch (Interpreter.AdaptivePredict(_input, 331, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 2116; Match(WS);
                                        }
                                        break;
                                }
                                State = 2119; argsCall();
                                State = 2121;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2120; Match(WS);
                                    }
                                }

                                State = 2123; Match(RPAREN);
                            }
                            break;
                    }
                    State = 2136;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 335, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2128;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2127; Match(WS);
                                        }
                                    }

                                    State = 2130; Match(LPAREN);
                                    State = 2131; subscripts();
                                    State = 2132; Match(RPAREN);
                                }
                            }
                        }
                        State = 2138;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 335, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext
        {
            public ICS_B_ProcedureCallContext iCS_B_ProcedureCall()
            {
                return GetRuleContext<ICS_B_ProcedureCallContext>(0);
            }
            public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall()
            {
                return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
            }
            public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock()
        {
            ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
            EnterRule(_localctx, 224, RULE_implicitCallStmt_InBlock);
            try
            {
                State = 2141;
                switch (Interpreter.AdaptivePredict(_input, 336, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 2139; iCS_B_MemberProcedureCall();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 2140; iCS_B_ProcedureCall();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall()
        {
            ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 226, RULE_iCS_B_MemberProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2144;
                    switch (Interpreter.AdaptivePredict(_input, 337, _ctx))
                    {
                        case 1:
                            {
                                State = 2143; implicitCallStmt_InStmt();
                            }
                            break;
                    }
                    State = 2146; Match(T__0);
                    State = 2147; ambiguousIdentifier();
                    State = 2149;
                    switch (Interpreter.AdaptivePredict(_input, 338, _ctx))
                    {
                        case 1:
                            {
                                State = 2148; typeHint();
                            }
                            break;
                    }
                    State = 2153;
                    switch (Interpreter.AdaptivePredict(_input, 339, _ctx))
                    {
                        case 1:
                            {
                                State = 2151; Match(WS);
                                State = 2152; argsCall();
                            }
                            break;
                    }
                    State = 2156;
                    switch (Interpreter.AdaptivePredict(_input, 340, _ctx))
                    {
                        case 1:
                            {
                                State = 2155; dictionaryCallStmt();
                            }
                            break;
                    }
                    State = 2167;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 342, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2159;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2158; Match(WS);
                                        }
                                    }

                                    State = 2161; Match(LPAREN);
                                    State = 2162; subscripts();
                                    State = 2163; Match(RPAREN);
                                }
                            }
                        }
                        State = 2169;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 342, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_B_ProcedureCallContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public CertainIdentifierContext certainIdentifier()
            {
                return GetRuleContext<CertainIdentifierContext>(0);
            }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_B_ProcedureCallContext iCS_B_ProcedureCall()
        {
            ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 228, RULE_iCS_B_ProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2170; certainIdentifier();
                    State = 2173;
                    switch (Interpreter.AdaptivePredict(_input, 343, _ctx))
                    {
                        case 1:
                            {
                                State = 2171; Match(WS);
                                State = 2172; argsCall();
                            }
                            break;
                    }
                    State = 2184;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 345, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2176;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2175; Match(WS);
                                        }
                                    }

                                    State = 2178; Match(LPAREN);
                                    State = 2179; subscripts();
                                    State = 2180; Match(RPAREN);
                                }
                            }
                        }
                        State = 2186;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 345, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext
        {
            public ICS_S_MembersCallContext iCS_S_MembersCall()
            {
                return GetRuleContext<ICS_S_MembersCallContext>(0);
            }
            public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall()
            {
                return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
            }
            public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall()
            {
                return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
            }
            public ICS_S_DictionaryCallContext iCS_S_DictionaryCall()
            {
                return GetRuleContext<ICS_S_DictionaryCallContext>(0);
            }
            public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
        {
            ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
            EnterRule(_localctx, 230, RULE_implicitCallStmt_InStmt);
            try
            {
                State = 2191;
                switch (Interpreter.AdaptivePredict(_input, 346, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 2187; iCS_S_MembersCall();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 2188; iCS_S_VariableOrProcedureCall();
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 2189; iCS_S_ProcedureOrArrayCall();
                        }
                        break;

                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 2190; iCS_S_DictionaryCall();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall()
        {
            ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 232, RULE_iCS_S_VariableOrProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2193; ambiguousIdentifier();
                    State = 2195;
                    switch (Interpreter.AdaptivePredict(_input, 347, _ctx))
                    {
                        case 1:
                            {
                                State = 2194; typeHint();
                            }
                            break;
                    }
                    State = 2198;
                    switch (Interpreter.AdaptivePredict(_input, 348, _ctx))
                    {
                        case 1:
                            {
                                State = 2197; dictionaryCallStmt();
                            }
                            break;
                    }
                    State = 2209;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 350, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2201;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2200; Match(WS);
                                        }
                                    }

                                    State = 2203; Match(LPAREN);
                                    State = 2204; subscripts();
                                    State = 2205; Match(RPAREN);
                                }
                            }
                        }
                        State = 2211;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 350, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public BaseTypeContext baseType()
            {
                return GetRuleContext<BaseTypeContext>(0);
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall()
        {
            ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
            EnterRule(_localctx, 234, RULE_iCS_S_ProcedureOrArrayCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2214;
                    switch (Interpreter.AdaptivePredict(_input, 351, _ctx))
                    {
                        case 1:
                            {
                                State = 2212; ambiguousIdentifier();
                            }
                            break;

                        case 2:
                            {
                                State = 2213; baseType();
                            }
                            break;
                    }
                    State = 2217;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 2216; typeHint();
                        }
                    }

                    State = 2220;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2219; Match(WS);
                        }
                    }

                    State = 2222; Match(LPAREN);
                    State = 2224;
                    switch (Interpreter.AdaptivePredict(_input, 354, _ctx))
                    {
                        case 1:
                            {
                                State = 2223; Match(WS);
                            }
                            break;
                    }
                    State = 2230;
                    switch (Interpreter.AdaptivePredict(_input, 356, _ctx))
                    {
                        case 1:
                            {
                                State = 2226; argsCall();
                                State = 2228;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2227; Match(WS);
                                    }
                                }

                            }
                            break;
                    }
                    State = 2232; Match(RPAREN);
                    State = 2234;
                    switch (Interpreter.AdaptivePredict(_input, 357, _ctx))
                    {
                        case 1:
                            {
                                State = 2233; dictionaryCallStmt();
                            }
                            break;
                    }
                    State = 2245;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 359, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2237;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2236; Match(WS);
                                        }
                                    }

                                    State = 2239; Match(LPAREN);
                                    State = 2240; subscripts();
                                    State = 2241; Match(RPAREN);
                                }
                            }
                        }
                        State = 2247;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 359, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_MembersCallContext : ParserRuleContext
        {
            public ICS_S_MemberCallContext iCS_S_MemberCall(int i)
            {
                return GetRuleContext<ICS_S_MemberCallContext>(i);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall()
            {
                return GetRuleContexts<ICS_S_MemberCallContext>();
            }
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall()
            {
                return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
            }
            public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall()
            {
                return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_MembersCallContext iCS_S_MembersCall()
        {
            ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
            EnterRule(_localctx, 236, RULE_iCS_S_MembersCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2250;
                    switch (Interpreter.AdaptivePredict(_input, 360, _ctx))
                    {
                        case 1:
                            {
                                State = 2248; iCS_S_VariableOrProcedureCall();
                            }
                            break;

                        case 2:
                            {
                                State = 2249; iCS_S_ProcedureOrArrayCall();
                            }
                            break;
                    }
                    State = 2253;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 2252; iCS_S_MemberCall();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 2255;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 361, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                    State = 2258;
                    switch (Interpreter.AdaptivePredict(_input, 362, _ctx))
                    {
                        case 1:
                            {
                                State = 2257; dictionaryCallStmt();
                            }
                            break;
                    }
                    State = 2269;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 364, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2261;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2260; Match(WS);
                                        }
                                    }

                                    State = 2263; Match(LPAREN);
                                    State = 2264; subscripts();
                                    State = 2265; Match(RPAREN);
                                }
                            }
                        }
                        State = 2271;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 364, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_MemberCallContext : ParserRuleContext
        {
            public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall()
            {
                return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
            }
            public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall()
            {
                return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
            }
            public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_MemberCallContext iCS_S_MemberCall()
        {
            ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
            EnterRule(_localctx, 238, RULE_iCS_S_MemberCall);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2272;
                    _la = _input.La(1);
                    if (!(_la == T__6 || _la == T__0))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                    State = 2275;
                    switch (Interpreter.AdaptivePredict(_input, 365, _ctx))
                    {
                        case 1:
                            {
                                State = 2273; iCS_S_VariableOrProcedureCall();
                            }
                            break;

                        case 2:
                            {
                                State = 2274; iCS_S_ProcedureOrArrayCall();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_DictionaryCallContext : ParserRuleContext
        {
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_DictionaryCallContext iCS_S_DictionaryCall()
        {
            ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
            EnterRule(_localctx, 240, RULE_iCS_S_DictionaryCall);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2277; dictionaryCallStmt();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgsCallContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ArgCallContext> argCall()
            {
                return GetRuleContexts<ArgCallContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ArgCallContext argCall(int i)
            {
                return GetRuleContext<ArgCallContext>(i);
            }
            public ArgsCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argsCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArgsCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArgsCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgsCallContext argsCall()
        {
            ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
            EnterRule(_localctx, 242, RULE_argsCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2291;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 369, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2280;
                                    _la = _input.La(1);
                                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (LPAREN - 194)) | (1L << (MINUS - 194)) | (1L << (RPAREN - 194)) | (1L << (STRINGLITERAL - 194)) | (1L << (OCTLITERAL - 194)) | (1L << (HEXLITERAL - 194)) | (1L << (SHORTLITERAL - 194)) | (1L << (INTEGERLITERAL - 194)) | (1L << (DOUBLELITERAL - 194)) | (1L << (DATELITERAL - 194)) | (1L << (IDENTIFIER - 194)))) != 0))
                                    {
                                        {
                                            State = 2279; argCall();
                                        }
                                    }

                                    State = 2283;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2282; Match(WS);
                                        }
                                    }

                                    State = 2285;
                                    _la = _input.La(1);
                                    if (!(_la == T__2 || _la == T__1))
                                    {
                                        _errHandler.RecoverInline(this);
                                    }
                                    Consume();
                                    State = 2287;
                                    switch (Interpreter.AdaptivePredict(_input, 368, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 2286; Match(WS);
                                            }
                                            break;
                                    }
                                }
                            }
                        }
                        State = 2293;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 369, _ctx);
                    }
                    State = 2294; argCall();
                    State = 2307;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 373, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2296;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2295; Match(WS);
                                        }
                                    }

                                    State = 2298;
                                    _la = _input.La(1);
                                    if (!(_la == T__2 || _la == T__1))
                                    {
                                        _errHandler.RecoverInline(this);
                                    }
                                    Consume();
                                    State = 2300;
                                    switch (Interpreter.AdaptivePredict(_input, 371, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 2299; Match(WS);
                                            }
                                            break;
                                    }
                                    State = 2303;
                                    switch (Interpreter.AdaptivePredict(_input, 372, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 2302; argCall();
                                            }
                                            break;
                                    }
                                }
                            }
                        }
                        State = 2309;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 373, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgCallContext : ParserRuleContext
        {
            public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
            public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
            public ArgCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArgCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArgCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgCallContext argCall()
        {
            ArgCallContext _localctx = new ArgCallContext(_ctx, State);
            EnterRule(_localctx, 244, RULE_argCall);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2311;
                    switch (Interpreter.AdaptivePredict(_input, 374, _ctx))
                    {
                        case 1:
                            {
                                State = 2310; Match(LPAREN);
                            }
                            break;
                    }
                    State = 2315;
                    switch (Interpreter.AdaptivePredict(_input, 375, _ctx))
                    {
                        case 1:
                            {
                                State = 2313;
                                _la = _input.La(1);
                                if (!(_la == BYVAL || _la == BYREF || _la == PARAMARRAY))
                                {
                                    _errHandler.RecoverInline(this);
                                }
                                Consume();
                                State = 2314; Match(WS);
                            }
                            break;
                    }
                    State = 2318;
                    _la = _input.La(1);
                    if (_la == RPAREN)
                    {
                        {
                            State = 2317; Match(RPAREN);
                        }
                    }

                    State = 2320; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DictionaryCallStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DictionaryCallStmtContext dictionaryCallStmt()
        {
            DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
            EnterRule(_localctx, 246, RULE_dictionaryCallStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2322; Match(T__6);
                    State = 2323; ambiguousIdentifier();
                    State = 2325;
                    switch (Interpreter.AdaptivePredict(_input, 377, _ctx))
                    {
                        case 1:
                            {
                                State = 2324; typeHint();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgListContext : ParserRuleContext
        {
            public ArgContext arg(int i)
            {
                return GetRuleContext<ArgContext>(i);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public IReadOnlyList<ArgContext> arg()
            {
                return GetRuleContexts<ArgContext>();
            }
            public ArgListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArgList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArgList(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgList(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgListContext argList()
        {
            ArgListContext _localctx = new ArgListContext(_ctx, State);
            EnterRule(_localctx, 248, RULE_argList);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2327; Match(LPAREN);
                    State = 2345;
                    switch (Interpreter.AdaptivePredict(_input, 382, _ctx))
                    {
                        case 1:
                            {
                                State = 2329;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2328; Match(WS);
                                    }
                                }

                                State = 2331; arg();
                                State = 2342;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 381, _ctx);
                                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                                {
                                    if (_alt == 1)
                                    {
                                        {
                                            {
                                                State = 2333;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 2332; Match(WS);
                                                    }
                                                }

                                                State = 2335; Match(T__1);
                                                State = 2337;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 2336; Match(WS);
                                                    }
                                                }

                                                State = 2339; arg();
                                            }
                                        }
                                    }
                                    State = 2344;
                                    _errHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(_input, 381, _ctx);
                                }
                            }
                            break;
                    }
                    State = 2348;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2347; Match(WS);
                        }
                    }

                    State = 2350; Match(RPAREN);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgDefaultValueContext argDefaultValue()
            {
                return GetRuleContext<ArgDefaultValueContext>(0);
            }
            public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
            public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
            public ArgContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_arg; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArg(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArg(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArg(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgContext arg()
        {
            ArgContext _localctx = new ArgContext(_ctx, State);
            EnterRule(_localctx, 250, RULE_arg);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2354;
                    switch (Interpreter.AdaptivePredict(_input, 384, _ctx))
                    {
                        case 1:
                            {
                                State = 2352; Match(OPTIONAL);
                                State = 2353; Match(WS);
                            }
                            break;
                    }
                    State = 2358;
                    switch (Interpreter.AdaptivePredict(_input, 385, _ctx))
                    {
                        case 1:
                            {
                                State = 2356;
                                _la = _input.La(1);
                                if (!(_la == BYVAL || _la == BYREF))
                                {
                                    _errHandler.RecoverInline(this);
                                }
                                Consume();
                                State = 2357; Match(WS);
                            }
                            break;
                    }
                    State = 2362;
                    switch (Interpreter.AdaptivePredict(_input, 386, _ctx))
                    {
                        case 1:
                            {
                                State = 2360; Match(PARAMARRAY);
                                State = 2361; Match(WS);
                            }
                            break;
                    }
                    State = 2364; ambiguousIdentifier();
                    State = 2366;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 2365; typeHint();
                        }
                    }

                    State = 2376;
                    switch (Interpreter.AdaptivePredict(_input, 390, _ctx))
                    {
                        case 1:
                            {
                                State = 2369;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2368; Match(WS);
                                    }
                                }

                                State = 2371; Match(LPAREN);
                                State = 2373;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2372; Match(WS);
                                    }
                                }

                                State = 2375; Match(RPAREN);
                            }
                            break;
                    }
                    State = 2382;
                    switch (Interpreter.AdaptivePredict(_input, 392, _ctx))
                    {
                        case 1:
                            {
                                State = 2379;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2378; Match(WS);
                                    }
                                }

                                State = 2381; asTypeClause();
                            }
                            break;
                    }
                    State = 2388;
                    switch (Interpreter.AdaptivePredict(_input, 394, _ctx))
                    {
                        case 1:
                            {
                                State = 2385;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2384; Match(WS);
                                    }
                                }

                                State = 2387; argDefaultValue();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgDefaultValueContext : ParserRuleContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argDefaultValue; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArgDefaultValue(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArgDefaultValue(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgDefaultValueContext argDefaultValue()
        {
            ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
            EnterRule(_localctx, 252, RULE_argDefaultValue);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2390; Match(EQ);
                    State = 2392;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2391; Match(WS);
                        }
                    }

                    State = 2394; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SubscriptsContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<SubscriptContext> subscript()
            {
                return GetRuleContexts<SubscriptContext>();
            }
            public SubscriptContext subscript(int i)
            {
                return GetRuleContext<SubscriptContext>(i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public SubscriptsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_subscripts; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSubscripts(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSubscripts(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SubscriptsContext subscripts()
        {
            SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
            EnterRule(_localctx, 254, RULE_subscripts);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2396; subscript();
                    State = 2407;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 398, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2398;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2397; Match(WS);
                                        }
                                    }

                                    State = 2400; Match(T__1);
                                    State = 2402;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2401; Match(WS);
                                        }
                                    }

                                    State = 2404; subscript();
                                }
                            }
                        }
                        State = 2409;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 398, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SubscriptContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SubscriptContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_subscript; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSubscript(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSubscript(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SubscriptContext subscript()
        {
            SubscriptContext _localctx = new SubscriptContext(_ctx, State);
            EnterRule(_localctx, 256, RULE_subscript);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2415;
                    switch (Interpreter.AdaptivePredict(_input, 399, _ctx))
                    {
                        case 1:
                            {
                                State = 2410; valueStmt(0);
                                State = 2411; Match(WS);
                                State = 2412; Match(TO);
                                State = 2413; Match(WS);
                            }
                            break;
                    }
                    State = 2417; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AmbiguousIdentifierContext : ParserRuleContext
        {
            public AmbiguousKeywordContext ambiguousKeyword(int i)
            {
                return GetRuleContext<AmbiguousKeywordContext>(i);
            }
            public ITerminalNode IDENTIFIER(int i)
            {
                return GetToken(VBAParser.IDENTIFIER, i);
            }
            public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword()
            {
                return GetRuleContexts<AmbiguousKeywordContext>();
            }
            public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
            public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AmbiguousIdentifierContext ambiguousIdentifier()
        {
            AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
            EnterRule(_localctx, 258, RULE_ambiguousIdentifier);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2421;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    State = 2421;
                                    switch (_input.La(1))
                                    {
                                        case IDENTIFIER:
                                            {
                                                State = 2419; Match(IDENTIFIER);
                                            }
                                            break;
                                        case ACCESS:
                                        case ADDRESSOF:
                                        case ALIAS:
                                        case AND:
                                        case ATTRIBUTE:
                                        case APPACTIVATE:
                                        case APPEND:
                                        case AS:
                                        case BEGIN:
                                        case BEEP:
                                        case BINARY:
                                        case BOOLEAN:
                                        case BYVAL:
                                        case BYREF:
                                        case BYTE:
                                        case CALL:
                                        case CASE:
                                        case CHDIR:
                                        case CHDRIVE:
                                        case CLASS:
                                        case CLOSE:
                                        case COLLECTION:
                                        case CONST:
                                        case DATABASE:
                                        case DATE:
                                        case DECLARE:
                                        case DEFBOOL:
                                        case DEFBYTE:
                                        case DEFDATE:
                                        case DEFDBL:
                                        case DEFDEC:
                                        case DEFCUR:
                                        case DEFINT:
                                        case DEFLNG:
                                        case DEFOBJ:
                                        case DEFSNG:
                                        case DEFSTR:
                                        case DEFVAR:
                                        case DELETESETTING:
                                        case DIM:
                                        case DO:
                                        case DOUBLE:
                                        case EACH:
                                        case ELSE:
                                        case ELSEIF:
                                        case END:
                                        case ENUM:
                                        case EQV:
                                        case ERASE:
                                        case ERROR:
                                        case EVENT:
                                        case FALSE:
                                        case FILECOPY:
                                        case FRIEND:
                                        case FOR:
                                        case FUNCTION:
                                        case GET:
                                        case GLOBAL:
                                        case GOSUB:
                                        case GOTO:
                                        case IF:
                                        case IMP:
                                        case IMPLEMENTS:
                                        case IN:
                                        case INPUT:
                                        case IS:
                                        case INTEGER:
                                        case KILL:
                                        case LOAD:
                                        case LOCK:
                                        case LONG:
                                        case LOOP:
                                        case LEN:
                                        case LET:
                                        case LIB:
                                        case LIKE:
                                        case LSET:
                                        case ME:
                                        case MID:
                                        case MKDIR:
                                        case MOD:
                                        case NAME:
                                        case NEXT:
                                        case NEW:
                                        case NOT:
                                        case NOTHING:
                                        case NULL:
                                        case ON:
                                        case OPEN:
                                        case OPTIONAL:
                                        case OR:
                                        case OUTPUT:
                                        case PARAMARRAY:
                                        case PRESERVE:
                                        case PRINT:
                                        case PRIVATE:
                                        case PUBLIC:
                                        case PUT:
                                        case RANDOM:
                                        case RANDOMIZE:
                                        case RAISEEVENT:
                                        case READ:
                                        case REDIM:
                                        case REM:
                                        case RESET:
                                        case RESUME:
                                        case RETURN:
                                        case RMDIR:
                                        case RSET:
                                        case SAVEPICTURE:
                                        case SAVESETTING:
                                        case SEEK:
                                        case SELECT:
                                        case SENDKEYS:
                                        case SET:
                                        case SETATTR:
                                        case SHARED:
                                        case SINGLE:
                                        case SPC:
                                        case STATIC:
                                        case STEP:
                                        case STOP:
                                        case STRING:
                                        case SUB:
                                        case TAB:
                                        case TEXT:
                                        case THEN:
                                        case TIME:
                                        case TO:
                                        case TRUE:
                                        case TYPE:
                                        case TYPEOF:
                                        case UNLOAD:
                                        case UNLOCK:
                                        case UNTIL:
                                        case VARIANT:
                                        case VERSION:
                                        case WEND:
                                        case WHILE:
                                        case WIDTH:
                                        case WITH:
                                        case WITHEVENTS:
                                        case WRITE:
                                        case XOR:
                                            {
                                                State = 2420; ambiguousKeyword();
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 2423;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 401, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AsTypeClauseContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeContext type()
            {
                return GetRuleContext<TypeContext>(0);
            }
            public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
            public FieldLengthContext fieldLength()
            {
                return GetRuleContext<FieldLengthContext>(0);
            }
            public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
            public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_asTypeClause; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAsTypeClause(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAsTypeClause(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AsTypeClauseContext asTypeClause()
        {
            AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
            EnterRule(_localctx, 260, RULE_asTypeClause);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2425; Match(AS);
                    State = 2427;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2426; Match(WS);
                        }
                    }

                    State = 2431;
                    switch (Interpreter.AdaptivePredict(_input, 403, _ctx))
                    {
                        case 1:
                            {
                                State = 2429; Match(NEW);
                                State = 2430; Match(WS);
                            }
                            break;
                    }
                    State = 2433; type();
                    State = 2438;
                    switch (Interpreter.AdaptivePredict(_input, 405, _ctx))
                    {
                        case 1:
                            {
                                State = 2435;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2434; Match(WS);
                                    }
                                }

                                State = 2437; fieldLength();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BaseTypeContext : ParserRuleContext
        {
            public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
            public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
            public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
            public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
            public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
            public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
            public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
            public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
            public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
            public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
            public BaseTypeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_baseType; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBaseType(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBaseType(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BaseTypeContext baseType()
        {
            BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
            EnterRule(_localctx, 262, RULE_baseType);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2440;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || _la == INTEGER || _la == LONG || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (SINGLE - 159)) | (1L << (STRING - 159)) | (1L << (VARIANT - 159)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CertainIdentifierContext : ParserRuleContext
        {
            public AmbiguousKeywordContext ambiguousKeyword(int i)
            {
                return GetRuleContext<AmbiguousKeywordContext>(i);
            }
            public ITerminalNode IDENTIFIER(int i)
            {
                return GetToken(VBAParser.IDENTIFIER, i);
            }
            public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword()
            {
                return GetRuleContexts<AmbiguousKeywordContext>();
            }
            public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
            public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_certainIdentifier; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCertainIdentifier(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCertainIdentifier(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CertainIdentifierContext certainIdentifier()
        {
            CertainIdentifierContext _localctx = new CertainIdentifierContext(_ctx, State);
            EnterRule(_localctx, 264, RULE_certainIdentifier);
            try
            {
                int _alt;
                State = 2457;
                switch (_input.La(1))
                {
                    case IDENTIFIER:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 2442; Match(IDENTIFIER);
                            State = 2447;
                            _errHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(_input, 407, _ctx);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        State = 2445;
                                        switch (_input.La(1))
                                        {
                                            case ACCESS:
                                            case ADDRESSOF:
                                            case ALIAS:
                                            case AND:
                                            case ATTRIBUTE:
                                            case APPACTIVATE:
                                            case APPEND:
                                            case AS:
                                            case BEGIN:
                                            case BEEP:
                                            case BINARY:
                                            case BOOLEAN:
                                            case BYVAL:
                                            case BYREF:
                                            case BYTE:
                                            case CALL:
                                            case CASE:
                                            case CHDIR:
                                            case CHDRIVE:
                                            case CLASS:
                                            case CLOSE:
                                            case COLLECTION:
                                            case CONST:
                                            case DATABASE:
                                            case DATE:
                                            case DECLARE:
                                            case DEFBOOL:
                                            case DEFBYTE:
                                            case DEFDATE:
                                            case DEFDBL:
                                            case DEFDEC:
                                            case DEFCUR:
                                            case DEFINT:
                                            case DEFLNG:
                                            case DEFOBJ:
                                            case DEFSNG:
                                            case DEFSTR:
                                            case DEFVAR:
                                            case DELETESETTING:
                                            case DIM:
                                            case DO:
                                            case DOUBLE:
                                            case EACH:
                                            case ELSE:
                                            case ELSEIF:
                                            case END:
                                            case ENUM:
                                            case EQV:
                                            case ERASE:
                                            case ERROR:
                                            case EVENT:
                                            case FALSE:
                                            case FILECOPY:
                                            case FRIEND:
                                            case FOR:
                                            case FUNCTION:
                                            case GET:
                                            case GLOBAL:
                                            case GOSUB:
                                            case GOTO:
                                            case IF:
                                            case IMP:
                                            case IMPLEMENTS:
                                            case IN:
                                            case INPUT:
                                            case IS:
                                            case INTEGER:
                                            case KILL:
                                            case LOAD:
                                            case LOCK:
                                            case LONG:
                                            case LOOP:
                                            case LEN:
                                            case LET:
                                            case LIB:
                                            case LIKE:
                                            case LSET:
                                            case ME:
                                            case MID:
                                            case MKDIR:
                                            case MOD:
                                            case NAME:
                                            case NEXT:
                                            case NEW:
                                            case NOT:
                                            case NOTHING:
                                            case NULL:
                                            case ON:
                                            case OPEN:
                                            case OPTIONAL:
                                            case OR:
                                            case OUTPUT:
                                            case PARAMARRAY:
                                            case PRESERVE:
                                            case PRINT:
                                            case PRIVATE:
                                            case PUBLIC:
                                            case PUT:
                                            case RANDOM:
                                            case RANDOMIZE:
                                            case RAISEEVENT:
                                            case READ:
                                            case REDIM:
                                            case REM:
                                            case RESET:
                                            case RESUME:
                                            case RETURN:
                                            case RMDIR:
                                            case RSET:
                                            case SAVEPICTURE:
                                            case SAVESETTING:
                                            case SEEK:
                                            case SELECT:
                                            case SENDKEYS:
                                            case SET:
                                            case SETATTR:
                                            case SHARED:
                                            case SINGLE:
                                            case SPC:
                                            case STATIC:
                                            case STEP:
                                            case STOP:
                                            case STRING:
                                            case SUB:
                                            case TAB:
                                            case TEXT:
                                            case THEN:
                                            case TIME:
                                            case TO:
                                            case TRUE:
                                            case TYPE:
                                            case TYPEOF:
                                            case UNLOAD:
                                            case UNLOCK:
                                            case UNTIL:
                                            case VARIANT:
                                            case VERSION:
                                            case WEND:
                                            case WHILE:
                                            case WIDTH:
                                            case WITH:
                                            case WITHEVENTS:
                                            case WRITE:
                                            case XOR:
                                                {
                                                    State = 2443; ambiguousKeyword();
                                                }
                                                break;
                                            case IDENTIFIER:
                                                {
                                                    State = 2444; Match(IDENTIFIER);
                                                }
                                                break;
                                            default:
                                                throw new NoViableAltException(this);
                                        }
                                    }
                                }
                                State = 2449;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 407, _ctx);
                            }
                        }
                        break;
                    case ACCESS:
                    case ADDRESSOF:
                    case ALIAS:
                    case AND:
                    case ATTRIBUTE:
                    case APPACTIVATE:
                    case APPEND:
                    case AS:
                    case BEGIN:
                    case BEEP:
                    case BINARY:
                    case BOOLEAN:
                    case BYVAL:
                    case BYREF:
                    case BYTE:
                    case CALL:
                    case CASE:
                    case CHDIR:
                    case CHDRIVE:
                    case CLASS:
                    case CLOSE:
                    case COLLECTION:
                    case CONST:
                    case DATABASE:
                    case DATE:
                    case DECLARE:
                    case DEFBOOL:
                    case DEFBYTE:
                    case DEFDATE:
                    case DEFDBL:
                    case DEFDEC:
                    case DEFCUR:
                    case DEFINT:
                    case DEFLNG:
                    case DEFOBJ:
                    case DEFSNG:
                    case DEFSTR:
                    case DEFVAR:
                    case DELETESETTING:
                    case DIM:
                    case DO:
                    case DOUBLE:
                    case EACH:
                    case ELSE:
                    case ELSEIF:
                    case END:
                    case ENUM:
                    case EQV:
                    case ERASE:
                    case ERROR:
                    case EVENT:
                    case FALSE:
                    case FILECOPY:
                    case FRIEND:
                    case FOR:
                    case FUNCTION:
                    case GET:
                    case GLOBAL:
                    case GOSUB:
                    case GOTO:
                    case IF:
                    case IMP:
                    case IMPLEMENTS:
                    case IN:
                    case INPUT:
                    case IS:
                    case INTEGER:
                    case KILL:
                    case LOAD:
                    case LOCK:
                    case LONG:
                    case LOOP:
                    case LEN:
                    case LET:
                    case LIB:
                    case LIKE:
                    case LSET:
                    case ME:
                    case MID:
                    case MKDIR:
                    case MOD:
                    case NAME:
                    case NEXT:
                    case NEW:
                    case NOT:
                    case NOTHING:
                    case NULL:
                    case ON:
                    case OPEN:
                    case OPTIONAL:
                    case OR:
                    case OUTPUT:
                    case PARAMARRAY:
                    case PRESERVE:
                    case PRINT:
                    case PRIVATE:
                    case PUBLIC:
                    case PUT:
                    case RANDOM:
                    case RANDOMIZE:
                    case RAISEEVENT:
                    case READ:
                    case REDIM:
                    case REM:
                    case RESET:
                    case RESUME:
                    case RETURN:
                    case RMDIR:
                    case RSET:
                    case SAVEPICTURE:
                    case SAVESETTING:
                    case SEEK:
                    case SELECT:
                    case SENDKEYS:
                    case SET:
                    case SETATTR:
                    case SHARED:
                    case SINGLE:
                    case SPC:
                    case STATIC:
                    case STEP:
                    case STOP:
                    case STRING:
                    case SUB:
                    case TAB:
                    case TEXT:
                    case THEN:
                    case TIME:
                    case TO:
                    case TRUE:
                    case TYPE:
                    case TYPEOF:
                    case UNLOAD:
                    case UNLOCK:
                    case UNTIL:
                    case VARIANT:
                    case VERSION:
                    case WEND:
                    case WHILE:
                    case WIDTH:
                    case WITH:
                    case WITHEVENTS:
                    case WRITE:
                    case XOR:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 2450; ambiguousKeyword();
                            State = 2453;
                            _errHandler.Sync(this);
                            _alt = 1;
                            do
                            {
                                switch (_alt)
                                {
                                    case 1:
                                        {
                                            State = 2453;
                                            switch (_input.La(1))
                                            {
                                                case ACCESS:
                                                case ADDRESSOF:
                                                case ALIAS:
                                                case AND:
                                                case ATTRIBUTE:
                                                case APPACTIVATE:
                                                case APPEND:
                                                case AS:
                                                case BEGIN:
                                                case BEEP:
                                                case BINARY:
                                                case BOOLEAN:
                                                case BYVAL:
                                                case BYREF:
                                                case BYTE:
                                                case CALL:
                                                case CASE:
                                                case CHDIR:
                                                case CHDRIVE:
                                                case CLASS:
                                                case CLOSE:
                                                case COLLECTION:
                                                case CONST:
                                                case DATABASE:
                                                case DATE:
                                                case DECLARE:
                                                case DEFBOOL:
                                                case DEFBYTE:
                                                case DEFDATE:
                                                case DEFDBL:
                                                case DEFDEC:
                                                case DEFCUR:
                                                case DEFINT:
                                                case DEFLNG:
                                                case DEFOBJ:
                                                case DEFSNG:
                                                case DEFSTR:
                                                case DEFVAR:
                                                case DELETESETTING:
                                                case DIM:
                                                case DO:
                                                case DOUBLE:
                                                case EACH:
                                                case ELSE:
                                                case ELSEIF:
                                                case END:
                                                case ENUM:
                                                case EQV:
                                                case ERASE:
                                                case ERROR:
                                                case EVENT:
                                                case FALSE:
                                                case FILECOPY:
                                                case FRIEND:
                                                case FOR:
                                                case FUNCTION:
                                                case GET:
                                                case GLOBAL:
                                                case GOSUB:
                                                case GOTO:
                                                case IF:
                                                case IMP:
                                                case IMPLEMENTS:
                                                case IN:
                                                case INPUT:
                                                case IS:
                                                case INTEGER:
                                                case KILL:
                                                case LOAD:
                                                case LOCK:
                                                case LONG:
                                                case LOOP:
                                                case LEN:
                                                case LET:
                                                case LIB:
                                                case LIKE:
                                                case LSET:
                                                case ME:
                                                case MID:
                                                case MKDIR:
                                                case MOD:
                                                case NAME:
                                                case NEXT:
                                                case NEW:
                                                case NOT:
                                                case NOTHING:
                                                case NULL:
                                                case ON:
                                                case OPEN:
                                                case OPTIONAL:
                                                case OR:
                                                case OUTPUT:
                                                case PARAMARRAY:
                                                case PRESERVE:
                                                case PRINT:
                                                case PRIVATE:
                                                case PUBLIC:
                                                case PUT:
                                                case RANDOM:
                                                case RANDOMIZE:
                                                case RAISEEVENT:
                                                case READ:
                                                case REDIM:
                                                case REM:
                                                case RESET:
                                                case RESUME:
                                                case RETURN:
                                                case RMDIR:
                                                case RSET:
                                                case SAVEPICTURE:
                                                case SAVESETTING:
                                                case SEEK:
                                                case SELECT:
                                                case SENDKEYS:
                                                case SET:
                                                case SETATTR:
                                                case SHARED:
                                                case SINGLE:
                                                case SPC:
                                                case STATIC:
                                                case STEP:
                                                case STOP:
                                                case STRING:
                                                case SUB:
                                                case TAB:
                                                case TEXT:
                                                case THEN:
                                                case TIME:
                                                case TO:
                                                case TRUE:
                                                case TYPE:
                                                case TYPEOF:
                                                case UNLOAD:
                                                case UNLOCK:
                                                case UNTIL:
                                                case VARIANT:
                                                case VERSION:
                                                case WEND:
                                                case WHILE:
                                                case WIDTH:
                                                case WITH:
                                                case WITHEVENTS:
                                                case WRITE:
                                                case XOR:
                                                    {
                                                        State = 2451; ambiguousKeyword();
                                                    }
                                                    break;
                                                case IDENTIFIER:
                                                    {
                                                        State = 2452; Match(IDENTIFIER);
                                                    }
                                                    break;
                                                default:
                                                    throw new NoViableAltException(this);
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                                State = 2455;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 409, _ctx);
                            } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ComparisonOperatorContext : ParserRuleContext
        {
            public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
            public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
            public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
            public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
            public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_comparisonOperator; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterComparisonOperator(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitComparisonOperator(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ComparisonOperatorContext comparisonOperator()
        {
            ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
            EnterRule(_localctx, 266, RULE_comparisonOperator);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2459;
                    _la = _input.La(1);
                    if (!(_la == IS || _la == LIKE || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (EQ - 190)) | (1L << (GEQ - 190)) | (1L << (GT - 190)) | (1L << (LEQ - 190)) | (1L << (LT - 190)) | (1L << (NEQ - 190)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ComplexTypeContext : ParserRuleContext
        {
            public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier()
            {
                return GetRuleContexts<AmbiguousIdentifierContext>();
            }
            public AmbiguousIdentifierContext ambiguousIdentifier(int i)
            {
                return GetRuleContext<AmbiguousIdentifierContext>(i);
            }
            public ComplexTypeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_complexType; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterComplexType(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitComplexType(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ComplexTypeContext complexType()
        {
            ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
            EnterRule(_localctx, 268, RULE_complexType);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2461; ambiguousIdentifier();
                    State = 2466;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 411, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2462;
                                    _la = _input.La(1);
                                    if (!(_la == T__6 || _la == T__0))
                                    {
                                        _errHandler.RecoverInline(this);
                                    }
                                    Consume();
                                    State = 2463; ambiguousIdentifier();
                                }
                            }
                        }
                        State = 2468;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 411, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FieldLengthContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
            public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public FieldLengthContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_fieldLength; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterFieldLength(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitFieldLength(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FieldLengthContext fieldLength()
        {
            FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
            EnterRule(_localctx, 270, RULE_fieldLength);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2469; Match(MULT);
                    State = 2471;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2470; Match(WS);
                        }
                    }

                    State = 2475;
                    switch (_input.La(1))
                    {
                        case INTEGERLITERAL:
                            {
                                State = 2473; Match(INTEGERLITERAL);
                            }
                            break;
                        case ACCESS:
                        case ADDRESSOF:
                        case ALIAS:
                        case AND:
                        case ATTRIBUTE:
                        case APPACTIVATE:
                        case APPEND:
                        case AS:
                        case BEGIN:
                        case BEEP:
                        case BINARY:
                        case BOOLEAN:
                        case BYVAL:
                        case BYREF:
                        case BYTE:
                        case CALL:
                        case CASE:
                        case CHDIR:
                        case CHDRIVE:
                        case CLASS:
                        case CLOSE:
                        case COLLECTION:
                        case CONST:
                        case DATABASE:
                        case DATE:
                        case DECLARE:
                        case DEFBOOL:
                        case DEFBYTE:
                        case DEFDATE:
                        case DEFDBL:
                        case DEFDEC:
                        case DEFCUR:
                        case DEFINT:
                        case DEFLNG:
                        case DEFOBJ:
                        case DEFSNG:
                        case DEFSTR:
                        case DEFVAR:
                        case DELETESETTING:
                        case DIM:
                        case DO:
                        case DOUBLE:
                        case EACH:
                        case ELSE:
                        case ELSEIF:
                        case END:
                        case ENUM:
                        case EQV:
                        case ERASE:
                        case ERROR:
                        case EVENT:
                        case FALSE:
                        case FILECOPY:
                        case FRIEND:
                        case FOR:
                        case FUNCTION:
                        case GET:
                        case GLOBAL:
                        case GOSUB:
                        case GOTO:
                        case IF:
                        case IMP:
                        case IMPLEMENTS:
                        case IN:
                        case INPUT:
                        case IS:
                        case INTEGER:
                        case KILL:
                        case LOAD:
                        case LOCK:
                        case LONG:
                        case LOOP:
                        case LEN:
                        case LET:
                        case LIB:
                        case LIKE:
                        case LSET:
                        case ME:
                        case MID:
                        case MKDIR:
                        case MOD:
                        case NAME:
                        case NEXT:
                        case NEW:
                        case NOT:
                        case NOTHING:
                        case NULL:
                        case ON:
                        case OPEN:
                        case OPTIONAL:
                        case OR:
                        case OUTPUT:
                        case PARAMARRAY:
                        case PRESERVE:
                        case PRINT:
                        case PRIVATE:
                        case PUBLIC:
                        case PUT:
                        case RANDOM:
                        case RANDOMIZE:
                        case RAISEEVENT:
                        case READ:
                        case REDIM:
                        case REM:
                        case RESET:
                        case RESUME:
                        case RETURN:
                        case RMDIR:
                        case RSET:
                        case SAVEPICTURE:
                        case SAVESETTING:
                        case SEEK:
                        case SELECT:
                        case SENDKEYS:
                        case SET:
                        case SETATTR:
                        case SHARED:
                        case SINGLE:
                        case SPC:
                        case STATIC:
                        case STEP:
                        case STOP:
                        case STRING:
                        case SUB:
                        case TAB:
                        case TEXT:
                        case THEN:
                        case TIME:
                        case TO:
                        case TRUE:
                        case TYPE:
                        case TYPEOF:
                        case UNLOAD:
                        case UNLOCK:
                        case UNTIL:
                        case VARIANT:
                        case VERSION:
                        case WEND:
                        case WHILE:
                        case WIDTH:
                        case WITH:
                        case WITHEVENTS:
                        case WRITE:
                        case XOR:
                        case IDENTIFIER:
                            {
                                State = 2474; ambiguousIdentifier();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LetterrangeContext : ParserRuleContext
        {
            public CertainIdentifierContext certainIdentifier(int i)
            {
                return GetRuleContext<CertainIdentifierContext>(i);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<CertainIdentifierContext> certainIdentifier()
            {
                return GetRuleContexts<CertainIdentifierContext>();
            }
            public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
            public LetterrangeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_letterrange; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLetterrange(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLetterrange(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LetterrangeContext letterrange()
        {
            LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
            EnterRule(_localctx, 272, RULE_letterrange);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2477; certainIdentifier();
                    State = 2486;
                    switch (Interpreter.AdaptivePredict(_input, 416, _ctx))
                    {
                        case 1:
                            {
                                State = 2479;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2478; Match(WS);
                                    }
                                }

                                State = 2481; Match(MINUS);
                                State = 2483;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2482; Match(WS);
                                    }
                                }

                                State = 2485; certainIdentifier();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LineLabelContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public LineLabelContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lineLabel; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLineLabel(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLineLabel(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LineLabelContext lineLabel()
        {
            LineLabelContext _localctx = new LineLabelContext(_ctx, State);
            EnterRule(_localctx, 274, RULE_lineLabel);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2488; ambiguousIdentifier();
                    State = 2489; Match(COLON);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LiteralContext : ParserRuleContext
        {
            public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
            public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
            public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
            public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
            public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
            public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
            public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
            public ITerminalNode HEXLITERAL() { return GetToken(VBAParser.HEXLITERAL, 0); }
            public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
            public ITerminalNode SHORTLITERAL() { return GetToken(VBAParser.SHORTLITERAL, 0); }
            public ITerminalNode OCTLITERAL() { return GetToken(VBAParser.OCTLITERAL, 0); }
            public LiteralContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_literal; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLiteral(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLiteral(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LiteralContext literal()
        {
            LiteralContext _localctx = new LiteralContext(_ctx, State);
            EnterRule(_localctx, 276, RULE_literal);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2491;
                    _la = _input.La(1);
                    if (!(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (FALSE - 73)) | (1L << (NOTHING - 73)) | (1L << (NULL - 73)))) != 0) || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (TRUE - 171)) | (1L << (STRINGLITERAL - 171)) | (1L << (OCTLITERAL - 171)) | (1L << (HEXLITERAL - 171)) | (1L << (SHORTLITERAL - 171)) | (1L << (INTEGERLITERAL - 171)) | (1L << (DOUBLELITERAL - 171)) | (1L << (DATELITERAL - 171)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public BaseTypeContext baseType()
            {
                return GetRuleContext<BaseTypeContext>(0);
            }
            public ComplexTypeContext complexType()
            {
                return GetRuleContext<ComplexTypeContext>(0);
            }
            public TypeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_type; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterType(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitType(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitType(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeContext type()
        {
            TypeContext _localctx = new TypeContext(_ctx, State);
            EnterRule(_localctx, 278, RULE_type);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2495;
                    switch (Interpreter.AdaptivePredict(_input, 417, _ctx))
                    {
                        case 1:
                            {
                                State = 2493; baseType();
                            }
                            break;

                        case 2:
                            {
                                State = 2494; complexType();
                            }
                            break;
                    }
                    State = 2505;
                    switch (Interpreter.AdaptivePredict(_input, 420, _ctx))
                    {
                        case 1:
                            {
                                State = 2498;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2497; Match(WS);
                                    }
                                }

                                State = 2500; Match(LPAREN);
                                State = 2502;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2501; Match(WS);
                                    }
                                }

                                State = 2504; Match(RPAREN);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeHintContext : ParserRuleContext
        {
            public TypeHintContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_typeHint; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTypeHint(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTypeHint(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeHintContext typeHint()
        {
            TypeHintContext _localctx = new TypeHintContext(_ctx, State);
            EnterRule(_localctx, 280, RULE_typeHint);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2507;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la == AMPERSAND))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class VisibilityContext : ParserRuleContext
        {
            public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
            public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
            public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
            public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
            public VisibilityContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_visibility; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVisibility(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVisibility(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VisibilityContext visibility()
        {
            VisibilityContext _localctx = new VisibilityContext(_ctx, State);
            EnterRule(_localctx, 282, RULE_visibility);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2509;
                    _la = _input.La(1);
                    if (!(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (FRIEND - 75)) | (1L << (GLOBAL - 75)) | (1L << (PRIVATE - 75)) | (1L << (PUBLIC - 75)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AmbiguousKeywordContext : ParserRuleContext
        {
            public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
            public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
            public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
            public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
            public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
            public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
            public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
            public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
            public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
            public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
            public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
            public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
            public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
            public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
            public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
            public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
            public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
            public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
            public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
            public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
            public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
            public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
            public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
            public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
            public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
            public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
            public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
            public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
            public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
            public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
            public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
            public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
            public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
            public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
            public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
            public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
            public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
            public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
            public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
            public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
            public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
            public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
            public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
            public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
            public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
            public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
            public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
            public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
            public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
            public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
            public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
            public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
            public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
            public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
            public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
            public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
            public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
            public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
            public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
            public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
            public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
            public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
            public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
            public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
            public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
            public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
            public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
            public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
            public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
            public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
            public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
            public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
            public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
            public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
            public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
            public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
            public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
            public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
            public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
            public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
            public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
            public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
            public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
            public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
            public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
            public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
            public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
            public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
            public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
            public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
            public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
            public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
            public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
            public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
            public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
            public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
            public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
            public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
            public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
            public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
            public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
            public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
            public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
            public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
            public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
            public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
            public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
            public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
            public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
            public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
            public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
            public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
            public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
            public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
            public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
            public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
            public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
            public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
            public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
            public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
            public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
            public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
            public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
            public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
            public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
            public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
            public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
            public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
            public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
            public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
            public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
            public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
            public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
            public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
            public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AmbiguousKeywordContext ambiguousKeyword()
        {
            AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
            EnterRule(_localctx, 284, RULE_ambiguousKeyword);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2511;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RemCommentContext : ParserRuleContext
        {
            public ITerminalNode REMCOMMENT() { return GetToken(VBAParser.REMCOMMENT, 0); }
            public RemCommentContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_remComment; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRemComment(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRemComment(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RemCommentContext remComment()
        {
            RemCommentContext _localctx = new RemCommentContext(_ctx, State);
            EnterRule(_localctx, 286, RULE_remComment);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2513; Match(REMCOMMENT);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CommentContext : ParserRuleContext
        {
            public ITerminalNode COMMENT() { return GetToken(VBAParser.COMMENT, 0); }
            public CommentContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_comment; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterComment(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitComment(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitComment(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CommentContext comment()
        {
            CommentContext _localctx = new CommentContext(_ctx, State);
            EnterRule(_localctx, 288, RULE_comment);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2515; Match(COMMENT);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EndOfLineContext : ParserRuleContext
        {
            public CommentContext comment()
            {
                return GetRuleContext<CommentContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode NEWLINE() { return GetToken(VBAParser.NEWLINE, 0); }
            public RemCommentContext remComment()
            {
                return GetRuleContext<RemCommentContext>(0);
            }
            public EndOfLineContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_endOfLine; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEndOfLine(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEndOfLine(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EndOfLineContext endOfLine()
        {
            EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
            EnterRule(_localctx, 290, RULE_endOfLine);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2518;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2517; Match(WS);
                        }
                    }

                    State = 2523;
                    switch (_input.La(1))
                    {
                        case NEWLINE:
                            {
                                State = 2520; Match(NEWLINE);
                            }
                            break;
                        case COMMENT:
                            {
                                State = 2521; comment();
                            }
                            break;
                        case REMCOMMENT:
                            {
                                State = 2522; remComment();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 2526;
                    switch (Interpreter.AdaptivePredict(_input, 423, _ctx))
                    {
                        case 1:
                            {
                                State = 2525; Match(WS);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EndOfStatementContext : ParserRuleContext
        {
            public IReadOnlyList<EndOfLineContext> endOfLine()
            {
                return GetRuleContexts<EndOfLineContext>();
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public EndOfLineContext endOfLine(int i)
            {
                return GetRuleContext<EndOfLineContext>(i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode COLON(int i)
            {
                return GetToken(VBAParser.COLON, i);
            }
            public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
            public EndOfStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_endOfStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEndOfStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEndOfStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EndOfStatementContext endOfStatement()
        {
            EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
            EnterRule(_localctx, 292, RULE_endOfStatement);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2538;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 427, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                State = 2536;
                                switch (Interpreter.AdaptivePredict(_input, 426, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 2528; endOfLine();
                                        }
                                        break;

                                    case 2:
                                        {
                                            State = 2530;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2529; Match(WS);
                                                }
                                            }

                                            State = 2532; Match(COLON);
                                            State = 2534;
                                            switch (Interpreter.AdaptivePredict(_input, 425, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 2533; Match(WS);
                                                    }
                                                    break;
                                            }
                                        }
                                        break;
                                }
                            }
                        }
                        State = 2540;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 427, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
        {
            switch (ruleIndex)
            {
                case 100: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
            }
            return true;
        }
        private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 0: return Precpred(_ctx, 14);

                case 1: return Precpred(_ctx, 12);

                case 2: return Precpred(_ctx, 11);

                case 3: return Precpred(_ctx, 10);

                case 4: return Precpred(_ctx, 9);

                case 5: return Precpred(_ctx, 8);

                case 6: return Precpred(_ctx, 7);

                case 7: return Precpred(_ctx, 5);

                case 8: return Precpred(_ctx, 4);

                case 9: return Precpred(_ctx, 3);

                case 10: return Precpred(_ctx, 2);

                case 11: return Precpred(_ctx, 1);
            }
            return true;
        }

        public static readonly string _serializedATN =
            "\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xDD\x9F0\x4\x2" +
            "\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4" +
            "\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10" +
            "\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15" +
            "\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B" +
            "\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!" +
            "\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t" +
            "*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32" +
            "\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37" +
            "\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4" +
            "@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45" +
            "\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN" +
            "\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t" +
            "X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61" +
            "\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g" +
            "\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4" +
            "q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4" +
            "{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82" +
            "\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87" +
            "\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D" +
            "\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92" +
            "\x4\x93\t\x93\x4\x94\t\x94\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x12D\n\x3\x3" +
            "\x3\a\x3\x130\n\x3\f\x3\xE\x3\x133\v\x3\x3\x3\x3\x3\a\x3\x137\n\x3\f\x3" +
            "\xE\x3\x13A\v\x3\x5\x3\x13C\n\x3\x3\x3\x5\x3\x13F\n\x3\x3\x3\a\x3\x142" +
            "\n\x3\f\x3\xE\x3\x145\v\x3\x3\x3\x5\x3\x148\n\x3\x3\x3\a\x3\x14B\n\x3" +
            "\f\x3\xE\x3\x14E\v\x3\x3\x3\x5\x3\x151\n\x3\x3\x3\a\x3\x154\n\x3\f\x3" +
            "\xE\x3\x157\v\x3\x3\x3\x5\x3\x15A\n\x3\x3\x3\a\x3\x15D\n\x3\f\x3\xE\x3" +
            "\x160\v\x3\x3\x3\x5\x3\x163\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3" +
            "\x5\x3\x5\a\x5\x16D\n\x5\f\x5\xE\x5\x170\v\x5\x3\x5\x6\x5\x173\n\x5\r" +
            "\x5\xE\x5\x174\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6\x17B\n\x6\x3\x6\x3\x6\x5" +
            "\x6\x17F\n\x6\x3\x6\x3\x6\a\x6\x183\n\x6\f\x6\xE\x6\x186\v\x6\x3\a\x3" +
            "\a\x6\a\x18A\n\a\r\a\xE\a\x18B\x6\a\x18E\n\a\r\a\xE\a\x18F\x3\b\x3\b\x6" +
            "\b\x194\n\b\r\b\xE\b\x195\x3\b\x3\b\a\b\x19A\n\b\f\b\xE\b\x19D\v\b\x3" +
            "\b\a\b\x1A0\n\b\f\b\xE\b\x1A3\v\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3" +
            "\t\x5\t\x1AD\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5" +
            "\n\x1B9\n\n\x3\v\x3\v\x5\v\x1BD\n\v\x3\f\x3\f\x6\f\x1C1\n\f\r\f\xE\f\x1C2" +
            "\x3\f\x3\f\a\f\x1C7\n\f\f\f\xE\f\x1CA\v\f\x3\f\a\f\x1CD\n\f\f\f\xE\f\x1D0" +
            "\v\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x1D8\n\r\x3\xE\x3\xE\x3\xE\x3" +
            "\xE\x5\xE\x1DE\n\xE\x3\xE\x3\xE\x5\xE\x1E2\n\xE\x3\xE\x3\xE\x5\xE\x1E6" +
            "\n\xE\x3\xE\x3\xE\x5\xE\x1EA\n\xE\x3\xE\a\xE\x1ED\n\xE\f\xE\xE\xE\x1F0" +
            "\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x1F6\n\xF\f\xF\xE\xF\x1F9\v\xF\x3\xF" +
            "\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10" +
            "\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10" +
            "\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10" +
            "\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10" +
            "\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10" +
            "\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10" +
            "\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x240\n" +
            "\x10\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x246\n\x11\x3\x11\x3\x11\x5\x11" +
            "\x24A\n\x11\x3\x11\x5\x11\x24D\n\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13" +
            "\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15" +
            "\x25D\n\x15\x3\x15\x3\x15\x5\x15\x261\n\x15\x3\x15\a\x15\x264\n\x15\f" +
            "\x15\xE\x15\x267\v\x15\x5\x15\x269\n\x15\x3\x16\x3\x16\x3\x16\x5\x16\x26E" +
            "\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x274\n\x16\x3\x16\x3\x16\x5" +
            "\x16\x278\n\x16\x3\x16\a\x16\x27B\n\x16\f\x16\xE\x16\x27E\v\x16\x3\x17" +
            "\x3\x17\x5\x17\x282\n\x17\x3\x17\x3\x17\x5\x17\x286\n\x17\x3\x17\x5\x17" +
            "\x289\n\x17\x3\x17\x3\x17\x5\x17\x28D\n\x17\x3\x17\x3\x17\x3\x18\x3\x18" +
            "\x5\x18\x293\n\x18\x3\x18\x3\x18\x5\x18\x297\n\x18\x3\x18\x3\x18\x3\x19" +
            "\x3\x19\x3\x19\x5\x19\x29E\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2A4" +
            "\n\x19\x3\x19\x3\x19\x5\x19\x2A8\n\x19\x3\x19\x5\x19\x2AB\n\x19\x3\x19" +
            "\x3\x19\x3\x19\x5\x19\x2B0\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3" +
            "\x19\x3\x19\x3\x19\x5\x19\x2BA\n\x19\x3\x19\x5\x19\x2BD\n\x19\x3\x19\x5" +
            "\x19\x2C0\n\x19\x3\x19\x3\x19\x5\x19\x2C4\n\x19\x3\x1A\x3\x1A\x3\x1A\x3" +
            "\x1A\x5\x1A\x2CA\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2CE\n\x1A\x3\x1A\a\x1A\x2D1" +
            "\n\x1A\f\x1A\xE\x1A\x2D4\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2DA" +
            "\n\x1B\x3\x1B\x3\x1B\x5\x1B\x2DE\n\x1B\x3\x1B\x3\x1B\x5\x1B\x2E2\n\x1B" +
            "\x3\x1B\x3\x1B\x5\x1B\x2E6\n\x1B\x3\x1B\x5\x1B\x2E9\n\x1B\x3\x1C\x3\x1C" +
            "\x3\x1C\x5\x1C\x2EE\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3" +
            "\x1C\x3\x1C\x3\x1C\x5\x1C\x2F9\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C" +
            "\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x306\n\x1C\x3\x1D\x3" +
            "\x1D\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x30D\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E" +
            "\x3\x1E\a\x1E\x314\n\x1E\f\x1E\xE\x1E\x317\v\x1E\x3\x1E\x3\x1E\x3\x1F" +
            "\x3\x1F\x5\x1F\x31D\n\x1F\x3\x1F\x3\x1F\x5\x1F\x321\n\x1F\x3\x1F\x5\x1F" +
            "\x324\n\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3\"\x3\"\x3" +
            "\"\x5\"\x333\n\"\x3\"\x3\"\x3\"\x3\"\x5\"\x339\n\"\x3\"\x3\"\x3#\x3#\x3" +
            "$\x3$\x3$\x3$\x5$\x343\n$\x3$\x3$\x5$\x347\n$\x3$\x3$\x3%\x3%\x3%\x3%" +
            "\x3%\x3%\x5%\x351\n%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x359\n%\x3%\x3%\x3%\x5" +
            "%\x35E\n%\x3&\x3&\x3&\x3&\x5&\x364\n&\x3&\x3&\x5&\x368\n&\x3&\x5&\x36B" +
            "\n&\x3&\x3&\x5&\x36F\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x37A\n" +
            "&\x3&\x3&\x5&\x37E\n&\x3&\x3&\x3&\x5&\x383\n&\x3\'\x3\'\x3\'\x5\'\x388" +
            "\n\'\x3\'\x3\'\x5\'\x38C\n\'\x3\'\x3\'\x5\'\x390\n\'\x3\'\x3\'\x5\'\x394" +
            "\n\'\x3\'\x5\'\x397\n\'\x3\'\x5\'\x39A\n\'\x3\'\x5\'\x39D\n\'\x3\'\x5" +
            "\'\x3A0\n\'\x3\'\x3\'\x5\'\x3A4\n\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x5(\x3AC" +
            "\n(\x3(\x3(\x5(\x3B0\n(\x3(\x5(\x3B3\n(\x3(\x5(\x3B6\n(\x3(\x3(\x5(\x3BA" +
            "\n(\x3(\x3(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3+\x3+\x3+\x3+\x3+\x3+\x3" +
            "+\x3+\x3+\x3+\x3+\x5+\x3D1\n+\x3+\x3+\a+\x3D5\n+\f+\xE+\x3D8\v+\x3+\x5" +
            "+\x3DB\n+\x3+\x3+\x5+\x3DF\n+\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x3E8\n," +
            "\x3-\x3-\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x3F3\n.\x3/\x3/\x3/\x5/\x3F8" +
            "\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x402" +
            "\n\x31\x3\x31\x3\x31\x5\x31\x406\n\x31\x3\x31\x6\x31\x409\n\x31\r\x31" +
            "\xE\x31\x40A\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x5\x33\x413\n\x33" +
            "\x3\x33\x3\x33\x5\x33\x417\n\x33\x3\x33\x3\x33\x5\x33\x41B\n\x33\x3\x33" +
            "\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x423\n\x34\x3\x34\x3\x34\x5" +
            "\x34\x427\n\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36" +
            "\x3\x36\x3\x36\x5\x36\x433\n\x36\x3\x36\x3\x36\x5\x36\x437\n\x36\x3\x36" +
            "\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x43E\n\x36\x5\x36\x440\n\x36\x3\x37" +
            "\x3\x37\x3\x37\x3\x37\x5\x37\x446\n\x37\x3\x37\x3\x37\x5\x37\x44A\n\x37" +
            "\x3\x37\x3\x37\x3\x38\x3\x38\x5\x38\x450\n\x38\x3\x38\x3\x38\x5\x38\x454" +
            "\n\x38\x3\x38\x3\x38\x5\x38\x458\n\x38\x3\x38\x3\x38\x3\x39\x3\x39\a\x39" +
            "\x45E\n\x39\f\x39\xE\x39\x461\v\x39\x3\x39\x5\x39\x464\n\x39\x3\x39\x3" +
            "\x39\x3:\x3:\x5:\x46A\n:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\a:\x473\n:\f:\xE" +
            ":\x476\v:\x3;\x3;\x5;\x47A\n;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\a;\x483\n;\f" +
            ";\xE;\x486\v;\x3<\x3<\x3<\x3<\x3<\a<\x48D\n<\f<\xE<\x490\v<\x3=\x3=\x5" +
            "=\x494\n=\x3=\x3=\x5=\x498\n=\x3=\x3=\x5=\x49C\n=\x3=\x3=\x3>\x3>\x3>" +
            "\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x5" +
            "@\x4B4\n@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41" +
            "\x4BE\n\x41\x3\x41\x3\x41\x5\x41\x4C2\n\x41\x3\x41\a\x41\x4C5\n\x41\f" +
            "\x41\xE\x41\x4C8\v\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42" +
            "\x3\x42\x5\x42\x4D2\n\x42\x3\x42\x3\x42\x5\x42\x4D6\n\x42\x3\x42\a\x42" +
            "\x4D9\n\x42\f\x42\xE\x42\x4DC\v\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43" +
            "\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x4E9\n\x43\x3\x43\x3" +
            "\x43\x5\x43\x4ED\n\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43" +
            "\x5\x43\x4F6\n\x43\x3\x43\x3\x43\x5\x43\x4FA\n\x43\x3\x43\x5\x43\x4FD" +
            "\n\x43\x3\x44\x3\x44\x5\x44\x501\n\x44\x3\x44\x3\x44\x5\x44\x505\n\x44" +
            "\x3\x44\x5\x44\x508\n\x44\a\x44\x50A\n\x44\f\x44\xE\x44\x50D\v\x44\x3" +
            "\x44\x5\x44\x510\n\x44\x3\x44\x5\x44\x513\n\x44\x3\x44\x3\x44\x5\x44\x517" +
            "\n\x44\x3\x44\x5\x44\x51A\n\x44\x6\x44\x51C\n\x44\r\x44\xE\x44\x51D\x5" +
            "\x44\x520\n\x44\x3\x45\x3\x45\x3\x45\x5\x45\x525\n\x45\x3\x45\x3\x45\x5" +
            "\x45\x529\n\x45\x3\x45\x3\x45\x5\x45\x52D\n\x45\x3\x45\x3\x45\x5\x45\x531" +
            "\n\x45\x5\x45\x533\n\x45\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x539\n\x46" +
            "\x3\x46\x3\x46\x5\x46\x53D\n\x46\x3\x46\x5\x46\x540\n\x46\x3G\x3G\x3G" +
            "\x5G\x545\nG\x3G\x3G\x5G\x549\nG\x3G\x3G\x3G\x3G\x5G\x54F\nG\x3G\x5G\x552" +
            "\nG\x3G\x5G\x555\nG\x3G\x3G\x5G\x559\nG\x3G\x3G\x5G\x55D\nG\x3G\x3G\x3" +
            "H\x3H\x3H\x5H\x564\nH\x3H\x3H\x5H\x568\nH\x3H\x3H\x3H\x3H\x5H\x56E\nH" +
            "\x3H\x5H\x571\nH\x3H\x3H\x5H\x575\nH\x3H\x3H\x3I\x3I\x3I\x5I\x57C\nI\x3" +
            "I\x3I\x5I\x580\nI\x3I\x3I\x3I\x3I\x5I\x586\nI\x3I\x5I\x589\nI\x3I\x3I" +
            "\x5I\x58D\nI\x3I\x3I\x3J\x3J\x3J\x3J\x5J\x595\nJ\x3J\x3J\x5J\x599\nJ\x3" +
            "J\x5J\x59C\nJ\x3J\x5J\x59F\nJ\x3J\x3J\x5J\x5A3\nJ\x3J\x3J\x3K\x3K\x3K" +
            "\x3K\x5K\x5AB\nK\x3K\x3K\x5K\x5AF\nK\x3K\x3K\x5K\x5B3\nK\x5K\x5B5\nK\x3" +
            "K\x5K\x5B8\nK\x3L\x3L\x3L\x5L\x5BD\nL\x3M\x3M\x3M\x3M\x5M\x5C3\nM\x3M" +
            "\x3M\x5M\x5C7\nM\x3M\x3M\x5M\x5CB\nM\x3M\aM\x5CE\nM\fM\xEM\x5D1\vM\x3" +
            "N\x3N\x5N\x5D5\nN\x3N\x3N\x5N\x5D9\nN\x3N\x3N\x5N\x5DD\nN\x3N\x3N\x3N" +
            "\x5N\x5E2\nN\x3O\x3O\x3P\x3P\x3P\x3P\x5P\x5EA\nP\x5P\x5EC\nP\x3Q\x3Q\x3" +
            "R\x3R\x3R\x3R\x3S\x3S\x3S\x3S\x5S\x5F8\nS\x3S\x3S\x5S\x5FC\nS\x3S\x3S" +
            "\x3T\x3T\x3T\x3T\x5T\x604\nT\x3T\x3T\x5T\x608\nT\x3T\x3T\x3U\x3U\x3U\x3" +
            "U\x5U\x610\nU\x3U\x3U\x5U\x614\nU\x3U\x3U\x5U\x618\nU\x3U\x3U\x5U\x61C" +
            "\nU\x3U\x3U\x5U\x620\nU\x3U\x3U\x5U\x624\nU\x3U\x3U\x3V\x3V\x3V\x3V\x5" +
            "V\x62C\nV\x3V\x3V\x5V\x630\nV\x3V\x3V\x3W\x3W\x3W\x3W\x3W\x3W\x3W\aW\x63B" +
            "\nW\fW\xEW\x63E\vW\x3W\x3W\x3X\x3X\x5X\x644\nX\x3X\x3X\x5X\x648\nX\x3" +
            "X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x5X\x653\nX\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y" +
            "\x65A\nY\x3Z\x3Z\x3Z\x5Z\x65F\nZ\x3Z\x3Z\x5Z\x663\nZ\x3Z\aZ\x666\nZ\f" +
            "Z\xEZ\x669\vZ\x5Z\x66B\nZ\x3[\x3[\x3[\x3[\x5[\x671\n[\x3[\x3[\x5[\x675" +
            "\n[\x3[\x5[\x678\n[\x3\\\x3\\\x3\\\x3\\\x5\\\x67E\n\\\x3\\\x3\\\x5\\\x682" +
            "\n\\\x3\\\x3\\\x3]\x3]\x3]\x3]\x5]\x68A\n]\x3]\x3]\x5]\x68E\n]\x3]\x3" +
            "]\x3^\x3^\x3_\x3_\x3_\x5_\x697\n_\x3_\x3_\x5_\x69B\n_\x3_\x3_\x5_\x69F" +
            "\n_\x3_\x3_\x5_\x6A3\n_\x3_\x5_\x6A6\n_\x3_\x3_\x5_\x6AA\n_\x3_\x3_\x3" +
            "`\x3`\x5`\x6B0\n`\x3`\x3`\x5`\x6B4\n`\x3`\x3`\x3\x61\x3\x61\x3\x61\x5" +
            "\x61\x6BB\n\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\a\x61\x6C2\n\x61\f" +
            "\x61\xE\x61\x6C5\v\x61\x3\x61\x3\x61\x3\x62\x3\x62\x5\x62\x6CB\n\x62\x3" +
            "\x62\x3\x62\x5\x62\x6CF\n\x62\x3\x62\x5\x62\x6D2\n\x62\x3\x62\x5\x62\x6D5" +
            "\n\x62\x3\x62\x5\x62\x6D8\n\x62\x3\x62\x3\x62\x5\x62\x6DC\n\x62\x3\x62" +
            "\x3\x62\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x6E7\n" +
            "\x63\x3\x64\x3\x64\x3\x64\x3\x64\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x6F1" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x6F5\n\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3" +
            "\x65\x5\x65\x6FC\n\x65\x5\x65\x6FE\n\x65\x3\x66\x3\x66\x3\x66\x5\x66\x703" +
            "\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x708\n\x66\x3\x66\x3\x66\x3\x66\x5" +
            "\x66\x70D\n\x66\x3\x66\x3\x66\x5\x66\x711\n\x66\x3\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x717\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x71C\n\x66\x3\x66\x3" +
            "\x66\x3\x66\x3\x66\x3\x66\x5\x66\x723\n\x66\x3\x66\x3\x66\x5\x66\x727" +
            "\n\x66\x3\x66\x3\x66\x5\x66\x72B\n\x66\x3\x66\a\x66\x72E\n\x66\f\x66\xE" +
            "\x66\x731\v\x66\x3\x66\x3\x66\x3\x66\x3\x66\x5\x66\x737\n\x66\x3\x66\x3" +
            "\x66\x5\x66\x73B\n\x66\x3\x66\x3\x66\x5\x66\x73F\n\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x744\n\x66\x3\x66\x3\x66\x5\x66\x748\n\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x74D\n\x66\x3\x66\x3\x66\x5\x66\x751\n\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x756\n\x66\x3\x66\x3\x66\x5\x66\x75A\n\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x75F\n\x66\x3\x66\x3\x66\x5\x66\x763\n\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x768\n\x66\x3\x66\x3\x66\x5\x66\x76C\n\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x771\n\x66\x3\x66\x3\x66\x5\x66\x775\n\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x77A\n\x66\x3\x66\x3\x66\x5\x66\x77E\n\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x783\n\x66\x3\x66\x3\x66\x5\x66\x787\n\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x78C\n\x66\x3\x66\x3\x66\x5\x66\x790\n\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x795\n\x66\x3\x66\x3\x66\x5\x66\x799\n\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x79E\n\x66\x3\x66\x3\x66\x5\x66\x7A2\n\x66\x3\x66\a\x66\x7A5" +
            "\n\x66\f\x66\xE\x66\x7A8\v\x66\x3g\x3g\x3g\x5g\x7AD\ng\x3g\x3g\x3g\x5" +
            "g\x7B2\ng\x3g\x3g\x3h\x3h\x5h\x7B8\nh\x3h\x3h\x5h\x7BC\nh\x3h\ah\x7BF" +
            "\nh\fh\xEh\x7C2\vh\x3i\x3i\x5i\x7C6\ni\x3i\x3i\x5i\x7CA\ni\x3i\x3i\x5" +
            "i\x7CE\ni\x5i\x7D0\ni\x3i\x3i\x5i\x7D4\ni\x5i\x7D6\ni\x3i\x5i\x7D9\ni" +
            "\x3i\x3i\x5i\x7DD\ni\x3j\x3j\x3j\x3j\x3j\x5j\x7E4\nj\x3j\x3j\x3k\x3k\x3" +
            "k\x3k\x5k\x7EC\nk\x3k\x3k\x5k\x7F0\nk\x3k\x3k\x3l\x3l\x3l\x3l\x3l\x3l" +
            "\x5l\x7FA\nl\x3l\x3l\x5l\x7FE\nl\x3l\x3l\x3m\x3m\x3m\x3m\x5m\x806\nm\x3" +
            "m\x3m\x5m\x80A\nm\x3m\x5m\x80D\nm\x3n\x5n\x810\nn\x3n\x3n\x3o\x3o\x5o" +
            "\x816\no\x3p\x3p\x3p\x3p\x5p\x81C\np\x3p\x5p\x81F\np\x3p\x3p\x5p\x823" +
            "\np\x3p\x3p\x5p\x827\np\x3p\x3p\x5p\x82B\np\x3p\x5p\x82E\np\x3p\x3p\x3" +
            "p\x3p\ap\x834\np\fp\xEp\x837\vp\x3q\x3q\x3q\x5q\x83C\nq\x3q\x3q\x3q\x5" +
            "q\x841\nq\x3q\x5q\x844\nq\x3q\x3q\x5q\x848\nq\x3q\x3q\x5q\x84C\nq\x3q" +
            "\x3q\x5q\x850\nq\x3q\x5q\x853\nq\x3q\x3q\x3q\x3q\aq\x859\nq\fq\xEq\x85C" +
            "\vq\x3r\x3r\x5r\x860\nr\x3s\x5s\x863\ns\x3s\x3s\x3s\x5s\x868\ns\x3s\x3" +
            "s\x5s\x86C\ns\x3s\x5s\x86F\ns\x3s\x5s\x872\ns\x3s\x3s\x3s\x3s\as\x878" +
            "\ns\fs\xEs\x87B\vs\x3t\x3t\x3t\x5t\x880\nt\x3t\x5t\x883\nt\x3t\x3t\x3" +
            "t\x3t\at\x889\nt\ft\xEt\x88C\vt\x3u\x3u\x3u\x3u\x5u\x892\nu\x3v\x3v\x5" +
            "v\x896\nv\x3v\x5v\x899\nv\x3v\x5v\x89C\nv\x3v\x3v\x3v\x3v\av\x8A2\nv\f" +
            "v\xEv\x8A5\vv\x3w\x3w\x5w\x8A9\nw\x3w\x5w\x8AC\nw\x3w\x5w\x8AF\nw\x3w" +
            "\x3w\x5w\x8B3\nw\x3w\x3w\x5w\x8B7\nw\x5w\x8B9\nw\x3w\x3w\x5w\x8BD\nw\x3" +
            "w\x5w\x8C0\nw\x3w\x3w\x3w\x3w\aw\x8C6\nw\fw\xEw\x8C9\vw\x3x\x3x\x5x\x8CD" +
            "\nx\x3x\x6x\x8D0\nx\rx\xEx\x8D1\x3x\x5x\x8D5\nx\x3x\x5x\x8D8\nx\x3x\x3" +
            "x\x3x\x3x\ax\x8DE\nx\fx\xEx\x8E1\vx\x3y\x3y\x3y\x5y\x8E6\ny\x3z\x3z\x3" +
            "{\x5{\x8EB\n{\x3{\x5{\x8EE\n{\x3{\x3{\x5{\x8F2\n{\a{\x8F4\n{\f{\xE{\x8F7" +
            "\v{\x3{\x3{\x5{\x8FB\n{\x3{\x3{\x5{\x8FF\n{\x3{\x5{\x902\n{\a{\x904\n" +
            "{\f{\xE{\x907\v{\x3|\x5|\x90A\n|\x3|\x3|\x5|\x90E\n|\x3|\x5|\x911\n|\x3" +
            "|\x3|\x3}\x3}\x3}\x5}\x918\n}\x3~\x3~\x5~\x91C\n~\x3~\x3~\x5~\x920\n~" +
            "\x3~\x3~\x5~\x924\n~\x3~\a~\x927\n~\f~\xE~\x92A\v~\x5~\x92C\n~\x3~\x5" +
            "~\x92F\n~\x3~\x3~\x3\x7F\x3\x7F\x5\x7F\x935\n\x7F\x3\x7F\x3\x7F\x5\x7F" +
            "\x939\n\x7F\x3\x7F\x3\x7F\x5\x7F\x93D\n\x7F\x3\x7F\x3\x7F\x5\x7F\x941" +
            "\n\x7F\x3\x7F\x5\x7F\x944\n\x7F\x3\x7F\x3\x7F\x5\x7F\x948\n\x7F\x3\x7F" +
            "\x5\x7F\x94B\n\x7F\x3\x7F\x5\x7F\x94E\n\x7F\x3\x7F\x5\x7F\x951\n\x7F\x3" +
            "\x7F\x5\x7F\x954\n\x7F\x3\x7F\x5\x7F\x957\n\x7F\x3\x80\x3\x80\x5\x80\x95B" +
            "\n\x80\x3\x80\x3\x80\x3\x81\x3\x81\x5\x81\x961\n\x81\x3\x81\x3\x81\x5" +
            "\x81\x965\n\x81\x3\x81\a\x81\x968\n\x81\f\x81\xE\x81\x96B\v\x81\x3\x82" +
            "\x3\x82\x3\x82\x3\x82\x3\x82\x5\x82\x972\n\x82\x3\x82\x3\x82\x3\x83\x3" +
            "\x83\x6\x83\x978\n\x83\r\x83\xE\x83\x979\x3\x84\x3\x84\x5\x84\x97E\n\x84" +
            "\x3\x84\x3\x84\x5\x84\x982\n\x84\x3\x84\x3\x84\x5\x84\x986\n\x84\x3\x84" +
            "\x5\x84\x989\n\x84\x3\x85\x3\x85\x3\x86\x3\x86\x3\x86\a\x86\x990\n\x86" +
            "\f\x86\xE\x86\x993\v\x86\x3\x86\x3\x86\x3\x86\x6\x86\x998\n\x86\r\x86" +
            "\xE\x86\x999\x5\x86\x99C\n\x86\x3\x87\x3\x87\x3\x88\x3\x88\x3\x88\a\x88" +
            "\x9A3\n\x88\f\x88\xE\x88\x9A6\v\x88\x3\x89\x3\x89\x5\x89\x9AA\n\x89\x3" +
            "\x89\x3\x89\x5\x89\x9AE\n\x89\x3\x8A\x3\x8A\x5\x8A\x9B2\n\x8A\x3\x8A\x3" +
            "\x8A\x5\x8A\x9B6\n\x8A\x3\x8A\x5\x8A\x9B9\n\x8A\x3\x8B\x3\x8B\x3\x8B\x3" +
            "\x8C\x3\x8C\x3\x8D\x3\x8D\x5\x8D\x9C2\n\x8D\x3\x8D\x5\x8D\x9C5\n\x8D\x3" +
            "\x8D\x3\x8D\x5\x8D\x9C9\n\x8D\x3\x8D\x5\x8D\x9CC\n\x8D\x3\x8E\x3\x8E\x3" +
            "\x8F\x3\x8F\x3\x90\x3\x90\x3\x91\x3\x91\x3\x92\x3\x92\x3\x93\x5\x93\x9D9" +
            "\n\x93\x3\x93\x3\x93\x3\x93\x5\x93\x9DE\n\x93\x3\x93\x5\x93\x9E1\n\x93" +
            "\x3\x94\x3\x94\x5\x94\x9E5\n\x94\x3\x94\x3\x94\x5\x94\x9E9\n\x94\a\x94" +
            "\x9EB\n\x94\f\x94\xE\x94\x9EE\v\x94\x3\x94\x2\x2\x3\xCA\x95\x2\x2\x4\x2" +
            "\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2" +
            "\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36" +
            "\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2" +
            "T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2" +
            "r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2" +
            "\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2" +
            "\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2" +
            "\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2" +
            "\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2" +
            "\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2" +
            "\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102" +
            "\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114" +
            "\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126" +
            "\x2\x2\x17\x5\x2\x15\x15\"\"\xA9\xA9\x3\x2%\x30\x4\x2\xB2\xB2\xB6\xB6" +
            "\x3\x2\x46J\x3\x2yz\a\x2\x11\x11\x15\x15XX\x82\x82\x8D\x8D\x4\x2\x90\x91" +
            "\xBA\xBA\x4\x2\x65g\xA0\xA0\x3\x2\b\t\x4\x2\xA2\xA2\xA8\xA8\x4\x2\xBE" +
            "\xBE\xC7\xC7\x4\x2\xC6\xC6\xC9\xC9\a\x2YY\x63\x63\xC0\xC3\xC5\xC5\xC8" +
            "\xC8\x4\x2\x4\x4\n\n\x4\x2\x17\x18\x83\x83\x3\x2\x17\x18\f\x2\x16\x16" +
            "\x19\x19  ##\x34\x34ZZ^^\xA1\xA1\xA6\xA6\xB3\xB3\x6\x2KKvw\xAD\xAD\xCE" +
            "\xD4\x4\x2\x3\a\xBC\xBC\x6\x2MMQQ\x86\x86\x8B\x8B\v\x2\v\x37@\x45K\x63" +
            "hhnx{|\x81\x86\x8B\x90\x92\xBB\xB73\x2\x128\x3\x2\x2\x2\x4\x12C\x3\x2" +
            "\x2\x2\x6\x164\x3\x2\x2\x2\b\x16A\x3\x2\x2\x2\n\x178\x3\x2\x2\x2\f\x18D" +
            "\x3\x2\x2\x2\xE\x191\x3\x2\x2\x2\x10\x1AC\x3\x2\x2\x2\x12\x1B8\x3\x2\x2" +
            "\x2\x14\x1BC\x3\x2\x2\x2\x16\x1BE\x3\x2\x2\x2\x18\x1D7\x3\x2\x2\x2\x1A" +
            "\x1D9\x3\x2\x2\x2\x1C\x1F1\x3\x2\x2\x2\x1E\x23F\x3\x2\x2\x2 \x241\x3\x2" +
            "\x2\x2\"\x24E\x3\x2\x2\x2$\x250\x3\x2\x2\x2&\x254\x3\x2\x2\x2(\x258\x3" +
            "\x2\x2\x2*\x26D\x3\x2\x2\x2,\x27F\x3\x2\x2\x2.\x290\x3\x2\x2\x2\x30\x29D" +
            "\x3\x2\x2\x2\x32\x2C5\x3\x2\x2\x2\x34\x2D5\x3\x2\x2\x2\x36\x305\x3\x2" +
            "\x2\x2\x38\x307\x3\x2\x2\x2:\x30C\x3\x2\x2\x2<\x31A\x3\x2\x2\x2>\x327" +
            "\x3\x2\x2\x2@\x32B\x3\x2\x2\x2\x42\x332\x3\x2\x2\x2\x44\x33C\x3\x2\x2" +
            "\x2\x46\x33E\x3\x2\x2\x2H\x34A\x3\x2\x2\x2J\x35F\x3\x2\x2\x2L\x387\x3" +
            "\x2\x2\x2N\x3A7\x3\x2\x2\x2P\x3BD\x3\x2\x2\x2R\x3C1\x3\x2\x2\x2T\x3DE" +
            "\x3\x2\x2\x2V\x3E0\x3\x2\x2\x2X\x3E9\x3\x2\x2\x2Z\x3EB\x3\x2\x2\x2\\\x3F4" +
            "\x3\x2\x2\x2^\x3F9\x3\x2\x2\x2`\x3FD\x3\x2\x2\x2\x62\x40C\x3\x2\x2\x2" +
            "\x64\x412\x3\x2\x2\x2\x66\x41E\x3\x2\x2\x2h\x42A\x3\x2\x2\x2j\x42E\x3" +
            "\x2\x2\x2l\x441\x3\x2\x2\x2n\x44D\x3\x2\x2\x2p\x45B\x3\x2\x2\x2r\x467" +
            "\x3\x2\x2\x2t\x477\x3\x2\x2\x2v\x487\x3\x2\x2\x2x\x491\x3\x2\x2\x2z\x49F" +
            "\x3\x2\x2\x2|\x4A3\x3\x2\x2\x2~\x4AB\x3\x2\x2\x2\x80\x4B5\x3\x2\x2\x2" +
            "\x82\x4C9\x3\x2\x2\x2\x84\x4DD\x3\x2\x2\x2\x86\x51F\x3\x2\x2\x2\x88\x532" +
            "\x3\x2\x2\x2\x8A\x534\x3\x2\x2\x2\x8C\x544\x3\x2\x2\x2\x8E\x563\x3\x2" +
            "\x2\x2\x90\x57B\x3\x2\x2\x2\x92\x590\x3\x2\x2\x2\x94\x5A6\x3\x2\x2\x2" +
            "\x96\x5B9\x3\x2\x2\x2\x98\x5BE\x3\x2\x2\x2\x9A\x5D2\x3\x2\x2\x2\x9C\x5E3" +
            "\x3\x2\x2\x2\x9E\x5E5\x3\x2\x2\x2\xA0\x5ED\x3\x2\x2\x2\xA2\x5EF\x3\x2" +
            "\x2\x2\xA4\x5F3\x3\x2\x2\x2\xA6\x5FF\x3\x2\x2\x2\xA8\x60B\x3\x2\x2\x2" +
            "\xAA\x627\x3\x2\x2\x2\xAC\x633\x3\x2\x2\x2\xAE\x652\x3\x2\x2\x2\xB0\x654" +
            "\x3\x2\x2\x2\xB2\x66A\x3\x2\x2\x2\xB4\x66C\x3\x2\x2\x2\xB6\x679\x3\x2" +
            "\x2\x2\xB8\x685\x3\x2\x2\x2\xBA\x691\x3\x2\x2\x2\xBC\x696\x3\x2\x2\x2" +
            "\xBE\x6AD\x3\x2\x2\x2\xC0\x6BA\x3\x2\x2\x2\xC2\x6C8\x3\x2\x2\x2\xC4\x6DF" +
            "\x3\x2\x2\x2\xC6\x6E8\x3\x2\x2\x2\xC8\x6EC\x3\x2\x2\x2\xCA\x736\x3\x2" +
            "\x2\x2\xCC\x7AC\x3\x2\x2\x2\xCE\x7B5\x3\x2\x2\x2\xD0\x7C3\x3\x2\x2\x2" +
            "\xD2\x7DE\x3\x2\x2\x2\xD4\x7E7\x3\x2\x2\x2\xD6\x7F3\x3\x2\x2\x2\xD8\x801" +
            "\x3\x2\x2\x2\xDA\x80F\x3\x2\x2\x2\xDC\x815\x3\x2\x2\x2\xDE\x817\x3\x2" +
            "\x2\x2\xE0\x838\x3\x2\x2\x2\xE2\x85F\x3\x2\x2\x2\xE4\x862\x3\x2\x2\x2" +
            "\xE6\x87C\x3\x2\x2\x2\xE8\x891\x3\x2\x2\x2\xEA\x893\x3\x2\x2\x2\xEC\x8A8" +
            "\x3\x2\x2\x2\xEE\x8CC\x3\x2\x2\x2\xF0\x8E2\x3\x2\x2\x2\xF2\x8E7\x3\x2" +
            "\x2\x2\xF4\x8F5\x3\x2\x2\x2\xF6\x909\x3\x2\x2\x2\xF8\x914\x3\x2\x2\x2" +
            "\xFA\x919\x3\x2\x2\x2\xFC\x934\x3\x2\x2\x2\xFE\x958\x3\x2\x2\x2\x100\x95E" +
            "\x3\x2\x2\x2\x102\x971\x3\x2\x2\x2\x104\x977\x3\x2\x2\x2\x106\x97B\x3" +
            "\x2\x2\x2\x108\x98A\x3\x2\x2\x2\x10A\x99B\x3\x2\x2\x2\x10C\x99D\x3\x2" +
            "\x2\x2\x10E\x99F\x3\x2\x2\x2\x110\x9A7\x3\x2\x2\x2\x112\x9AF\x3\x2\x2" +
            "\x2\x114\x9BA\x3\x2\x2\x2\x116\x9BD\x3\x2\x2\x2\x118\x9C1\x3\x2\x2\x2" +
            "\x11A\x9CD\x3\x2\x2\x2\x11C\x9CF\x3\x2\x2\x2\x11E\x9D1\x3\x2\x2\x2\x120" +
            "\x9D3\x3\x2\x2\x2\x122\x9D5\x3\x2\x2\x2\x124\x9D8\x3\x2\x2\x2\x126\x9EC" +
            "\x3\x2\x2\x2\x128\x129\x5\x4\x3\x2\x129\x12A\a\x2\x2\x3\x12A\x3\x3\x2" +
            "\x2\x2\x12B\x12D\a\xDC\x2\x2\x12C\x12B\x3\x2\x2\x2\x12C\x12D\x3\x2\x2" +
            "\x2\x12D\x131\x3\x2\x2\x2\x12E\x130\x5\x124\x93\x2\x12F\x12E\x3\x2\x2" +
            "\x2\x130\x133\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2" +
            "\x132\x13B\x3\x2\x2\x2\x133\x131\x3\x2\x2\x2\x134\x138\x5\x6\x4\x2\x135" +
            "\x137\x5\x124\x93\x2\x136\x135\x3\x2\x2\x2\x137\x13A\x3\x2\x2\x2\x138" +
            "\x136\x3\x2\x2\x2\x138\x139\x3\x2\x2\x2\x139\x13C\x3\x2\x2\x2\x13A\x138" +
            "\x3\x2\x2\x2\x13B\x134\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x13E\x3" +
            "\x2\x2\x2\x13D\x13F\x5\b\x5\x2\x13E\x13D\x3\x2\x2\x2\x13E\x13F\x3\x2\x2" +
            "\x2\x13F\x143\x3\x2\x2\x2\x140\x142\x5\x124\x93\x2\x141\x140\x3\x2\x2" +
            "\x2\x142\x145\x3\x2\x2\x2\x143\x141\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2" +
            "\x144\x147\x3\x2\x2\x2\x145\x143\x3\x2\x2\x2\x146\x148\x5\f\a\x2\x147" +
            "\x146\x3\x2\x2\x2\x147\x148\x3\x2\x2\x2\x148\x14C\x3\x2\x2\x2\x149\x14B" +
            "\x5\x124\x93\x2\x14A\x149\x3\x2\x2\x2\x14B\x14E\x3\x2\x2\x2\x14C\x14A" +
            "\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x150\x3\x2\x2\x2\x14E\x14C\x3" +
            "\x2\x2\x2\x14F\x151\x5\xE\b\x2\x150\x14F\x3\x2\x2\x2\x150\x151\x3\x2\x2" +
            "\x2\x151\x155\x3\x2\x2\x2\x152\x154\x5\x124\x93\x2\x153\x152\x3\x2\x2" +
            "\x2\x154\x157\x3\x2\x2\x2\x155\x153\x3\x2\x2\x2\x155\x156\x3\x2\x2\x2" +
            "\x156\x159\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2\x158\x15A\x5\x16\f\x2\x159" +
            "\x158\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2\x15A\x15E\x3\x2\x2\x2\x15B\x15D" +
            "\x5\x124\x93\x2\x15C\x15B\x3\x2\x2\x2\x15D\x160\x3\x2\x2\x2\x15E\x15C" +
            "\x3\x2\x2\x2\x15E\x15F\x3\x2\x2\x2\x15F\x162\x3\x2\x2\x2\x160\x15E\x3" +
            "\x2\x2\x2\x161\x163\a\xDC\x2\x2\x162\x161\x3\x2\x2\x2\x162\x163\x3\x2" +
            "\x2\x2\x163\x5\x3\x2\x2\x2\x164\x165\a\xB4\x2\x2\x165\x166\a\xDC\x2\x2" +
            "\x166\x167\a\xD3\x2\x2\x167\x168\a\xDC\x2\x2\x168\x169\a\x1E\x2\x2\x169" +
            "\a\x3\x2\x2\x2\x16A\x16E\a\x13\x2\x2\x16B\x16D\x5\x124\x93\x2\x16C\x16B" +
            "\x3\x2\x2\x2\x16D\x170\x3\x2\x2\x2\x16E\x16C\x3\x2\x2\x2\x16E\x16F\x3" +
            "\x2\x2\x2\x16F\x172\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x171\x173\x5\n\x6" +
            "\x2\x172\x171\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174\x172\x3\x2\x2\x2" +
            "\x174\x175\x3\x2\x2\x2\x175\x176\x3\x2\x2\x2\x176\x177\a@\x2\x2\x177\t" +
            "\x3\x2\x2\x2\x178\x17A\x5\x104\x83\x2\x179\x17B\a\xDC\x2\x2\x17A\x179" +
            "\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17C\x17E\a\xC0" +
            "\x2\x2\x17D\x17F\a\xDC\x2\x2\x17E\x17D\x3\x2\x2\x2\x17E\x17F\x3\x2\x2" +
            "\x2\x17F\x180\x3\x2\x2\x2\x180\x184\x5\x116\x8C\x2\x181\x183\x5\x124\x93" +
            "\x2\x182\x181\x3\x2\x2\x2\x183\x186\x3\x2\x2\x2\x184\x182\x3\x2\x2\x2" +
            "\x184\x185\x3\x2\x2\x2\x185\v\x3\x2\x2\x2\x186\x184\x3\x2\x2\x2\x187\x189" +
            "\x5\x1A\xE\x2\x188\x18A\x5\x124\x93\x2\x189\x188\x3\x2\x2\x2\x18A\x18B" +
            "\x3\x2\x2\x2\x18B\x189\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2\x18C\x18E\x3" +
            "\x2\x2\x2\x18D\x187\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x18D\x3\x2" +
            "\x2\x2\x18F\x190\x3\x2\x2\x2\x190\r\x3\x2\x2\x2\x191\x19B\x5\x12\n\x2" +
            "\x192\x194\x5\x124\x93\x2\x193\x192\x3\x2\x2\x2\x194\x195\x3\x2\x2\x2" +
            "\x195\x193\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197" +
            "\x198\x5\x12\n\x2\x198\x19A\x3\x2\x2\x2\x199\x193\x3\x2\x2\x2\x19A\x19D" +
            "\x3\x2\x2\x2\x19B\x199\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2\x19C\x1A1\x3" +
            "\x2\x2\x2\x19D\x19B\x3\x2\x2\x2\x19E\x1A0\x5\x124\x93\x2\x19F\x19E\x3" +
            "\x2\x2\x2\x1A0\x1A3\x3\x2\x2\x2\x1A1\x19F\x3\x2\x2\x2\x1A1\x1A2\x3\x2" +
            "\x2\x2\x1A2\xF\x3\x2\x2\x2\x1A3\x1A1\x3\x2\x2\x2\x1A4\x1A5\a}\x2\x2\x1A5" +
            "\x1A6\a\xDC\x2\x2\x1A6\x1AD\a\xD1\x2\x2\x1A7\x1A8\a\x7F\x2\x2\x1A8\x1A9" +
            "\a\xDC\x2\x2\x1A9\x1AD\t\x2\x2\x2\x1AA\x1AD\a~\x2\x2\x1AB\x1AD\a\x80\x2" +
            "\x2\x1AC\x1A4\x3\x2\x2\x2\x1AC\x1A7\x3\x2\x2\x2\x1AC\x1AA\x3\x2\x2\x2" +
            "\x1AC\x1AB\x3\x2\x2\x2\x1AD\x11\x3\x2\x2\x2\x1AE\x1B9\x5\x122\x92\x2\x1AF" +
            "\x1B9\x5\x30\x19\x2\x1B0\x1B9\x5:\x1E\x2\x1B1\x1B9\x5\x42\"\x2\x1B2\x1B9" +
            "\x5*\x16\x2\x1B3\x1B9\x5^\x30\x2\x1B4\x1B9\x5\xCCg\x2\x1B5\x1B9\x5\x10" +
            "\t\x2\x1B6\x1B9\x5\xC0\x61\x2\x1B7\x1B9\x5\x14\v\x2\x1B8\x1AE\x3\x2\x2" +
            "\x2\x1B8\x1AF\x3\x2\x2\x2\x1B8\x1B0\x3\x2\x2\x2\x1B8\x1B1\x3\x2\x2\x2" +
            "\x1B8\x1B2\x3\x2\x2\x2\x1B8\x1B3\x3\x2\x2\x2\x1B8\x1B4\x3\x2\x2\x2\x1B8" +
            "\x1B5\x3\x2\x2\x2\x1B8\x1B6\x3\x2\x2\x2\x1B8\x1B7\x3\x2\x2\x2\x1B9\x13" +
            "\x3\x2\x2\x2\x1BA\x1BD\x5n\x38\x2\x1BB\x1BD\x5p\x39\x2\x1BC\x1BA\x3\x2" +
            "\x2\x2\x1BC\x1BB\x3\x2\x2\x2\x1BD\x15\x3\x2\x2\x2\x1BE\x1C8\x5\x18\r\x2" +
            "\x1BF\x1C1\x5\x124\x93\x2\x1C0\x1BF\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2" +
            "\x1C2\x1C0\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C4" +
            "\x1C5\x5\x18\r\x2\x1C5\x1C7\x3\x2\x2\x2\x1C6\x1C0\x3\x2\x2\x2\x1C7\x1CA" +
            "\x3\x2\x2\x2\x1C8\x1C6\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CE\x3" +
            "\x2\x2\x2\x1CA\x1C8\x3\x2\x2\x2\x1CB\x1CD\x5\x124\x93\x2\x1CC\x1CB\x3" +
            "\x2\x2\x2\x1CD\x1D0\x3\x2\x2\x2\x1CE\x1CC\x3\x2\x2\x2\x1CE\x1CF\x3\x2" +
            "\x2\x2\x1CF\x17\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2\x2\x1D1\x1D8\x5L\'\x2\x1D2" +
            "\x1D8\x5\x8CG\x2\x1D3\x1D8\x5\x8EH\x2\x1D4\x1D8\x5\x90I\x2\x1D5\x1D8\x5" +
            "\xBC_\x2\x1D6\x1D8\x5\x14\v\x2\x1D7\x1D1\x3\x2\x2\x2\x1D7\x1D2\x3\x2\x2" +
            "\x2\x1D7\x1D3\x3\x2\x2\x2\x1D7\x1D4\x3\x2\x2\x2\x1D7\x1D5\x3\x2\x2\x2" +
            "\x1D7\x1D6\x3\x2\x2\x2\x1D8\x19\x3\x2\x2\x2\x1D9\x1DA\a\xF\x2\x2\x1DA" +
            "\x1DB\a\xDC\x2\x2\x1DB\x1DD\x5\xE8u\x2\x1DC\x1DE\a\xDC\x2\x2\x1DD\x1DC" +
            "\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E1\a\xC0" +
            "\x2\x2\x1E0\x1E2\a\xDC\x2\x2\x1E1\x1E0\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2" +
            "\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1EE\x5\x116\x8C\x2\x1E4\x1E6\a\xDC\x2" +
            "\x2\x1E5\x1E4\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2" +
            "\x1E7\x1E9\a\t\x2\x2\x1E8\x1EA\a\xDC\x2\x2\x1E9\x1E8\x3\x2\x2\x2\x1E9" +
            "\x1EA\x3\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1ED\x5\x116\x8C\x2\x1EC" +
            "\x1E5\x3\x2\x2\x2\x1ED\x1F0\x3\x2\x2\x2\x1EE\x1EC\x3\x2\x2\x2\x1EE\x1EF" +
            "\x3\x2\x2\x2\x1EF\x1B\x3\x2\x2\x2\x1F0\x1EE\x3\x2\x2\x2\x1F1\x1F7\x5\x1E" +
            "\x10\x2\x1F2\x1F3\x5\x126\x94\x2\x1F3\x1F4\x5\x1E\x10\x2\x1F4\x1F6\x3" +
            "\x2\x2\x2\x1F5\x1F2\x3\x2\x2\x2\x1F6\x1F9\x3\x2\x2\x2\x1F7\x1F5\x3\x2" +
            "\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1FA\x3\x2\x2\x2\x1F9\x1F7\x3\x2\x2" +
            "\x2\x1FA\x1FB\x5\x126\x94\x2\x1FB\x1D\x3\x2\x2\x2\x1FC\x240\x5\x114\x8B" +
            "\x2\x1FD\x240\x5 \x11\x2\x1FE\x240\x5\x1A\xE\x2\x1FF\x240\x5\"\x12\x2" +
            "\x200\x240\x5$\x13\x2\x201\x240\x5&\x14\x2\x202\x240\x5(\x15\x2\x203\x240" +
            "\x5*\x16\x2\x204\x240\x5.\x18\x2\x205\x240\x5\x34\x1B\x2\x206\x240\x5" +
            "\x32\x1A\x2\x207\x240\x5\x36\x1C\x2\x208\x240\x5\x38\x1D\x2\x209\x240" +
            "\x5> \x2\x20A\x240\x5@!\x2\x20B\x240\x5\x44#\x2\x20C\x240\x5\xDCo\x2\x20D" +
            "\x240\x5\x46$\x2\x20E\x240\x5H%\x2\x20F\x240\x5J&\x2\x210\x240\x5N(\x2" +
            "\x211\x240\x5P)\x2\x212\x240\x5R*\x2\x213\x240\x5T+\x2\x214\x240\x5^\x30" +
            "\x2\x215\x240\x5`\x31\x2\x216\x240\x5\x62\x32\x2\x217\x240\x5\x64\x33" +
            "\x2\x218\x240\x5\x66\x34\x2\x219\x240\x5h\x35\x2\x21A\x240\x5j\x36\x2" +
            "\x21B\x240\x5l\x37\x2\x21C\x240\x5\x14\v\x2\x21D\x240\x5x=\x2\x21E\x240" +
            "\x5z>\x2\x21F\x240\x5|?\x2\x220\x240\x5~@\x2\x221\x240\x5\x80\x41\x2\x222" +
            "\x240\x5\x82\x42\x2\x223\x240\x5\x84\x43\x2\x224\x240\x5\x8A\x46\x2\x225" +
            "\x240\x5\x92J\x2\x226\x240\x5\x94K\x2\x227\x240\x5\x96L\x2\x228\x240\x5" +
            "\x98M\x2\x229\x240\x5\x9CO\x2\x22A\x240\x5\x9EP\x2\x22B\x240\x5\xA0Q\x2" +
            "\x22C\x240\x5\xA2R\x2\x22D\x240\x5\xA4S\x2\x22E\x240\x5\xA6T\x2\x22F\x240" +
            "\x5\xA8U\x2\x230\x240\x5\xAAV\x2\x231\x240\x5\xACW\x2\x232\x240\x5\xB4" +
            "[\x2\x233\x240\x5\xB6\\\x2\x234\x240\x5\xB8]\x2\x235\x240\x5\xBA^\x2\x236" +
            "\x240\x5\xBE`\x2\x237\x240\x5\xC6\x64\x2\x238\x240\x5\xC8\x65\x2\x239" +
            "\x240\x5\xCCg\x2\x23A\x240\x5\xD2j\x2\x23B\x240\x5\xD4k\x2\x23C\x240\x5" +
            "\xD6l\x2\x23D\x240\x5\xD8m\x2\x23E\x240\x5\xE2r\x2\x23F\x1FC\x3\x2\x2" +
            "\x2\x23F\x1FD\x3\x2\x2\x2\x23F\x1FE\x3\x2\x2\x2\x23F\x1FF\x3\x2\x2\x2" +
            "\x23F\x200\x3\x2\x2\x2\x23F\x201\x3\x2\x2\x2\x23F\x202\x3\x2\x2\x2\x23F" +
            "\x203\x3\x2\x2\x2\x23F\x204\x3\x2\x2\x2\x23F\x205\x3\x2\x2\x2\x23F\x206" +
            "\x3\x2\x2\x2\x23F\x207\x3\x2\x2\x2\x23F\x208\x3\x2\x2\x2\x23F\x209\x3" +
            "\x2\x2\x2\x23F\x20A\x3\x2\x2\x2\x23F\x20B\x3\x2\x2\x2\x23F\x20C\x3\x2" +
            "\x2\x2\x23F\x20D\x3\x2\x2\x2\x23F\x20E\x3\x2\x2\x2\x23F\x20F\x3\x2\x2" +
            "\x2\x23F\x210\x3\x2\x2\x2\x23F\x211\x3\x2\x2\x2\x23F\x212\x3\x2\x2\x2" +
            "\x23F\x213\x3\x2\x2\x2\x23F\x214\x3\x2\x2\x2\x23F\x215\x3\x2\x2\x2\x23F" +
            "\x216\x3\x2\x2\x2\x23F\x217\x3\x2\x2\x2\x23F\x218\x3\x2\x2\x2\x23F\x219" +
            "\x3\x2\x2\x2\x23F\x21A\x3\x2\x2\x2\x23F\x21B\x3\x2\x2\x2\x23F\x21C\x3" +
            "\x2\x2\x2\x23F\x21D\x3\x2\x2\x2\x23F\x21E\x3\x2\x2\x2\x23F\x21F\x3\x2" +
            "\x2\x2\x23F\x220\x3\x2\x2\x2\x23F\x221\x3\x2\x2\x2\x23F\x222\x3\x2\x2" +
            "\x2\x23F\x223\x3\x2\x2\x2\x23F\x224\x3\x2\x2\x2\x23F\x225\x3\x2\x2\x2" +
            "\x23F\x226\x3\x2\x2\x2\x23F\x227\x3\x2\x2\x2\x23F\x228\x3\x2\x2\x2\x23F" +
            "\x229\x3\x2\x2\x2\x23F\x22A\x3\x2\x2\x2\x23F\x22B\x3\x2\x2\x2\x23F\x22C" +
            "\x3\x2\x2\x2\x23F\x22D\x3\x2\x2\x2\x23F\x22E\x3\x2\x2\x2\x23F\x22F\x3" +
            "\x2\x2\x2\x23F\x230\x3\x2\x2\x2\x23F\x231\x3\x2\x2\x2\x23F\x232\x3\x2" +
            "\x2\x2\x23F\x233\x3\x2\x2\x2\x23F\x234\x3\x2\x2\x2\x23F\x235\x3\x2\x2" +
            "\x2\x23F\x236\x3\x2\x2\x2\x23F\x237\x3\x2\x2\x2\x23F\x238\x3\x2\x2\x2" +
            "\x23F\x239\x3\x2\x2\x2\x23F\x23A\x3\x2\x2\x2\x23F\x23B\x3\x2\x2\x2\x23F" +
            "\x23C\x3\x2\x2\x2\x23F\x23D\x3\x2\x2\x2\x23F\x23E\x3\x2\x2\x2\x240\x1F" +
            "\x3\x2\x2\x2\x241\x242\a\x10\x2\x2\x242\x243\a\xDC\x2\x2\x243\x24C\x5" +
            "\xCA\x66\x2\x244\x246\a\xDC\x2\x2\x245\x244\x3\x2\x2\x2\x245\x246\x3\x2" +
            "\x2\x2\x246\x247\x3\x2\x2\x2\x247\x249\a\t\x2\x2\x248\x24A\a\xDC\x2\x2" +
            "\x249\x248\x3\x2\x2\x2\x249\x24A\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B" +
            "\x24D\x5\xCA\x66\x2\x24C\x245\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D!" +
            "\x3\x2\x2\x2\x24E\x24F\a\x14\x2\x2\x24F#\x3\x2\x2\x2\x250\x251\a\x1C\x2" +
            "\x2\x251\x252\a\xDC\x2\x2\x252\x253\x5\xCA\x66\x2\x253%\x3\x2\x2\x2\x254" +
            "\x255\a\x1D\x2\x2\x255\x256\a\xDC\x2\x2\x256\x257\x5\xCA\x66\x2\x257\'" +
            "\x3\x2\x2\x2\x258\x268\a\x1F\x2\x2\x259\x25A\a\xDC\x2\x2\x25A\x265\x5" +
            "\xDAn\x2\x25B\x25D\a\xDC\x2\x2\x25C\x25B\x3\x2\x2\x2\x25C\x25D\x3\x2\x2" +
            "\x2\x25D\x25E\x3\x2\x2\x2\x25E\x260\a\t\x2\x2\x25F\x261\a\xDC\x2\x2\x260" +
            "\x25F\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262\x264" +
            "\x5\xDAn\x2\x263\x25C\x3\x2\x2\x2\x264\x267\x3\x2\x2\x2\x265\x263\x3\x2" +
            "\x2\x2\x265\x266\x3\x2\x2\x2\x266\x269\x3\x2\x2\x2\x267\x265\x3\x2\x2" +
            "\x2\x268\x259\x3\x2\x2\x2\x268\x269\x3\x2\x2\x2\x269)\x3\x2\x2\x2\x26A" +
            "\x26B\x5\x11C\x8F\x2\x26B\x26C\a\xDC\x2\x2\x26C\x26E\x3\x2\x2\x2\x26D" +
            "\x26A\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\x270" +
            "\a!\x2\x2\x270\x271\a\xDC\x2\x2\x271\x27C\x5,\x17\x2\x272\x274\a\xDC\x2" +
            "\x2\x273\x272\x3\x2\x2\x2\x273\x274\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2" +
            "\x275\x277\a\t\x2\x2\x276\x278\a\xDC\x2\x2\x277\x276\x3\x2\x2\x2\x277" +
            "\x278\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279\x27B\x5,\x17\x2\x27A\x273" +
            "\x3\x2\x2\x2\x27B\x27E\x3\x2\x2\x2\x27C\x27A\x3\x2\x2\x2\x27C\x27D\x3" +
            "\x2\x2\x2\x27D+\x3\x2\x2\x2\x27E\x27C\x3\x2\x2\x2\x27F\x281\x5\x104\x83" +
            "\x2\x280\x282\x5\x11A\x8E\x2\x281\x280\x3\x2\x2\x2\x281\x282\x3\x2\x2" +
            "\x2\x282\x285\x3\x2\x2\x2\x283\x284\a\xDC\x2\x2\x284\x286\x5\x106\x84" +
            "\x2\x285\x283\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2\x286\x288\x3\x2\x2\x2" +
            "\x287\x289\a\xDC\x2\x2\x288\x287\x3\x2\x2\x2\x288\x289\x3\x2\x2\x2\x289" +
            "\x28A\x3\x2\x2\x2\x28A\x28C\a\xC0\x2\x2\x28B\x28D\a\xDC\x2\x2\x28C\x28B" +
            "\x3\x2\x2\x2\x28C\x28D\x3\x2\x2\x2\x28D\x28E\x3\x2\x2\x2\x28E\x28F\x5" +
            "\xCA\x66\x2\x28F-\x3\x2\x2\x2\x290\x292\a#\x2\x2\x291\x293\a\xDC\x2\x2" +
            "\x292\x291\x3\x2\x2\x2\x292\x293\x3\x2\x2\x2\x293\x294\x3\x2\x2\x2\x294" +
            "\x296\a\xC0\x2\x2\x295\x297\a\xDC\x2\x2\x296\x295\x3\x2\x2\x2\x296\x297" +
            "\x3\x2\x2\x2\x297\x298\x3\x2\x2\x2\x298\x299\x5\xCA\x66\x2\x299/\x3\x2" +
            "\x2\x2\x29A\x29B\x5\x11C\x8F\x2\x29B\x29C\a\xDC\x2\x2\x29C\x29E\x3\x2" +
            "\x2\x2\x29D\x29A\x3\x2\x2\x2\x29D\x29E\x3\x2\x2\x2\x29E\x29F\x3\x2\x2" +
            "\x2\x29F\x2A0\a$\x2\x2\x2A0\x2A3\a\xDC\x2\x2\x2A1\x2A2\a\x8A\x2\x2\x2A2" +
            "\x2A4\a\xDC\x2\x2\x2A3\x2A1\x3\x2\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4\x2AA" +
            "\x3\x2\x2\x2\x2A5\x2A7\aO\x2\x2\x2A6\x2A8\x5\x11A\x8E\x2\x2A7\x2A6\x3" +
            "\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2AB\x3\x2\x2\x2\x2A9\x2AB\a\xA7" +
            "\x2\x2\x2AA\x2A5\x3\x2\x2\x2\x2AA\x2A9\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2" +
            "\x2\x2AC\x2AD\a\xDC\x2\x2\x2AD\x2AF\x5\x104\x83\x2\x2AE\x2B0\x5\x11A\x8E" +
            "\x2\x2AF\x2AE\x3\x2\x2\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0\x2B1\x3\x2\x2\x2" +
            "\x2B1\x2B2\a\xDC\x2\x2\x2B2\x2B3\a\x62\x2\x2\x2B3\x2B4\a\xDC\x2\x2\x2B4" +
            "\x2B9\a\xCE\x2\x2\x2B5\x2B6\a\xDC\x2\x2\x2B6\x2B7\a\r\x2\x2\x2B7\x2B8" +
            "\a\xDC\x2\x2\x2B8\x2BA\a\xCE\x2\x2\x2B9\x2B5\x3\x2\x2\x2\x2B9\x2BA\x3" +
            "\x2\x2\x2\x2BA\x2BF\x3\x2\x2\x2\x2BB\x2BD\a\xDC\x2\x2\x2BC\x2BB\x3\x2" +
            "\x2\x2\x2BC\x2BD\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE\x2C0\x5\xFA~\x2" +
            "\x2BF\x2BC\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2\x2\x2C0\x2C3\x3\x2\x2\x2\x2C1" +
            "\x2C2\a\xDC\x2\x2\x2C2\x2C4\x5\x106\x84\x2\x2C3\x2C1\x3\x2\x2\x2\x2C3" +
            "\x2C4\x3\x2\x2\x2\x2C4\x31\x3\x2\x2\x2\x2C5\x2C6\t\x3\x2\x2\x2C6\x2C7" +
            "\a\xDC\x2\x2\x2C7\x2D2\x5\x112\x8A\x2\x2C8\x2CA\a\xDC\x2\x2\x2C9\x2C8" +
            "\x3\x2\x2\x2\x2C9\x2CA\x3\x2\x2\x2\x2CA\x2CB\x3\x2\x2\x2\x2CB\x2CD\a\t" +
            "\x2\x2\x2CC\x2CE\a\xDC\x2\x2\x2CD\x2CC\x3\x2\x2\x2\x2CD\x2CE\x3\x2\x2" +
            "\x2\x2CE\x2CF\x3\x2\x2\x2\x2CF\x2D1\x5\x112\x8A\x2\x2D0\x2C9\x3\x2\x2" +
            "\x2\x2D1\x2D4\x3\x2\x2\x2\x2D2\x2D0\x3\x2\x2\x2\x2D2\x2D3\x3\x2\x2\x2" +
            "\x2D3\x33\x3\x2\x2\x2\x2D4\x2D2\x3\x2\x2\x2\x2D5\x2D6\a\x31\x2\x2\x2D6" +
            "\x2D7\a\xDC\x2\x2\x2D7\x2D9\x5\xCA\x66\x2\x2D8\x2DA\a\xDC\x2\x2\x2D9\x2D8" +
            "\x3\x2\x2\x2\x2D9\x2DA\x3\x2\x2\x2\x2DA\x2DB\x3\x2\x2\x2\x2DB\x2DD\a\t" +
            "\x2\x2\x2DC\x2DE\a\xDC\x2\x2\x2DD\x2DC\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2" +
            "\x2\x2DE\x2DF\x3\x2\x2\x2\x2DF\x2E8\x5\xCA\x66\x2\x2E0\x2E2\a\xDC\x2\x2" +
            "\x2E1\x2E0\x3\x2\x2\x2\x2E1\x2E2\x3\x2\x2\x2\x2E2\x2E3\x3\x2\x2\x2\x2E3" +
            "\x2E5\a\t\x2\x2\x2E4\x2E6\a\xDC\x2\x2\x2E5\x2E4\x3\x2\x2\x2\x2E5\x2E6" +
            "\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7\x2E9\x5\xCA\x66\x2\x2E8\x2E1\x3" +
            "\x2\x2\x2\x2E8\x2E9\x3\x2\x2\x2\x2E9\x35\x3\x2\x2\x2\x2EA\x2EB\a\x33\x2" +
            "\x2\x2EB\x2ED\x5\x126\x94\x2\x2EC\x2EE\x5\x1C\xF\x2\x2ED\x2EC\x3\x2\x2" +
            "\x2\x2ED\x2EE\x3\x2\x2\x2\x2EE\x2EF\x3\x2\x2\x2\x2EF\x2F0\a_\x2\x2\x2F0" +
            "\x306\x3\x2\x2\x2\x2F1\x2F2\a\x33\x2\x2\x2F2\x2F3\a\xDC\x2\x2\x2F3\x2F4" +
            "\t\x4\x2\x2\x2F4\x2F5\a\xDC\x2\x2\x2F5\x2F6\x5\xCA\x66\x2\x2F6\x2F8\x5" +
            "\x126\x94\x2\x2F7\x2F9\x5\x1C\xF\x2\x2F8\x2F7\x3\x2\x2\x2\x2F8\x2F9\x3" +
            "\x2\x2\x2\x2F9\x2FA\x3\x2\x2\x2\x2FA\x2FB\a_\x2\x2\x2FB\x306\x3\x2\x2" +
            "\x2\x2FC\x2FD\a\x33\x2\x2\x2FD\x2FE\x5\x126\x94\x2\x2FE\x2FF\x5\x1C\xF" +
            "\x2\x2FF\x300\a_\x2\x2\x300\x301\a\xDC\x2\x2\x301\x302\t\x4\x2\x2\x302" +
            "\x303\a\xDC\x2\x2\x303\x304\x5\xCA\x66\x2\x304\x306\x3\x2\x2\x2\x305\x2EA" +
            "\x3\x2\x2\x2\x305\x2F1\x3\x2\x2\x2\x305\x2FC\x3\x2\x2\x2\x306\x37\x3\x2" +
            "\x2\x2\x307\x308\a@\x2\x2\x308\x39\x3\x2\x2\x2\x309\x30A\x5\x11C\x8F\x2" +
            "\x30A\x30B\a\xDC\x2\x2\x30B\x30D\x3\x2\x2\x2\x30C\x309\x3\x2\x2\x2\x30C" +
            "\x30D\x3\x2\x2\x2\x30D\x30E\x3\x2\x2\x2\x30E\x30F\a\x41\x2\x2\x30F\x310" +
            "\a\xDC\x2\x2\x310\x311\x5\x104\x83\x2\x311\x315\x5\x126\x94\x2\x312\x314" +
            "\x5<\x1F\x2\x313\x312\x3\x2\x2\x2\x314\x317\x3\x2\x2\x2\x315\x313\x3\x2" +
            "\x2\x2\x315\x316\x3\x2\x2\x2\x316\x318\x3\x2\x2\x2\x317\x315\x3\x2\x2" +
            "\x2\x318\x319\a\x38\x2\x2\x319;\x3\x2\x2\x2\x31A\x323\x5\x104\x83\x2\x31B" +
            "\x31D\a\xDC\x2\x2\x31C\x31B\x3\x2\x2\x2\x31C\x31D\x3\x2\x2\x2\x31D\x31E" +
            "\x3\x2\x2\x2\x31E\x320\a\xC0\x2\x2\x31F\x321\a\xDC\x2\x2\x320\x31F\x3" +
            "\x2\x2\x2\x320\x321\x3\x2\x2\x2\x321\x322\x3\x2\x2\x2\x322\x324\x5\xCA" +
            "\x66\x2\x323\x31C\x3\x2\x2\x2\x323\x324\x3\x2\x2\x2\x324\x325\x3\x2\x2" +
            "\x2\x325\x326\x5\x126\x94\x2\x326=\x3\x2\x2\x2\x327\x328\a\x43\x2\x2\x328" +
            "\x329\a\xDC\x2\x2\x329\x32A\x5\xCA\x66\x2\x32A?\x3\x2\x2\x2\x32B\x32C" +
            "\a\x44\x2\x2\x32C\x32D\a\xDC\x2\x2\x32D\x32E\x5\xCA\x66\x2\x32E\x41\x3" +
            "\x2\x2\x2\x32F\x330\x5\x11C\x8F\x2\x330\x331\a\xDC\x2\x2\x331\x333\x3" +
            "\x2\x2\x2\x332\x32F\x3\x2\x2\x2\x332\x333\x3\x2\x2\x2\x333\x334\x3\x2" +
            "\x2\x2\x334\x335\a\x45\x2\x2\x335\x336\a\xDC\x2\x2\x336\x338\x5\x104\x83" +
            "\x2\x337\x339\a\xDC\x2\x2\x338\x337\x3\x2\x2\x2\x338\x339\x3\x2\x2\x2" +
            "\x339\x33A\x3\x2\x2\x2\x33A\x33B\x5\xFA~\x2\x33B\x43\x3\x2\x2\x2\x33C" +
            "\x33D\t\x5\x2\x2\x33D\x45\x3\x2\x2\x2\x33E\x33F\aL\x2\x2\x33F\x340\a\xDC" +
            "\x2\x2\x340\x342\x5\xCA\x66\x2\x341\x343\a\xDC\x2\x2\x342\x341\x3\x2\x2" +
            "\x2\x342\x343\x3\x2\x2\x2\x343\x344\x3\x2\x2\x2\x344\x346\a\t\x2\x2\x345" +
            "\x347\a\xDC\x2\x2\x346\x345\x3\x2\x2\x2\x346\x347\x3\x2\x2\x2\x347\x348" +
            "\x3\x2\x2\x2\x348\x349\x5\xCA\x66\x2\x349G\x3\x2\x2\x2\x34A\x34B\aN\x2" +
            "\x2\x34B\x34C\a\xDC\x2\x2\x34C\x34D\a\x35\x2\x2\x34D\x34E\a\xDC\x2\x2" +
            "\x34E\x350\x5\x104\x83\x2\x34F\x351\x5\x11A\x8E\x2\x350\x34F\x3\x2\x2" +
            "\x2\x350\x351\x3\x2\x2\x2\x351\x352\x3\x2\x2\x2\x352\x353\a\xDC\x2\x2" +
            "\x353\x354\aW\x2\x2\x354\x355\a\xDC\x2\x2\x355\x356\x5\xCA\x66\x2\x356" +
            "\x358\x5\x126\x94\x2\x357\x359\x5\x1C\xF\x2\x358\x357\x3\x2\x2\x2\x358" +
            "\x359\x3\x2\x2\x2\x359\x35A\x3\x2\x2\x2\x35A\x35D\as\x2\x2\x35B\x35C\a" +
            "\xDC\x2\x2\x35C\x35E\x5\x104\x83\x2\x35D\x35B\x3\x2\x2\x2\x35D\x35E\x3" +
            "\x2\x2\x2\x35EI\x3\x2\x2\x2\x35F\x360\aN\x2\x2\x360\x361\a\xDC\x2\x2\x361" +
            "\x363\x5\x104\x83\x2\x362\x364\x5\x11A\x8E\x2\x363\x362\x3\x2\x2\x2\x363" +
            "\x364\x3\x2\x2\x2\x364\x367\x3\x2\x2\x2\x365\x366\a\xDC\x2\x2\x366\x368" +
            "\x5\x106\x84\x2\x367\x365\x3\x2\x2\x2\x367\x368\x3\x2\x2\x2\x368\x36A" +
            "\x3\x2\x2\x2\x369\x36B\a\xDC\x2\x2\x36A\x369\x3\x2\x2\x2\x36A\x36B\x3" +
            "\x2\x2\x2\x36B\x36C\x3\x2\x2\x2\x36C\x36E\a\xC0\x2\x2\x36D\x36F\a\xDC" +
            "\x2\x2\x36E\x36D\x3\x2\x2\x2\x36E\x36F\x3\x2\x2\x2\x36F\x370\x3\x2\x2" +
            "\x2\x370\x371\x5\xCA\x66\x2\x371\x372\a\xDC\x2\x2\x372\x373\a\xAC\x2\x2" +
            "\x373\x374\a\xDC\x2\x2\x374\x379\x5\xCA\x66\x2\x375\x376\a\xDC\x2\x2\x376" +
            "\x377\a\xA4\x2\x2\x377\x378\a\xDC\x2\x2\x378\x37A\x5\xCA\x66\x2\x379\x375" +
            "\x3\x2\x2\x2\x379\x37A\x3\x2\x2\x2\x37A\x37B\x3\x2\x2\x2\x37B\x37D\x5" +
            "\x126\x94\x2\x37C\x37E\x5\x1C\xF\x2\x37D\x37C\x3\x2\x2\x2\x37D\x37E\x3" +
            "\x2\x2\x2\x37E\x37F\x3\x2\x2\x2\x37F\x382\as\x2\x2\x380\x381\a\xDC\x2" +
            "\x2\x381\x383\x5\x104\x83\x2\x382\x380\x3\x2\x2\x2\x382\x383\x3\x2\x2" +
            "\x2\x383K\x3\x2\x2\x2\x384\x385\x5\x11C\x8F\x2\x385\x386\a\xDC\x2\x2\x386" +
            "\x388\x3\x2\x2\x2\x387\x384\x3\x2\x2\x2\x387\x388\x3\x2\x2\x2\x388\x38B" +
            "\x3\x2\x2\x2\x389\x38A\a\xA3\x2\x2\x38A\x38C\a\xDC\x2\x2\x38B\x389\x3" +
            "\x2\x2\x2\x38B\x38C\x3\x2\x2\x2\x38C\x38D\x3\x2\x2\x2\x38D\x38F\aO\x2" +
            "\x2\x38E\x390\a\xDC\x2\x2\x38F\x38E\x3\x2\x2\x2\x38F\x390\x3\x2\x2\x2" +
            "\x390\x391\x3\x2\x2\x2\x391\x393\x5\x104\x83\x2\x392\x394\x5\x11A\x8E" +
            "\x2\x393\x392\x3\x2\x2\x2\x393\x394\x3\x2\x2\x2\x394\x399\x3\x2\x2\x2" +
            "\x395\x397\a\xDC\x2\x2\x396\x395\x3\x2\x2\x2\x396\x397\x3\x2\x2\x2\x397" +
            "\x398\x3\x2\x2\x2\x398\x39A\x5\xFA~\x2\x399\x396\x3\x2\x2\x2\x399\x39A" +
            "\x3\x2\x2\x2\x39A\x39F\x3\x2\x2\x2\x39B\x39D\a\xDC\x2\x2\x39C\x39B\x3" +
            "\x2\x2\x2\x39C\x39D\x3\x2\x2\x2\x39D\x39E\x3\x2\x2\x2\x39E\x3A0\x5\x106" +
            "\x84\x2\x39F\x39C\x3\x2\x2\x2\x39F\x3A0\x3\x2\x2\x2\x3A0\x3A1\x3\x2\x2" +
            "\x2\x3A1\x3A3\x5\x126\x94\x2\x3A2\x3A4\x5\x1C\xF\x2\x3A3\x3A2\x3\x2\x2" +
            "\x2\x3A3\x3A4\x3\x2\x2\x2\x3A4\x3A5\x3\x2\x2\x2\x3A5\x3A6\a\x39\x2\x2" +
            "\x3A6M\x3\x2\x2\x2\x3A7\x3A8\aP\x2\x2\x3A8\x3A9\a\xDC\x2\x2\x3A9\x3AB" +
            "\x5\xDAn\x2\x3AA\x3AC\a\xDC\x2\x2\x3AB\x3AA\x3\x2\x2\x2\x3AB\x3AC\x3\x2" +
            "\x2\x2\x3AC\x3AD\x3\x2\x2\x2\x3AD\x3AF\a\t\x2\x2\x3AE\x3B0\a\xDC\x2\x2" +
            "\x3AF\x3AE\x3\x2\x2\x2\x3AF\x3B0\x3\x2\x2\x2\x3B0\x3B2\x3\x2\x2\x2\x3B1" +
            "\x3B3\x5\xCA\x66\x2\x3B2\x3B1\x3\x2\x2\x2\x3B2\x3B3\x3\x2\x2\x2\x3B3\x3B5" +
            "\x3\x2\x2\x2\x3B4\x3B6\a\xDC\x2\x2\x3B5\x3B4\x3\x2\x2\x2\x3B5\x3B6\x3" +
            "\x2\x2\x2\x3B6\x3B7\x3\x2\x2\x2\x3B7\x3B9\a\t\x2\x2\x3B8\x3BA\a\xDC\x2" +
            "\x2\x3B9\x3B8\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BB\x3\x2\x2\x2" +
            "\x3BB\x3BC\x5\xCA\x66\x2\x3BCO\x3\x2\x2\x2\x3BD\x3BE\aR\x2\x2\x3BE\x3BF" +
            "\a\xDC\x2\x2\x3BF\x3C0\x5\xCA\x66\x2\x3C0Q\x3\x2\x2\x2\x3C1\x3C2\aS\x2" +
            "\x2\x3C2\x3C3\a\xDC\x2\x2\x3C3\x3C4\x5\xCA\x66\x2\x3C4S\x3\x2\x2\x2\x3C5" +
            "\x3C6\aT\x2\x2\x3C6\x3C7\a\xDC\x2\x2\x3C7\x3C8\x5X-\x2\x3C8\x3C9\a\xDC" +
            "\x2\x2\x3C9\x3CA\a\xAA\x2\x2\x3CA\x3CB\a\xDC\x2\x2\x3CB\x3D0\x5\x1E\x10" +
            "\x2\x3CC\x3CD\a\xDC\x2\x2\x3CD\x3CE\a\x36\x2\x2\x3CE\x3CF\a\xDC\x2\x2" +
            "\x3CF\x3D1\x5\x1E\x10\x2\x3D0\x3CC\x3\x2\x2\x2\x3D0\x3D1\x3\x2\x2\x2\x3D1" +
            "\x3DF\x3\x2\x2\x2\x3D2\x3D6\x5V,\x2\x3D3\x3D5\x5Z.\x2\x3D4\x3D3\x3\x2" +
            "\x2\x2\x3D5\x3D8\x3\x2\x2\x2\x3D6\x3D4\x3\x2\x2\x2\x3D6\x3D7\x3\x2\x2" +
            "\x2\x3D7\x3DA\x3\x2\x2\x2\x3D8\x3D6\x3\x2\x2\x2\x3D9\x3DB\x5\\/\x2\x3DA" +
            "\x3D9\x3\x2\x2\x2\x3DA\x3DB\x3\x2\x2\x2\x3DB\x3DC\x3\x2\x2\x2\x3DC\x3DD" +
            "\a:\x2\x2\x3DD\x3DF\x3\x2\x2\x2\x3DE\x3C5\x3\x2\x2\x2\x3DE\x3D2\x3\x2" +
            "\x2\x2\x3DFU\x3\x2\x2\x2\x3E0\x3E1\aT\x2\x2\x3E1\x3E2\a\xDC\x2\x2\x3E2" +
            "\x3E3\x5X-\x2\x3E3\x3E4\a\xDC\x2\x2\x3E4\x3E5\a\xAA\x2\x2\x3E5\x3E7\x5" +
            "\x126\x94\x2\x3E6\x3E8\x5\x1C\xF\x2\x3E7\x3E6\x3\x2\x2\x2\x3E7\x3E8\x3" +
            "\x2\x2\x2\x3E8W\x3\x2\x2\x2\x3E9\x3EA\x5\xCA\x66\x2\x3EAY\x3\x2\x2\x2" +
            "\x3EB\x3EC\a\x37\x2\x2\x3EC\x3ED\a\xDC\x2\x2\x3ED\x3EE\x5X-\x2\x3EE\x3EF" +
            "\a\xDC\x2\x2\x3EF\x3F0\a\xAA\x2\x2\x3F0\x3F2\x5\x126\x94\x2\x3F1\x3F3" +
            "\x5\x1C\xF\x2\x3F2\x3F1\x3\x2\x2\x2\x3F2\x3F3\x3\x2\x2\x2\x3F3[\x3\x2" +
            "\x2\x2\x3F4\x3F5\a\x36\x2\x2\x3F5\x3F7\x5\x126\x94\x2\x3F6\x3F8\x5\x1C" +
            "\xF\x2\x3F7\x3F6\x3\x2\x2\x2\x3F7\x3F8\x3\x2\x2\x2\x3F8]\x3\x2\x2\x2\x3F9" +
            "\x3FA\aV\x2\x2\x3FA\x3FB\a\xDC\x2\x2\x3FB\x3FC\x5\x104\x83\x2\x3FC_\x3" +
            "\x2\x2\x2\x3FD\x3FE\aX\x2\x2\x3FE\x3FF\a\xDC\x2\x2\x3FF\x408\x5\xDAn\x2" +
            "\x400\x402\a\xDC\x2\x2\x401\x400\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402" +
            "\x403\x3\x2\x2\x2\x403\x405\a\t\x2\x2\x404\x406\a\xDC\x2\x2\x405\x404" +
            "\x3\x2\x2\x2\x405\x406\x3\x2\x2\x2\x406\x407\x3\x2\x2\x2\x407\x409\x5" +
            "\xCA\x66\x2\x408\x401\x3\x2\x2\x2\x409\x40A\x3\x2\x2\x2\x40A\x408\x3\x2" +
            "\x2\x2\x40A\x40B\x3\x2\x2\x2\x40B\x61\x3\x2\x2\x2\x40C\x40D\a[\x2\x2\x40D" +
            "\x40E\a\xDC\x2\x2\x40E\x40F\x5\xCA\x66\x2\x40F\x63\x3\x2\x2\x2\x410\x411" +
            "\a\x61\x2\x2\x411\x413\a\xDC\x2\x2\x412\x410\x3\x2\x2\x2\x412\x413\x3" +
            "\x2\x2\x2\x413\x414\x3\x2\x2\x2\x414\x416\x5\xE8u\x2\x415\x417\a\xDC\x2" +
            "\x2\x416\x415\x3\x2\x2\x2\x416\x417\x3\x2\x2\x2\x417\x418\x3\x2\x2\x2" +
            "\x418\x41A\a\xC0\x2\x2\x419\x41B\a\xDC\x2\x2\x41A\x419\x3\x2\x2\x2\x41A" +
            "\x41B\x3\x2\x2\x2\x41B\x41C\x3\x2\x2\x2\x41C\x41D\x5\xCA\x66\x2\x41D\x65" +
            "\x3\x2\x2\x2\x41E\x41F\a\x64\x2\x2\x41F\x420\a\xDC\x2\x2\x420\x422\x5" +
            "\xDAn\x2\x421\x423\a\xDC\x2\x2\x422\x421\x3\x2\x2\x2\x422\x423\x3\x2\x2" +
            "\x2\x423\x424\x3\x2\x2\x2\x424\x426\a\t\x2\x2\x425\x427\a\xDC\x2\x2\x426" +
            "\x425\x3\x2\x2\x2\x426\x427\x3\x2\x2\x2\x427\x428\x3\x2\x2\x2\x428\x429" +
            "\x5\xCA\x66\x2\x429g\x3\x2\x2\x2\x42A\x42B\a\\\x2\x2\x42B\x42C\a\xDC\x2" +
            "\x2\x42C\x42D\x5\xCA\x66\x2\x42Di\x3\x2\x2\x2\x42E\x42F\a]\x2\x2\x42F" +
            "\x430\a\xDC\x2\x2\x430\x43F\x5\xCA\x66\x2\x431\x433\a\xDC\x2\x2\x432\x431" +
            "\x3\x2\x2\x2\x432\x433\x3\x2\x2\x2\x433\x434\x3\x2\x2\x2\x434\x436\a\t" +
            "\x2\x2\x435\x437\a\xDC\x2\x2\x436\x435\x3\x2\x2\x2\x436\x437\x3\x2\x2" +
            "\x2\x437\x438\x3\x2\x2\x2\x438\x43D\x5\xCA\x66\x2\x439\x43A\a\xDC\x2\x2" +
            "\x43A\x43B\a\xAC\x2\x2\x43B\x43C\a\xDC\x2\x2\x43C\x43E\x5\xCA\x66\x2\x43D" +
            "\x439\x3\x2\x2\x2\x43D\x43E\x3\x2\x2\x2\x43E\x440\x3\x2\x2\x2\x43F\x432" +
            "\x3\x2\x2\x2\x43F\x440\x3\x2\x2\x2\x440k\x3\x2\x2\x2\x441\x442\ah\x2\x2" +
            "\x442\x443\a\xDC\x2\x2\x443\x445\x5\xE8u\x2\x444\x446\a\xDC\x2\x2\x445" +
            "\x444\x3\x2\x2\x2\x445\x446\x3\x2\x2\x2\x446\x447\x3\x2\x2\x2\x447\x449" +
            "\a\xC0\x2\x2\x448\x44A\a\xDC\x2\x2\x449\x448\x3\x2\x2\x2\x449\x44A\x3" +
            "\x2\x2\x2\x44A\x44B\x3\x2\x2\x2\x44B\x44C\x5\xCA\x66\x2\x44Cm\x3\x2\x2" +
            "\x2\x44D\x44F\ai\x2\x2\x44E\x450\a\xDC\x2\x2\x44F\x44E\x3\x2\x2\x2\x44F" +
            "\x450\x3\x2\x2\x2\x450\x451\x3\x2\x2\x2\x451\x453\x5\x104\x83\x2\x452" +
            "\x454\a\xDC\x2\x2\x453\x452\x3\x2\x2\x2\x453\x454\x3\x2\x2\x2\x454\x455" +
            "\x3\x2\x2\x2\x455\x457\a\xC0\x2\x2\x456\x458\a\xDC\x2\x2\x457\x456\x3" +
            "\x2\x2\x2\x457\x458\x3\x2\x2\x2\x458\x459\x3\x2\x2\x2\x459\x45A\x5\xCA" +
            "\x66\x2\x45Ao\x3\x2\x2\x2\x45B\x45F\x5r:\x2\x45C\x45E\x5t;\x2\x45D\x45C" +
            "\x3\x2\x2\x2\x45E\x461\x3\x2\x2\x2\x45F\x45D\x3\x2\x2\x2\x45F\x460\x3" +
            "\x2\x2\x2\x460\x463\x3\x2\x2\x2\x461\x45F\x3\x2\x2\x2\x462\x464\x5v<\x2" +
            "\x463\x462\x3\x2\x2\x2\x463\x464\x3\x2\x2\x2\x464\x465\x3\x2\x2\x2\x465" +
            "\x466\am\x2\x2\x466q\x3\x2\x2\x2\x467\x469\aj\x2\x2\x468\x46A\a\xDC\x2" +
            "\x2\x469\x468\x3\x2\x2\x2\x469\x46A\x3\x2\x2\x2\x46A\x46B\x3\x2\x2\x2" +
            "\x46B\x46C\x5X-\x2\x46C\x46D\a\xDC\x2\x2\x46D\x46E\a\xAA\x2\x2\x46E\x474" +
            "\x5\x126\x94\x2\x46F\x473\x5\xE\b\x2\x470\x473\x5\x16\f\x2\x471\x473\x5" +
            "\x1C\xF\x2\x472\x46F\x3\x2\x2\x2\x472\x470\x3\x2\x2\x2\x472\x471\x3\x2" +
            "\x2\x2\x473\x476\x3\x2\x2\x2\x474\x472\x3\x2\x2\x2\x474\x475\x3\x2\x2" +
            "\x2\x475s\x3\x2\x2\x2\x476\x474\x3\x2\x2\x2\x477\x479\ak\x2\x2\x478\x47A" +
            "\a\xDC\x2\x2\x479\x478\x3\x2\x2\x2\x479\x47A\x3\x2\x2\x2\x47A\x47B\x3" +
            "\x2\x2\x2\x47B\x47C\x5X-\x2\x47C\x47D\a\xDC\x2\x2\x47D\x47E\a\xAA\x2\x2" +
            "\x47E\x484\x5\x126\x94\x2\x47F\x483\x5\xE\b\x2\x480\x483\x5\x16\f\x2\x481" +
            "\x483\x5\x1C\xF\x2\x482\x47F\x3\x2\x2\x2\x482\x480\x3\x2\x2\x2\x482\x481" +
            "\x3\x2\x2\x2\x483\x486\x3\x2\x2\x2\x484\x482\x3\x2\x2\x2\x484\x485\x3" +
            "\x2\x2\x2\x485u\x3\x2\x2\x2\x486\x484\x3\x2\x2\x2\x487\x488\al\x2\x2\x488" +
            "\x48E\x5\x126\x94\x2\x489\x48D\x5\xE\b\x2\x48A\x48D\x5\x16\f\x2\x48B\x48D" +
            "\x5\x1C\xF\x2\x48C\x489\x3\x2\x2\x2\x48C\x48A\x3\x2\x2\x2\x48C\x48B\x3" +
            "\x2\x2\x2\x48D\x490\x3\x2\x2\x2\x48E\x48C\x3\x2\x2\x2\x48E\x48F\x3\x2" +
            "\x2\x2\x48Fw\x3\x2\x2\x2\x490\x48E\x3\x2\x2\x2\x491\x493\ao\x2\x2\x492" +
            "\x494\a\xDC\x2\x2\x493\x492\x3\x2\x2\x2\x493\x494\x3\x2\x2\x2\x494\x495" +
            "\x3\x2\x2\x2\x495\x497\a\xC4\x2\x2\x496\x498\a\xDC\x2\x2\x497\x496\x3" +
            "\x2\x2\x2\x497\x498\x3\x2\x2\x2\x498\x499\x3\x2\x2\x2\x499\x49B\x5\xF4" +
            "{\x2\x49A\x49C\a\xDC\x2\x2\x49B\x49A\x3\x2\x2\x2\x49B\x49C\x3\x2\x2\x2" +
            "\x49C\x49D\x3\x2\x2\x2\x49D\x49E\a\xCB\x2\x2\x49Ey\x3\x2\x2\x2\x49F\x4A0" +
            "\ap\x2\x2\x4A0\x4A1\a\xDC\x2\x2\x4A1\x4A2\x5\xCA\x66\x2\x4A2{\x3\x2\x2" +
            "\x2\x4A3\x4A4\ar\x2\x2\x4A4\x4A5\a\xDC\x2\x2\x4A5\x4A6\x5\xCA\x66\x2\x4A6" +
            "\x4A7\a\xDC\x2\x2\x4A7\x4A8\a\x12\x2\x2\x4A8\x4A9\a\xDC\x2\x2\x4A9\x4AA" +
            "\x5\xCA\x66\x2\x4AA}\x3\x2\x2\x2\x4AB\x4AC\t\x6\x2\x2\x4AC\x4B3\a\xDC" +
            "\x2\x2\x4AD\x4AE\aS\x2\x2\x4AE\x4AF\a\xDC\x2\x2\x4AF\x4B4\x5\xCA\x66\x2" +
            "\x4B0\x4B1\a\x95\x2\x2\x4B1\x4B2\a\xDC\x2\x2\x4B2\x4B4\as\x2\x2\x4B3\x4AD" +
            "\x3\x2\x2\x2\x4B3\x4B0\x3\x2\x2\x2\x4B4\x7F\x3\x2\x2\x2\x4B5\x4B6\ax\x2" +
            "\x2\x4B6\x4B7\a\xDC\x2\x2\x4B7\x4B8\x5\xCA\x66\x2\x4B8\x4B9\a\xDC\x2\x2" +
            "\x4B9\x4BA\aS\x2\x2\x4BA\x4BB\a\xDC\x2\x2\x4BB\x4C6\x5\xCA\x66\x2\x4BC" +
            "\x4BE\a\xDC\x2\x2\x4BD\x4BC\x3\x2\x2\x2\x4BD\x4BE\x3\x2\x2\x2\x4BE\x4BF" +
            "\x3\x2\x2\x2\x4BF\x4C1\a\t\x2\x2\x4C0\x4C2\a\xDC\x2\x2\x4C1\x4C0\x3\x2" +
            "\x2\x2\x4C1\x4C2\x3\x2\x2\x2\x4C2\x4C3\x3\x2\x2\x2\x4C3\x4C5\x5\xCA\x66" +
            "\x2\x4C4\x4BD\x3\x2\x2\x2\x4C5\x4C8\x3\x2\x2\x2\x4C6\x4C4\x3\x2\x2\x2" +
            "\x4C6\x4C7\x3\x2\x2\x2\x4C7\x81\x3\x2\x2\x2\x4C8\x4C6\x3\x2\x2\x2\x4C9" +
            "\x4CA\ax\x2\x2\x4CA\x4CB\a\xDC\x2\x2\x4CB\x4CC\x5\xCA\x66\x2\x4CC\x4CD" +
            "\a\xDC\x2\x2\x4CD\x4CE\aR\x2\x2\x4CE\x4CF\a\xDC\x2\x2\x4CF\x4DA\x5\xCA" +
            "\x66\x2\x4D0\x4D2\a\xDC\x2\x2\x4D1\x4D0\x3\x2\x2\x2\x4D1\x4D2\x3\x2\x2" +
            "\x2\x4D2\x4D3\x3\x2\x2\x2\x4D3\x4D5\a\t\x2\x2\x4D4\x4D6\a\xDC\x2\x2\x4D5" +
            "\x4D4\x3\x2\x2\x2\x4D5\x4D6\x3\x2\x2\x2\x4D6\x4D7\x3\x2\x2\x2\x4D7\x4D9" +
            "\x5\xCA\x66\x2\x4D8\x4D1\x3\x2\x2\x2\x4D9\x4DC\x3\x2\x2\x2\x4DA\x4D8\x3" +
            "\x2\x2\x2\x4DA\x4DB\x3\x2\x2\x2\x4DB\x83\x3\x2\x2\x2\x4DC\x4DA\x3\x2\x2" +
            "\x2\x4DD\x4DE\a{\x2\x2\x4DE\x4DF\a\xDC\x2\x2\x4DF\x4E0\x5\xCA\x66\x2\x4E0" +
            "\x4E1\a\xDC\x2\x2\x4E1\x4E2\aN\x2\x2\x4E2\x4E3\a\xDC\x2\x2\x4E3\x4E8\t" +
            "\a\x2\x2\x4E4\x4E5\a\xDC\x2\x2\x4E5\x4E6\a\v\x2\x2\x4E6\x4E7\a\xDC\x2" +
            "\x2\x4E7\x4E9\t\b\x2\x2\x4E8\x4E4\x3\x2\x2\x2\x4E8\x4E9\x3\x2\x2\x2\x4E9" +
            "\x4EC\x3\x2\x2\x2\x4EA\x4EB\a\xDC\x2\x2\x4EB\x4ED\t\t\x2\x2\x4EC\x4EA" +
            "\x3\x2\x2\x2\x4EC\x4ED\x3\x2\x2\x2\x4ED\x4EE\x3\x2\x2\x2\x4EE\x4EF\a\xDC" +
            "\x2\x2\x4EF\x4F0\a\x12\x2\x2\x4F0\x4F1\a\xDC\x2\x2\x4F1\x4FC\x5\xDAn\x2" +
            "\x4F2\x4F3\a\xDC\x2\x2\x4F3\x4F5\a`\x2\x2\x4F4\x4F6\a\xDC\x2\x2\x4F5\x4F4" +
            "\x3\x2\x2\x2\x4F5\x4F6\x3\x2\x2\x2\x4F6\x4F7\x3\x2\x2\x2\x4F7\x4F9\a\xC0" +
            "\x2\x2\x4F8\x4FA\a\xDC\x2\x2\x4F9\x4F8\x3\x2\x2\x2\x4F9\x4FA\x3\x2\x2" +
            "\x2\x4FA\x4FB\x3\x2\x2\x2\x4FB\x4FD\x5\xCA\x66\x2\x4FC\x4F2\x3\x2\x2\x2" +
            "\x4FC\x4FD\x3\x2\x2\x2\x4FD\x85\x3\x2\x2\x2\x4FE\x50B\x5\x88\x45\x2\x4FF" +
            "\x501\a\xDC\x2\x2\x500\x4FF\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2\x501\x502" +
            "\x3\x2\x2\x2\x502\x504\t\n\x2\x2\x503\x505\a\xDC\x2\x2\x504\x503\x3\x2" +
            "\x2\x2\x504\x505\x3\x2\x2\x2\x505\x507\x3\x2\x2\x2\x506\x508\x5\x88\x45" +
            "\x2\x507\x506\x3\x2\x2\x2\x507\x508\x3\x2\x2\x2\x508\x50A\x3\x2\x2\x2" +
            "\x509\x500\x3\x2\x2\x2\x50A\x50D\x3\x2\x2\x2\x50B\x509\x3\x2\x2\x2\x50B" +
            "\x50C\x3\x2\x2\x2\x50C\x520\x3\x2\x2\x2\x50D\x50B\x3\x2\x2\x2\x50E\x510" +
            "\x5\x88\x45\x2\x50F\x50E\x3\x2\x2\x2\x50F\x510\x3\x2\x2\x2\x510\x51B\x3" +
            "\x2\x2\x2\x511\x513\a\xDC\x2\x2\x512\x511\x3\x2\x2\x2\x512\x513\x3\x2" +
            "\x2\x2\x513\x514\x3\x2\x2\x2\x514\x516\t\n\x2\x2\x515\x517\a\xDC\x2\x2" +
            "\x516\x515\x3\x2\x2\x2\x516\x517\x3\x2\x2\x2\x517\x519\x3\x2\x2\x2\x518" +
            "\x51A\x5\x88\x45\x2\x519\x518\x3\x2\x2\x2\x519\x51A\x3\x2\x2\x2\x51A\x51C" +
            "\x3\x2\x2\x2\x51B\x512\x3\x2\x2\x2\x51C\x51D\x3\x2\x2\x2\x51D\x51B\x3" +
            "\x2\x2\x2\x51D\x51E\x3\x2\x2\x2\x51E\x520\x3\x2\x2\x2\x51F\x4FE\x3\x2" +
            "\x2\x2\x51F\x50F\x3\x2\x2\x2\x520\x87\x3\x2\x2\x2\x521\x533\x5\xCA\x66" +
            "\x2\x522\x530\t\v\x2\x2\x523\x525\a\xDC\x2\x2\x524\x523\x3\x2\x2\x2\x524" +
            "\x525\x3\x2\x2\x2\x525\x526\x3\x2\x2\x2\x526\x528\a\xC4\x2\x2\x527\x529" +
            "\a\xDC\x2\x2\x528\x527\x3\x2\x2\x2\x528\x529\x3\x2\x2\x2\x529\x52A\x3" +
            "\x2\x2\x2\x52A\x52C\x5\xF4{\x2\x52B\x52D\a\xDC\x2\x2\x52C\x52B\x3\x2\x2" +
            "\x2\x52C\x52D\x3\x2\x2\x2\x52D\x52E\x3\x2\x2\x2\x52E\x52F\a\xCB\x2\x2" +
            "\x52F\x531\x3\x2\x2\x2\x530\x524\x3\x2\x2\x2\x530\x531\x3\x2\x2\x2\x531" +
            "\x533\x3\x2\x2\x2\x532\x521\x3\x2\x2\x2\x532\x522\x3\x2\x2\x2\x533\x89" +
            "\x3\x2\x2\x2\x534\x535\a\x85\x2\x2\x535\x536\a\xDC\x2\x2\x536\x538\x5" +
            "\xDAn\x2\x537\x539\a\xDC\x2\x2\x538\x537\x3\x2\x2\x2\x538\x539\x3\x2\x2" +
            "\x2\x539\x53A\x3\x2\x2\x2\x53A\x53F\a\t\x2\x2\x53B\x53D\a\xDC\x2\x2\x53C" +
            "\x53B\x3\x2\x2\x2\x53C\x53D\x3\x2\x2\x2\x53D\x53E\x3\x2\x2\x2\x53E\x540" +
            "\x5\x86\x44\x2\x53F\x53C\x3\x2\x2\x2\x53F\x540\x3\x2\x2\x2\x540\x8B\x3" +
            "\x2\x2\x2\x541\x542\x5\x11C\x8F\x2\x542\x543\a\xDC\x2\x2\x543\x545\x3" +
            "\x2\x2\x2\x544\x541\x3\x2\x2\x2\x544\x545\x3\x2\x2\x2\x545\x548\x3\x2" +
            "\x2\x2\x546\x547\a\xA3\x2\x2\x547\x549\a\xDC\x2\x2\x548\x546\x3\x2\x2" +
            "\x2\x548\x549\x3\x2\x2\x2\x549\x54A\x3\x2\x2\x2\x54A\x54B\a\x87\x2\x2" +
            "\x54B\x54C\a\xDC\x2\x2\x54C\x54E\x5\x104\x83\x2\x54D\x54F\x5\x11A\x8E" +
            "\x2\x54E\x54D\x3\x2\x2\x2\x54E\x54F\x3\x2\x2\x2\x54F\x554\x3\x2\x2\x2" +
            "\x550\x552\a\xDC\x2\x2\x551\x550\x3\x2\x2\x2\x551\x552\x3\x2\x2\x2\x552" +
            "\x553\x3\x2\x2\x2\x553\x555\x5\xFA~\x2\x554\x551\x3\x2\x2\x2\x554\x555" +
            "\x3\x2\x2\x2\x555\x558\x3\x2\x2\x2\x556\x557\a\xDC\x2\x2\x557\x559\x5" +
            "\x106\x84\x2\x558\x556\x3\x2\x2\x2\x558\x559\x3\x2\x2\x2\x559\x55A\x3" +
            "\x2\x2\x2\x55A\x55C\x5\x126\x94\x2\x55B\x55D\x5\x1C\xF\x2\x55C\x55B\x3" +
            "\x2\x2\x2\x55C\x55D\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x55F\a;\x2" +
            "\x2\x55F\x8D\x3\x2\x2\x2\x560\x561\x5\x11C\x8F\x2\x561\x562\a\xDC\x2\x2" +
            "\x562\x564\x3\x2\x2\x2\x563\x560\x3\x2\x2\x2\x563\x564\x3\x2\x2\x2\x564" +
            "\x567\x3\x2\x2\x2\x565\x566\a\xA3\x2\x2\x566\x568\a\xDC\x2\x2\x567\x565" +
            "\x3\x2\x2\x2\x567\x568\x3\x2\x2\x2\x568\x569\x3\x2\x2\x2\x569\x56A\a\x89" +
            "\x2\x2\x56A\x56B\a\xDC\x2\x2\x56B\x570\x5\x104\x83\x2\x56C\x56E\a\xDC" +
            "\x2\x2\x56D\x56C\x3\x2\x2\x2\x56D\x56E\x3\x2\x2\x2\x56E\x56F\x3\x2\x2" +
            "\x2\x56F\x571\x5\xFA~\x2\x570\x56D\x3\x2\x2\x2\x570\x571\x3\x2\x2\x2\x571" +
            "\x572\x3\x2\x2\x2\x572\x574\x5\x126\x94\x2\x573\x575\x5\x1C\xF\x2\x574" +
            "\x573\x3\x2\x2\x2\x574\x575\x3\x2\x2\x2\x575\x576\x3\x2\x2\x2\x576\x577" +
            "\a;\x2\x2\x577\x8F\x3\x2\x2\x2\x578\x579\x5\x11C\x8F\x2\x579\x57A\a\xDC" +
            "\x2\x2\x57A\x57C\x3\x2\x2\x2\x57B\x578\x3\x2\x2\x2\x57B\x57C\x3\x2\x2" +
            "\x2\x57C\x57F\x3\x2\x2\x2\x57D\x57E\a\xA3\x2\x2\x57E\x580\a\xDC\x2\x2" +
            "\x57F\x57D\x3\x2\x2\x2\x57F\x580\x3\x2\x2\x2\x580\x581\x3\x2\x2\x2\x581" +
            "\x582\a\x88\x2\x2\x582\x583\a\xDC\x2\x2\x583\x588\x5\x104\x83\x2\x584" +
            "\x586\a\xDC\x2\x2\x585\x584\x3\x2\x2\x2\x585\x586\x3\x2\x2\x2\x586\x587" +
            "\x3\x2\x2\x2\x587\x589\x5\xFA~\x2\x588\x585\x3\x2\x2\x2\x588\x589\x3\x2" +
            "\x2\x2\x589\x58A\x3\x2\x2\x2\x58A\x58C\x5\x126\x94\x2\x58B\x58D\x5\x1C" +
            "\xF\x2\x58C\x58B\x3\x2\x2\x2\x58C\x58D\x3\x2\x2\x2\x58D\x58E\x3\x2\x2" +
            "\x2\x58E\x58F\a;\x2\x2\x58F\x91\x3\x2\x2\x2\x590\x591\a\x8C\x2\x2\x591" +
            "\x592\a\xDC\x2\x2\x592\x594\x5\xDAn\x2\x593\x595\a\xDC\x2\x2\x594\x593" +
            "\x3\x2\x2\x2\x594\x595\x3\x2\x2\x2\x595\x596\x3\x2\x2\x2\x596\x598\a\t" +
            "\x2\x2\x597\x599\a\xDC\x2\x2\x598\x597\x3\x2\x2\x2\x598\x599\x3\x2\x2" +
            "\x2\x599\x59B\x3\x2\x2\x2\x59A\x59C\x5\xCA\x66\x2\x59B\x59A\x3\x2\x2\x2" +
            "\x59B\x59C\x3\x2\x2\x2\x59C\x59E\x3\x2\x2\x2\x59D\x59F\a\xDC\x2\x2\x59E" +
            "\x59D\x3\x2\x2\x2\x59E\x59F\x3\x2\x2\x2\x59F\x5A0\x3\x2\x2\x2\x5A0\x5A2" +
            "\a\t\x2\x2\x5A1\x5A3\a\xDC\x2\x2\x5A2\x5A1\x3\x2\x2\x2\x5A2\x5A3\x3\x2" +
            "\x2\x2\x5A3\x5A4\x3\x2\x2\x2\x5A4\x5A5\x5\xCA\x66\x2\x5A5\x93\x3\x2\x2" +
            "\x2\x5A6\x5A7\a\x8F\x2\x2\x5A7\x5A8\a\xDC\x2\x2\x5A8\x5B7\x5\x104\x83" +
            "\x2\x5A9\x5AB\a\xDC\x2\x2\x5AA\x5A9\x3\x2\x2\x2\x5AA\x5AB\x3\x2\x2\x2" +
            "\x5AB\x5AC\x3\x2\x2\x2\x5AC\x5AE\a\xC4\x2\x2\x5AD\x5AF\a\xDC\x2\x2\x5AE" +
            "\x5AD\x3\x2\x2\x2\x5AE\x5AF\x3\x2\x2\x2\x5AF\x5B4\x3\x2\x2\x2\x5B0\x5B2" +
            "\x5\xF4{\x2\x5B1\x5B3\a\xDC\x2\x2\x5B2\x5B1\x3\x2\x2\x2\x5B2\x5B3\x3\x2" +
            "\x2\x2\x5B3\x5B5\x3\x2\x2\x2\x5B4\x5B0\x3\x2\x2\x2\x5B4\x5B5\x3\x2\x2" +
            "\x2\x5B5\x5B6\x3\x2\x2\x2\x5B6\x5B8\a\xCB\x2\x2\x5B7\x5AA\x3\x2\x2\x2" +
            "\x5B7\x5B8\x3\x2\x2\x2\x5B8\x95\x3\x2\x2\x2\x5B9\x5BC\a\x8E\x2\x2\x5BA" +
            "\x5BB\a\xDC\x2\x2\x5BB\x5BD\x5\xCA\x66\x2\x5BC\x5BA\x3\x2\x2\x2\x5BC\x5BD" +
            "\x3\x2\x2\x2\x5BD\x97\x3\x2\x2\x2\x5BE\x5BF\a\x92\x2\x2\x5BF\x5C2\a\xDC" +
            "\x2\x2\x5C0\x5C1\a\x84\x2\x2\x5C1\x5C3\a\xDC\x2\x2\x5C2\x5C0\x3\x2\x2" +
            "\x2\x5C2\x5C3\x3\x2\x2\x2\x5C3\x5C4\x3\x2\x2\x2\x5C4\x5CF\x5\x9AN\x2\x5C5" +
            "\x5C7\a\xDC\x2\x2\x5C6\x5C5\x3\x2\x2\x2\x5C6\x5C7\x3\x2\x2\x2\x5C7\x5C8" +
            "\x3\x2\x2\x2\x5C8\x5CA\a\t\x2\x2\x5C9\x5CB\a\xDC\x2\x2\x5CA\x5C9\x3\x2" +
            "\x2\x2\x5CA\x5CB\x3\x2\x2\x2\x5CB\x5CC\x3\x2\x2\x2\x5CC\x5CE\x5\x9AN\x2" +
            "\x5CD\x5C6\x3\x2\x2\x2\x5CE\x5D1\x3\x2\x2\x2\x5CF\x5CD\x3\x2\x2\x2\x5CF" +
            "\x5D0\x3\x2\x2\x2\x5D0\x99\x3\x2\x2\x2\x5D1\x5CF\x3\x2\x2\x2\x5D2\x5D4" +
            "\x5\xE8u\x2\x5D3\x5D5\a\xDC\x2\x2\x5D4\x5D3\x3\x2\x2\x2\x5D4\x5D5\x3\x2" +
            "\x2\x2\x5D5\x5D6\x3\x2\x2\x2\x5D6\x5D8\a\xC4\x2\x2\x5D7\x5D9\a\xDC\x2" +
            "\x2\x5D8\x5D7\x3\x2\x2\x2\x5D8\x5D9\x3\x2\x2\x2\x5D9\x5DA\x3\x2\x2\x2" +
            "\x5DA\x5DC\x5\x100\x81\x2\x5DB\x5DD\a\xDC\x2\x2\x5DC\x5DB\x3\x2\x2\x2" +
            "\x5DC\x5DD\x3\x2\x2\x2\x5DD\x5DE\x3\x2\x2\x2\x5DE\x5E1\a\xCB\x2\x2\x5DF" +
            "\x5E0\a\xDC\x2\x2\x5E0\x5E2\x5\x106\x84\x2\x5E1\x5DF\x3\x2\x2\x2\x5E1" +
            "\x5E2\x3\x2\x2\x2\x5E2\x9B\x3\x2\x2\x2\x5E3\x5E4\a\x94\x2\x2\x5E4\x9D" +
            "\x3\x2\x2\x2\x5E5\x5EB\a\x95\x2\x2\x5E6\x5E9\a\xDC\x2\x2\x5E7\x5EA\as" +
            "\x2\x2\x5E8\x5EA\x5\x104\x83\x2\x5E9\x5E7\x3\x2\x2\x2\x5E9\x5E8\x3\x2" +
            "\x2\x2\x5EA\x5EC\x3\x2\x2\x2\x5EB\x5E6\x3\x2\x2\x2\x5EB\x5EC\x3\x2\x2" +
            "\x2\x5EC\x9F\x3\x2\x2\x2\x5ED\x5EE\a\x96\x2\x2\x5EE\xA1\x3\x2\x2\x2\x5EF" +
            "\x5F0\a\x97\x2\x2\x5F0\x5F1\a\xDC\x2\x2\x5F1\x5F2\x5\xCA\x66\x2\x5F2\xA3" +
            "\x3\x2\x2\x2\x5F3\x5F4\a\x98\x2\x2\x5F4\x5F5\a\xDC\x2\x2\x5F5\x5F7\x5" +
            "\xE8u\x2\x5F6\x5F8\a\xDC\x2\x2\x5F7\x5F6\x3\x2\x2\x2\x5F7\x5F8\x3\x2\x2" +
            "\x2\x5F8\x5F9\x3\x2\x2\x2\x5F9\x5FB\a\xC0\x2\x2\x5FA\x5FC\a\xDC\x2\x2" +
            "\x5FB\x5FA\x3\x2\x2\x2\x5FB\x5FC\x3\x2\x2\x2\x5FC\x5FD\x3\x2\x2\x2\x5FD" +
            "\x5FE\x5\xCA\x66\x2\x5FE\xA5\x3\x2\x2\x2\x5FF\x600\a\x99\x2\x2\x600\x601" +
            "\a\xDC\x2\x2\x601\x603\x5\xCA\x66\x2\x602\x604\a\xDC\x2\x2\x603\x602\x3" +
            "\x2\x2\x2\x603\x604\x3\x2\x2\x2\x604\x605\x3\x2\x2\x2\x605\x607\a\t\x2" +
            "\x2\x606\x608\a\xDC\x2\x2\x607\x606\x3\x2\x2\x2\x607\x608\x3\x2\x2\x2" +
            "\x608\x609\x3\x2\x2\x2\x609\x60A\x5\xCA\x66\x2\x60A\xA7\x3\x2\x2\x2\x60B" +
            "\x60C\a\x9A\x2\x2\x60C\x60D\a\xDC\x2\x2\x60D\x60F\x5\xCA\x66\x2\x60E\x610" +
            "\a\xDC\x2\x2\x60F\x60E\x3\x2\x2\x2\x60F\x610\x3\x2\x2\x2\x610\x611\x3" +
            "\x2\x2\x2\x611\x613\a\t\x2\x2\x612\x614\a\xDC\x2\x2\x613\x612\x3\x2\x2" +
            "\x2\x613\x614\x3\x2\x2\x2\x614\x615\x3\x2\x2\x2\x615\x617\x5\xCA\x66\x2" +
            "\x616\x618\a\xDC\x2\x2\x617\x616\x3\x2\x2\x2\x617\x618\x3\x2\x2\x2\x618" +
            "\x619\x3\x2\x2\x2\x619\x61B\a\t\x2\x2\x61A\x61C\a\xDC\x2\x2\x61B\x61A" +
            "\x3\x2\x2\x2\x61B\x61C\x3\x2\x2\x2\x61C\x61D\x3\x2\x2\x2\x61D\x61F\x5" +
            "\xCA\x66\x2\x61E\x620\a\xDC\x2\x2\x61F\x61E\x3\x2\x2\x2\x61F\x620\x3\x2" +
            "\x2\x2\x620\x621\x3\x2\x2\x2\x621\x623\a\t\x2\x2\x622\x624\a\xDC\x2\x2" +
            "\x623\x622\x3\x2\x2\x2\x623\x624\x3\x2\x2\x2\x624\x625\x3\x2\x2\x2\x625" +
            "\x626\x5\xCA\x66\x2\x626\xA9\x3\x2\x2\x2\x627\x628\a\x9B\x2\x2\x628\x629" +
            "\a\xDC\x2\x2\x629\x62B\x5\xDAn\x2\x62A\x62C\a\xDC\x2\x2\x62B\x62A\x3\x2" +
            "\x2\x2\x62B\x62C\x3\x2\x2\x2\x62C\x62D\x3\x2\x2\x2\x62D\x62F\a\t\x2\x2" +
            "\x62E\x630\a\xDC\x2\x2\x62F\x62E\x3\x2\x2\x2\x62F\x630\x3\x2\x2\x2\x630" +
            "\x631\x3\x2\x2\x2\x631\x632\x5\xCA\x66\x2\x632\xAB\x3\x2\x2\x2\x633\x634" +
            "\a\x9C\x2\x2\x634\x635\a\xDC\x2\x2\x635\x636\a\x1B\x2\x2\x636\x637\a\xDC" +
            "\x2\x2\x637\x638\x5\xCA\x66\x2\x638\x63C\x5\x126\x94\x2\x639\x63B\x5\xB0" +
            "Y\x2\x63A\x639\x3\x2\x2\x2\x63B\x63E\x3\x2\x2\x2\x63C\x63A\x3\x2\x2\x2" +
            "\x63C\x63D\x3\x2\x2\x2\x63D\x63F\x3\x2\x2\x2\x63E\x63C\x3\x2\x2\x2\x63F" +
            "\x640\a<\x2\x2\x640\xAD\x3\x2\x2\x2\x641\x643\aY\x2\x2\x642\x644\a\xDC" +
            "\x2\x2\x643\x642\x3\x2\x2\x2\x643\x644\x3\x2\x2\x2\x644\x645\x3\x2\x2" +
            "\x2\x645\x647\x5\x10C\x87\x2\x646\x648\a\xDC\x2\x2\x647\x646\x3\x2\x2" +
            "\x2\x647\x648\x3\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649\x64A\x5\xCA\x66\x2" +
            "\x64A\x653\x3\x2\x2\x2\x64B\x64C\x5\xCA\x66\x2\x64C\x64D\a\xDC\x2\x2\x64D" +
            "\x64E\a\xAC\x2\x2\x64E\x64F\a\xDC\x2\x2\x64F\x650\x5\xCA\x66\x2\x650\x653" +
            "\x3\x2\x2\x2\x651\x653\x5\xCA\x66\x2\x652\x641\x3\x2\x2\x2\x652\x64B\x3" +
            "\x2\x2\x2\x652\x651\x3\x2\x2\x2\x653\xAF\x3\x2\x2\x2\x654\x655\a\x1B\x2" +
            "\x2\x655\x656\a\xDC\x2\x2\x656\x657\x5\xB2Z\x2\x657\x659\x5\x126\x94\x2" +
            "\x658\x65A\x5\x1C\xF\x2\x659\x658\x3\x2\x2\x2\x659\x65A\x3\x2\x2\x2\x65A" +
            "\xB1\x3\x2\x2\x2\x65B\x66B\a\x36\x2\x2\x65C\x667\x5\xAEX\x2\x65D\x65F" +
            "\a\xDC\x2\x2\x65E\x65D\x3\x2\x2\x2\x65E\x65F\x3\x2\x2\x2\x65F\x660\x3" +
            "\x2\x2\x2\x660\x662\a\t\x2\x2\x661\x663\a\xDC\x2\x2\x662\x661\x3\x2\x2" +
            "\x2\x662\x663\x3\x2\x2\x2\x663\x664\x3\x2\x2\x2\x664\x666\x5\xAEX\x2\x665" +
            "\x65E\x3\x2\x2\x2\x666\x669\x3\x2\x2\x2\x667\x665\x3\x2\x2\x2\x667\x668" +
            "\x3\x2\x2\x2\x668\x66B\x3\x2\x2\x2\x669\x667\x3\x2\x2\x2\x66A\x65B\x3" +
            "\x2\x2\x2\x66A\x65C\x3\x2\x2\x2\x66B\xB3\x3\x2\x2\x2\x66C\x66D\a\x9D\x2" +
            "\x2\x66D\x66E\a\xDC\x2\x2\x66E\x677\x5\xCA\x66\x2\x66F\x671\a\xDC\x2\x2" +
            "\x670\x66F\x3\x2\x2\x2\x670\x671\x3\x2\x2\x2\x671\x672\x3\x2\x2\x2\x672" +
            "\x674\a\t\x2\x2\x673\x675\a\xDC\x2\x2\x674\x673\x3\x2\x2\x2\x674\x675" +
            "\x3\x2\x2\x2\x675\x676\x3\x2\x2\x2\x676\x678\x5\xCA\x66\x2\x677\x670\x3" +
            "\x2\x2\x2\x677\x678\x3\x2\x2\x2\x678\xB5\x3\x2\x2\x2\x679\x67A\a\x9F\x2" +
            "\x2\x67A\x67B\a\xDC\x2\x2\x67B\x67D\x5\xCA\x66\x2\x67C\x67E\a\xDC\x2\x2" +
            "\x67D\x67C\x3\x2\x2\x2\x67D\x67E\x3\x2\x2\x2\x67E\x67F\x3\x2\x2\x2\x67F" +
            "\x681\a\t\x2\x2\x680\x682\a\xDC\x2\x2\x681\x680\x3\x2\x2\x2\x681\x682" +
            "\x3\x2\x2\x2\x682\x683\x3\x2\x2\x2\x683\x684\x5\xCA\x66\x2\x684\xB7\x3" +
            "\x2\x2\x2\x685\x686\a\x9E\x2\x2\x686\x687\a\xDC\x2\x2\x687\x689\x5\xE8" +
            "u\x2\x688\x68A\a\xDC\x2\x2\x689\x688\x3\x2\x2\x2\x689\x68A\x3\x2\x2\x2" +
            "\x68A\x68B\x3\x2\x2\x2\x68B\x68D\a\xC0\x2\x2\x68C\x68E\a\xDC\x2\x2\x68D" +
            "\x68C\x3\x2\x2\x2\x68D\x68E\x3\x2\x2\x2\x68E\x68F\x3\x2\x2\x2\x68F\x690" +
            "\x5\xCA\x66\x2\x690\xB9\x3\x2\x2\x2\x691\x692\a\xA5\x2\x2\x692\xBB\x3" +
            "\x2\x2\x2\x693\x694\x5\x11C\x8F\x2\x694\x695\a\xDC\x2\x2\x695\x697\x3" +
            "\x2\x2\x2\x696\x693\x3\x2\x2\x2\x696\x697\x3\x2\x2\x2\x697\x69A\x3\x2" +
            "\x2\x2\x698\x699\a\xA3\x2\x2\x699\x69B\a\xDC\x2\x2\x69A\x698\x3\x2\x2" +
            "\x2\x69A\x69B\x3\x2\x2\x2\x69B\x69C\x3\x2\x2\x2\x69C\x69E\a\xA7\x2\x2" +
            "\x69D\x69F\a\xDC\x2\x2\x69E\x69D\x3\x2\x2\x2\x69E\x69F\x3\x2\x2\x2\x69F" +
            "\x6A0\x3\x2\x2\x2\x6A0\x6A5\x5\x104\x83\x2\x6A1\x6A3\a\xDC\x2\x2\x6A2" +
            "\x6A1\x3\x2\x2\x2\x6A2\x6A3\x3\x2\x2\x2\x6A3\x6A4\x3\x2\x2\x2\x6A4\x6A6" +
            "\x5\xFA~\x2\x6A5\x6A2\x3\x2\x2\x2\x6A5\x6A6\x3\x2\x2\x2\x6A6\x6A7\x3\x2" +
            "\x2\x2\x6A7\x6A9\x5\x126\x94\x2\x6A8\x6AA\x5\x1C\xF\x2\x6A9\x6A8\x3\x2" +
            "\x2\x2\x6A9\x6AA\x3\x2\x2\x2\x6AA\x6AB\x3\x2\x2\x2\x6AB\x6AC\a=\x2\x2" +
            "\x6AC\xBD\x3\x2\x2\x2\x6AD\x6AF\a\xAB\x2\x2\x6AE\x6B0\a\xDC\x2\x2\x6AF" +
            "\x6AE\x3\x2\x2\x2\x6AF\x6B0\x3\x2\x2\x2\x6B0\x6B1\x3\x2\x2\x2\x6B1\x6B3" +
            "\a\xC0\x2\x2\x6B2\x6B4\a\xDC\x2\x2\x6B3\x6B2\x3\x2\x2\x2\x6B3\x6B4\x3" +
            "\x2\x2\x2\x6B4\x6B5\x3\x2\x2\x2\x6B5\x6B6\x5\xCA\x66\x2\x6B6\xBF\x3\x2" +
            "\x2\x2\x6B7\x6B8\x5\x11C\x8F\x2\x6B8\x6B9\a\xDC\x2\x2\x6B9\x6BB\x3\x2" +
            "\x2\x2\x6BA\x6B7\x3\x2\x2\x2\x6BA\x6BB\x3\x2\x2\x2\x6BB\x6BC\x3\x2\x2" +
            "\x2\x6BC\x6BD\a\xAE\x2\x2\x6BD\x6BE\a\xDC\x2\x2\x6BE\x6BF\x5\x104\x83" +
            "\x2\x6BF\x6C3\x5\x126\x94\x2\x6C0\x6C2\x5\xC2\x62\x2\x6C1\x6C0\x3\x2\x2" +
            "\x2\x6C2\x6C5\x3\x2\x2\x2\x6C3\x6C1\x3\x2\x2\x2\x6C3\x6C4\x3\x2\x2\x2" +
            "\x6C4\x6C6\x3\x2\x2\x2\x6C5\x6C3\x3\x2\x2\x2\x6C6\x6C7\a>\x2\x2\x6C7\xC1" +
            "\x3\x2\x2\x2\x6C8\x6D7\x5\x104\x83\x2\x6C9\x6CB\a\xDC\x2\x2\x6CA\x6C9" +
            "\x3\x2\x2\x2\x6CA\x6CB\x3\x2\x2\x2\x6CB\x6CC\x3\x2\x2\x2\x6CC\x6D1\a\xC4" +
            "\x2\x2\x6CD\x6CF\a\xDC\x2\x2\x6CE\x6CD\x3\x2\x2\x2\x6CE\x6CF\x3\x2\x2" +
            "\x2\x6CF\x6D0\x3\x2\x2\x2\x6D0\x6D2\x5\x100\x81\x2\x6D1\x6CE\x3\x2\x2" +
            "\x2\x6D1\x6D2\x3\x2\x2\x2\x6D2\x6D4\x3\x2\x2\x2\x6D3\x6D5\a\xDC\x2\x2" +
            "\x6D4\x6D3\x3\x2\x2\x2\x6D4\x6D5\x3\x2\x2\x2\x6D5\x6D6\x3\x2\x2\x2\x6D6" +
            "\x6D8\a\xCB\x2\x2\x6D7\x6CA\x3\x2\x2\x2\x6D7\x6D8\x3\x2\x2\x2\x6D8\x6DB" +
            "\x3\x2\x2\x2\x6D9\x6DA\a\xDC\x2\x2\x6DA\x6DC\x5\x106\x84\x2\x6DB\x6D9" +
            "\x3\x2\x2\x2\x6DB\x6DC\x3\x2\x2\x2\x6DC\x6DD\x3\x2\x2\x2\x6DD\x6DE\x5" +
            "\x126\x94\x2\x6DE\xC3\x3\x2\x2\x2\x6DF\x6E0\a\xAF\x2\x2\x6E0\x6E1\a\xDC" +
            "\x2\x2\x6E1\x6E6\x5\xCA\x66\x2\x6E2\x6E3\a\xDC\x2\x2\x6E3\x6E4\aY\x2\x2" +
            "\x6E4\x6E5\a\xDC\x2\x2\x6E5\x6E7\x5\x118\x8D\x2\x6E6\x6E2\x3\x2\x2\x2" +
            "\x6E6\x6E7\x3\x2\x2\x2\x6E7\xC5\x3\x2\x2\x2\x6E8\x6E9\a\xB0\x2\x2\x6E9" +
            "\x6EA\a\xDC\x2\x2\x6EA\x6EB\x5\xCA\x66\x2\x6EB\xC7\x3\x2\x2\x2\x6EC\x6ED" +
            "\a\xB1\x2\x2\x6ED\x6EE\a\xDC\x2\x2\x6EE\x6FD\x5\xDAn\x2\x6EF\x6F1\a\xDC" +
            "\x2\x2\x6F0\x6EF\x3\x2\x2\x2\x6F0\x6F1\x3\x2\x2\x2\x6F1\x6F2\x3\x2\x2" +
            "\x2\x6F2\x6F4\a\t\x2\x2\x6F3\x6F5\a\xDC\x2\x2\x6F4\x6F3\x3\x2\x2\x2\x6F4" +
            "\x6F5\x3\x2\x2\x2\x6F5\x6F6\x3\x2\x2\x2\x6F6\x6FB\x5\xCA\x66\x2\x6F7\x6F8" +
            "\a\xDC\x2\x2\x6F8\x6F9\a\xAC\x2\x2\x6F9\x6FA\a\xDC\x2\x2\x6FA\x6FC\x5" +
            "\xCA\x66\x2\x6FB\x6F7\x3\x2\x2\x2\x6FB\x6FC\x3\x2\x2\x2\x6FC\x6FE\x3\x2" +
            "\x2\x2\x6FD\x6F0\x3\x2\x2\x2\x6FD\x6FE\x3\x2\x2\x2\x6FE\xC9\x3\x2\x2\x2" +
            "\x6FF\x700\b\x66\x1\x2\x700\x702\at\x2\x2\x701\x703\a\xDC\x2\x2\x702\x701" +
            "\x3\x2\x2\x2\x702\x703\x3\x2\x2\x2\x703\x704\x3\x2\x2\x2\x704\x737\x5" +
            "\xCA\x66\x15\x705\x707\a\f\x2\x2\x706\x708\a\xDC\x2\x2\x707\x706\x3\x2" +
            "\x2\x2\x707\x708\x3\x2\x2\x2\x708\x709\x3\x2\x2\x2\x709\x737\x5\xCA\x66" +
            "\x12\x70A\x70C\x5\xE8u\x2\x70B\x70D\a\xDC\x2\x2\x70C\x70B\x3\x2\x2\x2" +
            "\x70C\x70D\x3\x2\x2\x2\x70D\x70E\x3\x2\x2\x2\x70E\x710\a\xBD\x2\x2\x70F" +
            "\x711\a\xDC\x2\x2\x710\x70F\x3\x2\x2\x2\x710\x711\x3\x2\x2\x2\x711\x712" +
            "\x3\x2\x2\x2\x712\x713\x5\xCA\x66\x11\x713\x737\x3\x2\x2\x2\x714\x716" +
            "\a\xC6\x2\x2\x715\x717\a\xDC\x2\x2\x716\x715\x3\x2\x2\x2\x716\x717\x3" +
            "\x2\x2\x2\x717\x718\x3\x2\x2\x2\x718\x737\x5\xCA\x66\xF\x719\x71B\au\x2" +
            "\x2\x71A\x71C\a\xDC\x2\x2\x71B\x71A\x3\x2\x2\x2\x71B\x71C\x3\x2\x2\x2" +
            "\x71C\x71D\x3\x2\x2\x2\x71D\x737\x5\xCA\x66\b\x71E\x737\x5\x116\x8C\x2" +
            "\x71F\x737\x5\xE8u\x2\x720\x722\a\xC4\x2\x2\x721\x723\a\xDC\x2\x2\x722" +
            "\x721\x3\x2\x2\x2\x722\x723\x3\x2\x2\x2\x723\x724\x3\x2\x2\x2\x724\x72F" +
            "\x5\xCA\x66\x2\x725\x727\a\xDC\x2\x2\x726\x725\x3\x2\x2\x2\x726\x727\x3" +
            "\x2\x2\x2\x727\x728\x3\x2\x2\x2\x728\x72A\a\t\x2\x2\x729\x72B\a\xDC\x2" +
            "\x2\x72A\x729\x3\x2\x2\x2\x72A\x72B\x3\x2\x2\x2\x72B\x72C\x3\x2\x2\x2" +
            "\x72C\x72E\x5\xCA\x66\x2\x72D\x726\x3\x2\x2\x2\x72E\x731\x3\x2\x2\x2\x72F" +
            "\x72D\x3\x2\x2\x2\x72F\x730\x3\x2\x2\x2\x730\x732\x3\x2\x2\x2\x731\x72F" +
            "\x3\x2\x2\x2\x732\x733\a\xCB\x2\x2\x733\x737\x3\x2\x2\x2\x734\x737\x5" +
            "\xC4\x63\x2\x735\x737\x5x=\x2\x736\x6FF\x3\x2\x2\x2\x736\x705\x3\x2\x2" +
            "\x2\x736\x70A\x3\x2\x2\x2\x736\x714\x3\x2\x2\x2\x736\x719\x3\x2\x2\x2" +
            "\x736\x71E\x3\x2\x2\x2\x736\x71F\x3\x2\x2\x2\x736\x720\x3\x2\x2\x2\x736" +
            "\x734\x3\x2\x2\x2\x736\x735\x3\x2\x2\x2\x737\x7A6\x3\x2\x2\x2\x738\x73A" +
            "\f\x10\x2\x2\x739\x73B\a\xDC\x2\x2\x73A\x739\x3\x2\x2\x2\x73A\x73B\x3" +
            "\x2\x2\x2\x73B\x73C\x3\x2\x2\x2\x73C\x73E\a\xCA\x2\x2\x73D\x73F\a\xDC" +
            "\x2\x2\x73E\x73D\x3\x2\x2\x2\x73E\x73F\x3\x2\x2\x2\x73F\x740\x3\x2\x2" +
            "\x2\x740\x7A5\x5\xCA\x66\x11\x741\x743\f\xE\x2\x2\x742\x744\a\xDC\x2\x2" +
            "\x743\x742\x3\x2\x2\x2\x743\x744\x3\x2\x2\x2\x744\x745\x3\x2\x2\x2\x745" +
            "\x747\t\f\x2\x2\x746\x748\a\xDC\x2\x2\x747\x746\x3\x2\x2\x2\x747\x748" +
            "\x3\x2\x2\x2\x748\x749\x3\x2\x2\x2\x749\x7A5\x5\xCA\x66\xF\x74A\x74C\f" +
            "\r\x2\x2\x74B\x74D\a\xDC\x2\x2\x74C\x74B\x3\x2\x2\x2\x74C\x74D\x3\x2\x2" +
            "\x2\x74D\x74E\x3\x2\x2\x2\x74E\x750\a\xBF\x2\x2\x74F\x751\a\xDC\x2\x2" +
            "\x750\x74F\x3\x2\x2\x2\x750\x751\x3\x2\x2\x2\x751\x752\x3\x2\x2\x2\x752" +
            "\x7A5\x5\xCA\x66\xE\x753\x755\f\f\x2\x2\x754\x756\a\xDC\x2\x2\x755\x754" +
            "\x3\x2\x2\x2\x755\x756\x3\x2\x2\x2\x756\x757\x3\x2\x2\x2\x757\x759\aq" +
            "\x2\x2\x758\x75A\a\xDC\x2\x2\x759\x758\x3\x2\x2\x2\x759\x75A\x3\x2\x2" +
            "\x2\x75A\x75B\x3\x2\x2\x2\x75B\x7A5\x5\xCA\x66\r\x75C\x75E\f\v\x2\x2\x75D" +
            "\x75F\a\xDC\x2\x2\x75E\x75D\x3\x2\x2\x2\x75E\x75F\x3\x2\x2\x2\x75F\x760" +
            "\x3\x2\x2\x2\x760\x762\t\r\x2\x2\x761\x763\a\xDC\x2\x2\x762\x761\x3\x2" +
            "\x2\x2\x762\x763\x3\x2\x2\x2\x763\x764\x3\x2\x2\x2\x764\x7A5\x5\xCA\x66" +
            "\f\x765\x767\f\n\x2\x2\x766\x768\a\xDC\x2\x2\x767\x766\x3\x2\x2\x2\x767" +
            "\x768\x3\x2\x2\x2\x768\x769\x3\x2\x2\x2\x769\x76B\a\xBC\x2\x2\x76A\x76C" +
            "\a\xDC\x2\x2\x76B\x76A\x3\x2\x2\x2\x76B\x76C\x3\x2\x2\x2\x76C\x76D\x3" +
            "\x2\x2\x2\x76D\x7A5\x5\xCA\x66\v\x76E\x770\f\t\x2\x2\x76F\x771\a\xDC\x2" +
            "\x2\x770\x76F\x3\x2\x2\x2\x770\x771\x3\x2\x2\x2\x771\x772\x3\x2\x2\x2" +
            "\x772\x774\t\xE\x2\x2\x773\x775\a\xDC\x2\x2\x774\x773\x3\x2\x2\x2\x774" +
            "\x775\x3\x2\x2\x2\x775\x776\x3\x2\x2\x2\x776\x7A5\x5\xCA\x66\n\x777\x779" +
            "\f\a\x2\x2\x778\x77A\a\xDC\x2\x2\x779\x778\x3\x2\x2\x2\x779\x77A\x3\x2" +
            "\x2\x2\x77A\x77B\x3\x2\x2\x2\x77B\x77D\a\xE\x2\x2\x77C\x77E\a\xDC\x2\x2" +
            "\x77D\x77C\x3\x2\x2\x2\x77D\x77E\x3\x2\x2\x2\x77E\x77F\x3\x2\x2\x2\x77F" +
            "\x7A5\x5\xCA\x66\b\x780\x782\f\x6\x2\x2\x781\x783\a\xDC\x2\x2\x782\x781" +
            "\x3\x2\x2\x2\x782\x783\x3\x2\x2\x2\x783\x784\x3\x2\x2\x2\x784\x786\a\x81" +
            "\x2\x2\x785\x787\a\xDC\x2\x2\x786\x785\x3\x2\x2\x2\x786\x787\x3\x2\x2" +
            "\x2\x787\x788\x3\x2\x2\x2\x788\x7A5\x5\xCA\x66\a\x789\x78B\f\x5\x2\x2" +
            "\x78A\x78C\a\xDC\x2\x2\x78B\x78A\x3\x2\x2\x2\x78B\x78C\x3\x2\x2\x2\x78C" +
            "\x78D\x3\x2\x2\x2\x78D\x78F\a\xBB\x2\x2\x78E\x790\a\xDC\x2\x2\x78F\x78E" +
            "\x3\x2\x2\x2\x78F\x790\x3\x2\x2\x2\x790\x791\x3\x2\x2\x2\x791\x7A5\x5" +
            "\xCA\x66\x6\x792\x794\f\x4\x2\x2\x793\x795\a\xDC\x2\x2\x794\x793\x3\x2" +
            "\x2\x2\x794\x795\x3\x2\x2\x2\x795\x796\x3\x2\x2\x2\x796\x798\a\x42\x2" +
            "\x2\x797\x799\a\xDC\x2\x2\x798\x797\x3\x2\x2\x2\x798\x799\x3\x2\x2\x2" +
            "\x799\x79A\x3\x2\x2\x2\x79A\x7A5\x5\xCA\x66\x5\x79B\x79D\f\x3\x2\x2\x79C" +
            "\x79E\a\xDC\x2\x2\x79D\x79C\x3\x2\x2\x2\x79D\x79E\x3\x2\x2\x2\x79E\x79F" +
            "\x3\x2\x2\x2\x79F\x7A1\aU\x2\x2\x7A0\x7A2\a\xDC\x2\x2\x7A1\x7A0\x3\x2" +
            "\x2\x2\x7A1\x7A2\x3\x2\x2\x2\x7A2\x7A3\x3\x2\x2\x2\x7A3\x7A5\x5\xCA\x66" +
            "\x4\x7A4\x738\x3\x2\x2\x2\x7A4\x741\x3\x2\x2\x2\x7A4\x74A\x3\x2\x2\x2" +
            "\x7A4\x753\x3\x2\x2\x2\x7A4\x75C\x3\x2\x2\x2\x7A4\x765\x3\x2\x2\x2\x7A4" +
            "\x76E\x3\x2\x2\x2\x7A4\x777\x3\x2\x2\x2\x7A4\x780\x3\x2\x2\x2\x7A4\x789" +
            "\x3\x2\x2\x2\x7A4\x792\x3\x2\x2\x2\x7A4\x79B\x3\x2\x2\x2\x7A5\x7A8\x3" +
            "\x2\x2\x2\x7A6\x7A4\x3\x2\x2\x2\x7A6\x7A7\x3\x2\x2\x2\x7A7\xCB\x3\x2\x2" +
            "\x2\x7A8\x7A6\x3\x2\x2\x2\x7A9\x7AD\a\x32\x2\x2\x7AA\x7AD\a\xA3\x2\x2" +
            "\x7AB\x7AD\x5\x11C\x8F\x2\x7AC\x7A9\x3\x2\x2\x2\x7AC\x7AA\x3\x2\x2\x2" +
            "\x7AC\x7AB\x3\x2\x2\x2\x7AD\x7AE\x3\x2\x2\x2\x7AE\x7B1\a\xDC\x2\x2\x7AF" +
            "\x7B0\a\xB9\x2\x2\x7B0\x7B2\a\xDC\x2\x2\x7B1\x7AF\x3\x2\x2\x2\x7B1\x7B2" +
            "\x3\x2\x2\x2\x7B2\x7B3\x3\x2\x2\x2\x7B3\x7B4\x5\xCEh\x2\x7B4\xCD\x3\x2" +
            "\x2\x2\x7B5\x7C0\x5\xD0i\x2\x7B6\x7B8\a\xDC\x2\x2\x7B7\x7B6\x3\x2\x2\x2" +
            "\x7B7\x7B8\x3\x2\x2\x2\x7B8\x7B9\x3\x2\x2\x2\x7B9\x7BB\a\t\x2\x2\x7BA" +
            "\x7BC\a\xDC\x2\x2\x7BB\x7BA\x3\x2\x2\x2\x7BB\x7BC\x3\x2\x2\x2\x7BC\x7BD" +
            "\x3\x2\x2\x2\x7BD\x7BF\x5\xD0i\x2\x7BE\x7B7\x3\x2\x2\x2\x7BF\x7C2\x3\x2" +
            "\x2\x2\x7C0\x7BE\x3\x2\x2\x2\x7C0\x7C1\x3\x2\x2\x2\x7C1\xCF\x3\x2\x2\x2" +
            "\x7C2\x7C0\x3\x2\x2\x2\x7C3\x7D5\x5\x104\x83\x2\x7C4\x7C6\a\xDC\x2\x2" +
            "\x7C5\x7C4\x3\x2\x2\x2\x7C5\x7C6\x3\x2\x2\x2\x7C6\x7C7\x3\x2\x2\x2\x7C7" +
            "\x7C9\a\xC4\x2\x2\x7C8\x7CA\a\xDC\x2\x2\x7C9\x7C8\x3\x2\x2\x2\x7C9\x7CA" +
            "\x3\x2\x2\x2\x7CA\x7CF\x3\x2\x2\x2\x7CB\x7CD\x5\x100\x81\x2\x7CC\x7CE" +
            "\a\xDC\x2\x2\x7CD\x7CC\x3\x2\x2\x2\x7CD\x7CE\x3\x2\x2\x2\x7CE\x7D0\x3" +
            "\x2\x2\x2\x7CF\x7CB\x3\x2\x2\x2\x7CF\x7D0\x3\x2\x2\x2\x7D0\x7D1\x3\x2" +
            "\x2\x2\x7D1\x7D3\a\xCB\x2\x2\x7D2\x7D4\a\xDC\x2\x2\x7D3\x7D2\x3\x2\x2" +
            "\x2\x7D3\x7D4\x3\x2\x2\x2\x7D4\x7D6\x3\x2\x2\x2\x7D5\x7C5\x3\x2\x2\x2" +
            "\x7D5\x7D6\x3\x2\x2\x2\x7D6\x7D8\x3\x2\x2\x2\x7D7\x7D9\x5\x11A\x8E\x2" +
            "\x7D8\x7D7\x3\x2\x2\x2\x7D8\x7D9\x3\x2\x2\x2\x7D9\x7DC\x3\x2\x2\x2\x7DA" +
            "\x7DB\a\xDC\x2\x2\x7DB\x7DD\x5\x106\x84\x2\x7DC\x7DA\x3\x2\x2\x2\x7DC" +
            "\x7DD\x3\x2\x2\x2\x7DD\xD1\x3\x2\x2\x2\x7DE\x7DF\a\xB6\x2\x2\x7DF\x7E0" +
            "\a\xDC\x2\x2\x7E0\x7E1\x5\xCA\x66\x2\x7E1\x7E3\x5\x126\x94\x2\x7E2\x7E4" +
            "\x5\x1C\xF\x2\x7E3\x7E2\x3\x2\x2\x2\x7E3\x7E4\x3\x2\x2\x2\x7E4\x7E5\x3" +
            "\x2\x2\x2\x7E5\x7E6\a\xB5\x2\x2\x7E6\xD3\x3\x2\x2\x2\x7E7\x7E8\a\xB7\x2" +
            "\x2\x7E8\x7E9\a\xDC\x2\x2\x7E9\x7EB\x5\xDAn\x2\x7EA\x7EC\a\xDC\x2\x2\x7EB" +
            "\x7EA\x3\x2\x2\x2\x7EB\x7EC\x3\x2\x2\x2\x7EC\x7ED\x3\x2\x2\x2\x7ED\x7EF" +
            "\a\t\x2\x2\x7EE\x7F0\a\xDC\x2\x2\x7EF\x7EE\x3\x2\x2\x2\x7EF\x7F0\x3\x2" +
            "\x2\x2\x7F0\x7F1\x3\x2\x2\x2\x7F1\x7F2\x5\xCA\x66\x2\x7F2\xD5\x3\x2\x2" +
            "\x2\x7F3\x7F4\a\xB8\x2\x2\x7F4\x7F9\a\xDC\x2\x2\x7F5\x7FA\x5\xE8u\x2\x7F6" +
            "\x7F7\at\x2\x2\x7F7\x7F8\a\xDC\x2\x2\x7F8\x7FA\x5\x118\x8D\x2\x7F9\x7F5" +
            "\x3\x2\x2\x2\x7F9\x7F6\x3\x2\x2\x2\x7FA\x7FB\x3\x2\x2\x2\x7FB\x7FD\x5" +
            "\x126\x94\x2\x7FC\x7FE\x5\x1C\xF\x2\x7FD\x7FC\x3\x2\x2\x2\x7FD\x7FE\x3" +
            "\x2\x2\x2\x7FE\x7FF\x3\x2\x2\x2\x7FF\x800\a?\x2\x2\x800\xD7\x3\x2\x2\x2" +
            "\x801\x802\a\xBA\x2\x2\x802\x803\a\xDC\x2\x2\x803\x805\x5\xDAn\x2\x804" +
            "\x806\a\xDC\x2\x2\x805\x804\x3\x2\x2\x2\x805\x806\x3\x2\x2\x2\x806\x807" +
            "\x3\x2\x2\x2\x807\x80C\a\t\x2\x2\x808\x80A\a\xDC\x2\x2\x809\x808\x3\x2" +
            "\x2\x2\x809\x80A\x3\x2\x2\x2\x80A\x80B\x3\x2\x2\x2\x80B\x80D\x5\x86\x44" +
            "\x2\x80C\x809\x3\x2\x2\x2\x80C\x80D\x3\x2\x2\x2\x80D\xD9\x3\x2\x2\x2\x80E" +
            "\x810\a\x5\x2\x2\x80F\x80E\x3\x2\x2\x2\x80F\x810\x3\x2\x2\x2\x810\x811" +
            "\x3\x2\x2\x2\x811\x812\x5\xCA\x66\x2\x812\xDB\x3\x2\x2\x2\x813\x816\x5" +
            "\xDEp\x2\x814\x816\x5\xE0q\x2\x815\x813\x3\x2\x2\x2\x815\x814\x3\x2\x2" +
            "\x2\x816\xDD\x3\x2\x2\x2\x817\x818\a\x1A\x2\x2\x818\x819\a\xDC\x2\x2\x819" +
            "\x81B\x5\x104\x83\x2\x81A\x81C\x5\x11A\x8E\x2\x81B\x81A\x3\x2\x2\x2\x81B" +
            "\x81C\x3\x2\x2\x2\x81C\x82A\x3\x2\x2\x2\x81D\x81F\a\xDC\x2\x2\x81E\x81D" +
            "\x3\x2\x2\x2\x81E\x81F\x3\x2\x2\x2\x81F\x820\x3\x2\x2\x2\x820\x822\a\xC4" +
            "\x2\x2\x821\x823\a\xDC\x2\x2\x822\x821\x3\x2\x2\x2\x822\x823\x3\x2\x2" +
            "\x2\x823\x824\x3\x2\x2\x2\x824\x826\x5\xF4{\x2\x825\x827\a\xDC\x2\x2\x826" +
            "\x825\x3\x2\x2\x2\x826\x827\x3\x2\x2\x2\x827\x828\x3\x2\x2\x2\x828\x829" +
            "\a\xCB\x2\x2\x829\x82B\x3\x2\x2\x2\x82A\x81E\x3\x2\x2\x2\x82A\x82B\x3" +
            "\x2\x2\x2\x82B\x835\x3\x2\x2\x2\x82C\x82E\a\xDC\x2\x2\x82D\x82C\x3\x2" +
            "\x2\x2\x82D\x82E\x3\x2\x2\x2\x82E\x82F\x3\x2\x2\x2\x82F\x830\a\xC4\x2" +
            "\x2\x830\x831\x5\x100\x81\x2\x831\x832\a\xCB\x2\x2\x832\x834\x3\x2\x2" +
            "\x2\x833\x82D\x3\x2\x2\x2\x834\x837\x3\x2\x2\x2\x835\x833\x3\x2\x2\x2" +
            "\x835\x836\x3\x2\x2\x2\x836\xDF\x3\x2\x2\x2\x837\x835\x3\x2\x2\x2\x838" +
            "\x839\a\x1A\x2\x2\x839\x83B\a\xDC\x2\x2\x83A\x83C\x5\xE8u\x2\x83B\x83A" +
            "\x3\x2\x2\x2\x83B\x83C\x3\x2\x2\x2\x83C\x83D\x3\x2\x2\x2\x83D\x83E\a\n" +
            "\x2\x2\x83E\x840\x5\x104\x83\x2\x83F\x841\x5\x11A\x8E\x2\x840\x83F\x3" +
            "\x2\x2\x2\x840\x841\x3\x2\x2\x2\x841\x84F\x3\x2\x2\x2\x842\x844\a\xDC" +
            "\x2\x2\x843\x842\x3\x2\x2\x2\x843\x844\x3\x2\x2\x2\x844\x845\x3\x2\x2" +
            "\x2\x845\x847\a\xC4\x2\x2\x846\x848\a\xDC\x2\x2\x847\x846\x3\x2\x2\x2" +
            "\x847\x848\x3\x2\x2\x2\x848\x849\x3\x2\x2\x2\x849\x84B\x5\xF4{\x2\x84A" +
            "\x84C\a\xDC\x2\x2\x84B\x84A\x3\x2\x2\x2\x84B\x84C\x3\x2\x2\x2\x84C\x84D" +
            "\x3\x2\x2\x2\x84D\x84E\a\xCB\x2\x2\x84E\x850\x3\x2\x2\x2\x84F\x843\x3" +
            "\x2\x2\x2\x84F\x850\x3\x2\x2\x2\x850\x85A\x3\x2\x2\x2\x851\x853\a\xDC" +
            "\x2\x2\x852\x851\x3\x2\x2\x2\x852\x853\x3\x2\x2\x2\x853\x854\x3\x2\x2" +
            "\x2\x854\x855\a\xC4\x2\x2\x855\x856\x5\x100\x81\x2\x856\x857\a\xCB\x2" +
            "\x2\x857\x859\x3\x2\x2\x2\x858\x852\x3\x2\x2\x2\x859\x85C\x3\x2\x2\x2" +
            "\x85A\x858\x3\x2\x2\x2\x85A\x85B\x3\x2\x2\x2\x85B\xE1\x3\x2\x2\x2\x85C" +
            "\x85A\x3\x2\x2\x2\x85D\x860\x5\xE4s\x2\x85E\x860\x5\xE6t\x2\x85F\x85D" +
            "\x3\x2\x2\x2\x85F\x85E\x3\x2\x2\x2\x860\xE3\x3\x2\x2\x2\x861\x863\x5\xE8" +
            "u\x2\x862\x861\x3\x2\x2\x2\x862\x863\x3\x2\x2\x2\x863\x864\x3\x2\x2\x2" +
            "\x864\x865\a\n\x2\x2\x865\x867\x5\x104\x83\x2\x866\x868\x5\x11A\x8E\x2" +
            "\x867\x866\x3\x2\x2\x2\x867\x868\x3\x2\x2\x2\x868\x86B\x3\x2\x2\x2\x869" +
            "\x86A\a\xDC\x2\x2\x86A\x86C\x5\xF4{\x2\x86B\x869\x3\x2\x2\x2\x86B\x86C" +
            "\x3\x2\x2\x2\x86C\x86E\x3\x2\x2\x2\x86D\x86F\x5\xF8}\x2\x86E\x86D\x3\x2" +
            "\x2\x2\x86E\x86F\x3\x2\x2\x2\x86F\x879\x3\x2\x2\x2\x870\x872\a\xDC\x2" +
            "\x2\x871\x870\x3\x2\x2\x2\x871\x872\x3\x2\x2\x2\x872\x873\x3\x2\x2\x2" +
            "\x873\x874\a\xC4\x2\x2\x874\x875\x5\x100\x81\x2\x875\x876\a\xCB\x2\x2" +
            "\x876\x878\x3\x2\x2\x2\x877\x871\x3\x2\x2\x2\x878\x87B\x3\x2\x2\x2\x879" +
            "\x877\x3\x2\x2\x2\x879\x87A\x3\x2\x2\x2\x87A\xE5\x3\x2\x2\x2\x87B\x879" +
            "\x3\x2\x2\x2\x87C\x87F\x5\x10A\x86\x2\x87D\x87E\a\xDC\x2\x2\x87E\x880" +
            "\x5\xF4{\x2\x87F\x87D\x3\x2\x2\x2\x87F\x880\x3\x2\x2\x2\x880\x88A\x3\x2" +
            "\x2\x2\x881\x883\a\xDC\x2\x2\x882\x881\x3\x2\x2\x2\x882\x883\x3\x2\x2" +
            "\x2\x883\x884\x3\x2\x2\x2\x884\x885\a\xC4\x2\x2\x885\x886\x5\x100\x81" +
            "\x2\x886\x887\a\xCB\x2\x2\x887\x889\x3\x2\x2\x2\x888\x882\x3\x2\x2\x2" +
            "\x889\x88C\x3\x2\x2\x2\x88A\x888\x3\x2\x2\x2\x88A\x88B\x3\x2\x2\x2\x88B" +
            "\xE7\x3\x2\x2\x2\x88C\x88A\x3\x2\x2\x2\x88D\x892\x5\xEEx\x2\x88E\x892" +
            "\x5\xEAv\x2\x88F\x892\x5\xECw\x2\x890\x892\x5\xF2z\x2\x891\x88D\x3\x2" +
            "\x2\x2\x891\x88E\x3\x2\x2\x2\x891\x88F\x3\x2\x2\x2\x891\x890\x3\x2\x2" +
            "\x2\x892\xE9\x3\x2\x2\x2\x893\x895\x5\x104\x83\x2\x894\x896\x5\x11A\x8E" +
            "\x2\x895\x894\x3\x2\x2\x2\x895\x896\x3\x2\x2\x2\x896\x898\x3\x2\x2\x2" +
            "\x897\x899\x5\xF8}\x2\x898\x897\x3\x2\x2\x2\x898\x899\x3\x2\x2\x2\x899" +
            "\x8A3\x3\x2\x2\x2\x89A\x89C\a\xDC\x2\x2\x89B\x89A\x3\x2\x2\x2\x89B\x89C" +
            "\x3\x2\x2\x2\x89C\x89D\x3\x2\x2\x2\x89D\x89E\a\xC4\x2\x2\x89E\x89F\x5" +
            "\x100\x81\x2\x89F\x8A0\a\xCB\x2\x2\x8A0\x8A2\x3\x2\x2\x2\x8A1\x89B\x3" +
            "\x2\x2\x2\x8A2\x8A5\x3\x2\x2\x2\x8A3\x8A1\x3\x2\x2\x2\x8A3\x8A4\x3\x2" +
            "\x2\x2\x8A4\xEB\x3\x2\x2\x2\x8A5\x8A3\x3\x2\x2\x2\x8A6\x8A9\x5\x104\x83" +
            "\x2\x8A7\x8A9\x5\x108\x85\x2\x8A8\x8A6\x3\x2\x2\x2\x8A8\x8A7\x3\x2\x2" +
            "\x2\x8A9\x8AB\x3\x2\x2\x2\x8AA\x8AC\x5\x11A\x8E\x2\x8AB\x8AA\x3\x2\x2" +
            "\x2\x8AB\x8AC\x3\x2\x2\x2\x8AC\x8AE\x3\x2\x2\x2\x8AD\x8AF\a\xDC\x2\x2" +
            "\x8AE\x8AD\x3\x2\x2\x2\x8AE\x8AF\x3\x2\x2\x2\x8AF\x8B0\x3\x2\x2\x2\x8B0" +
            "\x8B2\a\xC4\x2\x2\x8B1\x8B3\a\xDC\x2\x2\x8B2\x8B1\x3\x2\x2\x2\x8B2\x8B3" +
            "\x3\x2\x2\x2\x8B3\x8B8\x3\x2\x2\x2\x8B4\x8B6\x5\xF4{\x2\x8B5\x8B7\a\xDC" +
            "\x2\x2\x8B6\x8B5\x3\x2\x2\x2\x8B6\x8B7\x3\x2\x2\x2\x8B7\x8B9\x3\x2\x2" +
            "\x2\x8B8\x8B4\x3\x2\x2\x2\x8B8\x8B9\x3\x2\x2\x2\x8B9\x8BA\x3\x2\x2\x2" +
            "\x8BA\x8BC\a\xCB\x2\x2\x8BB\x8BD\x5\xF8}\x2\x8BC\x8BB\x3\x2\x2\x2\x8BC" +
            "\x8BD\x3\x2\x2\x2\x8BD\x8C7\x3\x2\x2\x2\x8BE\x8C0\a\xDC\x2\x2\x8BF\x8BE" +
            "\x3\x2\x2\x2\x8BF\x8C0\x3\x2\x2\x2\x8C0\x8C1\x3\x2\x2\x2\x8C1\x8C2\a\xC4" +
            "\x2\x2\x8C2\x8C3\x5\x100\x81\x2\x8C3\x8C4\a\xCB\x2\x2\x8C4\x8C6\x3\x2" +
            "\x2\x2\x8C5\x8BF\x3\x2\x2\x2\x8C6\x8C9\x3\x2\x2\x2\x8C7\x8C5\x3\x2\x2" +
            "\x2\x8C7\x8C8\x3\x2\x2\x2\x8C8\xED\x3\x2\x2\x2\x8C9\x8C7\x3\x2\x2\x2\x8CA" +
            "\x8CD\x5\xEAv\x2\x8CB\x8CD\x5\xECw\x2\x8CC\x8CA\x3\x2\x2\x2\x8CC\x8CB" +
            "\x3\x2\x2\x2\x8CC\x8CD\x3\x2\x2\x2\x8CD\x8CF\x3\x2\x2\x2\x8CE\x8D0\x5" +
            "\xF0y\x2\x8CF\x8CE\x3\x2\x2\x2\x8D0\x8D1\x3\x2\x2\x2\x8D1\x8CF\x3\x2\x2" +
            "\x2\x8D1\x8D2\x3\x2\x2\x2\x8D2\x8D4\x3\x2\x2\x2\x8D3\x8D5\x5\xF8}\x2\x8D4" +
            "\x8D3\x3\x2\x2\x2\x8D4\x8D5\x3\x2\x2\x2\x8D5\x8DF\x3\x2\x2\x2\x8D6\x8D8" +
            "\a\xDC\x2\x2\x8D7\x8D6\x3\x2\x2\x2\x8D7\x8D8\x3\x2\x2\x2\x8D8\x8D9\x3" +
            "\x2\x2\x2\x8D9\x8DA\a\xC4\x2\x2\x8DA\x8DB\x5\x100\x81\x2\x8DB\x8DC\a\xCB" +
            "\x2\x2\x8DC\x8DE\x3\x2\x2\x2\x8DD\x8D7\x3\x2\x2\x2\x8DE\x8E1\x3\x2\x2" +
            "\x2\x8DF\x8DD\x3\x2\x2\x2\x8DF\x8E0\x3\x2\x2\x2\x8E0\xEF\x3\x2\x2\x2\x8E1" +
            "\x8DF\x3\x2\x2\x2\x8E2\x8E5\t\xF\x2\x2\x8E3\x8E6\x5\xEAv\x2\x8E4\x8E6" +
            "\x5\xECw\x2\x8E5\x8E3\x3\x2\x2\x2\x8E5\x8E4\x3\x2\x2\x2\x8E6\xF1\x3\x2" +
            "\x2\x2\x8E7\x8E8\x5\xF8}\x2\x8E8\xF3\x3\x2\x2\x2\x8E9\x8EB\x5\xF6|\x2" +
            "\x8EA\x8E9\x3\x2\x2\x2\x8EA\x8EB\x3\x2\x2\x2\x8EB\x8ED\x3\x2\x2\x2\x8EC" +
            "\x8EE\a\xDC\x2\x2\x8ED\x8EC\x3\x2\x2\x2\x8ED\x8EE\x3\x2\x2\x2\x8EE\x8EF" +
            "\x3\x2\x2\x2\x8EF\x8F1\t\n\x2\x2\x8F0\x8F2\a\xDC\x2\x2\x8F1\x8F0\x3\x2" +
            "\x2\x2\x8F1\x8F2\x3\x2\x2\x2\x8F2\x8F4\x3\x2\x2\x2\x8F3\x8EA\x3\x2\x2" +
            "\x2\x8F4\x8F7\x3\x2\x2\x2\x8F5\x8F3\x3\x2\x2\x2\x8F5\x8F6\x3\x2\x2\x2" +
            "\x8F6\x8F8\x3\x2\x2\x2\x8F7\x8F5\x3\x2\x2\x2\x8F8\x905\x5\xF6|\x2\x8F9" +
            "\x8FB\a\xDC\x2\x2\x8FA\x8F9\x3\x2\x2\x2\x8FA\x8FB\x3\x2\x2\x2\x8FB\x8FC" +
            "\x3\x2\x2\x2\x8FC\x8FE\t\n\x2\x2\x8FD\x8FF\a\xDC\x2\x2\x8FE\x8FD\x3\x2" +
            "\x2\x2\x8FE\x8FF\x3\x2\x2\x2\x8FF\x901\x3\x2\x2\x2\x900\x902\x5\xF6|\x2" +
            "\x901\x900\x3\x2\x2\x2\x901\x902\x3\x2\x2\x2\x902\x904\x3\x2\x2\x2\x903" +
            "\x8FA\x3\x2\x2\x2\x904\x907\x3\x2\x2\x2\x905\x903\x3\x2\x2\x2\x905\x906" +
            "\x3\x2\x2\x2\x906\xF5\x3\x2\x2\x2\x907\x905\x3\x2\x2\x2\x908\x90A\a\xC4" +
            "\x2\x2\x909\x908\x3\x2\x2\x2\x909\x90A\x3\x2\x2\x2\x90A\x90D\x3\x2\x2" +
            "\x2\x90B\x90C\t\x10\x2\x2\x90C\x90E\a\xDC\x2\x2\x90D\x90B\x3\x2\x2\x2" +
            "\x90D\x90E\x3\x2\x2\x2\x90E\x910\x3\x2\x2\x2\x90F\x911\a\xCB\x2\x2\x910" +
            "\x90F\x3\x2\x2\x2\x910\x911\x3\x2\x2\x2\x911\x912\x3\x2\x2\x2\x912\x913" +
            "\x5\xCA\x66\x2\x913\xF7\x3\x2\x2\x2\x914\x915\a\x4\x2\x2\x915\x917\x5" +
            "\x104\x83\x2\x916\x918\x5\x11A\x8E\x2\x917\x916\x3\x2\x2\x2\x917\x918" +
            "\x3\x2\x2\x2\x918\xF9\x3\x2\x2\x2\x919\x92B\a\xC4\x2\x2\x91A\x91C\a\xDC" +
            "\x2\x2\x91B\x91A\x3\x2\x2\x2\x91B\x91C\x3\x2\x2\x2\x91C\x91D\x3\x2\x2" +
            "\x2\x91D\x928\x5\xFC\x7F\x2\x91E\x920\a\xDC\x2\x2\x91F\x91E\x3\x2\x2\x2" +
            "\x91F\x920\x3\x2\x2\x2\x920\x921\x3\x2\x2\x2\x921\x923\a\t\x2\x2\x922" +
            "\x924\a\xDC\x2\x2\x923\x922\x3\x2\x2\x2\x923\x924\x3\x2\x2\x2\x924\x925" +
            "\x3\x2\x2\x2\x925\x927\x5\xFC\x7F\x2\x926\x91F\x3\x2\x2\x2\x927\x92A\x3" +
            "\x2\x2\x2\x928\x926\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2\x929\x92C\x3\x2" +
            "\x2\x2\x92A\x928\x3\x2\x2\x2\x92B\x91B\x3\x2\x2\x2\x92B\x92C\x3\x2\x2" +
            "\x2\x92C\x92E\x3\x2\x2\x2\x92D\x92F\a\xDC\x2\x2\x92E\x92D\x3\x2\x2\x2" +
            "\x92E\x92F\x3\x2\x2\x2\x92F\x930\x3\x2\x2\x2\x930\x931\a\xCB\x2\x2\x931" +
            "\xFB\x3\x2\x2\x2\x932\x933\a|\x2\x2\x933\x935\a\xDC\x2\x2\x934\x932\x3" +
            "\x2\x2\x2\x934\x935\x3\x2\x2\x2\x935\x938\x3\x2\x2\x2\x936\x937\t\x11" +
            "\x2\x2\x937\x939\a\xDC\x2\x2\x938\x936\x3\x2\x2\x2\x938\x939\x3\x2\x2" +
            "\x2\x939\x93C\x3\x2\x2\x2\x93A\x93B\a\x83\x2\x2\x93B\x93D\a\xDC\x2\x2" +
            "\x93C\x93A\x3\x2\x2\x2\x93C\x93D\x3\x2\x2\x2\x93D\x93E\x3\x2\x2\x2\x93E" +
            "\x940\x5\x104\x83\x2\x93F\x941\x5\x11A\x8E\x2\x940\x93F\x3\x2\x2\x2\x940" +
            "\x941\x3\x2\x2\x2\x941\x94A\x3\x2\x2\x2\x942\x944\a\xDC\x2\x2\x943\x942" +
            "\x3\x2\x2\x2\x943\x944\x3\x2\x2\x2\x944\x945\x3\x2\x2\x2\x945\x947\a\xC4" +
            "\x2\x2\x946\x948\a\xDC\x2\x2\x947\x946\x3\x2\x2\x2\x947\x948\x3\x2\x2" +
            "\x2\x948\x949\x3\x2\x2\x2\x949\x94B\a\xCB\x2\x2\x94A\x943\x3\x2\x2\x2" +
            "\x94A\x94B\x3\x2\x2\x2\x94B\x950\x3\x2\x2\x2\x94C\x94E\a\xDC\x2\x2\x94D" +
            "\x94C\x3\x2\x2\x2\x94D\x94E\x3\x2\x2\x2\x94E\x94F\x3\x2\x2\x2\x94F\x951" +
            "\x5\x106\x84\x2\x950\x94D\x3\x2\x2\x2\x950\x951\x3\x2\x2\x2\x951\x956" +
            "\x3\x2\x2\x2\x952\x954\a\xDC\x2\x2\x953\x952\x3\x2\x2\x2\x953\x954\x3" +
            "\x2\x2\x2\x954\x955\x3\x2\x2\x2\x955\x957\x5\xFE\x80\x2\x956\x953\x3\x2" +
            "\x2\x2\x956\x957\x3\x2\x2\x2\x957\xFD\x3\x2\x2\x2\x958\x95A\a\xC0\x2\x2" +
            "\x959\x95B\a\xDC\x2\x2\x95A\x959\x3\x2\x2\x2\x95A\x95B\x3\x2\x2\x2\x95B" +
            "\x95C\x3\x2\x2\x2\x95C\x95D\x5\xCA\x66\x2\x95D\xFF\x3\x2\x2\x2\x95E\x969" +
            "\x5\x102\x82\x2\x95F\x961\a\xDC\x2\x2\x960\x95F\x3\x2\x2\x2\x960\x961" +
            "\x3\x2\x2\x2\x961\x962\x3\x2\x2\x2\x962\x964\a\t\x2\x2\x963\x965\a\xDC" +
            "\x2\x2\x964\x963\x3\x2\x2\x2\x964\x965\x3\x2\x2\x2\x965\x966\x3\x2\x2" +
            "\x2\x966\x968\x5\x102\x82\x2\x967\x960\x3\x2\x2\x2\x968\x96B\x3\x2\x2" +
            "\x2\x969\x967\x3\x2\x2\x2\x969\x96A\x3\x2\x2\x2\x96A\x101\x3\x2\x2\x2" +
            "\x96B\x969\x3\x2\x2\x2\x96C\x96D\x5\xCA\x66\x2\x96D\x96E\a\xDC\x2\x2\x96E" +
            "\x96F\a\xAC\x2\x2\x96F\x970\a\xDC\x2\x2\x970\x972\x3\x2\x2\x2\x971\x96C" +
            "\x3\x2\x2\x2\x971\x972\x3\x2\x2\x2\x972\x973\x3\x2\x2\x2\x973\x974\x5" +
            "\xCA\x66\x2\x974\x103\x3\x2\x2\x2\x975\x978\a\xDD\x2\x2\x976\x978\x5\x11E" +
            "\x90\x2\x977\x975\x3\x2\x2\x2\x977\x976\x3\x2\x2\x2\x978\x979\x3\x2\x2" +
            "\x2\x979\x977\x3\x2\x2\x2\x979\x97A\x3\x2\x2\x2\x97A\x105\x3\x2\x2\x2" +
            "\x97B\x97D\a\x12\x2\x2\x97C\x97E\a\xDC\x2\x2\x97D\x97C\x3\x2\x2\x2\x97D" +
            "\x97E\x3\x2\x2\x2\x97E\x981\x3\x2\x2\x2\x97F\x980\at\x2\x2\x980\x982\a" +
            "\xDC\x2\x2\x981\x97F\x3\x2\x2\x2\x981\x982\x3\x2\x2\x2\x982\x983\x3\x2" +
            "\x2\x2\x983\x988\x5\x118\x8D\x2\x984\x986\a\xDC\x2\x2\x985\x984\x3\x2" +
            "\x2\x2\x985\x986\x3\x2\x2\x2\x986\x987\x3\x2\x2\x2\x987\x989\x5\x110\x89" +
            "\x2\x988\x985\x3\x2\x2\x2\x988\x989\x3\x2\x2\x2\x989\x107\x3\x2\x2\x2" +
            "\x98A\x98B\t\x12\x2\x2\x98B\x109\x3\x2\x2\x2\x98C\x991\a\xDD\x2\x2\x98D" +
            "\x990\x5\x11E\x90\x2\x98E\x990\a\xDD\x2\x2\x98F\x98D\x3\x2\x2\x2\x98F" +
            "\x98E\x3\x2\x2\x2\x990\x993\x3\x2\x2\x2\x991\x98F\x3\x2\x2\x2\x991\x992" +
            "\x3\x2\x2\x2\x992\x99C\x3\x2\x2\x2\x993\x991\x3\x2\x2\x2\x994\x997\x5" +
            "\x11E\x90\x2\x995\x998\x5\x11E\x90\x2\x996\x998\a\xDD\x2\x2\x997\x995" +
            "\x3\x2\x2\x2\x997\x996\x3\x2\x2\x2\x998\x999\x3\x2\x2\x2\x999\x997\x3" +
            "\x2\x2\x2\x999\x99A\x3\x2\x2\x2\x99A\x99C\x3\x2\x2\x2\x99B\x98C\x3\x2" +
            "\x2\x2\x99B\x994\x3\x2\x2\x2\x99C\x10B\x3\x2\x2\x2\x99D\x99E\t\xE\x2\x2" +
            "\x99E\x10D\x3\x2\x2\x2\x99F\x9A4\x5\x104\x83\x2\x9A0\x9A1\t\xF\x2\x2\x9A1" +
            "\x9A3\x5\x104\x83\x2\x9A2\x9A0\x3\x2\x2\x2\x9A3\x9A6\x3\x2\x2\x2\x9A4" +
            "\x9A2\x3\x2\x2\x2\x9A4\x9A5\x3\x2\x2\x2\x9A5\x10F\x3\x2\x2\x2\x9A6\x9A4" +
            "\x3\x2\x2\x2\x9A7\x9A9\a\xC7\x2\x2\x9A8\x9AA\a\xDC\x2\x2\x9A9\x9A8\x3" +
            "\x2\x2\x2\x9A9\x9AA\x3\x2\x2\x2\x9AA\x9AD\x3\x2\x2\x2\x9AB\x9AE\a\xD2" +
            "\x2\x2\x9AC\x9AE\x5\x104\x83\x2\x9AD\x9AB\x3\x2\x2\x2\x9AD\x9AC\x3\x2" +
            "\x2\x2\x9AE\x111\x3\x2\x2\x2\x9AF\x9B8\x5\x10A\x86\x2\x9B0\x9B2\a\xDC" +
            "\x2\x2\x9B1\x9B0\x3\x2\x2\x2\x9B1\x9B2\x3\x2\x2\x2\x9B2\x9B3\x3\x2\x2" +
            "\x2\x9B3\x9B5\a\xC6\x2\x2\x9B4\x9B6\a\xDC\x2\x2\x9B5\x9B4\x3\x2\x2\x2" +
            "\x9B5\x9B6\x3\x2\x2\x2\x9B6\x9B7\x3\x2\x2\x2\x9B7\x9B9\x5\x10A\x86\x2" +
            "\x9B8\x9B1\x3\x2\x2\x2\x9B8\x9B9\x3\x2\x2\x2\x9B9\x113\x3\x2\x2\x2\x9BA" +
            "\x9BB\x5\x104\x83\x2\x9BB\x9BC\a\xDA\x2\x2\x9BC\x115\x3\x2\x2\x2\x9BD" +
            "\x9BE\t\x13\x2\x2\x9BE\x117\x3\x2\x2\x2\x9BF\x9C2\x5\x108\x85\x2\x9C0" +
            "\x9C2\x5\x10E\x88\x2\x9C1\x9BF\x3\x2\x2\x2\x9C1\x9C0\x3\x2\x2\x2\x9C2" +
            "\x9CB\x3\x2\x2\x2\x9C3\x9C5\a\xDC\x2\x2\x9C4\x9C3\x3\x2\x2\x2\x9C4\x9C5" +
            "\x3\x2\x2\x2\x9C5\x9C6\x3\x2\x2\x2\x9C6\x9C8\a\xC4\x2\x2\x9C7\x9C9\a\xDC" +
            "\x2\x2\x9C8\x9C7\x3\x2\x2\x2\x9C8\x9C9\x3\x2\x2\x2\x9C9\x9CA\x3\x2\x2" +
            "\x2\x9CA\x9CC\a\xCB\x2\x2\x9CB\x9C4\x3\x2\x2\x2\x9CB\x9CC\x3\x2\x2\x2" +
            "\x9CC\x119\x3\x2\x2\x2\x9CD\x9CE\t\x14\x2\x2\x9CE\x11B\x3\x2\x2\x2\x9CF" +
            "\x9D0\t\x15\x2\x2\x9D0\x11D\x3\x2\x2\x2\x9D1\x9D2\t\x16\x2\x2\x9D2\x11F" +
            "\x3\x2\x2\x2\x9D3\x9D4\a\xD7\x2\x2\x9D4\x121\x3\x2\x2\x2\x9D5\x9D6\a\xD8" +
            "\x2\x2\x9D6\x123\x3\x2\x2\x2\x9D7\x9D9\a\xDC\x2\x2\x9D8\x9D7\x3\x2\x2" +
            "\x2\x9D8\x9D9\x3\x2\x2\x2\x9D9\x9DD\x3\x2\x2\x2\x9DA\x9DE\a\xD6\x2\x2" +
            "\x9DB\x9DE\x5\x122\x92\x2\x9DC\x9DE\x5\x120\x91\x2\x9DD\x9DA\x3\x2\x2" +
            "\x2\x9DD\x9DB\x3\x2\x2\x2\x9DD\x9DC\x3\x2\x2\x2\x9DE\x9E0\x3\x2\x2\x2" +
            "\x9DF\x9E1\a\xDC\x2\x2\x9E0\x9DF\x3\x2\x2\x2\x9E0\x9E1\x3\x2\x2\x2\x9E1" +
            "\x125\x3\x2\x2\x2\x9E2\x9EB\x5\x124\x93\x2\x9E3\x9E5\a\xDC\x2\x2\x9E4" +
            "\x9E3\x3\x2\x2\x2\x9E4\x9E5\x3\x2\x2\x2\x9E5\x9E6\x3\x2\x2\x2\x9E6\x9E8" +
            "\a\xDA\x2\x2\x9E7\x9E9\a\xDC\x2\x2\x9E8\x9E7\x3\x2\x2\x2\x9E8\x9E9\x3" +
            "\x2\x2\x2\x9E9\x9EB\x3\x2\x2\x2\x9EA\x9E2\x3\x2\x2\x2\x9EA\x9E4\x3\x2" +
            "\x2\x2\x9EB\x9EE\x3\x2\x2\x2\x9EC\x9EA\x3\x2\x2\x2\x9EC\x9ED\x3\x2\x2" +
            "\x2\x9ED\x127\x3\x2\x2\x2\x9EE\x9EC\x3\x2\x2\x2\x1AE\x12C\x131\x138\x13B" +
            "\x13E\x143\x147\x14C\x150\x155\x159\x15E\x162\x16E\x174\x17A\x17E\x184" +
            "\x18B\x18F\x195\x19B\x1A1\x1AC\x1B8\x1BC\x1C2\x1C8\x1CE\x1D7\x1DD\x1E1" +
            "\x1E5\x1E9\x1EE\x1F7\x23F\x245\x249\x24C\x25C\x260\x265\x268\x26D\x273" +
            "\x277\x27C\x281\x285\x288\x28C\x292\x296\x29D\x2A3\x2A7\x2AA\x2AF\x2B9" +
            "\x2BC\x2BF\x2C3\x2C9\x2CD\x2D2\x2D9\x2DD\x2E1\x2E5\x2E8\x2ED\x2F8\x305" +
            "\x30C\x315\x31C\x320\x323\x332\x338\x342\x346\x350\x358\x35D\x363\x367" +
            "\x36A\x36E\x379\x37D\x382\x387\x38B\x38F\x393\x396\x399\x39C\x39F\x3A3" +
            "\x3AB\x3AF\x3B2\x3B5\x3B9\x3D0\x3D6\x3DA\x3DE\x3E7\x3F2\x3F7\x401\x405" +
            "\x40A\x412\x416\x41A\x422\x426\x432\x436\x43D\x43F\x445\x449\x44F\x453" +
            "\x457\x45F\x463\x469\x472\x474\x479\x482\x484\x48C\x48E\x493\x497\x49B" +
            "\x4B3\x4BD\x4C1\x4C6\x4D1\x4D5\x4DA\x4E8\x4EC\x4F5\x4F9\x4FC\x500\x504" +
            "\x507\x50B\x50F\x512\x516\x519\x51D\x51F\x524\x528\x52C\x530\x532\x538" +
            "\x53C\x53F\x544\x548\x54E\x551\x554\x558\x55C\x563\x567\x56D\x570\x574" +
            "\x57B\x57F\x585\x588\x58C\x594\x598\x59B\x59E\x5A2\x5AA\x5AE\x5B2\x5B4" +
            "\x5B7\x5BC\x5C2\x5C6\x5CA\x5CF\x5D4\x5D8\x5DC\x5E1\x5E9\x5EB\x5F7\x5FB" +
            "\x603\x607\x60F\x613\x617\x61B\x61F\x623\x62B\x62F\x63C\x643\x647\x652" +
            "\x659\x65E\x662\x667\x66A\x670\x674\x677\x67D\x681\x689\x68D\x696\x69A" +
            "\x69E\x6A2\x6A5\x6A9\x6AF\x6B3\x6BA\x6C3\x6CA\x6CE\x6D1\x6D4\x6D7\x6DB" +
            "\x6E6\x6F0\x6F4\x6FB\x6FD\x702\x707\x70C\x710\x716\x71B\x722\x726\x72A" +
            "\x72F\x736\x73A\x73E\x743\x747\x74C\x750\x755\x759\x75E\x762\x767\x76B" +
            "\x770\x774\x779\x77D\x782\x786\x78B\x78F\x794\x798\x79D\x7A1\x7A4\x7A6" +
            "\x7AC\x7B1\x7B7\x7BB\x7C0\x7C5\x7C9\x7CD\x7CF\x7D3\x7D5\x7D8\x7DC\x7E3" +
            "\x7EB\x7EF\x7F9\x7FD\x805\x809\x80C\x80F\x815\x81B\x81E\x822\x826\x82A" +
            "\x82D\x835\x83B\x840\x843\x847\x84B\x84F\x852\x85A\x85F\x862\x867\x86B" +
            "\x86E\x871\x879\x87F\x882\x88A\x891\x895\x898\x89B\x8A3\x8A8\x8AB\x8AE" +
            "\x8B2\x8B6\x8B8\x8BC\x8BF\x8C7\x8CC\x8D1\x8D4\x8D7\x8DF\x8E5\x8EA\x8ED" +
            "\x8F1\x8F5\x8FA\x8FE\x901\x905\x909\x90D\x910\x917\x91B\x91F\x923\x928" +
            "\x92B\x92E\x934\x938\x93C\x940\x943\x947\x94A\x94D\x950\x953\x956\x95A" +
            "\x960\x964\x969\x971\x977\x979\x97D\x981\x985\x988\x98F\x991\x997\x999" +
            "\x99B\x9A4\x9A9\x9AD\x9B1\x9B5\x9B8\x9C1\x9C4\x9C8\x9CB\x9D8\x9DD\x9E0" +
            "\x9E4\x9E8\x9EA\x9EC";
        public static readonly ATN _ATN =
            new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
    }
} // namespace Rubberduck.Parsing.Grammar
