//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\RubberduckParserTest\RubberduckParserTest\VBAParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		PRINT=157, ELSEIF=88, CBYTE=5, CLOSE=65, STATIC=181, MINUS=213, OPTION_EXPLICIT=150, 
		L_SQUARE_BRACKET=219, DOEVENTS=21, DATELITERAL=226, ERROR=102, NOTHING=141, 
		EACH=86, SUB=185, STOP=183, LPAREN=211, MID=136, CVERR=19, AS=55, END_PROPERTY=93, 
		AT=45, DATABASE=67, GOSUB=115, CSNG=15, POW=217, DOLLAR=47, PROPERTY_LET=160, 
		THEN=188, XOR=203, EXIT_FOR=105, DEFINT=75, UNLOCK=193, CALL=62, LOCK_READ=131, 
		SET=177, LOCK_READ_WRITE=133, ABS=1, LSET=134, RAISEEVENT=166, MIDBTYPESUFFIX=32, 
		SEEK=175, LONG=125, CBOOL=4, LIB=128, DIM=83, APPEND=54, OPEN=147, DIV=205, 
		PROPERTY_SET=161, CDBL=8, PERCENT=46, END_SELECT=94, STRING=184, SGN=37, 
		REM=170, TO=189, DEFDBL=73, BYVAL=59, FRIEND=110, LOOP=126, CLASS=64, 
		DO=84, VARIANT=195, END_WITH=97, DEFBOOL=70, OPTIONAL=148, ADDRESSOF=50, 
		CONST=66, RSET=174, INTEGER=123, CDEC=9, ATTRIBUTE=53, OUTPUT=154, FOR=111, 
		PTRSAFE=162, EQ=207, BOOLEAN=58, CIRCLE=11, END_FUNCTION=91, DEFSNG=80, 
		DEFBYTE=71, NOT=140, CINT=10, END=98, PRESERVE=156, ON_LOCAL_ERROR=146, 
		FLOATLITERAL=224, BINARY=57, LENB=28, RETURN=173, EXCLAMATIONPOINT=42, 
		NEXT=138, GLOBAL=114, INPUTB=24, IDENTIFIER=232, WS=230, EMPTY=89, CURRENCY=17, 
		CCUR=6, MOD=137, WITHEVENTS=201, COLON=40, DEFLNGLNG=77, STEP=182, OPTION_BASE=149, 
		GT=209, PUT=164, WITH=200, CSTR=16, LOCK_WRITE=132, LINE_CONTINUATION=233, 
		TYPEOF=192, DEFVAR=82, DEFLNG=76, UBOUND=38, FALSE=109, ERRORCHAR=234, 
		UNDERSCORE=229, INTEGERLITERAL=225, END_IF=92, LOCK=124, TEXT=187, SINGLEQUOTE=228, 
		MULT=214, SEMICOLON=41, BYTE=61, HEXLITERAL=223, ELSE=87, IF=117, TYPE=191, 
		AMPERSAND=48, DEFLNGPTR=78, ENUM=99, DEFOBJ=79, IN=120, OPTION=34, DOT=43, 
		EXIT_DO=104, GUIDLITERAL=231, IS=122, EQV=100, WEND=197, FUNCTION=112, 
		HASH=44, CASE=63, GEQ=208, GET=113, PUBLIC=163, ON_ERROR=145, EXIT=22, 
		MIDB=31, END_ENUM=90, GOTO=116, INTDIV=206, LONGPTR=30, WIDTH=199, BEGIN=56, 
		EXIT_SUB=108, ASSIGN=204, WRITE=202, DOUBLE=85, EXIT_PROPERTY=107, COMMA=39, 
		RANDOM=165, PROPERTY_GET=159, SELECT=176, PRIVATE=158, ERASE=101, TAB=186, 
		BYREF=60, VERSION=196, NEQ=215, END_TYPE=96, NEW=139, ARRAY=3, INPUT=121, 
		SINGLE=179, ALIAS=51, SPC=180, LT=212, RESET=171, END_SUB=95, EVENT=103, 
		READ_WRITE=168, OPTION_COMPARE=151, ME=135, SCALE=36, CDATE=7, MIDTYPESUFFIX=33, 
		NULL=142, NEWLINE=227, TRUE=190, RPAREN=218, OBJECT=143, IMP=118, STRINGLITERAL=221, 
		OCTLITERAL=222, READ=167, DATE=68, LIKE=129, AND=52, OPTION_PRIVATE_MODULE=152, 
		CLNGLNG=13, PLUS=216, ANY=2, RESUME=172, INT=25, SHARED=178, EXIT_FUNCTION=106, 
		PSET=35, ACCESS=49, LINE_INPUT=130, ON=144, OR=153, PARAMARRAY=155, LBOUND=26, 
		R_SQUARE_BRACKET=220, IMPLEMENTS=119, UNTIL=194, DEBUG=20, DEFCUR=74, 
		CLNGPTR=14, LONGLONG=29, DECLARE=69, DEFDATE=72, FIX=23, LEN=27, REDIM=169, 
		LEQ=210, DEFSTR=81, LET=127, WHILE=198, CVAR=18, CLNG=12, LOAD=235, RESUME_NEXT=236;
	public static readonly string[] tokenNames = {
		"<INVALID>", "ABS", "ANY", "ARRAY", "CBOOL", "CBYTE", "CCUR", "CDATE", 
		"CDBL", "CDEC", "CINT", "CIRCLE", "CLNG", "CLNGLNG", "CLNGPTR", "CSNG", 
		"CSTR", "CURRENCY", "CVAR", "CVERR", "DEBUG", "DOEVENTS", "EXIT", "FIX", 
		"INPUTB", "INT", "LBOUND", "LEN", "LENB", "LONGLONG", "LONGPTR", "MIDB", 
		"MIDBTYPESUFFIX", "MIDTYPESUFFIX", "OPTION", "PSET", "SCALE", "SGN", "UBOUND", 
		"','", "':'", "';'", "'!'", "'.'", "'#'", "'@'", "'%'", "'$'", "'&'", 
		"ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPEND", "AS", "BEGIN", 
		"BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", "CALL", "CASE", "CLASS", 
		"CLOSE", "CONST", "DATABASE", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", 
		"DEFDATE", "DEFDBL", "DEFCUR", "DEFINT", "DEFLNG", "DEFLNGLNG", "DEFLNGPTR", 
		"DEFOBJ", "DEFSNG", "DEFSTR", "DEFVAR", "DIM", "DO", "DOUBLE", "EACH", 
		"ELSE", "ELSEIF", "EMPTY", "END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", 
		"END_SELECT", "END_SUB", "END_TYPE", "END_WITH", "END", "ENUM", "EQV", 
		"ERASE", "ERROR", "EVENT", "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", 
		"EXIT_SUB", "FALSE", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", 
		"GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "LOCK", 
		"LONG", "LOOP", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", "LOCK_WRITE", 
		"LOCK_READ_WRITE", "LSET", "ME", "MID", "MOD", "NEXT", "NEW", "NOT", "NOTHING", 
		"NULL", "OBJECT", "ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN", "OPTIONAL", 
		"OPTION_BASE", "OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", 
		"OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", 
		"PROPERTY_LET", "PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM", 
		"RAISEEVENT", "READ", "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", 
		"RETURN", "RSET", "SEEK", "SELECT", "SET", "SHARED", "SINGLE", "SPC", 
		"STATIC", "STEP", "STOP", "STRING", "SUB", "TAB", "TEXT", "THEN", "TO", 
		"TRUE", "TYPE", "TYPEOF", "UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", 
		"WHILE", "WIDTH", "WITH", "WITHEVENTS", "WRITE", "XOR", "':='", "'/'", 
		"'\\'", "'='", "GEQ", "'>'", "LEQ", "'('", "'<'", "'-'", "'*'", "NEQ", 
		"'+'", "'^'", "')'", "'['", "']'", "STRINGLITERAL", "OCTLITERAL", "HEXLITERAL", 
		"FLOATLITERAL", "INTEGERLITERAL", "DATELITERAL", "NEWLINE", "'''", "'_'", 
		"WS", "GUIDLITERAL", "IDENTIFIER", "LINE_CONTINUATION", "ERRORCHAR", "LOAD", 
		"RESUME_NEXT"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_attributeStmt = 6, 
		RULE_attributeName = 7, RULE_attributeValue = 8, RULE_moduleDeclarations = 9, 
		RULE_moduleOption = 10, RULE_moduleDeclarationsElement = 11, RULE_moduleBody = 12, 
		RULE_moduleBodyElement = 13, RULE_block = 14, RULE_blockStmt = 15, RULE_fileStmt = 16, 
		RULE_openStmt = 17, RULE_pathName = 18, RULE_modeClause = 19, RULE_fileMode = 20, 
		RULE_accessClause = 21, RULE_access = 22, RULE_lock = 23, RULE_lenClause = 24, 
		RULE_recLength = 25, RULE_fileNumber = 26, RULE_markedFileNumber = 27, 
		RULE_unmarkedFileNumber = 28, RULE_closeStmt = 29, RULE_resetStmt = 30, 
		RULE_fileNumberList = 31, RULE_seekStmt = 32, RULE_position = 33, RULE_lockStmt = 34, 
		RULE_recordRange = 35, RULE_startRecordNumber = 36, RULE_endRecordNumber = 37, 
		RULE_unlockStmt = 38, RULE_lineInputStmt = 39, RULE_variableName = 40, 
		RULE_widthStmt = 41, RULE_lineWidth = 42, RULE_debugPrintStmt = 43, RULE_debugPrint = 44, 
		RULE_debugModule = 45, RULE_debugPrintSub = 46, RULE_printStmt = 47, RULE_outputList = 48, 
		RULE_outputItem = 49, RULE_outputClause = 50, RULE_charPosition = 51, 
		RULE_outputExpression = 52, RULE_spcClause = 53, RULE_spcNumber = 54, 
		RULE_tabClause = 55, RULE_tabNumberClause = 56, RULE_tabNumber = 57, RULE_writeStmt = 58, 
		RULE_inputStmt = 59, RULE_inputList = 60, RULE_inputVariable = 61, RULE_putStmt = 62, 
		RULE_recordNumber = 63, RULE_data = 64, RULE_getStmt = 65, RULE_variable = 66, 
		RULE_constStmt = 67, RULE_constSubStmt = 68, RULE_declareStmt = 69, RULE_argList = 70, 
		RULE_arg = 71, RULE_argDefaultValue = 72, RULE_defDirective = 73, RULE_defType = 74, 
		RULE_letterSpec = 75, RULE_singleLetter = 76, RULE_universalLetterRange = 77, 
		RULE_upperCaseA = 78, RULE_upperCaseZ = 79, RULE_letterRange = 80, RULE_firstLetter = 81, 
		RULE_lastLetter = 82, RULE_doLoopStmt = 83, RULE_enumerationStmt = 84, 
		RULE_enumerationStmt_Constant = 85, RULE_endStmt = 86, RULE_eraseStmt = 87, 
		RULE_errorStmt = 88, RULE_eventStmt = 89, RULE_exitStmt = 90, RULE_forEachStmt = 91, 
		RULE_forNextStmt = 92, RULE_functionStmt = 93, RULE_functionName = 94, 
		RULE_goSubStmt = 95, RULE_goToStmt = 96, RULE_ifStmt = 97, RULE_elseIfBlock = 98, 
		RULE_elseBlock = 99, RULE_singleLineIfStmt = 100, RULE_ifWithNonEmptyThen = 101, 
		RULE_ifWithEmptyThen = 102, RULE_singleLineElseClause = 103, RULE_listOrLabel = 104, 
		RULE_sameLineStatement = 105, RULE_booleanExpression = 106, RULE_implementsStmt = 107, 
		RULE_letStmt = 108, RULE_lsetStmt = 109, RULE_onErrorStmt = 110, RULE_onGoToStmt = 111, 
		RULE_onGoSubStmt = 112, RULE_propertyGetStmt = 113, RULE_propertySetStmt = 114, 
		RULE_propertyLetStmt = 115, RULE_raiseEventStmt = 116, RULE_eventArgumentList = 117, 
		RULE_eventArgument = 118, RULE_redimStmt = 119, RULE_redimDeclarationList = 120, 
		RULE_redimVariableDeclaration = 121, RULE_integerExpression = 122, RULE_callStmt = 123, 
		RULE_resumeStmt = 124, RULE_returnStmt = 125, RULE_rsetStmt = 126, RULE_stopStmt = 127, 
		RULE_selectCaseStmt = 128, RULE_selectExpression = 129, RULE_caseClause = 130, 
		RULE_caseElseClause = 131, RULE_rangeClause = 132, RULE_selectStartValue = 133, 
		RULE_selectEndValue = 134, RULE_setStmt = 135, RULE_subStmt = 136, RULE_subroutineName = 137, 
		RULE_typeStmt = 138, RULE_typeStmt_Element = 139, RULE_variableStmt = 140, 
		RULE_variableListStmt = 141, RULE_variableSubStmt = 142, RULE_whileWendStmt = 143, 
		RULE_withStmt = 144, RULE_circleSpecialForm = 145, RULE_scaleSpecialForm = 146, 
		RULE_tuple = 147, RULE_subscripts = 148, RULE_subscript = 149, RULE_unrestrictedIdentifier = 150, 
		RULE_identifier = 151, RULE_untypedIdentifier = 152, RULE_typedIdentifier = 153, 
		RULE_identifierValue = 154, RULE_foreignName = 155, RULE_foreignIdentifier = 156, 
		RULE_asTypeClause = 157, RULE_baseType = 158, RULE_comparisonOperator = 159, 
		RULE_complexType = 160, RULE_fieldLength = 161, RULE_statementLabelDefinition = 162, 
		RULE_statementLabel = 163, RULE_identifierStatementLabel = 164, RULE_lineNumberLabel = 165, 
		RULE_numberLiteral = 166, RULE_type = 167, RULE_typeHint = 168, RULE_visibility = 169, 
		RULE_expression = 170, RULE_literalExpression = 171, RULE_literalIdentifier = 172, 
		RULE_booleanLiteralIdentifier = 173, RULE_objectLiteralIdentifier = 174, 
		RULE_variantLiteralIdentifier = 175, RULE_lExpression = 176, RULE_builtInType = 177, 
		RULE_argumentList = 178, RULE_positionalOrNamedArgumentList = 179, RULE_positionalArgumentOrMissing = 180, 
		RULE_positionalArgument = 181, RULE_requiredPositionalArgument = 182, 
		RULE_namedArgumentList = 183, RULE_namedArgument = 184, RULE_argumentExpression = 185, 
		RULE_lowerBoundArgumentExpression = 186, RULE_upperBoundArgumentExpression = 187, 
		RULE_addressOfExpression = 188, RULE_keyword = 189, RULE_markerKeyword = 190, 
		RULE_statementKeyword = 191, RULE_endOfLine = 192, RULE_endOfStatement = 193, 
		RULE_commentOrAnnotation = 194, RULE_remComment = 195, RULE_comment = 196, 
		RULE_commentBody = 197, RULE_annotationList = 198, RULE_annotation = 199, 
		RULE_annotationName = 200, RULE_annotationArgList = 201, RULE_annotationArg = 202, 
		RULE_mandatoryLineContinuation = 203, RULE_whiteSpace = 204;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "attributeStmt", "attributeName", "attributeValue", 
		"moduleDeclarations", "moduleOption", "moduleDeclarationsElement", "moduleBody", 
		"moduleBodyElement", "block", "blockStmt", "fileStmt", "openStmt", "pathName", 
		"modeClause", "fileMode", "accessClause", "access", "lock", "lenClause", 
		"recLength", "fileNumber", "markedFileNumber", "unmarkedFileNumber", "closeStmt", 
		"resetStmt", "fileNumberList", "seekStmt", "position", "lockStmt", "recordRange", 
		"startRecordNumber", "endRecordNumber", "unlockStmt", "lineInputStmt", 
		"variableName", "widthStmt", "lineWidth", "debugPrintStmt", "debugPrint", 
		"debugModule", "debugPrintSub", "printStmt", "outputList", "outputItem", 
		"outputClause", "charPosition", "outputExpression", "spcClause", "spcNumber", 
		"tabClause", "tabNumberClause", "tabNumber", "writeStmt", "inputStmt", 
		"inputList", "inputVariable", "putStmt", "recordNumber", "data", "getStmt", 
		"variable", "constStmt", "constSubStmt", "declareStmt", "argList", "arg", 
		"argDefaultValue", "defDirective", "defType", "letterSpec", "singleLetter", 
		"universalLetterRange", "upperCaseA", "upperCaseZ", "letterRange", "firstLetter", 
		"lastLetter", "doLoopStmt", "enumerationStmt", "enumerationStmt_Constant", 
		"endStmt", "eraseStmt", "errorStmt", "eventStmt", "exitStmt", "forEachStmt", 
		"forNextStmt", "functionStmt", "functionName", "goSubStmt", "goToStmt", 
		"ifStmt", "elseIfBlock", "elseBlock", "singleLineIfStmt", "ifWithNonEmptyThen", 
		"ifWithEmptyThen", "singleLineElseClause", "listOrLabel", "sameLineStatement", 
		"booleanExpression", "implementsStmt", "letStmt", "lsetStmt", "onErrorStmt", 
		"onGoToStmt", "onGoSubStmt", "propertyGetStmt", "propertySetStmt", "propertyLetStmt", 
		"raiseEventStmt", "eventArgumentList", "eventArgument", "redimStmt", "redimDeclarationList", 
		"redimVariableDeclaration", "integerExpression", "callStmt", "resumeStmt", 
		"returnStmt", "rsetStmt", "stopStmt", "selectCaseStmt", "selectExpression", 
		"caseClause", "caseElseClause", "rangeClause", "selectStartValue", "selectEndValue", 
		"setStmt", "subStmt", "subroutineName", "typeStmt", "typeStmt_Element", 
		"variableStmt", "variableListStmt", "variableSubStmt", "whileWendStmt", 
		"withStmt", "circleSpecialForm", "scaleSpecialForm", "tuple", "subscripts", 
		"subscript", "unrestrictedIdentifier", "identifier", "untypedIdentifier", 
		"typedIdentifier", "identifierValue", "foreignName", "foreignIdentifier", 
		"asTypeClause", "baseType", "comparisonOperator", "complexType", "fieldLength", 
		"statementLabelDefinition", "statementLabel", "identifierStatementLabel", 
		"lineNumberLabel", "numberLiteral", "type", "typeHint", "visibility", 
		"expression", "literalExpression", "literalIdentifier", "booleanLiteralIdentifier", 
		"objectLiteralIdentifier", "variantLiteralIdentifier", "lExpression", 
		"builtInType", "argumentList", "positionalOrNamedArgumentList", "positionalArgumentOrMissing", 
		"positionalArgument", "requiredPositionalArgument", "namedArgumentList", 
		"namedArgument", "argumentExpression", "lowerBoundArgumentExpression", 
		"upperBoundArgumentExpression", "addressOfExpression", "keyword", "markerKeyword", 
		"statementKeyword", "endOfLine", "endOfStatement", "commentOrAnnotation", 
		"remComment", "comment", "commentBody", "annotationList", "annotation", 
		"annotationName", "annotationArgList", "annotationArg", "mandatoryLineContinuation", 
		"whiteSpace"
	};

	public override string GrammarFileName { get { return "VBAParser.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; module();
			State = 411; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ModuleAttributesContext moduleAttributes(int i) {
			return GetRuleContext<ModuleAttributesContext>(i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public IReadOnlyList<ModuleAttributesContext> moduleAttributes() {
			return GetRuleContexts<ModuleAttributesContext>();
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleDeclarationsContext moduleDeclarations() {
			return GetRuleContext<ModuleDeclarationsContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; endOfStatement();
			State = 414; moduleAttributes();
			State = 416;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 415; moduleHeader();
				}
				break;
			}
			State = 418; moduleAttributes();
			State = 420;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 419; moduleConfig();
				}
				break;
			}
			State = 422; moduleAttributes();
			State = 423; moduleDeclarations();
			State = 424; moduleAttributes();
			State = 425; moduleBody();
			State = 426; moduleAttributes();
			State = 428;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 427; whiteSpace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(VERSION);
			State = 431; whiteSpace();
			State = 432; numberLiteral();
			State = 434;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 433; whiteSpace();
				}
				break;
			}
			State = 437;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 436; Match(CLASS);
				}
				break;
			}
			State = 439; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ITerminalNode GUIDLITERAL() { return GetToken(VBAParser.GUIDLITERAL, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; Match(BEGIN);
			State = 449;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 442; whiteSpace();
				State = 443; Match(GUIDLITERAL);
				State = 444; whiteSpace();
				State = 445; unrestrictedIdentifier();
				State = 447;
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 446; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 451; endOfStatement();
			State = 453;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 452; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 455;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 457; Match(END);
			State = 458; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; unrestrictedIdentifier();
			State = 464;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 461; whiteSpace();
				}
				}
				State = 466;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 467; Match(EQ);
			State = 471;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 468; whiteSpace();
				}
				}
				State = 473;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 474; expression(0);
			State = 477;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 475; Match(COLON);
				State = 476; numberLiteral();
				}
				break;
			}
			State = 479; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 481; attributeStmt();
					State = 482; endOfStatement();
					}
					} 
				}
				State = 488;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AttributeValueContext> attributeValue() {
			return GetRuleContexts<AttributeValueContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public AttributeValueContext attributeValue(int i) {
			return GetRuleContext<AttributeValueContext>(i);
		}
		public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 489; Match(ATTRIBUTE);
			State = 490; whiteSpace();
			State = 491; attributeName();
			State = 493;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 492; whiteSpace();
				}
			}

			State = 495; Match(EQ);
			State = 497;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 496; whiteSpace();
				}
			}

			State = 499; attributeValue();
			State = 510;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 501;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 500; whiteSpace();
						}
					}

					State = 503; Match(COMMA);
					State = 505;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 504; whiteSpace();
						}
					}

					State = 507; attributeValue();
					}
					} 
				}
				State = 512;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNameContext : ParserRuleContext {
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public AttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNameContext attributeName() {
		AttributeNameContext _localctx = new AttributeNameContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_attributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; lExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeValueContext attributeValue() {
		AttributeValueContext _localctx = new AttributeValueContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_attributeValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 517; moduleDeclarationsElement();
					State = 518; endOfStatement();
					}
					} 
				}
				State = 524;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleOption);
		int _la;
		try {
			State = 535;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 525; Match(OPTION_BASE);
				State = 526; whiteSpace();
				State = 527; numberLiteral();
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 529; Match(OPTION_COMPARE);
				State = 530; whiteSpace();
				State = 531;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 533; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 534; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public DefDirectiveContext defDirective() {
			return GetRuleContext<DefDirectiveContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_moduleDeclarationsElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 537; whiteSpace();
				}
			}

			State = 550;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 540; attributeStmt();
				}
				break;

			case 2:
				{
				State = 541; declareStmt();
				}
				break;

			case 3:
				{
				State = 542; defDirective();
				}
				break;

			case 4:
				{
				State = 543; enumerationStmt();
				}
				break;

			case 5:
				{
				State = 544; eventStmt();
				}
				break;

			case 6:
				{
				State = 545; constStmt();
				}
				break;

			case 7:
				{
				State = 546; implementsStmt();
				}
				break;

			case 8:
				{
				State = 547; variableStmt();
				}
				break;

			case 9:
				{
				State = 548; moduleOption();
				}
				break;

			case 10:
				{
				State = 549; typeStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_moduleBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 552; whiteSpace();
				}
				break;
			}
			State = 560;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 555; moduleBodyElement();
					State = 556; endOfStatement();
					}
					} 
				}
				State = 562;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_moduleBodyElement);
		try {
			State = 568;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 563; functionStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 564; propertyGetStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 565; propertySetStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 566; propertyLetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 567; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 570; blockStmt();
					State = 571; endOfStatement();
					}
					} 
				}
				State = 577;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public SingleLineIfStmtContext singleLineIfStmt() {
			return GetRuleContext<SingleLineIfStmtContext>(0);
		}
		public FileStmtContext fileStmt() {
			return GetRuleContext<FileStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public ScaleSpecialFormContext scaleSpecialForm() {
			return GetRuleContext<ScaleSpecialFormContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public CircleSpecialFormContext circleSpecialForm() {
			return GetRuleContext<CircleSpecialFormContext>(0);
		}
		public CallStmtContext callStmt() {
			return GetRuleContext<CallStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_blockStmt);
		try {
			State = 613;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 578; statementLabelDefinition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 579; fileStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 580; attributeStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 581; constStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 582; doLoopStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 583; endStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 584; eraseStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 585; errorStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 586; exitStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 587; forEachStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 588; forNextStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 589; goSubStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 590; goToStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 591; ifStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 592; singleLineIfStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 593; implementsStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 594; letStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 595; lsetStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 596; onErrorStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 597; onGoToStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 598; onGoSubStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 599; raiseEventStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 600; redimStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 601; resumeStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 602; returnStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 603; rsetStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 604; selectCaseStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 605; setStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 606; stopStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 607; variableStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 608; whileWendStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 609; withStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 610; circleSpecialForm();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 611; scaleSpecialForm();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 612; callStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileStmtContext : ParserRuleContext {
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public DebugPrintStmtContext debugPrintStmt() {
			return GetRuleContext<DebugPrintStmtContext>(0);
		}
		public FileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileStmtContext fileStmt() {
		FileStmtContext _localctx = new FileStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_fileStmt);
		try {
			State = 629;
			switch (_input.La(1)) {
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 615; openStmt();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 616; resetStmt();
				}
				break;
			case CLOSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 617; closeStmt();
				}
				break;
			case SEEK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 618; seekStmt();
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 619; lockStmt();
				}
				break;
			case UNLOCK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 620; unlockStmt();
				}
				break;
			case LINE_INPUT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 621; lineInputStmt();
				}
				break;
			case WIDTH:
				EnterOuterAlt(_localctx, 8);
				{
				State = 622; widthStmt();
				}
				break;
			case DEBUG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 623; debugPrintStmt();
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 624; printStmt();
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 625; writeStmt();
				}
				break;
			case INPUT:
				EnterOuterAlt(_localctx, 12);
				{
				State = 626; inputStmt();
				}
				break;
			case PUT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 627; putStmt();
				}
				break;
			case GET:
				EnterOuterAlt(_localctx, 14);
				{
				State = 628; getStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ModeClauseContext modeClause() {
			return GetRuleContext<ModeClauseContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public AccessClauseContext accessClause() {
			return GetRuleContext<AccessClauseContext>(0);
		}
		public LockContext @lock() {
			return GetRuleContext<LockContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public LenClauseContext lenClause() {
			return GetRuleContext<LenClauseContext>(0);
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public PathNameContext pathName() {
			return GetRuleContext<PathNameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_openStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631; Match(OPEN);
			State = 632; whiteSpace();
			State = 633; pathName();
			State = 637;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 634; whiteSpace();
				State = 635; modeClause();
				}
				break;
			}
			State = 642;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				State = 639; whiteSpace();
				State = 640; accessClause();
				}
				break;
			}
			State = 647;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 644; whiteSpace();
				State = 645; @lock();
				}
				break;
			}
			State = 649; whiteSpace();
			State = 650; Match(AS);
			State = 651; whiteSpace();
			State = 652; fileNumber();
			State = 656;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 653; whiteSpace();
				State = 654; lenClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathNameContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PathNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPathName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPathName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathNameContext pathName() {
		PathNameContext _localctx = new PathNameContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_pathName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeClauseContext : ParserRuleContext {
		public FileModeContext fileMode() {
			return GetRuleContext<FileModeContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ModeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeClauseContext modeClause() {
		ModeClauseContext _localctx = new ModeClauseContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_modeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660; Match(FOR);
			State = 661; whiteSpace();
			State = 662; fileMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileModeContext : ParserRuleContext {
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public FileModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileMode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileMode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileMode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileModeContext fileMode() {
		FileModeContext _localctx = new FileModeContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_fileMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (INPUT - 121)) | (1L << (OUTPUT - 121)) | (1L << (RANDOM - 121)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessClauseContext : ParserRuleContext {
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public AccessContext access() {
			return GetRuleContext<AccessContext>(0);
		}
		public AccessClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAccessClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAccessClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessClauseContext accessClause() {
		AccessClauseContext _localctx = new AccessClauseContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_accessClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666; Match(ACCESS);
			State = 667; whiteSpace();
			State = 668; access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public AccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessContext access() {
		AccessContext _localctx = new AccessContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			_la = _input.La(1);
			if ( !(((((_la - 167)) & ~0x3f) == 0 && ((1L << (_la - 167)) & ((1L << (READ - 167)) | (1L << (READ_WRITE - 167)) | (1L << (WRITE - 167)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockContext : ParserRuleContext {
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public LockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockContext @lock() {
		LockContext _localctx = new LockContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_lock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			_la = _input.La(1);
			if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (LOCK_READ - 131)) | (1L << (LOCK_WRITE - 131)) | (1L << (LOCK_READ_WRITE - 131)) | (1L << (SHARED - 131)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LenClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public RecLengthContext recLength() {
			return GetRuleContext<RecLengthContext>(0);
		}
		public LenClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lenClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLenClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLenClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLenClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LenClauseContext lenClause() {
		LenClauseContext _localctx = new LenClauseContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_lenClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674; Match(LEN);
			State = 676;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 675; whiteSpace();
				}
			}

			State = 678; Match(EQ);
			State = 680;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 679; whiteSpace();
				}
			}

			State = 682; recLength();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecLengthContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RecLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRecLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRecLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecLengthContext recLength() {
		RecLengthContext _localctx = new RecLengthContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_recLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberContext : ParserRuleContext {
		public UnmarkedFileNumberContext unmarkedFileNumber() {
			return GetRuleContext<UnmarkedFileNumberContext>(0);
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public FileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberContext fileNumber() {
		FileNumberContext _localctx = new FileNumberContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_fileNumber);
		try {
			State = 688;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 686; markedFileNumber();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 687; unmarkedFileNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkedFileNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public MarkedFileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markedFileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkedFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkedFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkedFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkedFileNumberContext markedFileNumber() {
		MarkedFileNumberContext _localctx = new MarkedFileNumberContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_markedFileNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690; Match(HASH);
			State = 691; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnmarkedFileNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnmarkedFileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unmarkedFileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnmarkedFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnmarkedFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnmarkedFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnmarkedFileNumberContext unmarkedFileNumber() {
		UnmarkedFileNumberContext _localctx = new UnmarkedFileNumberContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_unmarkedFileNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public FileNumberListContext fileNumberList() {
			return GetRuleContext<FileNumberListContext>(0);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_closeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695; Match(CLOSE);
			State = 699;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 696; whiteSpace();
				State = 697; fileNumberList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<FileNumberContext> fileNumber() {
			return GetRuleContexts<FileNumberContext>();
		}
		public FileNumberContext fileNumber(int i) {
			return GetRuleContext<FileNumberContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public FileNumberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumberList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileNumberList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileNumberList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberListContext fileNumberList() {
		FileNumberListContext _localctx = new FileNumberListContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_fileNumberList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 703; fileNumber();
			State = 714;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 705;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 704; whiteSpace();
						}
					}

					State = 707; Match(COMMA);
					State = 709;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 708; whiteSpace();
						}
					}

					State = 711; fileNumber();
					}
					} 
				}
				State = 716;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public PositionContext position() {
			return GetRuleContext<PositionContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717; Match(SEEK);
			State = 718; whiteSpace();
			State = 719; fileNumber();
			State = 721;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 720; whiteSpace();
				}
			}

			State = 723; Match(COMMA);
			State = 725;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 724; whiteSpace();
				}
			}

			State = 727; position();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPosition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPosition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionContext position() {
		PositionContext _localctx = new PositionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_position);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public RecordRangeContext recordRange() {
			return GetRuleContext<RecordRangeContext>(0);
		}
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731; Match(LOCK);
			State = 732; whiteSpace();
			State = 733; fileNumber();
			State = 742;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 735;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 734; whiteSpace();
					}
				}

				State = 737; Match(COMMA);
				State = 739;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 738; whiteSpace();
					}
				}

				State = 741; recordRange();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordRangeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public StartRecordNumberContext startRecordNumber() {
			return GetRuleContext<StartRecordNumberContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public EndRecordNumberContext endRecordNumber() {
			return GetRuleContext<EndRecordNumberContext>(0);
		}
		public RecordRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRecordRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRecordRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordRangeContext recordRange() {
		RecordRangeContext _localctx = new RecordRangeContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_recordRange);
		try {
			State = 754;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 744; startRecordNumber();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 748;
				switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					State = 745; startRecordNumber();
					State = 746; whiteSpace();
					}
					break;
				}
				State = 750; Match(TO);
				State = 751; whiteSpace();
				State = 752; endRecordNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartRecordNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StartRecordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRecordNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStartRecordNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStartRecordNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRecordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRecordNumberContext startRecordNumber() {
		StartRecordNumberContext _localctx = new StartRecordNumberContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_startRecordNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndRecordNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndRecordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endRecordNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndRecordNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndRecordNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndRecordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndRecordNumberContext endRecordNumber() {
		EndRecordNumberContext _localctx = new EndRecordNumberContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_endRecordNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public RecordRangeContext recordRange() {
			return GetRuleContext<RecordRangeContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760; Match(UNLOCK);
			State = 761; whiteSpace();
			State = 762; fileNumber();
			State = 771;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 764;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 763; whiteSpace();
					}
				}

				State = 766; Match(COMMA);
				State = 768;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 767; whiteSpace();
					}
				}

				State = 770; recordRange();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773; Match(LINE_INPUT);
			State = 774; whiteSpace();
			State = 775; markedFileNumber();
			State = 777;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 776; whiteSpace();
				}
			}

			State = 779; Match(COMMA);
			State = 781;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 780; whiteSpace();
				}
			}

			State = 783; variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public LineWidthContext lineWidth() {
			return GetRuleContext<LineWidthContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787; Match(WIDTH);
			State = 788; whiteSpace();
			State = 789; markedFileNumber();
			State = 791;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 790; whiteSpace();
				}
			}

			State = 793; Match(COMMA);
			State = 795;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 794; whiteSpace();
				}
			}

			State = 797; lineWidth();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineWidthContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LineWidthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineWidth; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineWidth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineWidth(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineWidth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineWidthContext lineWidth() {
		LineWidthContext _localctx = new LineWidthContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_lineWidth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugPrintStmtContext : ParserRuleContext {
		public DebugPrintContext debugPrint() {
			return GetRuleContext<DebugPrintContext>(0);
		}
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DebugPrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugPrintStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugPrintStmtContext debugPrintStmt() {
		DebugPrintStmtContext _localctx = new DebugPrintStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_debugPrintStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801; debugPrint();
			State = 805;
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 802; whiteSpace();
				State = 803; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugPrintContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public DebugPrintSubContext debugPrintSub() {
			return GetRuleContext<DebugPrintSubContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public DebugModuleContext debugModule() {
			return GetRuleContext<DebugModuleContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public DebugPrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugPrint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugPrintContext debugPrint() {
		DebugPrintContext _localctx = new DebugPrintContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_debugPrint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807; debugModule();
			State = 809;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 808; whiteSpace();
				}
			}

			State = 811; Match(DOT);
			State = 813;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 812; whiteSpace();
				}
			}

			State = 815; debugPrintSub();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugModuleContext : ParserRuleContext {
		public ITerminalNode DEBUG() { return GetToken(VBAParser.DEBUG, 0); }
		public DebugModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugModule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugModuleContext debugModule() {
		DebugModuleContext _localctx = new DebugModuleContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_debugModule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817; Match(DEBUG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugPrintSubContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public DebugPrintSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugPrintSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugPrintSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugPrintSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugPrintSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugPrintSubContext debugPrintSub() {
		DebugPrintSubContext _localctx = new DebugPrintSubContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_debugPrintSub);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819; Match(PRINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821; Match(PRINT);
			State = 822; whiteSpace();
			State = 823; markedFileNumber();
			State = 825;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 824; whiteSpace();
				}
			}

			State = 827; Match(COMMA);
			State = 832;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 829;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 828; whiteSpace();
					}
				}

				State = 831; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public OutputItemContext outputItem(int i) {
			return GetRuleContext<OutputItemContext>(i);
		}
		public IReadOnlyList<OutputItemContext> outputItem() {
			return GetRuleContexts<OutputItemContext>();
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_outputList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 834; outputItem();
			State = 841;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,59,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 836;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 835; whiteSpace();
						}
					}

					State = 838; outputItem();
					}
					} 
				}
				State = 843;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,59,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputItemContext : ParserRuleContext {
		public OutputClauseContext outputClause() {
			return GetRuleContext<OutputClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public CharPositionContext charPosition() {
			return GetRuleContext<CharPositionContext>(0);
		}
		public OutputItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputItemContext outputItem() {
		OutputItemContext _localctx = new OutputItemContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_outputItem);
		int _la;
		try {
			State = 852;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 844; outputClause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 845; charPosition();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 846; outputClause();
				State = 848;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 847; whiteSpace();
					}
				}

				State = 850; charPosition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputClauseContext : ParserRuleContext {
		public TabClauseContext tabClause() {
			return GetRuleContext<TabClauseContext>(0);
		}
		public OutputExpressionContext outputExpression() {
			return GetRuleContext<OutputExpressionContext>(0);
		}
		public SpcClauseContext spcClause() {
			return GetRuleContext<SpcClauseContext>(0);
		}
		public OutputClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputClauseContext outputClause() {
		OutputClauseContext _localctx = new OutputClauseContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_outputClause);
		try {
			State = 857;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 854; spcClause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 855; tabClause();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 856; outputExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharPositionContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(VBAParser.SEMICOLON, 0); }
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public CharPositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charPosition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCharPosition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCharPosition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharPositionContext charPosition() {
		CharPositionContext _localctx = new CharPositionContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_charPosition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859;
			_la = _input.La(1);
			if ( !(_la==COMMA || _la==SEMICOLON) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OutputExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputExpressionContext outputExpression() {
		OutputExpressionContext _localctx = new OutputExpressionContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_outputExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcClauseContext : ParserRuleContext {
		public SpcNumberContext spcNumber() {
			return GetRuleContext<SpcNumberContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SpcClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spcClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSpcClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSpcClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpcClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcClauseContext spcClause() {
		SpcClauseContext _localctx = new SpcClauseContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_spcClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863; Match(SPC);
			State = 865;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 864; whiteSpace();
				}
			}

			State = 867; Match(LPAREN);
			State = 869;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 868; whiteSpace();
				}
			}

			State = 871; spcNumber();
			State = 873;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 872; whiteSpace();
				}
			}

			State = 875; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SpcNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spcNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSpcNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSpcNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpcNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcNumberContext spcNumber() {
		SpcNumberContext _localctx = new SpcNumberContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_spcNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabClauseContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public TabNumberClauseContext tabNumberClause() {
			return GetRuleContext<TabNumberClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public TabClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTabClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTabClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabClauseContext tabClause() {
		TabClauseContext _localctx = new TabClauseContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_tabClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 879; Match(TAB);
			State = 884;
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				State = 881;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 880; whiteSpace();
					}
				}

				State = 883; tabNumberClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabNumberClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TabNumberContext tabNumber() {
			return GetRuleContext<TabNumberContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public TabNumberClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabNumberClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTabNumberClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTabNumberClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabNumberClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabNumberClauseContext tabNumberClause() {
		TabNumberClauseContext _localctx = new TabNumberClauseContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_tabNumberClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886; Match(LPAREN);
			State = 888;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 887; whiteSpace();
				}
			}

			State = 890; tabNumber();
			State = 892;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 891; whiteSpace();
				}
			}

			State = 894; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TabNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTabNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTabNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabNumberContext tabNumber() {
		TabNumberContext _localctx = new TabNumberContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_tabNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898; Match(WRITE);
			State = 899; whiteSpace();
			State = 900; markedFileNumber();
			State = 902;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 901; whiteSpace();
				}
			}

			State = 904; Match(COMMA);
			State = 909;
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 906;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 905; whiteSpace();
					}
				}

				State = 908; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public InputListContext inputList() {
			return GetRuleContext<InputListContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_inputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911; Match(INPUT);
			State = 912; whiteSpace();
			State = 913; markedFileNumber();
			State = 915;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 914; whiteSpace();
				}
			}

			State = 917; Match(COMMA);
			State = 919;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 918; whiteSpace();
				}
			}

			State = 921; inputList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<InputVariableContext> inputVariable() {
			return GetRuleContexts<InputVariableContext>();
		}
		public InputVariableContext inputVariable(int i) {
			return GetRuleContext<InputVariableContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public InputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputListContext inputList() {
		InputListContext _localctx = new InputListContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_inputList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 923; inputVariable();
			State = 934;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,77,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 925;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 924; whiteSpace();
						}
					}

					State = 927; Match(COMMA);
					State = 929;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 928; whiteSpace();
						}
					}

					State = 931; inputVariable();
					}
					} 
				}
				State = 936;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,77,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputVariableContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InputVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputVariableContext inputVariable() {
		InputVariableContext _localctx = new InputVariableContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_inputVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 937; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public RecordNumberContext recordNumber() {
			return GetRuleContext<RecordNumberContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 939; Match(PUT);
			State = 940; whiteSpace();
			State = 941; fileNumber();
			State = 943;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 942; whiteSpace();
				}
			}

			State = 945; Match(COMMA);
			State = 947;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 946; whiteSpace();
				}
				break;
			}
			State = 950;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TYPEOF - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WIDTH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LOAD - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 949; recordNumber();
				}
			}

			State = 953;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 952; whiteSpace();
				}
			}

			State = 955; Match(COMMA);
			State = 957;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 956; whiteSpace();
				}
			}

			State = 959; data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RecordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRecordNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRecordNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordNumberContext recordNumber() {
		RecordNumberContext _localctx = new RecordNumberContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_recordNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataContext data() {
		DataContext _localctx = new DataContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_data);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public RecordNumberContext recordNumber() {
			return GetRuleContext<RecordNumberContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965; Match(GET);
			State = 966; whiteSpace();
			State = 967; fileNumber();
			State = 969;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 968; whiteSpace();
				}
			}

			State = 971; Match(COMMA);
			State = 973;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 972; whiteSpace();
				}
				break;
			}
			State = 976;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TYPEOF - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WIDTH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LOAD - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 975; recordNumber();
				}
			}

			State = 979;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 978; whiteSpace();
				}
			}

			State = 981; Match(COMMA);
			State = 983;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 982; whiteSpace();
				}
			}

			State = 985; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 992;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 989; visibility();
				State = 990; whiteSpace();
				}
			}

			State = 994; Match(CONST);
			State = 995; whiteSpace();
			State = 996; constSubStmt();
			State = 1007;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,91,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 998;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 997; whiteSpace();
						}
					}

					State = 1000; Match(COMMA);
					State = 1002;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1001; whiteSpace();
						}
					}

					State = 1004; constSubStmt();
					}
					} 
				}
				State = 1009;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,91,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1010; identifier();
			State = 1014;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 1011; whiteSpace();
				State = 1012; asTypeClause();
				}
				break;
			}
			State = 1017;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1016; whiteSpace();
				}
			}

			State = 1019; Match(EQ);
			State = 1021;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1020; whiteSpace();
				}
			}

			State = 1023; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1028;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1025; visibility();
				State = 1026; whiteSpace();
				}
			}

			State = 1030; Match(DECLARE);
			State = 1031; whiteSpace();
			State = 1034;
			_la = _input.La(1);
			if (_la==PTRSAFE) {
				{
				State = 1032; Match(PTRSAFE);
				State = 1033; whiteSpace();
				}
			}

			State = 1036;
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==SUB) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1037; whiteSpace();
			State = 1038; identifier();
			State = 1039; whiteSpace();
			State = 1040; Match(LIB);
			State = 1041; whiteSpace();
			State = 1042; Match(STRINGLITERAL);
			State = 1048;
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				State = 1043; whiteSpace();
				State = 1044; Match(ALIAS);
				State = 1045; whiteSpace();
				State = 1046; Match(STRINGLITERAL);
				}
				break;
			}
			State = 1054;
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 1051;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1050; whiteSpace();
					}
				}

				State = 1053; argList();
				}
				break;
			}
			State = 1059;
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				State = 1056; whiteSpace();
				State = 1057; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061; Match(LPAREN);
			State = 1079;
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				State = 1063;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1062; whiteSpace();
					}
				}

				State = 1065; arg();
				State = 1076;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,104,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1067;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1066; whiteSpace();
							}
						}

						State = 1069; Match(COMMA);
						State = 1071;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1070; whiteSpace();
							}
						}

						State = 1073; arg();
						}
						} 
					}
					State = 1078;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,104,_ctx);
				}
				}
				break;
			}
			State = 1082;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1081; whiteSpace();
				}
			}

			State = 1084; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1088;
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				State = 1086; Match(OPTIONAL);
				State = 1087; whiteSpace();
				}
				break;
			}
			State = 1092;
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				State = 1090;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1091; whiteSpace();
				}
				break;
			}
			State = 1096;
			switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				State = 1094; Match(PARAMARRAY);
				State = 1095; whiteSpace();
				}
				break;
			}
			State = 1098; unrestrictedIdentifier();
			State = 1107;
			switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				State = 1100;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1099; whiteSpace();
					}
				}

				State = 1102; Match(LPAREN);
				State = 1104;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1103; whiteSpace();
					}
				}

				State = 1106; Match(RPAREN);
				}
				break;
			}
			State = 1113;
			switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
			case 1:
				{
				State = 1110;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1109; whiteSpace();
					}
				}

				State = 1112; asTypeClause();
				}
				break;
			}
			State = 1119;
			switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				State = 1116;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1115; whiteSpace();
					}
				}

				State = 1118; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_argDefaultValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121; Match(EQ);
			State = 1123;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1122; whiteSpace();
				}
			}

			State = 1125; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefDirectiveContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public LetterSpecContext letterSpec(int i) {
			return GetRuleContext<LetterSpecContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<LetterSpecContext> letterSpec() {
			return GetRuleContexts<LetterSpecContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public DefTypeContext defType() {
			return GetRuleContext<DefTypeContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public DefDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDefDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDefDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefDirectiveContext defDirective() {
		DefDirectiveContext _localctx = new DefDirectiveContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_defDirective);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1127; defType();
			State = 1128; whiteSpace();
			State = 1129; letterSpec();
			State = 1140;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,120,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1131;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1130; whiteSpace();
						}
					}

					State = 1133; Match(COMMA);
					State = 1135;
					switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
					case 1:
						{
						State = 1134; whiteSpace();
						}
						break;
					}
					State = 1137; letterSpec();
					}
					} 
				}
				State = 1142;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,120,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefTypeContext : ParserRuleContext {
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public DefTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDefType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDefType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefTypeContext defType() {
		DefTypeContext _localctx = new DefTypeContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_defType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1143;
			_la = _input.La(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (DEFBOOL - 70)) | (1L << (DEFBYTE - 70)) | (1L << (DEFDATE - 70)) | (1L << (DEFDBL - 70)) | (1L << (DEFCUR - 70)) | (1L << (DEFINT - 70)) | (1L << (DEFLNG - 70)) | (1L << (DEFLNGLNG - 70)) | (1L << (DEFLNGPTR - 70)) | (1L << (DEFOBJ - 70)) | (1L << (DEFSNG - 70)) | (1L << (DEFSTR - 70)) | (1L << (DEFVAR - 70)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterSpecContext : ParserRuleContext {
		public SingleLetterContext singleLetter() {
			return GetRuleContext<SingleLetterContext>(0);
		}
		public UniversalLetterRangeContext universalLetterRange() {
			return GetRuleContext<UniversalLetterRangeContext>(0);
		}
		public LetterRangeContext letterRange() {
			return GetRuleContext<LetterRangeContext>(0);
		}
		public LetterSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterSpecContext letterSpec() {
		LetterSpecContext _localctx = new LetterSpecContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_letterSpec);
		try {
			State = 1148;
			switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1145; singleLetter();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1146; universalLetterRange();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1147; letterRange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public SingleLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLetterContext singleLetter() {
		SingleLetterContext _localctx = new SingleLetterContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_singleLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1150; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniversalLetterRangeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public UpperCaseAContext upperCaseA() {
			return GetRuleContext<UpperCaseAContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public UpperCaseZContext upperCaseZ() {
			return GetRuleContext<UpperCaseZContext>(0);
		}
		public UniversalLetterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_universalLetterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUniversalLetterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUniversalLetterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalLetterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniversalLetterRangeContext universalLetterRange() {
		UniversalLetterRangeContext _localctx = new UniversalLetterRangeContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_universalLetterRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1152; upperCaseA();
			State = 1154;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1153; whiteSpace();
				}
			}

			State = 1156; Match(MINUS);
			State = 1158;
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 1157; whiteSpace();
				}
				break;
			}
			State = 1160; upperCaseZ();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperCaseAContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public UpperCaseAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperCaseA; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperCaseA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperCaseA(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperCaseA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperCaseAContext upperCaseA() {
		UpperCaseAContext _localctx = new UpperCaseAContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_upperCaseA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1162;
			if (!(_input.Lt(1).Text.Equals("A"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"A\")");
			State = 1163; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperCaseZContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public UpperCaseZContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperCaseZ; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperCaseZ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperCaseZ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperCaseZ(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperCaseZContext upperCaseZ() {
		UpperCaseZContext _localctx = new UpperCaseZContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_upperCaseZ);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1165;
			if (!(_input.Lt(1).Text.Equals("Z"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"Z\")");
			State = 1166; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterRangeContext : ParserRuleContext {
		public LastLetterContext lastLetter() {
			return GetRuleContext<LastLetterContext>(0);
		}
		public FirstLetterContext firstLetter() {
			return GetRuleContext<FirstLetterContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public LetterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterRangeContext letterRange() {
		LetterRangeContext _localctx = new LetterRangeContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_letterRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1168; firstLetter();
			State = 1170;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1169; whiteSpace();
				}
			}

			State = 1172; Match(MINUS);
			State = 1174;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1173; whiteSpace();
				}
			}

			State = 1176; lastLetter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public FirstLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFirstLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFirstLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstLetterContext firstLetter() {
		FirstLetterContext _localctx = new FirstLetterContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_firstLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1178; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LastLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLastLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLastLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastLetterContext lastLetter() {
		LastLetterContext _localctx = new LastLetterContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_lastLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_doLoopStmt);
		int _la;
		try {
			State = 1205;
			switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1182; Match(DO);
				State = 1183; endOfStatement();
				State = 1184; block();
				State = 1185; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1187; Match(DO);
				State = 1188; whiteSpace();
				State = 1189;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1190; whiteSpace();
				State = 1191; expression(0);
				State = 1192; endOfStatement();
				State = 1193; block();
				State = 1194; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1196; Match(DO);
				State = 1197; endOfStatement();
				State = 1198; block();
				State = 1199; Match(LOOP);
				State = 1200; whiteSpace();
				State = 1201;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1202; whiteSpace();
				State = 1203; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1207; visibility();
				State = 1208; whiteSpace();
				}
			}

			State = 1212; Match(ENUM);
			State = 1213; whiteSpace();
			State = 1214; identifier();
			State = 1215; endOfStatement();
			State = 1219;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TYPEOF - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WIDTH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LOAD - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				{
				State = 1216; enumerationStmt_Constant();
				}
				}
				State = 1221;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1222; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1224; identifier();
			State = 1233;
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				State = 1226;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1225; whiteSpace();
					}
				}

				State = 1228; Match(EQ);
				State = 1230;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1229; whiteSpace();
					}
				}

				State = 1232; expression(0);
				}
				break;
			}
			State = 1235; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239; Match(ERASE);
			State = 1240; whiteSpace();
			State = 1241; expression(0);
			State = 1252;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,134,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1243;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1242; whiteSpace();
						}
					}

					State = 1245; Match(COMMA);
					State = 1247;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1246; whiteSpace();
						}
					}

					State = 1249; expression(0);
					}
					} 
				}
				State = 1254;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,134,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1255; Match(ERROR);
			State = 1256; whiteSpace();
			State = 1257; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1262;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1259; visibility();
				State = 1260; whiteSpace();
				}
			}

			State = 1264; Match(EVENT);
			State = 1265; whiteSpace();
			State = 1266; identifier();
			State = 1268;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1267; whiteSpace();
				}
			}

			State = 1270; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1272;
			_la = _input.La(1);
			if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (EXIT_DO - 104)) | (1L << (EXIT_FOR - 104)) | (1L << (EXIT_FUNCTION - 104)) | (1L << (EXIT_PROPERTY - 104)) | (1L << (EXIT_SUB - 104)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_forEachStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1274; Match(FOR);
			State = 1275; whiteSpace();
			State = 1276; Match(EACH);
			State = 1277; whiteSpace();
			State = 1278; expression(0);
			State = 1279; whiteSpace();
			State = 1280; Match(IN);
			State = 1281; whiteSpace();
			State = 1282; expression(0);
			State = 1283; endOfStatement();
			State = 1284; block();
			State = 1285; Match(NEXT);
			State = 1289;
			switch ( Interpreter.AdaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				State = 1286; whiteSpace();
				State = 1287; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_forNextStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1291; Match(FOR);
			State = 1292; whiteSpace();
			State = 1293; expression(0);
			State = 1294; whiteSpace();
			State = 1295; Match(TO);
			State = 1296; whiteSpace();
			State = 1297; expression(0);
			State = 1303;
			switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				State = 1298; whiteSpace();
				State = 1299; Match(STEP);
				State = 1300; whiteSpace();
				State = 1301; expression(0);
				}
				break;
			}
			State = 1305; endOfStatement();
			State = 1306; block();
			State = 1307; Match(NEXT);
			State = 1311;
			switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
			case 1:
				{
				State = 1308; whiteSpace();
				State = 1309; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1313; visibility();
				State = 1314; whiteSpace();
				}
			}

			State = 1320;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1318; Match(STATIC);
				State = 1319; whiteSpace();
				}
			}

			State = 1322; Match(FUNCTION);
			State = 1324;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1323; whiteSpace();
				}
			}

			State = 1326; functionName();
			State = 1331;
			switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				State = 1328;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1327; whiteSpace();
					}
				}

				State = 1330; argList();
				}
				break;
			}
			State = 1337;
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				State = 1334;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1333; whiteSpace();
					}
				}

				State = 1336; asTypeClause();
				}
				break;
			}
			State = 1339; endOfStatement();
			State = 1340; block();
			State = 1341; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1343; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1345; Match(GOSUB);
			State = 1346; whiteSpace();
			State = 1347; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1349; Match(GOTO);
			State = 1350; whiteSpace();
			State = 1351; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<ElseIfBlockContext> elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1353; Match(IF);
			State = 1354; whiteSpace();
			State = 1355; booleanExpression();
			State = 1356; whiteSpace();
			State = 1357; Match(THEN);
			State = 1358; endOfStatement();
			State = 1359; block();
			State = 1363;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ELSEIF) {
				{
				{
				State = 1360; elseIfBlock();
				}
				}
				State = 1365;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1367;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 1366; elseBlock();
				}
			}

			State = 1369; Match(END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_elseIfBlock);
		int _la;
		try {
			State = 1389;
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1371; Match(ELSEIF);
				State = 1372; whiteSpace();
				State = 1373; booleanExpression();
				State = 1374; whiteSpace();
				State = 1375; Match(THEN);
				State = 1376; endOfStatement();
				State = 1377; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1379; Match(ELSEIF);
				State = 1380; whiteSpace();
				State = 1381; booleanExpression();
				State = 1382; whiteSpace();
				State = 1383; Match(THEN);
				State = 1385;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1384; whiteSpace();
					}
				}

				State = 1387; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1391; Match(ELSE);
			State = 1392; endOfStatement();
			State = 1393; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineIfStmtContext : ParserRuleContext {
		public IfWithEmptyThenContext ifWithEmptyThen() {
			return GetRuleContext<IfWithEmptyThenContext>(0);
		}
		public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
			return GetRuleContext<IfWithNonEmptyThenContext>(0);
		}
		public SingleLineIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineIfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineIfStmtContext singleLineIfStmt() {
		SingleLineIfStmtContext _localctx = new SingleLineIfStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_singleLineIfStmt);
		try {
			State = 1397;
			switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1395; ifWithNonEmptyThen();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1396; ifWithEmptyThen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithNonEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public IfWithNonEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithNonEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithNonEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithNonEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithNonEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
		IfWithNonEmptyThenContext _localctx = new IfWithNonEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_ifWithNonEmptyThen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1399; Match(IF);
			State = 1401;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1400; whiteSpace();
				}
			}

			State = 1403; booleanExpression();
			State = 1405;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1404; whiteSpace();
				}
			}

			State = 1407; Match(THEN);
			State = 1409;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1408; whiteSpace();
				}
			}

			State = 1411; listOrLabel();
			State = 1415;
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				State = 1412; whiteSpace();
				State = 1413; singleLineElseClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public IfWithEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithEmptyThenContext ifWithEmptyThen() {
		IfWithEmptyThenContext _localctx = new IfWithEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_ifWithEmptyThen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1417; Match(IF);
			State = 1419;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1418; whiteSpace();
				}
			}

			State = 1421; booleanExpression();
			State = 1423;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1422; whiteSpace();
				}
			}

			State = 1425; Match(THEN);
			State = 1426; endOfStatement();
			State = 1428;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1427; whiteSpace();
				}
			}

			State = 1430; singleLineElseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineElseClauseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public SingleLineElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineElseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineElseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineElseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineElseClauseContext singleLineElseClause() {
		SingleLineElseClauseContext _localctx = new SingleLineElseClauseContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_singleLineElseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1432; Match(ELSE);
			State = 1434;
			switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				State = 1433; whiteSpace();
				}
				break;
			}
			State = 1437;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				State = 1436; listOrLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOrLabelContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public SameLineStatementContext sameLineStatement(int i) {
			return GetRuleContext<SameLineStatementContext>(i);
		}
		public IReadOnlyList<SameLineStatementContext> sameLineStatement() {
			return GetRuleContexts<SameLineStatementContext>();
		}
		public ListOrLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOrLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterListOrLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitListOrLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOrLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOrLabelContext listOrLabel() {
		ListOrLabelContext _localctx = new ListOrLabelContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_listOrLabel);
		int _la;
		try {
			int _alt;
			State = 1477;
			switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1439; lineNumberLabel();
				State = 1452;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,164,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1441;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1440; whiteSpace();
							}
						}

						State = 1443; Match(COLON);
						State = 1445;
						switch ( Interpreter.AdaptivePredict(_input,162,_ctx) ) {
						case 1:
							{
							State = 1444; whiteSpace();
							}
							break;
						}
						State = 1448;
						switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
						case 1:
							{
							State = 1447; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1454;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,164,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1459;
				_la = _input.La(1);
				if (_la==COLON) {
					{
					State = 1455; Match(COLON);
					State = 1457;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1456; whiteSpace();
						}
					}

					}
				}

				State = 1461; sameLineStatement();
				State = 1474;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,170,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1463;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1462; whiteSpace();
							}
						}

						State = 1465; Match(COLON);
						State = 1467;
						switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
						case 1:
							{
							State = 1466; whiteSpace();
							}
							break;
						}
						State = 1470;
						switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
						case 1:
							{
							State = 1469; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1476;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,170,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SameLineStatementContext : ParserRuleContext {
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public SameLineStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sameLineStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSameLineStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSameLineStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSameLineStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SameLineStatementContext sameLineStatement() {
		SameLineStatementContext _localctx = new SameLineStatementContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_sameLineStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1479; blockStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_booleanExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1481; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1483; Match(IMPLEMENTS);
			State = 1484; whiteSpace();
			State = 1485; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1489;
			_la = _input.La(1);
			if (_la==LET) {
				{
				State = 1487; Match(LET);
				State = 1488; whiteSpace();
				}
			}

			State = 1491; lExpression(0);
			State = 1493;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1492; whiteSpace();
				}
			}

			State = 1495; Match(EQ);
			State = 1497;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1496; whiteSpace();
				}
			}

			State = 1499; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1501; Match(LSET);
			State = 1502; whiteSpace();
			State = 1503; expression(0);
			State = 1505;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1504; whiteSpace();
				}
			}

			State = 1507; Match(EQ);
			State = 1509;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1508; whiteSpace();
				}
			}

			State = 1511; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParser.ON_LOCAL_ERROR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1514; whiteSpace();
			State = 1523;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1515; Match(GOTO);
				State = 1516; whiteSpace();
				State = 1517; expression(0);
				}
				break;
			case RESUME:
				{
				State = 1519; Match(RESUME);
				State = 1520; whiteSpace();
				State = 1521; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1525; Match(ON);
			State = 1526; whiteSpace();
			State = 1527; expression(0);
			State = 1528; whiteSpace();
			State = 1529; Match(GOTO);
			State = 1530; whiteSpace();
			State = 1531; expression(0);
			State = 1542;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,180,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1533;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1532; whiteSpace();
						}
					}

					State = 1535; Match(COMMA);
					State = 1537;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1536; whiteSpace();
						}
					}

					State = 1539; expression(0);
					}
					} 
				}
				State = 1544;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,180,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1545; Match(ON);
			State = 1546; whiteSpace();
			State = 1547; expression(0);
			State = 1548; whiteSpace();
			State = 1549; Match(GOSUB);
			State = 1550; whiteSpace();
			State = 1551; expression(0);
			State = 1562;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,183,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1553;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1552; whiteSpace();
						}
					}

					State = 1555; Match(COMMA);
					State = 1557;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1556; whiteSpace();
						}
					}

					State = 1559; expression(0);
					}
					} 
				}
				State = 1564;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,183,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1568;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1565; visibility();
				State = 1566; whiteSpace();
				}
			}

			State = 1572;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1570; Match(STATIC);
				State = 1571; whiteSpace();
				}
			}

			State = 1574; Match(PROPERTY_GET);
			State = 1575; whiteSpace();
			State = 1576; functionName();
			State = 1581;
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				State = 1578;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1577; whiteSpace();
					}
				}

				State = 1580; argList();
				}
				break;
			}
			State = 1586;
			switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				State = 1583; whiteSpace();
				State = 1584; asTypeClause();
				}
				break;
			}
			State = 1588; endOfStatement();
			State = 1589; block();
			State = 1590; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1595;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1592; visibility();
				State = 1593; whiteSpace();
				}
			}

			State = 1599;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1597; Match(STATIC);
				State = 1598; whiteSpace();
				}
			}

			State = 1601; Match(PROPERTY_SET);
			State = 1602; whiteSpace();
			State = 1603; subroutineName();
			State = 1608;
			switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				State = 1605;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1604; whiteSpace();
					}
				}

				State = 1607; argList();
				}
				break;
			}
			State = 1610; endOfStatement();
			State = 1611; block();
			State = 1612; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1617;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1614; visibility();
				State = 1615; whiteSpace();
				}
			}

			State = 1621;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1619; Match(STATIC);
				State = 1620; whiteSpace();
				}
			}

			State = 1623; Match(PROPERTY_LET);
			State = 1624; whiteSpace();
			State = 1625; subroutineName();
			State = 1630;
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 1627;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1626; whiteSpace();
					}
				}

				State = 1629; argList();
				}
				break;
			}
			State = 1632; endOfStatement();
			State = 1633; block();
			State = 1634; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EventArgumentListContext eventArgumentList() {
			return GetRuleContext<EventArgumentListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1636; Match(RAISEEVENT);
			State = 1637; whiteSpace();
			State = 1638; identifier();
			State = 1653;
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				State = 1640;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1639; whiteSpace();
					}
				}

				State = 1642; Match(LPAREN);
				State = 1644;
				switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					State = 1643; whiteSpace();
					}
					break;
				}
				State = 1647;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TYPEOF - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WIDTH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LOAD - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
					{
					State = 1646; eventArgumentList();
					}
				}

				State = 1650;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1649; whiteSpace();
					}
				}

				State = 1652; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventArgumentListContext : ParserRuleContext {
		public EventArgumentContext eventArgument(int i) {
			return GetRuleContext<EventArgumentContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<EventArgumentContext> eventArgument() {
			return GetRuleContexts<EventArgumentContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public EventArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventArgumentListContext eventArgumentList() {
		EventArgumentListContext _localctx = new EventArgumentListContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_eventArgumentList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1655; eventArgument();
			State = 1666;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,204,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1657;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1656; whiteSpace();
						}
					}

					State = 1659; Match(COMMA);
					State = 1661;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1660; whiteSpace();
						}
					}

					State = 1663; eventArgument();
					}
					} 
				}
				State = 1668;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,204,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EventArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventArgumentContext eventArgument() {
		EventArgumentContext _localctx = new EventArgumentContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_eventArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public RedimDeclarationListContext redimDeclarationList() {
			return GetRuleContext<RedimDeclarationListContext>(0);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_redimStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1671; Match(REDIM);
			State = 1672; whiteSpace();
			State = 1675;
			switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				State = 1673; Match(PRESERVE);
				State = 1674; whiteSpace();
				}
				break;
			}
			State = 1677; redimDeclarationList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimDeclarationListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<RedimVariableDeclarationContext> redimVariableDeclaration() {
			return GetRuleContexts<RedimVariableDeclarationContext>();
		}
		public RedimVariableDeclarationContext redimVariableDeclaration(int i) {
			return GetRuleContext<RedimVariableDeclarationContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public RedimDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimDeclarationListContext redimDeclarationList() {
		RedimDeclarationListContext _localctx = new RedimDeclarationListContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_redimDeclarationList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1679; redimVariableDeclaration();
			State = 1690;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,208,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1681;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1680; whiteSpace();
						}
					}

					State = 1683; Match(COMMA);
					State = 1685;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1684; whiteSpace();
						}
					}

					State = 1687; redimVariableDeclaration();
					}
					} 
				}
				State = 1692;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,208,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimVariableDeclarationContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RedimVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimVariableDeclarationContext redimVariableDeclaration() {
		RedimVariableDeclarationContext _localctx = new RedimVariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_redimVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1693; expression(0);
			State = 1697;
			switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				State = 1694; whiteSpace();
				State = 1695; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IntegerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIntegerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIntegerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerExpressionContext integerExpression() {
		IntegerExpressionContext _localctx = new IntegerExpressionContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_integerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1699; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStmtContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStmtContext callStmt() {
		CallStmtContext _localctx = new CallStmtContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_callStmt);
		try {
			State = 1711;
			switch (_input.La(1)) {
			case CALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1701; Match(CALL);
				State = 1702; whiteSpace();
				State = 1703; expression(0);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SGN:
			case UBOUND:
			case EXCLAMATIONPOINT:
			case DOT:
			case HASH:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case EMPTY:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case LPAREN:
			case MINUS:
			case L_SQUARE_BRACKET:
			case STRINGLITERAL:
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
			case DATELITERAL:
			case IDENTIFIER:
			case LOAD:
			case RESUME_NEXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1705; expression(0);
				State = 1709;
				switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
				case 1:
					{
					State = 1706; whiteSpace();
					State = 1707; argumentList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1713; Match(RESUME);
			State = 1719;
			switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				State = 1714; whiteSpace();
				State = 1717;
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 1715; Match(NEXT);
					}
					break;
				case ABS:
				case ANY:
				case ARRAY:
				case CBOOL:
				case CBYTE:
				case CCUR:
				case CDATE:
				case CDBL:
				case CDEC:
				case CINT:
				case CLNG:
				case CLNGLNG:
				case CLNGPTR:
				case CSNG:
				case CSTR:
				case CURRENCY:
				case CVAR:
				case CVERR:
				case DEBUG:
				case DOEVENTS:
				case FIX:
				case INPUTB:
				case INT:
				case LBOUND:
				case LEN:
				case LENB:
				case LONGLONG:
				case LONGPTR:
				case MIDB:
				case MIDBTYPESUFFIX:
				case MIDTYPESUFFIX:
				case PSET:
				case SGN:
				case UBOUND:
				case EXCLAMATIONPOINT:
				case DOT:
				case HASH:
				case ACCESS:
				case ADDRESSOF:
				case ALIAS:
				case AND:
				case ATTRIBUTE:
				case APPEND:
				case BEGIN:
				case BINARY:
				case BOOLEAN:
				case BYVAL:
				case BYREF:
				case BYTE:
				case CLASS:
				case CLOSE:
				case DATABASE:
				case DATE:
				case DOUBLE:
				case EMPTY:
				case END:
				case EQV:
				case ERROR:
				case FALSE:
				case GET:
				case IMP:
				case IN:
				case INPUT:
				case IS:
				case INTEGER:
				case LOCK:
				case LONG:
				case LIB:
				case LIKE:
				case LINE_INPUT:
				case LOCK_READ:
				case LOCK_WRITE:
				case LOCK_READ_WRITE:
				case ME:
				case MID:
				case MOD:
				case NEW:
				case NOT:
				case NOTHING:
				case NULL:
				case OBJECT:
				case ON_ERROR:
				case OPEN:
				case OPTIONAL:
				case OR:
				case OUTPUT:
				case PARAMARRAY:
				case PRESERVE:
				case PRINT:
				case PTRSAFE:
				case PUT:
				case RANDOM:
				case READ:
				case READ_WRITE:
				case REM:
				case RESET:
				case SEEK:
				case SHARED:
				case SINGLE:
				case SPC:
				case STEP:
				case STRING:
				case TAB:
				case TEXT:
				case THEN:
				case TO:
				case TRUE:
				case TYPEOF:
				case UNLOCK:
				case UNTIL:
				case VARIANT:
				case VERSION:
				case WIDTH:
				case WITHEVENTS:
				case WRITE:
				case XOR:
				case LPAREN:
				case MINUS:
				case L_SQUARE_BRACKET:
				case STRINGLITERAL:
				case OCTLITERAL:
				case HEXLITERAL:
				case FLOATLITERAL:
				case INTEGERLITERAL:
				case DATELITERAL:
				case IDENTIFIER:
				case LOAD:
				case RESUME_NEXT:
					{
					State = 1716; expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1721; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1723; Match(RSET);
			State = 1724; whiteSpace();
			State = 1725; expression(0);
			State = 1727;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1726; whiteSpace();
				}
			}

			State = 1729; Match(EQ);
			State = 1731;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1730; whiteSpace();
				}
			}

			State = 1733; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1735; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public IReadOnlyList<CaseClauseContext> caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public SelectExpressionContext selectExpression() {
			return GetRuleContext<SelectExpressionContext>(0);
		}
		public CaseElseClauseContext caseElseClause() {
			return GetRuleContext<CaseElseClauseContext>(0);
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_selectCaseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1737; Match(SELECT);
			State = 1739;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1738; whiteSpace();
				}
			}

			State = 1741; Match(CASE);
			State = 1743;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1742; whiteSpace();
				}
			}

			State = 1745; selectExpression();
			State = 1746; endOfStatement();
			State = 1750;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,218,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1747; caseClause();
					}
					} 
				}
				State = 1752;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,218,_ctx);
			}
			State = 1754;
			_la = _input.La(1);
			if (_la==CASE) {
				{
				State = 1753; caseElseClause();
				}
			}

			State = 1756; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectExpressionContext selectExpression() {
		SelectExpressionContext _localctx = new SelectExpressionContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_selectExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1758; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public IReadOnlyList<RangeClauseContext> rangeClause() {
			return GetRuleContexts<RangeClauseContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public RangeClauseContext rangeClause(int i) {
			return GetRuleContext<RangeClauseContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_caseClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1760; Match(CASE);
			State = 1761; whiteSpace();
			State = 1762; rangeClause();
			State = 1773;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,222,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1764;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1763; whiteSpace();
						}
					}

					State = 1766; Match(COMMA);
					State = 1768;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1767; whiteSpace();
						}
					}

					State = 1770; rangeClause();
					}
					} 
				}
				State = 1775;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,222,_ctx);
			}
			State = 1776; endOfStatement();
			State = 1777; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseElseClauseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CaseElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseElseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseElseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseElseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseElseClauseContext caseElseClause() {
		CaseElseClauseContext _localctx = new CaseElseClauseContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_caseElseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1779; Match(CASE);
			State = 1781;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1780; whiteSpace();
				}
			}

			State = 1783; Match(ELSE);
			State = 1784; endOfStatement();
			State = 1785; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public SelectEndValueContext selectEndValue() {
			return GetRuleContext<SelectEndValueContext>(0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SelectStartValueContext selectStartValue() {
			return GetRuleContext<SelectStartValueContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RangeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRangeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRangeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeClauseContext rangeClause() {
		RangeClauseContext _localctx = new RangeClauseContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_rangeClause);
		int _la;
		try {
			State = 1806;
			switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1787; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1788; selectStartValue();
				State = 1789; whiteSpace();
				State = 1790; Match(TO);
				State = 1791; whiteSpace();
				State = 1792; selectEndValue();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1798;
				switch ( Interpreter.AdaptivePredict(_input,225,_ctx) ) {
				case 1:
					{
					State = 1794; Match(IS);
					State = 1796;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1795; whiteSpace();
						}
					}

					}
					break;
				}
				State = 1800; comparisonOperator();
				State = 1802;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1801; whiteSpace();
					}
				}

				State = 1804; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStartValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectStartValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStartValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectStartValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectStartValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStartValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStartValueContext selectStartValue() {
		SelectStartValueContext _localctx = new SelectStartValueContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_selectStartValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1808; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectEndValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectEndValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectEndValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectEndValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectEndValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectEndValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectEndValueContext selectEndValue() {
		SelectEndValueContext _localctx = new SelectEndValueContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_selectEndValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1810; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812; Match(SET);
			State = 1813; whiteSpace();
			State = 1814; lExpression(0);
			State = 1816;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1815; whiteSpace();
				}
			}

			State = 1818; Match(EQ);
			State = 1820;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1819; whiteSpace();
				}
			}

			State = 1822; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1827;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1824; visibility();
				State = 1825; whiteSpace();
				}
			}

			State = 1831;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1829; Match(STATIC);
				State = 1830; whiteSpace();
				}
			}

			State = 1833; Match(SUB);
			State = 1835;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1834; whiteSpace();
				}
			}

			State = 1837; subroutineName();
			State = 1842;
			switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				State = 1839;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1838; whiteSpace();
					}
				}

				State = 1841; argList();
				}
				break;
			}
			State = 1844; endOfStatement();
			State = 1845; block();
			State = 1846; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubroutineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubroutineName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubroutineName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineNameContext subroutineName() {
		SubroutineNameContext _localctx = new SubroutineNameContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_subroutineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1848; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1853;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1850; visibility();
				State = 1851; whiteSpace();
				}
			}

			State = 1855; Match(TYPE);
			State = 1856; whiteSpace();
			State = 1857; identifier();
			State = 1858; endOfStatement();
			State = 1862;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TYPEOF - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WIDTH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LOAD - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				{
				State = 1859; typeStmt_Element();
				}
				}
				State = 1864;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1865; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1867; identifier();
			State = 1882;
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				State = 1869;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1868; whiteSpace();
					}
				}

				State = 1871; Match(LPAREN);
				State = 1876;
				switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
				case 1:
					{
					State = 1873;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1872; whiteSpace();
						}
					}

					State = 1875; subscripts();
					}
					break;
				}
				State = 1879;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1878; whiteSpace();
					}
				}

				State = 1881; Match(RPAREN);
				}
				break;
			}
			State = 1887;
			switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				State = 1884; whiteSpace();
				State = 1885; asTypeClause();
				}
				break;
			}
			State = 1889; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1894;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 1891; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 1892; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 1893; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1896; whiteSpace();
			State = 1899;
			switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				State = 1897; Match(WITHEVENTS);
				State = 1898; whiteSpace();
				}
				break;
			}
			State = 1901; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1903; variableSubStmt();
			State = 1914;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,247,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1905;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1904; whiteSpace();
						}
					}

					State = 1907; Match(COMMA);
					State = 1909;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1908; whiteSpace();
						}
					}

					State = 1911; variableSubStmt();
					}
					} 
				}
				State = 1916;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,247,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1917; identifier();
			State = 1935;
			switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
			case 1:
				{
				State = 1919;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1918; whiteSpace();
					}
				}

				State = 1921; Match(LPAREN);
				State = 1923;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1922; whiteSpace();
					}
				}

				State = 1929;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TYPEOF - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WIDTH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LOAD - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
					{
					State = 1925; subscripts();
					State = 1927;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1926; whiteSpace();
						}
					}

					}
				}

				State = 1931; Match(RPAREN);
				State = 1933;
				switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					State = 1932; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 1940;
			switch ( Interpreter.AdaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				State = 1937; whiteSpace();
				State = 1938; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_whileWendStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1942; Match(WHILE);
			State = 1943; whiteSpace();
			State = 1944; expression(0);
			State = 1945; endOfStatement();
			State = 1946; block();
			State = 1947; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_withStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1949; Match(WITH);
			State = 1950; whiteSpace();
			State = 1951; expression(0);
			State = 1952; endOfStatement();
			State = 1953; block();
			State = 1954; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CircleSpecialFormContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ITerminalNode CIRCLE() { return GetToken(VBAParser.CIRCLE, 0); }
		public CircleSpecialFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_circleSpecialForm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCircleSpecialForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCircleSpecialForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCircleSpecialForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CircleSpecialFormContext circleSpecialForm() {
		CircleSpecialFormContext _localctx = new CircleSpecialFormContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_circleSpecialForm);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1964;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TYPEOF - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WIDTH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LOAD - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 1956; expression(0);
				State = 1958;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1957; whiteSpace();
					}
				}

				State = 1960; Match(DOT);
				State = 1962;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1961; whiteSpace();
					}
				}

				}
			}

			State = 1966; Match(CIRCLE);
			State = 1967; whiteSpace();
			State = 1972;
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 1968; Match(STEP);
				State = 1970;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1969; whiteSpace();
					}
				}

				}
			}

			State = 1974; tuple();
			State = 1983;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1976;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1975; whiteSpace();
						}
					}

					State = 1978; Match(COMMA);
					State = 1980;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1979; whiteSpace();
						}
					}

					State = 1982; expression(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1985;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,262,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScaleSpecialFormContext : ParserRuleContext {
		public ITerminalNode SCALE() { return GetToken(VBAParser.SCALE, 0); }
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<TupleContext> tuple() {
			return GetRuleContexts<TupleContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TupleContext tuple(int i) {
			return GetRuleContext<TupleContext>(i);
		}
		public ScaleSpecialFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scaleSpecialForm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterScaleSpecialForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitScaleSpecialForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScaleSpecialForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScaleSpecialFormContext scaleSpecialForm() {
		ScaleSpecialFormContext _localctx = new ScaleSpecialFormContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_scaleSpecialForm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1995;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TYPEOF - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WIDTH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LPAREN - 192)) | (1L << (MINUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LOAD - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				State = 1987; expression(0);
				State = 1989;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1988; whiteSpace();
					}
				}

				State = 1991; Match(DOT);
				State = 1993;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1992; whiteSpace();
					}
				}

				}
			}

			State = 1997; Match(SCALE);
			State = 1998; whiteSpace();
			State = 1999; tuple();
			State = 2001;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2000; whiteSpace();
				}
			}

			State = 2003; Match(MINUS);
			State = 2005;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2004; whiteSpace();
				}
			}

			State = 2007; tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2009; Match(LPAREN);
			State = 2011;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2010; whiteSpace();
				}
			}

			State = 2013; expression(0);
			State = 2015;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2014; whiteSpace();
				}
			}

			State = 2017; Match(COMMA);
			State = 2019;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2018; whiteSpace();
				}
			}

			State = 2021; expression(0);
			State = 2023;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2022; whiteSpace();
				}
			}

			State = 2025; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2027; subscript();
			State = 2038;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,274,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2029;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2028; whiteSpace();
						}
					}

					State = 2031; Match(COMMA);
					State = 2033;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2032; whiteSpace();
						}
					}

					State = 2035; subscript();
					}
					} 
				}
				State = 2040;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,274,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2046;
			switch ( Interpreter.AdaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				State = 2041; expression(0);
				State = 2042; whiteSpace();
				State = 2043; Match(TO);
				State = 2044; whiteSpace();
				}
				break;
			}
			State = 2048; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnrestrictedIdentifierContext : ParserRuleContext {
		public MarkerKeywordContext markerKeyword() {
			return GetRuleContext<MarkerKeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementKeywordContext statementKeyword() {
			return GetRuleContext<StatementKeywordContext>(0);
		}
		public UnrestrictedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unrestrictedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnrestrictedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnrestrictedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnrestrictedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnrestrictedIdentifierContext unrestrictedIdentifier() {
		UnrestrictedIdentifierContext _localctx = new UnrestrictedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_unrestrictedIdentifier);
		try {
			State = 2053;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
			case LOAD:
			case RESUME_NEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2050; identifier();
				}
				break;
			case EXIT:
			case OPTION:
			case CALL:
			case CASE:
			case CONST:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case ELSE:
			case ELSEIF:
			case END_SELECT:
			case END_WITH:
			case ENUM:
			case ERASE:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMPLEMENTS:
			case LOOP:
			case LET:
			case LSET:
			case NEXT:
			case ON:
			case PRIVATE:
			case PUBLIC:
			case RAISEEVENT:
			case REDIM:
			case RESUME:
			case RETURN:
			case RSET:
			case SELECT:
			case SET:
			case STATIC:
			case STOP:
			case SUB:
			case TYPE:
			case WEND:
			case WHILE:
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2051; statementKeyword();
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2052; markerKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public UntypedIdentifierContext untypedIdentifier() {
			return GetRuleContext<UntypedIdentifierContext>(0);
		}
		public TypedIdentifierContext typedIdentifier() {
			return GetRuleContext<TypedIdentifierContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_identifier);
		try {
			State = 2057;
			switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2055; untypedIdentifier();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2056; typedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntypedIdentifierContext : ParserRuleContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public UntypedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untypedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUntypedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUntypedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntypedIdentifierContext untypedIdentifier() {
		UntypedIdentifierContext _localctx = new UntypedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_untypedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2059; identifierValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdentifierContext : ParserRuleContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public TypedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdentifierContext typedIdentifier() {
		TypedIdentifierContext _localctx = new TypedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_typedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2061; identifierValue();
			State = 2062; typeHint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierValueContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParser.IDENTIFIER, 0); }
		public ForeignNameContext foreignName() {
			return GetRuleContext<ForeignNameContext>(0);
		}
		public IdentifierValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifierValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifierValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierValueContext identifierValue() {
		IdentifierValueContext _localctx = new IdentifierValueContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_identifierValue);
		try {
			State = 2067;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2064; Match(IDENTIFIER);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case LOAD:
			case RESUME_NEXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2065; keyword();
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2066; foreignName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeignNameContext : ParserRuleContext {
		public IReadOnlyList<ForeignIdentifierContext> foreignIdentifier() {
			return GetRuleContexts<ForeignIdentifierContext>();
		}
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public ForeignIdentifierContext foreignIdentifier(int i) {
			return GetRuleContext<ForeignIdentifierContext>(i);
		}
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public ForeignNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreignName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForeignName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForeignName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeignNameContext foreignName() {
		ForeignNameContext _localctx = new ForeignNameContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_foreignName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2069; Match(L_SQUARE_BRACKET);
			State = 2073;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << COMMA) | (1L << COLON) | (1L << SEMICOLON) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_ENUM - 64)) | (1L << (END_FUNCTION - 64)) | (1L << (END_IF - 64)) | (1L << (END_PROPERTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_SUB - 64)) | (1L << (END_TYPE - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OPTION_BASE - 128)) | (1L << (OPTION_EXPLICIT - 128)) | (1L << (OPTION_COMPARE - 128)) | (1L << (OPTION_PRIVATE_MODULE - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TYPEOF - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (ASSIGN - 192)) | (1L << (DIV - 192)) | (1L << (INTDIV - 192)) | (1L << (EQ - 192)) | (1L << (GEQ - 192)) | (1L << (GT - 192)) | (1L << (LEQ - 192)) | (1L << (LPAREN - 192)) | (1L << (LT - 192)) | (1L << (MINUS - 192)) | (1L << (MULT - 192)) | (1L << (NEQ - 192)) | (1L << (PLUS - 192)) | (1L << (POW - 192)) | (1L << (RPAREN - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (NEWLINE - 192)) | (1L << (SINGLEQUOTE - 192)) | (1L << (UNDERSCORE - 192)) | (1L << (WS - 192)) | (1L << (GUIDLITERAL - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (ERRORCHAR - 192)) | (1L << (LOAD - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) {
				{
				{
				State = 2070; foreignIdentifier();
				}
				}
				State = 2075;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2076; Match(R_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeignIdentifierContext : ParserRuleContext {
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public ForeignNameContext foreignName() {
			return GetRuleContext<ForeignNameContext>(0);
		}
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public ForeignIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreignIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForeignIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForeignIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeignIdentifierContext foreignIdentifier() {
		ForeignIdentifierContext _localctx = new ForeignIdentifierContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_foreignIdentifier);
		int _la;
		try {
			State = 2080;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case EXIT:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case OPTION:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case COMMA:
			case COLON:
			case SEMICOLON:
			case EXCLAMATIONPOINT:
			case DOT:
			case HASH:
			case AT:
			case PERCENT:
			case DOLLAR:
			case AMPERSAND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case AS:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CLASS:
			case CLOSE:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case EMPTY:
			case END_ENUM:
			case END_FUNCTION:
			case END_IF:
			case END_PROPERTY:
			case END_SELECT:
			case END_SUB:
			case END_TYPE:
			case END_WITH:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case LSET:
			case ME:
			case MID:
			case MOD:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON:
			case ON_ERROR:
			case ON_LOCAL_ERROR:
			case OPEN:
			case OPTIONAL:
			case OPTION_BASE:
			case OPTION_EXPLICIT:
			case OPTION_COMPARE:
			case OPTION_PRIVATE_MODULE:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PROPERTY_GET:
			case PROPERTY_LET:
			case PROPERTY_SET:
			case PTRSAFE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RAISEEVENT:
			case READ:
			case READ_WRITE:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RSET:
			case SEEK:
			case SELECT:
			case SET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case ASSIGN:
			case DIV:
			case INTDIV:
			case EQ:
			case GEQ:
			case GT:
			case LEQ:
			case LPAREN:
			case LT:
			case MINUS:
			case MULT:
			case NEQ:
			case PLUS:
			case POW:
			case RPAREN:
			case STRINGLITERAL:
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
			case DATELITERAL:
			case NEWLINE:
			case SINGLEQUOTE:
			case UNDERSCORE:
			case WS:
			case GUIDLITERAL:
			case IDENTIFIER:
			case LINE_CONTINUATION:
			case ERRORCHAR:
			case LOAD:
			case RESUME_NEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2078;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==L_SQUARE_BRACKET || _la==R_SQUARE_BRACKET) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2079; foreignName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_asTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2082; Match(AS);
			State = 2084;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2083; whiteSpace();
				}
			}

			State = 2088;
			switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
			case 1:
				{
				State = 2086; Match(NEW);
				State = 2087; whiteSpace();
				}
				break;
			}
			State = 2090; type();
			State = 2095;
			switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				State = 2092;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2091; whiteSpace();
					}
				}

				State = 2094; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode ANY() { return GetToken(VBAParser.ANY, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2097;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANY) | (1L << CURRENCY) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << BOOLEAN) | (1L << BYTE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DATE - 68)) | (1L << (DOUBLE - 68)) | (1L << (INTEGER - 68)) | (1L << (LONG - 68)))) != 0) || ((((_la - 179)) & ~0x3f) == 0 && ((1L << (_la - 179)) & ((1L << (SINGLE - 179)) | (1L << (STRING - 179)) | (1L << (VARIANT - 179)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2099;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (EQ - 207)) | (1L << (GEQ - 207)) | (1L << (GT - 207)) | (1L << (LEQ - 207)) | (1L << (LT - 207)) | (1L << (NEQ - 207)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_complexType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2101; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2103; Match(MULT);
			State = 2105;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2104; whiteSpace();
				}
			}

			State = 2107; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLabelDefinitionContext : ParserRuleContext {
		public StatementLabelContext statementLabel() {
			return GetRuleContext<StatementLabelContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public StatementLabelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLabelDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementLabelDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementLabelDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLabelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLabelDefinitionContext statementLabelDefinition() {
		StatementLabelDefinitionContext _localctx = new StatementLabelDefinitionContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_statementLabelDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2109; statementLabel();
			State = 2111;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2110; whiteSpace();
				}
			}

			State = 2113; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLabelContext : ParserRuleContext {
		public IdentifierStatementLabelContext identifierStatementLabel() {
			return GetRuleContext<IdentifierStatementLabelContext>(0);
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public StatementLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLabelContext statementLabel() {
		StatementLabelContext _localctx = new StatementLabelContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_statementLabel);
		try {
			State = 2117;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case EXIT:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case OPTION:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case AS:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CLASS:
			case CLOSE:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case DOUBLE:
			case ELSE:
			case ELSEIF:
			case END_SELECT:
			case END_WITH:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case LSET:
			case ME:
			case MID:
			case MOD:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PTRSAFE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RAISEEVENT:
			case READ:
			case READ_WRITE:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RSET:
			case SEEK:
			case SELECT:
			case SET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
			case LOAD:
			case RESUME_NEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2115; identifierStatementLabel();
				}
				break;
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2116; lineNumberLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStatementLabelContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IdentifierStatementLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierStatementLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifierStatementLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifierStatementLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierStatementLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStatementLabelContext identifierStatementLabel() {
		IdentifierStatementLabelContext _localctx = new IdentifierStatementLabelContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_identifierStatementLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2119; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineNumberLabelContext : ParserRuleContext {
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public LineNumberLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineNumberLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineNumberLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineNumberLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineNumberLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineNumberLabelContext lineNumberLabel() {
		LineNumberLabelContext _localctx = new LineNumberLabelContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_lineNumberLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2121; numberLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode FLOATLITERAL() { return GetToken(VBAParser.FLOATLITERAL, 0); }
		public ITerminalNode HEXLITERAL() { return GetToken(VBAParser.HEXLITERAL, 0); }
		public ITerminalNode OCTLITERAL() { return GetToken(VBAParser.OCTLITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2123;
			_la = _input.La(1);
			if ( !(((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (OCTLITERAL - 222)) | (1L << (HEXLITERAL - 222)) | (1L << (FLOATLITERAL - 222)) | (1L << (INTEGERLITERAL - 222)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2127;
			switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				State = 2125; baseType();
				}
				break;

			case 2:
				{
				State = 2126; complexType();
				}
				break;
			}
			State = 2137;
			switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
			case 1:
				{
				State = 2130;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2129; whiteSpace();
					}
				}

				State = 2132; Match(LPAREN);
				State = 2134;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2133; whiteSpace();
					}
				}

				State = 2136; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(VBAParser.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VBAParser.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ITerminalNode PERCENT() { return GetToken(VBAParser.PERCENT, 0); }
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2139;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2141;
			_la = _input.La(1);
			if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewExprContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public NewExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNewExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNewExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnaryMinusOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnaryMinusOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public PowOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPowOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPowOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AddOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofexprContext : ExpressionContext {
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeofexprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeofexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeofexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntDivOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode INTDIV() { return GetToken(VBAParser.INTDIV, 0); }
		public IntDivOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIntDivOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIntDivOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntDivOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalImpOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public LogicalImpOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalImpOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalImpOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalImpOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ConcatOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConcatOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConcatOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MarkedFileNumberExprContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public MarkedFileNumberExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkedFileNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkedFileNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkedFileNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ModOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LExprContext : ExpressionContext {
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public LExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public MultOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalXorOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalXorOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalAndOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalOrOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalOpContext : ExpressionContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public RelationalOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRelationalOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRelationalOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalEqvOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalEqvOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalEqvOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalEqvOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalEqvOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExprContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExpressionContext {
		public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public LiteralExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BuiltInTypeExprContext : ExpressionContext {
		public BuiltInTypeContext builtInType() {
			return GetRuleContext<BuiltInTypeContext>(0);
		}
		public BuiltInTypeExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBuiltInTypeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBuiltInTypeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalNotOpContext : ExpressionContext {
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LogicalNotOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalNotOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalNotOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNotOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 340;
		EnterRecursionRule(_localctx, 340, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2177;
			switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				_localctx = new TypeofexprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2144; Match(TYPEOF);
				State = 2145; whiteSpace();
				State = 2146; expression(17);
				}
				break;

			case 2:
				{
				_localctx = new NewExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2148; Match(NEW);
				State = 2149; whiteSpace();
				State = 2150; expression(16);
				}
				break;

			case 3:
				{
				_localctx = new UnaryMinusOpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2152; Match(MINUS);
				State = 2154;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2153; whiteSpace();
					}
				}

				State = 2156; expression(14);
				}
				break;

			case 4:
				{
				_localctx = new LogicalNotOpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2157; Match(NOT);
				State = 2159;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2158; whiteSpace();
					}
				}

				State = 2161; expression(7);
				}
				break;

			case 5:
				{
				_localctx = new MarkedFileNumberExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2162; Match(HASH);
				State = 2163; expression(1);
				}
				break;

			case 6:
				{
				_localctx = new LiteralExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2164; literalExpression();
				}
				break;

			case 7:
				{
				_localctx = new LExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2165; lExpression(0);
				}
				break;

			case 8:
				{
				_localctx = new BuiltInTypeExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2166; builtInType();
				}
				break;

			case 9:
				{
				_localctx = new ParenthesizedExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2167; Match(LPAREN);
				State = 2169;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2168; whiteSpace();
					}
				}

				State = 2171; expression(0);
				State = 2173;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2172; whiteSpace();
					}
				}

				State = 2175; Match(RPAREN);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2289;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,322,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2287;
					switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
					case 1:
						{
						_localctx = new PowOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2179;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2181;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2180; whiteSpace();
							}
						}

						State = 2183; Match(POW);
						State = 2185;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2184; whiteSpace();
							}
						}

						State = 2187; expression(16);
						}
						break;

					case 2:
						{
						_localctx = new MultOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2188;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 2190;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2189; whiteSpace();
							}
						}

						State = 2192;
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 2194;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2193; whiteSpace();
							}
						}

						State = 2196; expression(14);
						}
						break;

					case 3:
						{
						_localctx = new IntDivOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2197;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2199;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2198; whiteSpace();
							}
						}

						State = 2201; Match(INTDIV);
						State = 2203;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2202; whiteSpace();
							}
						}

						State = 2205; expression(13);
						}
						break;

					case 4:
						{
						_localctx = new ModOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2206;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2208;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2207; whiteSpace();
							}
						}

						State = 2210; Match(MOD);
						State = 2212;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2211; whiteSpace();
							}
						}

						State = 2214; expression(12);
						}
						break;

					case 5:
						{
						_localctx = new AddOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2215;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2217;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2216; whiteSpace();
							}
						}

						State = 2219;
						_la = _input.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 2221;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2220; whiteSpace();
							}
						}

						State = 2223; expression(11);
						}
						break;

					case 6:
						{
						_localctx = new ConcatOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2224;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2226;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2225; whiteSpace();
							}
						}

						State = 2228; Match(AMPERSAND);
						State = 2230;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2229; whiteSpace();
							}
						}

						State = 2232; expression(10);
						}
						break;

					case 7:
						{
						_localctx = new RelationalOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2233;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2235;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2234; whiteSpace();
							}
						}

						State = 2237;
						_la = _input.La(1);
						if ( !(_la==IS || _la==LIKE || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (EQ - 207)) | (1L << (GEQ - 207)) | (1L << (GT - 207)) | (1L << (LEQ - 207)) | (1L << (LT - 207)) | (1L << (NEQ - 207)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 2239;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2238; whiteSpace();
							}
						}

						State = 2241; expression(9);
						}
						break;

					case 8:
						{
						_localctx = new LogicalAndOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2242;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2244;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2243; whiteSpace();
							}
						}

						State = 2246; Match(AND);
						State = 2248;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2247; whiteSpace();
							}
						}

						State = 2250; expression(7);
						}
						break;

					case 9:
						{
						_localctx = new LogicalOrOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2251;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2253;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2252; whiteSpace();
							}
						}

						State = 2255; Match(OR);
						State = 2257;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2256; whiteSpace();
							}
						}

						State = 2259; expression(6);
						}
						break;

					case 10:
						{
						_localctx = new LogicalXorOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2260;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2262;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2261; whiteSpace();
							}
						}

						State = 2264; Match(XOR);
						State = 2266;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2265; whiteSpace();
							}
						}

						State = 2268; expression(5);
						}
						break;

					case 11:
						{
						_localctx = new LogicalEqvOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2269;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2271;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2270; whiteSpace();
							}
						}

						State = 2273; Match(EQV);
						State = 2275;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2274; whiteSpace();
							}
						}

						State = 2277; expression(4);
						}
						break;

					case 12:
						{
						_localctx = new LogicalImpOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2278;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2280;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2279; whiteSpace();
							}
						}

						State = 2282; Match(IMP);
						State = 2284;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2283; whiteSpace();
							}
						}

						State = 2286; expression(3);
						}
						break;
					}
					} 
				}
				State = 2291;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,322,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralExpressionContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public LiteralIdentifierContext literalIdentifier() {
			return GetRuleContext<LiteralIdentifierContext>(0);
		}
		public LiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExpressionContext literalExpression() {
		LiteralExpressionContext _localctx = new LiteralExpressionContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_literalExpression);
		try {
			State = 2299;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2292; numberLiteral();
				}
				break;
			case DATELITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2293; Match(DATELITERAL);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2294; Match(STRINGLITERAL);
				}
				break;
			case EMPTY:
			case FALSE:
			case NOTHING:
			case NULL:
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2295; literalIdentifier();
				State = 2297;
				switch ( Interpreter.AdaptivePredict(_input,323,_ctx) ) {
				case 1:
					{
					State = 2296; typeHint();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIdentifierContext : ParserRuleContext {
		public ObjectLiteralIdentifierContext objectLiteralIdentifier() {
			return GetRuleContext<ObjectLiteralIdentifierContext>(0);
		}
		public BooleanLiteralIdentifierContext booleanLiteralIdentifier() {
			return GetRuleContext<BooleanLiteralIdentifierContext>(0);
		}
		public VariantLiteralIdentifierContext variantLiteralIdentifier() {
			return GetRuleContext<VariantLiteralIdentifierContext>(0);
		}
		public LiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIdentifierContext literalIdentifier() {
		LiteralIdentifierContext _localctx = new LiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_literalIdentifier);
		try {
			State = 2304;
			switch (_input.La(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2301; booleanLiteralIdentifier();
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2302; objectLiteralIdentifier();
				}
				break;
			case EMPTY:
			case NULL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2303; variantLiteralIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralIdentifierContext : ParserRuleContext {
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public BooleanLiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteralIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralIdentifierContext booleanLiteralIdentifier() {
		BooleanLiteralIdentifierContext _localctx = new BooleanLiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_booleanLiteralIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2306;
			_la = _input.La(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralIdentifierContext : ParserRuleContext {
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ObjectLiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteralIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralIdentifierContext objectLiteralIdentifier() {
		ObjectLiteralIdentifierContext _localctx = new ObjectLiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_objectLiteralIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2308; Match(NOTHING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantLiteralIdentifierContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode EMPTY() { return GetToken(VBAParser.EMPTY, 0); }
		public VariantLiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantLiteralIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariantLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariantLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantLiteralIdentifierContext variantLiteralIdentifier() {
		VariantLiteralIdentifierContext _localctx = new VariantLiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_variantLiteralIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2310;
			_la = _input.La(1);
			if ( !(_la==EMPTY || _la==NULL) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LExpressionContext : ParserRuleContext {
		public LExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lExpression; } }
	 
		public LExpressionContext() { }
		public virtual void CopyFrom(LExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IndexExprContext : LExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public IndexExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIndexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIndexExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithMemberAccessExprContext : LExpressionContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public MandatoryLineContinuationContext mandatoryLineContinuation() {
			return GetRuleContext<MandatoryLineContinuationContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WithMemberAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithMemberAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithMemberAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithMemberAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithDictionaryAccessExprContext : LExpressionContext {
		public MandatoryLineContinuationContext mandatoryLineContinuation() {
			return GetRuleContext<MandatoryLineContinuationContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WithDictionaryAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithDictionaryAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithDictionaryAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithDictionaryAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExprContext : LExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SimpleNameExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExprContext : LExpressionContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public IReadOnlyList<MandatoryLineContinuationContext> mandatoryLineContinuation() {
			return GetRuleContexts<MandatoryLineContinuationContext>();
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public MandatoryLineContinuationContext mandatoryLineContinuation(int i) {
			return GetRuleContext<MandatoryLineContinuationContext>(i);
		}
		public MemberAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceExprContext : LExpressionContext {
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public InstanceExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInstanceExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInstanceExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DictionaryAccessExprContext : LExpressionContext {
		public IReadOnlyList<MandatoryLineContinuationContext> mandatoryLineContinuation() {
			return GetRuleContexts<MandatoryLineContinuationContext>();
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public MandatoryLineContinuationContext mandatoryLineContinuation(int i) {
			return GetRuleContext<MandatoryLineContinuationContext>(i);
		}
		public DictionaryAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDictionaryAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDictionaryAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LExpressionContext lExpression() {
		return lExpression(0);
	}

	private LExpressionContext lExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		LExpressionContext _localctx = new LExpressionContext(_ctx, _parentState);
		LExpressionContext _prevctx = _localctx;
		int _startState = 352;
		EnterRecursionRule(_localctx, 352, RULE_lExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2325;
			switch ( Interpreter.AdaptivePredict(_input,328,_ctx) ) {
			case 1:
				{
				_localctx = new InstanceExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2313; Match(ME);
				}
				break;

			case 2:
				{
				_localctx = new SimpleNameExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2314; identifier();
				}
				break;

			case 3:
				{
				_localctx = new WithMemberAccessExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2315; Match(DOT);
				State = 2317;
				_la = _input.La(1);
				if (_la==LINE_CONTINUATION) {
					{
					State = 2316; mandatoryLineContinuation();
					}
				}

				State = 2319; unrestrictedIdentifier();
				}
				break;

			case 4:
				{
				_localctx = new WithDictionaryAccessExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2320; Match(EXCLAMATIONPOINT);
				State = 2322;
				_la = _input.La(1);
				if (_la==LINE_CONTINUATION) {
					{
					State = 2321; mandatoryLineContinuation();
					}
				}

				State = 2324; unrestrictedIdentifier();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2362;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,338,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2360;
					switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
					case 1:
						{
						_localctx = new IndexExprContext(new LExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lExpression);
						State = 2327;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2329;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2328; whiteSpace();
							}
						}

						State = 2331; Match(LPAREN);
						State = 2333;
						switch ( Interpreter.AdaptivePredict(_input,330,_ctx) ) {
						case 1:
							{
							State = 2332; whiteSpace();
							}
							break;
						}
						State = 2336;
						switch ( Interpreter.AdaptivePredict(_input,331,_ctx) ) {
						case 1:
							{
							State = 2335; argumentList();
							}
							break;
						}
						State = 2339;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2338; whiteSpace();
							}
						}

						State = 2341; Match(RPAREN);
						}
						break;

					case 2:
						{
						_localctx = new MemberAccessExprContext(new LExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lExpression);
						State = 2342;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2344;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2343; mandatoryLineContinuation();
							}
						}

						State = 2346; Match(DOT);
						State = 2348;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2347; mandatoryLineContinuation();
							}
						}

						State = 2350; unrestrictedIdentifier();
						}
						break;

					case 3:
						{
						_localctx = new DictionaryAccessExprContext(new LExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lExpression);
						State = 2351;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2353;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2352; mandatoryLineContinuation();
							}
						}

						State = 2355; Match(EXCLAMATIONPOINT);
						State = 2357;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2356; mandatoryLineContinuation();
							}
						}

						State = 2359; unrestrictedIdentifier();
						}
						break;
					}
					} 
				}
				State = 2364;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,338,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BuiltInTypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode OBJECT() { return GetToken(VBAParser.OBJECT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public BuiltInTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtInType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBuiltInType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBuiltInType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltInTypeContext builtInType() {
		BuiltInTypeContext _localctx = new BuiltInTypeContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_builtInType);
		int _la;
		try {
			State = 2386;
			switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2365; baseType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2366; Match(L_SQUARE_BRACKET);
				State = 2368;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2367; whiteSpace();
					}
				}

				State = 2370; baseType();
				State = 2372;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2371; whiteSpace();
					}
				}

				State = 2374; Match(R_SQUARE_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2376; Match(OBJECT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2377; Match(L_SQUARE_BRACKET);
				State = 2379;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2378; whiteSpace();
					}
				}

				State = 2381; Match(OBJECT);
				State = 2383;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2382; whiteSpace();
					}
				}

				State = 2385; Match(R_SQUARE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public PositionalOrNamedArgumentListContext positionalOrNamedArgumentList() {
			return GetRuleContext<PositionalOrNamedArgumentListContext>(0);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_argumentList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2388; positionalOrNamedArgumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalOrNamedArgumentListContext : ParserRuleContext {
		public IReadOnlyList<PositionalArgumentOrMissingContext> positionalArgumentOrMissing() {
			return GetRuleContexts<PositionalArgumentOrMissingContext>();
		}
		public RequiredPositionalArgumentContext requiredPositionalArgument() {
			return GetRuleContext<RequiredPositionalArgumentContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public NamedArgumentListContext namedArgumentList() {
			return GetRuleContext<NamedArgumentListContext>(0);
		}
		public PositionalArgumentOrMissingContext positionalArgumentOrMissing(int i) {
			return GetRuleContext<PositionalArgumentOrMissingContext>(i);
		}
		public PositionalOrNamedArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalOrNamedArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPositionalOrNamedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPositionalOrNamedArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionalOrNamedArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionalOrNamedArgumentListContext positionalOrNamedArgumentList() {
		PositionalOrNamedArgumentListContext _localctx = new PositionalOrNamedArgumentListContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_positionalOrNamedArgumentList);
		try {
			int _alt;
			State = 2410;
			switch ( Interpreter.AdaptivePredict(_input,348,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2396;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,345,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2390; positionalArgumentOrMissing();
						State = 2392;
						switch ( Interpreter.AdaptivePredict(_input,344,_ctx) ) {
						case 1:
							{
							State = 2391; whiteSpace();
							}
							break;
						}
						}
						} 
					}
					State = 2398;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,345,_ctx);
				}
				State = 2399; requiredPositionalArgument();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2406;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,347,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2400; positionalArgumentOrMissing();
						State = 2402;
						switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
						case 1:
							{
							State = 2401; whiteSpace();
							}
							break;
						}
						}
						} 
					}
					State = 2408;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,347,_ctx);
				}
				State = 2409; namedArgumentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalArgumentOrMissingContext : ParserRuleContext {
		public PositionalArgumentOrMissingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalArgumentOrMissing; } }
	 
		public PositionalArgumentOrMissingContext() { }
		public virtual void CopyFrom(PositionalArgumentOrMissingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecifiedPositionalArgumentContext : PositionalArgumentOrMissingContext {
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public PositionalArgumentContext positionalArgument() {
			return GetRuleContext<PositionalArgumentContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public SpecifiedPositionalArgumentContext(PositionalArgumentOrMissingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSpecifiedPositionalArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSpecifiedPositionalArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecifiedPositionalArgument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MissingPositionalArgumentContext : PositionalArgumentOrMissingContext {
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public MissingPositionalArgumentContext(PositionalArgumentOrMissingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMissingPositionalArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMissingPositionalArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMissingPositionalArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionalArgumentOrMissingContext positionalArgumentOrMissing() {
		PositionalArgumentOrMissingContext _localctx = new PositionalArgumentOrMissingContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_positionalArgumentOrMissing);
		int _la;
		try {
			State = 2422;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case MIDBTYPESUFFIX:
			case MIDTYPESUFFIX:
			case PSET:
			case SGN:
			case UBOUND:
			case EXCLAMATIONPOINT:
			case DOT:
			case HASH:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case EMPTY:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case LPAREN:
			case MINUS:
			case L_SQUARE_BRACKET:
			case STRINGLITERAL:
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
			case DATELITERAL:
			case IDENTIFIER:
			case LOAD:
			case RESUME_NEXT:
				_localctx = new SpecifiedPositionalArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2412; positionalArgument();
				State = 2414;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2413; whiteSpace();
					}
				}

				State = 2416; Match(COMMA);
				}
				break;
			case COMMA:
			case WS:
			case LINE_CONTINUATION:
				_localctx = new MissingPositionalArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2419;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2418; whiteSpace();
					}
				}

				State = 2421; Match(COMMA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalArgumentContext : ParserRuleContext {
		public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public PositionalArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPositionalArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPositionalArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionalArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionalArgumentContext positionalArgument() {
		PositionalArgumentContext _localctx = new PositionalArgumentContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_positionalArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2424; argumentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredPositionalArgumentContext : ParserRuleContext {
		public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public RequiredPositionalArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredPositionalArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRequiredPositionalArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRequiredPositionalArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredPositionalArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredPositionalArgumentContext requiredPositionalArgument() {
		RequiredPositionalArgumentContext _localctx = new RequiredPositionalArgumentContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_requiredPositionalArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2426; argumentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentListContext : ParserRuleContext {
		public IReadOnlyList<NamedArgumentContext> namedArgument() {
			return GetRuleContexts<NamedArgumentContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public NamedArgumentContext namedArgument(int i) {
			return GetRuleContext<NamedArgumentContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public NamedArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNamedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNamedArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentListContext namedArgumentList() {
		NamedArgumentListContext _localctx = new NamedArgumentListContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_namedArgumentList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2428; namedArgument();
			State = 2439;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,354,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2430;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2429; whiteSpace();
						}
					}

					State = 2432; Match(COMMA);
					State = 2434;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2433; whiteSpace();
						}
					}

					State = 2436; namedArgument();
					}
					} 
				}
				State = 2441;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,354,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : ParserRuleContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_namedArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2442; unrestrictedIdentifier();
			State = 2444;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2443; whiteSpace();
				}
			}

			State = 2446; Match(ASSIGN);
			State = 2448;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2447; whiteSpace();
				}
			}

			State = 2450; argumentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExpressionContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public LowerBoundArgumentExpressionContext lowerBoundArgumentExpression() {
			return GetRuleContext<LowerBoundArgumentExpressionContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public UpperBoundArgumentExpressionContext upperBoundArgumentExpression() {
			return GetRuleContext<UpperBoundArgumentExpressionContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public AddressOfExpressionContext addressOfExpression() {
			return GetRuleContext<AddressOfExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgumentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionContext argumentExpression() {
		ArgumentExpressionContext _localctx = new ArgumentExpressionContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_argumentExpression);
		try {
			State = 2464;
			switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2454;
				switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					State = 2452; Match(BYVAL);
					State = 2453; whiteSpace();
					}
					break;
				}
				State = 2456; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2457; addressOfExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2458; lowerBoundArgumentExpression();
				State = 2459; whiteSpace();
				State = 2460; Match(TO);
				State = 2461; whiteSpace();
				State = 2462; upperBoundArgumentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundArgumentExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LowerBoundArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBoundArgumentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLowerBoundArgumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLowerBoundArgumentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowerBoundArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowerBoundArgumentExpressionContext lowerBoundArgumentExpression() {
		LowerBoundArgumentExpressionContext _localctx = new LowerBoundArgumentExpressionContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_lowerBoundArgumentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2466; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundArgumentExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpperBoundArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBoundArgumentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperBoundArgumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperBoundArgumentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperBoundArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperBoundArgumentExpressionContext upperBoundArgumentExpression() {
		UpperBoundArgumentExpressionContext _localctx = new UpperBoundArgumentExpressionContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_upperBoundArgumentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2468; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddressOfExpressionContext : ParserRuleContext {
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddressOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addressOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAddressOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAddressOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddressOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddressOfExpressionContext addressOfExpression() {
		AddressOfExpressionContext _localctx = new AddressOfExpressionContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_addressOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2470; Match(ADDRESSOF);
			State = 2471; whiteSpace();
			State = 2472; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode CLNGLNG() { return GetToken(VBAParser.CLNGLNG, 0); }
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public ITerminalNode MIDTYPESUFFIX() { return GetToken(VBAParser.MIDTYPESUFFIX, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode DEBUG() { return GetToken(VBAParser.DEBUG, 0); }
		public ITerminalNode CLNGPTR() { return GetToken(VBAParser.CLNGPTR, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode CDEC() { return GetToken(VBAParser.CDEC, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode CSNG() { return GetToken(VBAParser.CSNG, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode MIDBTYPESUFFIX() { return GetToken(VBAParser.MIDBTYPESUFFIX, 0); }
		public ITerminalNode SGN() { return GetToken(VBAParser.SGN, 0); }
		public ITerminalNode CBYTE() { return GetToken(VBAParser.CBYTE, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode CVAR() { return GetToken(VBAParser.CVAR, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode CDATE() { return GetToken(VBAParser.CDATE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode ABS() { return GetToken(VBAParser.ABS, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode INT() { return GetToken(VBAParser.INT, 0); }
		public ITerminalNode RESUME_NEXT() { return GetToken(VBAParser.RESUME_NEXT, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode LBOUND() { return GetToken(VBAParser.LBOUND, 0); }
		public ITerminalNode UBOUND() { return GetToken(VBAParser.UBOUND, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public ITerminalNode ARRAY() { return GetToken(VBAParser.ARRAY, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode MIDB() { return GetToken(VBAParser.MIDB, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode PSET() { return GetToken(VBAParser.PSET, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode CDBL() { return GetToken(VBAParser.CDBL, 0); }
		public ITerminalNode CLNG() { return GetToken(VBAParser.CLNG, 0); }
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode WRITE(int i) {
			return GetToken(VBAParser.WRITE, i);
		}
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode LENB() { return GetToken(VBAParser.LENB, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode INPUTB() { return GetToken(VBAParser.INPUTB, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode LEN(int i) {
			return GetToken(VBAParser.LEN, i);
		}
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode CBOOL() { return GetToken(VBAParser.CBOOL, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode CVERR() { return GetToken(VBAParser.CVERR, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode FIX() { return GetToken(VBAParser.FIX, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode CSTR() { return GetToken(VBAParser.CSTR, 0); }
		public ITerminalNode CINT() { return GetToken(VBAParser.CINT, 0); }
		public ITerminalNode OBJECT() { return GetToken(VBAParser.OBJECT, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode DOEVENTS() { return GetToken(VBAParser.DOEVENTS, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public IReadOnlyList<ITerminalNode> WRITE() { return GetTokens(VBAParser.WRITE); }
		public IReadOnlyList<ITerminalNode> LEN() { return GetTokens(VBAParser.LEN); }
		public ITerminalNode ANY() { return GetToken(VBAParser.ANY, 0); }
		public ITerminalNode CCUR() { return GetToken(VBAParser.CCUR, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2474;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << MIDBTYPESUFFIX) | (1L << MIDTYPESUFFIX) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TYPEOF - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WIDTH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (LOAD - 192)) | (1L << (RESUME_NEXT - 192)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerKeywordContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public MarkerKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkerKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkerKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerKeywordContext markerKeyword() {
		MarkerKeywordContext _localctx = new MarkerKeywordContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_markerKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2476; Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementKeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode OPTION() { return GetToken(VBAParser.OPTION, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode EXIT() { return GetToken(VBAParser.EXIT, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public StatementKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementKeywordContext statementKeyword() {
		StatementKeywordContext _localctx = new StatementKeywordContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_statementKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2478;
			_la = _input.La(1);
			if ( !(((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (EXIT - 22)) | (1L << (OPTION - 22)) | (1L << (CALL - 22)) | (1L << (CASE - 22)) | (1L << (CONST - 22)) | (1L << (DECLARE - 22)) | (1L << (DEFBOOL - 22)) | (1L << (DEFBYTE - 22)) | (1L << (DEFDATE - 22)) | (1L << (DEFDBL - 22)) | (1L << (DEFCUR - 22)) | (1L << (DEFINT - 22)) | (1L << (DEFLNG - 22)) | (1L << (DEFLNGLNG - 22)) | (1L << (DEFLNGPTR - 22)) | (1L << (DEFOBJ - 22)) | (1L << (DEFSNG - 22)) | (1L << (DEFSTR - 22)) | (1L << (DEFVAR - 22)) | (1L << (DIM - 22)) | (1L << (DO - 22)))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (ELSE - 87)) | (1L << (ELSEIF - 87)) | (1L << (END_SELECT - 87)) | (1L << (END_WITH - 87)) | (1L << (ENUM - 87)) | (1L << (ERASE - 87)) | (1L << (EVENT - 87)) | (1L << (EXIT_DO - 87)) | (1L << (EXIT_FOR - 87)) | (1L << (EXIT_FUNCTION - 87)) | (1L << (EXIT_PROPERTY - 87)) | (1L << (EXIT_SUB - 87)) | (1L << (FRIEND - 87)) | (1L << (FOR - 87)) | (1L << (FUNCTION - 87)) | (1L << (GLOBAL - 87)) | (1L << (GOSUB - 87)) | (1L << (GOTO - 87)) | (1L << (IF - 87)) | (1L << (IMPLEMENTS - 87)) | (1L << (LOOP - 87)) | (1L << (LET - 87)) | (1L << (LSET - 87)) | (1L << (NEXT - 87)) | (1L << (ON - 87)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (PRIVATE - 158)) | (1L << (PUBLIC - 158)) | (1L << (RAISEEVENT - 158)) | (1L << (REDIM - 158)) | (1L << (RESUME - 158)) | (1L << (RETURN - 158)) | (1L << (RSET - 158)) | (1L << (SELECT - 158)) | (1L << (SET - 158)) | (1L << (STATIC - 158)) | (1L << (STOP - 158)) | (1L << (SUB - 158)) | (1L << (TYPE - 158)) | (1L << (WEND - 158)) | (1L << (WHILE - 158)) | (1L << (WITH - 158)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfLineContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode NEWLINE() { return GetToken(VBAParser.NEWLINE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public CommentOrAnnotationContext commentOrAnnotation() {
			return GetRuleContext<CommentOrAnnotationContext>(0);
		}
		public EndOfLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfLineContext endOfLine() {
		EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_endOfLine);
		int _la;
		try {
			State = 2491;
			switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2481;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2480; whiteSpace();
					}
				}

				State = 2483; Match(NEWLINE);
				State = 2485;
				switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					State = 2484; whiteSpace();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2488;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2487; whiteSpace();
					}
				}

				State = 2490; commentOrAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfStatementContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfStatementContext endOfStatement() {
		EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_endOfStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2503;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,366,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2501;
					switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
					case 1:
						{
						State = 2493; endOfLine();
						}
						break;

					case 2:
						{
						{
						State = 2495;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2494; whiteSpace();
							}
						}

						State = 2497; Match(COLON);
						State = 2499;
						switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
						case 1:
							{
							State = 2498; whiteSpace();
							}
							break;
						}
						}
						}
						break;
					}
					} 
				}
				State = 2505;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,366,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentOrAnnotationContext : ParserRuleContext {
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public RemCommentContext remComment() {
			return GetRuleContext<RemCommentContext>(0);
		}
		public CommentOrAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentOrAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentOrAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentOrAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentOrAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentOrAnnotationContext commentOrAnnotation() {
		CommentOrAnnotationContext _localctx = new CommentOrAnnotationContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_commentOrAnnotation);
		try {
			State = 2509;
			switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2506; annotationList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2507; comment();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2508; remComment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemCommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public RemCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRemComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRemComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemCommentContext remComment() {
		RemCommentContext _localctx = new RemCommentContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_remComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2511; Match(REM);
			State = 2513;
			switch ( Interpreter.AdaptivePredict(_input,368,_ctx) ) {
			case 1:
				{
				State = 2512; whiteSpace();
				}
				break;
			}
			State = 2515; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2517; Match(SINGLEQUOTE);
			State = 2518; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentBodyContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public CommentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentBodyContext commentBody() {
		CommentBodyContext _localctx = new CommentBodyContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_commentBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2524;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2522;
					switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
					case 1:
						{
						State = 2520; Match(LINE_CONTINUATION);
						}
						break;

					case 2:
						{
						State = 2521;
						_la = _input.La(1);
						if ( _la <= 0 || (_la==NEWLINE) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						}
						break;
					}
					} 
				}
				State = 2526;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> AT() { return GetTokens(VBAParser.AT); }
		public IReadOnlyList<AnnotationContext> annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode AT(int i) {
			return GetToken(VBAParser.AT, i);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_annotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2527; Match(SINGLEQUOTE);
			State = 2533;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2528; Match(AT);
				State = 2529; annotation();
				State = 2531;
				switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					State = 2530; whiteSpace();
					}
					break;
				}
				}
				}
				State = 2535;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==AT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public AnnotationNameContext annotationName() {
			return GetRuleContext<AnnotationNameContext>(0);
		}
		public AnnotationArgListContext annotationArgList() {
			return GetRuleContext<AnnotationArgListContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2537; annotationName();
			State = 2539;
			switch ( Interpreter.AdaptivePredict(_input,373,_ctx) ) {
			case 1:
				{
				State = 2538; annotationArgList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationNameContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public AnnotationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationNameContext annotationName() {
		AnnotationNameContext _localctx = new AnnotationNameContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_annotationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2541; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AnnotationArgContext> annotationArg() {
			return GetRuleContexts<AnnotationArgContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationArgContext annotationArg(int i) {
			return GetRuleContext<AnnotationArgContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AnnotationArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgListContext annotationArgList() {
		AnnotationArgListContext _localctx = new AnnotationArgListContext(_ctx, State);
		EnterRule(_localctx, 402, RULE_annotationArgList);
		int _la;
		try {
			int _alt;
			State = 2603;
			switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2543; whiteSpace();
				State = 2544; annotationArg();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2546; whiteSpace();
				State = 2547; annotationArg();
				State = 2556;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2549;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2548; whiteSpace();
							}
						}

						State = 2551; Match(COMMA);
						State = 2553;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2552; whiteSpace();
							}
						}

						State = 2555; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2558;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,376,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2561;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2560; whiteSpace();
					}
				}

				State = 2563; Match(LPAREN);
				State = 2565;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2564; whiteSpace();
					}
				}

				State = 2567; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2569;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2568; whiteSpace();
					}
				}

				State = 2571; Match(LPAREN);
				State = 2573;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2572; whiteSpace();
					}
				}

				State = 2575; annotationArg();
				State = 2577;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2576; whiteSpace();
					}
				}

				State = 2579; Match(RPAREN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2582;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2581; whiteSpace();
					}
				}

				State = 2584; Match(LPAREN);
				State = 2585; annotationArg();
				State = 2594;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2587;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2586; whiteSpace();
							}
						}

						State = 2589; Match(COMMA);
						State = 2591;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2590; whiteSpace();
							}
						}

						State = 2593; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2596;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,385,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2599;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2598; whiteSpace();
					}
				}

				State = 2601; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgContext annotationArg() {
		AnnotationArgContext _localctx = new AnnotationArgContext(_ctx, State);
		EnterRule(_localctx, 404, RULE_annotationArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2605; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MandatoryLineContinuationContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LINE_CONTINUATION() { return GetToken(VBAParser.LINE_CONTINUATION, 0); }
		public MandatoryLineContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mandatoryLineContinuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMandatoryLineContinuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMandatoryLineContinuation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMandatoryLineContinuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MandatoryLineContinuationContext mandatoryLineContinuation() {
		MandatoryLineContinuationContext _localctx = new MandatoryLineContinuationContext(_ctx, State);
		EnterRule(_localctx, 406, RULE_mandatoryLineContinuation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2607; Match(LINE_CONTINUATION);
			State = 2611;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 2608; Match(WS);
				}
				}
				State = 2613;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhiteSpaceContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public WhiteSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whiteSpace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhiteSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhiteSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhiteSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhiteSpaceContext whiteSpace() {
		WhiteSpaceContext _localctx = new WhiteSpaceContext(_ctx, State);
		EnterRule(_localctx, 408, RULE_whiteSpace);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2615;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2614;
					_la = _input.La(1);
					if ( !(_la==WS || _la==LINE_CONTINUATION) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2617;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,389,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 78: return upperCaseA_sempred((UpperCaseAContext)_localctx, predIndex);

		case 79: return upperCaseZ_sempred((UpperCaseZContext)_localctx, predIndex);

		case 170: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 176: return lExpression_sempred((LExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 15);

		case 3: return Precpred(_ctx, 13);

		case 4: return Precpred(_ctx, 12);

		case 5: return Precpred(_ctx, 11);

		case 6: return Precpred(_ctx, 10);

		case 7: return Precpred(_ctx, 9);

		case 8: return Precpred(_ctx, 8);

		case 9: return Precpred(_ctx, 6);

		case 10: return Precpred(_ctx, 5);

		case 11: return Precpred(_ctx, 4);

		case 12: return Precpred(_ctx, 3);

		case 13: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool upperCaseZ_sempred(UpperCaseZContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return _input.Lt(1).Text.Equals("Z");
		}
		return true;
	}
	private bool lExpression_sempred(LExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(_ctx, 5);

		case 14: return Precpred(_ctx, 7);

		case 15: return Precpred(_ctx, 6);
		}
		return true;
	}
	private bool upperCaseA_sempred(UpperCaseAContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return _input.Lt(1).Text.Equals("A");
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xEE\xA3E\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x3\x2"+
		"\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3\x1A3\n\x3\x3\x3\x3\x3\x5\x3\x1A7"+
		"\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x1AF\n\x3\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x5\x4\x1B5\n\x4\x3\x4\x5\x4\x1B8\n\x4\x3\x4\x3\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x1C2\n\x5\x5\x5\x1C4\n\x5\x3\x5\x3\x5"+
		"\x6\x5\x1C8\n\x5\r\x5\xE\x5\x1C9\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\x1D1"+
		"\n\x6\f\x6\xE\x6\x1D4\v\x6\x3\x6\x3\x6\a\x6\x1D8\n\x6\f\x6\xE\x6\x1DB"+
		"\v\x6\x3\x6\x3\x6\x3\x6\x5\x6\x1E0\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a"+
		"\x1E7\n\a\f\a\xE\a\x1EA\v\a\x3\b\x3\b\x3\b\x3\b\x5\b\x1F0\n\b\x3\b\x3"+
		"\b\x5\b\x1F4\n\b\x3\b\x3\b\x5\b\x1F8\n\b\x3\b\x3\b\x5\b\x1FC\n\b\x3\b"+
		"\a\b\x1FF\n\b\f\b\xE\b\x202\v\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\a\v"+
		"\x20B\n\v\f\v\xE\v\x20E\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x5\f\x21A\n\f\x3\r\x5\r\x21D\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x5\r\x229\n\r\x3\xE\x5\xE\x22C\n\xE\x3\xE\x3\xE\x3"+
		"\xE\a\xE\x231\n\xE\f\xE\xE\xE\x234\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x5\xF\x23B\n\xF\x3\x10\x3\x10\x3\x10\a\x10\x240\n\x10\f\x10\xE\x10\x243"+
		"\v\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x268\n\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x5\x12\x278\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x5\x13\x280\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x285\n\x13\x3\x13"+
		"\x3\x13\x3\x13\x5\x13\x28A\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x5\x13\x293\n\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19"+
		"\x3\x1A\x3\x1A\x5\x1A\x2A7\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2AB\n\x1A\x3\x1A"+
		"\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x5\x1C\x2B3\n\x1C\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2BE\n\x1F\x3 \x3"+
		" \x3!\x3!\x5!\x2C4\n!\x3!\x3!\x5!\x2C8\n!\x3!\a!\x2CB\n!\f!\xE!\x2CE\v"+
		"!\x3\"\x3\"\x3\"\x3\"\x5\"\x2D4\n\"\x3\"\x3\"\x5\"\x2D8\n\"\x3\"\x3\""+
		"\x3#\x3#\x3$\x3$\x3$\x3$\x5$\x2E2\n$\x3$\x3$\x5$\x2E6\n$\x3$\x5$\x2E9"+
		"\n$\x3%\x3%\x3%\x3%\x5%\x2EF\n%\x3%\x3%\x3%\x3%\x5%\x2F5\n%\x3&\x3&\x3"+
		"\'\x3\'\x3(\x3(\x3(\x3(\x5(\x2FF\n(\x3(\x3(\x5(\x303\n(\x3(\x5(\x306\n"+
		"(\x3)\x3)\x3)\x3)\x5)\x30C\n)\x3)\x3)\x5)\x310\n)\x3)\x3)\x3*\x3*\x3+"+
		"\x3+\x3+\x3+\x5+\x31A\n+\x3+\x3+\x5+\x31E\n+\x3+\x3+\x3,\x3,\x3-\x3-\x3"+
		"-\x3-\x5-\x328\n-\x3.\x3.\x5.\x32C\n.\x3.\x3.\x5.\x330\n.\x3.\x3.\x3/"+
		"\x3/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x33C\n\x31\x3\x31"+
		"\x3\x31\x5\x31\x340\n\x31\x3\x31\x5\x31\x343\n\x31\x3\x32\x3\x32\x5\x32"+
		"\x347\n\x32\x3\x32\a\x32\x34A\n\x32\f\x32\xE\x32\x34D\v\x32\x3\x33\x3"+
		"\x33\x3\x33\x3\x33\x5\x33\x353\n\x33\x3\x33\x3\x33\x5\x33\x357\n\x33\x3"+
		"\x34\x3\x34\x3\x34\x5\x34\x35C\n\x34\x3\x35\x3\x35\x3\x36\x3\x36\x3\x37"+
		"\x3\x37\x5\x37\x364\n\x37\x3\x37\x3\x37\x5\x37\x368\n\x37\x3\x37\x3\x37"+
		"\x5\x37\x36C\n\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39\x5\x39\x374"+
		"\n\x39\x3\x39\x5\x39\x377\n\x39\x3:\x3:\x5:\x37B\n:\x3:\x3:\x5:\x37F\n"+
		":\x3:\x3:\x3;\x3;\x3<\x3<\x3<\x3<\x5<\x389\n<\x3<\x3<\x5<\x38D\n<\x3<"+
		"\x5<\x390\n<\x3=\x3=\x3=\x3=\x5=\x396\n=\x3=\x3=\x5=\x39A\n=\x3=\x3=\x3"+
		">\x3>\x5>\x3A0\n>\x3>\x3>\x5>\x3A4\n>\x3>\a>\x3A7\n>\f>\xE>\x3AA\v>\x3"+
		"?\x3?\x3@\x3@\x3@\x3@\x5@\x3B2\n@\x3@\x3@\x5@\x3B6\n@\x3@\x5@\x3B9\n@"+
		"\x3@\x5@\x3BC\n@\x3@\x3@\x5@\x3C0\n@\x3@\x3@\x3\x41\x3\x41\x3\x42\x3\x42"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x3CC\n\x43\x3\x43\x3\x43\x5\x43\x3D0"+
		"\n\x43\x3\x43\x5\x43\x3D3\n\x43\x3\x43\x5\x43\x3D6\n\x43\x3\x43\x3\x43"+
		"\x5\x43\x3DA\n\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\x5"+
		"\x45\x3E3\n\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x3E9\n\x45\x3\x45\x3"+
		"\x45\x5\x45\x3ED\n\x45\x3\x45\a\x45\x3F0\n\x45\f\x45\xE\x45\x3F3\v\x45"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x3F9\n\x46\x3\x46\x5\x46\x3FC\n\x46"+
		"\x3\x46\x3\x46\x5\x46\x400\n\x46\x3\x46\x3\x46\x3G\x3G\x3G\x5G\x407\n"+
		"G\x3G\x3G\x3G\x3G\x5G\x40D\nG\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G"+
		"\x3G\x3G\x5G\x41B\nG\x3G\x5G\x41E\nG\x3G\x5G\x421\nG\x3G\x3G\x3G\x5G\x426"+
		"\nG\x3H\x3H\x5H\x42A\nH\x3H\x3H\x5H\x42E\nH\x3H\x3H\x5H\x432\nH\x3H\a"+
		"H\x435\nH\fH\xEH\x438\vH\x5H\x43A\nH\x3H\x5H\x43D\nH\x3H\x3H\x3I\x3I\x5"+
		"I\x443\nI\x3I\x3I\x5I\x447\nI\x3I\x3I\x5I\x44B\nI\x3I\x3I\x5I\x44F\nI"+
		"\x3I\x3I\x5I\x453\nI\x3I\x5I\x456\nI\x3I\x5I\x459\nI\x3I\x5I\x45C\nI\x3"+
		"I\x5I\x45F\nI\x3I\x5I\x462\nI\x3J\x3J\x5J\x466\nJ\x3J\x3J\x3K\x3K\x3K"+
		"\x3K\x5K\x46E\nK\x3K\x3K\x5K\x472\nK\x3K\aK\x475\nK\fK\xEK\x478\vK\x3"+
		"L\x3L\x3M\x3M\x3M\x5M\x47F\nM\x3N\x3N\x3O\x3O\x5O\x485\nO\x3O\x3O\x5O"+
		"\x489\nO\x3O\x3O\x3P\x3P\x3P\x3Q\x3Q\x3Q\x3R\x3R\x5R\x495\nR\x3R\x3R\x5"+
		"R\x499\nR\x3R\x3R\x3S\x3S\x3T\x3T\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U"+
		"\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x5U\x4B8\nU\x3"+
		"V\x3V\x3V\x5V\x4BD\nV\x3V\x3V\x3V\x3V\x3V\aV\x4C4\nV\fV\xEV\x4C7\vV\x3"+
		"V\x3V\x3W\x3W\x5W\x4CD\nW\x3W\x3W\x5W\x4D1\nW\x3W\x5W\x4D4\nW\x3W\x3W"+
		"\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x5Y\x4DE\nY\x3Y\x3Y\x5Y\x4E2\nY\x3Y\aY\x4E5\n"+
		"Y\fY\xEY\x4E8\vY\x3Z\x3Z\x3Z\x3Z\x3[\x3[\x3[\x5[\x4F1\n[\x3[\x3[\x3[\x3"+
		"[\x5[\x4F7\n[\x3[\x3[\x3\\\x3\\\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3"+
		"]\x3]\x3]\x3]\x3]\x3]\x5]\x50C\n]\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x3^"+
		"\x3^\x3^\x3^\x5^\x51A\n^\x3^\x3^\x3^\x3^\x3^\x3^\x5^\x522\n^\x3_\x3_\x3"+
		"_\x5_\x527\n_\x3_\x3_\x5_\x52B\n_\x3_\x3_\x5_\x52F\n_\x3_\x3_\x5_\x533"+
		"\n_\x3_\x5_\x536\n_\x3_\x5_\x539\n_\x3_\x5_\x53C\n_\x3_\x3_\x3_\x3_\x3"+
		"`\x3`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\x3\x62\x3\x63\x3"+
		"\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\a\x63\x554\n\x63\f\x63"+
		"\xE\x63\x557\v\x63\x3\x63\x5\x63\x55A\n\x63\x3\x63\x3\x63\x3\x64\x3\x64"+
		"\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64"+
		"\x3\x64\x3\x64\x5\x64\x56C\n\x64\x3\x64\x3\x64\x5\x64\x570\n\x64\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x66\x3\x66\x5\x66\x578\n\x66\x3g\x3g\x5g\x57C"+
		"\ng\x3g\x3g\x5g\x580\ng\x3g\x3g\x5g\x584\ng\x3g\x3g\x3g\x3g\x5g\x58A\n"+
		"g\x3h\x3h\x5h\x58E\nh\x3h\x3h\x5h\x592\nh\x3h\x3h\x3h\x5h\x597\nh\x3h"+
		"\x3h\x3i\x3i\x5i\x59D\ni\x3i\x5i\x5A0\ni\x3j\x3j\x5j\x5A4\nj\x3j\x3j\x5"+
		"j\x5A8\nj\x3j\x5j\x5AB\nj\aj\x5AD\nj\fj\xEj\x5B0\vj\x3j\x3j\x5j\x5B4\n"+
		"j\x5j\x5B6\nj\x3j\x3j\x5j\x5BA\nj\x3j\x3j\x5j\x5BE\nj\x3j\x5j\x5C1\nj"+
		"\aj\x5C3\nj\fj\xEj\x5C6\vj\x5j\x5C8\nj\x3k\x3k\x3l\x3l\x3m\x3m\x3m\x3"+
		"m\x3n\x3n\x5n\x5D4\nn\x3n\x3n\x5n\x5D8\nn\x3n\x3n\x5n\x5DC\nn\x3n\x3n"+
		"\x3o\x3o\x3o\x3o\x5o\x5E4\no\x3o\x3o\x5o\x5E8\no\x3o\x3o\x3p\x3p\x3p\x3"+
		"p\x3p\x3p\x3p\x3p\x3p\x3p\x5p\x5F6\np\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q"+
		"\x5q\x600\nq\x3q\x3q\x5q\x604\nq\x3q\aq\x607\nq\fq\xEq\x60A\vq\x3r\x3"+
		"r\x3r\x3r\x3r\x3r\x3r\x3r\x5r\x614\nr\x3r\x3r\x5r\x618\nr\x3r\ar\x61B"+
		"\nr\fr\xEr\x61E\vr\x3s\x3s\x3s\x5s\x623\ns\x3s\x3s\x5s\x627\ns\x3s\x3"+
		"s\x3s\x3s\x5s\x62D\ns\x3s\x5s\x630\ns\x3s\x3s\x3s\x5s\x635\ns\x3s\x3s"+
		"\x3s\x3s\x3t\x3t\x3t\x5t\x63E\nt\x3t\x3t\x5t\x642\nt\x3t\x3t\x3t\x3t\x5"+
		"t\x648\nt\x3t\x5t\x64B\nt\x3t\x3t\x3t\x3t\x3u\x3u\x3u\x5u\x654\nu\x3u"+
		"\x3u\x5u\x658\nu\x3u\x3u\x3u\x3u\x5u\x65E\nu\x3u\x5u\x661\nu\x3u\x3u\x3"+
		"u\x3u\x3v\x3v\x3v\x3v\x5v\x66B\nv\x3v\x3v\x5v\x66F\nv\x3v\x5v\x672\nv"+
		"\x3v\x5v\x675\nv\x3v\x5v\x678\nv\x3w\x3w\x5w\x67C\nw\x3w\x3w\x5w\x680"+
		"\nw\x3w\aw\x683\nw\fw\xEw\x686\vw\x3x\x3x\x3y\x3y\x3y\x3y\x5y\x68E\ny"+
		"\x3y\x3y\x3z\x3z\x5z\x694\nz\x3z\x3z\x5z\x698\nz\x3z\az\x69B\nz\fz\xE"+
		"z\x69E\vz\x3{\x3{\x3{\x3{\x5{\x6A4\n{\x3|\x3|\x3}\x3}\x3}\x3}\x3}\x3}"+
		"\x3}\x3}\x5}\x6B0\n}\x5}\x6B2\n}\x3~\x3~\x3~\x3~\x5~\x6B8\n~\x5~\x6BA"+
		"\n~\x3\x7F\x3\x7F\x3\x80\x3\x80\x3\x80\x3\x80\x5\x80\x6C2\n\x80\x3\x80"+
		"\x3\x80\x5\x80\x6C6\n\x80\x3\x80\x3\x80\x3\x81\x3\x81\x3\x82\x3\x82\x5"+
		"\x82\x6CE\n\x82\x3\x82\x3\x82\x5\x82\x6D2\n\x82\x3\x82\x3\x82\x3\x82\a"+
		"\x82\x6D7\n\x82\f\x82\xE\x82\x6DA\v\x82\x3\x82\x5\x82\x6DD\n\x82\x3\x82"+
		"\x3\x82\x3\x83\x3\x83\x3\x84\x3\x84\x3\x84\x3\x84\x5\x84\x6E7\n\x84\x3"+
		"\x84\x3\x84\x5\x84\x6EB\n\x84\x3\x84\a\x84\x6EE\n\x84\f\x84\xE\x84\x6F1"+
		"\v\x84\x3\x84\x3\x84\x3\x84\x3\x85\x3\x85\x5\x85\x6F8\n\x85\x3\x85\x3"+
		"\x85\x3\x85\x3\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3"+
		"\x86\x3\x86\x5\x86\x707\n\x86\x5\x86\x709\n\x86\x3\x86\x3\x86\x5\x86\x70D"+
		"\n\x86\x3\x86\x3\x86\x5\x86\x711\n\x86\x3\x87\x3\x87\x3\x88\x3\x88\x3"+
		"\x89\x3\x89\x3\x89\x3\x89\x5\x89\x71B\n\x89\x3\x89\x3\x89\x5\x89\x71F"+
		"\n\x89\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8A\x5\x8A\x726\n\x8A\x3\x8A\x3"+
		"\x8A\x5\x8A\x72A\n\x8A\x3\x8A\x3\x8A\x5\x8A\x72E\n\x8A\x3\x8A\x3\x8A\x5"+
		"\x8A\x732\n\x8A\x3\x8A\x5\x8A\x735\n\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3"+
		"\x8B\x3\x8B\x3\x8C\x3\x8C\x3\x8C\x5\x8C\x740\n\x8C\x3\x8C\x3\x8C\x3\x8C"+
		"\x3\x8C\x3\x8C\a\x8C\x747\n\x8C\f\x8C\xE\x8C\x74A\v\x8C\x3\x8C\x3\x8C"+
		"\x3\x8D\x3\x8D\x5\x8D\x750\n\x8D\x3\x8D\x3\x8D\x5\x8D\x754\n\x8D\x3\x8D"+
		"\x5\x8D\x757\n\x8D\x3\x8D\x5\x8D\x75A\n\x8D\x3\x8D\x5\x8D\x75D\n\x8D\x3"+
		"\x8D\x3\x8D\x3\x8D\x5\x8D\x762\n\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E"+
		"\x5\x8E\x769\n\x8E\x3\x8E\x3\x8E\x3\x8E\x5\x8E\x76E\n\x8E\x3\x8E\x3\x8E"+
		"\x3\x8F\x3\x8F\x5\x8F\x774\n\x8F\x3\x8F\x3\x8F\x5\x8F\x778\n\x8F\x3\x8F"+
		"\a\x8F\x77B\n\x8F\f\x8F\xE\x8F\x77E\v\x8F\x3\x90\x3\x90\x5\x90\x782\n"+
		"\x90\x3\x90\x3\x90\x5\x90\x786\n\x90\x3\x90\x3\x90\x5\x90\x78A\n\x90\x5"+
		"\x90\x78C\n\x90\x3\x90\x3\x90\x5\x90\x790\n\x90\x5\x90\x792\n\x90\x3\x90"+
		"\x3\x90\x3\x90\x5\x90\x797\n\x90\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3"+
		"\x91\x3\x91\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x93\x3"+
		"\x93\x5\x93\x7A9\n\x93\x3\x93\x3\x93\x5\x93\x7AD\n\x93\x5\x93\x7AF\n\x93"+
		"\x3\x93\x3\x93\x3\x93\x3\x93\x5\x93\x7B5\n\x93\x5\x93\x7B7\n\x93\x3\x93"+
		"\x3\x93\x5\x93\x7BB\n\x93\x3\x93\x3\x93\x5\x93\x7BF\n\x93\x3\x93\x6\x93"+
		"\x7C2\n\x93\r\x93\xE\x93\x7C3\x3\x94\x3\x94\x5\x94\x7C8\n\x94\x3\x94\x3"+
		"\x94\x5\x94\x7CC\n\x94\x5\x94\x7CE\n\x94\x3\x94\x3\x94\x3\x94\x3\x94\x5"+
		"\x94\x7D4\n\x94\x3\x94\x3\x94\x5\x94\x7D8\n\x94\x3\x94\x3\x94\x3\x95\x3"+
		"\x95\x5\x95\x7DE\n\x95\x3\x95\x3\x95\x5\x95\x7E2\n\x95\x3\x95\x3\x95\x5"+
		"\x95\x7E6\n\x95\x3\x95\x3\x95\x5\x95\x7EA\n\x95\x3\x95\x3\x95\x3\x96\x3"+
		"\x96\x5\x96\x7F0\n\x96\x3\x96\x3\x96\x5\x96\x7F4\n\x96\x3\x96\a\x96\x7F7"+
		"\n\x96\f\x96\xE\x96\x7FA\v\x96\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x5\x97"+
		"\x801\n\x97\x3\x97\x3\x97\x3\x98\x3\x98\x3\x98\x5\x98\x808\n\x98\x3\x99"+
		"\x3\x99\x5\x99\x80C\n\x99\x3\x9A\x3\x9A\x3\x9B\x3\x9B\x3\x9B\x3\x9C\x3"+
		"\x9C\x3\x9C\x5\x9C\x816\n\x9C\x3\x9D\x3\x9D\a\x9D\x81A\n\x9D\f\x9D\xE"+
		"\x9D\x81D\v\x9D\x3\x9D\x3\x9D\x3\x9E\x3\x9E\x5\x9E\x823\n\x9E\x3\x9F\x3"+
		"\x9F\x5\x9F\x827\n\x9F\x3\x9F\x3\x9F\x5\x9F\x82B\n\x9F\x3\x9F\x3\x9F\x5"+
		"\x9F\x82F\n\x9F\x3\x9F\x5\x9F\x832\n\x9F\x3\xA0\x3\xA0\x3\xA1\x3\xA1\x3"+
		"\xA2\x3\xA2\x3\xA3\x3\xA3\x5\xA3\x83C\n\xA3\x3\xA3\x3\xA3\x3\xA4\x3\xA4"+
		"\x5\xA4\x842\n\xA4\x3\xA4\x3\xA4\x3\xA5\x3\xA5\x5\xA5\x848\n\xA5\x3\xA6"+
		"\x3\xA6\x3\xA7\x3\xA7\x3\xA8\x3\xA8\x3\xA9\x3\xA9\x5\xA9\x852\n\xA9\x3"+
		"\xA9\x5\xA9\x855\n\xA9\x3\xA9\x3\xA9\x5\xA9\x859\n\xA9\x3\xA9\x5\xA9\x85C"+
		"\n\xA9\x3\xAA\x3\xAA\x3\xAB\x3\xAB\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC"+
		"\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x86D\n\xAC\x3\xAC\x3"+
		"\xAC\x3\xAC\x5\xAC\x872\n\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC"+
		"\x3\xAC\x3\xAC\x5\xAC\x87C\n\xAC\x3\xAC\x3\xAC\x5\xAC\x880\n\xAC\x3\xAC"+
		"\x3\xAC\x5\xAC\x884\n\xAC\x3\xAC\x3\xAC\x5\xAC\x888\n\xAC\x3\xAC\x3\xAC"+
		"\x5\xAC\x88C\n\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x891\n\xAC\x3\xAC\x3\xAC"+
		"\x5\xAC\x895\n\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x89A\n\xAC\x3\xAC\x3\xAC"+
		"\x5\xAC\x89E\n\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x8A3\n\xAC\x3\xAC\x3\xAC"+
		"\x5\xAC\x8A7\n\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x8AC\n\xAC\x3\xAC\x3\xAC"+
		"\x5\xAC\x8B0\n\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x8B5\n\xAC\x3\xAC\x3\xAC"+
		"\x5\xAC\x8B9\n\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x8BE\n\xAC\x3\xAC\x3\xAC"+
		"\x5\xAC\x8C2\n\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x8C7\n\xAC\x3\xAC\x3\xAC"+
		"\x5\xAC\x8CB\n\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x8D0\n\xAC\x3\xAC\x3\xAC"+
		"\x5\xAC\x8D4\n\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x8D9\n\xAC\x3\xAC\x3\xAC"+
		"\x5\xAC\x8DD\n\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x8E2\n\xAC\x3\xAC\x3\xAC"+
		"\x5\xAC\x8E6\n\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x8EB\n\xAC\x3\xAC\x3\xAC"+
		"\x5\xAC\x8EF\n\xAC\x3\xAC\a\xAC\x8F2\n\xAC\f\xAC\xE\xAC\x8F5\v\xAC\x3"+
		"\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x5\xAD\x8FC\n\xAD\x5\xAD\x8FE\n\xAD\x3"+
		"\xAE\x3\xAE\x3\xAE\x5\xAE\x903\n\xAE\x3\xAF\x3\xAF\x3\xB0\x3\xB0\x3\xB1"+
		"\x3\xB1\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x5\xB2\x910\n\xB2\x3\xB2\x3"+
		"\xB2\x3\xB2\x5\xB2\x915\n\xB2\x3\xB2\x5\xB2\x918\n\xB2\x3\xB2\x3\xB2\x5"+
		"\xB2\x91C\n\xB2\x3\xB2\x3\xB2\x5\xB2\x920\n\xB2\x3\xB2\x5\xB2\x923\n\xB2"+
		"\x3\xB2\x5\xB2\x926\n\xB2\x3\xB2\x3\xB2\x3\xB2\x5\xB2\x92B\n\xB2\x3\xB2"+
		"\x3\xB2\x5\xB2\x92F\n\xB2\x3\xB2\x3\xB2\x3\xB2\x5\xB2\x934\n\xB2\x3\xB2"+
		"\x3\xB2\x5\xB2\x938\n\xB2\x3\xB2\a\xB2\x93B\n\xB2\f\xB2\xE\xB2\x93E\v"+
		"\xB2\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x943\n\xB3\x3\xB3\x3\xB3\x5\xB3\x947"+
		"\n\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x94E\n\xB3\x3\xB3\x3"+
		"\xB3\x5\xB3\x952\n\xB3\x3\xB3\x5\xB3\x955\n\xB3\x3\xB4\x3\xB4\x3\xB5\x3"+
		"\xB5\x5\xB5\x95B\n\xB5\a\xB5\x95D\n\xB5\f\xB5\xE\xB5\x960\v\xB5\x3\xB5"+
		"\x3\xB5\x3\xB5\x5\xB5\x965\n\xB5\a\xB5\x967\n\xB5\f\xB5\xE\xB5\x96A\v"+
		"\xB5\x3\xB5\x5\xB5\x96D\n\xB5\x3\xB6\x3\xB6\x5\xB6\x971\n\xB6\x3\xB6\x3"+
		"\xB6\x3\xB6\x5\xB6\x976\n\xB6\x3\xB6\x5\xB6\x979\n\xB6\x3\xB7\x3\xB7\x3"+
		"\xB8\x3\xB8\x3\xB9\x3\xB9\x5\xB9\x981\n\xB9\x3\xB9\x3\xB9\x5\xB9\x985"+
		"\n\xB9\x3\xB9\a\xB9\x988\n\xB9\f\xB9\xE\xB9\x98B\v\xB9\x3\xBA\x3\xBA\x5"+
		"\xBA\x98F\n\xBA\x3\xBA\x3\xBA\x5\xBA\x993\n\xBA\x3\xBA\x3\xBA\x3\xBB\x3"+
		"\xBB\x5\xBB\x999\n\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB"+
		"\x3\xBB\x5\xBB\x9A3\n\xBB\x3\xBC\x3\xBC\x3\xBD\x3\xBD\x3\xBE\x3\xBE\x3"+
		"\xBE\x3\xBE\x3\xBF\x3\xBF\x3\xC0\x3\xC0\x3\xC1\x3\xC1\x3\xC2\x5\xC2\x9B4"+
		"\n\xC2\x3\xC2\x3\xC2\x5\xC2\x9B8\n\xC2\x3\xC2\x5\xC2\x9BB\n\xC2\x3\xC2"+
		"\x5\xC2\x9BE\n\xC2\x3\xC3\x3\xC3\x5\xC3\x9C2\n\xC3\x3\xC3\x3\xC3\x5\xC3"+
		"\x9C6\n\xC3\a\xC3\x9C8\n\xC3\f\xC3\xE\xC3\x9CB\v\xC3\x3\xC4\x3\xC4\x3"+
		"\xC4\x5\xC4\x9D0\n\xC4\x3\xC5\x3\xC5\x5\xC5\x9D4\n\xC5\x3\xC5\x3\xC5\x3"+
		"\xC6\x3\xC6\x3\xC6\x3\xC7\x3\xC7\a\xC7\x9DD\n\xC7\f\xC7\xE\xC7\x9E0\v"+
		"\xC7\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x9E6\n\xC8\x6\xC8\x9E8\n\xC8\r"+
		"\xC8\xE\xC8\x9E9\x3\xC9\x3\xC9\x5\xC9\x9EE\n\xC9\x3\xCA\x3\xCA\x3\xCB"+
		"\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x9F8\n\xCB\x3\xCB\x3\xCB\x5"+
		"\xCB\x9FC\n\xCB\x3\xCB\x6\xCB\x9FF\n\xCB\r\xCB\xE\xCB\xA00\x3\xCB\x5\xCB"+
		"\xA04\n\xCB\x3\xCB\x3\xCB\x5\xCB\xA08\n\xCB\x3\xCB\x3\xCB\x5\xCB\xA0C"+
		"\n\xCB\x3\xCB\x3\xCB\x5\xCB\xA10\n\xCB\x3\xCB\x3\xCB\x5\xCB\xA14\n\xCB"+
		"\x3\xCB\x3\xCB\x3\xCB\x5\xCB\xA19\n\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\xA1E"+
		"\n\xCB\x3\xCB\x3\xCB\x5\xCB\xA22\n\xCB\x3\xCB\x6\xCB\xA25\n\xCB\r\xCB"+
		"\xE\xCB\xA26\x3\xCB\x5\xCB\xA2A\n\xCB\x3\xCB\x3\xCB\x5\xCB\xA2E\n\xCB"+
		"\x3\xCC\x3\xCC\x3\xCD\x3\xCD\a\xCD\xA34\n\xCD\f\xCD\xE\xCD\xA37\v\xCD"+
		"\x3\xCE\x6\xCE\xA3A\n\xCE\r\xCE\xE\xCE\xA3B\x3\xCE\x2\x2\x4\x156\x162"+
		"\xCF\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32"+
		"\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2"+
		"L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2"+
		"j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86"+
		"\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A"+
		"\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE"+
		"\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2"+
		"\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6"+
		"\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA"+
		"\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE"+
		"\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110"+
		"\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122"+
		"\x2\x124\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134"+
		"\x2\x136\x2\x138\x2\x13A\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146"+
		"\x2\x148\x2\x14A\x2\x14C\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158"+
		"\x2\x15A\x2\x15C\x2\x15E\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A"+
		"\x2\x16C\x2\x16E\x2\x170\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A\x2\x17C"+
		"\x2\x17E\x2\x180\x2\x182\x2\x184\x2\x186\x2\x188\x2\x18A\x2\x18C\x2\x18E"+
		"\x2\x190\x2\x192\x2\x194\x2\x196\x2\x198\x2\x19A\x2\x2\x1B\x5\x2;;\x45"+
		"\x45\xBD\xBD\a\x2\x38\x38;;{{\x9C\x9C\xA7\xA7\x4\x2\xA9\xAA\xCC\xCC\x4"+
		"\x2\x85\x87\xB4\xB4\x4\x2))++\x4\x2rr\xBB\xBB\x3\x2=>\x3\x2HT\x4\x2\xC4"+
		"\xC4\xC8\xC8\x3\x2jn\x3\x2\x93\x94\x3\x2\xDD\xDE\xE\x2\x4\x4\x13\x13\x1F"+
		" <<??\x46\x46WW}}\x7F\x7F\xB5\xB5\xBA\xBA\xC5\xC5\a\x2||\x83\x83\xD1\xD4"+
		"\xD6\xD6\xD9\xD9\x3\x2\xE0\xE3\x5\x2,,.\x32\xDB\xDB\x6\x2pptt\xA0\xA0"+
		"\xA5\xA5\x4\x2\xCF\xCF\xD8\xD8\x4\x2\xD7\xD7\xDA\xDA\x4\x2oo\xC0\xC0\x4"+
		"\x2[[\x90\x90&\x2\x3\f\xE\x17\x19#%%\'(\x33\x38:?\x42\x43\x45\x46WW\x64"+
		"\x64\x66\x66hhoossxxz\x7F\x82\x87\x89\x8B\x8D\x91\x93\x93\x95\x96\x9B"+
		"\x9F\xA4\xA4\xA6\xA7\xA9\xAA\xAC\xAD\xB1\xB1\xB4\xB6\xB8\xB8\xBA\xBA\xBC"+
		"\xC0\xC2\xC6\xC9\xC9\xCB\xCD\xED\xEE \x2\x18\x18$$@\x41\x44\x44GVYZ``"+
		"\x63\x63\x65\x65gginprtwyy\x80\x81\x88\x88\x8C\x8C\x92\x92\xA0\xA0\xA5"+
		"\xA5\xA8\xA8\xAB\xAB\xAE\xB0\xB2\xB3\xB7\xB7\xB9\xB9\xBB\xBB\xC1\xC1\xC7"+
		"\xC8\xCA\xCA\x3\x2\xE5\xE5\x4\x2\xE8\xE8\xEB\xEB\xB56\x2\x19C\x3\x2\x2"+
		"\x2\x4\x19F\x3\x2\x2\x2\x6\x1B0\x3\x2\x2\x2\b\x1BB\x3\x2\x2\x2\n\x1CE"+
		"\x3\x2\x2\x2\f\x1E8\x3\x2\x2\x2\xE\x1EB\x3\x2\x2\x2\x10\x203\x3\x2\x2"+
		"\x2\x12\x205\x3\x2\x2\x2\x14\x20C\x3\x2\x2\x2\x16\x219\x3\x2\x2\x2\x18"+
		"\x21C\x3\x2\x2\x2\x1A\x22B\x3\x2\x2\x2\x1C\x23A\x3\x2\x2\x2\x1E\x241\x3"+
		"\x2\x2\x2 \x267\x3\x2\x2\x2\"\x277\x3\x2\x2\x2$\x279\x3\x2\x2\x2&\x294"+
		"\x3\x2\x2\x2(\x296\x3\x2\x2\x2*\x29A\x3\x2\x2\x2,\x29C\x3\x2\x2\x2.\x2A0"+
		"\x3\x2\x2\x2\x30\x2A2\x3\x2\x2\x2\x32\x2A4\x3\x2\x2\x2\x34\x2AE\x3\x2"+
		"\x2\x2\x36\x2B2\x3\x2\x2\x2\x38\x2B4\x3\x2\x2\x2:\x2B7\x3\x2\x2\x2<\x2B9"+
		"\x3\x2\x2\x2>\x2BF\x3\x2\x2\x2@\x2C1\x3\x2\x2\x2\x42\x2CF\x3\x2\x2\x2"+
		"\x44\x2DB\x3\x2\x2\x2\x46\x2DD\x3\x2\x2\x2H\x2F4\x3\x2\x2\x2J\x2F6\x3"+
		"\x2\x2\x2L\x2F8\x3\x2\x2\x2N\x2FA\x3\x2\x2\x2P\x307\x3\x2\x2\x2R\x313"+
		"\x3\x2\x2\x2T\x315\x3\x2\x2\x2V\x321\x3\x2\x2\x2X\x323\x3\x2\x2\x2Z\x329"+
		"\x3\x2\x2\x2\\\x333\x3\x2\x2\x2^\x335\x3\x2\x2\x2`\x337\x3\x2\x2\x2\x62"+
		"\x344\x3\x2\x2\x2\x64\x356\x3\x2\x2\x2\x66\x35B\x3\x2\x2\x2h\x35D\x3\x2"+
		"\x2\x2j\x35F\x3\x2\x2\x2l\x361\x3\x2\x2\x2n\x36F\x3\x2\x2\x2p\x371\x3"+
		"\x2\x2\x2r\x378\x3\x2\x2\x2t\x382\x3\x2\x2\x2v\x384\x3\x2\x2\x2x\x391"+
		"\x3\x2\x2\x2z\x39D\x3\x2\x2\x2|\x3AB\x3\x2\x2\x2~\x3AD\x3\x2\x2\x2\x80"+
		"\x3C3\x3\x2\x2\x2\x82\x3C5\x3\x2\x2\x2\x84\x3C7\x3\x2\x2\x2\x86\x3DD\x3"+
		"\x2\x2\x2\x88\x3E2\x3\x2\x2\x2\x8A\x3F4\x3\x2\x2\x2\x8C\x406\x3\x2\x2"+
		"\x2\x8E\x427\x3\x2\x2\x2\x90\x442\x3\x2\x2\x2\x92\x463\x3\x2\x2\x2\x94"+
		"\x469\x3\x2\x2\x2\x96\x479\x3\x2\x2\x2\x98\x47E\x3\x2\x2\x2\x9A\x480\x3"+
		"\x2\x2\x2\x9C\x482\x3\x2\x2\x2\x9E\x48C\x3\x2\x2\x2\xA0\x48F\x3\x2\x2"+
		"\x2\xA2\x492\x3\x2\x2\x2\xA4\x49C\x3\x2\x2\x2\xA6\x49E\x3\x2\x2\x2\xA8"+
		"\x4B7\x3\x2\x2\x2\xAA\x4BC\x3\x2\x2\x2\xAC\x4CA\x3\x2\x2\x2\xAE\x4D7\x3"+
		"\x2\x2\x2\xB0\x4D9\x3\x2\x2\x2\xB2\x4E9\x3\x2\x2\x2\xB4\x4F0\x3\x2\x2"+
		"\x2\xB6\x4FA\x3\x2\x2\x2\xB8\x4FC\x3\x2\x2\x2\xBA\x50D\x3\x2\x2\x2\xBC"+
		"\x526\x3\x2\x2\x2\xBE\x541\x3\x2\x2\x2\xC0\x543\x3\x2\x2\x2\xC2\x547\x3"+
		"\x2\x2\x2\xC4\x54B\x3\x2\x2\x2\xC6\x56F\x3\x2\x2\x2\xC8\x571\x3\x2\x2"+
		"\x2\xCA\x577\x3\x2\x2\x2\xCC\x579\x3\x2\x2\x2\xCE\x58B\x3\x2\x2\x2\xD0"+
		"\x59A\x3\x2\x2\x2\xD2\x5C7\x3\x2\x2\x2\xD4\x5C9\x3\x2\x2\x2\xD6\x5CB\x3"+
		"\x2\x2\x2\xD8\x5CD\x3\x2\x2\x2\xDA\x5D3\x3\x2\x2\x2\xDC\x5DF\x3\x2\x2"+
		"\x2\xDE\x5EB\x3\x2\x2\x2\xE0\x5F7\x3\x2\x2\x2\xE2\x60B\x3\x2\x2\x2\xE4"+
		"\x622\x3\x2\x2\x2\xE6\x63D\x3\x2\x2\x2\xE8\x653\x3\x2\x2\x2\xEA\x666\x3"+
		"\x2\x2\x2\xEC\x679\x3\x2\x2\x2\xEE\x687\x3\x2\x2\x2\xF0\x689\x3\x2\x2"+
		"\x2\xF2\x691\x3\x2\x2\x2\xF4\x69F\x3\x2\x2\x2\xF6\x6A5\x3\x2\x2\x2\xF8"+
		"\x6B1\x3\x2\x2\x2\xFA\x6B3\x3\x2\x2\x2\xFC\x6BB\x3\x2\x2\x2\xFE\x6BD\x3"+
		"\x2\x2\x2\x100\x6C9\x3\x2\x2\x2\x102\x6CB\x3\x2\x2\x2\x104\x6E0\x3\x2"+
		"\x2\x2\x106\x6E2\x3\x2\x2\x2\x108\x6F5\x3\x2\x2\x2\x10A\x710\x3\x2\x2"+
		"\x2\x10C\x712\x3\x2\x2\x2\x10E\x714\x3\x2\x2\x2\x110\x716\x3\x2\x2\x2"+
		"\x112\x725\x3\x2\x2\x2\x114\x73A\x3\x2\x2\x2\x116\x73F\x3\x2\x2\x2\x118"+
		"\x74D\x3\x2\x2\x2\x11A\x768\x3\x2\x2\x2\x11C\x771\x3\x2\x2\x2\x11E\x77F"+
		"\x3\x2\x2\x2\x120\x798\x3\x2\x2\x2\x122\x79F\x3\x2\x2\x2\x124\x7AE\x3"+
		"\x2\x2\x2\x126\x7CD\x3\x2\x2\x2\x128\x7DB\x3\x2\x2\x2\x12A\x7ED\x3\x2"+
		"\x2\x2\x12C\x800\x3\x2\x2\x2\x12E\x807\x3\x2\x2\x2\x130\x80B\x3\x2\x2"+
		"\x2\x132\x80D\x3\x2\x2\x2\x134\x80F\x3\x2\x2\x2\x136\x815\x3\x2\x2\x2"+
		"\x138\x817\x3\x2\x2\x2\x13A\x822\x3\x2\x2\x2\x13C\x824\x3\x2\x2\x2\x13E"+
		"\x833\x3\x2\x2\x2\x140\x835\x3\x2\x2\x2\x142\x837\x3\x2\x2\x2\x144\x839"+
		"\x3\x2\x2\x2\x146\x83F\x3\x2\x2\x2\x148\x847\x3\x2\x2\x2\x14A\x849\x3"+
		"\x2\x2\x2\x14C\x84B\x3\x2\x2\x2\x14E\x84D\x3\x2\x2\x2\x150\x851\x3\x2"+
		"\x2\x2\x152\x85D\x3\x2\x2\x2\x154\x85F\x3\x2\x2\x2\x156\x883\x3\x2\x2"+
		"\x2\x158\x8FD\x3\x2\x2\x2\x15A\x902\x3\x2\x2\x2\x15C\x904\x3\x2\x2\x2"+
		"\x15E\x906\x3\x2\x2\x2\x160\x908\x3\x2\x2\x2\x162\x917\x3\x2\x2\x2\x164"+
		"\x954\x3\x2\x2\x2\x166\x956\x3\x2\x2\x2\x168\x96C\x3\x2\x2\x2\x16A\x978"+
		"\x3\x2\x2\x2\x16C\x97A\x3\x2\x2\x2\x16E\x97C\x3\x2\x2\x2\x170\x97E\x3"+
		"\x2\x2\x2\x172\x98C\x3\x2\x2\x2\x174\x9A2\x3\x2\x2\x2\x176\x9A4\x3\x2"+
		"\x2\x2\x178\x9A6\x3\x2\x2\x2\x17A\x9A8\x3\x2\x2\x2\x17C\x9AC\x3\x2\x2"+
		"\x2\x17E\x9AE\x3\x2\x2\x2\x180\x9B0\x3\x2\x2\x2\x182\x9BD\x3\x2\x2\x2"+
		"\x184\x9C9\x3\x2\x2\x2\x186\x9CF\x3\x2\x2\x2\x188\x9D1\x3\x2\x2\x2\x18A"+
		"\x9D7\x3\x2\x2\x2\x18C\x9DE\x3\x2\x2\x2\x18E\x9E1\x3\x2\x2\x2\x190\x9EB"+
		"\x3\x2\x2\x2\x192\x9EF\x3\x2\x2\x2\x194\xA2D\x3\x2\x2\x2\x196\xA2F\x3"+
		"\x2\x2\x2\x198\xA31\x3\x2\x2\x2\x19A\xA39\x3\x2\x2\x2\x19C\x19D\x5\x4"+
		"\x3\x2\x19D\x19E\a\x2\x2\x3\x19E\x3\x3\x2\x2\x2\x19F\x1A0\x5\x184\xC3"+
		"\x2\x1A0\x1A2\x5\f\a\x2\x1A1\x1A3\x5\x6\x4\x2\x1A2\x1A1\x3\x2\x2\x2\x1A2"+
		"\x1A3\x3\x2\x2\x2\x1A3\x1A4\x3\x2\x2\x2\x1A4\x1A6\x5\f\a\x2\x1A5\x1A7"+
		"\x5\b\x5\x2\x1A6\x1A5\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7\x1A8\x3\x2"+
		"\x2\x2\x1A8\x1A9\x5\f\a\x2\x1A9\x1AA\x5\x14\v\x2\x1AA\x1AB\x5\f\a\x2\x1AB"+
		"\x1AC\x5\x1A\xE\x2\x1AC\x1AE\x5\f\a\x2\x1AD\x1AF\x5\x19A\xCE\x2\x1AE\x1AD"+
		"\x3\x2\x2\x2\x1AE\x1AF\x3\x2\x2\x2\x1AF\x5\x3\x2\x2\x2\x1B0\x1B1\a\xC6"+
		"\x2\x2\x1B1\x1B2\x5\x19A\xCE\x2\x1B2\x1B4\x5\x14E\xA8\x2\x1B3\x1B5\x5"+
		"\x19A\xCE\x2\x1B4\x1B3\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5\x1B7\x3"+
		"\x2\x2\x2\x1B6\x1B8\a\x42\x2\x2\x1B7\x1B6\x3\x2\x2\x2\x1B7\x1B8\x3\x2"+
		"\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1BA\x5\x184\xC3\x2\x1BA\a\x3\x2\x2"+
		"\x2\x1BB\x1C3\a:\x2\x2\x1BC\x1BD\x5\x19A\xCE\x2\x1BD\x1BE\a\xE9\x2\x2"+
		"\x1BE\x1BF\x5\x19A\xCE\x2\x1BF\x1C1\x5\x12E\x98\x2\x1C0\x1C2\x5\x19A\xCE"+
		"\x2\x1C1\x1C0\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C4\x3\x2\x2\x2"+
		"\x1C3\x1BC\x3\x2\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5"+
		"\x1C7\x5\x184\xC3\x2\x1C6\x1C8\x5\n\x6\x2\x1C7\x1C6\x3\x2\x2\x2\x1C8\x1C9"+
		"\x3\x2\x2\x2\x1C9\x1C7\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CB\x3"+
		"\x2\x2\x2\x1CB\x1CC\a\x64\x2\x2\x1CC\x1CD\x5\x184\xC3\x2\x1CD\t\x3\x2"+
		"\x2\x2\x1CE\x1D2\x5\x12E\x98\x2\x1CF\x1D1\x5\x19A\xCE\x2\x1D0\x1CF\x3"+
		"\x2\x2\x2\x1D1\x1D4\x3\x2\x2\x2\x1D2\x1D0\x3\x2\x2\x2\x1D2\x1D3\x3\x2"+
		"\x2\x2\x1D3\x1D5\x3\x2\x2\x2\x1D4\x1D2\x3\x2\x2\x2\x1D5\x1D9\a\xD1\x2"+
		"\x2\x1D6\x1D8\x5\x19A\xCE\x2\x1D7\x1D6\x3\x2\x2\x2\x1D8\x1DB\x3\x2\x2"+
		"\x2\x1D9\x1D7\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1DC\x3\x2\x2\x2"+
		"\x1DB\x1D9\x3\x2\x2\x2\x1DC\x1DF\x5\x156\xAC\x2\x1DD\x1DE\a*\x2\x2\x1DE"+
		"\x1E0\x5\x14E\xA8\x2\x1DF\x1DD\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0"+
		"\x1E1\x3\x2\x2\x2\x1E1\x1E2\x5\x184\xC3\x2\x1E2\v\x3\x2\x2\x2\x1E3\x1E4"+
		"\x5\xE\b\x2\x1E4\x1E5\x5\x184\xC3\x2\x1E5\x1E7\x3\x2\x2\x2\x1E6\x1E3\x3"+
		"\x2\x2\x2\x1E7\x1EA\x3\x2\x2\x2\x1E8\x1E6\x3\x2\x2\x2\x1E8\x1E9\x3\x2"+
		"\x2\x2\x1E9\r\x3\x2\x2\x2\x1EA\x1E8\x3\x2\x2\x2\x1EB\x1EC\a\x37\x2\x2"+
		"\x1EC\x1ED\x5\x19A\xCE\x2\x1ED\x1EF\x5\x10\t\x2\x1EE\x1F0\x5\x19A\xCE"+
		"\x2\x1EF\x1EE\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0\x1F1\x3\x2\x2\x2"+
		"\x1F1\x1F3\a\xD1\x2\x2\x1F2\x1F4\x5\x19A\xCE\x2\x1F3\x1F2\x3\x2\x2\x2"+
		"\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F5\x200\x5\x12\n\x2\x1F6"+
		"\x1F8\x5\x19A\xCE\x2\x1F7\x1F6\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8"+
		"\x1F9\x3\x2\x2\x2\x1F9\x1FB\a)\x2\x2\x1FA\x1FC\x5\x19A\xCE\x2\x1FB\x1FA"+
		"\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FF\x5"+
		"\x12\n\x2\x1FE\x1F7\x3\x2\x2\x2\x1FF\x202\x3\x2\x2\x2\x200\x1FE\x3\x2"+
		"\x2\x2\x200\x201\x3\x2\x2\x2\x201\xF\x3\x2\x2\x2\x202\x200\x3\x2\x2\x2"+
		"\x203\x204\x5\x162\xB2\x2\x204\x11\x3\x2\x2\x2\x205\x206\x5\x156\xAC\x2"+
		"\x206\x13\x3\x2\x2\x2\x207\x208\x5\x18\r\x2\x208\x209\x5\x184\xC3\x2\x209"+
		"\x20B\x3\x2\x2\x2\x20A\x207\x3\x2\x2\x2\x20B\x20E\x3\x2\x2\x2\x20C\x20A"+
		"\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D\x15\x3\x2\x2\x2\x20E\x20C\x3\x2"+
		"\x2\x2\x20F\x210\a\x97\x2\x2\x210\x211\x5\x19A\xCE\x2\x211\x212\x5\x14E"+
		"\xA8\x2\x212\x21A\x3\x2\x2\x2\x213\x214\a\x99\x2\x2\x214\x215\x5\x19A"+
		"\xCE\x2\x215\x216\t\x2\x2\x2\x216\x21A\x3\x2\x2\x2\x217\x21A\a\x98\x2"+
		"\x2\x218\x21A\a\x9A\x2\x2\x219\x20F\x3\x2\x2\x2\x219\x213\x3\x2\x2\x2"+
		"\x219\x217\x3\x2\x2\x2\x219\x218\x3\x2\x2\x2\x21A\x17\x3\x2\x2\x2\x21B"+
		"\x21D\x5\x19A\xCE\x2\x21C\x21B\x3\x2\x2\x2\x21C\x21D\x3\x2\x2\x2\x21D"+
		"\x228\x3\x2\x2\x2\x21E\x229\x5\xE\b\x2\x21F\x229\x5\x8CG\x2\x220\x229"+
		"\x5\x94K\x2\x221\x229\x5\xAAV\x2\x222\x229\x5\xB4[\x2\x223\x229\x5\x88"+
		"\x45\x2\x224\x229\x5\xD8m\x2\x225\x229\x5\x11A\x8E\x2\x226\x229\x5\x16"+
		"\f\x2\x227\x229\x5\x116\x8C\x2\x228\x21E\x3\x2\x2\x2\x228\x21F\x3\x2\x2"+
		"\x2\x228\x220\x3\x2\x2\x2\x228\x221\x3\x2\x2\x2\x228\x222\x3\x2\x2\x2"+
		"\x228\x223\x3\x2\x2\x2\x228\x224\x3\x2\x2\x2\x228\x225\x3\x2\x2\x2\x228"+
		"\x226\x3\x2\x2\x2\x228\x227\x3\x2\x2\x2\x229\x19\x3\x2\x2\x2\x22A\x22C"+
		"\x5\x19A\xCE\x2\x22B\x22A\x3\x2\x2\x2\x22B\x22C\x3\x2\x2\x2\x22C\x232"+
		"\x3\x2\x2\x2\x22D\x22E\x5\x1C\xF\x2\x22E\x22F\x5\x184\xC3\x2\x22F\x231"+
		"\x3\x2\x2\x2\x230\x22D\x3\x2\x2\x2\x231\x234\x3\x2\x2\x2\x232\x230\x3"+
		"\x2\x2\x2\x232\x233\x3\x2\x2\x2\x233\x1B\x3\x2\x2\x2\x234\x232\x3\x2\x2"+
		"\x2\x235\x23B\x5\xBC_\x2\x236\x23B\x5\xE4s\x2\x237\x23B\x5\xE6t\x2\x238"+
		"\x23B\x5\xE8u\x2\x239\x23B\x5\x112\x8A\x2\x23A\x235\x3\x2\x2\x2\x23A\x236"+
		"\x3\x2\x2\x2\x23A\x237\x3\x2\x2\x2\x23A\x238\x3\x2\x2\x2\x23A\x239\x3"+
		"\x2\x2\x2\x23B\x1D\x3\x2\x2\x2\x23C\x23D\x5 \x11\x2\x23D\x23E\x5\x184"+
		"\xC3\x2\x23E\x240\x3\x2\x2\x2\x23F\x23C\x3\x2\x2\x2\x240\x243\x3\x2\x2"+
		"\x2\x241\x23F\x3\x2\x2\x2\x241\x242\x3\x2\x2\x2\x242\x1F\x3\x2\x2\x2\x243"+
		"\x241\x3\x2\x2\x2\x244\x268\x5\x146\xA4\x2\x245\x268\x5\"\x12\x2\x246"+
		"\x268\x5\xE\b\x2\x247\x268\x5\x88\x45\x2\x248\x268\x5\xA8U\x2\x249\x268"+
		"\x5\xAEX\x2\x24A\x268\x5\xB0Y\x2\x24B\x268\x5\xB2Z\x2\x24C\x268\x5\xB6"+
		"\\\x2\x24D\x268\x5\xB8]\x2\x24E\x268\x5\xBA^\x2\x24F\x268\x5\xC0\x61\x2"+
		"\x250\x268\x5\xC2\x62\x2\x251\x268\x5\xC4\x63\x2\x252\x268\x5\xCA\x66"+
		"\x2\x253\x268\x5\xD8m\x2\x254\x268\x5\xDAn\x2\x255\x268\x5\xDCo\x2\x256"+
		"\x268\x5\xDEp\x2\x257\x268\x5\xE0q\x2\x258\x268\x5\xE2r\x2\x259\x268\x5"+
		"\xEAv\x2\x25A\x268\x5\xF0y\x2\x25B\x268\x5\xFA~\x2\x25C\x268\x5\xFC\x7F"+
		"\x2\x25D\x268\x5\xFE\x80\x2\x25E\x268\x5\x102\x82\x2\x25F\x268\x5\x110"+
		"\x89\x2\x260\x268\x5\x100\x81\x2\x261\x268\x5\x11A\x8E\x2\x262\x268\x5"+
		"\x120\x91\x2\x263\x268\x5\x122\x92\x2\x264\x268\x5\x124\x93\x2\x265\x268"+
		"\x5\x126\x94\x2\x266\x268\x5\xF8}\x2\x267\x244\x3\x2\x2\x2\x267\x245\x3"+
		"\x2\x2\x2\x267\x246\x3\x2\x2\x2\x267\x247\x3\x2\x2\x2\x267\x248\x3\x2"+
		"\x2\x2\x267\x249\x3\x2\x2\x2\x267\x24A\x3\x2\x2\x2\x267\x24B\x3\x2\x2"+
		"\x2\x267\x24C\x3\x2\x2\x2\x267\x24D\x3\x2\x2\x2\x267\x24E\x3\x2\x2\x2"+
		"\x267\x24F\x3\x2\x2\x2\x267\x250\x3\x2\x2\x2\x267\x251\x3\x2\x2\x2\x267"+
		"\x252\x3\x2\x2\x2\x267\x253\x3\x2\x2\x2\x267\x254\x3\x2\x2\x2\x267\x255"+
		"\x3\x2\x2\x2\x267\x256\x3\x2\x2\x2\x267\x257\x3\x2\x2\x2\x267\x258\x3"+
		"\x2\x2\x2\x267\x259\x3\x2\x2\x2\x267\x25A\x3\x2\x2\x2\x267\x25B\x3\x2"+
		"\x2\x2\x267\x25C\x3\x2\x2\x2\x267\x25D\x3\x2\x2\x2\x267\x25E\x3\x2\x2"+
		"\x2\x267\x25F\x3\x2\x2\x2\x267\x260\x3\x2\x2\x2\x267\x261\x3\x2\x2\x2"+
		"\x267\x262\x3\x2\x2\x2\x267\x263\x3\x2\x2\x2\x267\x264\x3\x2\x2\x2\x267"+
		"\x265\x3\x2\x2\x2\x267\x266\x3\x2\x2\x2\x268!\x3\x2\x2\x2\x269\x278\x5"+
		"$\x13\x2\x26A\x278\x5> \x2\x26B\x278\x5<\x1F\x2\x26C\x278\x5\x42\"\x2"+
		"\x26D\x278\x5\x46$\x2\x26E\x278\x5N(\x2\x26F\x278\x5P)\x2\x270\x278\x5"+
		"T+\x2\x271\x278\x5X-\x2\x272\x278\x5`\x31\x2\x273\x278\x5v<\x2\x274\x278"+
		"\x5x=\x2\x275\x278\x5~@\x2\x276\x278\x5\x84\x43\x2\x277\x269\x3\x2\x2"+
		"\x2\x277\x26A\x3\x2\x2\x2\x277\x26B\x3\x2\x2\x2\x277\x26C\x3\x2\x2\x2"+
		"\x277\x26D\x3\x2\x2\x2\x277\x26E\x3\x2\x2\x2\x277\x26F\x3\x2\x2\x2\x277"+
		"\x270\x3\x2\x2\x2\x277\x271\x3\x2\x2\x2\x277\x272\x3\x2\x2\x2\x277\x273"+
		"\x3\x2\x2\x2\x277\x274\x3\x2\x2\x2\x277\x275\x3\x2\x2\x2\x277\x276\x3"+
		"\x2\x2\x2\x278#\x3\x2\x2\x2\x279\x27A\a\x95\x2\x2\x27A\x27B\x5\x19A\xCE"+
		"\x2\x27B\x27F\x5&\x14\x2\x27C\x27D\x5\x19A\xCE\x2\x27D\x27E\x5(\x15\x2"+
		"\x27E\x280\x3\x2\x2\x2\x27F\x27C\x3\x2\x2\x2\x27F\x280\x3\x2\x2\x2\x280"+
		"\x284\x3\x2\x2\x2\x281\x282\x5\x19A\xCE\x2\x282\x283\x5,\x17\x2\x283\x285"+
		"\x3\x2\x2\x2\x284\x281\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285\x289\x3"+
		"\x2\x2\x2\x286\x287\x5\x19A\xCE\x2\x287\x288\x5\x30\x19\x2\x288\x28A\x3"+
		"\x2\x2\x2\x289\x286\x3\x2\x2\x2\x289\x28A\x3\x2\x2\x2\x28A\x28B\x3\x2"+
		"\x2\x2\x28B\x28C\x5\x19A\xCE\x2\x28C\x28D\a\x39\x2\x2\x28D\x28E\x5\x19A"+
		"\xCE\x2\x28E\x292\x5\x36\x1C\x2\x28F\x290\x5\x19A\xCE\x2\x290\x291\x5"+
		"\x32\x1A\x2\x291\x293\x3\x2\x2\x2\x292\x28F\x3\x2\x2\x2\x292\x293\x3\x2"+
		"\x2\x2\x293%\x3\x2\x2\x2\x294\x295\x5\x156\xAC\x2\x295\'\x3\x2\x2\x2\x296"+
		"\x297\aq\x2\x2\x297\x298\x5\x19A\xCE\x2\x298\x299\x5*\x16\x2\x299)\x3"+
		"\x2\x2\x2\x29A\x29B\t\x3\x2\x2\x29B+\x3\x2\x2\x2\x29C\x29D\a\x33\x2\x2"+
		"\x29D\x29E\x5\x19A\xCE\x2\x29E\x29F\x5.\x18\x2\x29F-\x3\x2\x2\x2\x2A0"+
		"\x2A1\t\x4\x2\x2\x2A1/\x3\x2\x2\x2\x2A2\x2A3\t\x5\x2\x2\x2A3\x31\x3\x2"+
		"\x2\x2\x2A4\x2A6\a\x1D\x2\x2\x2A5\x2A7\x5\x19A\xCE\x2\x2A6\x2A5\x3\x2"+
		"\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2AA\a\xD1\x2"+
		"\x2\x2A9\x2AB\x5\x19A\xCE\x2\x2AA\x2A9\x3\x2\x2\x2\x2AA\x2AB\x3\x2\x2"+
		"\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AD\x5\x34\x1B\x2\x2AD\x33\x3\x2\x2\x2"+
		"\x2AE\x2AF\x5\x156\xAC\x2\x2AF\x35\x3\x2\x2\x2\x2B0\x2B3\x5\x38\x1D\x2"+
		"\x2B1\x2B3\x5:\x1E\x2\x2B2\x2B0\x3\x2\x2\x2\x2B2\x2B1\x3\x2\x2\x2\x2B3"+
		"\x37\x3\x2\x2\x2\x2B4\x2B5\a.\x2\x2\x2B5\x2B6\x5\x156\xAC\x2\x2B6\x39"+
		"\x3\x2\x2\x2\x2B7\x2B8\x5\x156\xAC\x2\x2B8;\x3\x2\x2\x2\x2B9\x2BD\a\x43"+
		"\x2\x2\x2BA\x2BB\x5\x19A\xCE\x2\x2BB\x2BC\x5@!\x2\x2BC\x2BE\x3\x2\x2\x2"+
		"\x2BD\x2BA\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE=\x3\x2\x2\x2\x2BF\x2C0"+
		"\a\xAD\x2\x2\x2C0?\x3\x2\x2\x2\x2C1\x2CC\x5\x36\x1C\x2\x2C2\x2C4\x5\x19A"+
		"\xCE\x2\x2C3\x2C2\x3\x2\x2\x2\x2C3\x2C4\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2"+
		"\x2\x2C5\x2C7\a)\x2\x2\x2C6\x2C8\x5\x19A\xCE\x2\x2C7\x2C6\x3\x2\x2\x2"+
		"\x2C7\x2C8\x3\x2\x2\x2\x2C8\x2C9\x3\x2\x2\x2\x2C9\x2CB\x5\x36\x1C\x2\x2CA"+
		"\x2C3\x3\x2\x2\x2\x2CB\x2CE\x3\x2\x2\x2\x2CC\x2CA\x3\x2\x2\x2\x2CC\x2CD"+
		"\x3\x2\x2\x2\x2CD\x41\x3\x2\x2\x2\x2CE\x2CC\x3\x2\x2\x2\x2CF\x2D0\a\xB1"+
		"\x2\x2\x2D0\x2D1\x5\x19A\xCE\x2\x2D1\x2D3\x5\x36\x1C\x2\x2D2\x2D4\x5\x19A"+
		"\xCE\x2\x2D3\x2D2\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2\x2D4\x2D5\x3\x2\x2"+
		"\x2\x2D5\x2D7\a)\x2\x2\x2D6\x2D8\x5\x19A\xCE\x2\x2D7\x2D6\x3\x2\x2\x2"+
		"\x2D7\x2D8\x3\x2\x2\x2\x2D8\x2D9\x3\x2\x2\x2\x2D9\x2DA\x5\x44#\x2\x2DA"+
		"\x43\x3\x2\x2\x2\x2DB\x2DC\x5\x156\xAC\x2\x2DC\x45\x3\x2\x2\x2\x2DD\x2DE"+
		"\a~\x2\x2\x2DE\x2DF\x5\x19A\xCE\x2\x2DF\x2E8\x5\x36\x1C\x2\x2E0\x2E2\x5"+
		"\x19A\xCE\x2\x2E1\x2E0\x3\x2\x2\x2\x2E1\x2E2\x3\x2\x2\x2\x2E2\x2E3\x3"+
		"\x2\x2\x2\x2E3\x2E5\a)\x2\x2\x2E4\x2E6\x5\x19A\xCE\x2\x2E5\x2E4\x3\x2"+
		"\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7\x2E9\x5H%\x2\x2E8"+
		"\x2E1\x3\x2\x2\x2\x2E8\x2E9\x3\x2\x2\x2\x2E9G\x3\x2\x2\x2\x2EA\x2F5\x5"+
		"J&\x2\x2EB\x2EC\x5J&\x2\x2EC\x2ED\x5\x19A\xCE\x2\x2ED\x2EF\x3\x2\x2\x2"+
		"\x2EE\x2EB\x3\x2\x2\x2\x2EE\x2EF\x3\x2\x2\x2\x2EF\x2F0\x3\x2\x2\x2\x2F0"+
		"\x2F1\a\xBF\x2\x2\x2F1\x2F2\x5\x19A\xCE\x2\x2F2\x2F3\x5L\'\x2\x2F3\x2F5"+
		"\x3\x2\x2\x2\x2F4\x2EA\x3\x2\x2\x2\x2F4\x2EE\x3\x2\x2\x2\x2F5I\x3\x2\x2"+
		"\x2\x2F6\x2F7\x5\x156\xAC\x2\x2F7K\x3\x2\x2\x2\x2F8\x2F9\x5\x156\xAC\x2"+
		"\x2F9M\x3\x2\x2\x2\x2FA\x2FB\a\xC3\x2\x2\x2FB\x2FC\x5\x19A\xCE\x2\x2FC"+
		"\x305\x5\x36\x1C\x2\x2FD\x2FF\x5\x19A\xCE\x2\x2FE\x2FD\x3\x2\x2\x2\x2FE"+
		"\x2FF\x3\x2\x2\x2\x2FF\x300\x3\x2\x2\x2\x300\x302\a)\x2\x2\x301\x303\x5"+
		"\x19A\xCE\x2\x302\x301\x3\x2\x2\x2\x302\x303\x3\x2\x2\x2\x303\x304\x3"+
		"\x2\x2\x2\x304\x306\x5H%\x2\x305\x2FE\x3\x2\x2\x2\x305\x306\x3\x2\x2\x2"+
		"\x306O\x3\x2\x2\x2\x307\x308\a\x84\x2\x2\x308\x309\x5\x19A\xCE\x2\x309"+
		"\x30B\x5\x38\x1D\x2\x30A\x30C\x5\x19A\xCE\x2\x30B\x30A\x3\x2\x2\x2\x30B"+
		"\x30C\x3\x2\x2\x2\x30C\x30D\x3\x2\x2\x2\x30D\x30F\a)\x2\x2\x30E\x310\x5"+
		"\x19A\xCE\x2\x30F\x30E\x3\x2\x2\x2\x30F\x310\x3\x2\x2\x2\x310\x311\x3"+
		"\x2\x2\x2\x311\x312\x5R*\x2\x312Q\x3\x2\x2\x2\x313\x314\x5\x156\xAC\x2"+
		"\x314S\x3\x2\x2\x2\x315\x316\a\xC9\x2\x2\x316\x317\x5\x19A\xCE\x2\x317"+
		"\x319\x5\x38\x1D\x2\x318\x31A\x5\x19A\xCE\x2\x319\x318\x3\x2\x2\x2\x319"+
		"\x31A\x3\x2\x2\x2\x31A\x31B\x3\x2\x2\x2\x31B\x31D\a)\x2\x2\x31C\x31E\x5"+
		"\x19A\xCE\x2\x31D\x31C\x3\x2\x2\x2\x31D\x31E\x3\x2\x2\x2\x31E\x31F\x3"+
		"\x2\x2\x2\x31F\x320\x5V,\x2\x320U\x3\x2\x2\x2\x321\x322\x5\x156\xAC\x2"+
		"\x322W\x3\x2\x2\x2\x323\x327\x5Z.\x2\x324\x325\x5\x19A\xCE\x2\x325\x326"+
		"\x5\x62\x32\x2\x326\x328\x3\x2\x2\x2\x327\x324\x3\x2\x2\x2\x327\x328\x3"+
		"\x2\x2\x2\x328Y\x3\x2\x2\x2\x329\x32B\x5\\/\x2\x32A\x32C\x5\x19A\xCE\x2"+
		"\x32B\x32A\x3\x2\x2\x2\x32B\x32C\x3\x2\x2\x2\x32C\x32D\x3\x2\x2\x2\x32D"+
		"\x32F\a-\x2\x2\x32E\x330\x5\x19A\xCE\x2\x32F\x32E\x3\x2\x2\x2\x32F\x330"+
		"\x3\x2\x2\x2\x330\x331\x3\x2\x2\x2\x331\x332\x5^\x30\x2\x332[\x3\x2\x2"+
		"\x2\x333\x334\a\x16\x2\x2\x334]\x3\x2\x2\x2\x335\x336\a\x9F\x2\x2\x336"+
		"_\x3\x2\x2\x2\x337\x338\a\x9F\x2\x2\x338\x339\x5\x19A\xCE\x2\x339\x33B"+
		"\x5\x38\x1D\x2\x33A\x33C\x5\x19A\xCE\x2\x33B\x33A\x3\x2\x2\x2\x33B\x33C"+
		"\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2\x33D\x342\a)\x2\x2\x33E\x340\x5\x19A"+
		"\xCE\x2\x33F\x33E\x3\x2\x2\x2\x33F\x340\x3\x2\x2\x2\x340\x341\x3\x2\x2"+
		"\x2\x341\x343\x5\x62\x32\x2\x342\x33F\x3\x2\x2\x2\x342\x343\x3\x2\x2\x2"+
		"\x343\x61\x3\x2\x2\x2\x344\x34B\x5\x64\x33\x2\x345\x347\x5\x19A\xCE\x2"+
		"\x346\x345\x3\x2\x2\x2\x346\x347\x3\x2\x2\x2\x347\x348\x3\x2\x2\x2\x348"+
		"\x34A\x5\x64\x33\x2\x349\x346\x3\x2\x2\x2\x34A\x34D\x3\x2\x2\x2\x34B\x349"+
		"\x3\x2\x2\x2\x34B\x34C\x3\x2\x2\x2\x34C\x63\x3\x2\x2\x2\x34D\x34B\x3\x2"+
		"\x2\x2\x34E\x357\x5\x66\x34\x2\x34F\x357\x5h\x35\x2\x350\x352\x5\x66\x34"+
		"\x2\x351\x353\x5\x19A\xCE\x2\x352\x351\x3\x2\x2\x2\x352\x353\x3\x2\x2"+
		"\x2\x353\x354\x3\x2\x2\x2\x354\x355\x5h\x35\x2\x355\x357\x3\x2\x2\x2\x356"+
		"\x34E\x3\x2\x2\x2\x356\x34F\x3\x2\x2\x2\x356\x350\x3\x2\x2\x2\x357\x65"+
		"\x3\x2\x2\x2\x358\x35C\x5l\x37\x2\x359\x35C\x5p\x39\x2\x35A\x35C\x5j\x36"+
		"\x2\x35B\x358\x3\x2\x2\x2\x35B\x359\x3\x2\x2\x2\x35B\x35A\x3\x2\x2\x2"+
		"\x35Cg\x3\x2\x2\x2\x35D\x35E\t\x6\x2\x2\x35Ei\x3\x2\x2\x2\x35F\x360\x5"+
		"\x156\xAC\x2\x360k\x3\x2\x2\x2\x361\x363\a\xB6\x2\x2\x362\x364\x5\x19A"+
		"\xCE\x2\x363\x362\x3\x2\x2\x2\x363\x364\x3\x2\x2\x2\x364\x365\x3\x2\x2"+
		"\x2\x365\x367\a\xD5\x2\x2\x366\x368\x5\x19A\xCE\x2\x367\x366\x3\x2\x2"+
		"\x2\x367\x368\x3\x2\x2\x2\x368\x369\x3\x2\x2\x2\x369\x36B\x5n\x38\x2\x36A"+
		"\x36C\x5\x19A\xCE\x2\x36B\x36A\x3\x2\x2\x2\x36B\x36C\x3\x2\x2\x2\x36C"+
		"\x36D\x3\x2\x2\x2\x36D\x36E\a\xDC\x2\x2\x36Em\x3\x2\x2\x2\x36F\x370\x5"+
		"\x156\xAC\x2\x370o\x3\x2\x2\x2\x371\x376\a\xBC\x2\x2\x372\x374\x5\x19A"+
		"\xCE\x2\x373\x372\x3\x2\x2\x2\x373\x374\x3\x2\x2\x2\x374\x375\x3\x2\x2"+
		"\x2\x375\x377\x5r:\x2\x376\x373\x3\x2\x2\x2\x376\x377\x3\x2\x2\x2\x377"+
		"q\x3\x2\x2\x2\x378\x37A\a\xD5\x2\x2\x379\x37B\x5\x19A\xCE\x2\x37A\x379"+
		"\x3\x2\x2\x2\x37A\x37B\x3\x2\x2\x2\x37B\x37C\x3\x2\x2\x2\x37C\x37E\x5"+
		"t;\x2\x37D\x37F\x5\x19A\xCE\x2\x37E\x37D\x3\x2\x2\x2\x37E\x37F\x3\x2\x2"+
		"\x2\x37F\x380\x3\x2\x2\x2\x380\x381\a\xDC\x2\x2\x381s\x3\x2\x2\x2\x382"+
		"\x383\x5\x156\xAC\x2\x383u\x3\x2\x2\x2\x384\x385\a\xCC\x2\x2\x385\x386"+
		"\x5\x19A\xCE\x2\x386\x388\x5\x38\x1D\x2\x387\x389\x5\x19A\xCE\x2\x388"+
		"\x387\x3\x2\x2\x2\x388\x389\x3\x2\x2\x2\x389\x38A\x3\x2\x2\x2\x38A\x38F"+
		"\a)\x2\x2\x38B\x38D\x5\x19A\xCE\x2\x38C\x38B\x3\x2\x2\x2\x38C\x38D\x3"+
		"\x2\x2\x2\x38D\x38E\x3\x2\x2\x2\x38E\x390\x5\x62\x32\x2\x38F\x38C\x3\x2"+
		"\x2\x2\x38F\x390\x3\x2\x2\x2\x390w\x3\x2\x2\x2\x391\x392\a{\x2\x2\x392"+
		"\x393\x5\x19A\xCE\x2\x393\x395\x5\x38\x1D\x2\x394\x396\x5\x19A\xCE\x2"+
		"\x395\x394\x3\x2\x2\x2\x395\x396\x3\x2\x2\x2\x396\x397\x3\x2\x2\x2\x397"+
		"\x399\a)\x2\x2\x398\x39A\x5\x19A\xCE\x2\x399\x398\x3\x2\x2\x2\x399\x39A"+
		"\x3\x2\x2\x2\x39A\x39B\x3\x2\x2\x2\x39B\x39C\x5z>\x2\x39Cy\x3\x2\x2\x2"+
		"\x39D\x3A8\x5|?\x2\x39E\x3A0\x5\x19A\xCE\x2\x39F\x39E\x3\x2\x2\x2\x39F"+
		"\x3A0\x3\x2\x2\x2\x3A0\x3A1\x3\x2\x2\x2\x3A1\x3A3\a)\x2\x2\x3A2\x3A4\x5"+
		"\x19A\xCE\x2\x3A3\x3A2\x3\x2\x2\x2\x3A3\x3A4\x3\x2\x2\x2\x3A4\x3A5\x3"+
		"\x2\x2\x2\x3A5\x3A7\x5|?\x2\x3A6\x39F\x3\x2\x2\x2\x3A7\x3AA\x3\x2\x2\x2"+
		"\x3A8\x3A6\x3\x2\x2\x2\x3A8\x3A9\x3\x2\x2\x2\x3A9{\x3\x2\x2\x2\x3AA\x3A8"+
		"\x3\x2\x2\x2\x3AB\x3AC\x5\x156\xAC\x2\x3AC}\x3\x2\x2\x2\x3AD\x3AE\a\xA6"+
		"\x2\x2\x3AE\x3AF\x5\x19A\xCE\x2\x3AF\x3B1\x5\x36\x1C\x2\x3B0\x3B2\x5\x19A"+
		"\xCE\x2\x3B1\x3B0\x3\x2\x2\x2\x3B1\x3B2\x3\x2\x2\x2\x3B2\x3B3\x3\x2\x2"+
		"\x2\x3B3\x3B5\a)\x2\x2\x3B4\x3B6\x5\x19A\xCE\x2\x3B5\x3B4\x3\x2\x2\x2"+
		"\x3B5\x3B6\x3\x2\x2\x2\x3B6\x3B8\x3\x2\x2\x2\x3B7\x3B9\x5\x80\x41\x2\x3B8"+
		"\x3B7\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2\x3B9\x3BB\x3\x2\x2\x2\x3BA\x3BC"+
		"\x5\x19A\xCE\x2\x3BB\x3BA\x3\x2\x2\x2\x3BB\x3BC\x3\x2\x2\x2\x3BC\x3BD"+
		"\x3\x2\x2\x2\x3BD\x3BF\a)\x2\x2\x3BE\x3C0\x5\x19A\xCE\x2\x3BF\x3BE\x3"+
		"\x2\x2\x2\x3BF\x3C0\x3\x2\x2\x2\x3C0\x3C1\x3\x2\x2\x2\x3C1\x3C2\x5\x82"+
		"\x42\x2\x3C2\x7F\x3\x2\x2\x2\x3C3\x3C4\x5\x156\xAC\x2\x3C4\x81\x3\x2\x2"+
		"\x2\x3C5\x3C6\x5\x156\xAC\x2\x3C6\x83\x3\x2\x2\x2\x3C7\x3C8\as\x2\x2\x3C8"+
		"\x3C9\x5\x19A\xCE\x2\x3C9\x3CB\x5\x36\x1C\x2\x3CA\x3CC\x5\x19A\xCE\x2"+
		"\x3CB\x3CA\x3\x2\x2\x2\x3CB\x3CC\x3\x2\x2\x2\x3CC\x3CD\x3\x2\x2\x2\x3CD"+
		"\x3CF\a)\x2\x2\x3CE\x3D0\x5\x19A\xCE\x2\x3CF\x3CE\x3\x2\x2\x2\x3CF\x3D0"+
		"\x3\x2\x2\x2\x3D0\x3D2\x3\x2\x2\x2\x3D1\x3D3\x5\x80\x41\x2\x3D2\x3D1\x3"+
		"\x2\x2\x2\x3D2\x3D3\x3\x2\x2\x2\x3D3\x3D5\x3\x2\x2\x2\x3D4\x3D6\x5\x19A"+
		"\xCE\x2\x3D5\x3D4\x3\x2\x2\x2\x3D5\x3D6\x3\x2\x2\x2\x3D6\x3D7\x3\x2\x2"+
		"\x2\x3D7\x3D9\a)\x2\x2\x3D8\x3DA\x5\x19A\xCE\x2\x3D9\x3D8\x3\x2\x2\x2"+
		"\x3D9\x3DA\x3\x2\x2\x2\x3DA\x3DB\x3\x2\x2\x2\x3DB\x3DC\x5\x86\x44\x2\x3DC"+
		"\x85\x3\x2\x2\x2\x3DD\x3DE\x5\x156\xAC\x2\x3DE\x87\x3\x2\x2\x2\x3DF\x3E0"+
		"\x5\x154\xAB\x2\x3E0\x3E1\x5\x19A\xCE\x2\x3E1\x3E3\x3\x2\x2\x2\x3E2\x3DF"+
		"\x3\x2\x2\x2\x3E2\x3E3\x3\x2\x2\x2\x3E3\x3E4\x3\x2\x2\x2\x3E4\x3E5\a\x44"+
		"\x2\x2\x3E5\x3E6\x5\x19A\xCE\x2\x3E6\x3F1\x5\x8A\x46\x2\x3E7\x3E9\x5\x19A"+
		"\xCE\x2\x3E8\x3E7\x3\x2\x2\x2\x3E8\x3E9\x3\x2\x2\x2\x3E9\x3EA\x3\x2\x2"+
		"\x2\x3EA\x3EC\a)\x2\x2\x3EB\x3ED\x5\x19A\xCE\x2\x3EC\x3EB\x3\x2\x2\x2"+
		"\x3EC\x3ED\x3\x2\x2\x2\x3ED\x3EE\x3\x2\x2\x2\x3EE\x3F0\x5\x8A\x46\x2\x3EF"+
		"\x3E8\x3\x2\x2\x2\x3F0\x3F3\x3\x2\x2\x2\x3F1\x3EF\x3\x2\x2\x2\x3F1\x3F2"+
		"\x3\x2\x2\x2\x3F2\x89\x3\x2\x2\x2\x3F3\x3F1\x3\x2\x2\x2\x3F4\x3F8\x5\x130"+
		"\x99\x2\x3F5\x3F6\x5\x19A\xCE\x2\x3F6\x3F7\x5\x13C\x9F\x2\x3F7\x3F9\x3"+
		"\x2\x2\x2\x3F8\x3F5\x3\x2\x2\x2\x3F8\x3F9\x3\x2\x2\x2\x3F9\x3FB\x3\x2"+
		"\x2\x2\x3FA\x3FC\x5\x19A\xCE\x2\x3FB\x3FA\x3\x2\x2\x2\x3FB\x3FC\x3\x2"+
		"\x2\x2\x3FC\x3FD\x3\x2\x2\x2\x3FD\x3FF\a\xD1\x2\x2\x3FE\x400\x5\x19A\xCE"+
		"\x2\x3FF\x3FE\x3\x2\x2\x2\x3FF\x400\x3\x2\x2\x2\x400\x401\x3\x2\x2\x2"+
		"\x401\x402\x5\x156\xAC\x2\x402\x8B\x3\x2\x2\x2\x403\x404\x5\x154\xAB\x2"+
		"\x404\x405\x5\x19A\xCE\x2\x405\x407\x3\x2\x2\x2\x406\x403\x3\x2\x2\x2"+
		"\x406\x407\x3\x2\x2\x2\x407\x408\x3\x2\x2\x2\x408\x409\aG\x2\x2\x409\x40C"+
		"\x5\x19A\xCE\x2\x40A\x40B\a\xA4\x2\x2\x40B\x40D\x5\x19A\xCE\x2\x40C\x40A"+
		"\x3\x2\x2\x2\x40C\x40D\x3\x2\x2\x2\x40D\x40E\x3\x2\x2\x2\x40E\x40F\t\a"+
		"\x2\x2\x40F\x410\x5\x19A\xCE\x2\x410\x411\x5\x130\x99\x2\x411\x412\x5"+
		"\x19A\xCE\x2\x412\x413\a\x82\x2\x2\x413\x414\x5\x19A\xCE\x2\x414\x41A"+
		"\a\xDF\x2\x2\x415\x416\x5\x19A\xCE\x2\x416\x417\a\x35\x2\x2\x417\x418"+
		"\x5\x19A\xCE\x2\x418\x419\a\xDF\x2\x2\x419\x41B\x3\x2\x2\x2\x41A\x415"+
		"\x3\x2\x2\x2\x41A\x41B\x3\x2\x2\x2\x41B\x420\x3\x2\x2\x2\x41C\x41E\x5"+
		"\x19A\xCE\x2\x41D\x41C\x3\x2\x2\x2\x41D\x41E\x3\x2\x2\x2\x41E\x41F\x3"+
		"\x2\x2\x2\x41F\x421\x5\x8EH\x2\x420\x41D\x3\x2\x2\x2\x420\x421\x3\x2\x2"+
		"\x2\x421\x425\x3\x2\x2\x2\x422\x423\x5\x19A\xCE\x2\x423\x424\x5\x13C\x9F"+
		"\x2\x424\x426\x3\x2\x2\x2\x425\x422\x3\x2\x2\x2\x425\x426\x3\x2\x2\x2"+
		"\x426\x8D\x3\x2\x2\x2\x427\x439\a\xD5\x2\x2\x428\x42A\x5\x19A\xCE\x2\x429"+
		"\x428\x3\x2\x2\x2\x429\x42A\x3\x2\x2\x2\x42A\x42B\x3\x2\x2\x2\x42B\x436"+
		"\x5\x90I\x2\x42C\x42E\x5\x19A\xCE\x2\x42D\x42C\x3\x2\x2\x2\x42D\x42E\x3"+
		"\x2\x2\x2\x42E\x42F\x3\x2\x2\x2\x42F\x431\a)\x2\x2\x430\x432\x5\x19A\xCE"+
		"\x2\x431\x430\x3\x2\x2\x2\x431\x432\x3\x2\x2\x2\x432\x433\x3\x2\x2\x2"+
		"\x433\x435\x5\x90I\x2\x434\x42D\x3\x2\x2\x2\x435\x438\x3\x2\x2\x2\x436"+
		"\x434\x3\x2\x2\x2\x436\x437\x3\x2\x2\x2\x437\x43A\x3\x2\x2\x2\x438\x436"+
		"\x3\x2\x2\x2\x439\x429\x3\x2\x2\x2\x439\x43A\x3\x2\x2\x2\x43A\x43C\x3"+
		"\x2\x2\x2\x43B\x43D\x5\x19A\xCE\x2\x43C\x43B\x3\x2\x2\x2\x43C\x43D\x3"+
		"\x2\x2\x2\x43D\x43E\x3\x2\x2\x2\x43E\x43F\a\xDC\x2\x2\x43F\x8F\x3\x2\x2"+
		"\x2\x440\x441\a\x96\x2\x2\x441\x443\x5\x19A\xCE\x2\x442\x440\x3\x2\x2"+
		"\x2\x442\x443\x3\x2\x2\x2\x443\x446\x3\x2\x2\x2\x444\x445\t\b\x2\x2\x445"+
		"\x447\x5\x19A\xCE\x2\x446\x444\x3\x2\x2\x2\x446\x447\x3\x2\x2\x2\x447"+
		"\x44A\x3\x2\x2\x2\x448\x449\a\x9D\x2\x2\x449\x44B\x5\x19A\xCE\x2\x44A"+
		"\x448\x3\x2\x2\x2\x44A\x44B\x3\x2\x2\x2\x44B\x44C\x3\x2\x2\x2\x44C\x455"+
		"\x5\x12E\x98\x2\x44D\x44F\x5\x19A\xCE\x2\x44E\x44D\x3\x2\x2\x2\x44E\x44F"+
		"\x3\x2\x2\x2\x44F\x450\x3\x2\x2\x2\x450\x452\a\xD5\x2\x2\x451\x453\x5"+
		"\x19A\xCE\x2\x452\x451\x3\x2\x2\x2\x452\x453\x3\x2\x2\x2\x453\x454\x3"+
		"\x2\x2\x2\x454\x456\a\xDC\x2\x2\x455\x44E\x3\x2\x2\x2\x455\x456\x3\x2"+
		"\x2\x2\x456\x45B\x3\x2\x2\x2\x457\x459\x5\x19A\xCE\x2\x458\x457\x3\x2"+
		"\x2\x2\x458\x459\x3\x2\x2\x2\x459\x45A\x3\x2\x2\x2\x45A\x45C\x5\x13C\x9F"+
		"\x2\x45B\x458\x3\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\x461\x3\x2\x2\x2"+
		"\x45D\x45F\x5\x19A\xCE\x2\x45E\x45D\x3\x2\x2\x2\x45E\x45F\x3\x2\x2\x2"+
		"\x45F\x460\x3\x2\x2\x2\x460\x462\x5\x92J\x2\x461\x45E\x3\x2\x2\x2\x461"+
		"\x462\x3\x2\x2\x2\x462\x91\x3\x2\x2\x2\x463\x465\a\xD1\x2\x2\x464\x466"+
		"\x5\x19A\xCE\x2\x465\x464\x3\x2\x2\x2\x465\x466\x3\x2\x2\x2\x466\x467"+
		"\x3\x2\x2\x2\x467\x468\x5\x156\xAC\x2\x468\x93\x3\x2\x2\x2\x469\x46A\x5"+
		"\x96L\x2\x46A\x46B\x5\x19A\xCE\x2\x46B\x476\x5\x98M\x2\x46C\x46E\x5\x19A"+
		"\xCE\x2\x46D\x46C\x3\x2\x2\x2\x46D\x46E\x3\x2\x2\x2\x46E\x46F\x3\x2\x2"+
		"\x2\x46F\x471\a)\x2\x2\x470\x472\x5\x19A\xCE\x2\x471\x470\x3\x2\x2\x2"+
		"\x471\x472\x3\x2\x2\x2\x472\x473\x3\x2\x2\x2\x473\x475\x5\x98M\x2\x474"+
		"\x46D\x3\x2\x2\x2\x475\x478\x3\x2\x2\x2\x476\x474\x3\x2\x2\x2\x476\x477"+
		"\x3\x2\x2\x2\x477\x95\x3\x2\x2\x2\x478\x476\x3\x2\x2\x2\x479\x47A\t\t"+
		"\x2\x2\x47A\x97\x3\x2\x2\x2\x47B\x47F\x5\x9AN\x2\x47C\x47F\x5\x9CO\x2"+
		"\x47D\x47F\x5\xA2R\x2\x47E\x47B\x3\x2\x2\x2\x47E\x47C\x3\x2\x2\x2\x47E"+
		"\x47D\x3\x2\x2\x2\x47F\x99\x3\x2\x2\x2\x480\x481\x5\x12E\x98\x2\x481\x9B"+
		"\x3\x2\x2\x2\x482\x484\x5\x9EP\x2\x483\x485\x5\x19A\xCE\x2\x484\x483\x3"+
		"\x2\x2\x2\x484\x485\x3\x2\x2\x2\x485\x486\x3\x2\x2\x2\x486\x488\a\xD7"+
		"\x2\x2\x487\x489\x5\x19A\xCE\x2\x488\x487\x3\x2\x2\x2\x488\x489\x3\x2"+
		"\x2\x2\x489\x48A\x3\x2\x2\x2\x48A\x48B\x5\xA0Q\x2\x48B\x9D\x3\x2\x2\x2"+
		"\x48C\x48D\x6P\x2\x2\x48D\x48E\x5\x12E\x98\x2\x48E\x9F\x3\x2\x2\x2\x48F"+
		"\x490\x6Q\x3\x2\x490\x491\x5\x12E\x98\x2\x491\xA1\x3\x2\x2\x2\x492\x494"+
		"\x5\xA4S\x2\x493\x495\x5\x19A\xCE\x2\x494\x493\x3\x2\x2\x2\x494\x495\x3"+
		"\x2\x2\x2\x495\x496\x3\x2\x2\x2\x496\x498\a\xD7\x2\x2\x497\x499\x5\x19A"+
		"\xCE\x2\x498\x497\x3\x2\x2\x2\x498\x499\x3\x2\x2\x2\x499\x49A\x3\x2\x2"+
		"\x2\x49A\x49B\x5\xA6T\x2\x49B\xA3\x3\x2\x2\x2\x49C\x49D\x5\x12E\x98\x2"+
		"\x49D\xA5\x3\x2\x2\x2\x49E\x49F\x5\x12E\x98\x2\x49F\xA7\x3\x2\x2\x2\x4A0"+
		"\x4A1\aV\x2\x2\x4A1\x4A2\x5\x184\xC3\x2\x4A2\x4A3\x5\x1E\x10\x2\x4A3\x4A4"+
		"\a\x80\x2\x2\x4A4\x4B8\x3\x2\x2\x2\x4A5\x4A6\aV\x2\x2\x4A6\x4A7\x5\x19A"+
		"\xCE\x2\x4A7\x4A8\t\n\x2\x2\x4A8\x4A9\x5\x19A\xCE\x2\x4A9\x4AA\x5\x156"+
		"\xAC\x2\x4AA\x4AB\x5\x184\xC3\x2\x4AB\x4AC\x5\x1E\x10\x2\x4AC\x4AD\a\x80"+
		"\x2\x2\x4AD\x4B8\x3\x2\x2\x2\x4AE\x4AF\aV\x2\x2\x4AF\x4B0\x5\x184\xC3"+
		"\x2\x4B0\x4B1\x5\x1E\x10\x2\x4B1\x4B2\a\x80\x2\x2\x4B2\x4B3\x5\x19A\xCE"+
		"\x2\x4B3\x4B4\t\n\x2\x2\x4B4\x4B5\x5\x19A\xCE\x2\x4B5\x4B6\x5\x156\xAC"+
		"\x2\x4B6\x4B8\x3\x2\x2\x2\x4B7\x4A0\x3\x2\x2\x2\x4B7\x4A5\x3\x2\x2\x2"+
		"\x4B7\x4AE\x3\x2\x2\x2\x4B8\xA9\x3\x2\x2\x2\x4B9\x4BA\x5\x154\xAB\x2\x4BA"+
		"\x4BB\x5\x19A\xCE\x2\x4BB\x4BD\x3\x2\x2\x2\x4BC\x4B9\x3\x2\x2\x2\x4BC"+
		"\x4BD\x3\x2\x2\x2\x4BD\x4BE\x3\x2\x2\x2\x4BE\x4BF\a\x65\x2\x2\x4BF\x4C0"+
		"\x5\x19A\xCE\x2\x4C0\x4C1\x5\x130\x99\x2\x4C1\x4C5\x5\x184\xC3\x2\x4C2"+
		"\x4C4\x5\xACW\x2\x4C3\x4C2\x3\x2\x2\x2\x4C4\x4C7\x3\x2\x2\x2\x4C5\x4C3"+
		"\x3\x2\x2\x2\x4C5\x4C6\x3\x2\x2\x2\x4C6\x4C8\x3\x2\x2\x2\x4C7\x4C5\x3"+
		"\x2\x2\x2\x4C8\x4C9\a\\\x2\x2\x4C9\xAB\x3\x2\x2\x2\x4CA\x4D3\x5\x130\x99"+
		"\x2\x4CB\x4CD\x5\x19A\xCE\x2\x4CC\x4CB\x3\x2\x2\x2\x4CC\x4CD\x3\x2\x2"+
		"\x2\x4CD\x4CE\x3\x2\x2\x2\x4CE\x4D0\a\xD1\x2\x2\x4CF\x4D1\x5\x19A\xCE"+
		"\x2\x4D0\x4CF\x3\x2\x2\x2\x4D0\x4D1\x3\x2\x2\x2\x4D1\x4D2\x3\x2\x2\x2"+
		"\x4D2\x4D4\x5\x156\xAC\x2\x4D3\x4CC\x3\x2\x2\x2\x4D3\x4D4\x3\x2\x2\x2"+
		"\x4D4\x4D5\x3\x2\x2\x2\x4D5\x4D6\x5\x184\xC3\x2\x4D6\xAD\x3\x2\x2\x2\x4D7"+
		"\x4D8\a\x64\x2\x2\x4D8\xAF\x3\x2\x2\x2\x4D9\x4DA\ag\x2\x2\x4DA\x4DB\x5"+
		"\x19A\xCE\x2\x4DB\x4E6\x5\x156\xAC\x2\x4DC\x4DE\x5\x19A\xCE\x2\x4DD\x4DC"+
		"\x3\x2\x2\x2\x4DD\x4DE\x3\x2\x2\x2\x4DE\x4DF\x3\x2\x2\x2\x4DF\x4E1\a)"+
		"\x2\x2\x4E0\x4E2\x5\x19A\xCE\x2\x4E1\x4E0\x3\x2\x2\x2\x4E1\x4E2\x3\x2"+
		"\x2\x2\x4E2\x4E3\x3\x2\x2\x2\x4E3\x4E5\x5\x156\xAC\x2\x4E4\x4DD\x3\x2"+
		"\x2\x2\x4E5\x4E8\x3\x2\x2\x2\x4E6\x4E4\x3\x2\x2\x2\x4E6\x4E7\x3\x2\x2"+
		"\x2\x4E7\xB1\x3\x2\x2\x2\x4E8\x4E6\x3\x2\x2\x2\x4E9\x4EA\ah\x2\x2\x4EA"+
		"\x4EB\x5\x19A\xCE\x2\x4EB\x4EC\x5\x156\xAC\x2\x4EC\xB3\x3\x2\x2\x2\x4ED"+
		"\x4EE\x5\x154\xAB\x2\x4EE\x4EF\x5\x19A\xCE\x2\x4EF\x4F1\x3\x2\x2\x2\x4F0"+
		"\x4ED\x3\x2\x2\x2\x4F0\x4F1\x3\x2\x2\x2\x4F1\x4F2\x3\x2\x2\x2\x4F2\x4F3"+
		"\ai\x2\x2\x4F3\x4F4\x5\x19A\xCE\x2\x4F4\x4F6\x5\x130\x99\x2\x4F5\x4F7"+
		"\x5\x19A\xCE\x2\x4F6\x4F5\x3\x2\x2\x2\x4F6\x4F7\x3\x2\x2\x2\x4F7\x4F8"+
		"\x3\x2\x2\x2\x4F8\x4F9\x5\x8EH\x2\x4F9\xB5\x3\x2\x2\x2\x4FA\x4FB\t\v\x2"+
		"\x2\x4FB\xB7\x3\x2\x2\x2\x4FC\x4FD\aq\x2\x2\x4FD\x4FE\x5\x19A\xCE\x2\x4FE"+
		"\x4FF\aX\x2\x2\x4FF\x500\x5\x19A\xCE\x2\x500\x501\x5\x156\xAC\x2\x501"+
		"\x502\x5\x19A\xCE\x2\x502\x503\az\x2\x2\x503\x504\x5\x19A\xCE\x2\x504"+
		"\x505\x5\x156\xAC\x2\x505\x506\x5\x184\xC3\x2\x506\x507\x5\x1E\x10\x2"+
		"\x507\x50B\a\x8C\x2\x2\x508\x509\x5\x19A\xCE\x2\x509\x50A\x5\x156\xAC"+
		"\x2\x50A\x50C\x3\x2\x2\x2\x50B\x508\x3\x2\x2\x2\x50B\x50C\x3\x2\x2\x2"+
		"\x50C\xB9\x3\x2\x2\x2\x50D\x50E\aq\x2\x2\x50E\x50F\x5\x19A\xCE\x2\x50F"+
		"\x510\x5\x156\xAC\x2\x510\x511\x5\x19A\xCE\x2\x511\x512\a\xBF\x2\x2\x512"+
		"\x513\x5\x19A\xCE\x2\x513\x519\x5\x156\xAC\x2\x514\x515\x5\x19A\xCE\x2"+
		"\x515\x516\a\xB8\x2\x2\x516\x517\x5\x19A\xCE\x2\x517\x518\x5\x156\xAC"+
		"\x2\x518\x51A\x3\x2\x2\x2\x519\x514\x3\x2\x2\x2\x519\x51A\x3\x2\x2\x2"+
		"\x51A\x51B\x3\x2\x2\x2\x51B\x51C\x5\x184\xC3\x2\x51C\x51D\x5\x1E\x10\x2"+
		"\x51D\x521\a\x8C\x2\x2\x51E\x51F\x5\x19A\xCE\x2\x51F\x520\x5\x156\xAC"+
		"\x2\x520\x522\x3\x2\x2\x2\x521\x51E\x3\x2\x2\x2\x521\x522\x3\x2\x2\x2"+
		"\x522\xBB\x3\x2\x2\x2\x523\x524\x5\x154\xAB\x2\x524\x525\x5\x19A\xCE\x2"+
		"\x525\x527\x3\x2\x2\x2\x526\x523\x3\x2\x2\x2\x526\x527\x3\x2\x2\x2\x527"+
		"\x52A\x3\x2\x2\x2\x528\x529\a\xB7\x2\x2\x529\x52B\x5\x19A\xCE\x2\x52A"+
		"\x528\x3\x2\x2\x2\x52A\x52B\x3\x2\x2\x2\x52B\x52C\x3\x2\x2\x2\x52C\x52E"+
		"\ar\x2\x2\x52D\x52F\x5\x19A\xCE\x2\x52E\x52D\x3\x2\x2\x2\x52E\x52F\x3"+
		"\x2\x2\x2\x52F\x530\x3\x2\x2\x2\x530\x535\x5\xBE`\x2\x531\x533\x5\x19A"+
		"\xCE\x2\x532\x531\x3\x2\x2\x2\x532\x533\x3\x2\x2\x2\x533\x534\x3\x2\x2"+
		"\x2\x534\x536\x5\x8EH\x2\x535\x532\x3\x2\x2\x2\x535\x536\x3\x2\x2\x2\x536"+
		"\x53B\x3\x2\x2\x2\x537\x539\x5\x19A\xCE\x2\x538\x537\x3\x2\x2\x2\x538"+
		"\x539\x3\x2\x2\x2\x539\x53A\x3\x2\x2\x2\x53A\x53C\x5\x13C\x9F\x2\x53B"+
		"\x538\x3\x2\x2\x2\x53B\x53C\x3\x2\x2\x2\x53C\x53D\x3\x2\x2\x2\x53D\x53E"+
		"\x5\x184\xC3\x2\x53E\x53F\x5\x1E\x10\x2\x53F\x540\a]\x2\x2\x540\xBD\x3"+
		"\x2\x2\x2\x541\x542\x5\x130\x99\x2\x542\xBF\x3\x2\x2\x2\x543\x544\au\x2"+
		"\x2\x544\x545\x5\x19A\xCE\x2\x545\x546\x5\x156\xAC\x2\x546\xC1\x3\x2\x2"+
		"\x2\x547\x548\av\x2\x2\x548\x549\x5\x19A\xCE\x2\x549\x54A\x5\x156\xAC"+
		"\x2\x54A\xC3\x3\x2\x2\x2\x54B\x54C\aw\x2\x2\x54C\x54D\x5\x19A\xCE\x2\x54D"+
		"\x54E\x5\xD6l\x2\x54E\x54F\x5\x19A\xCE\x2\x54F\x550\a\xBE\x2\x2\x550\x551"+
		"\x5\x184\xC3\x2\x551\x555\x5\x1E\x10\x2\x552\x554\x5\xC6\x64\x2\x553\x552"+
		"\x3\x2\x2\x2\x554\x557\x3\x2\x2\x2\x555\x553\x3\x2\x2\x2\x555\x556\x3"+
		"\x2\x2\x2\x556\x559\x3\x2\x2\x2\x557\x555\x3\x2\x2\x2\x558\x55A\x5\xC8"+
		"\x65\x2\x559\x558\x3\x2\x2\x2\x559\x55A\x3\x2\x2\x2\x55A\x55B\x3\x2\x2"+
		"\x2\x55B\x55C\a^\x2\x2\x55C\xC5\x3\x2\x2\x2\x55D\x55E\aZ\x2\x2\x55E\x55F"+
		"\x5\x19A\xCE\x2\x55F\x560\x5\xD6l\x2\x560\x561\x5\x19A\xCE\x2\x561\x562"+
		"\a\xBE\x2\x2\x562\x563\x5\x184\xC3\x2\x563\x564\x5\x1E\x10\x2\x564\x570"+
		"\x3\x2\x2\x2\x565\x566\aZ\x2\x2\x566\x567\x5\x19A\xCE\x2\x567\x568\x5"+
		"\xD6l\x2\x568\x569\x5\x19A\xCE\x2\x569\x56B\a\xBE\x2\x2\x56A\x56C\x5\x19A"+
		"\xCE\x2\x56B\x56A\x3\x2\x2\x2\x56B\x56C\x3\x2\x2\x2\x56C\x56D\x3\x2\x2"+
		"\x2\x56D\x56E\x5\x1E\x10\x2\x56E\x570\x3\x2\x2\x2\x56F\x55D\x3\x2\x2\x2"+
		"\x56F\x565\x3\x2\x2\x2\x570\xC7\x3\x2\x2\x2\x571\x572\aY\x2\x2\x572\x573"+
		"\x5\x184\xC3\x2\x573\x574\x5\x1E\x10\x2\x574\xC9\x3\x2\x2\x2\x575\x578"+
		"\x5\xCCg\x2\x576\x578\x5\xCEh\x2\x577\x575\x3\x2\x2\x2\x577\x576\x3\x2"+
		"\x2\x2\x578\xCB\x3\x2\x2\x2\x579\x57B\aw\x2\x2\x57A\x57C\x5\x19A\xCE\x2"+
		"\x57B\x57A\x3\x2\x2\x2\x57B\x57C\x3\x2\x2\x2\x57C\x57D\x3\x2\x2\x2\x57D"+
		"\x57F\x5\xD6l\x2\x57E\x580\x5\x19A\xCE\x2\x57F\x57E\x3\x2\x2\x2\x57F\x580"+
		"\x3\x2\x2\x2\x580\x581\x3\x2\x2\x2\x581\x583\a\xBE\x2\x2\x582\x584\x5"+
		"\x19A\xCE\x2\x583\x582\x3\x2\x2\x2\x583\x584\x3\x2\x2\x2\x584\x585\x3"+
		"\x2\x2\x2\x585\x589\x5\xD2j\x2\x586\x587\x5\x19A\xCE\x2\x587\x588\x5\xD0"+
		"i\x2\x588\x58A\x3\x2\x2\x2\x589\x586\x3\x2\x2\x2\x589\x58A\x3\x2\x2\x2"+
		"\x58A\xCD\x3\x2\x2\x2\x58B\x58D\aw\x2\x2\x58C\x58E\x5\x19A\xCE\x2\x58D"+
		"\x58C\x3\x2\x2\x2\x58D\x58E\x3\x2\x2\x2\x58E\x58F\x3\x2\x2\x2\x58F\x591"+
		"\x5\xD6l\x2\x590\x592\x5\x19A\xCE\x2\x591\x590\x3\x2\x2\x2\x591\x592\x3"+
		"\x2\x2\x2\x592\x593\x3\x2\x2\x2\x593\x594\a\xBE\x2\x2\x594\x596\x5\x184"+
		"\xC3\x2\x595\x597\x5\x19A\xCE\x2\x596\x595\x3\x2\x2\x2\x596\x597\x3\x2"+
		"\x2\x2\x597\x598\x3\x2\x2\x2\x598\x599\x5\xD0i\x2\x599\xCF\x3\x2\x2\x2"+
		"\x59A\x59C\aY\x2\x2\x59B\x59D\x5\x19A\xCE\x2\x59C\x59B\x3\x2\x2\x2\x59C"+
		"\x59D\x3\x2\x2\x2\x59D\x59F\x3\x2\x2\x2\x59E\x5A0\x5\xD2j\x2\x59F\x59E"+
		"\x3\x2\x2\x2\x59F\x5A0\x3\x2\x2\x2\x5A0\xD1\x3\x2\x2\x2\x5A1\x5AE\x5\x14C"+
		"\xA7\x2\x5A2\x5A4\x5\x19A\xCE\x2\x5A3\x5A2\x3\x2\x2\x2\x5A3\x5A4\x3\x2"+
		"\x2\x2\x5A4\x5A5\x3\x2\x2\x2\x5A5\x5A7\a*\x2\x2\x5A6\x5A8\x5\x19A\xCE"+
		"\x2\x5A7\x5A6\x3\x2\x2\x2\x5A7\x5A8\x3\x2\x2\x2\x5A8\x5AA\x3\x2\x2\x2"+
		"\x5A9\x5AB\x5\xD4k\x2\x5AA\x5A9\x3\x2\x2\x2\x5AA\x5AB\x3\x2\x2\x2\x5AB"+
		"\x5AD\x3\x2\x2\x2\x5AC\x5A3\x3\x2\x2\x2\x5AD\x5B0\x3\x2\x2\x2\x5AE\x5AC"+
		"\x3\x2\x2\x2\x5AE\x5AF\x3\x2\x2\x2\x5AF\x5C8\x3\x2\x2\x2\x5B0\x5AE\x3"+
		"\x2\x2\x2\x5B1\x5B3\a*\x2\x2\x5B2\x5B4\x5\x19A\xCE\x2\x5B3\x5B2\x3\x2"+
		"\x2\x2\x5B3\x5B4\x3\x2\x2\x2\x5B4\x5B6\x3\x2\x2\x2\x5B5\x5B1\x3\x2\x2"+
		"\x2\x5B5\x5B6\x3\x2\x2\x2\x5B6\x5B7\x3\x2\x2\x2\x5B7\x5C4\x5\xD4k\x2\x5B8"+
		"\x5BA\x5\x19A\xCE\x2\x5B9\x5B8\x3\x2\x2\x2\x5B9\x5BA\x3\x2\x2\x2\x5BA"+
		"\x5BB\x3\x2\x2\x2\x5BB\x5BD\a*\x2\x2\x5BC\x5BE\x5\x19A\xCE\x2\x5BD\x5BC"+
		"\x3\x2\x2\x2\x5BD\x5BE\x3\x2\x2\x2\x5BE\x5C0\x3\x2\x2\x2\x5BF\x5C1\x5"+
		"\xD4k\x2\x5C0\x5BF\x3\x2\x2\x2\x5C0\x5C1\x3\x2\x2\x2\x5C1\x5C3\x3\x2\x2"+
		"\x2\x5C2\x5B9\x3\x2\x2\x2\x5C3\x5C6\x3\x2\x2\x2\x5C4\x5C2\x3\x2\x2\x2"+
		"\x5C4\x5C5\x3\x2\x2\x2\x5C5\x5C8\x3\x2\x2\x2\x5C6\x5C4\x3\x2\x2\x2\x5C7"+
		"\x5A1\x3\x2\x2\x2\x5C7\x5B5\x3\x2\x2\x2\x5C8\xD3\x3\x2\x2\x2\x5C9\x5CA"+
		"\x5 \x11\x2\x5CA\xD5\x3\x2\x2\x2\x5CB\x5CC\x5\x156\xAC\x2\x5CC\xD7\x3"+
		"\x2\x2\x2\x5CD\x5CE\ay\x2\x2\x5CE\x5CF\x5\x19A\xCE\x2\x5CF\x5D0\x5\x156"+
		"\xAC\x2\x5D0\xD9\x3\x2\x2\x2\x5D1\x5D2\a\x81\x2\x2\x5D2\x5D4\x5\x19A\xCE"+
		"\x2\x5D3\x5D1\x3\x2\x2\x2\x5D3\x5D4\x3\x2\x2\x2\x5D4\x5D5\x3\x2\x2\x2"+
		"\x5D5\x5D7\x5\x162\xB2\x2\x5D6\x5D8\x5\x19A\xCE\x2\x5D7\x5D6\x3\x2\x2"+
		"\x2\x5D7\x5D8\x3\x2\x2\x2\x5D8\x5D9\x3\x2\x2\x2\x5D9\x5DB\a\xD1\x2\x2"+
		"\x5DA\x5DC\x5\x19A\xCE\x2\x5DB\x5DA\x3\x2\x2\x2\x5DB\x5DC\x3\x2\x2\x2"+
		"\x5DC\x5DD\x3\x2\x2\x2\x5DD\x5DE\x5\x156\xAC\x2\x5DE\xDB\x3\x2\x2\x2\x5DF"+
		"\x5E0\a\x88\x2\x2\x5E0\x5E1\x5\x19A\xCE\x2\x5E1\x5E3\x5\x156\xAC\x2\x5E2"+
		"\x5E4\x5\x19A\xCE\x2\x5E3\x5E2\x3\x2\x2\x2\x5E3\x5E4\x3\x2\x2\x2\x5E4"+
		"\x5E5\x3\x2\x2\x2\x5E5\x5E7\a\xD1\x2\x2\x5E6\x5E8\x5\x19A\xCE\x2\x5E7"+
		"\x5E6\x3\x2\x2\x2\x5E7\x5E8\x3\x2\x2\x2\x5E8\x5E9\x3\x2\x2\x2\x5E9\x5EA"+
		"\x5\x156\xAC\x2\x5EA\xDD\x3\x2\x2\x2\x5EB\x5EC\t\f\x2\x2\x5EC\x5F5\x5"+
		"\x19A\xCE\x2\x5ED\x5EE\av\x2\x2\x5EE\x5EF\x5\x19A\xCE\x2\x5EF\x5F0\x5"+
		"\x156\xAC\x2\x5F0\x5F6\x3\x2\x2\x2\x5F1\x5F2\a\xAE\x2\x2\x5F2\x5F3\x5"+
		"\x19A\xCE\x2\x5F3\x5F4\a\x8C\x2\x2\x5F4\x5F6\x3\x2\x2\x2\x5F5\x5ED\x3"+
		"\x2\x2\x2\x5F5\x5F1\x3\x2\x2\x2\x5F6\xDF\x3\x2\x2\x2\x5F7\x5F8\a\x92\x2"+
		"\x2\x5F8\x5F9\x5\x19A\xCE\x2\x5F9\x5FA\x5\x156\xAC\x2\x5FA\x5FB\x5\x19A"+
		"\xCE\x2\x5FB\x5FC\av\x2\x2\x5FC\x5FD\x5\x19A\xCE\x2\x5FD\x608\x5\x156"+
		"\xAC\x2\x5FE\x600\x5\x19A\xCE\x2\x5FF\x5FE\x3\x2\x2\x2\x5FF\x600\x3\x2"+
		"\x2\x2\x600\x601\x3\x2\x2\x2\x601\x603\a)\x2\x2\x602\x604\x5\x19A\xCE"+
		"\x2\x603\x602\x3\x2\x2\x2\x603\x604\x3\x2\x2\x2\x604\x605\x3\x2\x2\x2"+
		"\x605\x607\x5\x156\xAC\x2\x606\x5FF\x3\x2\x2\x2\x607\x60A\x3\x2\x2\x2"+
		"\x608\x606\x3\x2\x2\x2\x608\x609\x3\x2\x2\x2\x609\xE1\x3\x2\x2\x2\x60A"+
		"\x608\x3\x2\x2\x2\x60B\x60C\a\x92\x2\x2\x60C\x60D\x5\x19A\xCE\x2\x60D"+
		"\x60E\x5\x156\xAC\x2\x60E\x60F\x5\x19A\xCE\x2\x60F\x610\au\x2\x2\x610"+
		"\x611\x5\x19A\xCE\x2\x611\x61C\x5\x156\xAC\x2\x612\x614\x5\x19A\xCE\x2"+
		"\x613\x612\x3\x2\x2\x2\x613\x614\x3\x2\x2\x2\x614\x615\x3\x2\x2\x2\x615"+
		"\x617\a)\x2\x2\x616\x618\x5\x19A\xCE\x2\x617\x616\x3\x2\x2\x2\x617\x618"+
		"\x3\x2\x2\x2\x618\x619\x3\x2\x2\x2\x619\x61B\x5\x156\xAC\x2\x61A\x613"+
		"\x3\x2\x2\x2\x61B\x61E\x3\x2\x2\x2\x61C\x61A\x3\x2\x2\x2\x61C\x61D\x3"+
		"\x2\x2\x2\x61D\xE3\x3\x2\x2\x2\x61E\x61C\x3\x2\x2\x2\x61F\x620\x5\x154"+
		"\xAB\x2\x620\x621\x5\x19A\xCE\x2\x621\x623\x3\x2\x2\x2\x622\x61F\x3\x2"+
		"\x2\x2\x622\x623\x3\x2\x2\x2\x623\x626\x3\x2\x2\x2\x624\x625\a\xB7\x2"+
		"\x2\x625\x627\x5\x19A\xCE\x2\x626\x624\x3\x2\x2\x2\x626\x627\x3\x2\x2"+
		"\x2\x627\x628\x3\x2\x2\x2\x628\x629\a\xA1\x2\x2\x629\x62A\x5\x19A\xCE"+
		"\x2\x62A\x62F\x5\xBE`\x2\x62B\x62D\x5\x19A\xCE\x2\x62C\x62B\x3\x2\x2\x2"+
		"\x62C\x62D\x3\x2\x2\x2\x62D\x62E\x3\x2\x2\x2\x62E\x630\x5\x8EH\x2\x62F"+
		"\x62C\x3\x2\x2\x2\x62F\x630\x3\x2\x2\x2\x630\x634\x3\x2\x2\x2\x631\x632"+
		"\x5\x19A\xCE\x2\x632\x633\x5\x13C\x9F\x2\x633\x635\x3\x2\x2\x2\x634\x631"+
		"\x3\x2\x2\x2\x634\x635\x3\x2\x2\x2\x635\x636\x3\x2\x2\x2\x636\x637\x5"+
		"\x184\xC3\x2\x637\x638\x5\x1E\x10\x2\x638\x639\a_\x2\x2\x639\xE5\x3\x2"+
		"\x2\x2\x63A\x63B\x5\x154\xAB\x2\x63B\x63C\x5\x19A\xCE\x2\x63C\x63E\x3"+
		"\x2\x2\x2\x63D\x63A\x3\x2\x2\x2\x63D\x63E\x3\x2\x2\x2\x63E\x641\x3\x2"+
		"\x2\x2\x63F\x640\a\xB7\x2\x2\x640\x642\x5\x19A\xCE\x2\x641\x63F\x3\x2"+
		"\x2\x2\x641\x642\x3\x2\x2\x2\x642\x643\x3\x2\x2\x2\x643\x644\a\xA3\x2"+
		"\x2\x644\x645\x5\x19A\xCE\x2\x645\x64A\x5\x114\x8B\x2\x646\x648\x5\x19A"+
		"\xCE\x2\x647\x646\x3\x2\x2\x2\x647\x648\x3\x2\x2\x2\x648\x649\x3\x2\x2"+
		"\x2\x649\x64B\x5\x8EH\x2\x64A\x647\x3\x2\x2\x2\x64A\x64B\x3\x2\x2\x2\x64B"+
		"\x64C\x3\x2\x2\x2\x64C\x64D\x5\x184\xC3\x2\x64D\x64E\x5\x1E\x10\x2\x64E"+
		"\x64F\a_\x2\x2\x64F\xE7\x3\x2\x2\x2\x650\x651\x5\x154\xAB\x2\x651\x652"+
		"\x5\x19A\xCE\x2\x652\x654\x3\x2\x2\x2\x653\x650\x3\x2\x2\x2\x653\x654"+
		"\x3\x2\x2\x2\x654\x657\x3\x2\x2\x2\x655\x656\a\xB7\x2\x2\x656\x658\x5"+
		"\x19A\xCE\x2\x657\x655\x3\x2\x2\x2\x657\x658\x3\x2\x2\x2\x658\x659\x3"+
		"\x2\x2\x2\x659\x65A\a\xA2\x2\x2\x65A\x65B\x5\x19A\xCE\x2\x65B\x660\x5"+
		"\x114\x8B\x2\x65C\x65E\x5\x19A\xCE\x2\x65D\x65C\x3\x2\x2\x2\x65D\x65E"+
		"\x3\x2\x2\x2\x65E\x65F\x3\x2\x2\x2\x65F\x661\x5\x8EH\x2\x660\x65D\x3\x2"+
		"\x2\x2\x660\x661\x3\x2\x2\x2\x661\x662\x3\x2\x2\x2\x662\x663\x5\x184\xC3"+
		"\x2\x663\x664\x5\x1E\x10\x2\x664\x665\a_\x2\x2\x665\xE9\x3\x2\x2\x2\x666"+
		"\x667\a\xA8\x2\x2\x667\x668\x5\x19A\xCE\x2\x668\x677\x5\x130\x99\x2\x669"+
		"\x66B\x5\x19A\xCE\x2\x66A\x669\x3\x2\x2\x2\x66A\x66B\x3\x2\x2\x2\x66B"+
		"\x66C\x3\x2\x2\x2\x66C\x66E\a\xD5\x2\x2\x66D\x66F\x5\x19A\xCE\x2\x66E"+
		"\x66D\x3\x2\x2\x2\x66E\x66F\x3\x2\x2\x2\x66F\x671\x3\x2\x2\x2\x670\x672"+
		"\x5\xECw\x2\x671\x670\x3\x2\x2\x2\x671\x672\x3\x2\x2\x2\x672\x674\x3\x2"+
		"\x2\x2\x673\x675\x5\x19A\xCE\x2\x674\x673\x3\x2\x2\x2\x674\x675\x3\x2"+
		"\x2\x2\x675\x676\x3\x2\x2\x2\x676\x678\a\xDC\x2\x2\x677\x66A\x3\x2\x2"+
		"\x2\x677\x678\x3\x2\x2\x2\x678\xEB\x3\x2\x2\x2\x679\x684\x5\xEEx\x2\x67A"+
		"\x67C\x5\x19A\xCE\x2\x67B\x67A\x3\x2\x2\x2\x67B\x67C\x3\x2\x2\x2\x67C"+
		"\x67D\x3\x2\x2\x2\x67D\x67F\a)\x2\x2\x67E\x680\x5\x19A\xCE\x2\x67F\x67E"+
		"\x3\x2\x2\x2\x67F\x680\x3\x2\x2\x2\x680\x681\x3\x2\x2\x2\x681\x683\x5"+
		"\xEEx\x2\x682\x67B\x3\x2\x2\x2\x683\x686\x3\x2\x2\x2\x684\x682\x3\x2\x2"+
		"\x2\x684\x685\x3\x2\x2\x2\x685\xED\x3\x2\x2\x2\x686\x684\x3\x2\x2\x2\x687"+
		"\x688\x5\x156\xAC\x2\x688\xEF\x3\x2\x2\x2\x689\x68A\a\xAB\x2\x2\x68A\x68D"+
		"\x5\x19A\xCE\x2\x68B\x68C\a\x9E\x2\x2\x68C\x68E\x5\x19A\xCE\x2\x68D\x68B"+
		"\x3\x2\x2\x2\x68D\x68E\x3\x2\x2\x2\x68E\x68F\x3\x2\x2\x2\x68F\x690\x5"+
		"\xF2z\x2\x690\xF1\x3\x2\x2\x2\x691\x69C\x5\xF4{\x2\x692\x694\x5\x19A\xCE"+
		"\x2\x693\x692\x3\x2\x2\x2\x693\x694\x3\x2\x2\x2\x694\x695\x3\x2\x2\x2"+
		"\x695\x697\a)\x2\x2\x696\x698\x5\x19A\xCE\x2\x697\x696\x3\x2\x2\x2\x697"+
		"\x698\x3\x2\x2\x2\x698\x699\x3\x2\x2\x2\x699\x69B\x5\xF4{\x2\x69A\x693"+
		"\x3\x2\x2\x2\x69B\x69E\x3\x2\x2\x2\x69C\x69A\x3\x2\x2\x2\x69C\x69D\x3"+
		"\x2\x2\x2\x69D\xF3\x3\x2\x2\x2\x69E\x69C\x3\x2\x2\x2\x69F\x6A3\x5\x156"+
		"\xAC\x2\x6A0\x6A1\x5\x19A\xCE\x2\x6A1\x6A2\x5\x13C\x9F\x2\x6A2\x6A4\x3"+
		"\x2\x2\x2\x6A3\x6A0\x3\x2\x2\x2\x6A3\x6A4\x3\x2\x2\x2\x6A4\xF5\x3\x2\x2"+
		"\x2\x6A5\x6A6\x5\x156\xAC\x2\x6A6\xF7\x3\x2\x2\x2\x6A7\x6A8\a@\x2\x2\x6A8"+
		"\x6A9\x5\x19A\xCE\x2\x6A9\x6AA\x5\x156\xAC\x2\x6AA\x6B2\x3\x2\x2\x2\x6AB"+
		"\x6AF\x5\x156\xAC\x2\x6AC\x6AD\x5\x19A\xCE\x2\x6AD\x6AE\x5\x166\xB4\x2"+
		"\x6AE\x6B0\x3\x2\x2\x2\x6AF\x6AC\x3\x2\x2\x2\x6AF\x6B0\x3\x2\x2\x2\x6B0"+
		"\x6B2\x3\x2\x2\x2\x6B1\x6A7\x3\x2\x2\x2\x6B1\x6AB\x3\x2\x2\x2\x6B2\xF9"+
		"\x3\x2\x2\x2\x6B3\x6B9\a\xAE\x2\x2\x6B4\x6B7\x5\x19A\xCE\x2\x6B5\x6B8"+
		"\a\x8C\x2\x2\x6B6\x6B8\x5\x156\xAC\x2\x6B7\x6B5\x3\x2\x2\x2\x6B7\x6B6"+
		"\x3\x2\x2\x2\x6B8\x6BA\x3\x2\x2\x2\x6B9\x6B4\x3\x2\x2\x2\x6B9\x6BA\x3"+
		"\x2\x2\x2\x6BA\xFB\x3\x2\x2\x2\x6BB\x6BC\a\xAF\x2\x2\x6BC\xFD\x3\x2\x2"+
		"\x2\x6BD\x6BE\a\xB0\x2\x2\x6BE\x6BF\x5\x19A\xCE\x2\x6BF\x6C1\x5\x156\xAC"+
		"\x2\x6C0\x6C2\x5\x19A\xCE\x2\x6C1\x6C0\x3\x2\x2\x2\x6C1\x6C2\x3\x2\x2"+
		"\x2\x6C2\x6C3\x3\x2\x2\x2\x6C3\x6C5\a\xD1\x2\x2\x6C4\x6C6\x5\x19A\xCE"+
		"\x2\x6C5\x6C4\x3\x2\x2\x2\x6C5\x6C6\x3\x2\x2\x2\x6C6\x6C7\x3\x2\x2\x2"+
		"\x6C7\x6C8\x5\x156\xAC\x2\x6C8\xFF\x3\x2\x2\x2\x6C9\x6CA\a\xB9\x2\x2\x6CA"+
		"\x101\x3\x2\x2\x2\x6CB\x6CD\a\xB2\x2\x2\x6CC\x6CE\x5\x19A\xCE\x2\x6CD"+
		"\x6CC\x3\x2\x2\x2\x6CD\x6CE\x3\x2\x2\x2\x6CE\x6CF\x3\x2\x2\x2\x6CF\x6D1"+
		"\a\x41\x2\x2\x6D0\x6D2\x5\x19A\xCE\x2\x6D1\x6D0\x3\x2\x2\x2\x6D1\x6D2"+
		"\x3\x2\x2\x2\x6D2\x6D3\x3\x2\x2\x2\x6D3\x6D4\x5\x104\x83\x2\x6D4\x6D8"+
		"\x5\x184\xC3\x2\x6D5\x6D7\x5\x106\x84\x2\x6D6\x6D5\x3\x2\x2\x2\x6D7\x6DA"+
		"\x3\x2\x2\x2\x6D8\x6D6\x3\x2\x2\x2\x6D8\x6D9\x3\x2\x2\x2\x6D9\x6DC\x3"+
		"\x2\x2\x2\x6DA\x6D8\x3\x2\x2\x2\x6DB\x6DD\x5\x108\x85\x2\x6DC\x6DB\x3"+
		"\x2\x2\x2\x6DC\x6DD\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6DF\a`\x2"+
		"\x2\x6DF\x103\x3\x2\x2\x2\x6E0\x6E1\x5\x156\xAC\x2\x6E1\x105\x3\x2\x2"+
		"\x2\x6E2\x6E3\a\x41\x2\x2\x6E3\x6E4\x5\x19A\xCE\x2\x6E4\x6EF\x5\x10A\x86"+
		"\x2\x6E5\x6E7\x5\x19A\xCE\x2\x6E6\x6E5\x3\x2\x2\x2\x6E6\x6E7\x3\x2\x2"+
		"\x2\x6E7\x6E8\x3\x2\x2\x2\x6E8\x6EA\a)\x2\x2\x6E9\x6EB\x5\x19A\xCE\x2"+
		"\x6EA\x6E9\x3\x2\x2\x2\x6EA\x6EB\x3\x2\x2\x2\x6EB\x6EC\x3\x2\x2\x2\x6EC"+
		"\x6EE\x5\x10A\x86\x2\x6ED\x6E6\x3\x2\x2\x2\x6EE\x6F1\x3\x2\x2\x2\x6EF"+
		"\x6ED\x3\x2\x2\x2\x6EF\x6F0\x3\x2\x2\x2\x6F0\x6F2\x3\x2\x2\x2\x6F1\x6EF"+
		"\x3\x2\x2\x2\x6F2\x6F3\x5\x184\xC3\x2\x6F3\x6F4\x5\x1E\x10\x2\x6F4\x107"+
		"\x3\x2\x2\x2\x6F5\x6F7\a\x41\x2\x2\x6F6\x6F8\x5\x19A\xCE\x2\x6F7\x6F6"+
		"\x3\x2\x2\x2\x6F7\x6F8\x3\x2\x2\x2\x6F8\x6F9\x3\x2\x2\x2\x6F9\x6FA\aY"+
		"\x2\x2\x6FA\x6FB\x5\x184\xC3\x2\x6FB\x6FC\x5\x1E\x10\x2\x6FC\x109\x3\x2"+
		"\x2\x2\x6FD\x711\x5\x156\xAC\x2\x6FE\x6FF\x5\x10C\x87\x2\x6FF\x700\x5"+
		"\x19A\xCE\x2\x700\x701\a\xBF\x2\x2\x701\x702\x5\x19A\xCE\x2\x702\x703"+
		"\x5\x10E\x88\x2\x703\x711\x3\x2\x2\x2\x704\x706\a|\x2\x2\x705\x707\x5"+
		"\x19A\xCE\x2\x706\x705\x3\x2\x2\x2\x706\x707\x3\x2\x2\x2\x707\x709\x3"+
		"\x2\x2\x2\x708\x704\x3\x2\x2\x2\x708\x709\x3\x2\x2\x2\x709\x70A\x3\x2"+
		"\x2\x2\x70A\x70C\x5\x140\xA1\x2\x70B\x70D\x5\x19A\xCE\x2\x70C\x70B\x3"+
		"\x2\x2\x2\x70C\x70D\x3\x2\x2\x2\x70D\x70E\x3\x2\x2\x2\x70E\x70F\x5\x156"+
		"\xAC\x2\x70F\x711\x3\x2\x2\x2\x710\x6FD\x3\x2\x2\x2\x710\x6FE\x3\x2\x2"+
		"\x2\x710\x708\x3\x2\x2\x2\x711\x10B\x3\x2\x2\x2\x712\x713\x5\x156\xAC"+
		"\x2\x713\x10D\x3\x2\x2\x2\x714\x715\x5\x156\xAC\x2\x715\x10F\x3\x2\x2"+
		"\x2\x716\x717\a\xB3\x2\x2\x717\x718\x5\x19A\xCE\x2\x718\x71A\x5\x162\xB2"+
		"\x2\x719\x71B\x5\x19A\xCE\x2\x71A\x719\x3\x2\x2\x2\x71A\x71B\x3\x2\x2"+
		"\x2\x71B\x71C\x3\x2\x2\x2\x71C\x71E\a\xD1\x2\x2\x71D\x71F\x5\x19A\xCE"+
		"\x2\x71E\x71D\x3\x2\x2\x2\x71E\x71F\x3\x2\x2\x2\x71F\x720\x3\x2\x2\x2"+
		"\x720\x721\x5\x156\xAC\x2\x721\x111\x3\x2\x2\x2\x722\x723\x5\x154\xAB"+
		"\x2\x723\x724\x5\x19A\xCE\x2\x724\x726\x3\x2\x2\x2\x725\x722\x3\x2\x2"+
		"\x2\x725\x726\x3\x2\x2\x2\x726\x729\x3\x2\x2\x2\x727\x728\a\xB7\x2\x2"+
		"\x728\x72A\x5\x19A\xCE\x2\x729\x727\x3\x2\x2\x2\x729\x72A\x3\x2\x2\x2"+
		"\x72A\x72B\x3\x2\x2\x2\x72B\x72D\a\xBB\x2\x2\x72C\x72E\x5\x19A\xCE\x2"+
		"\x72D\x72C\x3\x2\x2\x2\x72D\x72E\x3\x2\x2\x2\x72E\x72F\x3\x2\x2\x2\x72F"+
		"\x734\x5\x114\x8B\x2\x730\x732\x5\x19A\xCE\x2\x731\x730\x3\x2\x2\x2\x731"+
		"\x732\x3\x2\x2\x2\x732\x733\x3\x2\x2\x2\x733\x735\x5\x8EH\x2\x734\x731"+
		"\x3\x2\x2\x2\x734\x735\x3\x2\x2\x2\x735\x736\x3\x2\x2\x2\x736\x737\x5"+
		"\x184\xC3\x2\x737\x738\x5\x1E\x10\x2\x738\x739\a\x61\x2\x2\x739\x113\x3"+
		"\x2\x2\x2\x73A\x73B\x5\x130\x99\x2\x73B\x115\x3\x2\x2\x2\x73C\x73D\x5"+
		"\x154\xAB\x2\x73D\x73E\x5\x19A\xCE\x2\x73E\x740\x3\x2\x2\x2\x73F\x73C"+
		"\x3\x2\x2\x2\x73F\x740\x3\x2\x2\x2\x740\x741\x3\x2\x2\x2\x741\x742\a\xC1"+
		"\x2\x2\x742\x743\x5\x19A\xCE\x2\x743\x744\x5\x130\x99\x2\x744\x748\x5"+
		"\x184\xC3\x2\x745\x747\x5\x118\x8D\x2\x746\x745\x3\x2\x2\x2\x747\x74A"+
		"\x3\x2\x2\x2\x748\x746\x3\x2\x2\x2\x748\x749\x3\x2\x2\x2\x749\x74B\x3"+
		"\x2\x2\x2\x74A\x748\x3\x2\x2\x2\x74B\x74C\a\x62\x2\x2\x74C\x117\x3\x2"+
		"\x2\x2\x74D\x75C\x5\x130\x99\x2\x74E\x750\x5\x19A\xCE\x2\x74F\x74E\x3"+
		"\x2\x2\x2\x74F\x750\x3\x2\x2\x2\x750\x751\x3\x2\x2\x2\x751\x756\a\xD5"+
		"\x2\x2\x752\x754\x5\x19A\xCE\x2\x753\x752\x3\x2\x2\x2\x753\x754\x3\x2"+
		"\x2\x2\x754\x755\x3\x2\x2\x2\x755\x757\x5\x12A\x96\x2\x756\x753\x3\x2"+
		"\x2\x2\x756\x757\x3\x2\x2\x2\x757\x759\x3\x2\x2\x2\x758\x75A\x5\x19A\xCE"+
		"\x2\x759\x758\x3\x2\x2\x2\x759\x75A\x3\x2\x2\x2\x75A\x75B\x3\x2\x2\x2"+
		"\x75B\x75D\a\xDC\x2\x2\x75C\x74F\x3\x2\x2\x2\x75C\x75D\x3\x2\x2\x2\x75D"+
		"\x761\x3\x2\x2\x2\x75E\x75F\x5\x19A\xCE\x2\x75F\x760\x5\x13C\x9F\x2\x760"+
		"\x762\x3\x2\x2\x2\x761\x75E\x3\x2\x2\x2\x761\x762\x3\x2\x2\x2\x762\x763"+
		"\x3\x2\x2\x2\x763\x764\x5\x184\xC3\x2\x764\x119\x3\x2\x2\x2\x765\x769"+
		"\aU\x2\x2\x766\x769\a\xB7\x2\x2\x767\x769\x5\x154\xAB\x2\x768\x765\x3"+
		"\x2\x2\x2\x768\x766\x3\x2\x2\x2\x768\x767\x3\x2\x2\x2\x769\x76A\x3\x2"+
		"\x2\x2\x76A\x76D\x5\x19A\xCE\x2\x76B\x76C\a\xCB\x2\x2\x76C\x76E\x5\x19A"+
		"\xCE\x2\x76D\x76B\x3\x2\x2\x2\x76D\x76E\x3\x2\x2\x2\x76E\x76F\x3\x2\x2"+
		"\x2\x76F\x770\x5\x11C\x8F\x2\x770\x11B\x3\x2\x2\x2\x771\x77C\x5\x11E\x90"+
		"\x2\x772\x774\x5\x19A\xCE\x2\x773\x772\x3\x2\x2\x2\x773\x774\x3\x2\x2"+
		"\x2\x774\x775\x3\x2\x2\x2\x775\x777\a)\x2\x2\x776\x778\x5\x19A\xCE\x2"+
		"\x777\x776\x3\x2\x2\x2\x777\x778\x3\x2\x2\x2\x778\x779\x3\x2\x2\x2\x779"+
		"\x77B\x5\x11E\x90\x2\x77A\x773\x3\x2\x2\x2\x77B\x77E\x3\x2\x2\x2\x77C"+
		"\x77A\x3\x2\x2\x2\x77C\x77D\x3\x2\x2\x2\x77D\x11D\x3\x2\x2\x2\x77E\x77C"+
		"\x3\x2\x2\x2\x77F\x791\x5\x130\x99\x2\x780\x782\x5\x19A\xCE\x2\x781\x780"+
		"\x3\x2\x2\x2\x781\x782\x3\x2\x2\x2\x782\x783\x3\x2\x2\x2\x783\x785\a\xD5"+
		"\x2\x2\x784\x786\x5\x19A\xCE\x2\x785\x784\x3\x2\x2\x2\x785\x786\x3\x2"+
		"\x2\x2\x786\x78B\x3\x2\x2\x2\x787\x789\x5\x12A\x96\x2\x788\x78A\x5\x19A"+
		"\xCE\x2\x789\x788\x3\x2\x2\x2\x789\x78A\x3\x2\x2\x2\x78A\x78C\x3\x2\x2"+
		"\x2\x78B\x787\x3\x2\x2\x2\x78B\x78C\x3\x2\x2\x2\x78C\x78D\x3\x2\x2\x2"+
		"\x78D\x78F\a\xDC\x2\x2\x78E\x790\x5\x19A\xCE\x2\x78F\x78E\x3\x2\x2\x2"+
		"\x78F\x790\x3\x2\x2\x2\x790\x792\x3\x2\x2\x2\x791\x781\x3\x2\x2\x2\x791"+
		"\x792\x3\x2\x2\x2\x792\x796\x3\x2\x2\x2\x793\x794\x5\x19A\xCE\x2\x794"+
		"\x795\x5\x13C\x9F\x2\x795\x797\x3\x2\x2\x2\x796\x793\x3\x2\x2\x2\x796"+
		"\x797\x3\x2\x2\x2\x797\x11F\x3\x2\x2\x2\x798\x799\a\xC8\x2\x2\x799\x79A"+
		"\x5\x19A\xCE\x2\x79A\x79B\x5\x156\xAC\x2\x79B\x79C\x5\x184\xC3\x2\x79C"+
		"\x79D\x5\x1E\x10\x2\x79D\x79E\a\xC7\x2\x2\x79E\x121\x3\x2\x2\x2\x79F\x7A0"+
		"\a\xCA\x2\x2\x7A0\x7A1\x5\x19A\xCE\x2\x7A1\x7A2\x5\x156\xAC\x2\x7A2\x7A3"+
		"\x5\x184\xC3\x2\x7A3\x7A4\x5\x1E\x10\x2\x7A4\x7A5\a\x63\x2\x2\x7A5\x123"+
		"\x3\x2\x2\x2\x7A6\x7A8\x5\x156\xAC\x2\x7A7\x7A9\x5\x19A\xCE\x2\x7A8\x7A7"+
		"\x3\x2\x2\x2\x7A8\x7A9\x3\x2\x2\x2\x7A9\x7AA\x3\x2\x2\x2\x7AA\x7AC\a-"+
		"\x2\x2\x7AB\x7AD\x5\x19A\xCE\x2\x7AC\x7AB\x3\x2\x2\x2\x7AC\x7AD\x3\x2"+
		"\x2\x2\x7AD\x7AF\x3\x2\x2\x2\x7AE\x7A6\x3\x2\x2\x2\x7AE\x7AF\x3\x2\x2"+
		"\x2\x7AF\x7B0\x3\x2\x2\x2\x7B0\x7B1\a\r\x2\x2\x7B1\x7B6\x5\x19A\xCE\x2"+
		"\x7B2\x7B4\a\xB8\x2\x2\x7B3\x7B5\x5\x19A\xCE\x2\x7B4\x7B3\x3\x2\x2\x2"+
		"\x7B4\x7B5\x3\x2\x2\x2\x7B5\x7B7\x3\x2\x2\x2\x7B6\x7B2\x3\x2\x2\x2\x7B6"+
		"\x7B7\x3\x2\x2\x2\x7B7\x7B8\x3\x2\x2\x2\x7B8\x7C1\x5\x128\x95\x2\x7B9"+
		"\x7BB\x5\x19A\xCE\x2\x7BA\x7B9\x3\x2\x2\x2\x7BA\x7BB\x3\x2\x2\x2\x7BB"+
		"\x7BC\x3\x2\x2\x2\x7BC\x7BE\a)\x2\x2\x7BD\x7BF\x5\x19A\xCE\x2\x7BE\x7BD"+
		"\x3\x2\x2\x2\x7BE\x7BF\x3\x2\x2\x2\x7BF\x7C0\x3\x2\x2\x2\x7C0\x7C2\x5"+
		"\x156\xAC\x2\x7C1\x7BA\x3\x2\x2\x2\x7C2\x7C3\x3\x2\x2\x2\x7C3\x7C1\x3"+
		"\x2\x2\x2\x7C3\x7C4\x3\x2\x2\x2\x7C4\x125\x3\x2\x2\x2\x7C5\x7C7\x5\x156"+
		"\xAC\x2\x7C6\x7C8\x5\x19A\xCE\x2\x7C7\x7C6\x3\x2\x2\x2\x7C7\x7C8\x3\x2"+
		"\x2\x2\x7C8\x7C9\x3\x2\x2\x2\x7C9\x7CB\a-\x2\x2\x7CA\x7CC\x5\x19A\xCE"+
		"\x2\x7CB\x7CA\x3\x2\x2\x2\x7CB\x7CC\x3\x2\x2\x2\x7CC\x7CE\x3\x2\x2\x2"+
		"\x7CD\x7C5\x3\x2\x2\x2\x7CD\x7CE\x3\x2\x2\x2\x7CE\x7CF\x3\x2\x2\x2\x7CF"+
		"\x7D0\a&\x2\x2\x7D0\x7D1\x5\x19A\xCE\x2\x7D1\x7D3\x5\x128\x95\x2\x7D2"+
		"\x7D4\x5\x19A\xCE\x2\x7D3\x7D2\x3\x2\x2\x2\x7D3\x7D4\x3\x2\x2\x2\x7D4"+
		"\x7D5\x3\x2\x2\x2\x7D5\x7D7\a\xD7\x2\x2\x7D6\x7D8\x5\x19A\xCE\x2\x7D7"+
		"\x7D6\x3\x2\x2\x2\x7D7\x7D8\x3\x2\x2\x2\x7D8\x7D9\x3\x2\x2\x2\x7D9\x7DA"+
		"\x5\x128\x95\x2\x7DA\x127\x3\x2\x2\x2\x7DB\x7DD\a\xD5\x2\x2\x7DC\x7DE"+
		"\x5\x19A\xCE\x2\x7DD\x7DC\x3\x2\x2\x2\x7DD\x7DE\x3\x2\x2\x2\x7DE\x7DF"+
		"\x3\x2\x2\x2\x7DF\x7E1\x5\x156\xAC\x2\x7E0\x7E2\x5\x19A\xCE\x2\x7E1\x7E0"+
		"\x3\x2\x2\x2\x7E1\x7E2\x3\x2\x2\x2\x7E2\x7E3\x3\x2\x2\x2\x7E3\x7E5\a)"+
		"\x2\x2\x7E4\x7E6\x5\x19A\xCE\x2\x7E5\x7E4\x3\x2\x2\x2\x7E5\x7E6\x3\x2"+
		"\x2\x2\x7E6\x7E7\x3\x2\x2\x2\x7E7\x7E9\x5\x156\xAC\x2\x7E8\x7EA\x5\x19A"+
		"\xCE\x2\x7E9\x7E8\x3\x2\x2\x2\x7E9\x7EA\x3\x2\x2\x2\x7EA\x7EB\x3\x2\x2"+
		"\x2\x7EB\x7EC\a\xDC\x2\x2\x7EC\x129\x3\x2\x2\x2\x7ED\x7F8\x5\x12C\x97"+
		"\x2\x7EE\x7F0\x5\x19A\xCE\x2\x7EF\x7EE\x3\x2\x2\x2\x7EF\x7F0\x3\x2\x2"+
		"\x2\x7F0\x7F1\x3\x2\x2\x2\x7F1\x7F3\a)\x2\x2\x7F2\x7F4\x5\x19A\xCE\x2"+
		"\x7F3\x7F2\x3\x2\x2\x2\x7F3\x7F4\x3\x2\x2\x2\x7F4\x7F5\x3\x2\x2\x2\x7F5"+
		"\x7F7\x5\x12C\x97\x2\x7F6\x7EF\x3\x2\x2\x2\x7F7\x7FA\x3\x2\x2\x2\x7F8"+
		"\x7F6\x3\x2\x2\x2\x7F8\x7F9\x3\x2\x2\x2\x7F9\x12B\x3\x2\x2\x2\x7FA\x7F8"+
		"\x3\x2\x2\x2\x7FB\x7FC\x5\x156\xAC\x2\x7FC\x7FD\x5\x19A\xCE\x2\x7FD\x7FE"+
		"\a\xBF\x2\x2\x7FE\x7FF\x5\x19A\xCE\x2\x7FF\x801\x3\x2\x2\x2\x800\x7FB"+
		"\x3\x2\x2\x2\x800\x801\x3\x2\x2\x2\x801\x802\x3\x2\x2\x2\x802\x803\x5"+
		"\x156\xAC\x2\x803\x12D\x3\x2\x2\x2\x804\x808\x5\x130\x99\x2\x805\x808"+
		"\x5\x180\xC1\x2\x806\x808\x5\x17E\xC0\x2\x807\x804\x3\x2\x2\x2\x807\x805"+
		"\x3\x2\x2\x2\x807\x806\x3\x2\x2\x2\x808\x12F\x3\x2\x2\x2\x809\x80C\x5"+
		"\x132\x9A\x2\x80A\x80C\x5\x134\x9B\x2\x80B\x809\x3\x2\x2\x2\x80B\x80A"+
		"\x3\x2\x2\x2\x80C\x131\x3\x2\x2\x2\x80D\x80E\x5\x136\x9C\x2\x80E\x133"+
		"\x3\x2\x2\x2\x80F\x810\x5\x136\x9C\x2\x810\x811\x5\x152\xAA\x2\x811\x135"+
		"\x3\x2\x2\x2\x812\x816\a\xEA\x2\x2\x813\x816\x5\x17C\xBF\x2\x814\x816"+
		"\x5\x138\x9D\x2\x815\x812\x3\x2\x2\x2\x815\x813\x3\x2\x2\x2\x815\x814"+
		"\x3\x2\x2\x2\x816\x137\x3\x2\x2\x2\x817\x81B\a\xDD\x2\x2\x818\x81A\x5"+
		"\x13A\x9E\x2\x819\x818\x3\x2\x2\x2\x81A\x81D\x3\x2\x2\x2\x81B\x819\x3"+
		"\x2\x2\x2\x81B\x81C\x3\x2\x2\x2\x81C\x81E\x3\x2\x2\x2\x81D\x81B\x3\x2"+
		"\x2\x2\x81E\x81F\a\xDE\x2\x2\x81F\x139\x3\x2\x2\x2\x820\x823\n\r\x2\x2"+
		"\x821\x823\x5\x138\x9D\x2\x822\x820\x3\x2\x2\x2\x822\x821\x3\x2\x2\x2"+
		"\x823\x13B\x3\x2\x2\x2\x824\x826\a\x39\x2\x2\x825\x827\x5\x19A\xCE\x2"+
		"\x826\x825\x3\x2\x2\x2\x826\x827\x3\x2\x2\x2\x827\x82A\x3\x2\x2\x2\x828"+
		"\x829\a\x8D\x2\x2\x829\x82B\x5\x19A\xCE\x2\x82A\x828\x3\x2\x2\x2\x82A"+
		"\x82B\x3\x2\x2\x2\x82B\x82C\x3\x2\x2\x2\x82C\x831\x5\x150\xA9\x2\x82D"+
		"\x82F\x5\x19A\xCE\x2\x82E\x82D\x3\x2\x2\x2\x82E\x82F\x3\x2\x2\x2\x82F"+
		"\x830\x3\x2\x2\x2\x830\x832\x5\x144\xA3\x2\x831\x82E\x3\x2\x2\x2\x831"+
		"\x832\x3\x2\x2\x2\x832\x13D\x3\x2\x2\x2\x833\x834\t\xE\x2\x2\x834\x13F"+
		"\x3\x2\x2\x2\x835\x836\t\xF\x2\x2\x836\x141\x3\x2\x2\x2\x837\x838\x5\x156"+
		"\xAC\x2\x838\x143\x3\x2\x2\x2\x839\x83B\a\xD8\x2\x2\x83A\x83C\x5\x19A"+
		"\xCE\x2\x83B\x83A\x3\x2\x2\x2\x83B\x83C\x3\x2\x2\x2\x83C\x83D\x3\x2\x2"+
		"\x2\x83D\x83E\x5\x156\xAC\x2\x83E\x145\x3\x2\x2\x2\x83F\x841\x5\x148\xA5"+
		"\x2\x840\x842\x5\x19A\xCE\x2\x841\x840\x3\x2\x2\x2\x841\x842\x3\x2\x2"+
		"\x2\x842\x843\x3\x2\x2\x2\x843\x844\a*\x2\x2\x844\x147\x3\x2\x2\x2\x845"+
		"\x848\x5\x14A\xA6\x2\x846\x848\x5\x14C\xA7\x2\x847\x845\x3\x2\x2\x2\x847"+
		"\x846\x3\x2\x2\x2\x848\x149\x3\x2\x2\x2\x849\x84A\x5\x12E\x98\x2\x84A"+
		"\x14B\x3\x2\x2\x2\x84B\x84C\x5\x14E\xA8\x2\x84C\x14D\x3\x2\x2\x2\x84D"+
		"\x84E\t\x10\x2\x2\x84E\x14F\x3\x2\x2\x2\x84F\x852\x5\x13E\xA0\x2\x850"+
		"\x852\x5\x142\xA2\x2\x851\x84F\x3\x2\x2\x2\x851\x850\x3\x2\x2\x2\x852"+
		"\x85B\x3\x2\x2\x2\x853\x855\x5\x19A\xCE\x2\x854\x853\x3\x2\x2\x2\x854"+
		"\x855\x3\x2\x2\x2\x855\x856\x3\x2\x2\x2\x856\x858\a\xD5\x2\x2\x857\x859"+
		"\x5\x19A\xCE\x2\x858\x857\x3\x2\x2\x2\x858\x859\x3\x2\x2\x2\x859\x85A"+
		"\x3\x2\x2\x2\x85A\x85C\a\xDC\x2\x2\x85B\x854\x3\x2\x2\x2\x85B\x85C\x3"+
		"\x2\x2\x2\x85C\x151\x3\x2\x2\x2\x85D\x85E\t\x11\x2\x2\x85E\x153\x3\x2"+
		"\x2\x2\x85F\x860\t\x12\x2\x2\x860\x155\x3\x2\x2\x2\x861\x862\b\xAC\x1"+
		"\x2\x862\x863\a\xC2\x2\x2\x863\x864\x5\x19A\xCE\x2\x864\x865\x5\x156\xAC"+
		"\x13\x865\x884\x3\x2\x2\x2\x866\x867\a\x8D\x2\x2\x867\x868\x5\x19A\xCE"+
		"\x2\x868\x869\x5\x156\xAC\x12\x869\x884\x3\x2\x2\x2\x86A\x86C\a\xD7\x2"+
		"\x2\x86B\x86D\x5\x19A\xCE\x2\x86C\x86B\x3\x2\x2\x2\x86C\x86D\x3\x2\x2"+
		"\x2\x86D\x86E\x3\x2\x2\x2\x86E\x884\x5\x156\xAC\x10\x86F\x871\a\x8E\x2"+
		"\x2\x870\x872\x5\x19A\xCE\x2\x871\x870\x3\x2\x2\x2\x871\x872\x3\x2\x2"+
		"\x2\x872\x873\x3\x2\x2\x2\x873\x884\x5\x156\xAC\t\x874\x875\a.\x2\x2\x875"+
		"\x884\x5\x156\xAC\x3\x876\x884\x5\x158\xAD\x2\x877\x884\x5\x162\xB2\x2"+
		"\x878\x884\x5\x164\xB3\x2\x879\x87B\a\xD5\x2\x2\x87A\x87C\x5\x19A\xCE"+
		"\x2\x87B\x87A\x3\x2\x2\x2\x87B\x87C\x3\x2\x2\x2\x87C\x87D\x3\x2\x2\x2"+
		"\x87D\x87F\x5\x156\xAC\x2\x87E\x880\x5\x19A\xCE\x2\x87F\x87E\x3\x2\x2"+
		"\x2\x87F\x880\x3\x2\x2\x2\x880\x881\x3\x2\x2\x2\x881\x882\a\xDC\x2\x2"+
		"\x882\x884\x3\x2\x2\x2\x883\x861\x3\x2\x2\x2\x883\x866\x3\x2\x2\x2\x883"+
		"\x86A\x3\x2\x2\x2\x883\x86F\x3\x2\x2\x2\x883\x874\x3\x2\x2\x2\x883\x876"+
		"\x3\x2\x2\x2\x883\x877\x3\x2\x2\x2\x883\x878\x3\x2\x2\x2\x883\x879\x3"+
		"\x2\x2\x2\x884\x8F3\x3\x2\x2\x2\x885\x887\f\x11\x2\x2\x886\x888\x5\x19A"+
		"\xCE\x2\x887\x886\x3\x2\x2\x2\x887\x888\x3\x2\x2\x2\x888\x889\x3\x2\x2"+
		"\x2\x889\x88B\a\xDB\x2\x2\x88A\x88C\x5\x19A\xCE\x2\x88B\x88A\x3\x2\x2"+
		"\x2\x88B\x88C\x3\x2\x2\x2\x88C\x88D\x3\x2\x2\x2\x88D\x8F2\x5\x156\xAC"+
		"\x12\x88E\x890\f\xF\x2\x2\x88F\x891\x5\x19A\xCE\x2\x890\x88F\x3\x2\x2"+
		"\x2\x890\x891\x3\x2\x2\x2\x891\x892\x3\x2\x2\x2\x892\x894\t\x13\x2\x2"+
		"\x893\x895\x5\x19A\xCE\x2\x894\x893\x3\x2\x2\x2\x894\x895\x3\x2\x2\x2"+
		"\x895\x896\x3\x2\x2\x2\x896\x8F2\x5\x156\xAC\x10\x897\x899\f\xE\x2\x2"+
		"\x898\x89A\x5\x19A\xCE\x2\x899\x898\x3\x2\x2\x2\x899\x89A\x3\x2\x2\x2"+
		"\x89A\x89B\x3\x2\x2\x2\x89B\x89D\a\xD0\x2\x2\x89C\x89E\x5\x19A\xCE\x2"+
		"\x89D\x89C\x3\x2\x2\x2\x89D\x89E\x3\x2\x2\x2\x89E\x89F\x3\x2\x2\x2\x89F"+
		"\x8F2\x5\x156\xAC\xF\x8A0\x8A2\f\r\x2\x2\x8A1\x8A3\x5\x19A\xCE\x2\x8A2"+
		"\x8A1\x3\x2\x2\x2\x8A2\x8A3\x3\x2\x2\x2\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8A6"+
		"\a\x8B\x2\x2\x8A5\x8A7\x5\x19A\xCE\x2\x8A6\x8A5\x3\x2\x2\x2\x8A6\x8A7"+
		"\x3\x2\x2\x2\x8A7\x8A8\x3\x2\x2\x2\x8A8\x8F2\x5\x156\xAC\xE\x8A9\x8AB"+
		"\f\f\x2\x2\x8AA\x8AC\x5\x19A\xCE\x2\x8AB\x8AA\x3\x2\x2\x2\x8AB\x8AC\x3"+
		"\x2\x2\x2\x8AC\x8AD\x3\x2\x2\x2\x8AD\x8AF\t\x14\x2\x2\x8AE\x8B0\x5\x19A"+
		"\xCE\x2\x8AF\x8AE\x3\x2\x2\x2\x8AF\x8B0\x3\x2\x2\x2\x8B0\x8B1\x3\x2\x2"+
		"\x2\x8B1\x8F2\x5\x156\xAC\r\x8B2\x8B4\f\v\x2\x2\x8B3\x8B5\x5\x19A\xCE"+
		"\x2\x8B4\x8B3\x3\x2\x2\x2\x8B4\x8B5\x3\x2\x2\x2\x8B5\x8B6\x3\x2\x2\x2"+
		"\x8B6\x8B8\a\x32\x2\x2\x8B7\x8B9\x5\x19A\xCE\x2\x8B8\x8B7\x3\x2\x2\x2"+
		"\x8B8\x8B9\x3\x2\x2\x2\x8B9\x8BA\x3\x2\x2\x2\x8BA\x8F2\x5\x156\xAC\f\x8BB"+
		"\x8BD\f\n\x2\x2\x8BC\x8BE\x5\x19A\xCE\x2\x8BD\x8BC\x3\x2\x2\x2\x8BD\x8BE"+
		"\x3\x2\x2\x2\x8BE\x8BF\x3\x2\x2\x2\x8BF\x8C1\t\xF\x2\x2\x8C0\x8C2\x5\x19A"+
		"\xCE\x2\x8C1\x8C0\x3\x2\x2\x2\x8C1\x8C2\x3\x2\x2\x2\x8C2\x8C3\x3\x2\x2"+
		"\x2\x8C3\x8F2\x5\x156\xAC\v\x8C4\x8C6\f\b\x2\x2\x8C5\x8C7\x5\x19A\xCE"+
		"\x2\x8C6\x8C5\x3\x2\x2\x2\x8C6\x8C7\x3\x2\x2\x2\x8C7\x8C8\x3\x2\x2\x2"+
		"\x8C8\x8CA\a\x36\x2\x2\x8C9\x8CB\x5\x19A\xCE\x2\x8CA\x8C9\x3\x2\x2\x2"+
		"\x8CA\x8CB\x3\x2\x2\x2\x8CB\x8CC\x3\x2\x2\x2\x8CC\x8F2\x5\x156\xAC\t\x8CD"+
		"\x8CF\f\a\x2\x2\x8CE\x8D0\x5\x19A\xCE\x2\x8CF\x8CE\x3\x2\x2\x2\x8CF\x8D0"+
		"\x3\x2\x2\x2\x8D0\x8D1\x3\x2\x2\x2\x8D1\x8D3\a\x9B\x2\x2\x8D2\x8D4\x5"+
		"\x19A\xCE\x2\x8D3\x8D2\x3\x2\x2\x2\x8D3\x8D4\x3\x2\x2\x2\x8D4\x8D5\x3"+
		"\x2\x2\x2\x8D5\x8F2\x5\x156\xAC\b\x8D6\x8D8\f\x6\x2\x2\x8D7\x8D9\x5\x19A"+
		"\xCE\x2\x8D8\x8D7\x3\x2\x2\x2\x8D8\x8D9\x3\x2\x2\x2\x8D9\x8DA\x3\x2\x2"+
		"\x2\x8DA\x8DC\a\xCD\x2\x2\x8DB\x8DD\x5\x19A\xCE\x2\x8DC\x8DB\x3\x2\x2"+
		"\x2\x8DC\x8DD\x3\x2\x2\x2\x8DD\x8DE\x3\x2\x2\x2\x8DE\x8F2\x5\x156\xAC"+
		"\a\x8DF\x8E1\f\x5\x2\x2\x8E0\x8E2\x5\x19A\xCE\x2\x8E1\x8E0\x3\x2\x2\x2"+
		"\x8E1\x8E2\x3\x2\x2\x2\x8E2\x8E3\x3\x2\x2\x2\x8E3\x8E5\a\x66\x2\x2\x8E4"+
		"\x8E6\x5\x19A\xCE\x2\x8E5\x8E4\x3\x2\x2\x2\x8E5\x8E6\x3\x2\x2\x2\x8E6"+
		"\x8E7\x3\x2\x2\x2\x8E7\x8F2\x5\x156\xAC\x6\x8E8\x8EA\f\x4\x2\x2\x8E9\x8EB"+
		"\x5\x19A\xCE\x2\x8EA\x8E9\x3\x2\x2\x2\x8EA\x8EB\x3\x2\x2\x2\x8EB\x8EC"+
		"\x3\x2\x2\x2\x8EC\x8EE\ax\x2\x2\x8ED\x8EF\x5\x19A\xCE\x2\x8EE\x8ED\x3"+
		"\x2\x2\x2\x8EE\x8EF\x3\x2\x2\x2\x8EF\x8F0\x3\x2\x2\x2\x8F0\x8F2\x5\x156"+
		"\xAC\x5\x8F1\x885\x3\x2\x2\x2\x8F1\x88E\x3\x2\x2\x2\x8F1\x897\x3\x2\x2"+
		"\x2\x8F1\x8A0\x3\x2\x2\x2\x8F1\x8A9\x3\x2\x2\x2\x8F1\x8B2\x3\x2\x2\x2"+
		"\x8F1\x8BB\x3\x2\x2\x2\x8F1\x8C4\x3\x2\x2\x2\x8F1\x8CD\x3\x2\x2\x2\x8F1"+
		"\x8D6\x3\x2\x2\x2\x8F1\x8DF\x3\x2\x2\x2\x8F1\x8E8\x3\x2\x2\x2\x8F2\x8F5"+
		"\x3\x2\x2\x2\x8F3\x8F1\x3\x2\x2\x2\x8F3\x8F4\x3\x2\x2\x2\x8F4\x157\x3"+
		"\x2\x2\x2\x8F5\x8F3\x3\x2\x2\x2\x8F6\x8FE\x5\x14E\xA8\x2\x8F7\x8FE\a\xE4"+
		"\x2\x2\x8F8\x8FE\a\xDF\x2\x2\x8F9\x8FB\x5\x15A\xAE\x2\x8FA\x8FC\x5\x152"+
		"\xAA\x2\x8FB\x8FA\x3\x2\x2\x2\x8FB\x8FC\x3\x2\x2\x2\x8FC\x8FE\x3\x2\x2"+
		"\x2\x8FD\x8F6\x3\x2\x2\x2\x8FD\x8F7\x3\x2\x2\x2\x8FD\x8F8\x3\x2\x2\x2"+
		"\x8FD\x8F9\x3\x2\x2\x2\x8FE\x159\x3\x2\x2\x2\x8FF\x903\x5\x15C\xAF\x2"+
		"\x900\x903\x5\x15E\xB0\x2\x901\x903\x5\x160\xB1\x2\x902\x8FF\x3\x2\x2"+
		"\x2\x902\x900\x3\x2\x2\x2\x902\x901\x3\x2\x2\x2\x903\x15B\x3\x2\x2\x2"+
		"\x904\x905\t\x15\x2\x2\x905\x15D\x3\x2\x2\x2\x906\x907\a\x8F\x2\x2\x907"+
		"\x15F\x3\x2\x2\x2\x908\x909\t\x16\x2\x2\x909\x161\x3\x2\x2\x2\x90A\x90B"+
		"\b\xB2\x1\x2\x90B\x918\a\x89\x2\x2\x90C\x918\x5\x130\x99\x2\x90D\x90F"+
		"\a-\x2\x2\x90E\x910\x5\x198\xCD\x2\x90F\x90E\x3\x2\x2\x2\x90F\x910\x3"+
		"\x2\x2\x2\x910\x911\x3\x2\x2\x2\x911\x918\x5\x12E\x98\x2\x912\x914\a,"+
		"\x2\x2\x913\x915\x5\x198\xCD\x2\x914\x913\x3\x2\x2\x2\x914\x915\x3\x2"+
		"\x2\x2\x915\x916\x3\x2\x2\x2\x916\x918\x5\x12E\x98\x2\x917\x90A\x3\x2"+
		"\x2\x2\x917\x90C\x3\x2\x2\x2\x917\x90D\x3\x2\x2\x2\x917\x912\x3\x2\x2"+
		"\x2\x918\x93C\x3\x2\x2\x2\x919\x91B\f\t\x2\x2\x91A\x91C\x5\x19A\xCE\x2"+
		"\x91B\x91A\x3\x2\x2\x2\x91B\x91C\x3\x2\x2\x2\x91C\x91D\x3\x2\x2\x2\x91D"+
		"\x91F\a\xD5\x2\x2\x91E\x920\x5\x19A\xCE\x2\x91F\x91E\x3\x2\x2\x2\x91F"+
		"\x920\x3\x2\x2\x2\x920\x922\x3\x2\x2\x2\x921\x923\x5\x166\xB4\x2\x922"+
		"\x921\x3\x2\x2\x2\x922\x923\x3\x2\x2\x2\x923\x925\x3\x2\x2\x2\x924\x926"+
		"\x5\x19A\xCE\x2\x925\x924\x3\x2\x2\x2\x925\x926\x3\x2\x2\x2\x926\x927"+
		"\x3\x2\x2\x2\x927\x93B\a\xDC\x2\x2\x928\x92A\f\b\x2\x2\x929\x92B\x5\x198"+
		"\xCD\x2\x92A\x929\x3\x2\x2\x2\x92A\x92B\x3\x2\x2\x2\x92B\x92C\x3\x2\x2"+
		"\x2\x92C\x92E\a-\x2\x2\x92D\x92F\x5\x198\xCD\x2\x92E\x92D\x3\x2\x2\x2"+
		"\x92E\x92F\x3\x2\x2\x2\x92F\x930\x3\x2\x2\x2\x930\x93B\x5\x12E\x98\x2"+
		"\x931\x933\f\a\x2\x2\x932\x934\x5\x198\xCD\x2\x933\x932\x3\x2\x2\x2\x933"+
		"\x934\x3\x2\x2\x2\x934\x935\x3\x2\x2\x2\x935\x937\a,\x2\x2\x936\x938\x5"+
		"\x198\xCD\x2\x937\x936\x3\x2\x2\x2\x937\x938\x3\x2\x2\x2\x938\x939\x3"+
		"\x2\x2\x2\x939\x93B\x5\x12E\x98\x2\x93A\x919\x3\x2\x2\x2\x93A\x928\x3"+
		"\x2\x2\x2\x93A\x931\x3\x2\x2\x2\x93B\x93E\x3\x2\x2\x2\x93C\x93A\x3\x2"+
		"\x2\x2\x93C\x93D\x3\x2\x2\x2\x93D\x163\x3\x2\x2\x2\x93E\x93C\x3\x2\x2"+
		"\x2\x93F\x955\x5\x13E\xA0\x2\x940\x942\a\xDD\x2\x2\x941\x943\x5\x19A\xCE"+
		"\x2\x942\x941\x3\x2\x2\x2\x942\x943\x3\x2\x2\x2\x943\x944\x3\x2\x2\x2"+
		"\x944\x946\x5\x13E\xA0\x2\x945\x947\x5\x19A\xCE\x2\x946\x945\x3\x2\x2"+
		"\x2\x946\x947\x3\x2\x2\x2\x947\x948\x3\x2\x2\x2\x948\x949\a\xDE\x2\x2"+
		"\x949\x955\x3\x2\x2\x2\x94A\x955\a\x91\x2\x2\x94B\x94D\a\xDD\x2\x2\x94C"+
		"\x94E\x5\x19A\xCE\x2\x94D\x94C\x3\x2\x2\x2\x94D\x94E\x3\x2\x2\x2\x94E"+
		"\x94F\x3\x2\x2\x2\x94F\x951\a\x91\x2\x2\x950\x952\x5\x19A\xCE\x2\x951"+
		"\x950\x3\x2\x2\x2\x951\x952\x3\x2\x2\x2\x952\x953\x3\x2\x2\x2\x953\x955"+
		"\a\xDE\x2\x2\x954\x93F\x3\x2\x2\x2\x954\x940\x3\x2\x2\x2\x954\x94A\x3"+
		"\x2\x2\x2\x954\x94B\x3\x2\x2\x2\x955\x165\x3\x2\x2\x2\x956\x957\x5\x168"+
		"\xB5\x2\x957\x167\x3\x2\x2\x2\x958\x95A\x5\x16A\xB6\x2\x959\x95B\x5\x19A"+
		"\xCE\x2\x95A\x959\x3\x2\x2\x2\x95A\x95B\x3\x2\x2\x2\x95B\x95D\x3\x2\x2"+
		"\x2\x95C\x958\x3\x2\x2\x2\x95D\x960\x3\x2\x2\x2\x95E\x95C\x3\x2\x2\x2"+
		"\x95E\x95F\x3\x2\x2\x2\x95F\x961\x3\x2\x2\x2\x960\x95E\x3\x2\x2\x2\x961"+
		"\x96D\x5\x16E\xB8\x2\x962\x964\x5\x16A\xB6\x2\x963\x965\x5\x19A\xCE\x2"+
		"\x964\x963\x3\x2\x2\x2\x964\x965\x3\x2\x2\x2\x965\x967\x3\x2\x2\x2\x966"+
		"\x962\x3\x2\x2\x2\x967\x96A\x3\x2\x2\x2\x968\x966\x3\x2\x2\x2\x968\x969"+
		"\x3\x2\x2\x2\x969\x96B\x3\x2\x2\x2\x96A\x968\x3\x2\x2\x2\x96B\x96D\x5"+
		"\x170\xB9\x2\x96C\x95E\x3\x2\x2\x2\x96C\x968\x3\x2\x2\x2\x96D\x169\x3"+
		"\x2\x2\x2\x96E\x970\x5\x16C\xB7\x2\x96F\x971\x5\x19A\xCE\x2\x970\x96F"+
		"\x3\x2\x2\x2\x970\x971\x3\x2\x2\x2\x971\x972\x3\x2\x2\x2\x972\x973\a)"+
		"\x2\x2\x973\x979\x3\x2\x2\x2\x974\x976\x5\x19A\xCE\x2\x975\x974\x3\x2"+
		"\x2\x2\x975\x976\x3\x2\x2\x2\x976\x977\x3\x2\x2\x2\x977\x979\a)\x2\x2"+
		"\x978\x96E\x3\x2\x2\x2\x978\x975\x3\x2\x2\x2\x979\x16B\x3\x2\x2\x2\x97A"+
		"\x97B\x5\x174\xBB\x2\x97B\x16D\x3\x2\x2\x2\x97C\x97D\x5\x174\xBB\x2\x97D"+
		"\x16F\x3\x2\x2\x2\x97E\x989\x5\x172\xBA\x2\x97F\x981\x5\x19A\xCE\x2\x980"+
		"\x97F\x3\x2\x2\x2\x980\x981\x3\x2\x2\x2\x981\x982\x3\x2\x2\x2\x982\x984"+
		"\a)\x2\x2\x983\x985\x5\x19A\xCE\x2\x984\x983\x3\x2\x2\x2\x984\x985\x3"+
		"\x2\x2\x2\x985\x986\x3\x2\x2\x2\x986\x988\x5\x172\xBA\x2\x987\x980\x3"+
		"\x2\x2\x2\x988\x98B\x3\x2\x2\x2\x989\x987\x3\x2\x2\x2\x989\x98A\x3\x2"+
		"\x2\x2\x98A\x171\x3\x2\x2\x2\x98B\x989\x3\x2\x2\x2\x98C\x98E\x5\x12E\x98"+
		"\x2\x98D\x98F\x5\x19A\xCE\x2\x98E\x98D\x3\x2\x2\x2\x98E\x98F\x3\x2\x2"+
		"\x2\x98F\x990\x3\x2\x2\x2\x990\x992\a\xCE\x2\x2\x991\x993\x5\x19A\xCE"+
		"\x2\x992\x991\x3\x2\x2\x2\x992\x993\x3\x2\x2\x2\x993\x994\x3\x2\x2\x2"+
		"\x994\x995\x5\x174\xBB\x2\x995\x173\x3\x2\x2\x2\x996\x997\a=\x2\x2\x997"+
		"\x999\x5\x19A\xCE\x2\x998\x996\x3\x2\x2\x2\x998\x999\x3\x2\x2\x2\x999"+
		"\x99A\x3\x2\x2\x2\x99A\x9A3\x5\x156\xAC\x2\x99B\x9A3\x5\x17A\xBE\x2\x99C"+
		"\x99D\x5\x176\xBC\x2\x99D\x99E\x5\x19A\xCE\x2\x99E\x99F\a\xBF\x2\x2\x99F"+
		"\x9A0\x5\x19A\xCE\x2\x9A0\x9A1\x5\x178\xBD\x2\x9A1\x9A3\x3\x2\x2\x2\x9A2"+
		"\x998\x3\x2\x2\x2\x9A2\x99B\x3\x2\x2\x2\x9A2\x99C\x3\x2\x2\x2\x9A3\x175"+
		"\x3\x2\x2\x2\x9A4\x9A5\x5\x156\xAC\x2\x9A5\x177\x3\x2\x2\x2\x9A6\x9A7"+
		"\x5\x156\xAC\x2\x9A7\x179\x3\x2\x2\x2\x9A8\x9A9\a\x34\x2\x2\x9A9\x9AA"+
		"\x5\x19A\xCE\x2\x9AA\x9AB\x5\x156\xAC\x2\x9AB\x17B\x3\x2\x2\x2\x9AC\x9AD"+
		"\t\x17\x2\x2\x9AD\x17D\x3\x2\x2\x2\x9AE\x9AF\a\x39\x2\x2\x9AF\x17F\x3"+
		"\x2\x2\x2\x9B0\x9B1\t\x18\x2\x2\x9B1\x181\x3\x2\x2\x2\x9B2\x9B4\x5\x19A"+
		"\xCE\x2\x9B3\x9B2\x3\x2\x2\x2\x9B3\x9B4\x3\x2\x2\x2\x9B4\x9B5\x3\x2\x2"+
		"\x2\x9B5\x9B7\a\xE5\x2\x2\x9B6\x9B8\x5\x19A\xCE\x2\x9B7\x9B6\x3\x2\x2"+
		"\x2\x9B7\x9B8\x3\x2\x2\x2\x9B8\x9BE\x3\x2\x2\x2\x9B9\x9BB\x5\x19A\xCE"+
		"\x2\x9BA\x9B9\x3\x2\x2\x2\x9BA\x9BB\x3\x2\x2\x2\x9BB\x9BC\x3\x2\x2\x2"+
		"\x9BC\x9BE\x5\x186\xC4\x2\x9BD\x9B3\x3\x2\x2\x2\x9BD\x9BA\x3\x2\x2\x2"+
		"\x9BE\x183\x3\x2\x2\x2\x9BF\x9C8\x5\x182\xC2\x2\x9C0\x9C2\x5\x19A\xCE"+
		"\x2\x9C1\x9C0\x3\x2\x2\x2\x9C1\x9C2\x3\x2\x2\x2\x9C2\x9C3\x3\x2\x2\x2"+
		"\x9C3\x9C5\a*\x2\x2\x9C4\x9C6\x5\x19A\xCE\x2\x9C5\x9C4\x3\x2\x2\x2\x9C5"+
		"\x9C6\x3\x2\x2\x2\x9C6\x9C8\x3\x2\x2\x2\x9C7\x9BF\x3\x2\x2\x2\x9C7\x9C1"+
		"\x3\x2\x2\x2\x9C8\x9CB\x3\x2\x2\x2\x9C9\x9C7\x3\x2\x2\x2\x9C9\x9CA\x3"+
		"\x2\x2\x2\x9CA\x185\x3\x2\x2\x2\x9CB\x9C9\x3\x2\x2\x2\x9CC\x9D0\x5\x18E"+
		"\xC8\x2\x9CD\x9D0\x5\x18A\xC6\x2\x9CE\x9D0\x5\x188\xC5\x2\x9CF\x9CC\x3"+
		"\x2\x2\x2\x9CF\x9CD\x3\x2\x2\x2\x9CF\x9CE\x3\x2\x2\x2\x9D0\x187\x3\x2"+
		"\x2\x2\x9D1\x9D3\a\xAC\x2\x2\x9D2\x9D4\x5\x19A\xCE\x2\x9D3\x9D2\x3\x2"+
		"\x2\x2\x9D3\x9D4\x3\x2\x2\x2\x9D4\x9D5\x3\x2\x2\x2\x9D5\x9D6\x5\x18C\xC7"+
		"\x2\x9D6\x189\x3\x2\x2\x2\x9D7\x9D8\a\xE6\x2\x2\x9D8\x9D9\x5\x18C\xC7"+
		"\x2\x9D9\x18B\x3\x2\x2\x2\x9DA\x9DD\a\xEB\x2\x2\x9DB\x9DD\n\x19\x2\x2"+
		"\x9DC\x9DA\x3\x2\x2\x2\x9DC\x9DB\x3\x2\x2\x2\x9DD\x9E0\x3\x2\x2\x2\x9DE"+
		"\x9DC\x3\x2\x2\x2\x9DE\x9DF\x3\x2\x2\x2\x9DF\x18D\x3\x2\x2\x2\x9E0\x9DE"+
		"\x3\x2\x2\x2\x9E1\x9E7\a\xE6\x2\x2\x9E2\x9E3\a/\x2\x2\x9E3\x9E5\x5\x190"+
		"\xC9\x2\x9E4\x9E6\x5\x19A\xCE\x2\x9E5\x9E4\x3\x2\x2\x2\x9E5\x9E6\x3\x2"+
		"\x2\x2\x9E6\x9E8\x3\x2\x2\x2\x9E7\x9E2\x3\x2\x2\x2\x9E8\x9E9\x3\x2\x2"+
		"\x2\x9E9\x9E7\x3\x2\x2\x2\x9E9\x9EA\x3\x2\x2\x2\x9EA\x18F\x3\x2\x2\x2"+
		"\x9EB\x9ED\x5\x192\xCA\x2\x9EC\x9EE\x5\x194\xCB\x2\x9ED\x9EC\x3\x2\x2"+
		"\x2\x9ED\x9EE\x3\x2\x2\x2\x9EE\x191\x3\x2\x2\x2\x9EF\x9F0\x5\x12E\x98"+
		"\x2\x9F0\x193\x3\x2\x2\x2\x9F1\x9F2\x5\x19A\xCE\x2\x9F2\x9F3\x5\x196\xCC"+
		"\x2\x9F3\xA2E\x3\x2\x2\x2\x9F4\x9F5\x5\x19A\xCE\x2\x9F5\x9FE\x5\x196\xCC"+
		"\x2\x9F6\x9F8\x5\x19A\xCE\x2\x9F7\x9F6\x3\x2\x2\x2\x9F7\x9F8\x3\x2\x2"+
		"\x2\x9F8\x9F9\x3\x2\x2\x2\x9F9\x9FB\a)\x2\x2\x9FA\x9FC\x5\x19A\xCE\x2"+
		"\x9FB\x9FA\x3\x2\x2\x2\x9FB\x9FC\x3\x2\x2\x2\x9FC\x9FD\x3\x2\x2\x2\x9FD"+
		"\x9FF\x5\x196\xCC\x2\x9FE\x9F7\x3\x2\x2\x2\x9FF\xA00\x3\x2\x2\x2\xA00"+
		"\x9FE\x3\x2\x2\x2\xA00\xA01\x3\x2\x2\x2\xA01\xA2E\x3\x2\x2\x2\xA02\xA04"+
		"\x5\x19A\xCE\x2\xA03\xA02\x3\x2\x2\x2\xA03\xA04\x3\x2\x2\x2\xA04\xA05"+
		"\x3\x2\x2\x2\xA05\xA07\a\xD5\x2\x2\xA06\xA08\x5\x19A\xCE\x2\xA07\xA06"+
		"\x3\x2\x2\x2\xA07\xA08\x3\x2\x2\x2\xA08\xA09\x3\x2\x2\x2\xA09\xA2E\a\xDC"+
		"\x2\x2\xA0A\xA0C\x5\x19A\xCE\x2\xA0B\xA0A\x3\x2\x2\x2\xA0B\xA0C\x3\x2"+
		"\x2\x2\xA0C\xA0D\x3\x2\x2\x2\xA0D\xA0F\a\xD5\x2\x2\xA0E\xA10\x5\x19A\xCE"+
		"\x2\xA0F\xA0E\x3\x2\x2\x2\xA0F\xA10\x3\x2\x2\x2\xA10\xA11\x3\x2\x2\x2"+
		"\xA11\xA13\x5\x196\xCC\x2\xA12\xA14\x5\x19A\xCE\x2\xA13\xA12\x3\x2\x2"+
		"\x2\xA13\xA14\x3\x2\x2\x2\xA14\xA15\x3\x2\x2\x2\xA15\xA16\a\xDC\x2\x2"+
		"\xA16\xA2E\x3\x2\x2\x2\xA17\xA19\x5\x19A\xCE\x2\xA18\xA17\x3\x2\x2\x2"+
		"\xA18\xA19\x3\x2\x2\x2\xA19\xA1A\x3\x2\x2\x2\xA1A\xA1B\a\xD5\x2\x2\xA1B"+
		"\xA24\x5\x196\xCC\x2\xA1C\xA1E\x5\x19A\xCE\x2\xA1D\xA1C\x3\x2\x2\x2\xA1D"+
		"\xA1E\x3\x2\x2\x2\xA1E\xA1F\x3\x2\x2\x2\xA1F\xA21\a)\x2\x2\xA20\xA22\x5"+
		"\x19A\xCE\x2\xA21\xA20\x3\x2\x2\x2\xA21\xA22\x3\x2\x2\x2\xA22\xA23\x3"+
		"\x2\x2\x2\xA23\xA25\x5\x196\xCC\x2\xA24\xA1D\x3\x2\x2\x2\xA25\xA26\x3"+
		"\x2\x2\x2\xA26\xA24\x3\x2\x2\x2\xA26\xA27\x3\x2\x2\x2\xA27\xA29\x3\x2"+
		"\x2\x2\xA28\xA2A\x5\x19A\xCE\x2\xA29\xA28\x3\x2\x2\x2\xA29\xA2A\x3\x2"+
		"\x2\x2\xA2A\xA2B\x3\x2\x2\x2\xA2B\xA2C\a\xDC\x2\x2\xA2C\xA2E\x3\x2\x2"+
		"\x2\xA2D\x9F1\x3\x2\x2\x2\xA2D\x9F4\x3\x2\x2\x2\xA2D\xA03\x3\x2\x2\x2"+
		"\xA2D\xA0B\x3\x2\x2\x2\xA2D\xA18\x3\x2\x2\x2\xA2E\x195\x3\x2\x2\x2\xA2F"+
		"\xA30\x5\x156\xAC\x2\xA30\x197\x3\x2\x2\x2\xA31\xA35\a\xEB\x2\x2\xA32"+
		"\xA34\a\xE8\x2\x2\xA33\xA32\x3\x2\x2\x2\xA34\xA37\x3\x2\x2\x2\xA35\xA33"+
		"\x3\x2\x2\x2\xA35\xA36\x3\x2\x2\x2\xA36\x199\x3\x2\x2\x2\xA37\xA35\x3"+
		"\x2\x2\x2\xA38\xA3A\t\x1A\x2\x2\xA39\xA38\x3\x2\x2\x2\xA3A\xA3B\x3\x2"+
		"\x2\x2\xA3B\xA39\x3\x2\x2\x2\xA3B\xA3C\x3\x2\x2\x2\xA3C\x19B\x3\x2\x2"+
		"\x2\x188\x1A2\x1A6\x1AE\x1B4\x1B7\x1C1\x1C3\x1C9\x1D2\x1D9\x1DF\x1E8\x1EF"+
		"\x1F3\x1F7\x1FB\x200\x20C\x219\x21C\x228\x22B\x232\x23A\x241\x267\x277"+
		"\x27F\x284\x289\x292\x2A6\x2AA\x2B2\x2BD\x2C3\x2C7\x2CC\x2D3\x2D7\x2E1"+
		"\x2E5\x2E8\x2EE\x2F4\x2FE\x302\x305\x30B\x30F\x319\x31D\x327\x32B\x32F"+
		"\x33B\x33F\x342\x346\x34B\x352\x356\x35B\x363\x367\x36B\x373\x376\x37A"+
		"\x37E\x388\x38C\x38F\x395\x399\x39F\x3A3\x3A8\x3B1\x3B5\x3B8\x3BB\x3BF"+
		"\x3CB\x3CF\x3D2\x3D5\x3D9\x3E2\x3E8\x3EC\x3F1\x3F8\x3FB\x3FF\x406\x40C"+
		"\x41A\x41D\x420\x425\x429\x42D\x431\x436\x439\x43C\x442\x446\x44A\x44E"+
		"\x452\x455\x458\x45B\x45E\x461\x465\x46D\x471\x476\x47E\x484\x488\x494"+
		"\x498\x4B7\x4BC\x4C5\x4CC\x4D0\x4D3\x4DD\x4E1\x4E6\x4F0\x4F6\x50B\x519"+
		"\x521\x526\x52A\x52E\x532\x535\x538\x53B\x555\x559\x56B\x56F\x577\x57B"+
		"\x57F\x583\x589\x58D\x591\x596\x59C\x59F\x5A3\x5A7\x5AA\x5AE\x5B3\x5B5"+
		"\x5B9\x5BD\x5C0\x5C4\x5C7\x5D3\x5D7\x5DB\x5E3\x5E7\x5F5\x5FF\x603\x608"+
		"\x613\x617\x61C\x622\x626\x62C\x62F\x634\x63D\x641\x647\x64A\x653\x657"+
		"\x65D\x660\x66A\x66E\x671\x674\x677\x67B\x67F\x684\x68D\x693\x697\x69C"+
		"\x6A3\x6AF\x6B1\x6B7\x6B9\x6C1\x6C5\x6CD\x6D1\x6D8\x6DC\x6E6\x6EA\x6EF"+
		"\x6F7\x706\x708\x70C\x710\x71A\x71E\x725\x729\x72D\x731\x734\x73F\x748"+
		"\x74F\x753\x756\x759\x75C\x761\x768\x76D\x773\x777\x77C\x781\x785\x789"+
		"\x78B\x78F\x791\x796\x7A8\x7AC\x7AE\x7B4\x7B6\x7BA\x7BE\x7C3\x7C7\x7CB"+
		"\x7CD\x7D3\x7D7\x7DD\x7E1\x7E5\x7E9\x7EF\x7F3\x7F8\x800\x807\x80B\x815"+
		"\x81B\x822\x826\x82A\x82E\x831\x83B\x841\x847\x851\x854\x858\x85B\x86C"+
		"\x871\x87B\x87F\x883\x887\x88B\x890\x894\x899\x89D\x8A2\x8A6\x8AB\x8AF"+
		"\x8B4\x8B8\x8BD\x8C1\x8C6\x8CA\x8CF\x8D3\x8D8\x8DC\x8E1\x8E5\x8EA\x8EE"+
		"\x8F1\x8F3\x8FB\x8FD\x902\x90F\x914\x917\x91B\x91F\x922\x925\x92A\x92E"+
		"\x933\x937\x93A\x93C\x942\x946\x94D\x951\x954\x95A\x95E\x964\x968\x96C"+
		"\x970\x975\x978\x980\x984\x989\x98E\x992\x998\x9A2\x9B3\x9B7\x9BA\x9BD"+
		"\x9C1\x9C5\x9C7\x9C9\x9CF\x9D3\x9DC\x9DE\x9E5\x9E9\x9ED\x9F7\x9FB\xA00"+
		"\xA03\xA07\xA0B\xA0F\xA13\xA18\xA1D\xA21\xA26\xA29\xA2D\xA35\xA3B";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Grammar
