//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\TestProj\TestProj\VBA.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		T__7=1, T__6=2, T__5=3, T__4=4, T__3=5, T__2=6, T__1=7, T__0=8, ACCESS=9, 
		ADDRESSOF=10, ALIAS=11, AND=12, ATTRIBUTE=13, APPACTIVATE=14, APPEND=15, 
		AS=16, BEGIN=17, BEEP=18, BINARY=19, BOOLEAN=20, BYVAL=21, BYREF=22, BYTE=23, 
		CALL=24, CASE=25, CHDIR=26, CHDRIVE=27, CLASS=28, CLOSE=29, COLLECTION=30, 
		CONST=31, DATABASE=32, DATE=33, DECLARE=34, DEFBOOL=35, DEFBYTE=36, DEFDATE=37, 
		DEFDBL=38, DEFDEC=39, DEFCUR=40, DEFINT=41, DEFLNG=42, DEFOBJ=43, DEFSNG=44, 
		DEFSTR=45, DEFVAR=46, DELETESETTING=47, DIM=48, DO=49, DOUBLE=50, EACH=51, 
		ELSE=52, ELSEIF=53, EMPTY=54, END_ENUM=55, END_FUNCTION=56, END_IF=57, 
		END_PROPERTY=58, END_SELECT=59, END_SUB=60, END_TYPE=61, END_WITH=62, 
		END=63, ENUM=64, EQV=65, ERASE=66, ERROR=67, EVENT=68, EXIT_DO=69, EXIT_FOR=70, 
		EXIT_FUNCTION=71, EXIT_PROPERTY=72, EXIT_SUB=73, FALSE=74, FILECOPY=75, 
		FRIEND=76, FOR=77, FUNCTION=78, GET=79, GLOBAL=80, GOSUB=81, GOTO=82, 
		IF=83, IMP=84, IMPLEMENTS=85, IN=86, INPUT=87, IS=88, INTEGER=89, KILL=90, 
		LOAD=91, LOCK=92, LONG=93, LOOP=94, LEN=95, LET=96, LIB=97, LIKE=98, LINE_INPUT=99, 
		LOCK_READ=100, LOCK_WRITE=101, LOCK_READ_WRITE=102, LSET=103, MACRO_CONST=104, 
		MACRO_IF=105, MACRO_ELSEIF=106, MACRO_ELSE=107, MACRO_END_IF=108, ME=109, 
		MID=110, MKDIR=111, MOD=112, NAME=113, NEXT=114, NEW=115, NOT=116, NOTHING=117, 
		NULL=118, ON=119, ON_ERROR=120, ON_LOCAL_ERROR=121, OPEN=122, OPTIONAL=123, 
		OPTION_BASE=124, OPTION_EXPLICIT=125, OPTION_COMPARE=126, OPTION_PRIVATE_MODULE=127, 
		OR=128, OUTPUT=129, PARAMARRAY=130, PRESERVE=131, PRINT=132, PRIVATE=133, 
		PROPERTY_GET=134, PROPERTY_LET=135, PROPERTY_SET=136, PTRSAFE=137, PUBLIC=138, 
		PUT=139, RANDOM=140, RANDOMIZE=141, RAISEEVENT=142, READ=143, READ_WRITE=144, 
		REDIM=145, REM=146, RESET=147, RESUME=148, RETURN=149, RMDIR=150, RSET=151, 
		SAVEPICTURE=152, SAVESETTING=153, SEEK=154, SELECT=155, SENDKEYS=156, 
		SET=157, SETATTR=158, SHARED=159, SINGLE=160, SPC=161, STATIC=162, STEP=163, 
		STOP=164, STRING=165, SUB=166, TAB=167, TEXT=168, THEN=169, TIME=170, 
		TO=171, TRUE=172, TYPE=173, TYPEOF=174, UNLOAD=175, UNLOCK=176, UNTIL=177, 
		VARIANT=178, VERSION=179, WEND=180, WHILE=181, WIDTH=182, WITH=183, WITHEVENTS=184, 
		WRITE=185, XOR=186, AMPERSAND=187, ASSIGN=188, DIV=189, INTDIV=190, EQ=191, 
		GEQ=192, GT=193, LEQ=194, LPAREN=195, LT=196, MINUS=197, MULT=198, NEQ=199, 
		PLUS=200, POW=201, RPAREN=202, L_SQUARE_BRACKET=203, R_SQUARE_BRACKET=204, 
		STRINGLITERAL=205, OCTLITERAL=206, HEXLITERAL=207, SHORTLITERAL=208, INTEGERLITERAL=209, 
		DOUBLELITERAL=210, DATELITERAL=211, JANUARY=212, FEBRUARY=213, MARCH=214, 
		APRIL=215, MAY=216, JUNE=217, JULY=218, AUGUST=219, SEPTEMBER=220, OCTOBER=221, 
		NOVEMBER=222, DECEMBER=223, JAN=224, FEB=225, MAR=226, APR=227, JUN=228, 
		JUL=229, AUG=230, SEP=231, OCT=232, NOV=233, DEC=234, LINE_CONTINUATION=235, 
		NEWLINE=236, REMCOMMENT=237, COMMENT=238, SINGLEQUOTE=239, COLON=240, 
		UNDERSCORE=241, WS=242, IDENTIFIER=243;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'@'", "'!'", "'#'", "'$'", "'%'", "';'", "','", "'.'", "ACCESS", 
		"ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", "APPEND", "AS", 
		"BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", "CALL", 
		"CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "COLLECTION", "CONST", "DATABASE", 
		"DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFDEC", 
		"DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR", "DEFVAR", 
		"DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", "EMPTY", 
		"END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
		"END_TYPE", "END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", 
		"EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", 
		"FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", 
		"IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", "LOAD", 
		"LOCK", "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", 
		"LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_CONST", "MACRO_IF", "MACRO_ELSEIF", 
		"MACRO_ELSE", "MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT", 
		"NEW", "NOT", "NOTHING", "NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN", 
		"OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", 
		"OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", 
		"PROPERTY_LET", "PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM", 
		"RANDOMIZE", "RAISEEVENT", "READ", "READ_WRITE", "REDIM", "REM", "RESET", 
		"RESUME", "RETURN", "RMDIR", "RSET", "SAVEPICTURE", "SAVESETTING", "SEEK", 
		"SELECT", "SENDKEYS", "SET", "SETATTR", "SHARED", "SINGLE", "SPC", "STATIC", 
		"STEP", "STOP", "STRING", "SUB", "TAB", "TEXT", "THEN", "TIME", "TO", 
		"TRUE", "TYPE", "TYPEOF", "UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION", 
		"WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS", "WRITE", "XOR", "'&'", 
		"':='", "'/'", "'\\'", "'='", "'>='", "'>'", "'<='", "'('", "'<'", "'-'", 
		"'*'", "'<>'", "'+'", "'^'", "')'", "'['", "']'", "STRINGLITERAL", "OCTLITERAL", 
		"HEXLITERAL", "SHORTLITERAL", "INTEGERLITERAL", "DOUBLELITERAL", "DATELITERAL", 
		"JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", 
		"SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER", "JAN", "FEB", "MAR", "APR", 
		"JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC", "LINE_CONTINUATION", 
		"NEWLINE", "REMCOMMENT", "COMMENT", "'''", "':'", "'_'", "WS", "IDENTIFIER"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleDeclarations = 6, 
		RULE_moduleOption = 7, RULE_moduleDeclarationsElement = 8, RULE_macroStmt = 9, 
		RULE_moduleBody = 10, RULE_moduleBodyElement = 11, RULE_attributeStmt = 12, 
		RULE_block = 13, RULE_blockStmt = 14, RULE_appactivateStmt = 15, RULE_beepStmt = 16, 
		RULE_chdirStmt = 17, RULE_chdriveStmt = 18, RULE_closeStmt = 19, RULE_constStmt = 20, 
		RULE_constSubStmt = 21, RULE_dateStmt = 22, RULE_declareStmt = 23, RULE_deftypeStmt = 24, 
		RULE_deleteSettingStmt = 25, RULE_doLoopStmt = 26, RULE_endStmt = 27, 
		RULE_enumerationStmt = 28, RULE_enumerationStmt_Constant = 29, RULE_eraseStmt = 30, 
		RULE_errorStmt = 31, RULE_eventStmt = 32, RULE_exitStmt = 33, RULE_filecopyStmt = 34, 
		RULE_forEachStmt = 35, RULE_forNextStmt = 36, RULE_functionStmt = 37, 
		RULE_getStmt = 38, RULE_goSubStmt = 39, RULE_goToStmt = 40, RULE_ifThenElseStmt = 41, 
		RULE_ifBlockStmt = 42, RULE_ifConditionStmt = 43, RULE_ifElseIfBlockStmt = 44, 
		RULE_ifElseBlockStmt = 45, RULE_implementsStmt = 46, RULE_inputStmt = 47, 
		RULE_killStmt = 48, RULE_letStmt = 49, RULE_lineInputStmt = 50, RULE_loadStmt = 51, 
		RULE_lockStmt = 52, RULE_lsetStmt = 53, RULE_macroConstStmt = 54, RULE_macroIfThenElseStmt = 55, 
		RULE_macroIfBlockStmt = 56, RULE_macroElseIfBlockStmt = 57, RULE_macroElseBlockStmt = 58, 
		RULE_midStmt = 59, RULE_mkdirStmt = 60, RULE_nameStmt = 61, RULE_onErrorStmt = 62, 
		RULE_onGoToStmt = 63, RULE_onGoSubStmt = 64, RULE_openStmt = 65, RULE_outputList = 66, 
		RULE_outputList_Expression = 67, RULE_printStmt = 68, RULE_propertyGetStmt = 69, 
		RULE_propertySetStmt = 70, RULE_propertyLetStmt = 71, RULE_putStmt = 72, 
		RULE_raiseEventStmt = 73, RULE_randomizeStmt = 74, RULE_redimStmt = 75, 
		RULE_redimSubStmt = 76, RULE_resetStmt = 77, RULE_resumeStmt = 78, RULE_returnStmt = 79, 
		RULE_rmdirStmt = 80, RULE_rsetStmt = 81, RULE_savepictureStmt = 82, RULE_saveSettingStmt = 83, 
		RULE_seekStmt = 84, RULE_selectCaseStmt = 85, RULE_sC_Selection = 86, 
		RULE_sC_Case = 87, RULE_sC_Cond = 88, RULE_sendkeysStmt = 89, RULE_setattrStmt = 90, 
		RULE_setStmt = 91, RULE_stopStmt = 92, RULE_subStmt = 93, RULE_timeStmt = 94, 
		RULE_typeStmt = 95, RULE_typeStmt_Element = 96, RULE_typeOfStmt = 97, 
		RULE_unloadStmt = 98, RULE_unlockStmt = 99, RULE_valueStmt = 100, RULE_variableStmt = 101, 
		RULE_variableListStmt = 102, RULE_variableSubStmt = 103, RULE_whileWendStmt = 104, 
		RULE_widthStmt = 105, RULE_withStmt = 106, RULE_writeStmt = 107, RULE_fileNumber = 108, 
		RULE_explicitCallStmt = 109, RULE_eCS_ProcedureCall = 110, RULE_eCS_MemberProcedureCall = 111, 
		RULE_implicitCallStmt_InBlock = 112, RULE_iCS_B_MemberProcedureCall = 113, 
		RULE_iCS_B_ProcedureCall = 114, RULE_implicitCallStmt_InStmt = 115, RULE_iCS_S_VariableOrProcedureCall = 116, 
		RULE_iCS_S_ProcedureOrArrayCall = 117, RULE_iCS_S_MembersCall = 118, RULE_iCS_S_MemberCall = 119, 
		RULE_iCS_S_DictionaryCall = 120, RULE_argsCall = 121, RULE_argCall = 122, 
		RULE_dictionaryCallStmt = 123, RULE_argList = 124, RULE_arg = 125, RULE_argDefaultValue = 126, 
		RULE_subscripts = 127, RULE_subscript = 128, RULE_ambiguousIdentifier = 129, 
		RULE_asTypeClause = 130, RULE_baseType = 131, RULE_certainIdentifier = 132, 
		RULE_comparisonOperator = 133, RULE_complexType = 134, RULE_fieldLength = 135, 
		RULE_letterrange = 136, RULE_lineLabel = 137, RULE_literal = 138, RULE_type = 139, 
		RULE_typeHint = 140, RULE_visibility = 141, RULE_ambiguousKeyword = 142, 
		RULE_remComment = 143, RULE_comment = 144, RULE_endOfLine = 145, RULE_endOfStatement = 146;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement", 
		"macroStmt", "moduleBody", "moduleBodyElement", "attributeStmt", "block", 
		"blockStmt", "appactivateStmt", "beepStmt", "chdirStmt", "chdriveStmt", 
		"closeStmt", "constStmt", "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt", 
		"deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant", 
		"eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", 
		"forNextStmt", "functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt", 
		"ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
		"implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
		"loadStmt", "lockStmt", "lsetStmt", "macroConstStmt", "macroIfThenElseStmt", 
		"macroIfBlockStmt", "macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt", 
		"mkdirStmt", "nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", 
		"outputList", "outputList_Expression", "printStmt", "propertyGetStmt", 
		"propertySetStmt", "propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt", 
		"redimStmt", "redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", 
		"rmdirStmt", "rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt", 
		"selectCaseStmt", "sC_Selection", "sC_Case", "sC_Cond", "sendkeysStmt", 
		"setattrStmt", "setStmt", "stopStmt", "subStmt", "timeStmt", "typeStmt", 
		"typeStmt_Element", "typeOfStmt", "unloadStmt", "unlockStmt", "valueStmt", 
		"variableStmt", "variableListStmt", "variableSubStmt", "whileWendStmt", 
		"widthStmt", "withStmt", "writeStmt", "fileNumber", "explicitCallStmt", 
		"eCS_ProcedureCall", "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
		"iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", "implicitCallStmt_InStmt", 
		"iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_MembersCall", 
		"iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", "argCall", "dictionaryCallStmt", 
		"argList", "arg", "argDefaultValue", "subscripts", "subscript", "ambiguousIdentifier", 
		"asTypeClause", "baseType", "certainIdentifier", "comparisonOperator", 
		"complexType", "fieldLength", "letterrange", "lineLabel", "literal", "type", 
		"typeHint", "visibility", "ambiguousKeyword", "remComment", "comment", 
		"endOfLine", "endOfStatement"
	};

	public override string GrammarFileName { get { return "VBA.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; module();
			State = 295; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleDeclarationsContext moduleDeclarations() {
			return GetRuleContext<ModuleDeclarationsContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 297; Match(WS);
				}
				break;
			}
			State = 300; endOfStatement();
			State = 304;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 301; moduleHeader();
				State = 302; endOfStatement();
				}
				break;
			}
			State = 307;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 306; moduleConfig();
				}
				break;
			}
			State = 309; endOfStatement();
			State = 311;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 310; moduleAttributes();
				}
				break;
			}
			State = 313; endOfStatement();
			State = 315;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 314; moduleDeclarations();
				}
				break;
			}
			State = 317; endOfStatement();
			State = 319;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 318; moduleBody();
				}
				break;
			}
			State = 321; endOfStatement();
			State = 323;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 322; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; Match(VERSION);
			State = 326; Match(WS);
			State = 327; Match(DOUBLELITERAL);
			State = 328; Match(WS);
			State = 329; Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; Match(BEGIN);
			State = 332; endOfStatement();
			State = 334;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 333; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 336;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 338; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; ambiguousIdentifier();
			State = 342;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 341; Match(WS);
				}
			}

			State = 344; Match(EQ);
			State = 346;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 345; Match(WS);
				}
			}

			State = 348; literal();
			State = 349; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 351; attributeStmt();
					State = 352; endOfStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 356;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; moduleDeclarationsElement();
			State = 364;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 359; endOfStatement();
					State = 360; moduleDeclarationsElement();
					}
					} 
				}
				State = 366;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			State = 367; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public ITerminalNode SHORTLITERAL() { return GetToken(VBAParser.SHORTLITERAL, 0); }
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleOption);
		int _la;
		try {
			State = 377;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 369; Match(OPTION_BASE);
				State = 370; Match(WS);
				State = 371; Match(SHORTLITERAL);
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 372; Match(OPTION_COMPARE);
				State = 373; Match(WS);
				State = 374;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 375; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 376; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public MacroStmtContext macroStmt() {
			return GetRuleContext<MacroStmtContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleDeclarationsElement);
		try {
			State = 388;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379; declareStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380; enumerationStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 381; eventStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 382; constStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 383; implementsStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 384; variableStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 385; moduleOption();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 386; typeStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 387; macroStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroStmtContext : ParserRuleContext {
		public MacroConstStmtContext macroConstStmt() {
			return GetRuleContext<MacroConstStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public MacroStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroStmtContext macroStmt() {
		MacroStmtContext _localctx = new MacroStmtContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_macroStmt);
		try {
			State = 392;
			switch (_input.La(1)) {
			case MACRO_CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390; macroConstStmt();
				}
				break;
			case MACRO_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391; macroIfThenElseStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; moduleBodyElement();
			State = 400;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 395; endOfStatement();
					State = 396; moduleBodyElement();
					}
					} 
				}
				State = 402;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			State = 403; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public MacroStmtContext macroStmt() {
			return GetRuleContext<MacroStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_moduleBodyElement);
		try {
			State = 411;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405; functionStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; propertyGetStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 407; propertySetStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 408; propertyLetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 409; subStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 410; macroStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<LiteralContext> literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; Match(ATTRIBUTE);
			State = 414; Match(WS);
			State = 415; implicitCallStmt_InStmt();
			State = 417;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 416; Match(WS);
				}
			}

			State = 419; Match(EQ);
			State = 421;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 420; Match(WS);
				}
			}

			State = 423; literal();
			State = 434;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 425;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 424; Match(WS);
						}
					}

					State = 427; Match(T__1);
					State = 429;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 428; Match(WS);
						}
					}

					State = 431; literal();
					}
					} 
				}
				State = 436;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; blockStmt();
			State = 443;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 438; endOfStatement();
					State = 439; blockStmt();
					}
					} 
				}
				State = 445;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			State = 446; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public LoadStmtContext loadStmt() {
			return GetRuleContext<LoadStmtContext>(0);
		}
		public ChdriveStmtContext chdriveStmt() {
			return GetRuleContext<ChdriveStmtContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public FilecopyStmtContext filecopyStmt() {
			return GetRuleContext<FilecopyStmtContext>(0);
		}
		public RmdirStmtContext rmdirStmt() {
			return GetRuleContext<RmdirStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public ChdirStmtContext chdirStmt() {
			return GetRuleContext<ChdirStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public RandomizeStmtContext randomizeStmt() {
			return GetRuleContext<RandomizeStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public MkdirStmtContext mkdirStmt() {
			return GetRuleContext<MkdirStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public SavepictureStmtContext savepictureStmt() {
			return GetRuleContext<SavepictureStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public IfThenElseStmtContext ifThenElseStmt() {
			return GetRuleContext<IfThenElseStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public SetattrStmtContext setattrStmt() {
			return GetRuleContext<SetattrStmtContext>(0);
		}
		public SaveSettingStmtContext saveSettingStmt() {
			return GetRuleContext<SaveSettingStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public TimeStmtContext timeStmt() {
			return GetRuleContext<TimeStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public SendkeysStmtContext sendkeysStmt() {
			return GetRuleContext<SendkeysStmtContext>(0);
		}
		public DeleteSettingStmtContext deleteSettingStmt() {
			return GetRuleContext<DeleteSettingStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public DateStmtContext dateStmt() {
			return GetRuleContext<DateStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public KillStmtContext killStmt() {
			return GetRuleContext<KillStmtContext>(0);
		}
		public DeftypeStmtContext deftypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public LineLabelContext lineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public BeepStmtContext beepStmt() {
			return GetRuleContext<BeepStmtContext>(0);
		}
		public AppactivateStmtContext appactivateStmt() {
			return GetRuleContext<AppactivateStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public MacroStmtContext macroStmt() {
			return GetRuleContext<MacroStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public UnloadStmtContext unloadStmt() {
			return GetRuleContext<UnloadStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_blockStmt);
		try {
			State = 515;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 448; lineLabel();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 449; appactivateStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 450; attributeStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 451; beepStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 452; chdirStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 453; chdriveStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 454; closeStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 455; constStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 456; dateStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 457; deleteSettingStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 458; deftypeStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 459; doLoopStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 460; endStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 461; eraseStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 462; errorStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 463; exitStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 464; explicitCallStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 465; filecopyStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 466; forEachStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 467; forNextStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 468; getStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 469; goSubStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 470; goToStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 471; ifThenElseStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 472; implementsStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 473; inputStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 474; killStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 475; letStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 476; lineInputStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 477; loadStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 478; lockStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 479; lsetStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 480; macroStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 481; midStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 482; mkdirStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 483; nameStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 484; onErrorStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 485; onGoToStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 486; onGoSubStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 487; openStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 488; printStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 489; putStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 490; raiseEventStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 491; randomizeStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 492; redimStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 493; resetStmt();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 494; resumeStmt();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 495; returnStmt();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 496; rmdirStmt();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 497; rsetStmt();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 498; savepictureStmt();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 499; saveSettingStmt();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 500; seekStmt();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 501; selectCaseStmt();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 502; sendkeysStmt();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 503; setattrStmt();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 504; setStmt();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 505; stopStmt();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 506; timeStmt();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 507; unloadStmt();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 508; unlockStmt();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 509; variableStmt();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 510; whileWendStmt();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 511; widthStmt();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 512; withStmt();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 513; writeStmt();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 514; implicitCallStmt_InBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppactivateStmtContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public AppactivateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appactivateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAppactivateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAppactivateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppactivateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppactivateStmtContext appactivateStmt() {
		AppactivateStmtContext _localctx = new AppactivateStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_appactivateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517; Match(APPACTIVATE);
			State = 518; Match(WS);
			State = 519; valueStmt(0);
			State = 528;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 521;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 520; Match(WS);
					}
				}

				State = 523; Match(T__1);
				State = 525;
				switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					State = 524; Match(WS);
					}
					break;
				}
				State = 527; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepStmtContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public BeepStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBeepStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBeepStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeepStmtContext beepStmt() {
		BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_beepStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdirStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ChdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterChdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitChdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdirStmtContext chdirStmt() {
		ChdirStmtContext _localctx = new ChdirStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_chdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532; Match(CHDIR);
			State = 533; Match(WS);
			State = 534; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdriveStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ChdriveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdriveStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterChdriveStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitChdriveStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdriveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdriveStmtContext chdriveStmt() {
		ChdriveStmtContext _localctx = new ChdriveStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_chdriveStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536; Match(CHDRIVE);
			State = 537; Match(WS);
			State = 538; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public IReadOnlyList<FileNumberContext> fileNumber() {
			return GetRuleContexts<FileNumberContext>();
		}
		public FileNumberContext fileNumber(int i) {
			return GetRuleContext<FileNumberContext>(i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 540; Match(CLOSE);
			State = 556;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 541; Match(WS);
				State = 542; fileNumber();
				State = 553;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 544;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 543; Match(WS);
							}
						}

						State = 546; Match(T__1);
						State = 548;
						switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
						case 1:
							{
							State = 547; Match(WS);
							}
							break;
						}
						State = 550; fileNumber();
						}
						} 
					}
					State = 555;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 558; visibility();
				State = 559; Match(WS);
				}
			}

			State = 563; Match(CONST);
			State = 564; Match(WS);
			State = 565; constSubStmt();
			State = 576;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 567;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 566; Match(WS);
						}
					}

					State = 569; Match(T__1);
					State = 571;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 570; Match(WS);
						}
					}

					State = 573; constSubStmt();
					}
					} 
				}
				State = 578;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579; ambiguousIdentifier();
			State = 581;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la==AMPERSAND) {
				{
				State = 580; typeHint();
				}
			}

			State = 585;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 583; Match(WS);
				State = 584; asTypeClause();
				}
				break;
			}
			State = 588;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 587; Match(WS);
				}
			}

			State = 590; Match(EQ);
			State = 592;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 591; Match(WS);
				}
				break;
			}
			State = 594; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public DateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateStmtContext dateStmt() {
		DateStmtContext _localctx = new DateStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_dateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596; Match(DATE);
			State = 598;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 597; Match(WS);
				}
			}

			State = 600; Match(EQ);
			State = 602;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 601; Match(WS);
				}
				break;
			}
			State = 604; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<TypeHintContext> typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 606; visibility();
				State = 607; Match(WS);
				}
			}

			State = 611; Match(DECLARE);
			State = 612; Match(WS);
			State = 615;
			_la = _input.La(1);
			if (_la==PTRSAFE) {
				{
				State = 613; Match(PTRSAFE);
				State = 614; Match(WS);
				}
			}

			State = 622;
			switch (_input.La(1)) {
			case FUNCTION:
				{
				{
				State = 617; Match(FUNCTION);
				State = 619;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la==AMPERSAND) {
					{
					State = 618; typeHint();
					}
				}

				}
				}
				break;
			case SUB:
				{
				State = 621; Match(SUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 624; Match(WS);
			State = 625; ambiguousIdentifier();
			State = 627;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la==AMPERSAND) {
				{
				State = 626; typeHint();
				}
			}

			State = 629; Match(WS);
			State = 630; Match(LIB);
			State = 631; Match(WS);
			State = 632; Match(STRINGLITERAL);
			State = 637;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 633; Match(WS);
				State = 634; Match(ALIAS);
				State = 635; Match(WS);
				State = 636; Match(STRINGLITERAL);
				}
				break;
			}
			State = 643;
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 640;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 639; Match(WS);
					}
				}

				State = 642; argList();
				}
				break;
			}
			State = 647;
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 645; Match(WS);
				State = 646; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public IReadOnlyList<LetterrangeContext> letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext deftypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 650; Match(WS);
			State = 651; letterrange();
			State = 662;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 653;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 652; Match(WS);
						}
					}

					State = 655; Match(T__1);
					State = 657;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 656; Match(WS);
						}
					}

					State = 659; letterrange();
					}
					} 
				}
				State = 664;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,52,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSettingStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSettingStmtContext deleteSettingStmt() {
		DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_deleteSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665; Match(DELETESETTING);
			State = 666; Match(WS);
			State = 667; valueStmt(0);
			State = 669;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 668; Match(WS);
				}
			}

			State = 671; Match(T__1);
			State = 673;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 672; Match(WS);
				}
				break;
			}
			State = 675; valueStmt(0);
			State = 684;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 677;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 676; Match(WS);
					}
				}

				State = 679; Match(T__1);
				State = 681;
				switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
				case 1:
					{
					State = 680; Match(WS);
					}
					break;
				}
				State = 683; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_doLoopStmt);
		int _la;
		try {
			State = 713;
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 686; Match(DO);
				State = 687; endOfStatement();
				State = 689;
				switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					State = 688; block();
					}
					break;
				}
				State = 691; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 693; Match(DO);
				State = 694; Match(WS);
				State = 695;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 696; Match(WS);
				State = 697; valueStmt(0);
				State = 698; endOfStatement();
				State = 700;
				switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					State = 699; block();
					}
					break;
				}
				State = 702; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 704; Match(DO);
				State = 705; endOfStatement();
				State = 706; block();
				State = 707; Match(LOOP);
				State = 708; Match(WS);
				State = 709;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 710; Match(WS);
				State = 711; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 717; visibility();
				State = 718; Match(WS);
				}
			}

			State = 722; Match(ENUM);
			State = 723; Match(WS);
			State = 724; ambiguousIdentifier();
			State = 725; endOfStatement();
			State = 729;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 726; enumerationStmt_Constant();
				}
				}
				State = 731;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 732; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; ambiguousIdentifier();
			State = 743;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				State = 736;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 735; Match(WS);
					}
				}

				State = 738; Match(EQ);
				State = 740;
				switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					State = 739; Match(WS);
					}
					break;
				}
				State = 742; valueStmt(0);
				}
				break;
			}
			State = 745; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_eraseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747; Match(ERASE);
			State = 748; Match(WS);
			State = 749; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751; Match(ERROR);
			State = 752; Match(WS);
			State = 753; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 755; visibility();
				State = 756; Match(WS);
				}
			}

			State = 760; Match(EVENT);
			State = 761; Match(WS);
			State = 762; ambiguousIdentifier();
			State = 764;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 763; Match(WS);
				}
			}

			State = 766; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			_la = _input.La(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (EXIT_DO - 69)) | (1L << (EXIT_FOR - 69)) | (1L << (EXIT_FUNCTION - 69)) | (1L << (EXIT_PROPERTY - 69)) | (1L << (EXIT_SUB - 69)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilecopyStmtContext : ParserRuleContext {
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filecopyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFilecopyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFilecopyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilecopyStmtContext filecopyStmt() {
		FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_filecopyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770; Match(FILECOPY);
			State = 771; Match(WS);
			State = 772; valueStmt(0);
			State = 774;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 773; Match(WS);
				}
			}

			State = 776; Match(T__1);
			State = 778;
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 777; Match(WS);
				}
				break;
			}
			State = 780; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782; Match(FOR);
			State = 783; Match(WS);
			State = 784; Match(EACH);
			State = 785; Match(WS);
			State = 786; ambiguousIdentifier();
			State = 788;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la==AMPERSAND) {
				{
				State = 787; typeHint();
				}
			}

			State = 790; Match(WS);
			State = 791; Match(IN);
			State = 792; Match(WS);
			State = 793; valueStmt(0);
			State = 794; endOfStatement();
			State = 796;
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 795; block();
				}
				break;
			}
			State = 798; Match(NEXT);
			State = 801;
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 799; Match(WS);
				State = 800; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803; Match(FOR);
			State = 804; Match(WS);
			State = 805; ambiguousIdentifier();
			State = 807;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la==AMPERSAND) {
				{
				State = 806; typeHint();
				}
			}

			State = 811;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 809; Match(WS);
				State = 810; asTypeClause();
				}
				break;
			}
			State = 814;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 813; Match(WS);
				}
			}

			State = 816; Match(EQ);
			State = 818;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 817; Match(WS);
				}
				break;
			}
			State = 820; valueStmt(0);
			State = 821; Match(WS);
			State = 822; Match(TO);
			State = 823; Match(WS);
			State = 824; valueStmt(0);
			State = 829;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				State = 825; Match(WS);
				State = 826; Match(STEP);
				State = 827; Match(WS);
				State = 828; valueStmt(0);
				}
				break;
			}
			State = 831; endOfStatement();
			State = 833;
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 832; block();
				}
				break;
			}
			State = 835; Match(NEXT);
			State = 838;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 836; Match(WS);
				State = 837; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 840; visibility();
				State = 841; Match(WS);
				}
			}

			State = 847;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 845; Match(STATIC);
				State = 846; Match(WS);
				}
			}

			State = 849; Match(FUNCTION);
			State = 851;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 850; Match(WS);
				}
			}

			State = 853; ambiguousIdentifier();
			State = 855;
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 854; typeHint();
				}
				break;
			}
			State = 861;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 858;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 857; Match(WS);
					}
				}

				State = 860; argList();
				}
				break;
			}
			State = 867;
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 864;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 863; Match(WS);
					}
				}

				State = 866; asTypeClause();
				}
				break;
			}
			State = 869; endOfStatement();
			State = 871;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==WS || _la==IDENTIFIER) {
				{
				State = 870; block();
				}
			}

			State = 873; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 875; Match(GET);
			State = 876; Match(WS);
			State = 877; fileNumber();
			State = 879;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 878; Match(WS);
				}
			}

			State = 881; Match(T__1);
			State = 883;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 882; Match(WS);
				}
				break;
			}
			State = 886;
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 885; valueStmt(0);
				}
				break;
			}
			State = 889;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 888; Match(WS);
				}
			}

			State = 891; Match(T__1);
			State = 893;
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 892; Match(WS);
				}
				break;
			}
			State = 895; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897; Match(GOSUB);
			State = 898; Match(WS);
			State = 899; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901; Match(GOTO);
			State = 902; Match(WS);
			State = 903; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStmtContext : ParserRuleContext {
		public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStmt; } }
	 
		public IfThenElseStmtContext() { }
		public virtual void CopyFrom(IfThenElseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockIfThenElseContext : IfThenElseStmtContext {
		public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i) {
			return GetRuleContext<IfElseIfBlockStmtContext>(i);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<IfElseIfBlockStmtContext> ifElseIfBlockStmt() {
			return GetRuleContexts<IfElseIfBlockStmtContext>();
		}
		public IfBlockStmtContext ifBlockStmt() {
			return GetRuleContext<IfBlockStmtContext>(0);
		}
		public IfElseBlockStmtContext ifElseBlockStmt() {
			return GetRuleContext<IfElseBlockStmtContext>(0);
		}
		public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineIfThenElseContext : IfThenElseStmtContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStmtContext ifThenElseStmt() {
		IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_ifThenElseStmt);
		int _la;
		try {
			State = 930;
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				_localctx = new InlineIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 905; Match(IF);
				State = 906; Match(WS);
				State = 907; ifConditionStmt();
				State = 908; Match(WS);
				State = 909; Match(THEN);
				State = 910; Match(WS);
				State = 911; blockStmt();
				State = 916;
				switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
				case 1:
					{
					State = 912; Match(WS);
					State = 913; Match(ELSE);
					State = 914; Match(WS);
					State = 915; blockStmt();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BlockIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 918; ifBlockStmt();
				State = 922;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 919; ifElseIfBlockStmt();
					}
					}
					State = 924;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 926;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 925; ifElseBlockStmt();
					}
				}

				State = 928; Match(END_IF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStmtContext ifBlockStmt() {
		IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_ifBlockStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 932; Match(IF);
			State = 933; Match(WS);
			State = 934; ifConditionStmt();
			State = 935; Match(WS);
			State = 936; Match(THEN);
			State = 937; endOfStatement();
			State = 939;
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 938; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfConditionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfConditionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionStmtContext ifConditionStmt() {
		IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_ifConditionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfBlockStmtContext ifElseIfBlockStmt() {
		IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_ifElseIfBlockStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 943; Match(ELSEIF);
			State = 944; Match(WS);
			State = 945; ifConditionStmt();
			State = 946; Match(WS);
			State = 947; Match(THEN);
			State = 948; endOfStatement();
			State = 950;
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 949; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockStmtContext ifElseBlockStmt() {
		IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_ifElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952; Match(ELSE);
			State = 953; endOfStatement();
			State = 955;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==WS || _la==IDENTIFIER) {
				{
				State = 954; block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957; Match(IMPLEMENTS);
			State = 958; Match(WS);
			State = 959; ambiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 961; Match(INPUT);
			State = 962; Match(WS);
			State = 963; fileNumber();
			State = 972;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 965;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 964; Match(WS);
						}
					}

					State = 967; Match(T__1);
					State = 969;
					switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
					case 1:
						{
						State = 968; Match(WS);
						}
						break;
					}
					State = 971; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 974;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,103,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public KillStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterKillStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitKillStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStmtContext killStmt() {
		KillStmtContext _localctx = new KillStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_killStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 976; Match(KILL);
			State = 977; Match(WS);
			State = 978; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 982;
			switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				State = 980; Match(LET);
				State = 981; Match(WS);
				}
				break;
			}
			State = 984; implicitCallStmt_InStmt();
			State = 986;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 985; Match(WS);
				}
			}

			State = 988; Match(EQ);
			State = 990;
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				State = 989; Match(WS);
				}
				break;
			}
			State = 992; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 994; Match(LINE_INPUT);
			State = 995; Match(WS);
			State = 996; fileNumber();
			State = 998;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 997; Match(WS);
				}
			}

			State = 1000; Match(T__1);
			State = 1002;
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				State = 1001; Match(WS);
				}
				break;
			}
			State = 1004; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public LoadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLoadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLoadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStmtContext loadStmt() {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_loadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1006; Match(LOAD);
			State = 1007; Match(WS);
			State = 1008; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1010; Match(LOCK);
			State = 1011; Match(WS);
			State = 1012; valueStmt(0);
			State = 1027;
			switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				State = 1014;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1013; Match(WS);
					}
				}

				State = 1016; Match(T__1);
				State = 1018;
				switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
				case 1:
					{
					State = 1017; Match(WS);
					}
					break;
				}
				State = 1020; valueStmt(0);
				State = 1025;
				switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					State = 1021; Match(WS);
					State = 1022; Match(TO);
					State = 1023; Match(WS);
					State = 1024; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1029; Match(LSET);
			State = 1030; Match(WS);
			State = 1031; implicitCallStmt_InStmt();
			State = 1033;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1032; Match(WS);
				}
			}

			State = 1035; Match(EQ);
			State = 1037;
			switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
			case 1:
				{
				State = 1036; Match(WS);
				}
				break;
			}
			State = 1039; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroConstStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_CONST() { return GetToken(VBAParser.MACRO_CONST, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public MacroConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroConstStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroConstStmtContext macroConstStmt() {
		MacroConstStmtContext _localctx = new MacroConstStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_macroConstStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1041; Match(MACRO_CONST);
			State = 1043;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1042; Match(WS);
				}
			}

			State = 1045; ambiguousIdentifier();
			State = 1047;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1046; Match(WS);
				}
			}

			State = 1049; Match(EQ);
			State = 1051;
			switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				State = 1050; Match(WS);
				}
				break;
			}
			State = 1053; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfThenElseStmtContext : ParserRuleContext {
		public IReadOnlyList<MacroElseIfBlockStmtContext> macroElseIfBlockStmt() {
			return GetRuleContexts<MacroElseIfBlockStmtContext>();
		}
		public ITerminalNode MACRO_END_IF() { return GetToken(VBAParser.MACRO_END_IF, 0); }
		public MacroIfBlockStmtContext macroIfBlockStmt() {
			return GetRuleContext<MacroIfBlockStmtContext>(0);
		}
		public MacroElseIfBlockStmtContext macroElseIfBlockStmt(int i) {
			return GetRuleContext<MacroElseIfBlockStmtContext>(i);
		}
		public MacroElseBlockStmtContext macroElseBlockStmt() {
			return GetRuleContext<MacroElseBlockStmtContext>(0);
		}
		public MacroIfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfThenElseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroIfThenElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroIfThenElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfThenElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfThenElseStmtContext macroIfThenElseStmt() {
		MacroIfThenElseStmtContext _localctx = new MacroIfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_macroIfThenElseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1055; macroIfBlockStmt();
			State = 1059;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MACRO_ELSEIF) {
				{
				{
				State = 1056; macroElseIfBlockStmt();
				}
				}
				State = 1061;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1063;
			_la = _input.La(1);
			if (_la==MACRO_ELSE) {
				{
				State = 1062; macroElseBlockStmt();
				}
			}

			State = 1065; Match(MACRO_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ModuleBodyContext moduleBody(int i) {
			return GetRuleContext<ModuleBodyContext>(i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ModuleDeclarationsContext moduleDeclarations(int i) {
			return GetRuleContext<ModuleDeclarationsContext>(i);
		}
		public ITerminalNode MACRO_IF() { return GetToken(VBAParser.MACRO_IF, 0); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public IReadOnlyList<ModuleBodyContext> moduleBody() {
			return GetRuleContexts<ModuleBodyContext>();
		}
		public IReadOnlyList<ModuleDeclarationsContext> moduleDeclarations() {
			return GetRuleContexts<ModuleDeclarationsContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public IReadOnlyList<BlockContext> block() {
			return GetRuleContexts<BlockContext>();
		}
		public MacroIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfBlockStmtContext macroIfBlockStmt() {
		MacroIfBlockStmtContext _localctx = new MacroIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_macroIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067; Match(MACRO_IF);
			State = 1069;
			switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				State = 1068; Match(WS);
				}
				break;
			}
			State = 1071; ifConditionStmt();
			State = 1072; Match(WS);
			State = 1073; Match(THEN);
			State = 1074; endOfStatement();
			State = 1080;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==WS || _la==IDENTIFIER) {
				{
				State = 1078;
				switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
				case 1:
					{
					State = 1075; moduleDeclarations();
					}
					break;

				case 2:
					{
					State = 1076; moduleBody();
					}
					break;

				case 3:
					{
					State = 1077; block();
					}
					break;
				}
				}
				State = 1082;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ModuleBodyContext moduleBody(int i) {
			return GetRuleContext<ModuleBodyContext>(i);
		}
		public ITerminalNode MACRO_ELSEIF() { return GetToken(VBAParser.MACRO_ELSEIF, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ModuleDeclarationsContext moduleDeclarations(int i) {
			return GetRuleContext<ModuleDeclarationsContext>(i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public IReadOnlyList<ModuleBodyContext> moduleBody() {
			return GetRuleContexts<ModuleBodyContext>();
		}
		public IReadOnlyList<ModuleDeclarationsContext> moduleDeclarations() {
			return GetRuleContexts<ModuleDeclarationsContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public IReadOnlyList<BlockContext> block() {
			return GetRuleContexts<BlockContext>();
		}
		public MacroElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseIfBlockStmtContext macroElseIfBlockStmt() {
		MacroElseIfBlockStmtContext _localctx = new MacroElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_macroElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1083; Match(MACRO_ELSEIF);
			State = 1085;
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 1084; Match(WS);
				}
				break;
			}
			State = 1087; ifConditionStmt();
			State = 1088; Match(WS);
			State = 1089; Match(THEN);
			State = 1090; endOfStatement();
			State = 1096;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==WS || _la==IDENTIFIER) {
				{
				State = 1094;
				switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
				case 1:
					{
					State = 1091; moduleDeclarations();
					}
					break;

				case 2:
					{
					State = 1092; moduleBody();
					}
					break;

				case 3:
					{
					State = 1093; block();
					}
					break;
				}
				}
				State = 1098;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseBlockStmtContext : ParserRuleContext {
		public ModuleBodyContext moduleBody(int i) {
			return GetRuleContext<ModuleBodyContext>(i);
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode MACRO_ELSE() { return GetToken(VBAParser.MACRO_ELSE, 0); }
		public ModuleDeclarationsContext moduleDeclarations(int i) {
			return GetRuleContext<ModuleDeclarationsContext>(i);
		}
		public IReadOnlyList<ModuleBodyContext> moduleBody() {
			return GetRuleContexts<ModuleBodyContext>();
		}
		public IReadOnlyList<ModuleDeclarationsContext> moduleDeclarations() {
			return GetRuleContexts<ModuleDeclarationsContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public IReadOnlyList<BlockContext> block() {
			return GetRuleContexts<BlockContext>();
		}
		public MacroElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseBlockStmtContext macroElseBlockStmt() {
		MacroElseBlockStmtContext _localctx = new MacroElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_macroElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099; Match(MACRO_ELSE);
			State = 1100; endOfStatement();
			State = 1106;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==WS || _la==IDENTIFIER) {
				{
				State = 1104;
				switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
				case 1:
					{
					State = 1101; moduleDeclarations();
					}
					break;

				case 2:
					{
					State = 1102; moduleBody();
					}
					break;

				case 3:
					{
					State = 1103; block();
					}
					break;
				}
				}
				State = 1108;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109; Match(MID);
			State = 1111;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1110; Match(WS);
				}
			}

			State = 1113; Match(LPAREN);
			State = 1115;
			switch ( Interpreter.AdaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				State = 1114; Match(WS);
				}
				break;
			}
			State = 1117; argsCall();
			State = 1119;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1118; Match(WS);
				}
			}

			State = 1121; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MkdirStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public MkdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mkdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMkdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMkdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MkdirStmtContext mkdirStmt() {
		MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_mkdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1123; Match(MKDIR);
			State = 1124; Match(WS);
			State = 1125; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1127; Match(NAME);
			State = 1128; Match(WS);
			State = 1129; valueStmt(0);
			State = 1130; Match(WS);
			State = 1131; Match(AS);
			State = 1132; Match(WS);
			State = 1133; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParser.ON_LOCAL_ERROR, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1135;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1136; Match(WS);
			State = 1143;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1137; Match(GOTO);
				State = 1138; Match(WS);
				State = 1139; valueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 1140; Match(RESUME);
				State = 1141; Match(WS);
				State = 1142; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1145; Match(ON);
			State = 1146; Match(WS);
			State = 1147; valueStmt(0);
			State = 1148; Match(WS);
			State = 1149; Match(GOTO);
			State = 1150; Match(WS);
			State = 1151; valueStmt(0);
			State = 1162;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,134,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1153;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1152; Match(WS);
						}
					}

					State = 1155; Match(T__1);
					State = 1157;
					switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
					case 1:
						{
						State = 1156; Match(WS);
						}
						break;
					}
					State = 1159; valueStmt(0);
					}
					} 
				}
				State = 1164;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,134,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1165; Match(ON);
			State = 1166; Match(WS);
			State = 1167; valueStmt(0);
			State = 1168; Match(WS);
			State = 1169; Match(GOSUB);
			State = 1170; Match(WS);
			State = 1171; valueStmt(0);
			State = 1182;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,137,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1173;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1172; Match(WS);
						}
					}

					State = 1175; Match(T__1);
					State = 1177;
					switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
					case 1:
						{
						State = 1176; Match(WS);
						}
						break;
					}
					State = 1179; valueStmt(0);
					}
					} 
				}
				State = 1184;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,137,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1185; Match(OPEN);
			State = 1186; Match(WS);
			State = 1187; valueStmt(0);
			State = 1188; Match(WS);
			State = 1189; Match(FOR);
			State = 1190; Match(WS);
			State = 1191;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (INPUT - 87)) | (1L << (OUTPUT - 87)) | (1L << (RANDOM - 87)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1196;
			switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				State = 1192; Match(WS);
				State = 1193; Match(ACCESS);
				State = 1194; Match(WS);
				State = 1195;
				_la = _input.La(1);
				if ( !(((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (READ - 143)) | (1L << (READ_WRITE - 143)) | (1L << (WRITE - 143)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1200;
			switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
			case 1:
				{
				State = 1198; Match(WS);
				State = 1199;
				_la = _input.La(1);
				if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (LOCK_READ - 100)) | (1L << (LOCK_WRITE - 100)) | (1L << (LOCK_READ_WRITE - 100)) | (1L << (SHARED - 100)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1202; Match(WS);
			State = 1203; Match(AS);
			State = 1204; Match(WS);
			State = 1205; fileNumber();
			State = 1216;
			switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				State = 1206; Match(WS);
				State = 1207; Match(LEN);
				State = 1209;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1208; Match(WS);
					}
				}

				State = 1211; Match(EQ);
				State = 1213;
				switch ( Interpreter.AdaptivePredict(_input,141,_ctx) ) {
				case 1:
					{
					State = 1212; Match(WS);
					}
					break;
				}
				State = 1215; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1251;
			switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1218; outputList_Expression();
				State = 1231;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,146,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1220;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1219; Match(WS);
							}
						}

						State = 1222;
						_la = _input.La(1);
						if ( !(_la==T__2 || _la==T__1) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1224;
						switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
						case 1:
							{
							State = 1223; Match(WS);
							}
							break;
						}
						State = 1227;
						switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
						case 1:
							{
							State = 1226; outputList_Expression();
							}
							break;
						}
						}
						} 
					}
					State = 1233;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,146,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1235;
				switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
				case 1:
					{
					State = 1234; outputList_Expression();
					}
					break;
				}
				State = 1247;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1238;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1237; Match(WS);
							}
						}

						State = 1240;
						_la = _input.La(1);
						if ( !(_la==T__2 || _la==T__1) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1242;
						switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
						case 1:
							{
							State = 1241; Match(WS);
							}
							break;
						}
						State = 1245;
						switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
						case 1:
							{
							State = 1244; outputList_Expression();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1249;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,151,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_outputList_Expression);
		int _la;
		try {
			State = 1270;
			switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1253; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1254;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1268;
				switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					State = 1256;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1255; Match(WS);
						}
					}

					State = 1258; Match(LPAREN);
					State = 1260;
					switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
					case 1:
						{
						State = 1259; Match(WS);
						}
						break;
					}
					State = 1262; argsCall();
					State = 1264;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1263; Match(WS);
						}
					}

					State = 1266; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1272; Match(PRINT);
			State = 1273; Match(WS);
			State = 1274; fileNumber();
			State = 1276;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1275; Match(WS);
				}
			}

			State = 1278; Match(T__1);
			State = 1283;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				State = 1280;
				switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
				case 1:
					{
					State = 1279; Match(WS);
					}
					break;
				}
				State = 1282; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1288;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1285; visibility();
				State = 1286; Match(WS);
				}
			}

			State = 1292;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1290; Match(STATIC);
				State = 1291; Match(WS);
				}
			}

			State = 1294; Match(PROPERTY_GET);
			State = 1295; Match(WS);
			State = 1296; ambiguousIdentifier();
			State = 1298;
			switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				State = 1297; typeHint();
				}
				break;
			}
			State = 1304;
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				State = 1301;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1300; Match(WS);
					}
				}

				State = 1303; argList();
				}
				break;
			}
			State = 1308;
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				State = 1306; Match(WS);
				State = 1307; asTypeClause();
				}
				break;
			}
			State = 1310; endOfStatement();
			State = 1312;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==WS || _la==IDENTIFIER) {
				{
				State = 1311; block();
				}
			}

			State = 1314; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1319;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1316; visibility();
				State = 1317; Match(WS);
				}
			}

			State = 1323;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1321; Match(STATIC);
				State = 1322; Match(WS);
				}
			}

			State = 1325; Match(PROPERTY_SET);
			State = 1326; Match(WS);
			State = 1327; ambiguousIdentifier();
			State = 1332;
			switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				State = 1329;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1328; Match(WS);
					}
				}

				State = 1331; argList();
				}
				break;
			}
			State = 1334; endOfStatement();
			State = 1336;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==WS || _la==IDENTIFIER) {
				{
				State = 1335; block();
				}
			}

			State = 1338; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1343;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1340; visibility();
				State = 1341; Match(WS);
				}
			}

			State = 1347;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1345; Match(STATIC);
				State = 1346; Match(WS);
				}
			}

			State = 1349; Match(PROPERTY_LET);
			State = 1350; Match(WS);
			State = 1351; ambiguousIdentifier();
			State = 1356;
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 1353;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1352; Match(WS);
					}
				}

				State = 1355; argList();
				}
				break;
			}
			State = 1358; endOfStatement();
			State = 1360;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==WS || _la==IDENTIFIER) {
				{
				State = 1359; block();
				}
			}

			State = 1362; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1364; Match(PUT);
			State = 1365; Match(WS);
			State = 1366; fileNumber();
			State = 1368;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1367; Match(WS);
				}
			}

			State = 1370; Match(T__1);
			State = 1372;
			switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				State = 1371; Match(WS);
				}
				break;
			}
			State = 1375;
			switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				State = 1374; valueStmt(0);
				}
				break;
			}
			State = 1378;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1377; Match(WS);
				}
			}

			State = 1380; Match(T__1);
			State = 1382;
			switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				State = 1381; Match(WS);
				}
				break;
			}
			State = 1384; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386; Match(RAISEEVENT);
			State = 1387; Match(WS);
			State = 1388; ambiguousIdentifier();
			State = 1403;
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				State = 1390;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1389; Match(WS);
					}
				}

				State = 1392; Match(LPAREN);
				State = 1394;
				switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
				case 1:
					{
					State = 1393; Match(WS);
					}
					break;
				}
				State = 1400;
				switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
				case 1:
					{
					State = 1396; argsCall();
					State = 1398;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1397; Match(WS);
						}
					}

					}
					break;
				}
				State = 1402; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizeStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRandomizeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRandomizeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizeStmtContext randomizeStmt() {
		RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_randomizeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1405; Match(RANDOMIZE);
			State = 1408;
			switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				State = 1406; Match(WS);
				State = 1407; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<RedimSubStmtContext> redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1410; Match(REDIM);
			State = 1411; Match(WS);
			State = 1414;
			switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				State = 1412; Match(PRESERVE);
				State = 1413; Match(WS);
				}
				break;
			}
			State = 1416; redimSubStmt();
			State = 1427;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,192,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1418;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1417; Match(WS);
						}
					}

					State = 1420; Match(T__1);
					State = 1422;
					switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
					case 1:
						{
						State = 1421; Match(WS);
						}
						break;
					}
					State = 1424; redimSubStmt();
					}
					} 
				}
				State = 1429;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,192,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430; implicitCallStmt_InStmt();
			State = 1432;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1431; Match(WS);
				}
			}

			State = 1434; Match(LPAREN);
			State = 1436;
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				State = 1435; Match(WS);
				}
				break;
			}
			State = 1438; subscripts();
			State = 1440;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1439; Match(WS);
				}
			}

			State = 1442; Match(RPAREN);
			State = 1445;
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 1443; Match(WS);
				State = 1444; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1449; Match(RESUME);
			State = 1455;
			switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				State = 1450; Match(WS);
				State = 1453;
				switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
				case 1:
					{
					State = 1451; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1452; ambiguousIdentifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1457; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmdirStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public RmdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRmdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRmdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmdirStmtContext rmdirStmt() {
		RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_rmdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1459; Match(RMDIR);
			State = 1460; Match(WS);
			State = 1461; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1463; Match(RSET);
			State = 1464; Match(WS);
			State = 1465; implicitCallStmt_InStmt();
			State = 1467;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1466; Match(WS);
				}
			}

			State = 1469; Match(EQ);
			State = 1471;
			switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				State = 1470; Match(WS);
				}
				break;
			}
			State = 1473; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepictureStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepictureStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSavepictureStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSavepictureStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepictureStmtContext savepictureStmt() {
		SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_savepictureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1475; Match(SAVEPICTURE);
			State = 1476; Match(WS);
			State = 1477; valueStmt(0);
			State = 1479;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1478; Match(WS);
				}
			}

			State = 1481; Match(T__1);
			State = 1483;
			switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				State = 1482; Match(WS);
				}
				break;
			}
			State = 1485; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveSettingStmtContext : ParserRuleContext {
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveSettingStmtContext saveSettingStmt() {
		SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_saveSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1487; Match(SAVESETTING);
			State = 1488; Match(WS);
			State = 1489; valueStmt(0);
			State = 1491;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1490; Match(WS);
				}
			}

			State = 1493; Match(T__1);
			State = 1495;
			switch ( Interpreter.AdaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				State = 1494; Match(WS);
				}
				break;
			}
			State = 1497; valueStmt(0);
			State = 1499;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1498; Match(WS);
				}
			}

			State = 1501; Match(T__1);
			State = 1503;
			switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				State = 1502; Match(WS);
				}
				break;
			}
			State = 1505; valueStmt(0);
			State = 1507;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1506; Match(WS);
				}
			}

			State = 1509; Match(T__1);
			State = 1511;
			switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				State = 1510; Match(WS);
				}
				break;
			}
			State = 1513; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1515; Match(SEEK);
			State = 1516; Match(WS);
			State = 1517; fileNumber();
			State = 1519;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1518; Match(WS);
				}
			}

			State = 1521; Match(T__1);
			State = 1523;
			switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				State = 1522; Match(WS);
				}
				break;
			}
			State = 1525; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public IReadOnlyList<SC_CaseContext> sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1527; Match(SELECT);
			State = 1528; Match(WS);
			State = 1529; Match(CASE);
			State = 1530; Match(WS);
			State = 1531; valueStmt(0);
			State = 1532; endOfStatement();
			State = 1536;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1533; sC_Case();
				}
				}
				State = 1538;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1539; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_SelectionContext : ParserRuleContext {
		public SC_SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Selection; } }
	 
		public SC_SelectionContext() { }
		public virtual void CopyFrom(SC_SelectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondValueContext : SC_SelectionContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public CaseCondValueContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondToContext : SC_SelectionContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondToContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondIsContext : SC_SelectionContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public CaseCondIsContext(SC_SelectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_SelectionContext sC_Selection() {
		SC_SelectionContext _localctx = new SC_SelectionContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_sC_Selection);
		int _la;
		try {
			State = 1558;
			switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
			case 1:
				_localctx = new CaseCondIsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1541; Match(IS);
				State = 1543;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1542; Match(WS);
					}
				}

				State = 1545; comparisonOperator();
				State = 1547;
				switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
				case 1:
					{
					State = 1546; Match(WS);
					}
					break;
				}
				State = 1549; valueStmt(0);
				}
				break;

			case 2:
				_localctx = new CaseCondToContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1551; valueStmt(0);
				State = 1552; Match(WS);
				State = 1553; Match(TO);
				State = 1554; Match(WS);
				State = 1555; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1557; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_sC_Case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1560; Match(CASE);
			State = 1561; Match(WS);
			State = 1562; sC_Cond();
			State = 1563; endOfStatement();
			State = 1565;
			switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				State = 1564; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondSelectionContext : SC_CondContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<SC_SelectionContext> sC_Selection() {
			return GetRuleContexts<SC_SelectionContext>();
		}
		public SC_SelectionContext sC_Selection(int i) {
			return GetRuleContext<SC_SelectionContext>(i);
		}
		public CaseCondSelectionContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondSelection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1582;
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1567; Match(ELSE);
				}
				break;

			case 2:
				_localctx = new CaseCondSelectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1568; sC_Selection();
				State = 1579;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,218,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1570;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1569; Match(WS);
							}
						}

						State = 1572; Match(T__1);
						State = 1574;
						switch ( Interpreter.AdaptivePredict(_input,217,_ctx) ) {
						case 1:
							{
							State = 1573; Match(WS);
							}
							break;
						}
						State = 1576; sC_Selection();
						}
						} 
					}
					State = 1581;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,218,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendkeysStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendkeysStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSendkeysStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSendkeysStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendkeysStmtContext sendkeysStmt() {
		SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_sendkeysStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1584; Match(SENDKEYS);
			State = 1585; Match(WS);
			State = 1586; valueStmt(0);
			State = 1595;
			switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				State = 1588;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1587; Match(WS);
					}
				}

				State = 1590; Match(T__1);
				State = 1592;
				switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
				case 1:
					{
					State = 1591; Match(WS);
					}
					break;
				}
				State = 1594; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetattrStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SetattrStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setattrStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSetattrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSetattrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetattrStmtContext setattrStmt() {
		SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_setattrStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1597; Match(SETATTR);
			State = 1598; Match(WS);
			State = 1599; valueStmt(0);
			State = 1601;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1600; Match(WS);
				}
			}

			State = 1603; Match(T__1);
			State = 1605;
			switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				State = 1604; Match(WS);
				}
				break;
			}
			State = 1607; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1609; Match(SET);
			State = 1610; Match(WS);
			State = 1611; implicitCallStmt_InStmt();
			State = 1613;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1612; Match(WS);
				}
			}

			State = 1615; Match(EQ);
			State = 1617;
			switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				State = 1616; Match(WS);
				}
				break;
			}
			State = 1619; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1621; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1623; visibility();
				State = 1624; Match(WS);
				}
			}

			State = 1630;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1628; Match(STATIC);
				State = 1629; Match(WS);
				}
			}

			State = 1632; Match(SUB);
			State = 1634;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1633; Match(WS);
				}
			}

			State = 1636; ambiguousIdentifier();
			State = 1641;
			switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				State = 1638;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1637; Match(WS);
					}
				}

				State = 1640; argList();
				}
				break;
			}
			State = 1643; endOfStatement();
			State = 1645;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==WS || _la==IDENTIFIER) {
				{
				State = 1644; block();
				}
			}

			State = 1647; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public TimeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTimeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTimeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStmtContext timeStmt() {
		TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_timeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1649; Match(TIME);
			State = 1651;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1650; Match(WS);
				}
			}

			State = 1653; Match(EQ);
			State = 1655;
			switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				State = 1654; Match(WS);
				}
				break;
			}
			State = 1657; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1662;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1659; visibility();
				State = 1660; Match(WS);
				}
			}

			State = 1664; Match(TYPE);
			State = 1665; Match(WS);
			State = 1666; ambiguousIdentifier();
			State = 1667; endOfStatement();
			State = 1671;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 1668; typeStmt_Element();
				}
				}
				State = 1673;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1674; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676; ambiguousIdentifier();
			State = 1691;
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				State = 1678;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1677; Match(WS);
					}
				}

				State = 1680; Match(LPAREN);
				State = 1685;
				switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
				case 1:
					{
					State = 1682;
					switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
					case 1:
						{
						State = 1681; Match(WS);
						}
						break;
					}
					State = 1684; subscripts();
					}
					break;
				}
				State = 1688;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1687; Match(WS);
					}
				}

				State = 1690; Match(RPAREN);
				}
				break;
			}
			State = 1695;
			switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				State = 1693; Match(WS);
				State = 1694; asTypeClause();
				}
				break;
			}
			State = 1697; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeOfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeOfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfStmtContext typeOfStmt() {
		TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_typeOfStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1699; Match(TYPEOF);
			State = 1700; Match(WS);
			State = 1701; valueStmt(0);
			State = 1706;
			switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				State = 1702; Match(WS);
				State = 1703; Match(IS);
				State = 1704; Match(WS);
				State = 1705; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnloadStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public UnloadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unloadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterUnloadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitUnloadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnloadStmtContext unloadStmt() {
		UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_unloadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1708; Match(UNLOAD);
			State = 1709; Match(WS);
			State = 1710; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1712; Match(UNLOCK);
			State = 1713; Match(WS);
			State = 1714; fileNumber();
			State = 1729;
			switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
			case 1:
				{
				State = 1716;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1715; Match(WS);
					}
				}

				State = 1718; Match(T__1);
				State = 1720;
				switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					State = 1719; Match(WS);
					}
					break;
				}
				State = 1722; valueStmt(0);
				State = 1727;
				switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					State = 1723; Match(WS);
					State = 1724; Match(TO);
					State = 1725; Match(WS);
					State = 1726; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfStmtContext typeOfStmt() {
			return GetRuleContext<TypeOfStmtContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsRelationalContext : ValueStmtContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsRelationalContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsRelational(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsRelational(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIntDivContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode INTDIV() { return GetToken(VBAParser.INTDIV, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsIntDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsIntDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsIntDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIntDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 200;
		EnterRecursionRule(_localctx, 200, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786;
			switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1732; Match(NEW);
				State = 1734;
				switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					State = 1733; Match(WS);
					}
					break;
				}
				State = 1736; valueStmt(19);
				}
				break;

			case 2:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1737; Match(ADDRESSOF);
				State = 1739;
				switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					State = 1738; Match(WS);
					}
					break;
				}
				State = 1741; valueStmt(16);
				}
				break;

			case 3:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1742; implicitCallStmt_InStmt();
				State = 1744;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1743; Match(WS);
					}
				}

				State = 1746; Match(ASSIGN);
				State = 1748;
				switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					State = 1747; Match(WS);
					}
					break;
				}
				State = 1750; valueStmt(15);
				}
				break;

			case 4:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1752; Match(MINUS);
				State = 1754;
				switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					State = 1753; Match(WS);
					}
					break;
				}
				State = 1756; valueStmt(13);
				}
				break;

			case 5:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1757; Match(NOT);
				State = 1759;
				switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					State = 1758; Match(WS);
					}
					break;
				}
				State = 1761; valueStmt(6);
				}
				break;

			case 6:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1762; literal();
				}
				break;

			case 7:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1763; implicitCallStmt_InStmt();
				}
				break;

			case 8:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1764; Match(LPAREN);
				State = 1766;
				switch ( Interpreter.AdaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					State = 1765; Match(WS);
					}
					break;
				}
				State = 1768; valueStmt(0);
				State = 1779;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__1 || _la==WS) {
					{
					{
					State = 1770;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1769; Match(WS);
						}
					}

					State = 1772; Match(T__1);
					State = 1774;
					switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
					case 1:
						{
						State = 1773; Match(WS);
						}
						break;
					}
					State = 1776; valueStmt(0);
					}
					}
					State = 1781;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1782; Match(RPAREN);
				}
				break;

			case 9:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1784; typeOfStmt();
				}
				break;

			case 10:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1785; midStmt();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1898;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,284,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1896;
					switch ( Interpreter.AdaptivePredict(_input,283,_ctx) ) {
					case 1:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1788;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 1790;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1789; Match(WS);
							}
						}

						State = 1792; Match(POW);
						State = 1794;
						switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
						case 1:
							{
							State = 1793; Match(WS);
							}
							break;
						}
						State = 1796; valueStmt(15);
						}
						break;

					case 2:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1797;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 1799;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1798; Match(WS);
							}
						}

						State = 1801;
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1803;
						switch ( Interpreter.AdaptivePredict(_input,262,_ctx) ) {
						case 1:
							{
							State = 1802; Match(WS);
							}
							break;
						}
						State = 1805; valueStmt(13);
						}
						break;

					case 3:
						{
						_localctx = new VsIntDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1806;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 1808;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1807; Match(WS);
							}
						}

						State = 1810; Match(INTDIV);
						State = 1812;
						switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
						case 1:
							{
							State = 1811; Match(WS);
							}
							break;
						}
						State = 1814; valueStmt(12);
						}
						break;

					case 4:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1815;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 1817;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1816; Match(WS);
							}
						}

						State = 1819; Match(MOD);
						State = 1821;
						switch ( Interpreter.AdaptivePredict(_input,266,_ctx) ) {
						case 1:
							{
							State = 1820; Match(WS);
							}
							break;
						}
						State = 1823; valueStmt(11);
						}
						break;

					case 5:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1824;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 1826;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1825; Match(WS);
							}
						}

						State = 1828;
						_la = _input.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1830;
						switch ( Interpreter.AdaptivePredict(_input,268,_ctx) ) {
						case 1:
							{
							State = 1829; Match(WS);
							}
							break;
						}
						State = 1832; valueStmt(10);
						}
						break;

					case 6:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1833;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 1835;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1834; Match(WS);
							}
						}

						State = 1837; Match(AMPERSAND);
						State = 1839;
						switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
						case 1:
							{
							State = 1838; Match(WS);
							}
							break;
						}
						State = 1841; valueStmt(9);
						}
						break;

					case 7:
						{
						_localctx = new VsRelationalContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1842;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 1844;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1843; Match(WS);
							}
						}

						State = 1846;
						_la = _input.La(1);
						if ( !(_la==IS || _la==LIKE || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (EQ - 191)) | (1L << (GEQ - 191)) | (1L << (GT - 191)) | (1L << (LEQ - 191)) | (1L << (LT - 191)) | (1L << (NEQ - 191)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1848;
						switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
						case 1:
							{
							State = 1847; Match(WS);
							}
							break;
						}
						State = 1850; valueStmt(8);
						}
						break;

					case 8:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1851;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 1853;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1852; Match(WS);
							}
						}

						State = 1855; Match(AND);
						State = 1857;
						switch ( Interpreter.AdaptivePredict(_input,274,_ctx) ) {
						case 1:
							{
							State = 1856; Match(WS);
							}
							break;
						}
						State = 1859; valueStmt(6);
						}
						break;

					case 9:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1860;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 1862;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1861; Match(WS);
							}
						}

						State = 1864; Match(OR);
						State = 1866;
						switch ( Interpreter.AdaptivePredict(_input,276,_ctx) ) {
						case 1:
							{
							State = 1865; Match(WS);
							}
							break;
						}
						State = 1868; valueStmt(5);
						}
						break;

					case 10:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1869;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 1871;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1870; Match(WS);
							}
						}

						State = 1873; Match(XOR);
						State = 1875;
						switch ( Interpreter.AdaptivePredict(_input,278,_ctx) ) {
						case 1:
							{
							State = 1874; Match(WS);
							}
							break;
						}
						State = 1877; valueStmt(4);
						}
						break;

					case 11:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1878;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 1880;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1879; Match(WS);
							}
						}

						State = 1882; Match(EQV);
						State = 1884;
						switch ( Interpreter.AdaptivePredict(_input,280,_ctx) ) {
						case 1:
							{
							State = 1883; Match(WS);
							}
							break;
						}
						State = 1886; valueStmt(3);
						}
						break;

					case 12:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1887;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 1889;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1888; Match(WS);
							}
						}

						State = 1891; Match(IMP);
						State = 1893;
						switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
						case 1:
							{
							State = 1892; Match(WS);
							}
							break;
						}
						State = 1895; valueStmt(2);
						}
						break;
					}
					} 
				}
				State = 1900;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,284,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1904;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 1901; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 1902; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 1903; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1906; Match(WS);
			State = 1909;
			switch ( Interpreter.AdaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				State = 1907; Match(WITHEVENTS);
				State = 1908; Match(WS);
				}
				break;
			}
			State = 1911; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1913; variableSubStmt();
			State = 1924;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,289,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1915;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1914; Match(WS);
						}
					}

					State = 1917; Match(T__1);
					State = 1919;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1918; Match(WS);
						}
					}

					State = 1921; variableSubStmt();
					}
					} 
				}
				State = 1926;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,289,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1927; ambiguousIdentifier();
			State = 1945;
			switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
			case 1:
				{
				State = 1929;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1928; Match(WS);
					}
				}

				State = 1931; Match(LPAREN);
				State = 1933;
				switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					State = 1932; Match(WS);
					}
					break;
				}
				State = 1939;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << EMPTY) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (LPAREN - 195)) | (1L << (MINUS - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (OCTLITERAL - 195)) | (1L << (HEXLITERAL - 195)) | (1L << (SHORTLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (WS - 195)) | (1L << (IDENTIFIER - 195)))) != 0)) {
					{
					State = 1935; subscripts();
					State = 1937;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1936; Match(WS);
						}
					}

					}
				}

				State = 1941; Match(RPAREN);
				State = 1943;
				switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					State = 1942; Match(WS);
					}
					break;
				}
				}
				break;
			}
			State = 1948;
			switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				State = 1947; typeHint();
				}
				break;
			}
			State = 1952;
			switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				State = 1950; Match(WS);
				State = 1951; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_whileWendStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1954; Match(WHILE);
			State = 1955; Match(WS);
			State = 1956; valueStmt(0);
			State = 1957; endOfStatement();
			State = 1959;
			switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				State = 1958; block();
				}
				break;
			}
			State = 1961; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1963; Match(WIDTH);
			State = 1964; Match(WS);
			State = 1965; fileNumber();
			State = 1967;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1966; Match(WS);
				}
			}

			State = 1969; Match(T__1);
			State = 1971;
			switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				State = 1970; Match(WS);
				}
				break;
			}
			State = 1973; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_withStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1975; Match(WITH);
			State = 1976; Match(WS);
			State = 1981;
			switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				State = 1977; implicitCallStmt_InStmt();
				}
				break;

			case 2:
				{
				{
				State = 1978; Match(NEW);
				State = 1979; Match(WS);
				State = 1980; type();
				}
				}
				break;
			}
			State = 1983; endOfStatement();
			State = 1985;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==WS || _la==IDENTIFIER) {
				{
				State = 1984; block();
				}
			}

			State = 1987; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1989; Match(WRITE);
			State = 1990; Match(WS);
			State = 1991; fileNumber();
			State = 1993;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1992; Match(WS);
				}
			}

			State = 1995; Match(T__1);
			State = 2000;
			switch ( Interpreter.AdaptivePredict(_input,305,_ctx) ) {
			case 1:
				{
				State = 1997;
				switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
				case 1:
					{
					State = 1996; Match(WS);
					}
					break;
				}
				State = 1999; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public FileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberContext fileNumber() {
		FileNumberContext _localctx = new FileNumberContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_fileNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2003;
			_la = _input.La(1);
			if (_la==T__5) {
				{
				State = 2002; Match(T__5);
				}
			}

			State = 2005; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ECS_ProcedureCallContext eCS_ProcedureCall() {
			return GetRuleContext<ECS_ProcedureCallContext>(0);
		}
		public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
			return GetRuleContext<ECS_MemberProcedureCallContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_explicitCallStmt);
		try {
			State = 2009;
			switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2007; eCS_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2008; eCS_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_ProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_ProcedureCallContext eCS_ProcedureCall() {
		ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_eCS_ProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2011; Match(CALL);
			State = 2012; Match(WS);
			State = 2013; ambiguousIdentifier();
			State = 2015;
			switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				State = 2014; typeHint();
				}
				break;
			}
			State = 2030;
			switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				State = 2018;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2017; Match(WS);
					}
				}

				State = 2020; Match(LPAREN);
				State = 2022;
				switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					State = 2021; Match(WS);
					}
					break;
				}
				State = 2024; argsCall();
				State = 2026;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2025; Match(WS);
					}
				}

				State = 2028; Match(RPAREN);
				}
				break;
			}
			State = 2041;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,314,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2033;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2032; Match(WS);
						}
					}

					State = 2035; Match(LPAREN);
					State = 2036; subscripts();
					State = 2037; Match(RPAREN);
					}
					} 
				}
				State = 2043;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,314,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_MemberProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
		ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_eCS_MemberProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2044; Match(CALL);
			State = 2045; Match(WS);
			State = 2047;
			switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
			case 1:
				{
				State = 2046; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2049; Match(T__0);
			State = 2050; ambiguousIdentifier();
			State = 2052;
			switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
			case 1:
				{
				State = 2051; typeHint();
				}
				break;
			}
			State = 2067;
			switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
			case 1:
				{
				State = 2055;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2054; Match(WS);
					}
				}

				State = 2057; Match(LPAREN);
				State = 2059;
				switch ( Interpreter.AdaptivePredict(_input,318,_ctx) ) {
				case 1:
					{
					State = 2058; Match(WS);
					}
					break;
				}
				State = 2061; argsCall();
				State = 2063;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2062; Match(WS);
					}
				}

				State = 2065; Match(RPAREN);
				}
				break;
			}
			State = 2078;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,322,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2070;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2069; Match(WS);
						}
					}

					State = 2072; Match(LPAREN);
					State = 2073; subscripts();
					State = 2074; Match(RPAREN);
					}
					} 
				}
				State = 2080;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,322,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_implicitCallStmt_InBlock);
		try {
			State = 2083;
			switch ( Interpreter.AdaptivePredict(_input,323,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2081; iCS_B_MemberProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2082; iCS_B_ProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_iCS_B_MemberProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2086;
			switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				State = 2085; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2088; Match(T__0);
			State = 2089; ambiguousIdentifier();
			State = 2091;
			switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				State = 2090; typeHint();
				}
				break;
			}
			State = 2095;
			switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				State = 2093; Match(WS);
				State = 2094; argsCall();
				}
				break;
			}
			State = 2101;
			switch ( Interpreter.AdaptivePredict(_input,328,_ctx) ) {
			case 1:
				{
				State = 2098;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2097; Match(WS);
					}
				}

				State = 2100; dictionaryCallStmt();
				}
				break;
			}
			State = 2112;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,330,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2104;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2103; Match(WS);
						}
					}

					State = 2106; Match(LPAREN);
					State = 2107; subscripts();
					State = 2108; Match(RPAREN);
					}
					} 
				}
				State = 2114;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,330,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public CertainIdentifierContext certainIdentifier() {
			return GetRuleContext<CertainIdentifierContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_iCS_B_ProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2115; certainIdentifier();
			State = 2118;
			switch ( Interpreter.AdaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				State = 2116; Match(WS);
				State = 2117; argsCall();
				}
				break;
			}
			State = 2129;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,333,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2121;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2120; Match(WS);
						}
					}

					State = 2123; Match(LPAREN);
					State = 2124; subscripts();
					State = 2125; Match(RPAREN);
					}
					} 
				}
				State = 2131;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,333,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_implicitCallStmt_InStmt);
		try {
			State = 2136;
			switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2132; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2133; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2134; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2135; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_iCS_S_VariableOrProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2138; ambiguousIdentifier();
			State = 2140;
			switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				State = 2139; typeHint();
				}
				break;
			}
			State = 2146;
			switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
			case 1:
				{
				State = 2143;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2142; Match(WS);
					}
				}

				State = 2145; dictionaryCallStmt();
				}
				break;
			}
			State = 2157;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,339,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2149;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2148; Match(WS);
						}
					}

					State = 2151; Match(LPAREN);
					State = 2152; subscripts();
					State = 2153; Match(RPAREN);
					}
					} 
				}
				State = 2159;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,339,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2162;
			switch ( Interpreter.AdaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				State = 2160; ambiguousIdentifier();
				}
				break;

			case 2:
				{
				State = 2161; baseType();
				}
				break;
			}
			State = 2165;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la==AMPERSAND) {
				{
				State = 2164; typeHint();
				}
			}

			State = 2168;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2167; Match(WS);
				}
			}

			State = 2170; Match(LPAREN);
			State = 2172;
			switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
			case 1:
				{
				State = 2171; Match(WS);
				}
				break;
			}
			State = 2178;
			switch ( Interpreter.AdaptivePredict(_input,345,_ctx) ) {
			case 1:
				{
				State = 2174; argsCall();
				State = 2176;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2175; Match(WS);
					}
				}

				}
				break;
			}
			State = 2180; Match(RPAREN);
			State = 2185;
			switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				State = 2182;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2181; Match(WS);
					}
				}

				State = 2184; dictionaryCallStmt();
				}
				break;
			}
			State = 2196;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,349,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2188;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2187; Match(WS);
						}
					}

					State = 2190; Match(LPAREN);
					State = 2191; subscripts();
					State = 2192; Match(RPAREN);
					}
					} 
				}
				State = 2198;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,349,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_iCS_S_MembersCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201;
			switch ( Interpreter.AdaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				State = 2199; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2200; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2207;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2203; iCS_S_MemberCall();
					State = 2205;
					switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
					case 1:
						{
						State = 2204; Match(WS);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2209;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,352,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2215;
			switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
			case 1:
				{
				State = 2212;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2211; Match(WS);
					}
				}

				State = 2214; dictionaryCallStmt();
				}
				break;
			}
			State = 2226;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,356,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2218;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2217; Match(WS);
						}
					}

					State = 2220; Match(LPAREN);
					State = 2221; subscripts();
					State = 2222; Match(RPAREN);
					}
					} 
				}
				State = 2228;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,356,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_iCS_S_MemberCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2229;
			_la = _input.La(1);
			if ( !(_la==T__6 || _la==T__0) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 2231;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2230; Match(WS);
				}
			}

			State = 2235;
			switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				State = 2233; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2234; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_iCS_S_DictionaryCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2238;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2237; Match(WS);
				}
			}

			State = 2240; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ArgCallContext> argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2254;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,363,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2243;
					switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
					case 1:
						{
						State = 2242; argCall();
						}
						break;
					}
					State = 2246;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2245; Match(WS);
						}
					}

					State = 2248;
					_la = _input.La(1);
					if ( !(_la==T__2 || _la==T__1) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2250;
					switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
					case 1:
						{
						State = 2249; Match(WS);
						}
						break;
					}
					}
					} 
				}
				State = 2256;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,363,_ctx);
			}
			State = 2257; argCall();
			State = 2270;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,367,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2259;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2258; Match(WS);
						}
					}

					State = 2261;
					_la = _input.La(1);
					if ( !(_la==T__2 || _la==T__1) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2263;
					switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
					case 1:
						{
						State = 2262; Match(WS);
						}
						break;
					}
					State = 2266;
					switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
					case 1:
						{
						State = 2265; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2272;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,367,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2274;
			switch ( Interpreter.AdaptivePredict(_input,368,_ctx) ) {
			case 1:
				{
				State = 2273; Match(LPAREN);
				}
				break;
			}
			State = 2278;
			switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				State = 2276;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2277; Match(WS);
				}
				break;
			}
			State = 2281;
			_la = _input.La(1);
			if (_la==RPAREN) {
				{
				State = 2280; Match(RPAREN);
				}
			}

			State = 2283; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_dictionaryCallStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2285; Match(T__6);
			State = 2287;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2286; Match(WS);
				}
			}

			State = 2289; ambiguousIdentifier();
			State = 2291;
			switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				State = 2290; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2293; Match(LPAREN);
			State = 2311;
			switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				State = 2295;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2294; Match(WS);
					}
				}

				State = 2297; arg();
				State = 2308;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,376,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2299;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2298; Match(WS);
							}
						}

						State = 2301; Match(T__1);
						State = 2303;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2302; Match(WS);
							}
						}

						State = 2305; arg();
						}
						} 
					}
					State = 2310;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,376,_ctx);
				}
				}
				break;
			}
			State = 2314;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2313; Match(WS);
				}
			}

			State = 2316; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2320;
			switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				State = 2318; Match(OPTIONAL);
				State = 2319; Match(WS);
				}
				break;
			}
			State = 2324;
			switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				State = 2322;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2323; Match(WS);
				}
				break;
			}
			State = 2328;
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 2326; Match(PARAMARRAY);
				State = 2327; Match(WS);
				}
				break;
			}
			State = 2330; ambiguousIdentifier();
			State = 2332;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la==AMPERSAND) {
				{
				State = 2331; typeHint();
				}
			}

			State = 2342;
			switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				State = 2335;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2334; Match(WS);
					}
				}

				State = 2337; Match(LPAREN);
				State = 2339;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2338; Match(WS);
					}
				}

				State = 2341; Match(RPAREN);
				}
				break;
			}
			State = 2348;
			switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
			case 1:
				{
				State = 2345;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2344; Match(WS);
					}
				}

				State = 2347; asTypeClause();
				}
				break;
			}
			State = 2354;
			switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				State = 2351;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2350; Match(WS);
					}
				}

				State = 2353; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_argDefaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2356; Match(EQ);
			State = 2358;
			switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				State = 2357; Match(WS);
				}
				break;
			}
			State = 2360; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2362; subscript();
			State = 2373;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,393,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2364;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2363; Match(WS);
						}
					}

					State = 2366; Match(T__1);
					State = 2368;
					switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
					case 1:
						{
						State = 2367; Match(WS);
						}
						break;
					}
					State = 2370; subscript();
					}
					} 
				}
				State = 2375;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,393,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2381;
			switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				State = 2376; valueStmt(0);
				State = 2377; Match(WS);
				State = 2378; Match(TO);
				State = 2379; Match(WS);
				}
				break;
			}
			State = 2383; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousIdentifierContext : ParserRuleContext {
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBAParser.IDENTIFIER, i);
		}
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
		public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousIdentifierContext ambiguousIdentifier() {
		AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_ambiguousIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2387;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 2387;
					switch (_input.La(1)) {
					case IDENTIFIER:
						{
						State = 2385; Match(IDENTIFIER);
						}
						break;
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATABASE:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2386; ambiguousKeyword();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2389;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,396,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_asTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2391; Match(AS);
			State = 2393;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2392; Match(WS);
				}
			}

			State = 2397;
			switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				State = 2395; Match(NEW);
				State = 2396; Match(WS);
				}
				break;
			}
			State = 2399; type();
			State = 2404;
			switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				State = 2401;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2400; Match(WS);
					}
				}

				State = 2403; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2406;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || _la==INTEGER || _la==LONG || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (SINGLE - 160)) | (1L << (STRING - 160)) | (1L << (VARIANT - 160)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CertainIdentifierContext : ParserRuleContext {
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBAParser.IDENTIFIER, i);
		}
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
		public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_certainIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCertainIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCertainIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CertainIdentifierContext certainIdentifier() {
		CertainIdentifierContext _localctx = new CertainIdentifierContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_certainIdentifier);
		try {
			int _alt;
			State = 2423;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2408; Match(IDENTIFIER);
				State = 2413;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,402,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 2411;
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATABASE:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2409; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2410; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 2415;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,402,_ctx);
				}
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2416; ambiguousKeyword();
				State = 2419;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2419;
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATABASE:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2417; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2418; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2421;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,404,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2425;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (EQ - 191)) | (1L << (GEQ - 191)) | (1L << (GT - 191)) | (1L << (LEQ - 191)) | (1L << (LT - 191)) | (1L << (NEQ - 191)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_complexType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2427; ambiguousIdentifier();
			State = 2432;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,406,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2428;
					_la = _input.La(1);
					if ( !(_la==T__6 || _la==T__0) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2429; ambiguousIdentifier();
					}
					} 
				}
				State = 2434;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,406,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2435; Match(MULT);
			State = 2437;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2436; Match(WS);
				}
			}

			State = 2441;
			switch (_input.La(1)) {
			case INTEGERLITERAL:
				{
				State = 2439; Match(INTEGERLITERAL);
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
				{
				State = 2440; ambiguousIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public CertainIdentifierContext certainIdentifier(int i) {
			return GetRuleContext<CertainIdentifierContext>(i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<CertainIdentifierContext> certainIdentifier() {
			return GetRuleContexts<CertainIdentifierContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2443; certainIdentifier();
			State = 2452;
			switch ( Interpreter.AdaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				State = 2445;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2444; Match(WS);
					}
				}

				State = 2447; Match(MINUS);
				State = 2449;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2448; Match(WS);
					}
				}

				State = 2451; certainIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_lineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2454; ambiguousIdentifier();
			State = 2455; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public ITerminalNode HEXLITERAL() { return GetToken(VBAParser.HEXLITERAL, 0); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
		public ITerminalNode SHORTLITERAL() { return GetToken(VBAParser.SHORTLITERAL, 0); }
		public ITerminalNode EMPTY() { return GetToken(VBAParser.EMPTY, 0); }
		public ITerminalNode OCTLITERAL() { return GetToken(VBAParser.OCTLITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2457;
			_la = _input.La(1);
			if ( !(_la==EMPTY || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (FALSE - 74)) | (1L << (NOTHING - 74)) | (1L << (NULL - 74)))) != 0) || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (TRUE - 172)) | (1L << (STRINGLITERAL - 172)) | (1L << (OCTLITERAL - 172)) | (1L << (HEXLITERAL - 172)) | (1L << (SHORTLITERAL - 172)) | (1L << (INTEGERLITERAL - 172)) | (1L << (DOUBLELITERAL - 172)) | (1L << (DATELITERAL - 172)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2461;
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				State = 2459; baseType();
				}
				break;

			case 2:
				{
				State = 2460; complexType();
				}
				break;
			}
			State = 2471;
			switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
			case 1:
				{
				State = 2464;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2463; Match(WS);
					}
				}

				State = 2466; Match(LPAREN);
				State = 2468;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2467; Match(WS);
					}
				}

				State = 2470; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2473;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3))) != 0) || _la==AMPERSAND) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2475;
			_la = _input.La(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousKeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousKeywordContext ambiguousKeyword() {
		AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_ambiguousKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2477;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemCommentContext : ParserRuleContext {
		public ITerminalNode REMCOMMENT() { return GetToken(VBAParser.REMCOMMENT, 0); }
		public RemCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRemComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRemComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemCommentContext remComment() {
		RemCommentContext _localctx = new RemCommentContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_remComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2479; Match(REMCOMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(VBAParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2481; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfLineContext : ParserRuleContext {
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NEWLINE() { return GetToken(VBAParser.NEWLINE, 0); }
		public RemCommentContext remComment() {
			return GetRuleContext<RemCommentContext>(0);
		}
		public EndOfLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEndOfLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEndOfLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfLineContext endOfLine() {
		EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_endOfLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2484;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2483; Match(WS);
				}
			}

			State = 2489;
			switch (_input.La(1)) {
			case NEWLINE:
				{
				State = 2486; Match(NEWLINE);
				}
				break;
			case COMMENT:
				{
				State = 2487; comment();
				}
				break;
			case REMCOMMENT:
				{
				State = 2488; remComment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2492;
			switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				State = 2491; Match(WS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfStatementContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public EndOfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEndOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEndOfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfStatementContext endOfStatement() {
		EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_endOfStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2504;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,422,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2502;
					switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
					case 1:
						{
						State = 2494; endOfLine();
						}
						break;

					case 2:
						{
						State = 2496;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2495; Match(WS);
							}
						}

						State = 2498; Match(COLON);
						State = 2500;
						switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
						case 1:
							{
							State = 2499; Match(WS);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 2506;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,422,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 100: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 14);

		case 1: return Precpred(_ctx, 12);

		case 2: return Precpred(_ctx, 11);

		case 3: return Precpred(_ctx, 10);

		case 4: return Precpred(_ctx, 9);

		case 5: return Precpred(_ctx, 8);

		case 6: return Precpred(_ctx, 7);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xF5\x9CE\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x12D\n\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x5\x3\x133\n\x3\x3\x3\x5\x3\x136\n\x3\x3\x3\x3\x3"+
		"\x5\x3\x13A\n\x3\x3\x3\x3\x3\x5\x3\x13E\n\x3\x3\x3\x3\x3\x5\x3\x142\n"+
		"\x3\x3\x3\x3\x3\x5\x3\x146\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x5\x6\x5\x151\n\x5\r\x5\xE\x5\x152\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\x5\x6\x159\n\x6\x3\x6\x3\x6\x5\x6\x15D\n\x6\x3\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x6\a\x165\n\a\r\a\xE\a\x166\x3\b\x3\b\x3\b\x3\b\a\b\x16D\n\b\f"+
		"\b\xE\b\x170\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5"+
		"\t\x17C\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x187\n\n"+
		"\x3\v\x3\v\x5\v\x18B\n\v\x3\f\x3\f\x3\f\x3\f\a\f\x191\n\f\f\f\xE\f\x194"+
		"\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x19E\n\r\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x5\xE\x1A4\n\xE\x3\xE\x3\xE\x5\xE\x1A8\n\xE\x3\xE\x3\xE\x5"+
		"\xE\x1AC\n\xE\x3\xE\x3\xE\x5\xE\x1B0\n\xE\x3\xE\a\xE\x1B3\n\xE\f\xE\xE"+
		"\xE\x1B6\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x1BC\n\xF\f\xF\xE\xF\x1BF\v"+
		"\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10"+
		"\x206\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x20C\n\x11\x3\x11\x3\x11"+
		"\x5\x11\x210\n\x11\x3\x11\x5\x11\x213\n\x11\x3\x12\x3\x12\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x5\x15\x223\n\x15\x3\x15\x3\x15\x5\x15\x227\n\x15\x3\x15\a\x15\x22A\n"+
		"\x15\f\x15\xE\x15\x22D\v\x15\x5\x15\x22F\n\x15\x3\x16\x3\x16\x3\x16\x5"+
		"\x16\x234\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x23A\n\x16\x3\x16\x3"+
		"\x16\x5\x16\x23E\n\x16\x3\x16\a\x16\x241\n\x16\f\x16\xE\x16\x244\v\x16"+
		"\x3\x17\x3\x17\x5\x17\x248\n\x17\x3\x17\x3\x17\x5\x17\x24C\n\x17\x3\x17"+
		"\x5\x17\x24F\n\x17\x3\x17\x3\x17\x5\x17\x253\n\x17\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x5\x18\x259\n\x18\x3\x18\x3\x18\x5\x18\x25D\n\x18\x3\x18\x3\x18"+
		"\x3\x19\x3\x19\x3\x19\x5\x19\x264\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5"+
		"\x19\x26A\n\x19\x3\x19\x3\x19\x5\x19\x26E\n\x19\x3\x19\x5\x19\x271\n\x19"+
		"\x3\x19\x3\x19\x3\x19\x5\x19\x276\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x5\x19\x280\n\x19\x3\x19\x5\x19\x283\n\x19\x3"+
		"\x19\x5\x19\x286\n\x19\x3\x19\x3\x19\x5\x19\x28A\n\x19\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\x290\n\x1A\x3\x1A\x3\x1A\x5\x1A\x294\n\x1A\x3\x1A\a"+
		"\x1A\x297\n\x1A\f\x1A\xE\x1A\x29A\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5"+
		"\x1B\x2A0\n\x1B\x3\x1B\x3\x1B\x5\x1B\x2A4\n\x1B\x3\x1B\x3\x1B\x5\x1B\x2A8"+
		"\n\x1B\x3\x1B\x3\x1B\x5\x1B\x2AC\n\x1B\x3\x1B\x5\x1B\x2AF\n\x1B\x3\x1C"+
		"\x3\x1C\x3\x1C\x5\x1C\x2B4\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x2BF\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x2CC\n\x1C\x3"+
		"\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x2D3\n\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\a\x1E\x2DA\n\x1E\f\x1E\xE\x1E\x2DD\v\x1E\x3\x1E\x3\x1E"+
		"\x3\x1F\x3\x1F\x5\x1F\x2E3\n\x1F\x3\x1F\x3\x1F\x5\x1F\x2E7\n\x1F\x3\x1F"+
		"\x5\x1F\x2EA\n\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3\""+
		"\x3\"\x3\"\x5\"\x2F9\n\"\x3\"\x3\"\x3\"\x3\"\x5\"\x2FF\n\"\x3\"\x3\"\x3"+
		"#\x3#\x3$\x3$\x3$\x3$\x5$\x309\n$\x3$\x3$\x5$\x30D\n$\x3$\x3$\x3%\x3%"+
		"\x3%\x3%\x3%\x3%\x5%\x317\n%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x31F\n%\x3%\x3"+
		"%\x3%\x5%\x324\n%\x3&\x3&\x3&\x3&\x5&\x32A\n&\x3&\x3&\x5&\x32E\n&\x3&"+
		"\x5&\x331\n&\x3&\x3&\x5&\x335\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5"+
		"&\x340\n&\x3&\x3&\x5&\x344\n&\x3&\x3&\x3&\x5&\x349\n&\x3\'\x3\'\x3\'\x5"+
		"\'\x34E\n\'\x3\'\x3\'\x5\'\x352\n\'\x3\'\x3\'\x5\'\x356\n\'\x3\'\x3\'"+
		"\x5\'\x35A\n\'\x3\'\x5\'\x35D\n\'\x3\'\x5\'\x360\n\'\x3\'\x5\'\x363\n"+
		"\'\x3\'\x5\'\x366\n\'\x3\'\x3\'\x5\'\x36A\n\'\x3\'\x3\'\x3(\x3(\x3(\x3"+
		"(\x5(\x372\n(\x3(\x3(\x5(\x376\n(\x3(\x5(\x379\n(\x3(\x5(\x37C\n(\x3("+
		"\x3(\x5(\x380\n(\x3(\x3(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3+\x3+\x3+\x3"+
		"+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x397\n+\x3+\x3+\a+\x39B\n+\f+\xE+\x39E"+
		"\v+\x3+\x5+\x3A1\n+\x3+\x3+\x5+\x3A5\n+\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5"+
		",\x3AE\n,\x3-\x3-\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x3B9\n.\x3/\x3/\x3/"+
		"\x5/\x3BE\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x5"+
		"\x31\x3C8\n\x31\x3\x31\x3\x31\x5\x31\x3CC\n\x31\x3\x31\x6\x31\x3CF\n\x31"+
		"\r\x31\xE\x31\x3D0\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x5\x33\x3D9"+
		"\n\x33\x3\x33\x3\x33\x5\x33\x3DD\n\x33\x3\x33\x3\x33\x5\x33\x3E1\n\x33"+
		"\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x3E9\n\x34\x3\x34\x3"+
		"\x34\x5\x34\x3ED\n\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36"+
		"\x3\x36\x3\x36\x3\x36\x5\x36\x3F9\n\x36\x3\x36\x3\x36\x5\x36\x3FD\n\x36"+
		"\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x404\n\x36\x5\x36\x406\n\x36"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x40C\n\x37\x3\x37\x3\x37\x5\x37\x410"+
		"\n\x37\x3\x37\x3\x37\x3\x38\x3\x38\x5\x38\x416\n\x38\x3\x38\x3\x38\x5"+
		"\x38\x41A\n\x38\x3\x38\x3\x38\x5\x38\x41E\n\x38\x3\x38\x3\x38\x3\x39\x3"+
		"\x39\a\x39\x424\n\x39\f\x39\xE\x39\x427\v\x39\x3\x39\x5\x39\x42A\n\x39"+
		"\x3\x39\x3\x39\x3:\x3:\x5:\x430\n:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\a:\x439"+
		"\n:\f:\xE:\x43C\v:\x3;\x3;\x5;\x440\n;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\a;"+
		"\x449\n;\f;\xE;\x44C\v;\x3<\x3<\x3<\x3<\x3<\a<\x453\n<\f<\xE<\x456\v<"+
		"\x3=\x3=\x5=\x45A\n=\x3=\x3=\x5=\x45E\n=\x3=\x3=\x5=\x462\n=\x3=\x3=\x3"+
		">\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3@"+
		"\x3@\x3@\x5@\x47A\n@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x5\x41\x484\n\x41\x3\x41\x3\x41\x5\x41\x488\n\x41\x3\x41\a\x41"+
		"\x48B\n\x41\f\x41\xE\x41\x48E\v\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x5\x42\x498\n\x42\x3\x42\x3\x42\x5\x42\x49C\n\x42"+
		"\x3\x42\a\x42\x49F\n\x42\f\x42\xE\x42\x4A2\v\x42\x3\x43\x3\x43\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x4AF\n"+
		"\x43\x3\x43\x3\x43\x5\x43\x4B3\n\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43"+
		"\x3\x43\x3\x43\x5\x43\x4BC\n\x43\x3\x43\x3\x43\x5\x43\x4C0\n\x43\x3\x43"+
		"\x5\x43\x4C3\n\x43\x3\x44\x3\x44\x5\x44\x4C7\n\x44\x3\x44\x3\x44\x5\x44"+
		"\x4CB\n\x44\x3\x44\x5\x44\x4CE\n\x44\a\x44\x4D0\n\x44\f\x44\xE\x44\x4D3"+
		"\v\x44\x3\x44\x5\x44\x4D6\n\x44\x3\x44\x5\x44\x4D9\n\x44\x3\x44\x3\x44"+
		"\x5\x44\x4DD\n\x44\x3\x44\x5\x44\x4E0\n\x44\x6\x44\x4E2\n\x44\r\x44\xE"+
		"\x44\x4E3\x5\x44\x4E6\n\x44\x3\x45\x3\x45\x3\x45\x5\x45\x4EB\n\x45\x3"+
		"\x45\x3\x45\x5\x45\x4EF\n\x45\x3\x45\x3\x45\x5\x45\x4F3\n\x45\x3\x45\x3"+
		"\x45\x5\x45\x4F7\n\x45\x5\x45\x4F9\n\x45\x3\x46\x3\x46\x3\x46\x3\x46\x5"+
		"\x46\x4FF\n\x46\x3\x46\x3\x46\x5\x46\x503\n\x46\x3\x46\x5\x46\x506\n\x46"+
		"\x3G\x3G\x3G\x5G\x50B\nG\x3G\x3G\x5G\x50F\nG\x3G\x3G\x3G\x3G\x5G\x515"+
		"\nG\x3G\x5G\x518\nG\x3G\x5G\x51B\nG\x3G\x3G\x5G\x51F\nG\x3G\x3G\x5G\x523"+
		"\nG\x3G\x3G\x3H\x3H\x3H\x5H\x52A\nH\x3H\x3H\x5H\x52E\nH\x3H\x3H\x3H\x3"+
		"H\x5H\x534\nH\x3H\x5H\x537\nH\x3H\x3H\x5H\x53B\nH\x3H\x3H\x3I\x3I\x3I"+
		"\x5I\x542\nI\x3I\x3I\x5I\x546\nI\x3I\x3I\x3I\x3I\x5I\x54C\nI\x3I\x5I\x54F"+
		"\nI\x3I\x3I\x5I\x553\nI\x3I\x3I\x3J\x3J\x3J\x3J\x5J\x55B\nJ\x3J\x3J\x5"+
		"J\x55F\nJ\x3J\x5J\x562\nJ\x3J\x5J\x565\nJ\x3J\x3J\x5J\x569\nJ\x3J\x3J"+
		"\x3K\x3K\x3K\x3K\x5K\x571\nK\x3K\x3K\x5K\x575\nK\x3K\x3K\x5K\x579\nK\x5"+
		"K\x57B\nK\x3K\x5K\x57E\nK\x3L\x3L\x3L\x5L\x583\nL\x3M\x3M\x3M\x3M\x5M"+
		"\x589\nM\x3M\x3M\x5M\x58D\nM\x3M\x3M\x5M\x591\nM\x3M\aM\x594\nM\fM\xE"+
		"M\x597\vM\x3N\x3N\x5N\x59B\nN\x3N\x3N\x5N\x59F\nN\x3N\x3N\x5N\x5A3\nN"+
		"\x3N\x3N\x3N\x5N\x5A8\nN\x3O\x3O\x3P\x3P\x3P\x3P\x5P\x5B0\nP\x5P\x5B2"+
		"\nP\x3Q\x3Q\x3R\x3R\x3R\x3R\x3S\x3S\x3S\x3S\x5S\x5BE\nS\x3S\x3S\x5S\x5C2"+
		"\nS\x3S\x3S\x3T\x3T\x3T\x3T\x5T\x5CA\nT\x3T\x3T\x5T\x5CE\nT\x3T\x3T\x3"+
		"U\x3U\x3U\x3U\x5U\x5D6\nU\x3U\x3U\x5U\x5DA\nU\x3U\x3U\x5U\x5DE\nU\x3U"+
		"\x3U\x5U\x5E2\nU\x3U\x3U\x5U\x5E6\nU\x3U\x3U\x5U\x5EA\nU\x3U\x3U\x3V\x3"+
		"V\x3V\x3V\x5V\x5F2\nV\x3V\x3V\x5V\x5F6\nV\x3V\x3V\x3W\x3W\x3W\x3W\x3W"+
		"\x3W\x3W\aW\x601\nW\fW\xEW\x604\vW\x3W\x3W\x3X\x3X\x5X\x60A\nX\x3X\x3"+
		"X\x5X\x60E\nX\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x5X\x619\nX\x3Y\x3Y"+
		"\x3Y\x3Y\x3Y\x5Y\x620\nY\x3Z\x3Z\x3Z\x5Z\x625\nZ\x3Z\x3Z\x5Z\x629\nZ\x3"+
		"Z\aZ\x62C\nZ\fZ\xEZ\x62F\vZ\x5Z\x631\nZ\x3[\x3[\x3[\x3[\x5[\x637\n[\x3"+
		"[\x3[\x5[\x63B\n[\x3[\x5[\x63E\n[\x3\\\x3\\\x3\\\x3\\\x5\\\x644\n\\\x3"+
		"\\\x3\\\x5\\\x648\n\\\x3\\\x3\\\x3]\x3]\x3]\x3]\x5]\x650\n]\x3]\x3]\x5"+
		"]\x654\n]\x3]\x3]\x3^\x3^\x3_\x3_\x3_\x5_\x65D\n_\x3_\x3_\x5_\x661\n_"+
		"\x3_\x3_\x5_\x665\n_\x3_\x3_\x5_\x669\n_\x3_\x5_\x66C\n_\x3_\x3_\x5_\x670"+
		"\n_\x3_\x3_\x3`\x3`\x5`\x676\n`\x3`\x3`\x5`\x67A\n`\x3`\x3`\x3\x61\x3"+
		"\x61\x3\x61\x5\x61\x681\n\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\a\x61"+
		"\x688\n\x61\f\x61\xE\x61\x68B\v\x61\x3\x61\x3\x61\x3\x62\x3\x62\x5\x62"+
		"\x691\n\x62\x3\x62\x3\x62\x5\x62\x695\n\x62\x3\x62\x5\x62\x698\n\x62\x3"+
		"\x62\x5\x62\x69B\n\x62\x3\x62\x5\x62\x69E\n\x62\x3\x62\x3\x62\x5\x62\x6A2"+
		"\n\x62\x3\x62\x3\x62\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63"+
		"\x5\x63\x6AD\n\x63\x3\x64\x3\x64\x3\x64\x3\x64\x3\x65\x3\x65\x3\x65\x3"+
		"\x65\x5\x65\x6B7\n\x65\x3\x65\x3\x65\x5\x65\x6BB\n\x65\x3\x65\x3\x65\x3"+
		"\x65\x3\x65\x3\x65\x5\x65\x6C2\n\x65\x5\x65\x6C4\n\x65\x3\x66\x3\x66\x3"+
		"\x66\x5\x66\x6C9\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x6CE\n\x66\x3\x66\x3"+
		"\x66\x3\x66\x5\x66\x6D3\n\x66\x3\x66\x3\x66\x5\x66\x6D7\n\x66\x3\x66\x3"+
		"\x66\x3\x66\x3\x66\x5\x66\x6DD\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x6E2"+
		"\n\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x5\x66\x6E9\n\x66\x3\x66\x3"+
		"\x66\x5\x66\x6ED\n\x66\x3\x66\x3\x66\x5\x66\x6F1\n\x66\x3\x66\a\x66\x6F4"+
		"\n\x66\f\x66\xE\x66\x6F7\v\x66\x3\x66\x3\x66\x3\x66\x3\x66\x5\x66\x6FD"+
		"\n\x66\x3\x66\x3\x66\x5\x66\x701\n\x66\x3\x66\x3\x66\x5\x66\x705\n\x66"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\x70A\n\x66\x3\x66\x3\x66\x5\x66\x70E\n\x66"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\x713\n\x66\x3\x66\x3\x66\x5\x66\x717\n\x66"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\x71C\n\x66\x3\x66\x3\x66\x5\x66\x720\n\x66"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\x725\n\x66\x3\x66\x3\x66\x5\x66\x729\n\x66"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\x72E\n\x66\x3\x66\x3\x66\x5\x66\x732\n\x66"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\x737\n\x66\x3\x66\x3\x66\x5\x66\x73B\n\x66"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\x740\n\x66\x3\x66\x3\x66\x5\x66\x744\n\x66"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\x749\n\x66\x3\x66\x3\x66\x5\x66\x74D\n\x66"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\x752\n\x66\x3\x66\x3\x66\x5\x66\x756\n\x66"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\x75B\n\x66\x3\x66\x3\x66\x5\x66\x75F\n\x66"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\x764\n\x66\x3\x66\x3\x66\x5\x66\x768\n\x66"+
		"\x3\x66\a\x66\x76B\n\x66\f\x66\xE\x66\x76E\v\x66\x3g\x3g\x3g\x5g\x773"+
		"\ng\x3g\x3g\x3g\x5g\x778\ng\x3g\x3g\x3h\x3h\x5h\x77E\nh\x3h\x3h\x5h\x782"+
		"\nh\x3h\ah\x785\nh\fh\xEh\x788\vh\x3i\x3i\x5i\x78C\ni\x3i\x3i\x5i\x790"+
		"\ni\x3i\x3i\x5i\x794\ni\x5i\x796\ni\x3i\x3i\x5i\x79A\ni\x5i\x79C\ni\x3"+
		"i\x5i\x79F\ni\x3i\x3i\x5i\x7A3\ni\x3j\x3j\x3j\x3j\x3j\x5j\x7AA\nj\x3j"+
		"\x3j\x3k\x3k\x3k\x3k\x5k\x7B2\nk\x3k\x3k\x5k\x7B6\nk\x3k\x3k\x3l\x3l\x3"+
		"l\x3l\x3l\x3l\x5l\x7C0\nl\x3l\x3l\x5l\x7C4\nl\x3l\x3l\x3m\x3m\x3m\x3m"+
		"\x5m\x7CC\nm\x3m\x3m\x5m\x7D0\nm\x3m\x5m\x7D3\nm\x3n\x5n\x7D6\nn\x3n\x3"+
		"n\x3o\x3o\x5o\x7DC\no\x3p\x3p\x3p\x3p\x5p\x7E2\np\x3p\x5p\x7E5\np\x3p"+
		"\x3p\x5p\x7E9\np\x3p\x3p\x5p\x7ED\np\x3p\x3p\x5p\x7F1\np\x3p\x5p\x7F4"+
		"\np\x3p\x3p\x3p\x3p\ap\x7FA\np\fp\xEp\x7FD\vp\x3q\x3q\x3q\x5q\x802\nq"+
		"\x3q\x3q\x3q\x5q\x807\nq\x3q\x5q\x80A\nq\x3q\x3q\x5q\x80E\nq\x3q\x3q\x5"+
		"q\x812\nq\x3q\x3q\x5q\x816\nq\x3q\x5q\x819\nq\x3q\x3q\x3q\x3q\aq\x81F"+
		"\nq\fq\xEq\x822\vq\x3r\x3r\x5r\x826\nr\x3s\x5s\x829\ns\x3s\x3s\x3s\x5"+
		"s\x82E\ns\x3s\x3s\x5s\x832\ns\x3s\x5s\x835\ns\x3s\x5s\x838\ns\x3s\x5s"+
		"\x83B\ns\x3s\x3s\x3s\x3s\as\x841\ns\fs\xEs\x844\vs\x3t\x3t\x3t\x5t\x849"+
		"\nt\x3t\x5t\x84C\nt\x3t\x3t\x3t\x3t\at\x852\nt\ft\xEt\x855\vt\x3u\x3u"+
		"\x3u\x3u\x5u\x85B\nu\x3v\x3v\x5v\x85F\nv\x3v\x5v\x862\nv\x3v\x5v\x865"+
		"\nv\x3v\x5v\x868\nv\x3v\x3v\x3v\x3v\av\x86E\nv\fv\xEv\x871\vv\x3w\x3w"+
		"\x5w\x875\nw\x3w\x5w\x878\nw\x3w\x5w\x87B\nw\x3w\x3w\x5w\x87F\nw\x3w\x3"+
		"w\x5w\x883\nw\x5w\x885\nw\x3w\x3w\x5w\x889\nw\x3w\x5w\x88C\nw\x3w\x5w"+
		"\x88F\nw\x3w\x3w\x3w\x3w\aw\x895\nw\fw\xEw\x898\vw\x3x\x3x\x5x\x89C\n"+
		"x\x3x\x3x\x5x\x8A0\nx\x6x\x8A2\nx\rx\xEx\x8A3\x3x\x5x\x8A7\nx\x3x\x5x"+
		"\x8AA\nx\x3x\x5x\x8AD\nx\x3x\x3x\x3x\x3x\ax\x8B3\nx\fx\xEx\x8B6\vx\x3"+
		"y\x3y\x5y\x8BA\ny\x3y\x3y\x5y\x8BE\ny\x3z\x5z\x8C1\nz\x3z\x3z\x3{\x5{"+
		"\x8C6\n{\x3{\x5{\x8C9\n{\x3{\x3{\x5{\x8CD\n{\a{\x8CF\n{\f{\xE{\x8D2\v"+
		"{\x3{\x3{\x5{\x8D6\n{\x3{\x3{\x5{\x8DA\n{\x3{\x5{\x8DD\n{\a{\x8DF\n{\f"+
		"{\xE{\x8E2\v{\x3|\x5|\x8E5\n|\x3|\x3|\x5|\x8E9\n|\x3|\x5|\x8EC\n|\x3|"+
		"\x3|\x3}\x3}\x5}\x8F2\n}\x3}\x3}\x5}\x8F6\n}\x3~\x3~\x5~\x8FA\n~\x3~\x3"+
		"~\x5~\x8FE\n~\x3~\x3~\x5~\x902\n~\x3~\a~\x905\n~\f~\xE~\x908\v~\x5~\x90A"+
		"\n~\x3~\x5~\x90D\n~\x3~\x3~\x3\x7F\x3\x7F\x5\x7F\x913\n\x7F\x3\x7F\x3"+
		"\x7F\x5\x7F\x917\n\x7F\x3\x7F\x3\x7F\x5\x7F\x91B\n\x7F\x3\x7F\x3\x7F\x5"+
		"\x7F\x91F\n\x7F\x3\x7F\x5\x7F\x922\n\x7F\x3\x7F\x3\x7F\x5\x7F\x926\n\x7F"+
		"\x3\x7F\x5\x7F\x929\n\x7F\x3\x7F\x5\x7F\x92C\n\x7F\x3\x7F\x5\x7F\x92F"+
		"\n\x7F\x3\x7F\x5\x7F\x932\n\x7F\x3\x7F\x5\x7F\x935\n\x7F\x3\x80\x3\x80"+
		"\x5\x80\x939\n\x80\x3\x80\x3\x80\x3\x81\x3\x81\x5\x81\x93F\n\x81\x3\x81"+
		"\x3\x81\x5\x81\x943\n\x81\x3\x81\a\x81\x946\n\x81\f\x81\xE\x81\x949\v"+
		"\x81\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x5\x82\x950\n\x82\x3\x82\x3\x82"+
		"\x3\x83\x3\x83\x6\x83\x956\n\x83\r\x83\xE\x83\x957\x3\x84\x3\x84\x5\x84"+
		"\x95C\n\x84\x3\x84\x3\x84\x5\x84\x960\n\x84\x3\x84\x3\x84\x5\x84\x964"+
		"\n\x84\x3\x84\x5\x84\x967\n\x84\x3\x85\x3\x85\x3\x86\x3\x86\x3\x86\a\x86"+
		"\x96E\n\x86\f\x86\xE\x86\x971\v\x86\x3\x86\x3\x86\x3\x86\x6\x86\x976\n"+
		"\x86\r\x86\xE\x86\x977\x5\x86\x97A\n\x86\x3\x87\x3\x87\x3\x88\x3\x88\x3"+
		"\x88\a\x88\x981\n\x88\f\x88\xE\x88\x984\v\x88\x3\x89\x3\x89\x5\x89\x988"+
		"\n\x89\x3\x89\x3\x89\x5\x89\x98C\n\x89\x3\x8A\x3\x8A\x5\x8A\x990\n\x8A"+
		"\x3\x8A\x3\x8A\x5\x8A\x994\n\x8A\x3\x8A\x5\x8A\x997\n\x8A\x3\x8B\x3\x8B"+
		"\x3\x8B\x3\x8C\x3\x8C\x3\x8D\x3\x8D\x5\x8D\x9A0\n\x8D\x3\x8D\x5\x8D\x9A3"+
		"\n\x8D\x3\x8D\x3\x8D\x5\x8D\x9A7\n\x8D\x3\x8D\x5\x8D\x9AA\n\x8D\x3\x8E"+
		"\x3\x8E\x3\x8F\x3\x8F\x3\x90\x3\x90\x3\x91\x3\x91\x3\x92\x3\x92\x3\x93"+
		"\x5\x93\x9B7\n\x93\x3\x93\x3\x93\x3\x93\x5\x93\x9BC\n\x93\x3\x93\x5\x93"+
		"\x9BF\n\x93\x3\x94\x3\x94\x5\x94\x9C3\n\x94\x3\x94\x3\x94\x5\x94\x9C7"+
		"\n\x94\a\x94\x9C9\n\x94\f\x94\xE\x94\x9CC\v\x94\x3\x94\x2\x2\x3\xCA\x95"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2"+
		"\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2"+
		"N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2"+
		"l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88"+
		"\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C"+
		"\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0"+
		"\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4"+
		"\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8"+
		"\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC"+
		"\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100"+
		"\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112"+
		"\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124"+
		"\x2\x126\x2\x2\x17\x5\x2\x15\x15\"\"\xAA\xAA\x3\x2%\x30\x4\x2\xB3\xB3"+
		"\xB7\xB7\x3\x2GK\x3\x2z{\a\x2\x11\x11\x15\x15YY\x83\x83\x8E\x8E\x4\x2"+
		"\x91\x92\xBB\xBB\x4\x2\x66h\xA1\xA1\x3\x2\b\t\x4\x2\xA3\xA3\xA9\xA9\x4"+
		"\x2\xBF\xBF\xC8\xC8\x4\x2\xC7\xC7\xCA\xCA\a\x2ZZ\x64\x64\xC1\xC4\xC6\xC6"+
		"\xC9\xC9\x4\x2\x4\x4\n\n\x4\x2\x17\x18\x84\x84\x3\x2\x17\x18\f\x2\x16"+
		"\x16\x19\x19  ##\x34\x34[[__\xA2\xA2\xA7\xA7\xB4\xB4\a\x2\x38\x38LLwx"+
		"\xAE\xAE\xCF\xD5\x4\x2\x3\a\xBD\xBD\x6\x2NNRR\x87\x87\x8C\x8C\v\x2\v\x37"+
		"\x41\x46L\x64iioy|}\x82\x87\x8C\x91\x93\xBC\xB4B\x2\x128\x3\x2\x2\x2\x4"+
		"\x12C\x3\x2\x2\x2\x6\x147\x3\x2\x2\x2\b\x14D\x3\x2\x2\x2\n\x156\x3\x2"+
		"\x2\x2\f\x164\x3\x2\x2\x2\xE\x168\x3\x2\x2\x2\x10\x17B\x3\x2\x2\x2\x12"+
		"\x186\x3\x2\x2\x2\x14\x18A\x3\x2\x2\x2\x16\x18C\x3\x2\x2\x2\x18\x19D\x3"+
		"\x2\x2\x2\x1A\x19F\x3\x2\x2\x2\x1C\x1B7\x3\x2\x2\x2\x1E\x205\x3\x2\x2"+
		"\x2 \x207\x3\x2\x2\x2\"\x214\x3\x2\x2\x2$\x216\x3\x2\x2\x2&\x21A\x3\x2"+
		"\x2\x2(\x21E\x3\x2\x2\x2*\x233\x3\x2\x2\x2,\x245\x3\x2\x2\x2.\x256\x3"+
		"\x2\x2\x2\x30\x263\x3\x2\x2\x2\x32\x28B\x3\x2\x2\x2\x34\x29B\x3\x2\x2"+
		"\x2\x36\x2CB\x3\x2\x2\x2\x38\x2CD\x3\x2\x2\x2:\x2D2\x3\x2\x2\x2<\x2E0"+
		"\x3\x2\x2\x2>\x2ED\x3\x2\x2\x2@\x2F1\x3\x2\x2\x2\x42\x2F8\x3\x2\x2\x2"+
		"\x44\x302\x3\x2\x2\x2\x46\x304\x3\x2\x2\x2H\x310\x3\x2\x2\x2J\x325\x3"+
		"\x2\x2\x2L\x34D\x3\x2\x2\x2N\x36D\x3\x2\x2\x2P\x383\x3\x2\x2\x2R\x387"+
		"\x3\x2\x2\x2T\x3A4\x3\x2\x2\x2V\x3A6\x3\x2\x2\x2X\x3AF\x3\x2\x2\x2Z\x3B1"+
		"\x3\x2\x2\x2\\\x3BA\x3\x2\x2\x2^\x3BF\x3\x2\x2\x2`\x3C3\x3\x2\x2\x2\x62"+
		"\x3D2\x3\x2\x2\x2\x64\x3D8\x3\x2\x2\x2\x66\x3E4\x3\x2\x2\x2h\x3F0\x3\x2"+
		"\x2\x2j\x3F4\x3\x2\x2\x2l\x407\x3\x2\x2\x2n\x413\x3\x2\x2\x2p\x421\x3"+
		"\x2\x2\x2r\x42D\x3\x2\x2\x2t\x43D\x3\x2\x2\x2v\x44D\x3\x2\x2\x2x\x457"+
		"\x3\x2\x2\x2z\x465\x3\x2\x2\x2|\x469\x3\x2\x2\x2~\x471\x3\x2\x2\x2\x80"+
		"\x47B\x3\x2\x2\x2\x82\x48F\x3\x2\x2\x2\x84\x4A3\x3\x2\x2\x2\x86\x4E5\x3"+
		"\x2\x2\x2\x88\x4F8\x3\x2\x2\x2\x8A\x4FA\x3\x2\x2\x2\x8C\x50A\x3\x2\x2"+
		"\x2\x8E\x529\x3\x2\x2\x2\x90\x541\x3\x2\x2\x2\x92\x556\x3\x2\x2\x2\x94"+
		"\x56C\x3\x2\x2\x2\x96\x57F\x3\x2\x2\x2\x98\x584\x3\x2\x2\x2\x9A\x598\x3"+
		"\x2\x2\x2\x9C\x5A9\x3\x2\x2\x2\x9E\x5AB\x3\x2\x2\x2\xA0\x5B3\x3\x2\x2"+
		"\x2\xA2\x5B5\x3\x2\x2\x2\xA4\x5B9\x3\x2\x2\x2\xA6\x5C5\x3\x2\x2\x2\xA8"+
		"\x5D1\x3\x2\x2\x2\xAA\x5ED\x3\x2\x2\x2\xAC\x5F9\x3\x2\x2\x2\xAE\x618\x3"+
		"\x2\x2\x2\xB0\x61A\x3\x2\x2\x2\xB2\x630\x3\x2\x2\x2\xB4\x632\x3\x2\x2"+
		"\x2\xB6\x63F\x3\x2\x2\x2\xB8\x64B\x3\x2\x2\x2\xBA\x657\x3\x2\x2\x2\xBC"+
		"\x65C\x3\x2\x2\x2\xBE\x673\x3\x2\x2\x2\xC0\x680\x3\x2\x2\x2\xC2\x68E\x3"+
		"\x2\x2\x2\xC4\x6A5\x3\x2\x2\x2\xC6\x6AE\x3\x2\x2\x2\xC8\x6B2\x3\x2\x2"+
		"\x2\xCA\x6FC\x3\x2\x2\x2\xCC\x772\x3\x2\x2\x2\xCE\x77B\x3\x2\x2\x2\xD0"+
		"\x789\x3\x2\x2\x2\xD2\x7A4\x3\x2\x2\x2\xD4\x7AD\x3\x2\x2\x2\xD6\x7B9\x3"+
		"\x2\x2\x2\xD8\x7C7\x3\x2\x2\x2\xDA\x7D5\x3\x2\x2\x2\xDC\x7DB\x3\x2\x2"+
		"\x2\xDE\x7DD\x3\x2\x2\x2\xE0\x7FE\x3\x2\x2\x2\xE2\x825\x3\x2\x2\x2\xE4"+
		"\x828\x3\x2\x2\x2\xE6\x845\x3\x2\x2\x2\xE8\x85A\x3\x2\x2\x2\xEA\x85C\x3"+
		"\x2\x2\x2\xEC\x874\x3\x2\x2\x2\xEE\x89B\x3\x2\x2\x2\xF0\x8B7\x3\x2\x2"+
		"\x2\xF2\x8C0\x3\x2\x2\x2\xF4\x8D0\x3\x2\x2\x2\xF6\x8E4\x3\x2\x2\x2\xF8"+
		"\x8EF\x3\x2\x2\x2\xFA\x8F7\x3\x2\x2\x2\xFC\x912\x3\x2\x2\x2\xFE\x936\x3"+
		"\x2\x2\x2\x100\x93C\x3\x2\x2\x2\x102\x94F\x3\x2\x2\x2\x104\x955\x3\x2"+
		"\x2\x2\x106\x959\x3\x2\x2\x2\x108\x968\x3\x2\x2\x2\x10A\x979\x3\x2\x2"+
		"\x2\x10C\x97B\x3\x2\x2\x2\x10E\x97D\x3\x2\x2\x2\x110\x985\x3\x2\x2\x2"+
		"\x112\x98D\x3\x2\x2\x2\x114\x998\x3\x2\x2\x2\x116\x99B\x3\x2\x2\x2\x118"+
		"\x99F\x3\x2\x2\x2\x11A\x9AB\x3\x2\x2\x2\x11C\x9AD\x3\x2\x2\x2\x11E\x9AF"+
		"\x3\x2\x2\x2\x120\x9B1\x3\x2\x2\x2\x122\x9B3\x3\x2\x2\x2\x124\x9B6\x3"+
		"\x2\x2\x2\x126\x9CA\x3\x2\x2\x2\x128\x129\x5\x4\x3\x2\x129\x12A\a\x2\x2"+
		"\x3\x12A\x3\x3\x2\x2\x2\x12B\x12D\a\xF4\x2\x2\x12C\x12B\x3\x2\x2\x2\x12C"+
		"\x12D\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x132\x5\x126\x94\x2\x12F"+
		"\x130\x5\x6\x4\x2\x130\x131\x5\x126\x94\x2\x131\x133\x3\x2\x2\x2\x132"+
		"\x12F\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x135\x3\x2\x2\x2\x134\x136"+
		"\x5\b\x5\x2\x135\x134\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x137\x3\x2"+
		"\x2\x2\x137\x139\x5\x126\x94\x2\x138\x13A\x5\f\a\x2\x139\x138\x3\x2\x2"+
		"\x2\x139\x13A\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B\x13D\x5\x126\x94"+
		"\x2\x13C\x13E\x5\xE\b\x2\x13D\x13C\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E"+
		"\x13F\x3\x2\x2\x2\x13F\x141\x5\x126\x94\x2\x140\x142\x5\x16\f\x2\x141"+
		"\x140\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x145"+
		"\x5\x126\x94\x2\x144\x146\a\xF4\x2\x2\x145\x144\x3\x2\x2\x2\x145\x146"+
		"\x3\x2\x2\x2\x146\x5\x3\x2\x2\x2\x147\x148\a\xB5\x2\x2\x148\x149\a\xF4"+
		"\x2\x2\x149\x14A\a\xD4\x2\x2\x14A\x14B\a\xF4\x2\x2\x14B\x14C\a\x1E\x2"+
		"\x2\x14C\a\x3\x2\x2\x2\x14D\x14E\a\x13\x2\x2\x14E\x150\x5\x126\x94\x2"+
		"\x14F\x151\x5\n\x6\x2\x150\x14F\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152"+
		"\x150\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x155"+
		"\a\x41\x2\x2\x155\t\x3\x2\x2\x2\x156\x158\x5\x104\x83\x2\x157\x159\a\xF4"+
		"\x2\x2\x158\x157\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x15A\x3\x2\x2"+
		"\x2\x15A\x15C\a\xC1\x2\x2\x15B\x15D\a\xF4\x2\x2\x15C\x15B\x3\x2\x2\x2"+
		"\x15C\x15D\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E\x15F\x5\x116\x8C\x2"+
		"\x15F\x160\x5\x126\x94\x2\x160\v\x3\x2\x2\x2\x161\x162\x5\x1A\xE\x2\x162"+
		"\x163\x5\x126\x94\x2\x163\x165\x3\x2\x2\x2\x164\x161\x3\x2\x2\x2\x165"+
		"\x166\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x166\x167\x3\x2\x2\x2\x167\r\x3"+
		"\x2\x2\x2\x168\x16E\x5\x12\n\x2\x169\x16A\x5\x126\x94\x2\x16A\x16B\x5"+
		"\x12\n\x2\x16B\x16D\x3\x2\x2\x2\x16C\x169\x3\x2\x2\x2\x16D\x170\x3\x2"+
		"\x2\x2\x16E\x16C\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F\x171\x3\x2\x2"+
		"\x2\x170\x16E\x3\x2\x2\x2\x171\x172\x5\x126\x94\x2\x172\xF\x3\x2\x2\x2"+
		"\x173\x174\a~\x2\x2\x174\x175\a\xF4\x2\x2\x175\x17C\a\xD2\x2\x2\x176\x177"+
		"\a\x80\x2\x2\x177\x178\a\xF4\x2\x2\x178\x17C\t\x2\x2\x2\x179\x17C\a\x7F"+
		"\x2\x2\x17A\x17C\a\x81\x2\x2\x17B\x173\x3\x2\x2\x2\x17B\x176\x3\x2\x2"+
		"\x2\x17B\x179\x3\x2\x2\x2\x17B\x17A\x3\x2\x2\x2\x17C\x11\x3\x2\x2\x2\x17D"+
		"\x187\x5\x30\x19\x2\x17E\x187\x5:\x1E\x2\x17F\x187\x5\x42\"\x2\x180\x187"+
		"\x5*\x16\x2\x181\x187\x5^\x30\x2\x182\x187\x5\xCCg\x2\x183\x187\x5\x10"+
		"\t\x2\x184\x187\x5\xC0\x61\x2\x185\x187\x5\x14\v\x2\x186\x17D\x3\x2\x2"+
		"\x2\x186\x17E\x3\x2\x2\x2\x186\x17F\x3\x2\x2\x2\x186\x180\x3\x2\x2\x2"+
		"\x186\x181\x3\x2\x2\x2\x186\x182\x3\x2\x2\x2\x186\x183\x3\x2\x2\x2\x186"+
		"\x184\x3\x2\x2\x2\x186\x185\x3\x2\x2\x2\x187\x13\x3\x2\x2\x2\x188\x18B"+
		"\x5n\x38\x2\x189\x18B\x5p\x39\x2\x18A\x188\x3\x2\x2\x2\x18A\x189\x3\x2"+
		"\x2\x2\x18B\x15\x3\x2\x2\x2\x18C\x192\x5\x18\r\x2\x18D\x18E\x5\x126\x94"+
		"\x2\x18E\x18F\x5\x18\r\x2\x18F\x191\x3\x2\x2\x2\x190\x18D\x3\x2\x2\x2"+
		"\x191\x194\x3\x2\x2\x2\x192\x190\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193"+
		"\x195\x3\x2\x2\x2\x194\x192\x3\x2\x2\x2\x195\x196\x5\x126\x94\x2\x196"+
		"\x17\x3\x2\x2\x2\x197\x19E\x5L\'\x2\x198\x19E\x5\x8CG\x2\x199\x19E\x5"+
		"\x8EH\x2\x19A\x19E\x5\x90I\x2\x19B\x19E\x5\xBC_\x2\x19C\x19E\x5\x14\v"+
		"\x2\x19D\x197\x3\x2\x2\x2\x19D\x198\x3\x2\x2\x2\x19D\x199\x3\x2\x2\x2"+
		"\x19D\x19A\x3\x2\x2\x2\x19D\x19B\x3\x2\x2\x2\x19D\x19C\x3\x2\x2\x2\x19E"+
		"\x19\x3\x2\x2\x2\x19F\x1A0\a\xF\x2\x2\x1A0\x1A1\a\xF4\x2\x2\x1A1\x1A3"+
		"\x5\xE8u\x2\x1A2\x1A4\a\xF4\x2\x2\x1A3\x1A2\x3\x2\x2\x2\x1A3\x1A4\x3\x2"+
		"\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5\x1A7\a\xC1\x2\x2\x1A6\x1A8\a\xF4\x2"+
		"\x2\x1A7\x1A6\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2"+
		"\x1A9\x1B4\x5\x116\x8C\x2\x1AA\x1AC\a\xF4\x2\x2\x1AB\x1AA\x3\x2\x2\x2"+
		"\x1AB\x1AC\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1AF\a\t\x2\x2\x1AE"+
		"\x1B0\a\xF4\x2\x2\x1AF\x1AE\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0\x1B1"+
		"\x3\x2\x2\x2\x1B1\x1B3\x5\x116\x8C\x2\x1B2\x1AB\x3\x2\x2\x2\x1B3\x1B6"+
		"\x3\x2\x2\x2\x1B4\x1B2\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5\x1B\x3\x2"+
		"\x2\x2\x1B6\x1B4\x3\x2\x2\x2\x1B7\x1BD\x5\x1E\x10\x2\x1B8\x1B9\x5\x126"+
		"\x94\x2\x1B9\x1BA\x5\x1E\x10\x2\x1BA\x1BC\x3\x2\x2\x2\x1BB\x1B8\x3\x2"+
		"\x2\x2\x1BC\x1BF\x3\x2\x2\x2\x1BD\x1BB\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2"+
		"\x2\x1BE\x1C0\x3\x2\x2\x2\x1BF\x1BD\x3\x2\x2\x2\x1C0\x1C1\x5\x126\x94"+
		"\x2\x1C1\x1D\x3\x2\x2\x2\x1C2\x206\x5\x114\x8B\x2\x1C3\x206\x5 \x11\x2"+
		"\x1C4\x206\x5\x1A\xE\x2\x1C5\x206\x5\"\x12\x2\x1C6\x206\x5$\x13\x2\x1C7"+
		"\x206\x5&\x14\x2\x1C8\x206\x5(\x15\x2\x1C9\x206\x5*\x16\x2\x1CA\x206\x5"+
		".\x18\x2\x1CB\x206\x5\x34\x1B\x2\x1CC\x206\x5\x32\x1A\x2\x1CD\x206\x5"+
		"\x36\x1C\x2\x1CE\x206\x5\x38\x1D\x2\x1CF\x206\x5> \x2\x1D0\x206\x5@!\x2"+
		"\x1D1\x206\x5\x44#\x2\x1D2\x206\x5\xDCo\x2\x1D3\x206\x5\x46$\x2\x1D4\x206"+
		"\x5H%\x2\x1D5\x206\x5J&\x2\x1D6\x206\x5N(\x2\x1D7\x206\x5P)\x2\x1D8\x206"+
		"\x5R*\x2\x1D9\x206\x5T+\x2\x1DA\x206\x5^\x30\x2\x1DB\x206\x5`\x31\x2\x1DC"+
		"\x206\x5\x62\x32\x2\x1DD\x206\x5\x64\x33\x2\x1DE\x206\x5\x66\x34\x2\x1DF"+
		"\x206\x5h\x35\x2\x1E0\x206\x5j\x36\x2\x1E1\x206\x5l\x37\x2\x1E2\x206\x5"+
		"\x14\v\x2\x1E3\x206\x5x=\x2\x1E4\x206\x5z>\x2\x1E5\x206\x5|?\x2\x1E6\x206"+
		"\x5~@\x2\x1E7\x206\x5\x80\x41\x2\x1E8\x206\x5\x82\x42\x2\x1E9\x206\x5"+
		"\x84\x43\x2\x1EA\x206\x5\x8A\x46\x2\x1EB\x206\x5\x92J\x2\x1EC\x206\x5"+
		"\x94K\x2\x1ED\x206\x5\x96L\x2\x1EE\x206\x5\x98M\x2\x1EF\x206\x5\x9CO\x2"+
		"\x1F0\x206\x5\x9EP\x2\x1F1\x206\x5\xA0Q\x2\x1F2\x206\x5\xA2R\x2\x1F3\x206"+
		"\x5\xA4S\x2\x1F4\x206\x5\xA6T\x2\x1F5\x206\x5\xA8U\x2\x1F6\x206\x5\xAA"+
		"V\x2\x1F7\x206\x5\xACW\x2\x1F8\x206\x5\xB4[\x2\x1F9\x206\x5\xB6\\\x2\x1FA"+
		"\x206\x5\xB8]\x2\x1FB\x206\x5\xBA^\x2\x1FC\x206\x5\xBE`\x2\x1FD\x206\x5"+
		"\xC6\x64\x2\x1FE\x206\x5\xC8\x65\x2\x1FF\x206\x5\xCCg\x2\x200\x206\x5"+
		"\xD2j\x2\x201\x206\x5\xD4k\x2\x202\x206\x5\xD6l\x2\x203\x206\x5\xD8m\x2"+
		"\x204\x206\x5\xE2r\x2\x205\x1C2\x3\x2\x2\x2\x205\x1C3\x3\x2\x2\x2\x205"+
		"\x1C4\x3\x2\x2\x2\x205\x1C5\x3\x2\x2\x2\x205\x1C6\x3\x2\x2\x2\x205\x1C7"+
		"\x3\x2\x2\x2\x205\x1C8\x3\x2\x2\x2\x205\x1C9\x3\x2\x2\x2\x205\x1CA\x3"+
		"\x2\x2\x2\x205\x1CB\x3\x2\x2\x2\x205\x1CC\x3\x2\x2\x2\x205\x1CD\x3\x2"+
		"\x2\x2\x205\x1CE\x3\x2\x2\x2\x205\x1CF\x3\x2\x2\x2\x205\x1D0\x3\x2\x2"+
		"\x2\x205\x1D1\x3\x2\x2\x2\x205\x1D2\x3\x2\x2\x2\x205\x1D3\x3\x2\x2\x2"+
		"\x205\x1D4\x3\x2\x2\x2\x205\x1D5\x3\x2\x2\x2\x205\x1D6\x3\x2\x2\x2\x205"+
		"\x1D7\x3\x2\x2\x2\x205\x1D8\x3\x2\x2\x2\x205\x1D9\x3\x2\x2\x2\x205\x1DA"+
		"\x3\x2\x2\x2\x205\x1DB\x3\x2\x2\x2\x205\x1DC\x3\x2\x2\x2\x205\x1DD\x3"+
		"\x2\x2\x2\x205\x1DE\x3\x2\x2\x2\x205\x1DF\x3\x2\x2\x2\x205\x1E0\x3\x2"+
		"\x2\x2\x205\x1E1\x3\x2\x2\x2\x205\x1E2\x3\x2\x2\x2\x205\x1E3\x3\x2\x2"+
		"\x2\x205\x1E4\x3\x2\x2\x2\x205\x1E5\x3\x2\x2\x2\x205\x1E6\x3\x2\x2\x2"+
		"\x205\x1E7\x3\x2\x2\x2\x205\x1E8\x3\x2\x2\x2\x205\x1E9\x3\x2\x2\x2\x205"+
		"\x1EA\x3\x2\x2\x2\x205\x1EB\x3\x2\x2\x2\x205\x1EC\x3\x2\x2\x2\x205\x1ED"+
		"\x3\x2\x2\x2\x205\x1EE\x3\x2\x2\x2\x205\x1EF\x3\x2\x2\x2\x205\x1F0\x3"+
		"\x2\x2\x2\x205\x1F1\x3\x2\x2\x2\x205\x1F2\x3\x2\x2\x2\x205\x1F3\x3\x2"+
		"\x2\x2\x205\x1F4\x3\x2\x2\x2\x205\x1F5\x3\x2\x2\x2\x205\x1F6\x3\x2\x2"+
		"\x2\x205\x1F7\x3\x2\x2\x2\x205\x1F8\x3\x2\x2\x2\x205\x1F9\x3\x2\x2\x2"+
		"\x205\x1FA\x3\x2\x2\x2\x205\x1FB\x3\x2\x2\x2\x205\x1FC\x3\x2\x2\x2\x205"+
		"\x1FD\x3\x2\x2\x2\x205\x1FE\x3\x2\x2\x2\x205\x1FF\x3\x2\x2\x2\x205\x200"+
		"\x3\x2\x2\x2\x205\x201\x3\x2\x2\x2\x205\x202\x3\x2\x2\x2\x205\x203\x3"+
		"\x2\x2\x2\x205\x204\x3\x2\x2\x2\x206\x1F\x3\x2\x2\x2\x207\x208\a\x10\x2"+
		"\x2\x208\x209\a\xF4\x2\x2\x209\x212\x5\xCA\x66\x2\x20A\x20C\a\xF4\x2\x2"+
		"\x20B\x20A\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D"+
		"\x20F\a\t\x2\x2\x20E\x210\a\xF4\x2\x2\x20F\x20E\x3\x2\x2\x2\x20F\x210"+
		"\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211\x213\x5\xCA\x66\x2\x212\x20B\x3"+
		"\x2\x2\x2\x212\x213\x3\x2\x2\x2\x213!\x3\x2\x2\x2\x214\x215\a\x14\x2\x2"+
		"\x215#\x3\x2\x2\x2\x216\x217\a\x1C\x2\x2\x217\x218\a\xF4\x2\x2\x218\x219"+
		"\x5\xCA\x66\x2\x219%\x3\x2\x2\x2\x21A\x21B\a\x1D\x2\x2\x21B\x21C\a\xF4"+
		"\x2\x2\x21C\x21D\x5\xCA\x66\x2\x21D\'\x3\x2\x2\x2\x21E\x22E\a\x1F\x2\x2"+
		"\x21F\x220\a\xF4\x2\x2\x220\x22B\x5\xDAn\x2\x221\x223\a\xF4\x2\x2\x222"+
		"\x221\x3\x2\x2\x2\x222\x223\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2\x224\x226"+
		"\a\t\x2\x2\x225\x227\a\xF4\x2\x2\x226\x225\x3\x2\x2\x2\x226\x227\x3\x2"+
		"\x2\x2\x227\x228\x3\x2\x2\x2\x228\x22A\x5\xDAn\x2\x229\x222\x3\x2\x2\x2"+
		"\x22A\x22D\x3\x2\x2\x2\x22B\x229\x3\x2\x2\x2\x22B\x22C\x3\x2\x2\x2\x22C"+
		"\x22F\x3\x2\x2\x2\x22D\x22B\x3\x2\x2\x2\x22E\x21F\x3\x2\x2\x2\x22E\x22F"+
		"\x3\x2\x2\x2\x22F)\x3\x2\x2\x2\x230\x231\x5\x11C\x8F\x2\x231\x232\a\xF4"+
		"\x2\x2\x232\x234\x3\x2\x2\x2\x233\x230\x3\x2\x2\x2\x233\x234\x3\x2\x2"+
		"\x2\x234\x235\x3\x2\x2\x2\x235\x236\a!\x2\x2\x236\x237\a\xF4\x2\x2\x237"+
		"\x242\x5,\x17\x2\x238\x23A\a\xF4\x2\x2\x239\x238\x3\x2\x2\x2\x239\x23A"+
		"\x3\x2\x2\x2\x23A\x23B\x3\x2\x2\x2\x23B\x23D\a\t\x2\x2\x23C\x23E\a\xF4"+
		"\x2\x2\x23D\x23C\x3\x2\x2\x2\x23D\x23E\x3\x2\x2\x2\x23E\x23F\x3\x2\x2"+
		"\x2\x23F\x241\x5,\x17\x2\x240\x239\x3\x2\x2\x2\x241\x244\x3\x2\x2\x2\x242"+
		"\x240\x3\x2\x2\x2\x242\x243\x3\x2\x2\x2\x243+\x3\x2\x2\x2\x244\x242\x3"+
		"\x2\x2\x2\x245\x247\x5\x104\x83\x2\x246\x248\x5\x11A\x8E\x2\x247\x246"+
		"\x3\x2\x2\x2\x247\x248\x3\x2\x2\x2\x248\x24B\x3\x2\x2\x2\x249\x24A\a\xF4"+
		"\x2\x2\x24A\x24C\x5\x106\x84\x2\x24B\x249\x3\x2\x2\x2\x24B\x24C\x3\x2"+
		"\x2\x2\x24C\x24E\x3\x2\x2\x2\x24D\x24F\a\xF4\x2\x2\x24E\x24D\x3\x2\x2"+
		"\x2\x24E\x24F\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x252\a\xC1\x2\x2"+
		"\x251\x253\a\xF4\x2\x2\x252\x251\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2\x253"+
		"\x254\x3\x2\x2\x2\x254\x255\x5\xCA\x66\x2\x255-\x3\x2\x2\x2\x256\x258"+
		"\a#\x2\x2\x257\x259\a\xF4\x2\x2\x258\x257\x3\x2\x2\x2\x258\x259\x3\x2"+
		"\x2\x2\x259\x25A\x3\x2\x2\x2\x25A\x25C\a\xC1\x2\x2\x25B\x25D\a\xF4\x2"+
		"\x2\x25C\x25B\x3\x2\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2"+
		"\x25E\x25F\x5\xCA\x66\x2\x25F/\x3\x2\x2\x2\x260\x261\x5\x11C\x8F\x2\x261"+
		"\x262\a\xF4\x2\x2\x262\x264\x3\x2\x2\x2\x263\x260\x3\x2\x2\x2\x263\x264"+
		"\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x266\a$\x2\x2\x266\x269\a\xF4"+
		"\x2\x2\x267\x268\a\x8B\x2\x2\x268\x26A\a\xF4\x2\x2\x269\x267\x3\x2\x2"+
		"\x2\x269\x26A\x3\x2\x2\x2\x26A\x270\x3\x2\x2\x2\x26B\x26D\aP\x2\x2\x26C"+
		"\x26E\x5\x11A\x8E\x2\x26D\x26C\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E"+
		"\x271\x3\x2\x2\x2\x26F\x271\a\xA8\x2\x2\x270\x26B\x3\x2\x2\x2\x270\x26F"+
		"\x3\x2\x2\x2\x271\x272\x3\x2\x2\x2\x272\x273\a\xF4\x2\x2\x273\x275\x5"+
		"\x104\x83\x2\x274\x276\x5\x11A\x8E\x2\x275\x274\x3\x2\x2\x2\x275\x276"+
		"\x3\x2\x2\x2\x276\x277\x3\x2\x2\x2\x277\x278\a\xF4\x2\x2\x278\x279\a\x63"+
		"\x2\x2\x279\x27A\a\xF4\x2\x2\x27A\x27F\a\xCF\x2\x2\x27B\x27C\a\xF4\x2"+
		"\x2\x27C\x27D\a\r\x2\x2\x27D\x27E\a\xF4\x2\x2\x27E\x280\a\xCF\x2\x2\x27F"+
		"\x27B\x3\x2\x2\x2\x27F\x280\x3\x2\x2\x2\x280\x285\x3\x2\x2\x2\x281\x283"+
		"\a\xF4\x2\x2\x282\x281\x3\x2\x2\x2\x282\x283\x3\x2\x2\x2\x283\x284\x3"+
		"\x2\x2\x2\x284\x286\x5\xFA~\x2\x285\x282\x3\x2\x2\x2\x285\x286\x3\x2\x2"+
		"\x2\x286\x289\x3\x2\x2\x2\x287\x288\a\xF4\x2\x2\x288\x28A\x5\x106\x84"+
		"\x2\x289\x287\x3\x2\x2\x2\x289\x28A\x3\x2\x2\x2\x28A\x31\x3\x2\x2\x2\x28B"+
		"\x28C\t\x3\x2\x2\x28C\x28D\a\xF4\x2\x2\x28D\x298\x5\x112\x8A\x2\x28E\x290"+
		"\a\xF4\x2\x2\x28F\x28E\x3\x2\x2\x2\x28F\x290\x3\x2\x2\x2\x290\x291\x3"+
		"\x2\x2\x2\x291\x293\a\t\x2\x2\x292\x294\a\xF4\x2\x2\x293\x292\x3\x2\x2"+
		"\x2\x293\x294\x3\x2\x2\x2\x294\x295\x3\x2\x2\x2\x295\x297\x5\x112\x8A"+
		"\x2\x296\x28F\x3\x2\x2\x2\x297\x29A\x3\x2\x2\x2\x298\x296\x3\x2\x2\x2"+
		"\x298\x299\x3\x2\x2\x2\x299\x33\x3\x2\x2\x2\x29A\x298\x3\x2\x2\x2\x29B"+
		"\x29C\a\x31\x2\x2\x29C\x29D\a\xF4\x2\x2\x29D\x29F\x5\xCA\x66\x2\x29E\x2A0"+
		"\a\xF4\x2\x2\x29F\x29E\x3\x2\x2\x2\x29F\x2A0\x3\x2\x2\x2\x2A0\x2A1\x3"+
		"\x2\x2\x2\x2A1\x2A3\a\t\x2\x2\x2A2\x2A4\a\xF4\x2\x2\x2A3\x2A2\x3\x2\x2"+
		"\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4\x2A5\x3\x2\x2\x2\x2A5\x2AE\x5\xCA\x66\x2"+
		"\x2A6\x2A8\a\xF4\x2\x2\x2A7\x2A6\x3\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8"+
		"\x2A9\x3\x2\x2\x2\x2A9\x2AB\a\t\x2\x2\x2AA\x2AC\a\xF4\x2\x2\x2AB\x2AA"+
		"\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AD\x3\x2\x2\x2\x2AD\x2AF\x5"+
		"\xCA\x66\x2\x2AE\x2A7\x3\x2\x2\x2\x2AE\x2AF\x3\x2\x2\x2\x2AF\x35\x3\x2"+
		"\x2\x2\x2B0\x2B1\a\x33\x2\x2\x2B1\x2B3\x5\x126\x94\x2\x2B2\x2B4\x5\x1C"+
		"\xF\x2\x2B3\x2B2\x3\x2\x2\x2\x2B3\x2B4\x3\x2\x2\x2\x2B4\x2B5\x3\x2\x2"+
		"\x2\x2B5\x2B6\a`\x2\x2\x2B6\x2CC\x3\x2\x2\x2\x2B7\x2B8\a\x33\x2\x2\x2B8"+
		"\x2B9\a\xF4\x2\x2\x2B9\x2BA\t\x4\x2\x2\x2BA\x2BB\a\xF4\x2\x2\x2BB\x2BC"+
		"\x5\xCA\x66\x2\x2BC\x2BE\x5\x126\x94\x2\x2BD\x2BF\x5\x1C\xF\x2\x2BE\x2BD"+
		"\x3\x2\x2\x2\x2BE\x2BF\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2\x2\x2C0\x2C1\a`"+
		"\x2\x2\x2C1\x2CC\x3\x2\x2\x2\x2C2\x2C3\a\x33\x2\x2\x2C3\x2C4\x5\x126\x94"+
		"\x2\x2C4\x2C5\x5\x1C\xF\x2\x2C5\x2C6\a`\x2\x2\x2C6\x2C7\a\xF4\x2\x2\x2C7"+
		"\x2C8\t\x4\x2\x2\x2C8\x2C9\a\xF4\x2\x2\x2C9\x2CA\x5\xCA\x66\x2\x2CA\x2CC"+
		"\x3\x2\x2\x2\x2CB\x2B0\x3\x2\x2\x2\x2CB\x2B7\x3\x2\x2\x2\x2CB\x2C2\x3"+
		"\x2\x2\x2\x2CC\x37\x3\x2\x2\x2\x2CD\x2CE\a\x41\x2\x2\x2CE\x39\x3\x2\x2"+
		"\x2\x2CF\x2D0\x5\x11C\x8F\x2\x2D0\x2D1\a\xF4\x2\x2\x2D1\x2D3\x3\x2\x2"+
		"\x2\x2D2\x2CF\x3\x2\x2\x2\x2D2\x2D3\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2"+
		"\x2D4\x2D5\a\x42\x2\x2\x2D5\x2D6\a\xF4\x2\x2\x2D6\x2D7\x5\x104\x83\x2"+
		"\x2D7\x2DB\x5\x126\x94\x2\x2D8\x2DA\x5<\x1F\x2\x2D9\x2D8\x3\x2\x2\x2\x2DA"+
		"\x2DD\x3\x2\x2\x2\x2DB\x2D9\x3\x2\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC\x2DE"+
		"\x3\x2\x2\x2\x2DD\x2DB\x3\x2\x2\x2\x2DE\x2DF\a\x39\x2\x2\x2DF;\x3\x2\x2"+
		"\x2\x2E0\x2E9\x5\x104\x83\x2\x2E1\x2E3\a\xF4\x2\x2\x2E2\x2E1\x3\x2\x2"+
		"\x2\x2E2\x2E3\x3\x2\x2\x2\x2E3\x2E4\x3\x2\x2\x2\x2E4\x2E6\a\xC1\x2\x2"+
		"\x2E5\x2E7\a\xF4\x2\x2\x2E6\x2E5\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7"+
		"\x2E8\x3\x2\x2\x2\x2E8\x2EA\x5\xCA\x66\x2\x2E9\x2E2\x3\x2\x2\x2\x2E9\x2EA"+
		"\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2\x2\x2EB\x2EC\x5\x126\x94\x2\x2EC=\x3\x2"+
		"\x2\x2\x2ED\x2EE\a\x44\x2\x2\x2EE\x2EF\a\xF4\x2\x2\x2EF\x2F0\x5\xCA\x66"+
		"\x2\x2F0?\x3\x2\x2\x2\x2F1\x2F2\a\x45\x2\x2\x2F2\x2F3\a\xF4\x2\x2\x2F3"+
		"\x2F4\x5\xCA\x66\x2\x2F4\x41\x3\x2\x2\x2\x2F5\x2F6\x5\x11C\x8F\x2\x2F6"+
		"\x2F7\a\xF4\x2\x2\x2F7\x2F9\x3\x2\x2\x2\x2F8\x2F5\x3\x2\x2\x2\x2F8\x2F9"+
		"\x3\x2\x2\x2\x2F9\x2FA\x3\x2\x2\x2\x2FA\x2FB\a\x46\x2\x2\x2FB\x2FC\a\xF4"+
		"\x2\x2\x2FC\x2FE\x5\x104\x83\x2\x2FD\x2FF\a\xF4\x2\x2\x2FE\x2FD\x3\x2"+
		"\x2\x2\x2FE\x2FF\x3\x2\x2\x2\x2FF\x300\x3\x2\x2\x2\x300\x301\x5\xFA~\x2"+
		"\x301\x43\x3\x2\x2\x2\x302\x303\t\x5\x2\x2\x303\x45\x3\x2\x2\x2\x304\x305"+
		"\aM\x2\x2\x305\x306\a\xF4\x2\x2\x306\x308\x5\xCA\x66\x2\x307\x309\a\xF4"+
		"\x2\x2\x308\x307\x3\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309\x30A\x3\x2\x2"+
		"\x2\x30A\x30C\a\t\x2\x2\x30B\x30D\a\xF4\x2\x2\x30C\x30B\x3\x2\x2\x2\x30C"+
		"\x30D\x3\x2\x2\x2\x30D\x30E\x3\x2\x2\x2\x30E\x30F\x5\xCA\x66\x2\x30FG"+
		"\x3\x2\x2\x2\x310\x311\aO\x2\x2\x311\x312\a\xF4\x2\x2\x312\x313\a\x35"+
		"\x2\x2\x313\x314\a\xF4\x2\x2\x314\x316\x5\x104\x83\x2\x315\x317\x5\x11A"+
		"\x8E\x2\x316\x315\x3\x2\x2\x2\x316\x317\x3\x2\x2\x2\x317\x318\x3\x2\x2"+
		"\x2\x318\x319\a\xF4\x2\x2\x319\x31A\aX\x2\x2\x31A\x31B\a\xF4\x2\x2\x31B"+
		"\x31C\x5\xCA\x66\x2\x31C\x31E\x5\x126\x94\x2\x31D\x31F\x5\x1C\xF\x2\x31E"+
		"\x31D\x3\x2\x2\x2\x31E\x31F\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320\x323"+
		"\at\x2\x2\x321\x322\a\xF4\x2\x2\x322\x324\x5\x104\x83\x2\x323\x321\x3"+
		"\x2\x2\x2\x323\x324\x3\x2\x2\x2\x324I\x3\x2\x2\x2\x325\x326\aO\x2\x2\x326"+
		"\x327\a\xF4\x2\x2\x327\x329\x5\x104\x83\x2\x328\x32A\x5\x11A\x8E\x2\x329"+
		"\x328\x3\x2\x2\x2\x329\x32A\x3\x2\x2\x2\x32A\x32D\x3\x2\x2\x2\x32B\x32C"+
		"\a\xF4\x2\x2\x32C\x32E\x5\x106\x84\x2\x32D\x32B\x3\x2\x2\x2\x32D\x32E"+
		"\x3\x2\x2\x2\x32E\x330\x3\x2\x2\x2\x32F\x331\a\xF4\x2\x2\x330\x32F\x3"+
		"\x2\x2\x2\x330\x331\x3\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332\x334\a\xC1"+
		"\x2\x2\x333\x335\a\xF4\x2\x2\x334\x333\x3\x2\x2\x2\x334\x335\x3\x2\x2"+
		"\x2\x335\x336\x3\x2\x2\x2\x336\x337\x5\xCA\x66\x2\x337\x338\a\xF4\x2\x2"+
		"\x338\x339\a\xAD\x2\x2\x339\x33A\a\xF4\x2\x2\x33A\x33F\x5\xCA\x66\x2\x33B"+
		"\x33C\a\xF4\x2\x2\x33C\x33D\a\xA5\x2\x2\x33D\x33E\a\xF4\x2\x2\x33E\x340"+
		"\x5\xCA\x66\x2\x33F\x33B\x3\x2\x2\x2\x33F\x340\x3\x2\x2\x2\x340\x341\x3"+
		"\x2\x2\x2\x341\x343\x5\x126\x94\x2\x342\x344\x5\x1C\xF\x2\x343\x342\x3"+
		"\x2\x2\x2\x343\x344\x3\x2\x2\x2\x344\x345\x3\x2\x2\x2\x345\x348\at\x2"+
		"\x2\x346\x347\a\xF4\x2\x2\x347\x349\x5\x104\x83\x2\x348\x346\x3\x2\x2"+
		"\x2\x348\x349\x3\x2\x2\x2\x349K\x3\x2\x2\x2\x34A\x34B\x5\x11C\x8F\x2\x34B"+
		"\x34C\a\xF4\x2\x2\x34C\x34E\x3\x2\x2\x2\x34D\x34A\x3\x2\x2\x2\x34D\x34E"+
		"\x3\x2\x2\x2\x34E\x351\x3\x2\x2\x2\x34F\x350\a\xA4\x2\x2\x350\x352\a\xF4"+
		"\x2\x2\x351\x34F\x3\x2\x2\x2\x351\x352\x3\x2\x2\x2\x352\x353\x3\x2\x2"+
		"\x2\x353\x355\aP\x2\x2\x354\x356\a\xF4\x2\x2\x355\x354\x3\x2\x2\x2\x355"+
		"\x356\x3\x2\x2\x2\x356\x357\x3\x2\x2\x2\x357\x359\x5\x104\x83\x2\x358"+
		"\x35A\x5\x11A\x8E\x2\x359\x358\x3\x2\x2\x2\x359\x35A\x3\x2\x2\x2\x35A"+
		"\x35F\x3\x2\x2\x2\x35B\x35D\a\xF4\x2\x2\x35C\x35B\x3\x2\x2\x2\x35C\x35D"+
		"\x3\x2\x2\x2\x35D\x35E\x3\x2\x2\x2\x35E\x360\x5\xFA~\x2\x35F\x35C\x3\x2"+
		"\x2\x2\x35F\x360\x3\x2\x2\x2\x360\x365\x3\x2\x2\x2\x361\x363\a\xF4\x2"+
		"\x2\x362\x361\x3\x2\x2\x2\x362\x363\x3\x2\x2\x2\x363\x364\x3\x2\x2\x2"+
		"\x364\x366\x5\x106\x84\x2\x365\x362\x3\x2\x2\x2\x365\x366\x3\x2\x2\x2"+
		"\x366\x367\x3\x2\x2\x2\x367\x369\x5\x126\x94\x2\x368\x36A\x5\x1C\xF\x2"+
		"\x369\x368\x3\x2\x2\x2\x369\x36A\x3\x2\x2\x2\x36A\x36B\x3\x2\x2\x2\x36B"+
		"\x36C\a:\x2\x2\x36CM\x3\x2\x2\x2\x36D\x36E\aQ\x2\x2\x36E\x36F\a\xF4\x2"+
		"\x2\x36F\x371\x5\xDAn\x2\x370\x372\a\xF4\x2\x2\x371\x370\x3\x2\x2\x2\x371"+
		"\x372\x3\x2\x2\x2\x372\x373\x3\x2\x2\x2\x373\x375\a\t\x2\x2\x374\x376"+
		"\a\xF4\x2\x2\x375\x374\x3\x2\x2\x2\x375\x376\x3\x2\x2\x2\x376\x378\x3"+
		"\x2\x2\x2\x377\x379\x5\xCA\x66\x2\x378\x377\x3\x2\x2\x2\x378\x379\x3\x2"+
		"\x2\x2\x379\x37B\x3\x2\x2\x2\x37A\x37C\a\xF4\x2\x2\x37B\x37A\x3\x2\x2"+
		"\x2\x37B\x37C\x3\x2\x2\x2\x37C\x37D\x3\x2\x2\x2\x37D\x37F\a\t\x2\x2\x37E"+
		"\x380\a\xF4\x2\x2\x37F\x37E\x3\x2\x2\x2\x37F\x380\x3\x2\x2\x2\x380\x381"+
		"\x3\x2\x2\x2\x381\x382\x5\xCA\x66\x2\x382O\x3\x2\x2\x2\x383\x384\aS\x2"+
		"\x2\x384\x385\a\xF4\x2\x2\x385\x386\x5\xCA\x66\x2\x386Q\x3\x2\x2\x2\x387"+
		"\x388\aT\x2\x2\x388\x389\a\xF4\x2\x2\x389\x38A\x5\xCA\x66\x2\x38AS\x3"+
		"\x2\x2\x2\x38B\x38C\aU\x2\x2\x38C\x38D\a\xF4\x2\x2\x38D\x38E\x5X-\x2\x38E"+
		"\x38F\a\xF4\x2\x2\x38F\x390\a\xAB\x2\x2\x390\x391\a\xF4\x2\x2\x391\x396"+
		"\x5\x1E\x10\x2\x392\x393\a\xF4\x2\x2\x393\x394\a\x36\x2\x2\x394\x395\a"+
		"\xF4\x2\x2\x395\x397\x5\x1E\x10\x2\x396\x392\x3\x2\x2\x2\x396\x397\x3"+
		"\x2\x2\x2\x397\x3A5\x3\x2\x2\x2\x398\x39C\x5V,\x2\x399\x39B\x5Z.\x2\x39A"+
		"\x399\x3\x2\x2\x2\x39B\x39E\x3\x2\x2\x2\x39C\x39A\x3\x2\x2\x2\x39C\x39D"+
		"\x3\x2\x2\x2\x39D\x3A0\x3\x2\x2\x2\x39E\x39C\x3\x2\x2\x2\x39F\x3A1\x5"+
		"\\/\x2\x3A0\x39F\x3\x2\x2\x2\x3A0\x3A1\x3\x2\x2\x2\x3A1\x3A2\x3\x2\x2"+
		"\x2\x3A2\x3A3\a;\x2\x2\x3A3\x3A5\x3\x2\x2\x2\x3A4\x38B\x3\x2\x2\x2\x3A4"+
		"\x398\x3\x2\x2\x2\x3A5U\x3\x2\x2\x2\x3A6\x3A7\aU\x2\x2\x3A7\x3A8\a\xF4"+
		"\x2\x2\x3A8\x3A9\x5X-\x2\x3A9\x3AA\a\xF4\x2\x2\x3AA\x3AB\a\xAB\x2\x2\x3AB"+
		"\x3AD\x5\x126\x94\x2\x3AC\x3AE\x5\x1C\xF\x2\x3AD\x3AC\x3\x2\x2\x2\x3AD"+
		"\x3AE\x3\x2\x2\x2\x3AEW\x3\x2\x2\x2\x3AF\x3B0\x5\xCA\x66\x2\x3B0Y\x3\x2"+
		"\x2\x2\x3B1\x3B2\a\x37\x2\x2\x3B2\x3B3\a\xF4\x2\x2\x3B3\x3B4\x5X-\x2\x3B4"+
		"\x3B5\a\xF4\x2\x2\x3B5\x3B6\a\xAB\x2\x2\x3B6\x3B8\x5\x126\x94\x2\x3B7"+
		"\x3B9\x5\x1C\xF\x2\x3B8\x3B7\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2\x3B9[\x3"+
		"\x2\x2\x2\x3BA\x3BB\a\x36\x2\x2\x3BB\x3BD\x5\x126\x94\x2\x3BC\x3BE\x5"+
		"\x1C\xF\x2\x3BD\x3BC\x3\x2\x2\x2\x3BD\x3BE\x3\x2\x2\x2\x3BE]\x3\x2\x2"+
		"\x2\x3BF\x3C0\aW\x2\x2\x3C0\x3C1\a\xF4\x2\x2\x3C1\x3C2\x5\x104\x83\x2"+
		"\x3C2_\x3\x2\x2\x2\x3C3\x3C4\aY\x2\x2\x3C4\x3C5\a\xF4\x2\x2\x3C5\x3CE"+
		"\x5\xDAn\x2\x3C6\x3C8\a\xF4\x2\x2\x3C7\x3C6\x3\x2\x2\x2\x3C7\x3C8\x3\x2"+
		"\x2\x2\x3C8\x3C9\x3\x2\x2\x2\x3C9\x3CB\a\t\x2\x2\x3CA\x3CC\a\xF4\x2\x2"+
		"\x3CB\x3CA\x3\x2\x2\x2\x3CB\x3CC\x3\x2\x2\x2\x3CC\x3CD\x3\x2\x2\x2\x3CD"+
		"\x3CF\x5\xCA\x66\x2\x3CE\x3C7\x3\x2\x2\x2\x3CF\x3D0\x3\x2\x2\x2\x3D0\x3CE"+
		"\x3\x2\x2\x2\x3D0\x3D1\x3\x2\x2\x2\x3D1\x61\x3\x2\x2\x2\x3D2\x3D3\a\\"+
		"\x2\x2\x3D3\x3D4\a\xF4\x2\x2\x3D4\x3D5\x5\xCA\x66\x2\x3D5\x63\x3\x2\x2"+
		"\x2\x3D6\x3D7\a\x62\x2\x2\x3D7\x3D9\a\xF4\x2\x2\x3D8\x3D6\x3\x2\x2\x2"+
		"\x3D8\x3D9\x3\x2\x2\x2\x3D9\x3DA\x3\x2\x2\x2\x3DA\x3DC\x5\xE8u\x2\x3DB"+
		"\x3DD\a\xF4\x2\x2\x3DC\x3DB\x3\x2\x2\x2\x3DC\x3DD\x3\x2\x2\x2\x3DD\x3DE"+
		"\x3\x2\x2\x2\x3DE\x3E0\a\xC1\x2\x2\x3DF\x3E1\a\xF4\x2\x2\x3E0\x3DF\x3"+
		"\x2\x2\x2\x3E0\x3E1\x3\x2\x2\x2\x3E1\x3E2\x3\x2\x2\x2\x3E2\x3E3\x5\xCA"+
		"\x66\x2\x3E3\x65\x3\x2\x2\x2\x3E4\x3E5\a\x65\x2\x2\x3E5\x3E6\a\xF4\x2"+
		"\x2\x3E6\x3E8\x5\xDAn\x2\x3E7\x3E9\a\xF4\x2\x2\x3E8\x3E7\x3\x2\x2\x2\x3E8"+
		"\x3E9\x3\x2\x2\x2\x3E9\x3EA\x3\x2\x2\x2\x3EA\x3EC\a\t\x2\x2\x3EB\x3ED"+
		"\a\xF4\x2\x2\x3EC\x3EB\x3\x2\x2\x2\x3EC\x3ED\x3\x2\x2\x2\x3ED\x3EE\x3"+
		"\x2\x2\x2\x3EE\x3EF\x5\xCA\x66\x2\x3EFg\x3\x2\x2\x2\x3F0\x3F1\a]\x2\x2"+
		"\x3F1\x3F2\a\xF4\x2\x2\x3F2\x3F3\x5\xCA\x66\x2\x3F3i\x3\x2\x2\x2\x3F4"+
		"\x3F5\a^\x2\x2\x3F5\x3F6\a\xF4\x2\x2\x3F6\x405\x5\xCA\x66\x2\x3F7\x3F9"+
		"\a\xF4\x2\x2\x3F8\x3F7\x3\x2\x2\x2\x3F8\x3F9\x3\x2\x2\x2\x3F9\x3FA\x3"+
		"\x2\x2\x2\x3FA\x3FC\a\t\x2\x2\x3FB\x3FD\a\xF4\x2\x2\x3FC\x3FB\x3\x2\x2"+
		"\x2\x3FC\x3FD\x3\x2\x2\x2\x3FD\x3FE\x3\x2\x2\x2\x3FE\x403\x5\xCA\x66\x2"+
		"\x3FF\x400\a\xF4\x2\x2\x400\x401\a\xAD\x2\x2\x401\x402\a\xF4\x2\x2\x402"+
		"\x404\x5\xCA\x66\x2\x403\x3FF\x3\x2\x2\x2\x403\x404\x3\x2\x2\x2\x404\x406"+
		"\x3\x2\x2\x2\x405\x3F8\x3\x2\x2\x2\x405\x406\x3\x2\x2\x2\x406k\x3\x2\x2"+
		"\x2\x407\x408\ai\x2\x2\x408\x409\a\xF4\x2\x2\x409\x40B\x5\xE8u\x2\x40A"+
		"\x40C\a\xF4\x2\x2\x40B\x40A\x3\x2\x2\x2\x40B\x40C\x3\x2\x2\x2\x40C\x40D"+
		"\x3\x2\x2\x2\x40D\x40F\a\xC1\x2\x2\x40E\x410\a\xF4\x2\x2\x40F\x40E\x3"+
		"\x2\x2\x2\x40F\x410\x3\x2\x2\x2\x410\x411\x3\x2\x2\x2\x411\x412\x5\xCA"+
		"\x66\x2\x412m\x3\x2\x2\x2\x413\x415\aj\x2\x2\x414\x416\a\xF4\x2\x2\x415"+
		"\x414\x3\x2\x2\x2\x415\x416\x3\x2\x2\x2\x416\x417\x3\x2\x2\x2\x417\x419"+
		"\x5\x104\x83\x2\x418\x41A\a\xF4\x2\x2\x419\x418\x3\x2\x2\x2\x419\x41A"+
		"\x3\x2\x2\x2\x41A\x41B\x3\x2\x2\x2\x41B\x41D\a\xC1\x2\x2\x41C\x41E\a\xF4"+
		"\x2\x2\x41D\x41C\x3\x2\x2\x2\x41D\x41E\x3\x2\x2\x2\x41E\x41F\x3\x2\x2"+
		"\x2\x41F\x420\x5\xCA\x66\x2\x420o\x3\x2\x2\x2\x421\x425\x5r:\x2\x422\x424"+
		"\x5t;\x2\x423\x422\x3\x2\x2\x2\x424\x427\x3\x2\x2\x2\x425\x423\x3\x2\x2"+
		"\x2\x425\x426\x3\x2\x2\x2\x426\x429\x3\x2\x2\x2\x427\x425\x3\x2\x2\x2"+
		"\x428\x42A\x5v<\x2\x429\x428\x3\x2\x2\x2\x429\x42A\x3\x2\x2\x2\x42A\x42B"+
		"\x3\x2\x2\x2\x42B\x42C\an\x2\x2\x42Cq\x3\x2\x2\x2\x42D\x42F\ak\x2\x2\x42E"+
		"\x430\a\xF4\x2\x2\x42F\x42E\x3\x2\x2\x2\x42F\x430\x3\x2\x2\x2\x430\x431"+
		"\x3\x2\x2\x2\x431\x432\x5X-\x2\x432\x433\a\xF4\x2\x2\x433\x434\a\xAB\x2"+
		"\x2\x434\x43A\x5\x126\x94\x2\x435\x439\x5\xE\b\x2\x436\x439\x5\x16\f\x2"+
		"\x437\x439\x5\x1C\xF\x2\x438\x435\x3\x2\x2\x2\x438\x436\x3\x2\x2\x2\x438"+
		"\x437\x3\x2\x2\x2\x439\x43C\x3\x2\x2\x2\x43A\x438\x3\x2\x2\x2\x43A\x43B"+
		"\x3\x2\x2\x2\x43Bs\x3\x2\x2\x2\x43C\x43A\x3\x2\x2\x2\x43D\x43F\al\x2\x2"+
		"\x43E\x440\a\xF4\x2\x2\x43F\x43E\x3\x2\x2\x2\x43F\x440\x3\x2\x2\x2\x440"+
		"\x441\x3\x2\x2\x2\x441\x442\x5X-\x2\x442\x443\a\xF4\x2\x2\x443\x444\a"+
		"\xAB\x2\x2\x444\x44A\x5\x126\x94\x2\x445\x449\x5\xE\b\x2\x446\x449\x5"+
		"\x16\f\x2\x447\x449\x5\x1C\xF\x2\x448\x445\x3\x2\x2\x2\x448\x446\x3\x2"+
		"\x2\x2\x448\x447\x3\x2\x2\x2\x449\x44C\x3\x2\x2\x2\x44A\x448\x3\x2\x2"+
		"\x2\x44A\x44B\x3\x2\x2\x2\x44Bu\x3\x2\x2\x2\x44C\x44A\x3\x2\x2\x2\x44D"+
		"\x44E\am\x2\x2\x44E\x454\x5\x126\x94\x2\x44F\x453\x5\xE\b\x2\x450\x453"+
		"\x5\x16\f\x2\x451\x453\x5\x1C\xF\x2\x452\x44F\x3\x2\x2\x2\x452\x450\x3"+
		"\x2\x2\x2\x452\x451\x3\x2\x2\x2\x453\x456\x3\x2\x2\x2\x454\x452\x3\x2"+
		"\x2\x2\x454\x455\x3\x2\x2\x2\x455w\x3\x2\x2\x2\x456\x454\x3\x2\x2\x2\x457"+
		"\x459\ap\x2\x2\x458\x45A\a\xF4\x2\x2\x459\x458\x3\x2\x2\x2\x459\x45A\x3"+
		"\x2\x2\x2\x45A\x45B\x3\x2\x2\x2\x45B\x45D\a\xC5\x2\x2\x45C\x45E\a\xF4"+
		"\x2\x2\x45D\x45C\x3\x2\x2\x2\x45D\x45E\x3\x2\x2\x2\x45E\x45F\x3\x2\x2"+
		"\x2\x45F\x461\x5\xF4{\x2\x460\x462\a\xF4\x2\x2\x461\x460\x3\x2\x2\x2\x461"+
		"\x462\x3\x2\x2\x2\x462\x463\x3\x2\x2\x2\x463\x464\a\xCC\x2\x2\x464y\x3"+
		"\x2\x2\x2\x465\x466\aq\x2\x2\x466\x467\a\xF4\x2\x2\x467\x468\x5\xCA\x66"+
		"\x2\x468{\x3\x2\x2\x2\x469\x46A\as\x2\x2\x46A\x46B\a\xF4\x2\x2\x46B\x46C"+
		"\x5\xCA\x66\x2\x46C\x46D\a\xF4\x2\x2\x46D\x46E\a\x12\x2\x2\x46E\x46F\a"+
		"\xF4\x2\x2\x46F\x470\x5\xCA\x66\x2\x470}\x3\x2\x2\x2\x471\x472\t\x6\x2"+
		"\x2\x472\x479\a\xF4\x2\x2\x473\x474\aT\x2\x2\x474\x475\a\xF4\x2\x2\x475"+
		"\x47A\x5\xCA\x66\x2\x476\x477\a\x96\x2\x2\x477\x478\a\xF4\x2\x2\x478\x47A"+
		"\at\x2\x2\x479\x473\x3\x2\x2\x2\x479\x476\x3\x2\x2\x2\x47A\x7F\x3\x2\x2"+
		"\x2\x47B\x47C\ay\x2\x2\x47C\x47D\a\xF4\x2\x2\x47D\x47E\x5\xCA\x66\x2\x47E"+
		"\x47F\a\xF4\x2\x2\x47F\x480\aT\x2\x2\x480\x481\a\xF4\x2\x2\x481\x48C\x5"+
		"\xCA\x66\x2\x482\x484\a\xF4\x2\x2\x483\x482\x3\x2\x2\x2\x483\x484\x3\x2"+
		"\x2\x2\x484\x485\x3\x2\x2\x2\x485\x487\a\t\x2\x2\x486\x488\a\xF4\x2\x2"+
		"\x487\x486\x3\x2\x2\x2\x487\x488\x3\x2\x2\x2\x488\x489\x3\x2\x2\x2\x489"+
		"\x48B\x5\xCA\x66\x2\x48A\x483\x3\x2\x2\x2\x48B\x48E\x3\x2\x2\x2\x48C\x48A"+
		"\x3\x2\x2\x2\x48C\x48D\x3\x2\x2\x2\x48D\x81\x3\x2\x2\x2\x48E\x48C\x3\x2"+
		"\x2\x2\x48F\x490\ay\x2\x2\x490\x491\a\xF4\x2\x2\x491\x492\x5\xCA\x66\x2"+
		"\x492\x493\a\xF4\x2\x2\x493\x494\aS\x2\x2\x494\x495\a\xF4\x2\x2\x495\x4A0"+
		"\x5\xCA\x66\x2\x496\x498\a\xF4\x2\x2\x497\x496\x3\x2\x2\x2\x497\x498\x3"+
		"\x2\x2\x2\x498\x499\x3\x2\x2\x2\x499\x49B\a\t\x2\x2\x49A\x49C\a\xF4\x2"+
		"\x2\x49B\x49A\x3\x2\x2\x2\x49B\x49C\x3\x2\x2\x2\x49C\x49D\x3\x2\x2\x2"+
		"\x49D\x49F\x5\xCA\x66\x2\x49E\x497\x3\x2\x2\x2\x49F\x4A2\x3\x2\x2\x2\x4A0"+
		"\x49E\x3\x2\x2\x2\x4A0\x4A1\x3\x2\x2\x2\x4A1\x83\x3\x2\x2\x2\x4A2\x4A0"+
		"\x3\x2\x2\x2\x4A3\x4A4\a|\x2\x2\x4A4\x4A5\a\xF4\x2\x2\x4A5\x4A6\x5\xCA"+
		"\x66\x2\x4A6\x4A7\a\xF4\x2\x2\x4A7\x4A8\aO\x2\x2\x4A8\x4A9\a\xF4\x2\x2"+
		"\x4A9\x4AE\t\a\x2\x2\x4AA\x4AB\a\xF4\x2\x2\x4AB\x4AC\a\v\x2\x2\x4AC\x4AD"+
		"\a\xF4\x2\x2\x4AD\x4AF\t\b\x2\x2\x4AE\x4AA\x3\x2\x2\x2\x4AE\x4AF\x3\x2"+
		"\x2\x2\x4AF\x4B2\x3\x2\x2\x2\x4B0\x4B1\a\xF4\x2\x2\x4B1\x4B3\t\t\x2\x2"+
		"\x4B2\x4B0\x3\x2\x2\x2\x4B2\x4B3\x3\x2\x2\x2\x4B3\x4B4\x3\x2\x2\x2\x4B4"+
		"\x4B5\a\xF4\x2\x2\x4B5\x4B6\a\x12\x2\x2\x4B6\x4B7\a\xF4\x2\x2\x4B7\x4C2"+
		"\x5\xDAn\x2\x4B8\x4B9\a\xF4\x2\x2\x4B9\x4BB\a\x61\x2\x2\x4BA\x4BC\a\xF4"+
		"\x2\x2\x4BB\x4BA\x3\x2\x2\x2\x4BB\x4BC\x3\x2\x2\x2\x4BC\x4BD\x3\x2\x2"+
		"\x2\x4BD\x4BF\a\xC1\x2\x2\x4BE\x4C0\a\xF4\x2\x2\x4BF\x4BE\x3\x2\x2\x2"+
		"\x4BF\x4C0\x3\x2\x2\x2\x4C0\x4C1\x3\x2\x2\x2\x4C1\x4C3\x5\xCA\x66\x2\x4C2"+
		"\x4B8\x3\x2\x2\x2\x4C2\x4C3\x3\x2\x2\x2\x4C3\x85\x3\x2\x2\x2\x4C4\x4D1"+
		"\x5\x88\x45\x2\x4C5\x4C7\a\xF4\x2\x2\x4C6\x4C5\x3\x2\x2\x2\x4C6\x4C7\x3"+
		"\x2\x2\x2\x4C7\x4C8\x3\x2\x2\x2\x4C8\x4CA\t\n\x2\x2\x4C9\x4CB\a\xF4\x2"+
		"\x2\x4CA\x4C9\x3\x2\x2\x2\x4CA\x4CB\x3\x2\x2\x2\x4CB\x4CD\x3\x2\x2\x2"+
		"\x4CC\x4CE\x5\x88\x45\x2\x4CD\x4CC\x3\x2\x2\x2\x4CD\x4CE\x3\x2\x2\x2\x4CE"+
		"\x4D0\x3\x2\x2\x2\x4CF\x4C6\x3\x2\x2\x2\x4D0\x4D3\x3\x2\x2\x2\x4D1\x4CF"+
		"\x3\x2\x2\x2\x4D1\x4D2\x3\x2\x2\x2\x4D2\x4E6\x3\x2\x2\x2\x4D3\x4D1\x3"+
		"\x2\x2\x2\x4D4\x4D6\x5\x88\x45\x2\x4D5\x4D4\x3\x2\x2\x2\x4D5\x4D6\x3\x2"+
		"\x2\x2\x4D6\x4E1\x3\x2\x2\x2\x4D7\x4D9\a\xF4\x2\x2\x4D8\x4D7\x3\x2\x2"+
		"\x2\x4D8\x4D9\x3\x2\x2\x2\x4D9\x4DA\x3\x2\x2\x2\x4DA\x4DC\t\n\x2\x2\x4DB"+
		"\x4DD\a\xF4\x2\x2\x4DC\x4DB\x3\x2\x2\x2\x4DC\x4DD\x3\x2\x2\x2\x4DD\x4DF"+
		"\x3\x2\x2\x2\x4DE\x4E0\x5\x88\x45\x2\x4DF\x4DE\x3\x2\x2\x2\x4DF\x4E0\x3"+
		"\x2\x2\x2\x4E0\x4E2\x3\x2\x2\x2\x4E1\x4D8\x3\x2\x2\x2\x4E2\x4E3\x3\x2"+
		"\x2\x2\x4E3\x4E1\x3\x2\x2\x2\x4E3\x4E4\x3\x2\x2\x2\x4E4\x4E6\x3\x2\x2"+
		"\x2\x4E5\x4C4\x3\x2\x2\x2\x4E5\x4D5\x3\x2\x2\x2\x4E6\x87\x3\x2\x2\x2\x4E7"+
		"\x4F9\x5\xCA\x66\x2\x4E8\x4F6\t\v\x2\x2\x4E9\x4EB\a\xF4\x2\x2\x4EA\x4E9"+
		"\x3\x2\x2\x2\x4EA\x4EB\x3\x2\x2\x2\x4EB\x4EC\x3\x2\x2\x2\x4EC\x4EE\a\xC5"+
		"\x2\x2\x4ED\x4EF\a\xF4\x2\x2\x4EE\x4ED\x3\x2\x2\x2\x4EE\x4EF\x3\x2\x2"+
		"\x2\x4EF\x4F0\x3\x2\x2\x2\x4F0\x4F2\x5\xF4{\x2\x4F1\x4F3\a\xF4\x2\x2\x4F2"+
		"\x4F1\x3\x2\x2\x2\x4F2\x4F3\x3\x2\x2\x2\x4F3\x4F4\x3\x2\x2\x2\x4F4\x4F5"+
		"\a\xCC\x2\x2\x4F5\x4F7\x3\x2\x2\x2\x4F6\x4EA\x3\x2\x2\x2\x4F6\x4F7\x3"+
		"\x2\x2\x2\x4F7\x4F9\x3\x2\x2\x2\x4F8\x4E7\x3\x2\x2\x2\x4F8\x4E8\x3\x2"+
		"\x2\x2\x4F9\x89\x3\x2\x2\x2\x4FA\x4FB\a\x86\x2\x2\x4FB\x4FC\a\xF4\x2\x2"+
		"\x4FC\x4FE\x5\xDAn\x2\x4FD\x4FF\a\xF4\x2\x2\x4FE\x4FD\x3\x2\x2\x2\x4FE"+
		"\x4FF\x3\x2\x2\x2\x4FF\x500\x3\x2\x2\x2\x500\x505\a\t\x2\x2\x501\x503"+
		"\a\xF4\x2\x2\x502\x501\x3\x2\x2\x2\x502\x503\x3\x2\x2\x2\x503\x504\x3"+
		"\x2\x2\x2\x504\x506\x5\x86\x44\x2\x505\x502\x3\x2\x2\x2\x505\x506\x3\x2"+
		"\x2\x2\x506\x8B\x3\x2\x2\x2\x507\x508\x5\x11C\x8F\x2\x508\x509\a\xF4\x2"+
		"\x2\x509\x50B\x3\x2\x2\x2\x50A\x507\x3\x2\x2\x2\x50A\x50B\x3\x2\x2\x2"+
		"\x50B\x50E\x3\x2\x2\x2\x50C\x50D\a\xA4\x2\x2\x50D\x50F\a\xF4\x2\x2\x50E"+
		"\x50C\x3\x2\x2\x2\x50E\x50F\x3\x2\x2\x2\x50F\x510\x3\x2\x2\x2\x510\x511"+
		"\a\x88\x2\x2\x511\x512\a\xF4\x2\x2\x512\x514\x5\x104\x83\x2\x513\x515"+
		"\x5\x11A\x8E\x2\x514\x513\x3\x2\x2\x2\x514\x515\x3\x2\x2\x2\x515\x51A"+
		"\x3\x2\x2\x2\x516\x518\a\xF4\x2\x2\x517\x516\x3\x2\x2\x2\x517\x518\x3"+
		"\x2\x2\x2\x518\x519\x3\x2\x2\x2\x519\x51B\x5\xFA~\x2\x51A\x517\x3\x2\x2"+
		"\x2\x51A\x51B\x3\x2\x2\x2\x51B\x51E\x3\x2\x2\x2\x51C\x51D\a\xF4\x2\x2"+
		"\x51D\x51F\x5\x106\x84\x2\x51E\x51C\x3\x2\x2\x2\x51E\x51F\x3\x2\x2\x2"+
		"\x51F\x520\x3\x2\x2\x2\x520\x522\x5\x126\x94\x2\x521\x523\x5\x1C\xF\x2"+
		"\x522\x521\x3\x2\x2\x2\x522\x523\x3\x2\x2\x2\x523\x524\x3\x2\x2\x2\x524"+
		"\x525\a<\x2\x2\x525\x8D\x3\x2\x2\x2\x526\x527\x5\x11C\x8F\x2\x527\x528"+
		"\a\xF4\x2\x2\x528\x52A\x3\x2\x2\x2\x529\x526\x3\x2\x2\x2\x529\x52A\x3"+
		"\x2\x2\x2\x52A\x52D\x3\x2\x2\x2\x52B\x52C\a\xA4\x2\x2\x52C\x52E\a\xF4"+
		"\x2\x2\x52D\x52B\x3\x2\x2\x2\x52D\x52E\x3\x2\x2\x2\x52E\x52F\x3\x2\x2"+
		"\x2\x52F\x530\a\x8A\x2\x2\x530\x531\a\xF4\x2\x2\x531\x536\x5\x104\x83"+
		"\x2\x532\x534\a\xF4\x2\x2\x533\x532\x3\x2\x2\x2\x533\x534\x3\x2\x2\x2"+
		"\x534\x535\x3\x2\x2\x2\x535\x537\x5\xFA~\x2\x536\x533\x3\x2\x2\x2\x536"+
		"\x537\x3\x2\x2\x2\x537\x538\x3\x2\x2\x2\x538\x53A\x5\x126\x94\x2\x539"+
		"\x53B\x5\x1C\xF\x2\x53A\x539\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2\x53B\x53C"+
		"\x3\x2\x2\x2\x53C\x53D\a<\x2\x2\x53D\x8F\x3\x2\x2\x2\x53E\x53F\x5\x11C"+
		"\x8F\x2\x53F\x540\a\xF4\x2\x2\x540\x542\x3\x2\x2\x2\x541\x53E\x3\x2\x2"+
		"\x2\x541\x542\x3\x2\x2\x2\x542\x545\x3\x2\x2\x2\x543\x544\a\xA4\x2\x2"+
		"\x544\x546\a\xF4\x2\x2\x545\x543\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546"+
		"\x547\x3\x2\x2\x2\x547\x548\a\x89\x2\x2\x548\x549\a\xF4\x2\x2\x549\x54E"+
		"\x5\x104\x83\x2\x54A\x54C\a\xF4\x2\x2\x54B\x54A\x3\x2\x2\x2\x54B\x54C"+
		"\x3\x2\x2\x2\x54C\x54D\x3\x2\x2\x2\x54D\x54F\x5\xFA~\x2\x54E\x54B\x3\x2"+
		"\x2\x2\x54E\x54F\x3\x2\x2\x2\x54F\x550\x3\x2\x2\x2\x550\x552\x5\x126\x94"+
		"\x2\x551\x553\x5\x1C\xF\x2\x552\x551\x3\x2\x2\x2\x552\x553\x3\x2\x2\x2"+
		"\x553\x554\x3\x2\x2\x2\x554\x555\a<\x2\x2\x555\x91\x3\x2\x2\x2\x556\x557"+
		"\a\x8D\x2\x2\x557\x558\a\xF4\x2\x2\x558\x55A\x5\xDAn\x2\x559\x55B\a\xF4"+
		"\x2\x2\x55A\x559\x3\x2\x2\x2\x55A\x55B\x3\x2\x2\x2\x55B\x55C\x3\x2\x2"+
		"\x2\x55C\x55E\a\t\x2\x2\x55D\x55F\a\xF4\x2\x2\x55E\x55D\x3\x2\x2\x2\x55E"+
		"\x55F\x3\x2\x2\x2\x55F\x561\x3\x2\x2\x2\x560\x562\x5\xCA\x66\x2\x561\x560"+
		"\x3\x2\x2\x2\x561\x562\x3\x2\x2\x2\x562\x564\x3\x2\x2\x2\x563\x565\a\xF4"+
		"\x2\x2\x564\x563\x3\x2\x2\x2\x564\x565\x3\x2\x2\x2\x565\x566\x3\x2\x2"+
		"\x2\x566\x568\a\t\x2\x2\x567\x569\a\xF4\x2\x2\x568\x567\x3\x2\x2\x2\x568"+
		"\x569\x3\x2\x2\x2\x569\x56A\x3\x2\x2\x2\x56A\x56B\x5\xCA\x66\x2\x56B\x93"+
		"\x3\x2\x2\x2\x56C\x56D\a\x90\x2\x2\x56D\x56E\a\xF4\x2\x2\x56E\x57D\x5"+
		"\x104\x83\x2\x56F\x571\a\xF4\x2\x2\x570\x56F\x3\x2\x2\x2\x570\x571\x3"+
		"\x2\x2\x2\x571\x572\x3\x2\x2\x2\x572\x574\a\xC5\x2\x2\x573\x575\a\xF4"+
		"\x2\x2\x574\x573\x3\x2\x2\x2\x574\x575\x3\x2\x2\x2\x575\x57A\x3\x2\x2"+
		"\x2\x576\x578\x5\xF4{\x2\x577\x579\a\xF4\x2\x2\x578\x577\x3\x2\x2\x2\x578"+
		"\x579\x3\x2\x2\x2\x579\x57B\x3\x2\x2\x2\x57A\x576\x3\x2\x2\x2\x57A\x57B"+
		"\x3\x2\x2\x2\x57B\x57C\x3\x2\x2\x2\x57C\x57E\a\xCC\x2\x2\x57D\x570\x3"+
		"\x2\x2\x2\x57D\x57E\x3\x2\x2\x2\x57E\x95\x3\x2\x2\x2\x57F\x582\a\x8F\x2"+
		"\x2\x580\x581\a\xF4\x2\x2\x581\x583\x5\xCA\x66\x2\x582\x580\x3\x2\x2\x2"+
		"\x582\x583\x3\x2\x2\x2\x583\x97\x3\x2\x2\x2\x584\x585\a\x93\x2\x2\x585"+
		"\x588\a\xF4\x2\x2\x586\x587\a\x85\x2\x2\x587\x589\a\xF4\x2\x2\x588\x586"+
		"\x3\x2\x2\x2\x588\x589\x3\x2\x2\x2\x589\x58A\x3\x2\x2\x2\x58A\x595\x5"+
		"\x9AN\x2\x58B\x58D\a\xF4\x2\x2\x58C\x58B\x3\x2\x2\x2\x58C\x58D\x3\x2\x2"+
		"\x2\x58D\x58E\x3\x2\x2\x2\x58E\x590\a\t\x2\x2\x58F\x591\a\xF4\x2\x2\x590"+
		"\x58F\x3\x2\x2\x2\x590\x591\x3\x2\x2\x2\x591\x592\x3\x2\x2\x2\x592\x594"+
		"\x5\x9AN\x2\x593\x58C\x3\x2\x2\x2\x594\x597\x3\x2\x2\x2\x595\x593\x3\x2"+
		"\x2\x2\x595\x596\x3\x2\x2\x2\x596\x99\x3\x2\x2\x2\x597\x595\x3\x2\x2\x2"+
		"\x598\x59A\x5\xE8u\x2\x599\x59B\a\xF4\x2\x2\x59A\x599\x3\x2\x2\x2\x59A"+
		"\x59B\x3\x2\x2\x2\x59B\x59C\x3\x2\x2\x2\x59C\x59E\a\xC5\x2\x2\x59D\x59F"+
		"\a\xF4\x2\x2\x59E\x59D\x3\x2\x2\x2\x59E\x59F\x3\x2\x2\x2\x59F\x5A0\x3"+
		"\x2\x2\x2\x5A0\x5A2\x5\x100\x81\x2\x5A1\x5A3\a\xF4\x2\x2\x5A2\x5A1\x3"+
		"\x2\x2\x2\x5A2\x5A3\x3\x2\x2\x2\x5A3\x5A4\x3\x2\x2\x2\x5A4\x5A7\a\xCC"+
		"\x2\x2\x5A5\x5A6\a\xF4\x2\x2\x5A6\x5A8\x5\x106\x84\x2\x5A7\x5A5\x3\x2"+
		"\x2\x2\x5A7\x5A8\x3\x2\x2\x2\x5A8\x9B\x3\x2\x2\x2\x5A9\x5AA\a\x95\x2\x2"+
		"\x5AA\x9D\x3\x2\x2\x2\x5AB\x5B1\a\x96\x2\x2\x5AC\x5AF\a\xF4\x2\x2\x5AD"+
		"\x5B0\at\x2\x2\x5AE\x5B0\x5\x104\x83\x2\x5AF\x5AD\x3\x2\x2\x2\x5AF\x5AE"+
		"\x3\x2\x2\x2\x5B0\x5B2\x3\x2\x2\x2\x5B1\x5AC\x3\x2\x2\x2\x5B1\x5B2\x3"+
		"\x2\x2\x2\x5B2\x9F\x3\x2\x2\x2\x5B3\x5B4\a\x97\x2\x2\x5B4\xA1\x3\x2\x2"+
		"\x2\x5B5\x5B6\a\x98\x2\x2\x5B6\x5B7\a\xF4\x2\x2\x5B7\x5B8\x5\xCA\x66\x2"+
		"\x5B8\xA3\x3\x2\x2\x2\x5B9\x5BA\a\x99\x2\x2\x5BA\x5BB\a\xF4\x2\x2\x5BB"+
		"\x5BD\x5\xE8u\x2\x5BC\x5BE\a\xF4\x2\x2\x5BD\x5BC\x3\x2\x2\x2\x5BD\x5BE"+
		"\x3\x2\x2\x2\x5BE\x5BF\x3\x2\x2\x2\x5BF\x5C1\a\xC1\x2\x2\x5C0\x5C2\a\xF4"+
		"\x2\x2\x5C1\x5C0\x3\x2\x2\x2\x5C1\x5C2\x3\x2\x2\x2\x5C2\x5C3\x3\x2\x2"+
		"\x2\x5C3\x5C4\x5\xCA\x66\x2\x5C4\xA5\x3\x2\x2\x2\x5C5\x5C6\a\x9A\x2\x2"+
		"\x5C6\x5C7\a\xF4\x2\x2\x5C7\x5C9\x5\xCA\x66\x2\x5C8\x5CA\a\xF4\x2\x2\x5C9"+
		"\x5C8\x3\x2\x2\x2\x5C9\x5CA\x3\x2\x2\x2\x5CA\x5CB\x3\x2\x2\x2\x5CB\x5CD"+
		"\a\t\x2\x2\x5CC\x5CE\a\xF4\x2\x2\x5CD\x5CC\x3\x2\x2\x2\x5CD\x5CE\x3\x2"+
		"\x2\x2\x5CE\x5CF\x3\x2\x2\x2\x5CF\x5D0\x5\xCA\x66\x2\x5D0\xA7\x3\x2\x2"+
		"\x2\x5D1\x5D2\a\x9B\x2\x2\x5D2\x5D3\a\xF4\x2\x2\x5D3\x5D5\x5\xCA\x66\x2"+
		"\x5D4\x5D6\a\xF4\x2\x2\x5D5\x5D4\x3\x2\x2\x2\x5D5\x5D6\x3\x2\x2\x2\x5D6"+
		"\x5D7\x3\x2\x2\x2\x5D7\x5D9\a\t\x2\x2\x5D8\x5DA\a\xF4\x2\x2\x5D9\x5D8"+
		"\x3\x2\x2\x2\x5D9\x5DA\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB\x5DD\x5"+
		"\xCA\x66\x2\x5DC\x5DE\a\xF4\x2\x2\x5DD\x5DC\x3\x2\x2\x2\x5DD\x5DE\x3\x2"+
		"\x2\x2\x5DE\x5DF\x3\x2\x2\x2\x5DF\x5E1\a\t\x2\x2\x5E0\x5E2\a\xF4\x2\x2"+
		"\x5E1\x5E0\x3\x2\x2\x2\x5E1\x5E2\x3\x2\x2\x2\x5E2\x5E3\x3\x2\x2\x2\x5E3"+
		"\x5E5\x5\xCA\x66\x2\x5E4\x5E6\a\xF4\x2\x2\x5E5\x5E4\x3\x2\x2\x2\x5E5\x5E6"+
		"\x3\x2\x2\x2\x5E6\x5E7\x3\x2\x2\x2\x5E7\x5E9\a\t\x2\x2\x5E8\x5EA\a\xF4"+
		"\x2\x2\x5E9\x5E8\x3\x2\x2\x2\x5E9\x5EA\x3\x2\x2\x2\x5EA\x5EB\x3\x2\x2"+
		"\x2\x5EB\x5EC\x5\xCA\x66\x2\x5EC\xA9\x3\x2\x2\x2\x5ED\x5EE\a\x9C\x2\x2"+
		"\x5EE\x5EF\a\xF4\x2\x2\x5EF\x5F1\x5\xDAn\x2\x5F0\x5F2\a\xF4\x2\x2\x5F1"+
		"\x5F0\x3\x2\x2\x2\x5F1\x5F2\x3\x2\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\x5F5"+
		"\a\t\x2\x2\x5F4\x5F6\a\xF4\x2\x2\x5F5\x5F4\x3\x2\x2\x2\x5F5\x5F6\x3\x2"+
		"\x2\x2\x5F6\x5F7\x3\x2\x2\x2\x5F7\x5F8\x5\xCA\x66\x2\x5F8\xAB\x3\x2\x2"+
		"\x2\x5F9\x5FA\a\x9D\x2\x2\x5FA\x5FB\a\xF4\x2\x2\x5FB\x5FC\a\x1B\x2\x2"+
		"\x5FC\x5FD\a\xF4\x2\x2\x5FD\x5FE\x5\xCA\x66\x2\x5FE\x602\x5\x126\x94\x2"+
		"\x5FF\x601\x5\xB0Y\x2\x600\x5FF\x3\x2\x2\x2\x601\x604\x3\x2\x2\x2\x602"+
		"\x600\x3\x2\x2\x2\x602\x603\x3\x2\x2\x2\x603\x605\x3\x2\x2\x2\x604\x602"+
		"\x3\x2\x2\x2\x605\x606\a=\x2\x2\x606\xAD\x3\x2\x2\x2\x607\x609\aZ\x2\x2"+
		"\x608\x60A\a\xF4\x2\x2\x609\x608\x3\x2\x2\x2\x609\x60A\x3\x2\x2\x2\x60A"+
		"\x60B\x3\x2\x2\x2\x60B\x60D\x5\x10C\x87\x2\x60C\x60E\a\xF4\x2\x2\x60D"+
		"\x60C\x3\x2\x2\x2\x60D\x60E\x3\x2\x2\x2\x60E\x60F\x3\x2\x2\x2\x60F\x610"+
		"\x5\xCA\x66\x2\x610\x619\x3\x2\x2\x2\x611\x612\x5\xCA\x66\x2\x612\x613"+
		"\a\xF4\x2\x2\x613\x614\a\xAD\x2\x2\x614\x615\a\xF4\x2\x2\x615\x616\x5"+
		"\xCA\x66\x2\x616\x619\x3\x2\x2\x2\x617\x619\x5\xCA\x66\x2\x618\x607\x3"+
		"\x2\x2\x2\x618\x611\x3\x2\x2\x2\x618\x617\x3\x2\x2\x2\x619\xAF\x3\x2\x2"+
		"\x2\x61A\x61B\a\x1B\x2\x2\x61B\x61C\a\xF4\x2\x2\x61C\x61D\x5\xB2Z\x2\x61D"+
		"\x61F\x5\x126\x94\x2\x61E\x620\x5\x1C\xF\x2\x61F\x61E\x3\x2\x2\x2\x61F"+
		"\x620\x3\x2\x2\x2\x620\xB1\x3\x2\x2\x2\x621\x631\a\x36\x2\x2\x622\x62D"+
		"\x5\xAEX\x2\x623\x625\a\xF4\x2\x2\x624\x623\x3\x2\x2\x2\x624\x625\x3\x2"+
		"\x2\x2\x625\x626\x3\x2\x2\x2\x626\x628\a\t\x2\x2\x627\x629\a\xF4\x2\x2"+
		"\x628\x627\x3\x2\x2\x2\x628\x629\x3\x2\x2\x2\x629\x62A\x3\x2\x2\x2\x62A"+
		"\x62C\x5\xAEX\x2\x62B\x624\x3\x2\x2\x2\x62C\x62F\x3\x2\x2\x2\x62D\x62B"+
		"\x3\x2\x2\x2\x62D\x62E\x3\x2\x2\x2\x62E\x631\x3\x2\x2\x2\x62F\x62D\x3"+
		"\x2\x2\x2\x630\x621\x3\x2\x2\x2\x630\x622\x3\x2\x2\x2\x631\xB3\x3\x2\x2"+
		"\x2\x632\x633\a\x9E\x2\x2\x633\x634\a\xF4\x2\x2\x634\x63D\x5\xCA\x66\x2"+
		"\x635\x637\a\xF4\x2\x2\x636\x635\x3\x2\x2\x2\x636\x637\x3\x2\x2\x2\x637"+
		"\x638\x3\x2\x2\x2\x638\x63A\a\t\x2\x2\x639\x63B\a\xF4\x2\x2\x63A\x639"+
		"\x3\x2\x2\x2\x63A\x63B\x3\x2\x2\x2\x63B\x63C\x3\x2\x2\x2\x63C\x63E\x5"+
		"\xCA\x66\x2\x63D\x636\x3\x2\x2\x2\x63D\x63E\x3\x2\x2\x2\x63E\xB5\x3\x2"+
		"\x2\x2\x63F\x640\a\xA0\x2\x2\x640\x641\a\xF4\x2\x2\x641\x643\x5\xCA\x66"+
		"\x2\x642\x644\a\xF4\x2\x2\x643\x642\x3\x2\x2\x2\x643\x644\x3\x2\x2\x2"+
		"\x644\x645\x3\x2\x2\x2\x645\x647\a\t\x2\x2\x646\x648\a\xF4\x2\x2\x647"+
		"\x646\x3\x2\x2\x2\x647\x648\x3\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649\x64A"+
		"\x5\xCA\x66\x2\x64A\xB7\x3\x2\x2\x2\x64B\x64C\a\x9F\x2\x2\x64C\x64D\a"+
		"\xF4\x2\x2\x64D\x64F\x5\xE8u\x2\x64E\x650\a\xF4\x2\x2\x64F\x64E\x3\x2"+
		"\x2\x2\x64F\x650\x3\x2\x2\x2\x650\x651\x3\x2\x2\x2\x651\x653\a\xC1\x2"+
		"\x2\x652\x654\a\xF4\x2\x2\x653\x652\x3\x2\x2\x2\x653\x654\x3\x2\x2\x2"+
		"\x654\x655\x3\x2\x2\x2\x655\x656\x5\xCA\x66\x2\x656\xB9\x3\x2\x2\x2\x657"+
		"\x658\a\xA6\x2\x2\x658\xBB\x3\x2\x2\x2\x659\x65A\x5\x11C\x8F\x2\x65A\x65B"+
		"\a\xF4\x2\x2\x65B\x65D\x3\x2\x2\x2\x65C\x659\x3\x2\x2\x2\x65C\x65D\x3"+
		"\x2\x2\x2\x65D\x660\x3\x2\x2\x2\x65E\x65F\a\xA4\x2\x2\x65F\x661\a\xF4"+
		"\x2\x2\x660\x65E\x3\x2\x2\x2\x660\x661\x3\x2\x2\x2\x661\x662\x3\x2\x2"+
		"\x2\x662\x664\a\xA8\x2\x2\x663\x665\a\xF4\x2\x2\x664\x663\x3\x2\x2\x2"+
		"\x664\x665\x3\x2\x2\x2\x665\x666\x3\x2\x2\x2\x666\x66B\x5\x104\x83\x2"+
		"\x667\x669\a\xF4\x2\x2\x668\x667\x3\x2\x2\x2\x668\x669\x3\x2\x2\x2\x669"+
		"\x66A\x3\x2\x2\x2\x66A\x66C\x5\xFA~\x2\x66B\x668\x3\x2\x2\x2\x66B\x66C"+
		"\x3\x2\x2\x2\x66C\x66D\x3\x2\x2\x2\x66D\x66F\x5\x126\x94\x2\x66E\x670"+
		"\x5\x1C\xF\x2\x66F\x66E\x3\x2\x2\x2\x66F\x670\x3\x2\x2\x2\x670\x671\x3"+
		"\x2\x2\x2\x671\x672\a>\x2\x2\x672\xBD\x3\x2\x2\x2\x673\x675\a\xAC\x2\x2"+
		"\x674\x676\a\xF4\x2\x2\x675\x674\x3\x2\x2\x2\x675\x676\x3\x2\x2\x2\x676"+
		"\x677\x3\x2\x2\x2\x677\x679\a\xC1\x2\x2\x678\x67A\a\xF4\x2\x2\x679\x678"+
		"\x3\x2\x2\x2\x679\x67A\x3\x2\x2\x2\x67A\x67B\x3\x2\x2\x2\x67B\x67C\x5"+
		"\xCA\x66\x2\x67C\xBF\x3\x2\x2\x2\x67D\x67E\x5\x11C\x8F\x2\x67E\x67F\a"+
		"\xF4\x2\x2\x67F\x681\x3\x2\x2\x2\x680\x67D\x3\x2\x2\x2\x680\x681\x3\x2"+
		"\x2\x2\x681\x682\x3\x2\x2\x2\x682\x683\a\xAF\x2\x2\x683\x684\a\xF4\x2"+
		"\x2\x684\x685\x5\x104\x83\x2\x685\x689\x5\x126\x94\x2\x686\x688\x5\xC2"+
		"\x62\x2\x687\x686\x3\x2\x2\x2\x688\x68B\x3\x2\x2\x2\x689\x687\x3\x2\x2"+
		"\x2\x689\x68A\x3\x2\x2\x2\x68A\x68C\x3\x2\x2\x2\x68B\x689\x3\x2\x2\x2"+
		"\x68C\x68D\a?\x2\x2\x68D\xC1\x3\x2\x2\x2\x68E\x69D\x5\x104\x83\x2\x68F"+
		"\x691\a\xF4\x2\x2\x690\x68F\x3\x2\x2\x2\x690\x691\x3\x2\x2\x2\x691\x692"+
		"\x3\x2\x2\x2\x692\x697\a\xC5\x2\x2\x693\x695\a\xF4\x2\x2\x694\x693\x3"+
		"\x2\x2\x2\x694\x695\x3\x2\x2\x2\x695\x696\x3\x2\x2\x2\x696\x698\x5\x100"+
		"\x81\x2\x697\x694\x3\x2\x2\x2\x697\x698\x3\x2\x2\x2\x698\x69A\x3\x2\x2"+
		"\x2\x699\x69B\a\xF4\x2\x2\x69A\x699\x3\x2\x2\x2\x69A\x69B\x3\x2\x2\x2"+
		"\x69B\x69C\x3\x2\x2\x2\x69C\x69E\a\xCC\x2\x2\x69D\x690\x3\x2\x2\x2\x69D"+
		"\x69E\x3\x2\x2\x2\x69E\x6A1\x3\x2\x2\x2\x69F\x6A0\a\xF4\x2\x2\x6A0\x6A2"+
		"\x5\x106\x84\x2\x6A1\x69F\x3\x2\x2\x2\x6A1\x6A2\x3\x2\x2\x2\x6A2\x6A3"+
		"\x3\x2\x2\x2\x6A3\x6A4\x5\x126\x94\x2\x6A4\xC3\x3\x2\x2\x2\x6A5\x6A6\a"+
		"\xB0\x2\x2\x6A6\x6A7\a\xF4\x2\x2\x6A7\x6AC\x5\xCA\x66\x2\x6A8\x6A9\a\xF4"+
		"\x2\x2\x6A9\x6AA\aZ\x2\x2\x6AA\x6AB\a\xF4\x2\x2\x6AB\x6AD\x5\x118\x8D"+
		"\x2\x6AC\x6A8\x3\x2\x2\x2\x6AC\x6AD\x3\x2\x2\x2\x6AD\xC5\x3\x2\x2\x2\x6AE"+
		"\x6AF\a\xB1\x2\x2\x6AF\x6B0\a\xF4\x2\x2\x6B0\x6B1\x5\xCA\x66\x2\x6B1\xC7"+
		"\x3\x2\x2\x2\x6B2\x6B3\a\xB2\x2\x2\x6B3\x6B4\a\xF4\x2\x2\x6B4\x6C3\x5"+
		"\xDAn\x2\x6B5\x6B7\a\xF4\x2\x2\x6B6\x6B5\x3\x2\x2\x2\x6B6\x6B7\x3\x2\x2"+
		"\x2\x6B7\x6B8\x3\x2\x2\x2\x6B8\x6BA\a\t\x2\x2\x6B9\x6BB\a\xF4\x2\x2\x6BA"+
		"\x6B9\x3\x2\x2\x2\x6BA\x6BB\x3\x2\x2\x2\x6BB\x6BC\x3\x2\x2\x2\x6BC\x6C1"+
		"\x5\xCA\x66\x2\x6BD\x6BE\a\xF4\x2\x2\x6BE\x6BF\a\xAD\x2\x2\x6BF\x6C0\a"+
		"\xF4\x2\x2\x6C0\x6C2\x5\xCA\x66\x2\x6C1\x6BD\x3\x2\x2\x2\x6C1\x6C2\x3"+
		"\x2\x2\x2\x6C2\x6C4\x3\x2\x2\x2\x6C3\x6B6\x3\x2\x2\x2\x6C3\x6C4\x3\x2"+
		"\x2\x2\x6C4\xC9\x3\x2\x2\x2\x6C5\x6C6\b\x66\x1\x2\x6C6\x6C8\au\x2\x2\x6C7"+
		"\x6C9\a\xF4\x2\x2\x6C8\x6C7\x3\x2\x2\x2\x6C8\x6C9\x3\x2\x2\x2\x6C9\x6CA"+
		"\x3\x2\x2\x2\x6CA\x6FD\x5\xCA\x66\x15\x6CB\x6CD\a\f\x2\x2\x6CC\x6CE\a"+
		"\xF4\x2\x2\x6CD\x6CC\x3\x2\x2\x2\x6CD\x6CE\x3\x2\x2\x2\x6CE\x6CF\x3\x2"+
		"\x2\x2\x6CF\x6FD\x5\xCA\x66\x12\x6D0\x6D2\x5\xE8u\x2\x6D1\x6D3\a\xF4\x2"+
		"\x2\x6D2\x6D1\x3\x2\x2\x2\x6D2\x6D3\x3\x2\x2\x2\x6D3\x6D4\x3\x2\x2\x2"+
		"\x6D4\x6D6\a\xBE\x2\x2\x6D5\x6D7\a\xF4\x2\x2\x6D6\x6D5\x3\x2\x2\x2\x6D6"+
		"\x6D7\x3\x2\x2\x2\x6D7\x6D8\x3\x2\x2\x2\x6D8\x6D9\x5\xCA\x66\x11\x6D9"+
		"\x6FD\x3\x2\x2\x2\x6DA\x6DC\a\xC7\x2\x2\x6DB\x6DD\a\xF4\x2\x2\x6DC\x6DB"+
		"\x3\x2\x2\x2\x6DC\x6DD\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6FD\x5"+
		"\xCA\x66\xF\x6DF\x6E1\av\x2\x2\x6E0\x6E2\a\xF4\x2\x2\x6E1\x6E0\x3\x2\x2"+
		"\x2\x6E1\x6E2\x3\x2\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6FD\x5\xCA\x66\b"+
		"\x6E4\x6FD\x5\x116\x8C\x2\x6E5\x6FD\x5\xE8u\x2\x6E6\x6E8\a\xC5\x2\x2\x6E7"+
		"\x6E9\a\xF4\x2\x2\x6E8\x6E7\x3\x2\x2\x2\x6E8\x6E9\x3\x2\x2\x2\x6E9\x6EA"+
		"\x3\x2\x2\x2\x6EA\x6F5\x5\xCA\x66\x2\x6EB\x6ED\a\xF4\x2\x2\x6EC\x6EB\x3"+
		"\x2\x2\x2\x6EC\x6ED\x3\x2\x2\x2\x6ED\x6EE\x3\x2\x2\x2\x6EE\x6F0\a\t\x2"+
		"\x2\x6EF\x6F1\a\xF4\x2\x2\x6F0\x6EF\x3\x2\x2\x2\x6F0\x6F1\x3\x2\x2\x2"+
		"\x6F1\x6F2\x3\x2\x2\x2\x6F2\x6F4\x5\xCA\x66\x2\x6F3\x6EC\x3\x2\x2\x2\x6F4"+
		"\x6F7\x3\x2\x2\x2\x6F5\x6F3\x3\x2\x2\x2\x6F5\x6F6\x3\x2\x2\x2\x6F6\x6F8"+
		"\x3\x2\x2\x2\x6F7\x6F5\x3\x2\x2\x2\x6F8\x6F9\a\xCC\x2\x2\x6F9\x6FD\x3"+
		"\x2\x2\x2\x6FA\x6FD\x5\xC4\x63\x2\x6FB\x6FD\x5x=\x2\x6FC\x6C5\x3\x2\x2"+
		"\x2\x6FC\x6CB\x3\x2\x2\x2\x6FC\x6D0\x3\x2\x2\x2\x6FC\x6DA\x3\x2\x2\x2"+
		"\x6FC\x6DF\x3\x2\x2\x2\x6FC\x6E4\x3\x2\x2\x2\x6FC\x6E5\x3\x2\x2\x2\x6FC"+
		"\x6E6\x3\x2\x2\x2\x6FC\x6FA\x3\x2\x2\x2\x6FC\x6FB\x3\x2\x2\x2\x6FD\x76C"+
		"\x3\x2\x2\x2\x6FE\x700\f\x10\x2\x2\x6FF\x701\a\xF4\x2\x2\x700\x6FF\x3"+
		"\x2\x2\x2\x700\x701\x3\x2\x2\x2\x701\x702\x3\x2\x2\x2\x702\x704\a\xCB"+
		"\x2\x2\x703\x705\a\xF4\x2\x2\x704\x703\x3\x2\x2\x2\x704\x705\x3\x2\x2"+
		"\x2\x705\x706\x3\x2\x2\x2\x706\x76B\x5\xCA\x66\x11\x707\x709\f\xE\x2\x2"+
		"\x708\x70A\a\xF4\x2\x2\x709\x708\x3\x2\x2\x2\x709\x70A\x3\x2\x2\x2\x70A"+
		"\x70B\x3\x2\x2\x2\x70B\x70D\t\f\x2\x2\x70C\x70E\a\xF4\x2\x2\x70D\x70C"+
		"\x3\x2\x2\x2\x70D\x70E\x3\x2\x2\x2\x70E\x70F\x3\x2\x2\x2\x70F\x76B\x5"+
		"\xCA\x66\xF\x710\x712\f\r\x2\x2\x711\x713\a\xF4\x2\x2\x712\x711\x3\x2"+
		"\x2\x2\x712\x713\x3\x2\x2\x2\x713\x714\x3\x2\x2\x2\x714\x716\a\xC0\x2"+
		"\x2\x715\x717\a\xF4\x2\x2\x716\x715\x3\x2\x2\x2\x716\x717\x3\x2\x2\x2"+
		"\x717\x718\x3\x2\x2\x2\x718\x76B\x5\xCA\x66\xE\x719\x71B\f\f\x2\x2\x71A"+
		"\x71C\a\xF4\x2\x2\x71B\x71A\x3\x2\x2\x2\x71B\x71C\x3\x2\x2\x2\x71C\x71D"+
		"\x3\x2\x2\x2\x71D\x71F\ar\x2\x2\x71E\x720\a\xF4\x2\x2\x71F\x71E\x3\x2"+
		"\x2\x2\x71F\x720\x3\x2\x2\x2\x720\x721\x3\x2\x2\x2\x721\x76B\x5\xCA\x66"+
		"\r\x722\x724\f\v\x2\x2\x723\x725\a\xF4\x2\x2\x724\x723\x3\x2\x2\x2\x724"+
		"\x725\x3\x2\x2\x2\x725\x726\x3\x2\x2\x2\x726\x728\t\r\x2\x2\x727\x729"+
		"\a\xF4\x2\x2\x728\x727\x3\x2\x2\x2\x728\x729\x3\x2\x2\x2\x729\x72A\x3"+
		"\x2\x2\x2\x72A\x76B\x5\xCA\x66\f\x72B\x72D\f\n\x2\x2\x72C\x72E\a\xF4\x2"+
		"\x2\x72D\x72C\x3\x2\x2\x2\x72D\x72E\x3\x2\x2\x2\x72E\x72F\x3\x2\x2\x2"+
		"\x72F\x731\a\xBD\x2\x2\x730\x732\a\xF4\x2\x2\x731\x730\x3\x2\x2\x2\x731"+
		"\x732\x3\x2\x2\x2\x732\x733\x3\x2\x2\x2\x733\x76B\x5\xCA\x66\v\x734\x736"+
		"\f\t\x2\x2\x735\x737\a\xF4\x2\x2\x736\x735\x3\x2\x2\x2\x736\x737\x3\x2"+
		"\x2\x2\x737\x738\x3\x2\x2\x2\x738\x73A\t\xE\x2\x2\x739\x73B\a\xF4\x2\x2"+
		"\x73A\x739\x3\x2\x2\x2\x73A\x73B\x3\x2\x2\x2\x73B\x73C\x3\x2\x2\x2\x73C"+
		"\x76B\x5\xCA\x66\n\x73D\x73F\f\a\x2\x2\x73E\x740\a\xF4\x2\x2\x73F\x73E"+
		"\x3\x2\x2\x2\x73F\x740\x3\x2\x2\x2\x740\x741\x3\x2\x2\x2\x741\x743\a\xE"+
		"\x2\x2\x742\x744\a\xF4\x2\x2\x743\x742\x3\x2\x2\x2\x743\x744\x3\x2\x2"+
		"\x2\x744\x745\x3\x2\x2\x2\x745\x76B\x5\xCA\x66\b\x746\x748\f\x6\x2\x2"+
		"\x747\x749\a\xF4\x2\x2\x748\x747\x3\x2\x2\x2\x748\x749\x3\x2\x2\x2\x749"+
		"\x74A\x3\x2\x2\x2\x74A\x74C\a\x82\x2\x2\x74B\x74D\a\xF4\x2\x2\x74C\x74B"+
		"\x3\x2\x2\x2\x74C\x74D\x3\x2\x2\x2\x74D\x74E\x3\x2\x2\x2\x74E\x76B\x5"+
		"\xCA\x66\a\x74F\x751\f\x5\x2\x2\x750\x752\a\xF4\x2\x2\x751\x750\x3\x2"+
		"\x2\x2\x751\x752\x3\x2\x2\x2\x752\x753\x3\x2\x2\x2\x753\x755\a\xBC\x2"+
		"\x2\x754\x756\a\xF4\x2\x2\x755\x754\x3\x2\x2\x2\x755\x756\x3\x2\x2\x2"+
		"\x756\x757\x3\x2\x2\x2\x757\x76B\x5\xCA\x66\x6\x758\x75A\f\x4\x2\x2\x759"+
		"\x75B\a\xF4\x2\x2\x75A\x759\x3\x2\x2\x2\x75A\x75B\x3\x2\x2\x2\x75B\x75C"+
		"\x3\x2\x2\x2\x75C\x75E\a\x43\x2\x2\x75D\x75F\a\xF4\x2\x2\x75E\x75D\x3"+
		"\x2\x2\x2\x75E\x75F\x3\x2\x2\x2\x75F\x760\x3\x2\x2\x2\x760\x76B\x5\xCA"+
		"\x66\x5\x761\x763\f\x3\x2\x2\x762\x764\a\xF4\x2\x2\x763\x762\x3\x2\x2"+
		"\x2\x763\x764\x3\x2\x2\x2\x764\x765\x3\x2\x2\x2\x765\x767\aV\x2\x2\x766"+
		"\x768\a\xF4\x2\x2\x767\x766\x3\x2\x2\x2\x767\x768\x3\x2\x2\x2\x768\x769"+
		"\x3\x2\x2\x2\x769\x76B\x5\xCA\x66\x4\x76A\x6FE\x3\x2\x2\x2\x76A\x707\x3"+
		"\x2\x2\x2\x76A\x710\x3\x2\x2\x2\x76A\x719\x3\x2\x2\x2\x76A\x722\x3\x2"+
		"\x2\x2\x76A\x72B\x3\x2\x2\x2\x76A\x734\x3\x2\x2\x2\x76A\x73D\x3\x2\x2"+
		"\x2\x76A\x746\x3\x2\x2\x2\x76A\x74F\x3\x2\x2\x2\x76A\x758\x3\x2\x2\x2"+
		"\x76A\x761\x3\x2\x2\x2\x76B\x76E\x3\x2\x2\x2\x76C\x76A\x3\x2\x2\x2\x76C"+
		"\x76D\x3\x2\x2\x2\x76D\xCB\x3\x2\x2\x2\x76E\x76C\x3\x2\x2\x2\x76F\x773"+
		"\a\x32\x2\x2\x770\x773\a\xA4\x2\x2\x771\x773\x5\x11C\x8F\x2\x772\x76F"+
		"\x3\x2\x2\x2\x772\x770\x3\x2\x2\x2\x772\x771\x3\x2\x2\x2\x773\x774\x3"+
		"\x2\x2\x2\x774\x777\a\xF4\x2\x2\x775\x776\a\xBA\x2\x2\x776\x778\a\xF4"+
		"\x2\x2\x777\x775\x3\x2\x2\x2\x777\x778\x3\x2\x2\x2\x778\x779\x3\x2\x2"+
		"\x2\x779\x77A\x5\xCEh\x2\x77A\xCD\x3\x2\x2\x2\x77B\x786\x5\xD0i\x2\x77C"+
		"\x77E\a\xF4\x2\x2\x77D\x77C\x3\x2\x2\x2\x77D\x77E\x3\x2\x2\x2\x77E\x77F"+
		"\x3\x2\x2\x2\x77F\x781\a\t\x2\x2\x780\x782\a\xF4\x2\x2\x781\x780\x3\x2"+
		"\x2\x2\x781\x782\x3\x2\x2\x2\x782\x783\x3\x2\x2\x2\x783\x785\x5\xD0i\x2"+
		"\x784\x77D\x3\x2\x2\x2\x785\x788\x3\x2\x2\x2\x786\x784\x3\x2\x2\x2\x786"+
		"\x787\x3\x2\x2\x2\x787\xCF\x3\x2\x2\x2\x788\x786\x3\x2\x2\x2\x789\x79B"+
		"\x5\x104\x83\x2\x78A\x78C\a\xF4\x2\x2\x78B\x78A\x3\x2\x2\x2\x78B\x78C"+
		"\x3\x2\x2\x2\x78C\x78D\x3\x2\x2\x2\x78D\x78F\a\xC5\x2\x2\x78E\x790\a\xF4"+
		"\x2\x2\x78F\x78E\x3\x2\x2\x2\x78F\x790\x3\x2\x2\x2\x790\x795\x3\x2\x2"+
		"\x2\x791\x793\x5\x100\x81\x2\x792\x794\a\xF4\x2\x2\x793\x792\x3\x2\x2"+
		"\x2\x793\x794\x3\x2\x2\x2\x794\x796\x3\x2\x2\x2\x795\x791\x3\x2\x2\x2"+
		"\x795\x796\x3\x2\x2\x2\x796\x797\x3\x2\x2\x2\x797\x799\a\xCC\x2\x2\x798"+
		"\x79A\a\xF4\x2\x2\x799\x798\x3\x2\x2\x2\x799\x79A\x3\x2\x2\x2\x79A\x79C"+
		"\x3\x2\x2\x2\x79B\x78B\x3\x2\x2\x2\x79B\x79C\x3\x2\x2\x2\x79C\x79E\x3"+
		"\x2\x2\x2\x79D\x79F\x5\x11A\x8E\x2\x79E\x79D\x3\x2\x2\x2\x79E\x79F\x3"+
		"\x2\x2\x2\x79F\x7A2\x3\x2\x2\x2\x7A0\x7A1\a\xF4\x2\x2\x7A1\x7A3\x5\x106"+
		"\x84\x2\x7A2\x7A0\x3\x2\x2\x2\x7A2\x7A3\x3\x2\x2\x2\x7A3\xD1\x3\x2\x2"+
		"\x2\x7A4\x7A5\a\xB7\x2\x2\x7A5\x7A6\a\xF4\x2\x2\x7A6\x7A7\x5\xCA\x66\x2"+
		"\x7A7\x7A9\x5\x126\x94\x2\x7A8\x7AA\x5\x1C\xF\x2\x7A9\x7A8\x3\x2\x2\x2"+
		"\x7A9\x7AA\x3\x2\x2\x2\x7AA\x7AB\x3\x2\x2\x2\x7AB\x7AC\a\xB6\x2\x2\x7AC"+
		"\xD3\x3\x2\x2\x2\x7AD\x7AE\a\xB8\x2\x2\x7AE\x7AF\a\xF4\x2\x2\x7AF\x7B1"+
		"\x5\xDAn\x2\x7B0\x7B2\a\xF4\x2\x2\x7B1\x7B0\x3\x2\x2\x2\x7B1\x7B2\x3\x2"+
		"\x2\x2\x7B2\x7B3\x3\x2\x2\x2\x7B3\x7B5\a\t\x2\x2\x7B4\x7B6\a\xF4\x2\x2"+
		"\x7B5\x7B4\x3\x2\x2\x2\x7B5\x7B6\x3\x2\x2\x2\x7B6\x7B7\x3\x2\x2\x2\x7B7"+
		"\x7B8\x5\xCA\x66\x2\x7B8\xD5\x3\x2\x2\x2\x7B9\x7BA\a\xB9\x2\x2\x7BA\x7BF"+
		"\a\xF4\x2\x2\x7BB\x7C0\x5\xE8u\x2\x7BC\x7BD\au\x2\x2\x7BD\x7BE\a\xF4\x2"+
		"\x2\x7BE\x7C0\x5\x118\x8D\x2\x7BF\x7BB\x3\x2\x2\x2\x7BF\x7BC\x3\x2\x2"+
		"\x2\x7C0\x7C1\x3\x2\x2\x2\x7C1\x7C3\x5\x126\x94\x2\x7C2\x7C4\x5\x1C\xF"+
		"\x2\x7C3\x7C2\x3\x2\x2\x2\x7C3\x7C4\x3\x2\x2\x2\x7C4\x7C5\x3\x2\x2\x2"+
		"\x7C5\x7C6\a@\x2\x2\x7C6\xD7\x3\x2\x2\x2\x7C7\x7C8\a\xBB\x2\x2\x7C8\x7C9"+
		"\a\xF4\x2\x2\x7C9\x7CB\x5\xDAn\x2\x7CA\x7CC\a\xF4\x2\x2\x7CB\x7CA\x3\x2"+
		"\x2\x2\x7CB\x7CC\x3\x2\x2\x2\x7CC\x7CD\x3\x2\x2\x2\x7CD\x7D2\a\t\x2\x2"+
		"\x7CE\x7D0\a\xF4\x2\x2\x7CF\x7CE\x3\x2\x2\x2\x7CF\x7D0\x3\x2\x2\x2\x7D0"+
		"\x7D1\x3\x2\x2\x2\x7D1\x7D3\x5\x86\x44\x2\x7D2\x7CF\x3\x2\x2\x2\x7D2\x7D3"+
		"\x3\x2\x2\x2\x7D3\xD9\x3\x2\x2\x2\x7D4\x7D6\a\x5\x2\x2\x7D5\x7D4\x3\x2"+
		"\x2\x2\x7D5\x7D6\x3\x2\x2\x2\x7D6\x7D7\x3\x2\x2\x2\x7D7\x7D8\x5\xCA\x66"+
		"\x2\x7D8\xDB\x3\x2\x2\x2\x7D9\x7DC\x5\xDEp\x2\x7DA\x7DC\x5\xE0q\x2\x7DB"+
		"\x7D9\x3\x2\x2\x2\x7DB\x7DA\x3\x2\x2\x2\x7DC\xDD\x3\x2\x2\x2\x7DD\x7DE"+
		"\a\x1A\x2\x2\x7DE\x7DF\a\xF4\x2\x2\x7DF\x7E1\x5\x104\x83\x2\x7E0\x7E2"+
		"\x5\x11A\x8E\x2\x7E1\x7E0\x3\x2\x2\x2\x7E1\x7E2\x3\x2\x2\x2\x7E2\x7F0"+
		"\x3\x2\x2\x2\x7E3\x7E5\a\xF4\x2\x2\x7E4\x7E3\x3\x2\x2\x2\x7E4\x7E5\x3"+
		"\x2\x2\x2\x7E5\x7E6\x3\x2\x2\x2\x7E6\x7E8\a\xC5\x2\x2\x7E7\x7E9\a\xF4"+
		"\x2\x2\x7E8\x7E7\x3\x2\x2\x2\x7E8\x7E9\x3\x2\x2\x2\x7E9\x7EA\x3\x2\x2"+
		"\x2\x7EA\x7EC\x5\xF4{\x2\x7EB\x7ED\a\xF4\x2\x2\x7EC\x7EB\x3\x2\x2\x2\x7EC"+
		"\x7ED\x3\x2\x2\x2\x7ED\x7EE\x3\x2\x2\x2\x7EE\x7EF\a\xCC\x2\x2\x7EF\x7F1"+
		"\x3\x2\x2\x2\x7F0\x7E4\x3\x2\x2\x2\x7F0\x7F1\x3\x2\x2\x2\x7F1\x7FB\x3"+
		"\x2\x2\x2\x7F2\x7F4\a\xF4\x2\x2\x7F3\x7F2\x3\x2\x2\x2\x7F3\x7F4\x3\x2"+
		"\x2\x2\x7F4\x7F5\x3\x2\x2\x2\x7F5\x7F6\a\xC5\x2\x2\x7F6\x7F7\x5\x100\x81"+
		"\x2\x7F7\x7F8\a\xCC\x2\x2\x7F8\x7FA\x3\x2\x2\x2\x7F9\x7F3\x3\x2\x2\x2"+
		"\x7FA\x7FD\x3\x2\x2\x2\x7FB\x7F9\x3\x2\x2\x2\x7FB\x7FC\x3\x2\x2\x2\x7FC"+
		"\xDF\x3\x2\x2\x2\x7FD\x7FB\x3\x2\x2\x2\x7FE\x7FF\a\x1A\x2\x2\x7FF\x801"+
		"\a\xF4\x2\x2\x800\x802\x5\xE8u\x2\x801\x800\x3\x2\x2\x2\x801\x802\x3\x2"+
		"\x2\x2\x802\x803\x3\x2\x2\x2\x803\x804\a\n\x2\x2\x804\x806\x5\x104\x83"+
		"\x2\x805\x807\x5\x11A\x8E\x2\x806\x805\x3\x2\x2\x2\x806\x807\x3\x2\x2"+
		"\x2\x807\x815\x3\x2\x2\x2\x808\x80A\a\xF4\x2\x2\x809\x808\x3\x2\x2\x2"+
		"\x809\x80A\x3\x2\x2\x2\x80A\x80B\x3\x2\x2\x2\x80B\x80D\a\xC5\x2\x2\x80C"+
		"\x80E\a\xF4\x2\x2\x80D\x80C\x3\x2\x2\x2\x80D\x80E\x3\x2\x2\x2\x80E\x80F"+
		"\x3\x2\x2\x2\x80F\x811\x5\xF4{\x2\x810\x812\a\xF4\x2\x2\x811\x810\x3\x2"+
		"\x2\x2\x811\x812\x3\x2\x2\x2\x812\x813\x3\x2\x2\x2\x813\x814\a\xCC\x2"+
		"\x2\x814\x816\x3\x2\x2\x2\x815\x809\x3\x2\x2\x2\x815\x816\x3\x2\x2\x2"+
		"\x816\x820\x3\x2\x2\x2\x817\x819\a\xF4\x2\x2\x818\x817\x3\x2\x2\x2\x818"+
		"\x819\x3\x2\x2\x2\x819\x81A\x3\x2\x2\x2\x81A\x81B\a\xC5\x2\x2\x81B\x81C"+
		"\x5\x100\x81\x2\x81C\x81D\a\xCC\x2\x2\x81D\x81F\x3\x2\x2\x2\x81E\x818"+
		"\x3\x2\x2\x2\x81F\x822\x3\x2\x2\x2\x820\x81E\x3\x2\x2\x2\x820\x821\x3"+
		"\x2\x2\x2\x821\xE1\x3\x2\x2\x2\x822\x820\x3\x2\x2\x2\x823\x826\x5\xE4"+
		"s\x2\x824\x826\x5\xE6t\x2\x825\x823\x3\x2\x2\x2\x825\x824\x3\x2\x2\x2"+
		"\x826\xE3\x3\x2\x2\x2\x827\x829\x5\xE8u\x2\x828\x827\x3\x2\x2\x2\x828"+
		"\x829\x3\x2\x2\x2\x829\x82A\x3\x2\x2\x2\x82A\x82B\a\n\x2\x2\x82B\x82D"+
		"\x5\x104\x83\x2\x82C\x82E\x5\x11A\x8E\x2\x82D\x82C\x3\x2\x2\x2\x82D\x82E"+
		"\x3\x2\x2\x2\x82E\x831\x3\x2\x2\x2\x82F\x830\a\xF4\x2\x2\x830\x832\x5"+
		"\xF4{\x2\x831\x82F\x3\x2\x2\x2\x831\x832\x3\x2\x2\x2\x832\x837\x3\x2\x2"+
		"\x2\x833\x835\a\xF4\x2\x2\x834\x833\x3\x2\x2\x2\x834\x835\x3\x2\x2\x2"+
		"\x835\x836\x3\x2\x2\x2\x836\x838\x5\xF8}\x2\x837\x834\x3\x2\x2\x2\x837"+
		"\x838\x3\x2\x2\x2\x838\x842\x3\x2\x2\x2\x839\x83B\a\xF4\x2\x2\x83A\x839"+
		"\x3\x2\x2\x2\x83A\x83B\x3\x2\x2\x2\x83B\x83C\x3\x2\x2\x2\x83C\x83D\a\xC5"+
		"\x2\x2\x83D\x83E\x5\x100\x81\x2\x83E\x83F\a\xCC\x2\x2\x83F\x841\x3\x2"+
		"\x2\x2\x840\x83A\x3\x2\x2\x2\x841\x844\x3\x2\x2\x2\x842\x840\x3\x2\x2"+
		"\x2\x842\x843\x3\x2\x2\x2\x843\xE5\x3\x2\x2\x2\x844\x842\x3\x2\x2\x2\x845"+
		"\x848\x5\x10A\x86\x2\x846\x847\a\xF4\x2\x2\x847\x849\x5\xF4{\x2\x848\x846"+
		"\x3\x2\x2\x2\x848\x849\x3\x2\x2\x2\x849\x853\x3\x2\x2\x2\x84A\x84C\a\xF4"+
		"\x2\x2\x84B\x84A\x3\x2\x2\x2\x84B\x84C\x3\x2\x2\x2\x84C\x84D\x3\x2\x2"+
		"\x2\x84D\x84E\a\xC5\x2\x2\x84E\x84F\x5\x100\x81\x2\x84F\x850\a\xCC\x2"+
		"\x2\x850\x852\x3\x2\x2\x2\x851\x84B\x3\x2\x2\x2\x852\x855\x3\x2\x2\x2"+
		"\x853\x851\x3\x2\x2\x2\x853\x854\x3\x2\x2\x2\x854\xE7\x3\x2\x2\x2\x855"+
		"\x853\x3\x2\x2\x2\x856\x85B\x5\xEEx\x2\x857\x85B\x5\xEAv\x2\x858\x85B"+
		"\x5\xECw\x2\x859\x85B\x5\xF2z\x2\x85A\x856\x3\x2\x2\x2\x85A\x857\x3\x2"+
		"\x2\x2\x85A\x858\x3\x2\x2\x2\x85A\x859\x3\x2\x2\x2\x85B\xE9\x3\x2\x2\x2"+
		"\x85C\x85E\x5\x104\x83\x2\x85D\x85F\x5\x11A\x8E\x2\x85E\x85D\x3\x2\x2"+
		"\x2\x85E\x85F\x3\x2\x2\x2\x85F\x864\x3\x2\x2\x2\x860\x862\a\xF4\x2\x2"+
		"\x861\x860\x3\x2\x2\x2\x861\x862\x3\x2\x2\x2\x862\x863\x3\x2\x2\x2\x863"+
		"\x865\x5\xF8}\x2\x864\x861\x3\x2\x2\x2\x864\x865\x3\x2\x2\x2\x865\x86F"+
		"\x3\x2\x2\x2\x866\x868\a\xF4\x2\x2\x867\x866\x3\x2\x2\x2\x867\x868\x3"+
		"\x2\x2\x2\x868\x869\x3\x2\x2\x2\x869\x86A\a\xC5\x2\x2\x86A\x86B\x5\x100"+
		"\x81\x2\x86B\x86C\a\xCC\x2\x2\x86C\x86E\x3\x2\x2\x2\x86D\x867\x3\x2\x2"+
		"\x2\x86E\x871\x3\x2\x2\x2\x86F\x86D\x3\x2\x2\x2\x86F\x870\x3\x2\x2\x2"+
		"\x870\xEB\x3\x2\x2\x2\x871\x86F\x3\x2\x2\x2\x872\x875\x5\x104\x83\x2\x873"+
		"\x875\x5\x108\x85\x2\x874\x872\x3\x2\x2\x2\x874\x873\x3\x2\x2\x2\x875"+
		"\x877\x3\x2\x2\x2\x876\x878\x5\x11A\x8E\x2\x877\x876\x3\x2\x2\x2\x877"+
		"\x878\x3\x2\x2\x2\x878\x87A\x3\x2\x2\x2\x879\x87B\a\xF4\x2\x2\x87A\x879"+
		"\x3\x2\x2\x2\x87A\x87B\x3\x2\x2\x2\x87B\x87C\x3\x2\x2\x2\x87C\x87E\a\xC5"+
		"\x2\x2\x87D\x87F\a\xF4\x2\x2\x87E\x87D\x3\x2\x2\x2\x87E\x87F\x3\x2\x2"+
		"\x2\x87F\x884\x3\x2\x2\x2\x880\x882\x5\xF4{\x2\x881\x883\a\xF4\x2\x2\x882"+
		"\x881\x3\x2\x2\x2\x882\x883\x3\x2\x2\x2\x883\x885\x3\x2\x2\x2\x884\x880"+
		"\x3\x2\x2\x2\x884\x885\x3\x2\x2\x2\x885\x886\x3\x2\x2\x2\x886\x88B\a\xCC"+
		"\x2\x2\x887\x889\a\xF4\x2\x2\x888\x887\x3\x2\x2\x2\x888\x889\x3\x2\x2"+
		"\x2\x889\x88A\x3\x2\x2\x2\x88A\x88C\x5\xF8}\x2\x88B\x888\x3\x2\x2\x2\x88B"+
		"\x88C\x3\x2\x2\x2\x88C\x896\x3\x2\x2\x2\x88D\x88F\a\xF4\x2\x2\x88E\x88D"+
		"\x3\x2\x2\x2\x88E\x88F\x3\x2\x2\x2\x88F\x890\x3\x2\x2\x2\x890\x891\a\xC5"+
		"\x2\x2\x891\x892\x5\x100\x81\x2\x892\x893\a\xCC\x2\x2\x893\x895\x3\x2"+
		"\x2\x2\x894\x88E\x3\x2\x2\x2\x895\x898\x3\x2\x2\x2\x896\x894\x3\x2\x2"+
		"\x2\x896\x897\x3\x2\x2\x2\x897\xED\x3\x2\x2\x2\x898\x896\x3\x2\x2\x2\x899"+
		"\x89C\x5\xEAv\x2\x89A\x89C\x5\xECw\x2\x89B\x899\x3\x2\x2\x2\x89B\x89A"+
		"\x3\x2\x2\x2\x89B\x89C\x3\x2\x2\x2\x89C\x8A1\x3\x2\x2\x2\x89D\x89F\x5"+
		"\xF0y\x2\x89E\x8A0\a\xF4\x2\x2\x89F\x89E\x3\x2\x2\x2\x89F\x8A0\x3\x2\x2"+
		"\x2\x8A0\x8A2\x3\x2\x2\x2\x8A1\x89D\x3\x2\x2\x2\x8A2\x8A3\x3\x2\x2\x2"+
		"\x8A3\x8A1\x3\x2\x2\x2\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8A9\x3\x2\x2\x2\x8A5"+
		"\x8A7\a\xF4\x2\x2\x8A6\x8A5\x3\x2\x2\x2\x8A6\x8A7\x3\x2\x2\x2\x8A7\x8A8"+
		"\x3\x2\x2\x2\x8A8\x8AA\x5\xF8}\x2\x8A9\x8A6\x3\x2\x2\x2\x8A9\x8AA\x3\x2"+
		"\x2\x2\x8AA\x8B4\x3\x2\x2\x2\x8AB\x8AD\a\xF4\x2\x2\x8AC\x8AB\x3\x2\x2"+
		"\x2\x8AC\x8AD\x3\x2\x2\x2\x8AD\x8AE\x3\x2\x2\x2\x8AE\x8AF\a\xC5\x2\x2"+
		"\x8AF\x8B0\x5\x100\x81\x2\x8B0\x8B1\a\xCC\x2\x2\x8B1\x8B3\x3\x2\x2\x2"+
		"\x8B2\x8AC\x3\x2\x2\x2\x8B3\x8B6\x3\x2\x2\x2\x8B4\x8B2\x3\x2\x2\x2\x8B4"+
		"\x8B5\x3\x2\x2\x2\x8B5\xEF\x3\x2\x2\x2\x8B6\x8B4\x3\x2\x2\x2\x8B7\x8B9"+
		"\t\xF\x2\x2\x8B8\x8BA\a\xF4\x2\x2\x8B9\x8B8\x3\x2\x2\x2\x8B9\x8BA\x3\x2"+
		"\x2\x2\x8BA\x8BD\x3\x2\x2\x2\x8BB\x8BE\x5\xEAv\x2\x8BC\x8BE\x5\xECw\x2"+
		"\x8BD\x8BB\x3\x2\x2\x2\x8BD\x8BC\x3\x2\x2\x2\x8BE\xF1\x3\x2\x2\x2\x8BF"+
		"\x8C1\a\xF4\x2\x2\x8C0\x8BF\x3\x2\x2\x2\x8C0\x8C1\x3\x2\x2\x2\x8C1\x8C2"+
		"\x3\x2\x2\x2\x8C2\x8C3\x5\xF8}\x2\x8C3\xF3\x3\x2\x2\x2\x8C4\x8C6\x5\xF6"+
		"|\x2\x8C5\x8C4\x3\x2\x2\x2\x8C5\x8C6\x3\x2\x2\x2\x8C6\x8C8\x3\x2\x2\x2"+
		"\x8C7\x8C9\a\xF4\x2\x2\x8C8\x8C7\x3\x2\x2\x2\x8C8\x8C9\x3\x2\x2\x2\x8C9"+
		"\x8CA\x3\x2\x2\x2\x8CA\x8CC\t\n\x2\x2\x8CB\x8CD\a\xF4\x2\x2\x8CC\x8CB"+
		"\x3\x2\x2\x2\x8CC\x8CD\x3\x2\x2\x2\x8CD\x8CF\x3\x2\x2\x2\x8CE\x8C5\x3"+
		"\x2\x2\x2\x8CF\x8D2\x3\x2\x2\x2\x8D0\x8CE\x3\x2\x2\x2\x8D0\x8D1\x3\x2"+
		"\x2\x2\x8D1\x8D3\x3\x2\x2\x2\x8D2\x8D0\x3\x2\x2\x2\x8D3\x8E0\x5\xF6|\x2"+
		"\x8D4\x8D6\a\xF4\x2\x2\x8D5\x8D4\x3\x2\x2\x2\x8D5\x8D6\x3\x2\x2\x2\x8D6"+
		"\x8D7\x3\x2\x2\x2\x8D7\x8D9\t\n\x2\x2\x8D8\x8DA\a\xF4\x2\x2\x8D9\x8D8"+
		"\x3\x2\x2\x2\x8D9\x8DA\x3\x2\x2\x2\x8DA\x8DC\x3\x2\x2\x2\x8DB\x8DD\x5"+
		"\xF6|\x2\x8DC\x8DB\x3\x2\x2\x2\x8DC\x8DD\x3\x2\x2\x2\x8DD\x8DF\x3\x2\x2"+
		"\x2\x8DE\x8D5\x3\x2\x2\x2\x8DF\x8E2\x3\x2\x2\x2\x8E0\x8DE\x3\x2\x2\x2"+
		"\x8E0\x8E1\x3\x2\x2\x2\x8E1\xF5\x3\x2\x2\x2\x8E2\x8E0\x3\x2\x2\x2\x8E3"+
		"\x8E5\a\xC5\x2\x2\x8E4\x8E3\x3\x2\x2\x2\x8E4\x8E5\x3\x2\x2\x2\x8E5\x8E8"+
		"\x3\x2\x2\x2\x8E6\x8E7\t\x10\x2\x2\x8E7\x8E9\a\xF4\x2\x2\x8E8\x8E6\x3"+
		"\x2\x2\x2\x8E8\x8E9\x3\x2\x2\x2\x8E9\x8EB\x3\x2\x2\x2\x8EA\x8EC\a\xCC"+
		"\x2\x2\x8EB\x8EA\x3\x2\x2\x2\x8EB\x8EC\x3\x2\x2\x2\x8EC\x8ED\x3\x2\x2"+
		"\x2\x8ED\x8EE\x5\xCA\x66\x2\x8EE\xF7\x3\x2\x2\x2\x8EF\x8F1\a\x4\x2\x2"+
		"\x8F0\x8F2\a\xF4\x2\x2\x8F1\x8F0\x3\x2\x2\x2\x8F1\x8F2\x3\x2\x2\x2\x8F2"+
		"\x8F3\x3\x2\x2\x2\x8F3\x8F5\x5\x104\x83\x2\x8F4\x8F6\x5\x11A\x8E\x2\x8F5"+
		"\x8F4\x3\x2\x2\x2\x8F5\x8F6\x3\x2\x2\x2\x8F6\xF9\x3\x2\x2\x2\x8F7\x909"+
		"\a\xC5\x2\x2\x8F8\x8FA\a\xF4\x2\x2\x8F9\x8F8\x3\x2\x2\x2\x8F9\x8FA\x3"+
		"\x2\x2\x2\x8FA\x8FB\x3\x2\x2\x2\x8FB\x906\x5\xFC\x7F\x2\x8FC\x8FE\a\xF4"+
		"\x2\x2\x8FD\x8FC\x3\x2\x2\x2\x8FD\x8FE\x3\x2\x2\x2\x8FE\x8FF\x3\x2\x2"+
		"\x2\x8FF\x901\a\t\x2\x2\x900\x902\a\xF4\x2\x2\x901\x900\x3\x2\x2\x2\x901"+
		"\x902\x3\x2\x2\x2\x902\x903\x3\x2\x2\x2\x903\x905\x5\xFC\x7F\x2\x904\x8FD"+
		"\x3\x2\x2\x2\x905\x908\x3\x2\x2\x2\x906\x904\x3\x2\x2\x2\x906\x907\x3"+
		"\x2\x2\x2\x907\x90A\x3\x2\x2\x2\x908\x906\x3\x2\x2\x2\x909\x8F9\x3\x2"+
		"\x2\x2\x909\x90A\x3\x2\x2\x2\x90A\x90C\x3\x2\x2\x2\x90B\x90D\a\xF4\x2"+
		"\x2\x90C\x90B\x3\x2\x2\x2\x90C\x90D\x3\x2\x2\x2\x90D\x90E\x3\x2\x2\x2"+
		"\x90E\x90F\a\xCC\x2\x2\x90F\xFB\x3\x2\x2\x2\x910\x911\a}\x2\x2\x911\x913"+
		"\a\xF4\x2\x2\x912\x910\x3\x2\x2\x2\x912\x913\x3\x2\x2\x2\x913\x916\x3"+
		"\x2\x2\x2\x914\x915\t\x11\x2\x2\x915\x917\a\xF4\x2\x2\x916\x914\x3\x2"+
		"\x2\x2\x916\x917\x3\x2\x2\x2\x917\x91A\x3\x2\x2\x2\x918\x919\a\x84\x2"+
		"\x2\x919\x91B\a\xF4\x2\x2\x91A\x918\x3\x2\x2\x2\x91A\x91B\x3\x2\x2\x2"+
		"\x91B\x91C\x3\x2\x2\x2\x91C\x91E\x5\x104\x83\x2\x91D\x91F\x5\x11A\x8E"+
		"\x2\x91E\x91D\x3\x2\x2\x2\x91E\x91F\x3\x2\x2\x2\x91F\x928\x3\x2\x2\x2"+
		"\x920\x922\a\xF4\x2\x2\x921\x920\x3\x2\x2\x2\x921\x922\x3\x2\x2\x2\x922"+
		"\x923\x3\x2\x2\x2\x923\x925\a\xC5\x2\x2\x924\x926\a\xF4\x2\x2\x925\x924"+
		"\x3\x2\x2\x2\x925\x926\x3\x2\x2\x2\x926\x927\x3\x2\x2\x2\x927\x929\a\xCC"+
		"\x2\x2\x928\x921\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2\x929\x92E\x3\x2\x2"+
		"\x2\x92A\x92C\a\xF4\x2\x2\x92B\x92A\x3\x2\x2\x2\x92B\x92C\x3\x2\x2\x2"+
		"\x92C\x92D\x3\x2\x2\x2\x92D\x92F\x5\x106\x84\x2\x92E\x92B\x3\x2\x2\x2"+
		"\x92E\x92F\x3\x2\x2\x2\x92F\x934\x3\x2\x2\x2\x930\x932\a\xF4\x2\x2\x931"+
		"\x930\x3\x2\x2\x2\x931\x932\x3\x2\x2\x2\x932\x933\x3\x2\x2\x2\x933\x935"+
		"\x5\xFE\x80\x2\x934\x931\x3\x2\x2\x2\x934\x935\x3\x2\x2\x2\x935\xFD\x3"+
		"\x2\x2\x2\x936\x938\a\xC1\x2\x2\x937\x939\a\xF4\x2\x2\x938\x937\x3\x2"+
		"\x2\x2\x938\x939\x3\x2\x2\x2\x939\x93A\x3\x2\x2\x2\x93A\x93B\x5\xCA\x66"+
		"\x2\x93B\xFF\x3\x2\x2\x2\x93C\x947\x5\x102\x82\x2\x93D\x93F\a\xF4\x2\x2"+
		"\x93E\x93D\x3\x2\x2\x2\x93E\x93F\x3\x2\x2\x2\x93F\x940\x3\x2\x2\x2\x940"+
		"\x942\a\t\x2\x2\x941\x943\a\xF4\x2\x2\x942\x941\x3\x2\x2\x2\x942\x943"+
		"\x3\x2\x2\x2\x943\x944\x3\x2\x2\x2\x944\x946\x5\x102\x82\x2\x945\x93E"+
		"\x3\x2\x2\x2\x946\x949\x3\x2\x2\x2\x947\x945\x3\x2\x2\x2\x947\x948\x3"+
		"\x2\x2\x2\x948\x101\x3\x2\x2\x2\x949\x947\x3\x2\x2\x2\x94A\x94B\x5\xCA"+
		"\x66\x2\x94B\x94C\a\xF4\x2\x2\x94C\x94D\a\xAD\x2\x2\x94D\x94E\a\xF4\x2"+
		"\x2\x94E\x950\x3\x2\x2\x2\x94F\x94A\x3\x2\x2\x2\x94F\x950\x3\x2\x2\x2"+
		"\x950\x951\x3\x2\x2\x2\x951\x952\x5\xCA\x66\x2\x952\x103\x3\x2\x2\x2\x953"+
		"\x956\a\xF5\x2\x2\x954\x956\x5\x11E\x90\x2\x955\x953\x3\x2\x2\x2\x955"+
		"\x954\x3\x2\x2\x2\x956\x957\x3\x2\x2\x2\x957\x955\x3\x2\x2\x2\x957\x958"+
		"\x3\x2\x2\x2\x958\x105\x3\x2\x2\x2\x959\x95B\a\x12\x2\x2\x95A\x95C\a\xF4"+
		"\x2\x2\x95B\x95A\x3\x2\x2\x2\x95B\x95C\x3\x2\x2\x2\x95C\x95F\x3\x2\x2"+
		"\x2\x95D\x95E\au\x2\x2\x95E\x960\a\xF4\x2\x2\x95F\x95D\x3\x2\x2\x2\x95F"+
		"\x960\x3\x2\x2\x2\x960\x961\x3\x2\x2\x2\x961\x966\x5\x118\x8D\x2\x962"+
		"\x964\a\xF4\x2\x2\x963\x962\x3\x2\x2\x2\x963\x964\x3\x2\x2\x2\x964\x965"+
		"\x3\x2\x2\x2\x965\x967\x5\x110\x89\x2\x966\x963\x3\x2\x2\x2\x966\x967"+
		"\x3\x2\x2\x2\x967\x107\x3\x2\x2\x2\x968\x969\t\x12\x2\x2\x969\x109\x3"+
		"\x2\x2\x2\x96A\x96F\a\xF5\x2\x2\x96B\x96E\x5\x11E\x90\x2\x96C\x96E\a\xF5"+
		"\x2\x2\x96D\x96B\x3\x2\x2\x2\x96D\x96C\x3\x2\x2\x2\x96E\x971\x3\x2\x2"+
		"\x2\x96F\x96D\x3\x2\x2\x2\x96F\x970\x3\x2\x2\x2\x970\x97A\x3\x2\x2\x2"+
		"\x971\x96F\x3\x2\x2\x2\x972\x975\x5\x11E\x90\x2\x973\x976\x5\x11E\x90"+
		"\x2\x974\x976\a\xF5\x2\x2\x975\x973\x3\x2\x2\x2\x975\x974\x3\x2\x2\x2"+
		"\x976\x977\x3\x2\x2\x2\x977\x975\x3\x2\x2\x2\x977\x978\x3\x2\x2\x2\x978"+
		"\x97A\x3\x2\x2\x2\x979\x96A\x3\x2\x2\x2\x979\x972\x3\x2\x2\x2\x97A\x10B"+
		"\x3\x2\x2\x2\x97B\x97C\t\xE\x2\x2\x97C\x10D\x3\x2\x2\x2\x97D\x982\x5\x104"+
		"\x83\x2\x97E\x97F\t\xF\x2\x2\x97F\x981\x5\x104\x83\x2\x980\x97E\x3\x2"+
		"\x2\x2\x981\x984\x3\x2\x2\x2\x982\x980\x3\x2\x2\x2\x982\x983\x3\x2\x2"+
		"\x2\x983\x10F\x3\x2\x2\x2\x984\x982\x3\x2\x2\x2\x985\x987\a\xC8\x2\x2"+
		"\x986\x988\a\xF4\x2\x2\x987\x986\x3\x2\x2\x2\x987\x988\x3\x2\x2\x2\x988"+
		"\x98B\x3\x2\x2\x2\x989\x98C\a\xD3\x2\x2\x98A\x98C\x5\x104\x83\x2\x98B"+
		"\x989\x3\x2\x2\x2\x98B\x98A\x3\x2\x2\x2\x98C\x111\x3\x2\x2\x2\x98D\x996"+
		"\x5\x10A\x86\x2\x98E\x990\a\xF4\x2\x2\x98F\x98E\x3\x2\x2\x2\x98F\x990"+
		"\x3\x2\x2\x2\x990\x991\x3\x2\x2\x2\x991\x993\a\xC7\x2\x2\x992\x994\a\xF4"+
		"\x2\x2\x993\x992\x3\x2\x2\x2\x993\x994\x3\x2\x2\x2\x994\x995\x3\x2\x2"+
		"\x2\x995\x997\x5\x10A\x86\x2\x996\x98F\x3\x2\x2\x2\x996\x997\x3\x2\x2"+
		"\x2\x997\x113\x3\x2\x2\x2\x998\x999\x5\x104\x83\x2\x999\x99A\a\xF2\x2"+
		"\x2\x99A\x115\x3\x2\x2\x2\x99B\x99C\t\x13\x2\x2\x99C\x117\x3\x2\x2\x2"+
		"\x99D\x9A0\x5\x108\x85\x2\x99E\x9A0\x5\x10E\x88\x2\x99F\x99D\x3\x2\x2"+
		"\x2\x99F\x99E\x3\x2\x2\x2\x9A0\x9A9\x3\x2\x2\x2\x9A1\x9A3\a\xF4\x2\x2"+
		"\x9A2\x9A1\x3\x2\x2\x2\x9A2\x9A3\x3\x2\x2\x2\x9A3\x9A4\x3\x2\x2\x2\x9A4"+
		"\x9A6\a\xC5\x2\x2\x9A5\x9A7\a\xF4\x2\x2\x9A6\x9A5\x3\x2\x2\x2\x9A6\x9A7"+
		"\x3\x2\x2\x2\x9A7\x9A8\x3\x2\x2\x2\x9A8\x9AA\a\xCC\x2\x2\x9A9\x9A2\x3"+
		"\x2\x2\x2\x9A9\x9AA\x3\x2\x2\x2\x9AA\x119\x3\x2\x2\x2\x9AB\x9AC\t\x14"+
		"\x2\x2\x9AC\x11B\x3\x2\x2\x2\x9AD\x9AE\t\x15\x2\x2\x9AE\x11D\x3\x2\x2"+
		"\x2\x9AF\x9B0\t\x16\x2\x2\x9B0\x11F\x3\x2\x2\x2\x9B1\x9B2\a\xEF\x2\x2"+
		"\x9B2\x121\x3\x2\x2\x2\x9B3\x9B4\a\xF0\x2\x2\x9B4\x123\x3\x2\x2\x2\x9B5"+
		"\x9B7\a\xF4\x2\x2\x9B6\x9B5\x3\x2\x2\x2\x9B6\x9B7\x3\x2\x2\x2\x9B7\x9BB"+
		"\x3\x2\x2\x2\x9B8\x9BC\a\xEE\x2\x2\x9B9\x9BC\x5\x122\x92\x2\x9BA\x9BC"+
		"\x5\x120\x91\x2\x9BB\x9B8\x3\x2\x2\x2\x9BB\x9B9\x3\x2\x2\x2\x9BB\x9BA"+
		"\x3\x2\x2\x2\x9BC\x9BE\x3\x2\x2\x2\x9BD\x9BF\a\xF4\x2\x2\x9BE\x9BD\x3"+
		"\x2\x2\x2\x9BE\x9BF\x3\x2\x2\x2\x9BF\x125\x3\x2\x2\x2\x9C0\x9C9\x5\x124"+
		"\x93\x2\x9C1\x9C3\a\xF4\x2\x2\x9C2\x9C1\x3\x2\x2\x2\x9C2\x9C3\x3\x2\x2"+
		"\x2\x9C3\x9C4\x3\x2\x2\x2\x9C4\x9C6\a\xF2\x2\x2\x9C5\x9C7\a\xF4\x2\x2"+
		"\x9C6\x9C5\x3\x2\x2\x2\x9C6\x9C7\x3\x2\x2\x2\x9C7\x9C9\x3\x2\x2\x2\x9C8"+
		"\x9C0\x3\x2\x2\x2\x9C8\x9C2\x3\x2\x2\x2\x9C9\x9CC\x3\x2\x2\x2\x9CA\x9C8"+
		"\x3\x2\x2\x2\x9CA\x9CB\x3\x2\x2\x2\x9CB\x127\x3\x2\x2\x2\x9CC\x9CA\x3"+
		"\x2\x2\x2\x1A9\x12C\x132\x135\x139\x13D\x141\x145\x152\x158\x15C\x166"+
		"\x16E\x17B\x186\x18A\x192\x19D\x1A3\x1A7\x1AB\x1AF\x1B4\x1BD\x205\x20B"+
		"\x20F\x212\x222\x226\x22B\x22E\x233\x239\x23D\x242\x247\x24B\x24E\x252"+
		"\x258\x25C\x263\x269\x26D\x270\x275\x27F\x282\x285\x289\x28F\x293\x298"+
		"\x29F\x2A3\x2A7\x2AB\x2AE\x2B3\x2BE\x2CB\x2D2\x2DB\x2E2\x2E6\x2E9\x2F8"+
		"\x2FE\x308\x30C\x316\x31E\x323\x329\x32D\x330\x334\x33F\x343\x348\x34D"+
		"\x351\x355\x359\x35C\x35F\x362\x365\x369\x371\x375\x378\x37B\x37F\x396"+
		"\x39C\x3A0\x3A4\x3AD\x3B8\x3BD\x3C7\x3CB\x3D0\x3D8\x3DC\x3E0\x3E8\x3EC"+
		"\x3F8\x3FC\x403\x405\x40B\x40F\x415\x419\x41D\x425\x429\x42F\x438\x43A"+
		"\x43F\x448\x44A\x452\x454\x459\x45D\x461\x479\x483\x487\x48C\x497\x49B"+
		"\x4A0\x4AE\x4B2\x4BB\x4BF\x4C2\x4C6\x4CA\x4CD\x4D1\x4D5\x4D8\x4DC\x4DF"+
		"\x4E3\x4E5\x4EA\x4EE\x4F2\x4F6\x4F8\x4FE\x502\x505\x50A\x50E\x514\x517"+
		"\x51A\x51E\x522\x529\x52D\x533\x536\x53A\x541\x545\x54B\x54E\x552\x55A"+
		"\x55E\x561\x564\x568\x570\x574\x578\x57A\x57D\x582\x588\x58C\x590\x595"+
		"\x59A\x59E\x5A2\x5A7\x5AF\x5B1\x5BD\x5C1\x5C9\x5CD\x5D5\x5D9\x5DD\x5E1"+
		"\x5E5\x5E9\x5F1\x5F5\x602\x609\x60D\x618\x61F\x624\x628\x62D\x630\x636"+
		"\x63A\x63D\x643\x647\x64F\x653\x65C\x660\x664\x668\x66B\x66F\x675\x679"+
		"\x680\x689\x690\x694\x697\x69A\x69D\x6A1\x6AC\x6B6\x6BA\x6C1\x6C3\x6C8"+
		"\x6CD\x6D2\x6D6\x6DC\x6E1\x6E8\x6EC\x6F0\x6F5\x6FC\x700\x704\x709\x70D"+
		"\x712\x716\x71B\x71F\x724\x728\x72D\x731\x736\x73A\x73F\x743\x748\x74C"+
		"\x751\x755\x75A\x75E\x763\x767\x76A\x76C\x772\x777\x77D\x781\x786\x78B"+
		"\x78F\x793\x795\x799\x79B\x79E\x7A2\x7A9\x7B1\x7B5\x7BF\x7C3\x7CB\x7CF"+
		"\x7D2\x7D5\x7DB\x7E1\x7E4\x7E8\x7EC\x7F0\x7F3\x7FB\x801\x806\x809\x80D"+
		"\x811\x815\x818\x820\x825\x828\x82D\x831\x834\x837\x83A\x842\x848\x84B"+
		"\x853\x85A\x85E\x861\x864\x867\x86F\x874\x877\x87A\x87E\x882\x884\x888"+
		"\x88B\x88E\x896\x89B\x89F\x8A3\x8A6\x8A9\x8AC\x8B4\x8B9\x8BD\x8C0\x8C5"+
		"\x8C8\x8CC\x8D0\x8D5\x8D9\x8DC\x8E0\x8E4\x8E8\x8EB\x8F1\x8F5\x8F9\x8FD"+
		"\x901\x906\x909\x90C\x912\x916\x91A\x91E\x921\x925\x928\x92B\x92E\x931"+
		"\x934\x938\x93E\x942\x947\x94F\x955\x957\x95B\x95F\x963\x966\x96D\x96F"+
		"\x975\x977\x979\x982\x987\x98B\x98F\x993\x996\x99F\x9A2\x9A6\x9A9\x9B6"+
		"\x9BB\x9BE\x9C2\x9C6\x9C8\x9CA";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Grammar
