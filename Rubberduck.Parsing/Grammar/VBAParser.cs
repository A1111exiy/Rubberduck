//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Mathieu\Documents\GitHub\Rubberduck\Rubberduck.Parsing\Grammar\VBA.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		T__8=1, T__7=2, T__6=3, T__5=4, T__4=5, T__3=6, T__2=7, T__1=8, T__0=9, 
		ACCESS=10, ADDRESSOF=11, ALIAS=12, AND=13, ATTRIBUTE=14, APPACTIVATE=15, 
		APPEND=16, AS=17, BEGIN=18, BEEP=19, BINARY=20, BOOLEAN=21, BYVAL=22, 
		BYREF=23, BYTE=24, CALL=25, CASE=26, CHDIR=27, CHDRIVE=28, CLASS=29, CLOSE=30, 
		COLLECTION=31, CONST=32, DATABASE=33, DATE=34, DECLARE=35, DEFBOOL=36, 
		DEFBYTE=37, DEFDATE=38, DEFDBL=39, DEFDEC=40, DEFCUR=41, DEFINT=42, DEFLNG=43, 
		DEFOBJ=44, DEFSNG=45, DEFSTR=46, DEFVAR=47, DELETESETTING=48, DIM=49, 
		DO=50, DOUBLE=51, EACH=52, ELSE=53, ELSEIF=54, END_ENUM=55, END_FUNCTION=56, 
		END_IF=57, END_PROPERTY=58, END_SELECT=59, END_SUB=60, END_TYPE=61, END_WITH=62, 
		END=63, ENUM=64, EQV=65, ERASE=66, ERROR=67, EVENT=68, EXIT_DO=69, EXIT_FOR=70, 
		EXIT_FUNCTION=71, EXIT_PROPERTY=72, EXIT_SUB=73, FALSE=74, FILECOPY=75, 
		FRIEND=76, FOR=77, FUNCTION=78, GET=79, GLOBAL=80, GOSUB=81, GOTO=82, 
		IF=83, IMP=84, IMPLEMENTS=85, IN=86, INPUT=87, IS=88, INTEGER=89, KILL=90, 
		LOAD=91, LOCK=92, LONG=93, LOOP=94, LEN=95, LET=96, LIB=97, LIKE=98, LINE_INPUT=99, 
		LOCK_READ=100, LOCK_WRITE=101, LOCK_READ_WRITE=102, LSET=103, MACRO_CONST=104, 
		MACRO_IF=105, MACRO_ELSEIF=106, MACRO_ELSE=107, MACRO_END_IF=108, ME=109, 
		MID=110, MKDIR=111, MOD=112, NAME=113, NEXT=114, NEW=115, NOT=116, NOTHING=117, 
		NULL=118, ON=119, ON_ERROR=120, OPEN=121, OPTIONAL=122, OPTION_BASE=123, 
		OPTION_EXPLICIT=124, OPTION_COMPARE=125, OPTION_PRIVATE_MODULE=126, OR=127, 
		OUTPUT=128, PARAMARRAY=129, PRESERVE=130, PRINT=131, PRIVATE=132, PROPERTY_GET=133, 
		PROPERTY_LET=134, PROPERTY_SET=135, PTRSAFE=136, PUBLIC=137, PUT=138, 
		RANDOM=139, RANDOMIZE=140, RAISEEVENT=141, READ=142, READ_WRITE=143, REDIM=144, 
		REM=145, RESET=146, RESUME=147, RETURN=148, RMDIR=149, RSET=150, SAVEPICTURE=151, 
		SAVESETTING=152, SEEK=153, SELECT=154, SENDKEYS=155, SET=156, SETATTR=157, 
		SHARED=158, SINGLE=159, SPC=160, STATIC=161, STEP=162, STOP=163, STRING=164, 
		SUB=165, TAB=166, TEXT=167, THEN=168, TIME=169, TO=170, TRUE=171, TYPE=172, 
		TYPEOF=173, UNLOAD=174, UNLOCK=175, UNTIL=176, VARIANT=177, VERSION=178, 
		WEND=179, WHILE=180, WIDTH=181, WITH=182, WITHEVENTS=183, WRITE=184, XOR=185, 
		AMPERSAND=186, ASSIGN=187, DIV=188, EQ=189, GEQ=190, GT=191, LEQ=192, 
		LPAREN=193, LT=194, MINUS=195, MINUS_EQ=196, MULT=197, NEQ=198, PLUS=199, 
		PLUS_EQ=200, POW=201, RPAREN=202, L_SQUARE_BRACKET=203, R_SQUARE_BRACKET=204, 
		STRINGLITERAL=205, DATELITERAL=206, COLORLITERAL=207, INTEGERLITERAL=208, 
		DOUBLELITERAL=209, BYTELITERAL=210, IDENTIFIER=211, LINE_CONTINUATION=212, 
		NEWLINE=213, COMMENT=214, WS=215;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'@'", "'!'", "'#'", "'$'", "'%'", "':'", "';'", "','", "'.'", 
		"ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", "APPEND", 
		"AS", "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", 
		"CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "COLLECTION", "CONST", 
		"DATABASE", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", 
		"DEFDEC", "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR", 
		"DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", 
		"END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
		"END_TYPE", "END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", 
		"EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", 
		"FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", 
		"IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", "LOAD", 
		"LOCK", "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", 
		"LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_CONST", "MACRO_IF", "MACRO_ELSEIF", 
		"MACRO_ELSE", "MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT", 
		"NEW", "NOT", "NOTHING", "NULL", "ON", "ON_ERROR", "OPEN", "OPTIONAL", 
		"OPTION_BASE", "OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", 
		"OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", 
		"PROPERTY_LET", "PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM", 
		"RANDOMIZE", "RAISEEVENT", "READ", "READ_WRITE", "REDIM", "REM", "RESET", 
		"RESUME", "RETURN", "RMDIR", "RSET", "SAVEPICTURE", "SAVESETTING", "SEEK", 
		"SELECT", "SENDKEYS", "SET", "SETATTR", "SHARED", "SINGLE", "SPC", "STATIC", 
		"STEP", "STOP", "STRING", "SUB", "TAB", "TEXT", "THEN", "TIME", "TO", 
		"TRUE", "TYPE", "TYPEOF", "UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION", 
		"WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS", "WRITE", "XOR", "'&'", 
		"':='", "DIV", "'='", "'>='", "'>'", "'<='", "'('", "'<'", "'-'", "'-='", 
		"'*'", "'<>'", "'+'", "'+='", "'^'", "')'", "'['", "']'", "STRINGLITERAL", 
		"DATELITERAL", "COLORLITERAL", "INTEGERLITERAL", "DOUBLELITERAL", "BYTELITERAL", 
		"IDENTIFIER", "LINE_CONTINUATION", "NEWLINE", "COMMENT", "WS"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleDeclarations = 6, 
		RULE_moduleOption = 7, RULE_moduleDeclarationsElement = 8, RULE_moduleBody = 9, 
		RULE_moduleBodyElement = 10, RULE_moduleBlock = 11, RULE_attributeStmt = 12, 
		RULE_block = 13, RULE_blockStmt = 14, RULE_appactivateStmt = 15, RULE_beepStmt = 16, 
		RULE_chdirStmt = 17, RULE_chdriveStmt = 18, RULE_closeStmt = 19, RULE_constStmt = 20, 
		RULE_constSubStmt = 21, RULE_dateStmt = 22, RULE_declareStmt = 23, RULE_deftypeStmt = 24, 
		RULE_deleteSettingStmt = 25, RULE_doLoopStmt = 26, RULE_endStmt = 27, 
		RULE_enumerationStmt = 28, RULE_enumerationStmt_Constant = 29, RULE_eraseStmt = 30, 
		RULE_errorStmt = 31, RULE_eventStmt = 32, RULE_exitStmt = 33, RULE_filecopyStmt = 34, 
		RULE_forEachStmt = 35, RULE_forNextStmt = 36, RULE_functionStmt = 37, 
		RULE_getStmt = 38, RULE_goSubStmt = 39, RULE_goToStmt = 40, RULE_ifThenElseStmt = 41, 
		RULE_ifBlockStmt = 42, RULE_ifConditionStmt = 43, RULE_ifElseIfBlockStmt = 44, 
		RULE_ifElseBlockStmt = 45, RULE_implementsStmt = 46, RULE_inputStmt = 47, 
		RULE_killStmt = 48, RULE_letStmt = 49, RULE_lineInputStmt = 50, RULE_loadStmt = 51, 
		RULE_lockStmt = 52, RULE_lsetStmt = 53, RULE_macroConstStmt = 54, RULE_macroIfThenElseStmt = 55, 
		RULE_macroIfBlockStmt = 56, RULE_macroElseIfBlockStmt = 57, RULE_macroElseBlockStmt = 58, 
		RULE_midStmt = 59, RULE_mkdirStmt = 60, RULE_nameStmt = 61, RULE_onErrorStmt = 62, 
		RULE_onGoToStmt = 63, RULE_onGoSubStmt = 64, RULE_openStmt = 65, RULE_outputList = 66, 
		RULE_outputList_Expression = 67, RULE_printStmt = 68, RULE_propertyGetStmt = 69, 
		RULE_propertySetStmt = 70, RULE_propertyLetStmt = 71, RULE_putStmt = 72, 
		RULE_raiseEventStmt = 73, RULE_randomizeStmt = 74, RULE_redimStmt = 75, 
		RULE_redimSubStmt = 76, RULE_resetStmt = 77, RULE_resumeStmt = 78, RULE_returnStmt = 79, 
		RULE_rmdirStmt = 80, RULE_rsetStmt = 81, RULE_savepictureStmt = 82, RULE_saveSettingStmt = 83, 
		RULE_seekStmt = 84, RULE_selectCaseStmt = 85, RULE_sC_Case = 86, RULE_sC_Cond = 87, 
		RULE_sendkeysStmt = 88, RULE_setattrStmt = 89, RULE_setStmt = 90, RULE_stopStmt = 91, 
		RULE_subStmt = 92, RULE_timeStmt = 93, RULE_typeStmt = 94, RULE_typeStmt_Element = 95, 
		RULE_typeOfStmt = 96, RULE_unloadStmt = 97, RULE_unlockStmt = 98, RULE_valueStmt = 99, 
		RULE_variableStmt = 100, RULE_variableListStmt = 101, RULE_variableSubStmt = 102, 
		RULE_whileWendStmt = 103, RULE_widthStmt = 104, RULE_withStmt = 105, RULE_writeStmt = 106, 
		RULE_fileNumber = 107, RULE_explicitCallStmt = 108, RULE_eCS_ProcedureCall = 109, 
		RULE_eCS_MemberProcedureCall = 110, RULE_implicitCallStmt_InBlock = 111, 
		RULE_iCS_B_MemberProcedureCall = 112, RULE_iCS_B_ProcedureCall = 113, 
		RULE_implicitCallStmt_InStmt = 114, RULE_iCS_S_VariableOrProcedureCall = 115, 
		RULE_iCS_S_ProcedureOrArrayCall = 116, RULE_iCS_S_MembersCall = 117, RULE_iCS_S_MemberCall = 118, 
		RULE_iCS_S_DictionaryCall = 119, RULE_argsCall = 120, RULE_argCall = 121, 
		RULE_dictionaryCallStmt = 122, RULE_argList = 123, RULE_arg = 124, RULE_argDefaultValue = 125, 
		RULE_subscripts = 126, RULE_subscript = 127, RULE_ambiguousIdentifier = 128, 
		RULE_asTypeClause = 129, RULE_baseType = 130, RULE_certainIdentifier = 131, 
		RULE_comparisonOperator = 132, RULE_complexType = 133, RULE_fieldLength = 134, 
		RULE_letterrange = 135, RULE_lineLabel = 136, RULE_literal = 137, RULE_type = 138, 
		RULE_typeHint = 139, RULE_visibility = 140, RULE_ambiguousKeyword = 141;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement", 
		"moduleBody", "moduleBodyElement", "moduleBlock", "attributeStmt", "block", 
		"blockStmt", "appactivateStmt", "beepStmt", "chdirStmt", "chdriveStmt", 
		"closeStmt", "constStmt", "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt", 
		"deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant", 
		"eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", 
		"forNextStmt", "functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt", 
		"ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
		"implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
		"loadStmt", "lockStmt", "lsetStmt", "macroConstStmt", "macroIfThenElseStmt", 
		"macroIfBlockStmt", "macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt", 
		"mkdirStmt", "nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", 
		"outputList", "outputList_Expression", "printStmt", "propertyGetStmt", 
		"propertySetStmt", "propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt", 
		"redimStmt", "redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", 
		"rmdirStmt", "rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt", 
		"selectCaseStmt", "sC_Case", "sC_Cond", "sendkeysStmt", "setattrStmt", 
		"setStmt", "stopStmt", "subStmt", "timeStmt", "typeStmt", "typeStmt_Element", 
		"typeOfStmt", "unloadStmt", "unlockStmt", "valueStmt", "variableStmt", 
		"variableListStmt", "variableSubStmt", "whileWendStmt", "widthStmt", "withStmt", 
		"writeStmt", "fileNumber", "explicitCallStmt", "eCS_ProcedureCall", "eCS_MemberProcedureCall", 
		"implicitCallStmt_InBlock", "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", 
		"implicitCallStmt_InStmt", "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", 
		"iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", 
		"argCall", "dictionaryCallStmt", "argList", "arg", "argDefaultValue", 
		"subscripts", "subscript", "ambiguousIdentifier", "asTypeClause", "baseType", 
		"certainIdentifier", "comparisonOperator", "complexType", "fieldLength", 
		"letterrange", "lineLabel", "literal", "type", "typeHint", "visibility", 
		"ambiguousKeyword"
	};

	public override string GrammarFileName { get { return "VBA.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; module();
			State = 285; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleDeclarationsContext moduleDeclarations() {
			return GetRuleContext<ModuleDeclarationsContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 287; Match(WS);
				}
				break;
			}
			State = 293;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 290; Match(NEWLINE);
					}
					} 
				}
				State = 295;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 302;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 296; moduleHeader();
				State = 298;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 297; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 300;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 305;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 304; moduleConfig();
				}
				break;
			}
			State = 310;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 307; Match(NEWLINE);
					}
					} 
				}
				State = 312;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 314;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 313; moduleAttributes();
				}
				break;
			}
			State = 319;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 316; Match(NEWLINE);
					}
					} 
				}
				State = 321;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 323;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 322; moduleDeclarations();
				}
				break;
			}
			State = 328;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 325; Match(NEWLINE);
					}
					} 
				}
				State = 330;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 332;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 331; moduleBody();
				}
			}

			State = 337;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 334; Match(NEWLINE);
				}
				}
				State = 339;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 341;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 340; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(VERSION);
			State = 344; Match(WS);
			State = 345; Match(DOUBLELITERAL);
			State = 346; Match(WS);
			State = 347; Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(BEGIN);
			State = 351;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 350; Match(NEWLINE);
				}
				}
				State = 353;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 356;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 355; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 358;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 360; Match(END);
			State = 362;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 361; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 364;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NEWLINE() { return GetToken(VBAParser.NEWLINE, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366; ambiguousIdentifier();
			State = 368;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 367; Match(WS);
				}
			}

			State = 370; Match(EQ);
			State = 372;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 371; Match(WS);
				}
			}

			State = 374; literal();
			State = 375; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 377; attributeStmt();
					State = 379;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 378; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 381;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 385;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleDeclarations);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; moduleDeclarationsElement();
			State = 396;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 389;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 388; Match(NEWLINE);
						}
						}
						State = 391;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 393; moduleDeclarationsElement();
					}
					} 
				}
				State = 398;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleOption);
		int _la;
		try {
			State = 407;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 399; Match(OPTION_BASE);
				State = 400; Match(WS);
				State = 401; Match(INTEGERLITERAL);
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 402; Match(OPTION_COMPARE);
				State = 403; Match(WS);
				State = 404;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 405; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 406; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public MacroConstStmtContext macroConstStmt() {
			return GetRuleContext<MacroConstStmtContext>(0);
		}
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public ModuleBlockContext moduleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleDeclarationsElement);
		try {
			State = 417;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 409; moduleBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 410; declareStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 411; enumerationStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 412; eventStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 413; macroConstStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 414; macroIfThenElseStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 415; moduleOption();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 416; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; moduleBodyElement();
			State = 428;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 421;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 420; Match(NEWLINE);
						}
						}
						State = 423;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 425; moduleBodyElement();
					}
					} 
				}
				State = 430;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public ModuleBlockContext moduleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleBodyElement);
		try {
			State = 438;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 431; moduleBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 432; functionStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 433; macroIfThenElseStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 434; propertyGetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 435; propertySetStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 436; propertyLetStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 437; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ModuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBlockContext moduleBlock() {
		ModuleBlockContext _localctx = new ModuleBlockContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_moduleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<LiteralContext> literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(ATTRIBUTE);
			State = 443; Match(WS);
			State = 444; implicitCallStmt_InStmt();
			State = 446;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 445; Match(WS);
				}
			}

			State = 448; Match(EQ);
			State = 450;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 449; Match(WS);
				}
			}

			State = 452; literal();
			State = 463;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 454;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 453; Match(WS);
						}
					}

					State = 456; Match(T__1);
					State = 458;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 457; Match(WS);
						}
					}

					State = 460; literal();
					}
					} 
				}
				State = 465;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; blockStmt();
			State = 479;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 470;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==NEWLINE) {
						{
						{
						State = 467; Match(NEWLINE);
						}
						}
						State = 472;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 474;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 473; Match(WS);
						}
					}

					State = 476; blockStmt();
					}
					} 
				}
				State = 481;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			State = 485;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 482; Match(NEWLINE);
					}
					} 
				}
				State = 487;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public LoadStmtContext loadStmt() {
			return GetRuleContext<LoadStmtContext>(0);
		}
		public ChdriveStmtContext chdriveStmt() {
			return GetRuleContext<ChdriveStmtContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public FilecopyStmtContext filecopyStmt() {
			return GetRuleContext<FilecopyStmtContext>(0);
		}
		public RmdirStmtContext rmdirStmt() {
			return GetRuleContext<RmdirStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public ChdirStmtContext chdirStmt() {
			return GetRuleContext<ChdirStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public RandomizeStmtContext randomizeStmt() {
			return GetRuleContext<RandomizeStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public MkdirStmtContext mkdirStmt() {
			return GetRuleContext<MkdirStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public SavepictureStmtContext savepictureStmt() {
			return GetRuleContext<SavepictureStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public IfThenElseStmtContext ifThenElseStmt() {
			return GetRuleContext<IfThenElseStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public SetattrStmtContext setattrStmt() {
			return GetRuleContext<SetattrStmtContext>(0);
		}
		public SaveSettingStmtContext saveSettingStmt() {
			return GetRuleContext<SaveSettingStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public TimeStmtContext timeStmt() {
			return GetRuleContext<TimeStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public SendkeysStmtContext sendkeysStmt() {
			return GetRuleContext<SendkeysStmtContext>(0);
		}
		public DeleteSettingStmtContext deleteSettingStmt() {
			return GetRuleContext<DeleteSettingStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public DateStmtContext dateStmt() {
			return GetRuleContext<DateStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public KillStmtContext killStmt() {
			return GetRuleContext<KillStmtContext>(0);
		}
		public DeftypeStmtContext deftypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public LineLabelContext lineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public BeepStmtContext beepStmt() {
			return GetRuleContext<BeepStmtContext>(0);
		}
		public AppactivateStmtContext appactivateStmt() {
			return GetRuleContext<AppactivateStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public UnloadStmtContext unloadStmt() {
			return GetRuleContext<UnloadStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_blockStmt);
		try {
			State = 555;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 488; lineLabel();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 489; appactivateStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 490; attributeStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 491; beepStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 492; chdirStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 493; chdriveStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 494; closeStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 495; constStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 496; dateStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 497; deleteSettingStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 498; deftypeStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 499; doLoopStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 500; endStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 501; eraseStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 502; errorStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 503; exitStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 504; explicitCallStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 505; filecopyStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 506; forEachStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 507; forNextStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 508; getStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 509; goSubStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 510; goToStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 511; ifThenElseStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 512; implementsStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 513; inputStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 514; killStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 515; letStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 516; lineInputStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 517; loadStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 518; lockStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 519; lsetStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 520; macroIfThenElseStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 521; midStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 522; mkdirStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 523; nameStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 524; onErrorStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 525; onGoToStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 526; onGoSubStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 527; openStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 528; printStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 529; putStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 530; raiseEventStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 531; randomizeStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 532; redimStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 533; resetStmt();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 534; resumeStmt();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 535; returnStmt();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 536; rmdirStmt();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 537; rsetStmt();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 538; savepictureStmt();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 539; saveSettingStmt();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 540; seekStmt();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 541; selectCaseStmt();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 542; sendkeysStmt();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 543; setattrStmt();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 544; setStmt();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 545; stopStmt();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 546; timeStmt();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 547; unloadStmt();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 548; unlockStmt();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 549; variableStmt();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 550; whileWendStmt();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 551; widthStmt();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 552; withStmt();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 553; writeStmt();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 554; implicitCallStmt_InBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppactivateStmtContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public AppactivateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appactivateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAppactivateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAppactivateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppactivateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppactivateStmtContext appactivateStmt() {
		AppactivateStmtContext _localctx = new AppactivateStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_appactivateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; Match(APPACTIVATE);
			State = 558; Match(WS);
			State = 559; valueStmt(0);
			State = 568;
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 561;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 560; Match(WS);
					}
				}

				State = 563; Match(T__1);
				State = 565;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 564; Match(WS);
					}
				}

				State = 567; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepStmtContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public BeepStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBeepStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBeepStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeepStmtContext beepStmt() {
		BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_beepStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdirStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ChdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterChdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitChdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdirStmtContext chdirStmt() {
		ChdirStmtContext _localctx = new ChdirStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_chdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572; Match(CHDIR);
			State = 573; Match(WS);
			State = 574; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdriveStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ChdriveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdriveStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterChdriveStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitChdriveStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdriveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdriveStmtContext chdriveStmt() {
		ChdriveStmtContext _localctx = new ChdriveStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_chdriveStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576; Match(CHDRIVE);
			State = 577; Match(WS);
			State = 578; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public IReadOnlyList<FileNumberContext> fileNumber() {
			return GetRuleContexts<FileNumberContext>();
		}
		public FileNumberContext fileNumber(int i) {
			return GetRuleContext<FileNumberContext>(i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 580; Match(CLOSE);
			State = 596;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 581; Match(WS);
				State = 582; fileNumber();
				State = 593;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,42,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 584;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 583; Match(WS);
							}
						}

						State = 586; Match(T__1);
						State = 588;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 587; Match(WS);
							}
						}

						State = 590; fileNumber();
						}
						} 
					}
					State = 595;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,42,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 598; visibility();
				State = 599; Match(WS);
				}
			}

			State = 603; Match(CONST);
			State = 604; Match(WS);
			State = 605; constSubStmt();
			State = 616;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,47,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 607;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 606; Match(WS);
						}
					}

					State = 609; Match(T__1);
					State = 611;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 610; Match(WS);
						}
					}

					State = 613; constSubStmt();
					}
					} 
				}
				State = 618;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,47,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619; ambiguousIdentifier();
			State = 621;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la==AMPERSAND) {
				{
				State = 620; typeHint();
				}
			}

			State = 625;
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 623; Match(WS);
				State = 624; asTypeClause();
				}
				break;
			}
			State = 628;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 627; Match(WS);
				}
			}

			State = 630; Match(EQ);
			State = 632;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 631; Match(WS);
				}
			}

			State = 634; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public DateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateStmtContext dateStmt() {
		DateStmtContext _localctx = new DateStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_dateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636; Match(DATE);
			State = 638;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 637; Match(WS);
				}
			}

			State = 640; Match(EQ);
			State = 642;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 641; Match(WS);
				}
			}

			State = 644; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 646; visibility();
				State = 647; Match(WS);
				}
			}

			State = 651; Match(DECLARE);
			State = 652; Match(WS);
			State = 655;
			_la = _input.La(1);
			if (_la==PTRSAFE) {
				{
				State = 653; Match(PTRSAFE);
				State = 654; Match(WS);
				}
			}

			State = 657;
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==SUB) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 658; Match(WS);
			State = 659; ambiguousIdentifier();
			State = 660; Match(WS);
			State = 661; Match(LIB);
			State = 662; Match(WS);
			State = 663; Match(STRINGLITERAL);
			State = 668;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 664; Match(WS);
				State = 665; Match(ALIAS);
				State = 666; Match(WS);
				State = 667; Match(STRINGLITERAL);
				}
				break;
			}
			State = 674;
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 671;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 670; Match(WS);
					}
				}

				State = 673; argList();
				}
				break;
			}
			State = 678;
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				State = 676; Match(WS);
				State = 677; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public IReadOnlyList<LetterrangeContext> letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext deftypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 681; Match(WS);
			State = 682; letterrange();
			State = 693;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,62,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 684;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 683; Match(WS);
						}
					}

					State = 686; Match(T__1);
					State = 688;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 687; Match(WS);
						}
					}

					State = 690; letterrange();
					}
					} 
				}
				State = 695;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,62,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSettingStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSettingStmtContext deleteSettingStmt() {
		DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_deleteSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696; Match(DELETESETTING);
			State = 697; Match(WS);
			State = 698; valueStmt(0);
			State = 700;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 699; Match(WS);
				}
			}

			State = 702; Match(T__1);
			State = 704;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 703; Match(WS);
				}
			}

			State = 706; valueStmt(0);
			State = 715;
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				State = 708;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 707; Match(WS);
					}
				}

				State = 710; Match(T__1);
				State = 712;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 711; Match(WS);
					}
				}

				State = 714; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_doLoopStmt);
		int _la;
		try {
			State = 770;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 717; Match(DO);
				State = 719;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 718; Match(NEWLINE);
					}
					}
					State = 721;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 729;
				switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					State = 723; block();
					State = 725;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 724; Match(NEWLINE);
						}
						}
						State = 727;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 731; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 732; Match(DO);
				State = 733; Match(WS);
				State = 734;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 735; Match(WS);
				State = 736; valueStmt(0);
				State = 738;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 737; Match(NEWLINE);
					}
					}
					State = 740;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 748;
				switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					State = 742; block();
					State = 744;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 743; Match(NEWLINE);
						}
						}
						State = 746;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 750; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 752; Match(DO);
				State = 754;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 753; Match(NEWLINE);
					}
					}
					State = 756;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				{
				State = 758; block();
				State = 760;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 759; Match(NEWLINE);
					}
					}
					State = 762;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				State = 764; Match(LOOP);
				State = 765; Match(WS);
				State = 766;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 767; Match(WS);
				State = 768; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 774; visibility();
				State = 775; Match(WS);
				}
			}

			State = 779; Match(ENUM);
			State = 780; Match(WS);
			State = 781; ambiguousIdentifier();
			State = 783;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 782; Match(NEWLINE);
				}
				}
				State = 785;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 790;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 787; enumerationStmt_Constant();
				}
				}
				State = 792;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 793; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795; ambiguousIdentifier();
			State = 804;
			_la = _input.La(1);
			if (_la==EQ || _la==WS) {
				{
				State = 797;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 796; Match(WS);
					}
				}

				State = 799; Match(EQ);
				State = 801;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 800; Match(WS);
					}
				}

				State = 803; valueStmt(0);
				}
			}

			State = 807;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 806; Match(NEWLINE);
				}
				}
				State = 809;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_eraseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811; Match(ERASE);
			State = 812; Match(WS);
			State = 813; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815; Match(ERROR);
			State = 816; Match(WS);
			State = 817; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 819; visibility();
				State = 820; Match(WS);
				}
			}

			State = 824; Match(EVENT);
			State = 825; Match(WS);
			State = 826; ambiguousIdentifier();
			State = 828;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 827; Match(WS);
				}
			}

			State = 830; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832;
			_la = _input.La(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (EXIT_DO - 69)) | (1L << (EXIT_FOR - 69)) | (1L << (EXIT_FUNCTION - 69)) | (1L << (EXIT_PROPERTY - 69)) | (1L << (EXIT_SUB - 69)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilecopyStmtContext : ParserRuleContext {
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filecopyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFilecopyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFilecopyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilecopyStmtContext filecopyStmt() {
		FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_filecopyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834; Match(FILECOPY);
			State = 835; Match(WS);
			State = 836; valueStmt(0);
			State = 838;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 837; Match(WS);
				}
			}

			State = 840; Match(T__1);
			State = 842;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 841; Match(WS);
				}
			}

			State = 844; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846; Match(FOR);
			State = 847; Match(WS);
			State = 848; Match(EACH);
			State = 849; Match(WS);
			State = 850; ambiguousIdentifier();
			State = 852;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la==AMPERSAND) {
				{
				State = 851; typeHint();
				}
			}

			State = 854; Match(WS);
			State = 855; Match(IN);
			State = 856; Match(WS);
			State = 857; valueStmt(0);
			State = 859;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 858; Match(NEWLINE);
				}
				}
				State = 861;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 869;
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 863; block();
				State = 865;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 864; Match(NEWLINE);
					}
					}
					State = 867;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 871; Match(NEXT);
			State = 874;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 872; Match(WS);
				State = 873; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876; Match(FOR);
			State = 877; Match(WS);
			State = 878; ambiguousIdentifier();
			State = 880;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la==AMPERSAND) {
				{
				State = 879; typeHint();
				}
			}

			State = 884;
			switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				State = 882; Match(WS);
				State = 883; asTypeClause();
				}
				break;
			}
			State = 887;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 886; Match(WS);
				}
			}

			State = 889; Match(EQ);
			State = 891;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 890; Match(WS);
				}
			}

			State = 893; valueStmt(0);
			State = 894; Match(WS);
			State = 895; Match(TO);
			State = 896; Match(WS);
			State = 897; valueStmt(0);
			State = 902;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 898; Match(WS);
				State = 899; Match(STEP);
				State = 900; Match(WS);
				State = 901; valueStmt(0);
				}
			}

			State = 905;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 904; Match(NEWLINE);
				}
				}
				State = 907;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 915;
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				State = 909; block();
				State = 911;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 910; Match(NEWLINE);
					}
					}
					State = 913;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 917; Match(NEXT);
			State = 920;
			switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				State = 918; Match(WS);
				State = 919; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 922; visibility();
				State = 923; Match(WS);
				}
			}

			State = 929;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 927; Match(STATIC);
				State = 928; Match(WS);
				}
			}

			State = 931; Match(FUNCTION);
			State = 932; Match(WS);
			State = 933; ambiguousIdentifier();
			State = 938;
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				State = 935;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 934; Match(WS);
					}
				}

				State = 937; argList();
				}
				break;
			}
			State = 942;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 940; Match(WS);
				State = 941; asTypeClause();
				}
			}

			State = 945;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 944; Match(NEWLINE);
				}
				}
				State = 947;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 955;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 949; block();
				State = 951;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 950; Match(NEWLINE);
					}
					}
					State = 953;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 957; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 959; Match(GET);
			State = 960; Match(WS);
			State = 961; valueStmt(0);
			State = 963;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 962; Match(WS);
				}
			}

			State = 965; Match(T__1);
			State = 967;
			switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				State = 966; Match(WS);
				}
				break;
			}
			State = 970;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
				{
				State = 969; valueStmt(0);
				}
			}

			State = 973;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 972; Match(WS);
				}
			}

			State = 975; Match(T__1);
			State = 977;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 976; Match(WS);
				}
			}

			State = 979; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 981; Match(GOSUB);
			State = 982; Match(WS);
			State = 983; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985; Match(GOTO);
			State = 986; Match(WS);
			State = 987; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStmtContext : ParserRuleContext {
		public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStmt; } }
	 
		public IfThenElseStmtContext() { }
		public virtual void CopyFrom(IfThenElseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockIfThenElseContext : IfThenElseStmtContext {
		public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i) {
			return GetRuleContext<IfElseIfBlockStmtContext>(i);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<IfElseIfBlockStmtContext> ifElseIfBlockStmt() {
			return GetRuleContexts<IfElseIfBlockStmtContext>();
		}
		public IfBlockStmtContext ifBlockStmt() {
			return GetRuleContext<IfBlockStmtContext>(0);
		}
		public IfElseBlockStmtContext ifElseBlockStmt() {
			return GetRuleContext<IfElseBlockStmtContext>(0);
		}
		public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineIfThenElseContext : IfThenElseStmtContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStmtContext ifThenElseStmt() {
		IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_ifThenElseStmt);
		int _la;
		try {
			State = 1014;
			switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
			case 1:
				_localctx = new InlineIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 989; Match(IF);
				State = 990; Match(WS);
				State = 991; ifConditionStmt();
				State = 992; Match(WS);
				State = 993; Match(THEN);
				State = 994; Match(WS);
				State = 995; blockStmt();
				State = 1000;
				switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					State = 996; Match(WS);
					State = 997; Match(ELSE);
					State = 998; Match(WS);
					State = 999; blockStmt();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BlockIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1002; ifBlockStmt();
				State = 1006;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 1003; ifElseIfBlockStmt();
					}
					}
					State = 1008;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1010;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 1009; ifElseBlockStmt();
					}
				}

				State = 1012; Match(END_IF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStmtContext ifBlockStmt() {
		IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_ifBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1016; Match(IF);
			State = 1017; Match(WS);
			State = 1018; ifConditionStmt();
			State = 1019; Match(WS);
			State = 1020; Match(THEN);
			State = 1022;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1021; Match(NEWLINE);
				}
				}
				State = 1024;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1032;
			switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				State = 1026; block();
				State = 1028;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1027; Match(NEWLINE);
					}
					}
					State = 1030;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfConditionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfConditionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionStmtContext ifConditionStmt() {
		IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_ifConditionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1034; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfBlockStmtContext ifElseIfBlockStmt() {
		IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_ifElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036; Match(ELSEIF);
			State = 1037; Match(WS);
			State = 1038; ifConditionStmt();
			State = 1039; Match(WS);
			State = 1040; Match(THEN);
			State = 1042;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1041; Match(NEWLINE);
				}
				}
				State = 1044;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1052;
			switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				State = 1046; block();
				State = 1048;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1047; Match(NEWLINE);
					}
					}
					State = 1050;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockStmtContext ifElseBlockStmt() {
		IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_ifElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1054; Match(ELSE);
			State = 1056;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1055; Match(NEWLINE);
				}
				}
				State = 1058;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1066;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1060; block();
				State = 1062;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1061; Match(NEWLINE);
					}
					}
					State = 1064;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1068; Match(IMPLEMENTS);
			State = 1069; Match(WS);
			State = 1070; ambiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072; Match(INPUT);
			State = 1073; Match(WS);
			State = 1074; fileNumber();
			State = 1083;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1076;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1075; Match(WS);
						}
					}

					State = 1078; Match(T__1);
					State = 1080;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1079; Match(WS);
						}
					}

					State = 1082; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1085;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,130,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public KillStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterKillStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitKillStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStmtContext killStmt() {
		KillStmtContext _localctx = new KillStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_killStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087; Match(KILL);
			State = 1088; Match(WS);
			State = 1089; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode PLUS_EQ() { return GetToken(VBAParser.PLUS_EQ, 0); }
		public ITerminalNode MINUS_EQ() { return GetToken(VBAParser.MINUS_EQ, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1093;
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				State = 1091; Match(LET);
				State = 1092; Match(WS);
				}
				break;
			}
			State = 1095; implicitCallStmt_InStmt();
			State = 1097;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1096; Match(WS);
				}
			}

			State = 1099;
			_la = _input.La(1);
			if ( !(((((_la - 189)) & ~0x3f) == 0 && ((1L << (_la - 189)) & ((1L << (EQ - 189)) | (1L << (MINUS_EQ - 189)) | (1L << (PLUS_EQ - 189)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1101;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1100; Match(WS);
				}
			}

			State = 1103; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105; Match(LINE_INPUT);
			State = 1106; Match(WS);
			State = 1107; fileNumber();
			State = 1109;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1108; Match(WS);
				}
			}

			State = 1111; Match(T__1);
			State = 1113;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1112; Match(WS);
				}
			}

			State = 1115; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public LoadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLoadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLoadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStmtContext loadStmt() {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_loadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117; Match(LOAD);
			State = 1118; Match(WS);
			State = 1119; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121; Match(LOCK);
			State = 1122; Match(WS);
			State = 1123; valueStmt(0);
			State = 1138;
			switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
			case 1:
				{
				State = 1125;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1124; Match(WS);
					}
				}

				State = 1127; Match(T__1);
				State = 1129;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1128; Match(WS);
					}
				}

				State = 1131; valueStmt(0);
				State = 1136;
				switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
				case 1:
					{
					State = 1132; Match(WS);
					State = 1133; Match(TO);
					State = 1134; Match(WS);
					State = 1135; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140; Match(LSET);
			State = 1141; Match(WS);
			State = 1142; implicitCallStmt_InStmt();
			State = 1144;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1143; Match(WS);
				}
			}

			State = 1146; Match(EQ);
			State = 1148;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1147; Match(WS);
				}
			}

			State = 1150; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroConstStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_CONST() { return GetToken(VBAParser.MACRO_CONST, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public MacroConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroConstStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroConstStmtContext macroConstStmt() {
		MacroConstStmtContext _localctx = new MacroConstStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_macroConstStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1152; Match(MACRO_CONST);
			State = 1154;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1153; Match(WS);
				}
			}

			State = 1156; ambiguousIdentifier();
			State = 1158;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1157; Match(WS);
				}
			}

			State = 1160; Match(EQ);
			State = 1162;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1161; Match(WS);
				}
			}

			State = 1164; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfThenElseStmtContext : ParserRuleContext {
		public IReadOnlyList<MacroElseIfBlockStmtContext> macroElseIfBlockStmt() {
			return GetRuleContexts<MacroElseIfBlockStmtContext>();
		}
		public ITerminalNode MACRO_END_IF() { return GetToken(VBAParser.MACRO_END_IF, 0); }
		public MacroIfBlockStmtContext macroIfBlockStmt() {
			return GetRuleContext<MacroIfBlockStmtContext>(0);
		}
		public MacroElseIfBlockStmtContext macroElseIfBlockStmt(int i) {
			return GetRuleContext<MacroElseIfBlockStmtContext>(i);
		}
		public MacroElseBlockStmtContext macroElseBlockStmt() {
			return GetRuleContext<MacroElseBlockStmtContext>(0);
		}
		public MacroIfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfThenElseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroIfThenElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroIfThenElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfThenElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfThenElseStmtContext macroIfThenElseStmt() {
		MacroIfThenElseStmtContext _localctx = new MacroIfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_macroIfThenElseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166; macroIfBlockStmt();
			State = 1170;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MACRO_ELSEIF) {
				{
				{
				State = 1167; macroElseIfBlockStmt();
				}
				}
				State = 1172;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1174;
			_la = _input.La(1);
			if (_la==MACRO_ELSE) {
				{
				State = 1173; macroElseBlockStmt();
				}
			}

			State = 1176; Match(MACRO_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode MACRO_IF() { return GetToken(VBAParser.MACRO_IF, 0); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfBlockStmtContext macroIfBlockStmt() {
		MacroIfBlockStmtContext _localctx = new MacroIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_macroIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1178; Match(MACRO_IF);
			State = 1180;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1179; Match(WS);
				}
			}

			State = 1182; ifConditionStmt();
			State = 1183; Match(WS);
			State = 1184; Match(THEN);
			State = 1186;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1185; Match(NEWLINE);
				}
				}
				State = 1188;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1196;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1190; moduleBody();
				State = 1192;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1191; Match(NEWLINE);
					}
					}
					State = 1194;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode MACRO_ELSEIF() { return GetToken(VBAParser.MACRO_ELSEIF, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseIfBlockStmtContext macroElseIfBlockStmt() {
		MacroElseIfBlockStmtContext _localctx = new MacroElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_macroElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1198; Match(MACRO_ELSEIF);
			State = 1200;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1199; Match(WS);
				}
			}

			State = 1202; ifConditionStmt();
			State = 1203; Match(WS);
			State = 1204; Match(THEN);
			State = 1206;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1205; Match(NEWLINE);
				}
				}
				State = 1208;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1216;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1210; moduleBody();
				State = 1212;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1211; Match(NEWLINE);
					}
					}
					State = 1214;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_ELSE() { return GetToken(VBAParser.MACRO_ELSE, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseBlockStmtContext macroElseBlockStmt() {
		MacroElseBlockStmtContext _localctx = new MacroElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_macroElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218; Match(MACRO_ELSE);
			State = 1220;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1219; Match(NEWLINE);
				}
				}
				State = 1222;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1230;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1224; moduleBody();
				State = 1226;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1225; Match(NEWLINE);
					}
					}
					State = 1228;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232; Match(MID);
			State = 1234;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1233; Match(WS);
				}
			}

			State = 1236; Match(LPAREN);
			State = 1238;
			switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				State = 1237; Match(WS);
				}
				break;
			}
			State = 1240; argsCall();
			State = 1242;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1241; Match(WS);
				}
			}

			State = 1244; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MkdirStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public MkdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mkdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMkdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMkdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MkdirStmtContext mkdirStmt() {
		MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_mkdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1246; Match(MKDIR);
			State = 1247; Match(WS);
			State = 1248; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250; Match(NAME);
			State = 1251; Match(WS);
			State = 1252; valueStmt(0);
			State = 1253; Match(WS);
			State = 1254; Match(AS);
			State = 1255; Match(WS);
			State = 1256; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_onErrorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1258; Match(ON_ERROR);
			State = 1259; Match(WS);
			State = 1266;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1260; Match(GOTO);
				State = 1261; Match(WS);
				State = 1262; valueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 1263; Match(RESUME);
				State = 1264; Match(WS);
				State = 1265; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1268; Match(ON);
			State = 1269; Match(WS);
			State = 1270; valueStmt(0);
			State = 1271; Match(WS);
			State = 1272; Match(GOTO);
			State = 1273; Match(WS);
			State = 1274; valueStmt(0);
			State = 1285;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,164,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1276;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1275; Match(WS);
						}
					}

					State = 1278; Match(T__1);
					State = 1280;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1279; Match(WS);
						}
					}

					State = 1282; valueStmt(0);
					}
					} 
				}
				State = 1287;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,164,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1288; Match(ON);
			State = 1289; Match(WS);
			State = 1290; valueStmt(0);
			State = 1291; Match(WS);
			State = 1292; Match(GOSUB);
			State = 1293; Match(WS);
			State = 1294; valueStmt(0);
			State = 1305;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,167,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1296;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1295; Match(WS);
						}
					}

					State = 1298; Match(T__1);
					State = 1300;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1299; Match(WS);
						}
					}

					State = 1302; valueStmt(0);
					}
					} 
				}
				State = 1307;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,167,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1308; Match(OPEN);
			State = 1309; Match(WS);
			State = 1310; valueStmt(0);
			State = 1311; Match(WS);
			State = 1312; Match(FOR);
			State = 1313; Match(WS);
			State = 1314;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (INPUT - 87)) | (1L << (OUTPUT - 87)) | (1L << (RANDOM - 87)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1319;
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 1315; Match(WS);
				State = 1316; Match(ACCESS);
				State = 1317; Match(WS);
				State = 1318;
				_la = _input.La(1);
				if ( !(((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (READ - 142)) | (1L << (READ_WRITE - 142)) | (1L << (WRITE - 142)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1323;
			switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				State = 1321; Match(WS);
				State = 1322;
				_la = _input.La(1);
				if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (LOCK_READ - 100)) | (1L << (LOCK_WRITE - 100)) | (1L << (LOCK_READ_WRITE - 100)) | (1L << (SHARED - 100)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1325; Match(WS);
			State = 1326; Match(AS);
			State = 1327; Match(WS);
			State = 1328; fileNumber();
			State = 1339;
			switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				State = 1329; Match(WS);
				State = 1330; Match(LEN);
				State = 1332;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1331; Match(WS);
					}
				}

				State = 1334; Match(EQ);
				State = 1336;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1335; Match(WS);
					}
				}

				State = 1338; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1374;
			switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1341; outputList_Expression();
				State = 1354;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,176,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1343;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1342; Match(WS);
							}
						}

						State = 1345;
						_la = _input.La(1);
						if ( !(_la==T__2 || _la==T__1) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1347;
						switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
						case 1:
							{
							State = 1346; Match(WS);
							}
							break;
						}
						State = 1350;
						switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
						case 1:
							{
							State = 1349; outputList_Expression();
							}
							break;
						}
						}
						} 
					}
					State = 1356;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,176,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1358;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
					{
					State = 1357; outputList_Expression();
					}
				}

				State = 1370;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1361;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1360; Match(WS);
							}
						}

						State = 1363;
						_la = _input.La(1);
						if ( !(_la==T__2 || _la==T__1) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1365;
						switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
						case 1:
							{
							State = 1364; Match(WS);
							}
							break;
						}
						State = 1368;
						switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
						case 1:
							{
							State = 1367; outputList_Expression();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1372;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,181,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_outputList_Expression);
		int _la;
		try {
			State = 1393;
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1376; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1377;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1391;
				switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
				case 1:
					{
					State = 1379;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1378; Match(WS);
						}
					}

					State = 1381; Match(LPAREN);
					State = 1383;
					switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
					case 1:
						{
						State = 1382; Match(WS);
						}
						break;
					}
					State = 1385; argsCall();
					State = 1387;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1386; Match(WS);
						}
					}

					State = 1389; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1395; Match(PRINT);
			State = 1396; Match(WS);
			State = 1397; fileNumber();
			State = 1399;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1398; Match(WS);
				}
			}

			State = 1401; Match(T__1);
			State = 1406;
			switch ( Interpreter.AdaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				State = 1403;
				switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
				case 1:
					{
					State = 1402; Match(WS);
					}
					break;
				}
				State = 1405; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1411;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1408; visibility();
				State = 1409; Match(WS);
				}
			}

			State = 1415;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1413; Match(STATIC);
				State = 1414; Match(WS);
				}
			}

			State = 1417; Match(PROPERTY_GET);
			State = 1418; Match(WS);
			State = 1419; ambiguousIdentifier();
			State = 1424;
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				State = 1421;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1420; Match(WS);
					}
				}

				State = 1423; argList();
				}
				break;
			}
			State = 1428;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1426; Match(WS);
				State = 1427; asTypeClause();
				}
			}

			State = 1431;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1430; Match(NEWLINE);
				}
				}
				State = 1433;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1441;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1435; block();
				State = 1437;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1436; Match(NEWLINE);
					}
					}
					State = 1439;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1443; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1448;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1445; visibility();
				State = 1446; Match(WS);
				}
			}

			State = 1452;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1450; Match(STATIC);
				State = 1451; Match(WS);
				}
			}

			State = 1454; Match(PROPERTY_SET);
			State = 1455; Match(WS);
			State = 1456; ambiguousIdentifier();
			State = 1461;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1458;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1457; Match(WS);
					}
				}

				State = 1460; argList();
				}
			}

			State = 1464;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1463; Match(NEWLINE);
				}
				}
				State = 1466;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1474;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1468; block();
				State = 1470;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1469; Match(NEWLINE);
					}
					}
					State = 1472;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1476; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1481;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1478; visibility();
				State = 1479; Match(WS);
				}
			}

			State = 1485;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1483; Match(STATIC);
				State = 1484; Match(WS);
				}
			}

			State = 1487; Match(PROPERTY_LET);
			State = 1488; Match(WS);
			State = 1489; ambiguousIdentifier();
			State = 1494;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1491;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1490; Match(WS);
					}
				}

				State = 1493; argList();
				}
			}

			State = 1497;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1496; Match(NEWLINE);
				}
				}
				State = 1499;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1507;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1501; block();
				State = 1503;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1502; Match(NEWLINE);
					}
					}
					State = 1505;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1509; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1511; Match(PUT);
			State = 1512; Match(WS);
			State = 1513; fileNumber();
			State = 1515;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1514; Match(WS);
				}
			}

			State = 1517; Match(T__1);
			State = 1519;
			switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				State = 1518; Match(WS);
				}
				break;
			}
			State = 1522;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
				{
				State = 1521; valueStmt(0);
				}
			}

			State = 1525;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1524; Match(WS);
				}
			}

			State = 1527; Match(T__1);
			State = 1529;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1528; Match(WS);
				}
			}

			State = 1531; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1533; Match(RAISEEVENT);
			State = 1534; Match(WS);
			State = 1535; ambiguousIdentifier();
			State = 1550;
			switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				State = 1537;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1536; Match(WS);
					}
				}

				State = 1539; Match(LPAREN);
				State = 1541;
				switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
				case 1:
					{
					State = 1540; Match(WS);
					}
					break;
				}
				State = 1547;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__2) | (1L << T__1) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (WS - 193)))) != 0)) {
					{
					State = 1543; argsCall();
					State = 1545;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1544; Match(WS);
						}
					}

					}
				}

				State = 1549; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizeStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRandomizeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRandomizeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizeStmtContext randomizeStmt() {
		RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_randomizeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1552; Match(RANDOMIZE);
			State = 1555;
			switch ( Interpreter.AdaptivePredict(_input,223,_ctx) ) {
			case 1:
				{
				State = 1553; Match(WS);
				State = 1554; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<RedimSubStmtContext> redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1557; Match(REDIM);
			State = 1558; Match(WS);
			State = 1561;
			switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				State = 1559; Match(PRESERVE);
				State = 1560; Match(WS);
				}
				break;
			}
			State = 1563; redimSubStmt();
			State = 1574;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,227,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1565;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1564; Match(WS);
						}
					}

					State = 1567; Match(T__1);
					State = 1569;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1568; Match(WS);
						}
					}

					State = 1571; redimSubStmt();
					}
					} 
				}
				State = 1576;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,227,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1577; implicitCallStmt_InStmt();
			State = 1579;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1578; Match(WS);
				}
			}

			State = 1581; Match(LPAREN);
			State = 1583;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1582; Match(WS);
				}
			}

			State = 1585; subscripts();
			State = 1587;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1586; Match(WS);
				}
			}

			State = 1589; Match(RPAREN);
			State = 1592;
			switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				State = 1590; Match(WS);
				State = 1591; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1594; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1596; Match(RESUME);
			State = 1602;
			switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				State = 1597; Match(WS);
				State = 1600;
				switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
				case 1:
					{
					State = 1598; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1599; ambiguousIdentifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmdirStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public RmdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRmdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRmdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmdirStmtContext rmdirStmt() {
		RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_rmdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1606; Match(RMDIR);
			State = 1607; Match(WS);
			State = 1608; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610; Match(RSET);
			State = 1611; Match(WS);
			State = 1612; implicitCallStmt_InStmt();
			State = 1614;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1613; Match(WS);
				}
			}

			State = 1616; Match(EQ);
			State = 1618;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1617; Match(WS);
				}
			}

			State = 1620; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepictureStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepictureStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSavepictureStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSavepictureStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepictureStmtContext savepictureStmt() {
		SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_savepictureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1622; Match(SAVEPICTURE);
			State = 1623; Match(WS);
			State = 1624; valueStmt(0);
			State = 1626;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1625; Match(WS);
				}
			}

			State = 1628; Match(T__1);
			State = 1630;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1629; Match(WS);
				}
			}

			State = 1632; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveSettingStmtContext : ParserRuleContext {
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveSettingStmtContext saveSettingStmt() {
		SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_saveSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1634; Match(SAVESETTING);
			State = 1635; Match(WS);
			State = 1636; valueStmt(0);
			State = 1638;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1637; Match(WS);
				}
			}

			State = 1640; Match(T__1);
			State = 1642;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1641; Match(WS);
				}
			}

			State = 1644; valueStmt(0);
			State = 1646;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1645; Match(WS);
				}
			}

			State = 1648; Match(T__1);
			State = 1650;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1649; Match(WS);
				}
			}

			State = 1652; valueStmt(0);
			State = 1654;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1653; Match(WS);
				}
			}

			State = 1656; Match(T__1);
			State = 1658;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1657; Match(WS);
				}
			}

			State = 1660; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1662; Match(SEEK);
			State = 1663; Match(WS);
			State = 1664; valueStmt(0);
			State = 1666;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1665; Match(WS);
				}
			}

			State = 1668; Match(T__1);
			State = 1670;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1669; Match(WS);
				}
			}

			State = 1672; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public IReadOnlyList<SC_CaseContext> sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1674; Match(SELECT);
			State = 1675; Match(WS);
			State = 1676; Match(CASE);
			State = 1677; Match(WS);
			State = 1678; valueStmt(0);
			State = 1680;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1679; Match(NEWLINE);
				}
				}
				State = 1682;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1687;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1684; sC_Case();
				}
				}
				State = 1689;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1691;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1690; Match(WS);
				}
			}

			State = 1693; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_sC_Case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1695; Match(CASE);
			State = 1696; Match(WS);
			State = 1697; sC_Cond();
			State = 1699;
			switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
			case 1:
				{
				State = 1698; Match(WS);
				}
				break;
			}
			State = 1715;
			switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
			case 1:
				{
				State = 1702;
				_la = _input.La(1);
				if (_la==T__3) {
					{
					State = 1701; Match(T__3);
					}
				}

				State = 1707;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 1704; Match(NEWLINE);
					}
					}
					State = 1709;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 1711;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1710; Match(NEWLINE);
					}
					}
					State = 1713;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1723;
			switch ( Interpreter.AdaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				State = 1717; block();
				State = 1719;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1718; Match(NEWLINE);
					}
					}
					State = 1721;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondValueContext : SC_CondContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondValueContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondToContext : SC_CondContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondToContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondIsContext : SC_CondContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public CaseCondIsContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1768;
			switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1725; Match(ELSE);
				}
				break;

			case 2:
				_localctx = new CaseCondIsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1726; Match(IS);
				State = 1728;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1727; Match(WS);
					}
				}

				State = 1730; comparisonOperator();
				State = 1732;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1731; Match(WS);
					}
				}

				State = 1734; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1736; valueStmt(0);
				State = 1747;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,260,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1738;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1737; Match(WS);
							}
						}

						State = 1740; Match(T__1);
						State = 1742;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1741; Match(WS);
							}
						}

						State = 1744; valueStmt(0);
						}
						} 
					}
					State = 1749;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,260,_ctx);
				}
				}
				break;

			case 4:
				_localctx = new CaseCondToContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1750; Match(INTEGERLITERAL);
				State = 1751; Match(WS);
				State = 1752; Match(TO);
				State = 1753; Match(WS);
				State = 1754; valueStmt(0);
				State = 1765;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,263,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1756;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1755; Match(WS);
							}
						}

						State = 1758; Match(T__1);
						State = 1760;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1759; Match(WS);
							}
						}

						State = 1762; valueStmt(0);
						}
						} 
					}
					State = 1767;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,263,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendkeysStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendkeysStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSendkeysStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSendkeysStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendkeysStmtContext sendkeysStmt() {
		SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_sendkeysStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770; Match(SENDKEYS);
			State = 1771; Match(WS);
			State = 1772; valueStmt(0);
			State = 1781;
			switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				State = 1774;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1773; Match(WS);
					}
				}

				State = 1776; Match(T__1);
				State = 1778;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1777; Match(WS);
					}
				}

				State = 1780; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetattrStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SetattrStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setattrStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSetattrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSetattrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetattrStmtContext setattrStmt() {
		SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_setattrStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1783; Match(SETATTR);
			State = 1784; Match(WS);
			State = 1785; valueStmt(0);
			State = 1787;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1786; Match(WS);
				}
			}

			State = 1789; Match(T__1);
			State = 1791;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1790; Match(WS);
				}
			}

			State = 1793; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1795; Match(SET);
			State = 1796; Match(WS);
			State = 1797; implicitCallStmt_InStmt();
			State = 1799;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1798; Match(WS);
				}
			}

			State = 1801; Match(EQ);
			State = 1803;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1802; Match(WS);
				}
			}

			State = 1805; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1807; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1809; visibility();
				State = 1810; Match(WS);
				}
			}

			State = 1816;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1814; Match(STATIC);
				State = 1815; Match(WS);
				}
			}

			State = 1818; Match(SUB);
			State = 1819; Match(WS);
			State = 1820; ambiguousIdentifier();
			State = 1825;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1822;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1821; Match(WS);
					}
				}

				State = 1824; argList();
				}
			}

			State = 1828;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1827; Match(NEWLINE);
				}
				}
				State = 1830;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1838;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1832; block();
				State = 1834;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1833; Match(NEWLINE);
					}
					}
					State = 1836;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1840; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public TimeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTimeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTimeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStmtContext timeStmt() {
		TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_timeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1842; Match(TIME);
			State = 1844;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1843; Match(WS);
				}
			}

			State = 1846; Match(EQ);
			State = 1848;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1847; Match(WS);
				}
			}

			State = 1850; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1855;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1852; visibility();
				State = 1853; Match(WS);
				}
			}

			State = 1857; Match(TYPE);
			State = 1858; Match(WS);
			State = 1859; ambiguousIdentifier();
			State = 1861;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1860; Match(NEWLINE);
				}
				}
				State = 1863;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1868;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 1865; typeStmt_Element();
				}
				}
				State = 1870;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1871; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1873; ambiguousIdentifier();
			State = 1888;
			switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				State = 1875;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1874; Match(WS);
					}
				}

				State = 1877; Match(LPAREN);
				State = 1882;
				switch ( Interpreter.AdaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					State = 1879;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1878; Match(WS);
						}
					}

					State = 1881; subscripts();
					}
					break;
				}
				State = 1885;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1884; Match(WS);
					}
				}

				State = 1887; Match(RPAREN);
				}
				break;
			}
			State = 1892;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1890; Match(WS);
				State = 1891; asTypeClause();
				}
			}

			State = 1895;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1894; Match(NEWLINE);
				}
				}
				State = 1897;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeOfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeOfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfStmtContext typeOfStmt() {
		TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_typeOfStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1899; Match(TYPEOF);
			State = 1900; Match(WS);
			State = 1901; valueStmt(0);
			State = 1906;
			switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
			case 1:
				{
				State = 1902; Match(WS);
				State = 1903; Match(IS);
				State = 1904; Match(WS);
				State = 1905; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnloadStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public UnloadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unloadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterUnloadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitUnloadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnloadStmtContext unloadStmt() {
		UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_unloadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1908; Match(UNLOAD);
			State = 1909; Match(WS);
			State = 1910; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1912; Match(UNLOCK);
			State = 1913; Match(WS);
			State = 1914; valueStmt(0);
			State = 1929;
			switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
			case 1:
				{
				State = 1916;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1915; Match(WS);
					}
				}

				State = 1918; Match(T__1);
				State = 1920;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1919; Match(WS);
					}
				}

				State = 1922; valueStmt(0);
				State = 1927;
				switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					State = 1923; Match(WS);
					State = 1924; Match(TO);
					State = 1925; Match(WS);
					State = 1926; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLtContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLikeContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLikeContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLike(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsDivContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public VsDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPlusContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public VsPlusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGeqContext : ValueStmtContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsGeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsGeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsGeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfStmtContext typeOfStmt() {
			return GetRuleContext<TypeOfStmtContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNeqContext : ValueStmtContext {
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsNeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLeqContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIsContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsIsContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMinusContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsMinusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGtContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsGtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsGt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsGt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqContext : ValueStmtContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 198;
		EnterRecursionRule(_localctx, 198, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1985;
			switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
			case 1:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1932; Match(NEW);
				State = 1933; Match(WS);
				State = 1934; valueStmt(28);
				}
				break;

			case 2:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1935; Match(ADDRESSOF);
				State = 1936; Match(WS);
				State = 1937; valueStmt(25);
				}
				break;

			case 3:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1938; implicitCallStmt_InStmt();
				State = 1940;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1939; Match(WS);
					}
				}

				State = 1942; Match(ASSIGN);
				State = 1944;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1943; Match(WS);
					}
				}

				State = 1946; valueStmt(24);
				}
				break;

			case 4:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1948; Match(MINUS);
				State = 1950;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1949; Match(WS);
					}
				}

				State = 1952; valueStmt(14);
				}
				break;

			case 5:
				{
				_localctx = new VsPlusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1953; Match(PLUS);
				State = 1955;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1954; Match(WS);
					}
				}

				State = 1957; valueStmt(13);
				}
				break;

			case 6:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1958; Match(NOT);
				State = 1959; Match(WS);
				State = 1960; valueStmt(1);
				}
				break;

			case 7:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1961; literal();
				}
				break;

			case 8:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1962; implicitCallStmt_InStmt();
				}
				break;

			case 9:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1963; Match(LPAREN);
				State = 1965;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1964; Match(WS);
					}
				}

				State = 1967; valueStmt(0);
				State = 1978;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__1 || _la==WS) {
					{
					{
					State = 1969;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1968; Match(WS);
						}
					}

					State = 1971; Match(T__1);
					State = 1973;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1972; Match(WS);
						}
					}

					State = 1975; valueStmt(0);
					}
					}
					State = 1980;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1981; Match(RPAREN);
				}
				break;

			case 10:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1983; typeOfStmt();
				}
				break;

			case 11:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1984; midStmt();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2145;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,334,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2143;
					switch ( Interpreter.AdaptivePredict(_input,333,_ctx) ) {
					case 1:
						{
						_localctx = new VsIsContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1987;
						if (!(Precpred(_ctx, 23))) throw new FailedPredicateException(this, "Precpred(_ctx, 23)");
						State = 1988; Match(WS);
						State = 1989; Match(IS);
						State = 1990; Match(WS);
						State = 1991; valueStmt(24);
						}
						break;

					case 2:
						{
						_localctx = new VsLikeContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1992;
						if (!(Precpred(_ctx, 22))) throw new FailedPredicateException(this, "Precpred(_ctx, 22)");
						State = 1993; Match(WS);
						State = 1994; Match(LIKE);
						State = 1995; Match(WS);
						State = 1996; valueStmt(23);
						}
						break;

					case 3:
						{
						_localctx = new VsGeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1997;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 1999;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1998; Match(WS);
							}
						}

						State = 2001; Match(GEQ);
						State = 2003;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2002; Match(WS);
							}
						}

						State = 2005; valueStmt(22);
						}
						break;

					case 4:
						{
						_localctx = new VsLeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2006;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 2008;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2007; Match(WS);
							}
						}

						State = 2010; Match(LEQ);
						State = 2012;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2011; Match(WS);
							}
						}

						State = 2014; valueStmt(21);
						}
						break;

					case 5:
						{
						_localctx = new VsGtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2015;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 2017;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2016; Match(WS);
							}
						}

						State = 2019; Match(GT);
						State = 2021;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2020; Match(WS);
							}
						}

						State = 2023; valueStmt(20);
						}
						break;

					case 6:
						{
						_localctx = new VsLtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2024;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 2026;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2025; Match(WS);
							}
						}

						State = 2028; Match(LT);
						State = 2030;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2029; Match(WS);
							}
						}

						State = 2032; valueStmt(19);
						}
						break;

					case 7:
						{
						_localctx = new VsNeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2033;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 2035;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2034; Match(WS);
							}
						}

						State = 2037; Match(NEQ);
						State = 2039;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2038; Match(WS);
							}
						}

						State = 2041; valueStmt(18);
						}
						break;

					case 8:
						{
						_localctx = new VsEqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2042;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 2044;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2043; Match(WS);
							}
						}

						State = 2046; Match(EQ);
						State = 2048;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2047; Match(WS);
							}
						}

						State = 2050; valueStmt(17);
						}
						break;

					case 9:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2051;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2052; Match(WS);
						State = 2053; Match(AMPERSAND);
						State = 2054; Match(WS);
						State = 2055; valueStmt(16);
						}
						break;

					case 10:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2056;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2058;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2057; Match(WS);
							}
						}

						State = 2060; Match(PLUS);
						State = 2062;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2061; Match(WS);
							}
						}

						State = 2064; valueStmt(13);
						}
						break;

					case 11:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2065;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2067;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2066; Match(WS);
							}
						}

						State = 2069; Match(MOD);
						State = 2071;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2070; Match(WS);
							}
						}

						State = 2073; valueStmt(12);
						}
						break;

					case 12:
						{
						_localctx = new VsDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2074;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2076;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2075; Match(WS);
							}
						}

						State = 2078; Match(DIV);
						State = 2080;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2079; Match(WS);
							}
						}

						State = 2082; valueStmt(11);
						}
						break;

					case 13:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2083;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2085;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2084; Match(WS);
							}
						}

						State = 2087; Match(MULT);
						State = 2089;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2088; Match(WS);
							}
						}

						State = 2091; valueStmt(10);
						}
						break;

					case 14:
						{
						_localctx = new VsMinusContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2092;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2094;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2093; Match(WS);
							}
						}

						State = 2096; Match(MINUS);
						State = 2098;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2097; Match(WS);
							}
						}

						State = 2100; valueStmt(9);
						}
						break;

					case 15:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2101;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2103;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2102; Match(WS);
							}
						}

						State = 2105; Match(POW);
						State = 2107;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2106; Match(WS);
							}
						}

						State = 2109; valueStmt(8);
						}
						break;

					case 16:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2110;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2111; Match(WS);
						State = 2112; Match(IMP);
						State = 2113; Match(WS);
						State = 2114; valueStmt(7);
						}
						break;

					case 17:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2115;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2116; Match(WS);
						State = 2117; Match(EQV);
						State = 2118; Match(WS);
						State = 2119; valueStmt(6);
						}
						break;

					case 18:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2120;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2122;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2121; Match(WS);
							}
						}

						State = 2124; Match(XOR);
						State = 2126;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2125; Match(WS);
							}
						}

						State = 2128; valueStmt(5);
						}
						break;

					case 19:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2129;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2131;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2130; Match(WS);
							}
						}

						State = 2133; Match(OR);
						State = 2135;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2134; Match(WS);
							}
						}

						State = 2137; valueStmt(4);
						}
						break;

					case 20:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2138;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2139; Match(WS);
						State = 2140; Match(AND);
						State = 2141; Match(WS);
						State = 2142; valueStmt(3);
						}
						break;
					}
					} 
				}
				State = 2147;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,334,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2151;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 2148; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 2149; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 2150; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2153; Match(WS);
			State = 2156;
			switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				State = 2154; Match(WITHEVENTS);
				State = 2155; Match(WS);
				}
				break;
			}
			State = 2158; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2160; variableSubStmt();
			State = 2171;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,339,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2162;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2161; Match(WS);
						}
					}

					State = 2164; Match(T__1);
					State = 2166;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2165; Match(WS);
						}
					}

					State = 2168; variableSubStmt();
					}
					} 
				}
				State = 2173;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,339,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2174; ambiguousIdentifier();
			State = 2192;
			switch ( Interpreter.AdaptivePredict(_input,345,_ctx) ) {
			case 1:
				{
				State = 2176;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2175; Match(WS);
					}
				}

				State = 2178; Match(LPAREN);
				State = 2180;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2179; Match(WS);
					}
				}

				State = 2186;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
					{
					State = 2182; subscripts();
					State = 2184;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2183; Match(WS);
						}
					}

					}
				}

				State = 2188; Match(RPAREN);
				State = 2190;
				switch ( Interpreter.AdaptivePredict(_input,344,_ctx) ) {
				case 1:
					{
					State = 2189; Match(WS);
					}
					break;
				}
				}
				break;
			}
			State = 2195;
			switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				State = 2194; typeHint();
				}
				break;
			}
			State = 2199;
			switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				State = 2197; Match(WS);
				State = 2198; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public IReadOnlyList<BlockContext> block() {
			return GetRuleContexts<BlockContext>();
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_whileWendStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201; Match(WHILE);
			State = 2202; Match(WS);
			State = 2203; valueStmt(0);
			State = 2205;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2204; Match(NEWLINE);
				}
				}
				State = 2207;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2214;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,349,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2209; block();
					State = 2210; Match(NEWLINE);
					}
					} 
				}
				State = 2216;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,349,_ctx);
			}
			State = 2217; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2219; Match(WIDTH);
			State = 2220; Match(WS);
			State = 2221; valueStmt(0);
			State = 2223;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2222; Match(WS);
				}
			}

			State = 2225; Match(T__1);
			State = 2227;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2226; Match(WS);
				}
			}

			State = 2229; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_withStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2231; Match(WITH);
			State = 2232; Match(WS);
			State = 2237;
			switch ( Interpreter.AdaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				State = 2233; implicitCallStmt_InStmt();
				}
				break;

			case 2:
				{
				{
				State = 2234; Match(NEW);
				State = 2235; Match(WS);
				State = 2236; type();
				}
				}
				break;
			}
			State = 2240;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2239; Match(NEWLINE);
				}
				}
				State = 2242;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2250;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 2244; block();
				State = 2246;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2245; Match(NEWLINE);
					}
					}
					State = 2248;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 2252; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2254; Match(WRITE);
			State = 2255; Match(WS);
			State = 2256; fileNumber();
			State = 2258;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2257; Match(WS);
				}
			}

			State = 2260; Match(T__1);
			State = 2265;
			switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				State = 2262;
				switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					State = 2261; Match(WS);
					}
					break;
				}
				State = 2264; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public FileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberContext fileNumber() {
		FileNumberContext _localctx = new FileNumberContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_fileNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2268;
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 2267; Match(T__6);
				}
			}

			State = 2272;
			switch (_input.La(1)) {
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				{
				State = 2270; ambiguousIdentifier();
				}
				break;
			case INTEGERLITERAL:
				{
				State = 2271; Match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ECS_ProcedureCallContext eCS_ProcedureCall() {
			return GetRuleContext<ECS_ProcedureCallContext>(0);
		}
		public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
			return GetRuleContext<ECS_MemberProcedureCallContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_explicitCallStmt);
		try {
			State = 2276;
			switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2274; eCS_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2275; eCS_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_ProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_ProcedureCallContext eCS_ProcedureCall() {
		ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_eCS_ProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2278; Match(CALL);
			State = 2279; Match(WS);
			State = 2280; ambiguousIdentifier();
			State = 2282;
			switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				State = 2281; typeHint();
				}
				break;
			}
			State = 2297;
			switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
			case 1:
				{
				State = 2285;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2284; Match(WS);
					}
				}

				State = 2287; Match(LPAREN);
				State = 2289;
				switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					State = 2288; Match(WS);
					}
					break;
				}
				State = 2291; argsCall();
				State = 2293;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2292; Match(WS);
					}
				}

				State = 2295; Match(RPAREN);
				}
				break;
			}
			State = 2308;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,368,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2300;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2299; Match(WS);
						}
					}

					State = 2302; Match(LPAREN);
					State = 2303; subscripts();
					State = 2304; Match(RPAREN);
					}
					} 
				}
				State = 2310;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,368,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_MemberProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
		ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_eCS_MemberProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2311; Match(CALL);
			State = 2312; Match(WS);
			State = 2314;
			switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				State = 2313; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2316; Match(T__0);
			State = 2317; ambiguousIdentifier();
			State = 2319;
			switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				State = 2318; typeHint();
				}
				break;
			}
			State = 2334;
			switch ( Interpreter.AdaptivePredict(_input,374,_ctx) ) {
			case 1:
				{
				State = 2322;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2321; Match(WS);
					}
				}

				State = 2324; Match(LPAREN);
				State = 2326;
				switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					State = 2325; Match(WS);
					}
					break;
				}
				State = 2328; argsCall();
				State = 2330;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2329; Match(WS);
					}
				}

				State = 2332; Match(RPAREN);
				}
				break;
			}
			State = 2345;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,376,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2337;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2336; Match(WS);
						}
					}

					State = 2339; Match(LPAREN);
					State = 2340; subscripts();
					State = 2341; Match(RPAREN);
					}
					} 
				}
				State = 2347;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,376,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_implicitCallStmt_InBlock);
		try {
			State = 2350;
			switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2348; iCS_B_MemberProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2349; iCS_B_ProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_iCS_B_MemberProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2353;
			switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				State = 2352; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2355; Match(T__0);
			State = 2356; ambiguousIdentifier();
			State = 2358;
			switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				State = 2357; typeHint();
				}
				break;
			}
			State = 2362;
			switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				State = 2360; Match(WS);
				State = 2361; argsCall();
				}
				break;
			}
			State = 2365;
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 2364; dictionaryCallStmt();
				}
				break;
			}
			State = 2376;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,383,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2368;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2367; Match(WS);
						}
					}

					State = 2370; Match(LPAREN);
					State = 2371; subscripts();
					State = 2372; Match(RPAREN);
					}
					} 
				}
				State = 2378;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,383,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public CertainIdentifierContext certainIdentifier() {
			return GetRuleContext<CertainIdentifierContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_iCS_B_ProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2379; certainIdentifier();
			State = 2382;
			switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				State = 2380; Match(WS);
				State = 2381; argsCall();
				}
				break;
			}
			State = 2393;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,386,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2385;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2384; Match(WS);
						}
					}

					State = 2387; Match(LPAREN);
					State = 2388; subscripts();
					State = 2389; Match(RPAREN);
					}
					} 
				}
				State = 2395;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,386,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_implicitCallStmt_InStmt);
		try {
			State = 2400;
			switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2396; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2397; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2398; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2399; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_iCS_S_VariableOrProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2402; ambiguousIdentifier();
			State = 2404;
			switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				State = 2403; typeHint();
				}
				break;
			}
			State = 2407;
			switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				State = 2406; dictionaryCallStmt();
				}
				break;
			}
			State = 2418;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,391,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2410;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2409; Match(WS);
						}
					}

					State = 2412; Match(LPAREN);
					State = 2413; subscripts();
					State = 2414; Match(RPAREN);
					}
					} 
				}
				State = 2420;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,391,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2423;
			switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				State = 2421; ambiguousIdentifier();
				}
				break;

			case 2:
				{
				State = 2422; baseType();
				}
				break;
			}
			State = 2426;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la==AMPERSAND) {
				{
				State = 2425; typeHint();
				}
			}

			State = 2429;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2428; Match(WS);
				}
			}

			State = 2431; Match(LPAREN);
			State = 2433;
			switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				State = 2432; Match(WS);
				}
				break;
			}
			State = 2439;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__2) | (1L << T__1) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (WS - 193)))) != 0)) {
				{
				State = 2435; argsCall();
				State = 2437;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2436; Match(WS);
					}
				}

				}
			}

			State = 2441; Match(RPAREN);
			State = 2443;
			switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				State = 2442; dictionaryCallStmt();
				}
				break;
			}
			State = 2454;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,400,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2446;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2445; Match(WS);
						}
					}

					State = 2448; Match(LPAREN);
					State = 2449; subscripts();
					State = 2450; Match(RPAREN);
					}
					} 
				}
				State = 2456;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,400,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
		public SubscriptsContext subscripts(int i) {
			return GetRuleContext<SubscriptsContext>(i);
		}
		public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(VBAParser.RPAREN, i);
		}
		public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<SubscriptsContext> subscripts() {
			return GetRuleContexts<SubscriptsContext>();
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(VBAParser.LPAREN, i);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_iCS_S_MembersCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2459;
			switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
			case 1:
				{
				State = 2457; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2458; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2462;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2461; iCS_S_MemberCall();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2464;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,402,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2467;
			switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				State = 2466; dictionaryCallStmt();
				}
				break;
			}
			State = 2478;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,405,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2470;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2469; Match(WS);
						}
					}

					State = 2472; Match(LPAREN);
					State = 2473; subscripts();
					State = 2474; Match(RPAREN);
					}
					} 
				}
				State = 2480;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,405,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_iCS_S_MemberCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2481;
			_la = _input.La(1);
			if ( !(_la==T__7 || _la==T__0) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 2484;
			switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				State = 2482; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2483; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_iCS_S_DictionaryCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2486; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ArgCallContext> argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2500;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,410,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2489;
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
						{
						State = 2488; argCall();
						}
					}

					State = 2492;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2491; Match(WS);
						}
					}

					State = 2494;
					_la = _input.La(1);
					if ( !(_la==T__2 || _la==T__1) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2496;
					switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
					case 1:
						{
						State = 2495; Match(WS);
						}
						break;
					}
					}
					} 
				}
				State = 2502;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,410,_ctx);
			}
			State = 2503; argCall();
			State = 2516;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,414,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2505;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2504; Match(WS);
						}
					}

					State = 2507;
					_la = _input.La(1);
					if ( !(_la==T__2 || _la==T__1) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2509;
					switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
					case 1:
						{
						State = 2508; Match(WS);
						}
						break;
					}
					State = 2512;
					switch ( Interpreter.AdaptivePredict(_input,413,_ctx) ) {
					case 1:
						{
						State = 2511; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2518;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,414,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2521;
			switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
			case 1:
				{
				State = 2519;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2520; Match(WS);
				}
				break;
			}
			State = 2523; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_dictionaryCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2525; Match(T__7);
			State = 2526; ambiguousIdentifier();
			State = 2528;
			switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				State = 2527; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2530; Match(LPAREN);
			State = 2548;
			switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				State = 2532;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2531; Match(WS);
					}
				}

				State = 2534; arg();
				State = 2545;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,420,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2536;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2535; Match(WS);
							}
						}

						State = 2538; Match(T__1);
						State = 2540;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2539; Match(WS);
							}
						}

						State = 2542; arg();
						}
						} 
					}
					State = 2547;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,420,_ctx);
				}
				}
				break;
			}
			State = 2551;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2550; Match(WS);
				}
			}

			State = 2553; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2557;
			switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
			case 1:
				{
				State = 2555; Match(OPTIONAL);
				State = 2556; Match(WS);
				}
				break;
			}
			State = 2561;
			switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				State = 2559;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2560; Match(WS);
				}
				break;
			}
			State = 2565;
			switch ( Interpreter.AdaptivePredict(_input,425,_ctx) ) {
			case 1:
				{
				State = 2563; Match(PARAMARRAY);
				State = 2564; Match(WS);
				}
				break;
			}
			State = 2567; ambiguousIdentifier();
			State = 2576;
			switch ( Interpreter.AdaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				State = 2569;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2568; Match(WS);
					}
				}

				State = 2571; Match(LPAREN);
				State = 2573;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2572; Match(WS);
					}
				}

				State = 2575; Match(RPAREN);
				}
				break;
			}
			State = 2580;
			switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				State = 2578; Match(WS);
				State = 2579; asTypeClause();
				}
				break;
			}
			State = 2586;
			switch ( Interpreter.AdaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				State = 2583;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2582; Match(WS);
					}
				}

				State = 2585; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_argDefaultValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2588; Match(EQ);
			State = 2590;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2589; Match(WS);
				}
			}

			State = 2594;
			switch ( Interpreter.AdaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				State = 2592; literal();
				}
				break;

			case 2:
				{
				State = 2593; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2596; subscript();
			State = 2607;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,436,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2598;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2597; Match(WS);
						}
					}

					State = 2600; Match(T__1);
					State = 2602;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2601; Match(WS);
						}
					}

					State = 2604; subscript();
					}
					} 
				}
				State = 2609;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,436,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2615;
			switch ( Interpreter.AdaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				State = 2610; valueStmt(0);
				State = 2611; Match(WS);
				State = 2612; Match(TO);
				State = 2613; Match(WS);
				}
				break;
			}
			State = 2617; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousIdentifierContext : ParserRuleContext {
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBAParser.IDENTIFIER, i);
		}
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousIdentifierContext ambiguousIdentifier() {
		AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_ambiguousIdentifier);
		int _la;
		try {
			int _alt;
			State = 2633;
			switch (_input.La(1)) {
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2621;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2621;
						switch (_input.La(1)) {
						case IDENTIFIER:
							{
							State = 2619; Match(IDENTIFIER);
							}
							break;
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATABASE:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2620; ambiguousKeyword();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2623;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,439,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2625; Match(L_SQUARE_BRACKET);
				State = 2628;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 2628;
					switch (_input.La(1)) {
					case IDENTIFIER:
						{
						State = 2626; Match(IDENTIFIER);
						}
						break;
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATABASE:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2627; ambiguousKeyword();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2630;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER );
				State = 2632; Match(R_SQUARE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_asTypeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2635; Match(AS);
			State = 2636; Match(WS);
			State = 2639;
			switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				State = 2637; Match(NEW);
				State = 2638; Match(WS);
				}
				break;
			}
			State = 2641; type();
			State = 2644;
			switch ( Interpreter.AdaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				State = 2642; Match(WS);
				State = 2643; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2646;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || _la==INTEGER || _la==LONG || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (SINGLE - 159)) | (1L << (STRING - 159)) | (1L << (VARIANT - 159)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CertainIdentifierContext : ParserRuleContext {
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBAParser.IDENTIFIER, i);
		}
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
		public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_certainIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCertainIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCertainIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CertainIdentifierContext certainIdentifier() {
		CertainIdentifierContext _localctx = new CertainIdentifierContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_certainIdentifier);
		try {
			int _alt;
			State = 2663;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2648; Match(IDENTIFIER);
				State = 2653;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,446,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 2651;
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATABASE:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2649; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2650; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 2655;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,446,_ctx);
				}
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2656; ambiguousKeyword();
				State = 2659;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2659;
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATABASE:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2657; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2658; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2661;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,448,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2665;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 189)) & ~0x3f) == 0 && ((1L << (_la - 189)) & ((1L << (EQ - 189)) | (1L << (GEQ - 189)) | (1L << (GT - 189)) | (1L << (LEQ - 189)) | (1L << (LT - 189)) | (1L << (NEQ - 189)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_complexType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2667; ambiguousIdentifier();
			State = 2672;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,450,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2668;
					_la = _input.La(1);
					if ( !(_la==T__7 || _la==T__0) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2669; ambiguousIdentifier();
					}
					} 
				}
				State = 2674;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,450,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2675; Match(MULT);
			State = 2677;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2676; Match(WS);
				}
			}

			State = 2681;
			switch (_input.La(1)) {
			case INTEGERLITERAL:
				{
				State = 2679; Match(INTEGERLITERAL);
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				{
				State = 2680; ambiguousIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public CertainIdentifierContext certainIdentifier(int i) {
			return GetRuleContext<CertainIdentifierContext>(i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<CertainIdentifierContext> certainIdentifier() {
			return GetRuleContexts<CertainIdentifierContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2683; certainIdentifier();
			State = 2692;
			switch ( Interpreter.AdaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				State = 2685;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2684; Match(WS);
					}
				}

				State = 2687; Match(MINUS);
				State = 2689;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2688; Match(WS);
					}
				}

				State = 2691; certainIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_lineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2694; ambiguousIdentifier();
			State = 2695; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
		public ITerminalNode COLORLITERAL() { return GetToken(VBAParser.COLORLITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2697;
			_la = _input.La(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (FALSE - 74)) | (1L << (NOTHING - 74)) | (1L << (NULL - 74)))) != 0) || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (TRUE - 171)) | (1L << (STRINGLITERAL - 171)) | (1L << (DATELITERAL - 171)) | (1L << (COLORLITERAL - 171)) | (1L << (INTEGERLITERAL - 171)) | (1L << (DOUBLELITERAL - 171)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2701;
			switch ( Interpreter.AdaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				State = 2699; baseType();
				}
				break;

			case 2:
				{
				State = 2700; complexType();
				}
				break;
			}
			State = 2711;
			switch ( Interpreter.AdaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				State = 2704;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2703; Match(WS);
					}
				}

				State = 2706; Match(LPAREN);
				State = 2708;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2707; Match(WS);
					}
				}

				State = 2710; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2713;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la==AMPERSAND) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2715;
			_la = _input.La(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousKeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousKeywordContext ambiguousKeyword() {
		AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_ambiguousKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2717;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 99: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 23);

		case 1: return Precpred(_ctx, 22);

		case 2: return Precpred(_ctx, 21);

		case 3: return Precpred(_ctx, 20);

		case 4: return Precpred(_ctx, 19);

		case 5: return Precpred(_ctx, 18);

		case 6: return Precpred(_ctx, 17);

		case 7: return Precpred(_ctx, 16);

		case 8: return Precpred(_ctx, 15);

		case 9: return Precpred(_ctx, 12);

		case 10: return Precpred(_ctx, 11);

		case 11: return Precpred(_ctx, 10);

		case 12: return Precpred(_ctx, 9);

		case 13: return Precpred(_ctx, 8);

		case 14: return Precpred(_ctx, 7);

		case 15: return Precpred(_ctx, 6);

		case 16: return Precpred(_ctx, 5);

		case 17: return Precpred(_ctx, 4);

		case 18: return Precpred(_ctx, 3);

		case 19: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xD9\xAA2\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x123\n"+
		"\x3\x3\x3\a\x3\x126\n\x3\f\x3\xE\x3\x129\v\x3\x3\x3\x3\x3\x6\x3\x12D\n"+
		"\x3\r\x3\xE\x3\x12E\x5\x3\x131\n\x3\x3\x3\x5\x3\x134\n\x3\x3\x3\a\x3\x137"+
		"\n\x3\f\x3\xE\x3\x13A\v\x3\x3\x3\x5\x3\x13D\n\x3\x3\x3\a\x3\x140\n\x3"+
		"\f\x3\xE\x3\x143\v\x3\x3\x3\x5\x3\x146\n\x3\x3\x3\a\x3\x149\n\x3\f\x3"+
		"\xE\x3\x14C\v\x3\x3\x3\x5\x3\x14F\n\x3\x3\x3\a\x3\x152\n\x3\f\x3\xE\x3"+
		"\x155\v\x3\x3\x3\x5\x3\x158\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x6\x5\x162\n\x5\r\x5\xE\x5\x163\x3\x5\x6\x5\x167\n\x5\r\x5\xE"+
		"\x5\x168\x3\x5\x3\x5\x6\x5\x16D\n\x5\r\x5\xE\x5\x16E\x3\x6\x3\x6\x5\x6"+
		"\x173\n\x6\x3\x6\x3\x6\x5\x6\x177\n\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x6"+
		"\a\x17E\n\a\r\a\xE\a\x17F\x6\a\x182\n\a\r\a\xE\a\x183\x3\b\x3\b\x6\b\x188"+
		"\n\b\r\b\xE\b\x189\x3\b\a\b\x18D\n\b\f\b\xE\b\x190\v\b\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x19A\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x5\n\x1A4\n\n\x3\v\x3\v\x6\v\x1A8\n\v\r\v\xE\v\x1A9\x3\v\a"+
		"\v\x1AD\n\v\f\v\xE\v\x1B0\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f"+
		"\x1B9\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x1C1\n\xE\x3\xE\x3\xE"+
		"\x5\xE\x1C5\n\xE\x3\xE\x3\xE\x5\xE\x1C9\n\xE\x3\xE\x3\xE\x5\xE\x1CD\n"+
		"\xE\x3\xE\a\xE\x1D0\n\xE\f\xE\xE\xE\x1D3\v\xE\x3\xF\x3\xF\a\xF\x1D7\n"+
		"\xF\f\xF\xE\xF\x1DA\v\xF\x3\xF\x5\xF\x1DD\n\xF\x3\xF\a\xF\x1E0\n\xF\f"+
		"\xF\xE\xF\x1E3\v\xF\x3\xF\a\xF\x1E6\n\xF\f\xF\xE\xF\x1E9\v\xF\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x22E\n\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x5\x11\x234\n\x11\x3\x11\x3\x11\x5\x11\x238\n\x11\x3\x11"+
		"\x5\x11\x23B\n\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x24B\n\x15\x3\x15"+
		"\x3\x15\x5\x15\x24F\n\x15\x3\x15\a\x15\x252\n\x15\f\x15\xE\x15\x255\v"+
		"\x15\x5\x15\x257\n\x15\x3\x16\x3\x16\x3\x16\x5\x16\x25C\n\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x5\x16\x262\n\x16\x3\x16\x3\x16\x5\x16\x266\n\x16\x3"+
		"\x16\a\x16\x269\n\x16\f\x16\xE\x16\x26C\v\x16\x3\x17\x3\x17\x5\x17\x270"+
		"\n\x17\x3\x17\x3\x17\x5\x17\x274\n\x17\x3\x17\x5\x17\x277\n\x17\x3\x17"+
		"\x3\x17\x5\x17\x27B\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\x281\n\x18"+
		"\x3\x18\x3\x18\x5\x18\x285\n\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x5"+
		"\x19\x28C\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x292\n\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5"+
		"\x19\x29F\n\x19\x3\x19\x5\x19\x2A2\n\x19\x3\x19\x5\x19\x2A5\n\x19\x3\x19"+
		"\x3\x19\x5\x19\x2A9\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2AF\n\x1A"+
		"\x3\x1A\x3\x1A\x5\x1A\x2B3\n\x1A\x3\x1A\a\x1A\x2B6\n\x1A\f\x1A\xE\x1A"+
		"\x2B9\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2BF\n\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x2C3\n\x1B\x3\x1B\x3\x1B\x5\x1B\x2C7\n\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x2CB\n\x1B\x3\x1B\x5\x1B\x2CE\n\x1B\x3\x1C\x3\x1C\x6\x1C\x2D2\n\x1C\r"+
		"\x1C\xE\x1C\x2D3\x3\x1C\x3\x1C\x6\x1C\x2D8\n\x1C\r\x1C\xE\x1C\x2D9\x5"+
		"\x1C\x2DC\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x6\x1C"+
		"\x2E5\n\x1C\r\x1C\xE\x1C\x2E6\x3\x1C\x3\x1C\x6\x1C\x2EB\n\x1C\r\x1C\xE"+
		"\x1C\x2EC\x5\x1C\x2EF\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x6\x1C\x2F5\n"+
		"\x1C\r\x1C\xE\x1C\x2F6\x3\x1C\x3\x1C\x6\x1C\x2FB\n\x1C\r\x1C\xE\x1C\x2FC"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x305\n\x1C\x3\x1D\x3"+
		"\x1D\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x30C\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x6\x1E\x312\n\x1E\r\x1E\xE\x1E\x313\x3\x1E\a\x1E\x317\n\x1E\f\x1E\xE"+
		"\x1E\x31A\v\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x5\x1F\x320\n\x1F\x3\x1F\x3"+
		"\x1F\x5\x1F\x324\n\x1F\x3\x1F\x5\x1F\x327\n\x1F\x3\x1F\x6\x1F\x32A\n\x1F"+
		"\r\x1F\xE\x1F\x32B\x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x5\""+
		"\x339\n\"\x3\"\x3\"\x3\"\x3\"\x5\"\x33F\n\"\x3\"\x3\"\x3#\x3#\x3$\x3$"+
		"\x3$\x3$\x5$\x349\n$\x3$\x3$\x5$\x34D\n$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3"+
		"%\x5%\x357\n%\x3%\x3%\x3%\x3%\x3%\x6%\x35E\n%\r%\xE%\x35F\x3%\x3%\x6%"+
		"\x364\n%\r%\xE%\x365\x5%\x368\n%\x3%\x3%\x3%\x5%\x36D\n%\x3&\x3&\x3&\x3"+
		"&\x5&\x373\n&\x3&\x3&\x5&\x377\n&\x3&\x5&\x37A\n&\x3&\x3&\x5&\x37E\n&"+
		"\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x389\n&\x3&\x6&\x38C\n&\r&\xE"+
		"&\x38D\x3&\x3&\x6&\x392\n&\r&\xE&\x393\x5&\x396\n&\x3&\x3&\x3&\x5&\x39B"+
		"\n&\x3\'\x3\'\x3\'\x5\'\x3A0\n\'\x3\'\x3\'\x5\'\x3A4\n\'\x3\'\x3\'\x3"+
		"\'\x3\'\x5\'\x3AA\n\'\x3\'\x5\'\x3AD\n\'\x3\'\x3\'\x5\'\x3B1\n\'\x3\'"+
		"\x6\'\x3B4\n\'\r\'\xE\'\x3B5\x3\'\x3\'\x6\'\x3BA\n\'\r\'\xE\'\x3BB\x5"+
		"\'\x3BE\n\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x5(\x3C6\n(\x3(\x3(\x5(\x3CA\n("+
		"\x3(\x5(\x3CD\n(\x3(\x5(\x3D0\n(\x3(\x3(\x5(\x3D4\n(\x3(\x3(\x3)\x3)\x3"+
		")\x3)\x3*\x3*\x3*\x3*\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+"+
		"\x3EB\n+\x3+\x3+\a+\x3EF\n+\f+\xE+\x3F2\v+\x3+\x5+\x3F5\n+\x3+\x3+\x5"+
		"+\x3F9\n+\x3,\x3,\x3,\x3,\x3,\x3,\x6,\x401\n,\r,\xE,\x402\x3,\x3,\x6,"+
		"\x407\n,\r,\xE,\x408\x5,\x40B\n,\x3-\x3-\x3.\x3.\x3.\x3.\x3.\x3.\x6.\x415"+
		"\n.\r.\xE.\x416\x3.\x3.\x6.\x41B\n.\r.\xE.\x41C\x5.\x41F\n.\x3/\x3/\x6"+
		"/\x423\n/\r/\xE/\x424\x3/\x3/\x6/\x429\n/\r/\xE/\x42A\x5/\x42D\n/\x3\x30"+
		"\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x437\n\x31\x3"+
		"\x31\x3\x31\x5\x31\x43B\n\x31\x3\x31\x6\x31\x43E\n\x31\r\x31\xE\x31\x43F"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x5\x33\x448\n\x33\x3\x33\x3"+
		"\x33\x5\x33\x44C\n\x33\x3\x33\x3\x33\x5\x33\x450\n\x33\x3\x33\x3\x33\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x5\x34\x458\n\x34\x3\x34\x3\x34\x5\x34\x45C"+
		"\n\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36"+
		"\x3\x36\x5\x36\x468\n\x36\x3\x36\x3\x36\x5\x36\x46C\n\x36\x3\x36\x3\x36"+
		"\x3\x36\x3\x36\x3\x36\x5\x36\x473\n\x36\x5\x36\x475\n\x36\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x5\x37\x47B\n\x37\x3\x37\x3\x37\x5\x37\x47F\n\x37\x3\x37"+
		"\x3\x37\x3\x38\x3\x38\x5\x38\x485\n\x38\x3\x38\x3\x38\x5\x38\x489\n\x38"+
		"\x3\x38\x3\x38\x5\x38\x48D\n\x38\x3\x38\x3\x38\x3\x39\x3\x39\a\x39\x493"+
		"\n\x39\f\x39\xE\x39\x496\v\x39\x3\x39\x5\x39\x499\n\x39\x3\x39\x3\x39"+
		"\x3:\x3:\x5:\x49F\n:\x3:\x3:\x3:\x3:\x6:\x4A5\n:\r:\xE:\x4A6\x3:\x3:\x6"+
		":\x4AB\n:\r:\xE:\x4AC\x5:\x4AF\n:\x3;\x3;\x5;\x4B3\n;\x3;\x3;\x3;\x3;"+
		"\x6;\x4B9\n;\r;\xE;\x4BA\x3;\x3;\x6;\x4BF\n;\r;\xE;\x4C0\x5;\x4C3\n;\x3"+
		"<\x3<\x6<\x4C7\n<\r<\xE<\x4C8\x3<\x3<\x6<\x4CD\n<\r<\xE<\x4CE\x5<\x4D1"+
		"\n<\x3=\x3=\x5=\x4D5\n=\x3=\x3=\x5=\x4D9\n=\x3=\x3=\x5=\x4DD\n=\x3=\x3"+
		"=\x3>\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x3@"+
		"\x3@\x3@\x3@\x5@\x4F5\n@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x5\x41\x4FF\n\x41\x3\x41\x3\x41\x5\x41\x503\n\x41\x3\x41\a"+
		"\x41\x506\n\x41\f\x41\xE\x41\x509\v\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x5\x42\x513\n\x42\x3\x42\x3\x42\x5\x42\x517"+
		"\n\x42\x3\x42\a\x42\x51A\n\x42\f\x42\xE\x42\x51D\v\x42\x3\x43\x3\x43\x3"+
		"\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x52A"+
		"\n\x43\x3\x43\x3\x43\x5\x43\x52E\n\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3"+
		"\x43\x3\x43\x3\x43\x5\x43\x537\n\x43\x3\x43\x3\x43\x5\x43\x53B\n\x43\x3"+
		"\x43\x5\x43\x53E\n\x43\x3\x44\x3\x44\x5\x44\x542\n\x44\x3\x44\x3\x44\x5"+
		"\x44\x546\n\x44\x3\x44\x5\x44\x549\n\x44\a\x44\x54B\n\x44\f\x44\xE\x44"+
		"\x54E\v\x44\x3\x44\x5\x44\x551\n\x44\x3\x44\x5\x44\x554\n\x44\x3\x44\x3"+
		"\x44\x5\x44\x558\n\x44\x3\x44\x5\x44\x55B\n\x44\x6\x44\x55D\n\x44\r\x44"+
		"\xE\x44\x55E\x5\x44\x561\n\x44\x3\x45\x3\x45\x3\x45\x5\x45\x566\n\x45"+
		"\x3\x45\x3\x45\x5\x45\x56A\n\x45\x3\x45\x3\x45\x5\x45\x56E\n\x45\x3\x45"+
		"\x3\x45\x5\x45\x572\n\x45\x5\x45\x574\n\x45\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x5\x46\x57A\n\x46\x3\x46\x3\x46\x5\x46\x57E\n\x46\x3\x46\x5\x46\x581"+
		"\n\x46\x3G\x3G\x3G\x5G\x586\nG\x3G\x3G\x5G\x58A\nG\x3G\x3G\x3G\x3G\x5"+
		"G\x590\nG\x3G\x5G\x593\nG\x3G\x3G\x5G\x597\nG\x3G\x6G\x59A\nG\rG\xEG\x59B"+
		"\x3G\x3G\x6G\x5A0\nG\rG\xEG\x5A1\x5G\x5A4\nG\x3G\x3G\x3H\x3H\x3H\x5H\x5AB"+
		"\nH\x3H\x3H\x5H\x5AF\nH\x3H\x3H\x3H\x3H\x5H\x5B5\nH\x3H\x5H\x5B8\nH\x3"+
		"H\x6H\x5BB\nH\rH\xEH\x5BC\x3H\x3H\x6H\x5C1\nH\rH\xEH\x5C2\x5H\x5C5\nH"+
		"\x3H\x3H\x3I\x3I\x3I\x5I\x5CC\nI\x3I\x3I\x5I\x5D0\nI\x3I\x3I\x3I\x3I\x5"+
		"I\x5D6\nI\x3I\x5I\x5D9\nI\x3I\x6I\x5DC\nI\rI\xEI\x5DD\x3I\x3I\x6I\x5E2"+
		"\nI\rI\xEI\x5E3\x5I\x5E6\nI\x3I\x3I\x3J\x3J\x3J\x3J\x5J\x5EE\nJ\x3J\x3"+
		"J\x5J\x5F2\nJ\x3J\x5J\x5F5\nJ\x3J\x5J\x5F8\nJ\x3J\x3J\x5J\x5FC\nJ\x3J"+
		"\x3J\x3K\x3K\x3K\x3K\x5K\x604\nK\x3K\x3K\x5K\x608\nK\x3K\x3K\x5K\x60C"+
		"\nK\x5K\x60E\nK\x3K\x5K\x611\nK\x3L\x3L\x3L\x5L\x616\nL\x3M\x3M\x3M\x3"+
		"M\x5M\x61C\nM\x3M\x3M\x5M\x620\nM\x3M\x3M\x5M\x624\nM\x3M\aM\x627\nM\f"+
		"M\xEM\x62A\vM\x3N\x3N\x5N\x62E\nN\x3N\x3N\x5N\x632\nN\x3N\x3N\x5N\x636"+
		"\nN\x3N\x3N\x3N\x5N\x63B\nN\x3O\x3O\x3P\x3P\x3P\x3P\x5P\x643\nP\x5P\x645"+
		"\nP\x3Q\x3Q\x3R\x3R\x3R\x3R\x3S\x3S\x3S\x3S\x5S\x651\nS\x3S\x3S\x5S\x655"+
		"\nS\x3S\x3S\x3T\x3T\x3T\x3T\x5T\x65D\nT\x3T\x3T\x5T\x661\nT\x3T\x3T\x3"+
		"U\x3U\x3U\x3U\x5U\x669\nU\x3U\x3U\x5U\x66D\nU\x3U\x3U\x5U\x671\nU\x3U"+
		"\x3U\x5U\x675\nU\x3U\x3U\x5U\x679\nU\x3U\x3U\x5U\x67D\nU\x3U\x3U\x3V\x3"+
		"V\x3V\x3V\x5V\x685\nV\x3V\x3V\x5V\x689\nV\x3V\x3V\x3W\x3W\x3W\x3W\x3W"+
		"\x3W\x6W\x693\nW\rW\xEW\x694\x3W\aW\x698\nW\fW\xEW\x69B\vW\x3W\x5W\x69E"+
		"\nW\x3W\x3W\x3X\x3X\x3X\x3X\x5X\x6A6\nX\x3X\x5X\x6A9\nX\x3X\aX\x6AC\n"+
		"X\fX\xEX\x6AF\vX\x3X\x6X\x6B2\nX\rX\xEX\x6B3\x5X\x6B6\nX\x3X\x3X\x6X\x6BA"+
		"\nX\rX\xEX\x6BB\x5X\x6BE\nX\x3Y\x3Y\x3Y\x5Y\x6C3\nY\x3Y\x3Y\x5Y\x6C7\n"+
		"Y\x3Y\x3Y\x3Y\x3Y\x5Y\x6CD\nY\x3Y\x3Y\x5Y\x6D1\nY\x3Y\aY\x6D4\nY\fY\xE"+
		"Y\x6D7\vY\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\x6DF\nY\x3Y\x3Y\x5Y\x6E3\nY\x3Y"+
		"\aY\x6E6\nY\fY\xEY\x6E9\vY\x5Y\x6EB\nY\x3Z\x3Z\x3Z\x3Z\x5Z\x6F1\nZ\x3"+
		"Z\x3Z\x5Z\x6F5\nZ\x3Z\x5Z\x6F8\nZ\x3[\x3[\x3[\x3[\x5[\x6FE\n[\x3[\x3["+
		"\x5[\x702\n[\x3[\x3[\x3\\\x3\\\x3\\\x3\\\x5\\\x70A\n\\\x3\\\x3\\\x5\\"+
		"\x70E\n\\\x3\\\x3\\\x3]\x3]\x3^\x3^\x3^\x5^\x717\n^\x3^\x3^\x5^\x71B\n"+
		"^\x3^\x3^\x3^\x3^\x5^\x721\n^\x3^\x5^\x724\n^\x3^\x6^\x727\n^\r^\xE^\x728"+
		"\x3^\x3^\x6^\x72D\n^\r^\xE^\x72E\x5^\x731\n^\x3^\x3^\x3_\x3_\x5_\x737"+
		"\n_\x3_\x3_\x5_\x73B\n_\x3_\x3_\x3`\x3`\x3`\x5`\x742\n`\x3`\x3`\x3`\x3"+
		"`\x6`\x748\n`\r`\xE`\x749\x3`\a`\x74D\n`\f`\xE`\x750\v`\x3`\x3`\x3\x61"+
		"\x3\x61\x5\x61\x756\n\x61\x3\x61\x3\x61\x5\x61\x75A\n\x61\x3\x61\x5\x61"+
		"\x75D\n\x61\x3\x61\x5\x61\x760\n\x61\x3\x61\x5\x61\x763\n\x61\x3\x61\x3"+
		"\x61\x5\x61\x767\n\x61\x3\x61\x6\x61\x76A\n\x61\r\x61\xE\x61\x76B\x3\x62"+
		"\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x5\x62\x775\n\x62\x3\x63\x3"+
		"\x63\x3\x63\x3\x63\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x77F\n\x64\x3\x64"+
		"\x3\x64\x5\x64\x783\n\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x78A"+
		"\n\x64\x5\x64\x78C\n\x64\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3"+
		"\x65\x3\x65\x3\x65\x5\x65\x797\n\x65\x3\x65\x3\x65\x5\x65\x79B\n\x65\x3"+
		"\x65\x3\x65\x3\x65\x3\x65\x5\x65\x7A1\n\x65\x3\x65\x3\x65\x3\x65\x5\x65"+
		"\x7A6\n\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x5"+
		"\x65\x7B0\n\x65\x3\x65\x3\x65\x5\x65\x7B4\n\x65\x3\x65\x3\x65\x5\x65\x7B8"+
		"\n\x65\x3\x65\a\x65\x7BB\n\x65\f\x65\xE\x65\x7BE\v\x65\x3\x65\x3\x65\x3"+
		"\x65\x3\x65\x5\x65\x7C4\n\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x7D2\n\x65\x3\x65\x3"+
		"\x65\x5\x65\x7D6\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x7DB\n\x65\x3\x65\x3"+
		"\x65\x5\x65\x7DF\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x7E4\n\x65\x3\x65\x3"+
		"\x65\x5\x65\x7E8\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x7ED\n\x65\x3\x65\x3"+
		"\x65\x5\x65\x7F1\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x7F6\n\x65\x3\x65\x3"+
		"\x65\x5\x65\x7FA\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x7FF\n\x65\x3\x65\x3"+
		"\x65\x5\x65\x803\n\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x5\x65\x80D\n\x65\x3\x65\x3\x65\x5\x65\x811\n\x65\x3\x65\x3\x65"+
		"\x3\x65\x5\x65\x816\n\x65\x3\x65\x3\x65\x5\x65\x81A\n\x65\x3\x65\x3\x65"+
		"\x3\x65\x5\x65\x81F\n\x65\x3\x65\x3\x65\x5\x65\x823\n\x65\x3\x65\x3\x65"+
		"\x3\x65\x5\x65\x828\n\x65\x3\x65\x3\x65\x5\x65\x82C\n\x65\x3\x65\x3\x65"+
		"\x3\x65\x5\x65\x831\n\x65\x3\x65\x3\x65\x5\x65\x835\n\x65\x3\x65\x3\x65"+
		"\x3\x65\x5\x65\x83A\n\x65\x3\x65\x3\x65\x5\x65\x83E\n\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x5\x65\x84D\n\x65\x3\x65\x3\x65\x5\x65\x851\n\x65\x3\x65\x3\x65"+
		"\x3\x65\x5\x65\x856\n\x65\x3\x65\x3\x65\x5\x65\x85A\n\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\a\x65\x862\n\x65\f\x65\xE\x65\x865\v\x65"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\x86A\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\x86F"+
		"\n\x66\x3\x66\x3\x66\x3g\x3g\x5g\x875\ng\x3g\x3g\x5g\x879\ng\x3g\ag\x87C"+
		"\ng\fg\xEg\x87F\vg\x3h\x3h\x5h\x883\nh\x3h\x3h\x5h\x887\nh\x3h\x3h\x5"+
		"h\x88B\nh\x5h\x88D\nh\x3h\x3h\x5h\x891\nh\x5h\x893\nh\x3h\x5h\x896\nh"+
		"\x3h\x3h\x5h\x89A\nh\x3i\x3i\x3i\x3i\x6i\x8A0\ni\ri\xEi\x8A1\x3i\x3i\x3"+
		"i\ai\x8A7\ni\fi\xEi\x8AA\vi\x3i\x3i\x3j\x3j\x3j\x3j\x5j\x8B2\nj\x3j\x3"+
		"j\x5j\x8B6\nj\x3j\x3j\x3k\x3k\x3k\x3k\x3k\x3k\x5k\x8C0\nk\x3k\x6k\x8C3"+
		"\nk\rk\xEk\x8C4\x3k\x3k\x6k\x8C9\nk\rk\xEk\x8CA\x5k\x8CD\nk\x3k\x3k\x3"+
		"l\x3l\x3l\x3l\x5l\x8D5\nl\x3l\x3l\x5l\x8D9\nl\x3l\x5l\x8DC\nl\x3m\x5m"+
		"\x8DF\nm\x3m\x3m\x5m\x8E3\nm\x3n\x3n\x5n\x8E7\nn\x3o\x3o\x3o\x3o\x5o\x8ED"+
		"\no\x3o\x5o\x8F0\no\x3o\x3o\x5o\x8F4\no\x3o\x3o\x5o\x8F8\no\x3o\x3o\x5"+
		"o\x8FC\no\x3o\x5o\x8FF\no\x3o\x3o\x3o\x3o\ao\x905\no\fo\xEo\x908\vo\x3"+
		"p\x3p\x3p\x5p\x90D\np\x3p\x3p\x3p\x5p\x912\np\x3p\x5p\x915\np\x3p\x3p"+
		"\x5p\x919\np\x3p\x3p\x5p\x91D\np\x3p\x3p\x5p\x921\np\x3p\x5p\x924\np\x3"+
		"p\x3p\x3p\x3p\ap\x92A\np\fp\xEp\x92D\vp\x3q\x3q\x5q\x931\nq\x3r\x5r\x934"+
		"\nr\x3r\x3r\x3r\x5r\x939\nr\x3r\x3r\x5r\x93D\nr\x3r\x5r\x940\nr\x3r\x5"+
		"r\x943\nr\x3r\x3r\x3r\x3r\ar\x949\nr\fr\xEr\x94C\vr\x3s\x3s\x3s\x5s\x951"+
		"\ns\x3s\x5s\x954\ns\x3s\x3s\x3s\x3s\as\x95A\ns\fs\xEs\x95D\vs\x3t\x3t"+
		"\x3t\x3t\x5t\x963\nt\x3u\x3u\x5u\x967\nu\x3u\x5u\x96A\nu\x3u\x5u\x96D"+
		"\nu\x3u\x3u\x3u\x3u\au\x973\nu\fu\xEu\x976\vu\x3v\x3v\x5v\x97A\nv\x3v"+
		"\x5v\x97D\nv\x3v\x5v\x980\nv\x3v\x3v\x5v\x984\nv\x3v\x3v\x5v\x988\nv\x5"+
		"v\x98A\nv\x3v\x3v\x5v\x98E\nv\x3v\x5v\x991\nv\x3v\x3v\x3v\x3v\av\x997"+
		"\nv\fv\xEv\x99A\vv\x3w\x3w\x5w\x99E\nw\x3w\x6w\x9A1\nw\rw\xEw\x9A2\x3"+
		"w\x5w\x9A6\nw\x3w\x5w\x9A9\nw\x3w\x3w\x3w\x3w\aw\x9AF\nw\fw\xEw\x9B2\v"+
		"w\x3x\x3x\x3x\x5x\x9B7\nx\x3y\x3y\x3z\x5z\x9BC\nz\x3z\x5z\x9BF\nz\x3z"+
		"\x3z\x5z\x9C3\nz\az\x9C5\nz\fz\xEz\x9C8\vz\x3z\x3z\x5z\x9CC\nz\x3z\x3"+
		"z\x5z\x9D0\nz\x3z\x5z\x9D3\nz\az\x9D5\nz\fz\xEz\x9D8\vz\x3{\x3{\x5{\x9DC"+
		"\n{\x3{\x3{\x3|\x3|\x3|\x5|\x9E3\n|\x3}\x3}\x5}\x9E7\n}\x3}\x3}\x5}\x9EB"+
		"\n}\x3}\x3}\x5}\x9EF\n}\x3}\a}\x9F2\n}\f}\xE}\x9F5\v}\x5}\x9F7\n}\x3}"+
		"\x5}\x9FA\n}\x3}\x3}\x3~\x3~\x5~\xA00\n~\x3~\x3~\x5~\xA04\n~\x3~\x3~\x5"+
		"~\xA08\n~\x3~\x3~\x5~\xA0C\n~\x3~\x3~\x5~\xA10\n~\x3~\x5~\xA13\n~\x3~"+
		"\x3~\x5~\xA17\n~\x3~\x5~\xA1A\n~\x3~\x5~\xA1D\n~\x3\x7F\x3\x7F\x5\x7F"+
		"\xA21\n\x7F\x3\x7F\x3\x7F\x5\x7F\xA25\n\x7F\x3\x80\x3\x80\x5\x80\xA29"+
		"\n\x80\x3\x80\x3\x80\x5\x80\xA2D\n\x80\x3\x80\a\x80\xA30\n\x80\f\x80\xE"+
		"\x80\xA33\v\x80\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x5\x81\xA3A\n\x81\x3"+
		"\x81\x3\x81\x3\x82\x3\x82\x6\x82\xA40\n\x82\r\x82\xE\x82\xA41\x3\x82\x3"+
		"\x82\x3\x82\x6\x82\xA47\n\x82\r\x82\xE\x82\xA48\x3\x82\x5\x82\xA4C\n\x82"+
		"\x3\x83\x3\x83\x3\x83\x3\x83\x5\x83\xA52\n\x83\x3\x83\x3\x83\x3\x83\x5"+
		"\x83\xA57\n\x83\x3\x84\x3\x84\x3\x85\x3\x85\x3\x85\a\x85\xA5E\n\x85\f"+
		"\x85\xE\x85\xA61\v\x85\x3\x85\x3\x85\x3\x85\x6\x85\xA66\n\x85\r\x85\xE"+
		"\x85\xA67\x5\x85\xA6A\n\x85\x3\x86\x3\x86\x3\x87\x3\x87\x3\x87\a\x87\xA71"+
		"\n\x87\f\x87\xE\x87\xA74\v\x87\x3\x88\x3\x88\x5\x88\xA78\n\x88\x3\x88"+
		"\x3\x88\x5\x88\xA7C\n\x88\x3\x89\x3\x89\x5\x89\xA80\n\x89\x3\x89\x3\x89"+
		"\x5\x89\xA84\n\x89\x3\x89\x5\x89\xA87\n\x89\x3\x8A\x3\x8A\x3\x8A\x3\x8B"+
		"\x3\x8B\x3\x8C\x3\x8C\x5\x8C\xA90\n\x8C\x3\x8C\x5\x8C\xA93\n\x8C\x3\x8C"+
		"\x3\x8C\x5\x8C\xA97\n\x8C\x3\x8C\x5\x8C\xA9A\n\x8C\x3\x8D\x3\x8D\x3\x8E"+
		"\x3\x8E\x3\x8F\x3\x8F\x3\x8F\x2\x2\x3\xC8\x90\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:"+
		"\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X"+
		"\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2"+
		"v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2"+
		"\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2"+
		"\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2"+
		"\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2"+
		"\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2"+
		"\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2"+
		"\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104"+
		"\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116"+
		"\x2\x118\x2\x11A\x2\x11C\x2\x2\x16\x5\x2\x16\x16##\xA9\xA9\x4\x2PP\xA7"+
		"\xA7\x3\x2&\x31\x4\x2\xB2\xB2\xB6\xB6\x3\x2GK\x5\x2\xBF\xBF\xC6\xC6\xCA"+
		"\xCA\a\x2\x12\x12\x16\x16YY\x82\x82\x8D\x8D\x4\x2\x90\x91\xBA\xBA\x4\x2"+
		"\x66h\xA0\xA0\x3\x2\t\n\x4\x2\xA2\xA2\xA8\xA8\x4\x2\x4\x4\v\v\x4\x2\x18"+
		"\x19\x83\x83\x3\x2\x18\x19\f\x2\x17\x17\x1A\x1A!!$$\x35\x35[[__\xA1\xA1"+
		"\xA6\xA6\xB3\xB3\a\x2ZZ\x64\x64\xBF\xC2\xC4\xC4\xC8\xC8\x6\x2LLwx\xAD"+
		"\xAD\xCF\xD3\x4\x2\x3\a\xBC\xBC\x6\x2NNRR\x86\x86\x8B\x8B\v\x2\f\x38\x41"+
		"\x46L\x64iioy{|\x81\x86\x8B\x90\x92\xBB\xC4F\x2\x11E\x3\x2\x2\x2\x4\x122"+
		"\x3\x2\x2\x2\x6\x159\x3\x2\x2\x2\b\x15F\x3\x2\x2\x2\n\x170\x3\x2\x2\x2"+
		"\f\x181\x3\x2\x2\x2\xE\x185\x3\x2\x2\x2\x10\x199\x3\x2\x2\x2\x12\x1A3"+
		"\x3\x2\x2\x2\x14\x1A5\x3\x2\x2\x2\x16\x1B8\x3\x2\x2\x2\x18\x1BA\x3\x2"+
		"\x2\x2\x1A\x1BC\x3\x2\x2\x2\x1C\x1D4\x3\x2\x2\x2\x1E\x22D\x3\x2\x2\x2"+
		" \x22F\x3\x2\x2\x2\"\x23C\x3\x2\x2\x2$\x23E\x3\x2\x2\x2&\x242\x3\x2\x2"+
		"\x2(\x246\x3\x2\x2\x2*\x25B\x3\x2\x2\x2,\x26D\x3\x2\x2\x2.\x27E\x3\x2"+
		"\x2\x2\x30\x28B\x3\x2\x2\x2\x32\x2AA\x3\x2\x2\x2\x34\x2BA\x3\x2\x2\x2"+
		"\x36\x304\x3\x2\x2\x2\x38\x306\x3\x2\x2\x2:\x30B\x3\x2\x2\x2<\x31D\x3"+
		"\x2\x2\x2>\x32D\x3\x2\x2\x2@\x331\x3\x2\x2\x2\x42\x338\x3\x2\x2\x2\x44"+
		"\x342\x3\x2\x2\x2\x46\x344\x3\x2\x2\x2H\x350\x3\x2\x2\x2J\x36E\x3\x2\x2"+
		"\x2L\x39F\x3\x2\x2\x2N\x3C1\x3\x2\x2\x2P\x3D7\x3\x2\x2\x2R\x3DB\x3\x2"+
		"\x2\x2T\x3F8\x3\x2\x2\x2V\x3FA\x3\x2\x2\x2X\x40C\x3\x2\x2\x2Z\x40E\x3"+
		"\x2\x2\x2\\\x420\x3\x2\x2\x2^\x42E\x3\x2\x2\x2`\x432\x3\x2\x2\x2\x62\x441"+
		"\x3\x2\x2\x2\x64\x447\x3\x2\x2\x2\x66\x453\x3\x2\x2\x2h\x45F\x3\x2\x2"+
		"\x2j\x463\x3\x2\x2\x2l\x476\x3\x2\x2\x2n\x482\x3\x2\x2\x2p\x490\x3\x2"+
		"\x2\x2r\x49C\x3\x2\x2\x2t\x4B0\x3\x2\x2\x2v\x4C4\x3\x2\x2\x2x\x4D2\x3"+
		"\x2\x2\x2z\x4E0\x3\x2\x2\x2|\x4E4\x3\x2\x2\x2~\x4EC\x3\x2\x2\x2\x80\x4F6"+
		"\x3\x2\x2\x2\x82\x50A\x3\x2\x2\x2\x84\x51E\x3\x2\x2\x2\x86\x560\x3\x2"+
		"\x2\x2\x88\x573\x3\x2\x2\x2\x8A\x575\x3\x2\x2\x2\x8C\x585\x3\x2\x2\x2"+
		"\x8E\x5AA\x3\x2\x2\x2\x90\x5CB\x3\x2\x2\x2\x92\x5E9\x3\x2\x2\x2\x94\x5FF"+
		"\x3\x2\x2\x2\x96\x612\x3\x2\x2\x2\x98\x617\x3\x2\x2\x2\x9A\x62B\x3\x2"+
		"\x2\x2\x9C\x63C\x3\x2\x2\x2\x9E\x63E\x3\x2\x2\x2\xA0\x646\x3\x2\x2\x2"+
		"\xA2\x648\x3\x2\x2\x2\xA4\x64C\x3\x2\x2\x2\xA6\x658\x3\x2\x2\x2\xA8\x664"+
		"\x3\x2\x2\x2\xAA\x680\x3\x2\x2\x2\xAC\x68C\x3\x2\x2\x2\xAE\x6A1\x3\x2"+
		"\x2\x2\xB0\x6EA\x3\x2\x2\x2\xB2\x6EC\x3\x2\x2\x2\xB4\x6F9\x3\x2\x2\x2"+
		"\xB6\x705\x3\x2\x2\x2\xB8\x711\x3\x2\x2\x2\xBA\x716\x3\x2\x2\x2\xBC\x734"+
		"\x3\x2\x2\x2\xBE\x741\x3\x2\x2\x2\xC0\x753\x3\x2\x2\x2\xC2\x76D\x3\x2"+
		"\x2\x2\xC4\x776\x3\x2\x2\x2\xC6\x77A\x3\x2\x2\x2\xC8\x7C3\x3\x2\x2\x2"+
		"\xCA\x869\x3\x2\x2\x2\xCC\x872\x3\x2\x2\x2\xCE\x880\x3\x2\x2\x2\xD0\x89B"+
		"\x3\x2\x2\x2\xD2\x8AD\x3\x2\x2\x2\xD4\x8B9\x3\x2\x2\x2\xD6\x8D0\x3\x2"+
		"\x2\x2\xD8\x8DE\x3\x2\x2\x2\xDA\x8E6\x3\x2\x2\x2\xDC\x8E8\x3\x2\x2\x2"+
		"\xDE\x909\x3\x2\x2\x2\xE0\x930\x3\x2\x2\x2\xE2\x933\x3\x2\x2\x2\xE4\x94D"+
		"\x3\x2\x2\x2\xE6\x962\x3\x2\x2\x2\xE8\x964\x3\x2\x2\x2\xEA\x979\x3\x2"+
		"\x2\x2\xEC\x99D\x3\x2\x2\x2\xEE\x9B3\x3\x2\x2\x2\xF0\x9B8\x3\x2\x2\x2"+
		"\xF2\x9C6\x3\x2\x2\x2\xF4\x9DB\x3\x2\x2\x2\xF6\x9DF\x3\x2\x2\x2\xF8\x9E4"+
		"\x3\x2\x2\x2\xFA\x9FF\x3\x2\x2\x2\xFC\xA1E\x3\x2\x2\x2\xFE\xA26\x3\x2"+
		"\x2\x2\x100\xA39\x3\x2\x2\x2\x102\xA4B\x3\x2\x2\x2\x104\xA4D\x3\x2\x2"+
		"\x2\x106\xA58\x3\x2\x2\x2\x108\xA69\x3\x2\x2\x2\x10A\xA6B\x3\x2\x2\x2"+
		"\x10C\xA6D\x3\x2\x2\x2\x10E\xA75\x3\x2\x2\x2\x110\xA7D\x3\x2\x2\x2\x112"+
		"\xA88\x3\x2\x2\x2\x114\xA8B\x3\x2\x2\x2\x116\xA8F\x3\x2\x2\x2\x118\xA9B"+
		"\x3\x2\x2\x2\x11A\xA9D\x3\x2\x2\x2\x11C\xA9F\x3\x2\x2\x2\x11E\x11F\x5"+
		"\x4\x3\x2\x11F\x120\a\x2\x2\x3\x120\x3\x3\x2\x2\x2\x121\x123\a\xD9\x2"+
		"\x2\x122\x121\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\x127\x3\x2\x2\x2"+
		"\x124\x126\a\xD7\x2\x2\x125\x124\x3\x2\x2\x2\x126\x129\x3\x2\x2\x2\x127"+
		"\x125\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x130\x3\x2\x2\x2\x129\x127"+
		"\x3\x2\x2\x2\x12A\x12C\x5\x6\x4\x2\x12B\x12D\a\xD7\x2\x2\x12C\x12B\x3"+
		"\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x12C\x3\x2\x2\x2\x12E\x12F\x3\x2"+
		"\x2\x2\x12F\x131\x3\x2\x2\x2\x130\x12A\x3\x2\x2\x2\x130\x131\x3\x2\x2"+
		"\x2\x131\x133\x3\x2\x2\x2\x132\x134\x5\b\x5\x2\x133\x132\x3\x2\x2\x2\x133"+
		"\x134\x3\x2\x2\x2\x134\x138\x3\x2\x2\x2\x135\x137\a\xD7\x2\x2\x136\x135"+
		"\x3\x2\x2\x2\x137\x13A\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2\x138\x139\x3"+
		"\x2\x2\x2\x139\x13C\x3\x2\x2\x2\x13A\x138\x3\x2\x2\x2\x13B\x13D\x5\f\a"+
		"\x2\x13C\x13B\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x141\x3\x2\x2\x2"+
		"\x13E\x140\a\xD7\x2\x2\x13F\x13E\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141"+
		"\x13F\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x145\x3\x2\x2\x2\x143\x141"+
		"\x3\x2\x2\x2\x144\x146\x5\xE\b\x2\x145\x144\x3\x2\x2\x2\x145\x146\x3\x2"+
		"\x2\x2\x146\x14A\x3\x2\x2\x2\x147\x149\a\xD7\x2\x2\x148\x147\x3\x2\x2"+
		"\x2\x149\x14C\x3\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2"+
		"\x14B\x14E\x3\x2\x2\x2\x14C\x14A\x3\x2\x2\x2\x14D\x14F\x5\x14\v\x2\x14E"+
		"\x14D\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x153\x3\x2\x2\x2\x150\x152"+
		"\a\xD7\x2\x2\x151\x150\x3\x2\x2\x2\x152\x155\x3\x2\x2\x2\x153\x151\x3"+
		"\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x157\x3\x2\x2\x2\x155\x153\x3\x2"+
		"\x2\x2\x156\x158\a\xD9\x2\x2\x157\x156\x3\x2\x2\x2\x157\x158\x3\x2\x2"+
		"\x2\x158\x5\x3\x2\x2\x2\x159\x15A\a\xB4\x2\x2\x15A\x15B\a\xD9\x2\x2\x15B"+
		"\x15C\a\xD3\x2\x2\x15C\x15D\a\xD9\x2\x2\x15D\x15E\a\x1F\x2\x2\x15E\a\x3"+
		"\x2\x2\x2\x15F\x161\a\x14\x2\x2\x160\x162\a\xD7\x2\x2\x161\x160\x3\x2"+
		"\x2\x2\x162\x163\x3\x2\x2\x2\x163\x161\x3\x2\x2\x2\x163\x164\x3\x2\x2"+
		"\x2\x164\x166\x3\x2\x2\x2\x165\x167\x5\n\x6\x2\x166\x165\x3\x2\x2\x2\x167"+
		"\x168\x3\x2\x2\x2\x168\x166\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16A"+
		"\x3\x2\x2\x2\x16A\x16C\a\x41\x2\x2\x16B\x16D\a\xD7\x2\x2\x16C\x16B\x3"+
		"\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x16C\x3\x2\x2\x2\x16E\x16F\x3\x2"+
		"\x2\x2\x16F\t\x3\x2\x2\x2\x170\x172\x5\x102\x82\x2\x171\x173\a\xD9\x2"+
		"\x2\x172\x171\x3\x2\x2\x2\x172\x173\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2"+
		"\x174\x176\a\xBF\x2\x2\x175\x177\a\xD9\x2\x2\x176\x175\x3\x2\x2\x2\x176"+
		"\x177\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x179\x5\x114\x8B\x2\x179"+
		"\x17A\a\xD7\x2\x2\x17A\v\x3\x2\x2\x2\x17B\x17D\x5\x1A\xE\x2\x17C\x17E"+
		"\a\xD7\x2\x2\x17D\x17C\x3\x2\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F\x17D\x3"+
		"\x2\x2\x2\x17F\x180\x3\x2\x2\x2\x180\x182\x3\x2\x2\x2\x181\x17B\x3\x2"+
		"\x2\x2\x182\x183\x3\x2\x2\x2\x183\x181\x3\x2\x2\x2\x183\x184\x3\x2\x2"+
		"\x2\x184\r\x3\x2\x2\x2\x185\x18E\x5\x12\n\x2\x186\x188\a\xD7\x2\x2\x187"+
		"\x186\x3\x2\x2\x2\x188\x189\x3\x2\x2\x2\x189\x187\x3\x2\x2\x2\x189\x18A"+
		"\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x18D\x5\x12\n\x2\x18C\x187\x3"+
		"\x2\x2\x2\x18D\x190\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2\x18E\x18F\x3\x2"+
		"\x2\x2\x18F\xF\x3\x2\x2\x2\x190\x18E\x3\x2\x2\x2\x191\x192\a}\x2\x2\x192"+
		"\x193\a\xD9\x2\x2\x193\x19A\a\xD2\x2\x2\x194\x195\a\x7F\x2\x2\x195\x196"+
		"\a\xD9\x2\x2\x196\x19A\t\x2\x2\x2\x197\x19A\a~\x2\x2\x198\x19A\a\x80\x2"+
		"\x2\x199\x191\x3\x2\x2\x2\x199\x194\x3\x2\x2\x2\x199\x197\x3\x2\x2\x2"+
		"\x199\x198\x3\x2\x2\x2\x19A\x11\x3\x2\x2\x2\x19B\x1A4\x5\x18\r\x2\x19C"+
		"\x1A4\x5\x30\x19\x2\x19D\x1A4\x5:\x1E\x2\x19E\x1A4\x5\x42\"\x2\x19F\x1A4"+
		"\x5n\x38\x2\x1A0\x1A4\x5p\x39\x2\x1A1\x1A4\x5\x10\t\x2\x1A2\x1A4\x5\xBE"+
		"`\x2\x1A3\x19B\x3\x2\x2\x2\x1A3\x19C\x3\x2\x2\x2\x1A3\x19D\x3\x2\x2\x2"+
		"\x1A3\x19E\x3\x2\x2\x2\x1A3\x19F\x3\x2\x2\x2\x1A3\x1A0\x3\x2\x2\x2\x1A3"+
		"\x1A1\x3\x2\x2\x2\x1A3\x1A2\x3\x2\x2\x2\x1A4\x13\x3\x2\x2\x2\x1A5\x1AE"+
		"\x5\x16\f\x2\x1A6\x1A8\a\xD7\x2\x2\x1A7\x1A6\x3\x2\x2\x2\x1A8\x1A9\x3"+
		"\x2\x2\x2\x1A9\x1A7\x3\x2\x2\x2\x1A9\x1AA\x3\x2\x2\x2\x1AA\x1AB\x3\x2"+
		"\x2\x2\x1AB\x1AD\x5\x16\f\x2\x1AC\x1A7\x3\x2\x2\x2\x1AD\x1B0\x3\x2\x2"+
		"\x2\x1AE\x1AC\x3\x2\x2\x2\x1AE\x1AF\x3\x2\x2\x2\x1AF\x15\x3\x2\x2\x2\x1B0"+
		"\x1AE\x3\x2\x2\x2\x1B1\x1B9\x5\x18\r\x2\x1B2\x1B9\x5L\'\x2\x1B3\x1B9\x5"+
		"p\x39\x2\x1B4\x1B9\x5\x8CG\x2\x1B5\x1B9\x5\x8EH\x2\x1B6\x1B9\x5\x90I\x2"+
		"\x1B7\x1B9\x5\xBA^\x2\x1B8\x1B1\x3\x2\x2\x2\x1B8\x1B2\x3\x2\x2\x2\x1B8"+
		"\x1B3\x3\x2\x2\x2\x1B8\x1B4\x3\x2\x2\x2\x1B8\x1B5\x3\x2\x2\x2\x1B8\x1B6"+
		"\x3\x2\x2\x2\x1B8\x1B7\x3\x2\x2\x2\x1B9\x17\x3\x2\x2\x2\x1BA\x1BB\x5\x1C"+
		"\xF\x2\x1BB\x19\x3\x2\x2\x2\x1BC\x1BD\a\x10\x2\x2\x1BD\x1BE\a\xD9\x2\x2"+
		"\x1BE\x1C0\x5\xE6t\x2\x1BF\x1C1\a\xD9\x2\x2\x1C0\x1BF\x3\x2\x2\x2\x1C0"+
		"\x1C1\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C4\a\xBF\x2\x2\x1C3\x1C5"+
		"\a\xD9\x2\x2\x1C4\x1C3\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5\x1C6\x3"+
		"\x2\x2\x2\x1C6\x1D1\x5\x114\x8B\x2\x1C7\x1C9\a\xD9\x2\x2\x1C8\x1C7\x3"+
		"\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CC\a\n\x2"+
		"\x2\x1CB\x1CD\a\xD9\x2\x2\x1CC\x1CB\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2"+
		"\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1D0\x5\x114\x8B\x2\x1CF\x1C8\x3\x2\x2\x2"+
		"\x1D0\x1D3\x3\x2\x2\x2\x1D1\x1CF\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2"+
		"\x1B\x3\x2\x2\x2\x1D3\x1D1\x3\x2\x2\x2\x1D4\x1E1\x5\x1E\x10\x2\x1D5\x1D7"+
		"\a\xD7\x2\x2\x1D6\x1D5\x3\x2\x2\x2\x1D7\x1DA\x3\x2\x2\x2\x1D8\x1D6\x3"+
		"\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9\x1DC\x3\x2\x2\x2\x1DA\x1D8\x3\x2"+
		"\x2\x2\x1DB\x1DD\a\xD9\x2\x2\x1DC\x1DB\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2"+
		"\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1E0\x5\x1E\x10\x2\x1DF\x1D8\x3\x2\x2\x2"+
		"\x1E0\x1E3\x3\x2\x2\x2\x1E1\x1DF\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2"+
		"\x1E7\x3\x2\x2\x2\x1E3\x1E1\x3\x2\x2\x2\x1E4\x1E6\a\xD7\x2\x2\x1E5\x1E4"+
		"\x3\x2\x2\x2\x1E6\x1E9\x3\x2\x2\x2\x1E7\x1E5\x3\x2\x2\x2\x1E7\x1E8\x3"+
		"\x2\x2\x2\x1E8\x1D\x3\x2\x2\x2\x1E9\x1E7\x3\x2\x2\x2\x1EA\x22E\x5\x112"+
		"\x8A\x2\x1EB\x22E\x5 \x11\x2\x1EC\x22E\x5\x1A\xE\x2\x1ED\x22E\x5\"\x12"+
		"\x2\x1EE\x22E\x5$\x13\x2\x1EF\x22E\x5&\x14\x2\x1F0\x22E\x5(\x15\x2\x1F1"+
		"\x22E\x5*\x16\x2\x1F2\x22E\x5.\x18\x2\x1F3\x22E\x5\x34\x1B\x2\x1F4\x22E"+
		"\x5\x32\x1A\x2\x1F5\x22E\x5\x36\x1C\x2\x1F6\x22E\x5\x38\x1D\x2\x1F7\x22E"+
		"\x5> \x2\x1F8\x22E\x5@!\x2\x1F9\x22E\x5\x44#\x2\x1FA\x22E\x5\xDAn\x2\x1FB"+
		"\x22E\x5\x46$\x2\x1FC\x22E\x5H%\x2\x1FD\x22E\x5J&\x2\x1FE\x22E\x5N(\x2"+
		"\x1FF\x22E\x5P)\x2\x200\x22E\x5R*\x2\x201\x22E\x5T+\x2\x202\x22E\x5^\x30"+
		"\x2\x203\x22E\x5`\x31\x2\x204\x22E\x5\x62\x32\x2\x205\x22E\x5\x64\x33"+
		"\x2\x206\x22E\x5\x66\x34\x2\x207\x22E\x5h\x35\x2\x208\x22E\x5j\x36\x2"+
		"\x209\x22E\x5l\x37\x2\x20A\x22E\x5p\x39\x2\x20B\x22E\x5x=\x2\x20C\x22E"+
		"\x5z>\x2\x20D\x22E\x5|?\x2\x20E\x22E\x5~@\x2\x20F\x22E\x5\x80\x41\x2\x210"+
		"\x22E\x5\x82\x42\x2\x211\x22E\x5\x84\x43\x2\x212\x22E\x5\x8A\x46\x2\x213"+
		"\x22E\x5\x92J\x2\x214\x22E\x5\x94K\x2\x215\x22E\x5\x96L\x2\x216\x22E\x5"+
		"\x98M\x2\x217\x22E\x5\x9CO\x2\x218\x22E\x5\x9EP\x2\x219\x22E\x5\xA0Q\x2"+
		"\x21A\x22E\x5\xA2R\x2\x21B\x22E\x5\xA4S\x2\x21C\x22E\x5\xA6T\x2\x21D\x22E"+
		"\x5\xA8U\x2\x21E\x22E\x5\xAAV\x2\x21F\x22E\x5\xACW\x2\x220\x22E\x5\xB2"+
		"Z\x2\x221\x22E\x5\xB4[\x2\x222\x22E\x5\xB6\\\x2\x223\x22E\x5\xB8]\x2\x224"+
		"\x22E\x5\xBC_\x2\x225\x22E\x5\xC4\x63\x2\x226\x22E\x5\xC6\x64\x2\x227"+
		"\x22E\x5\xCA\x66\x2\x228\x22E\x5\xD0i\x2\x229\x22E\x5\xD2j\x2\x22A\x22E"+
		"\x5\xD4k\x2\x22B\x22E\x5\xD6l\x2\x22C\x22E\x5\xE0q\x2\x22D\x1EA\x3\x2"+
		"\x2\x2\x22D\x1EB\x3\x2\x2\x2\x22D\x1EC\x3\x2\x2\x2\x22D\x1ED\x3\x2\x2"+
		"\x2\x22D\x1EE\x3\x2\x2\x2\x22D\x1EF\x3\x2\x2\x2\x22D\x1F0\x3\x2\x2\x2"+
		"\x22D\x1F1\x3\x2\x2\x2\x22D\x1F2\x3\x2\x2\x2\x22D\x1F3\x3\x2\x2\x2\x22D"+
		"\x1F4\x3\x2\x2\x2\x22D\x1F5\x3\x2\x2\x2\x22D\x1F6\x3\x2\x2\x2\x22D\x1F7"+
		"\x3\x2\x2\x2\x22D\x1F8\x3\x2\x2\x2\x22D\x1F9\x3\x2\x2\x2\x22D\x1FA\x3"+
		"\x2\x2\x2\x22D\x1FB\x3\x2\x2\x2\x22D\x1FC\x3\x2\x2\x2\x22D\x1FD\x3\x2"+
		"\x2\x2\x22D\x1FE\x3\x2\x2\x2\x22D\x1FF\x3\x2\x2\x2\x22D\x200\x3\x2\x2"+
		"\x2\x22D\x201\x3\x2\x2\x2\x22D\x202\x3\x2\x2\x2\x22D\x203\x3\x2\x2\x2"+
		"\x22D\x204\x3\x2\x2\x2\x22D\x205\x3\x2\x2\x2\x22D\x206\x3\x2\x2\x2\x22D"+
		"\x207\x3\x2\x2\x2\x22D\x208\x3\x2\x2\x2\x22D\x209\x3\x2\x2\x2\x22D\x20A"+
		"\x3\x2\x2\x2\x22D\x20B\x3\x2\x2\x2\x22D\x20C\x3\x2\x2\x2\x22D\x20D\x3"+
		"\x2\x2\x2\x22D\x20E\x3\x2\x2\x2\x22D\x20F\x3\x2\x2\x2\x22D\x210\x3\x2"+
		"\x2\x2\x22D\x211\x3\x2\x2\x2\x22D\x212\x3\x2\x2\x2\x22D\x213\x3\x2\x2"+
		"\x2\x22D\x214\x3\x2\x2\x2\x22D\x215\x3\x2\x2\x2\x22D\x216\x3\x2\x2\x2"+
		"\x22D\x217\x3\x2\x2\x2\x22D\x218\x3\x2\x2\x2\x22D\x219\x3\x2\x2\x2\x22D"+
		"\x21A\x3\x2\x2\x2\x22D\x21B\x3\x2\x2\x2\x22D\x21C\x3\x2\x2\x2\x22D\x21D"+
		"\x3\x2\x2\x2\x22D\x21E\x3\x2\x2\x2\x22D\x21F\x3\x2\x2\x2\x22D\x220\x3"+
		"\x2\x2\x2\x22D\x221\x3\x2\x2\x2\x22D\x222\x3\x2\x2\x2\x22D\x223\x3\x2"+
		"\x2\x2\x22D\x224\x3\x2\x2\x2\x22D\x225\x3\x2\x2\x2\x22D\x226\x3\x2\x2"+
		"\x2\x22D\x227\x3\x2\x2\x2\x22D\x228\x3\x2\x2\x2\x22D\x229\x3\x2\x2\x2"+
		"\x22D\x22A\x3\x2\x2\x2\x22D\x22B\x3\x2\x2\x2\x22D\x22C\x3\x2\x2\x2\x22E"+
		"\x1F\x3\x2\x2\x2\x22F\x230\a\x11\x2\x2\x230\x231\a\xD9\x2\x2\x231\x23A"+
		"\x5\xC8\x65\x2\x232\x234\a\xD9\x2\x2\x233\x232\x3\x2\x2\x2\x233\x234\x3"+
		"\x2\x2\x2\x234\x235\x3\x2\x2\x2\x235\x237\a\n\x2\x2\x236\x238\a\xD9\x2"+
		"\x2\x237\x236\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2"+
		"\x239\x23B\x5\xC8\x65\x2\x23A\x233\x3\x2\x2\x2\x23A\x23B\x3\x2\x2\x2\x23B"+
		"!\x3\x2\x2\x2\x23C\x23D\a\x15\x2\x2\x23D#\x3\x2\x2\x2\x23E\x23F\a\x1D"+
		"\x2\x2\x23F\x240\a\xD9\x2\x2\x240\x241\x5\xC8\x65\x2\x241%\x3\x2\x2\x2"+
		"\x242\x243\a\x1E\x2\x2\x243\x244\a\xD9\x2\x2\x244\x245\x5\xC8\x65\x2\x245"+
		"\'\x3\x2\x2\x2\x246\x256\a \x2\x2\x247\x248\a\xD9\x2\x2\x248\x253\x5\xD8"+
		"m\x2\x249\x24B\a\xD9\x2\x2\x24A\x249\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2"+
		"\x24B\x24C\x3\x2\x2\x2\x24C\x24E\a\n\x2\x2\x24D\x24F\a\xD9\x2\x2\x24E"+
		"\x24D\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x252"+
		"\x5\xD8m\x2\x251\x24A\x3\x2\x2\x2\x252\x255\x3\x2\x2\x2\x253\x251\x3\x2"+
		"\x2\x2\x253\x254\x3\x2\x2\x2\x254\x257\x3\x2\x2\x2\x255\x253\x3\x2\x2"+
		"\x2\x256\x247\x3\x2\x2\x2\x256\x257\x3\x2\x2\x2\x257)\x3\x2\x2\x2\x258"+
		"\x259\x5\x11A\x8E\x2\x259\x25A\a\xD9\x2\x2\x25A\x25C\x3\x2\x2\x2\x25B"+
		"\x258\x3\x2\x2\x2\x25B\x25C\x3\x2\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x25E"+
		"\a\"\x2\x2\x25E\x25F\a\xD9\x2\x2\x25F\x26A\x5,\x17\x2\x260\x262\a\xD9"+
		"\x2\x2\x261\x260\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262\x263\x3\x2\x2"+
		"\x2\x263\x265\a\n\x2\x2\x264\x266\a\xD9\x2\x2\x265\x264\x3\x2\x2\x2\x265"+
		"\x266\x3\x2\x2\x2\x266\x267\x3\x2\x2\x2\x267\x269\x5,\x17\x2\x268\x261"+
		"\x3\x2\x2\x2\x269\x26C\x3\x2\x2\x2\x26A\x268\x3\x2\x2\x2\x26A\x26B\x3"+
		"\x2\x2\x2\x26B+\x3\x2\x2\x2\x26C\x26A\x3\x2\x2\x2\x26D\x26F\x5\x102\x82"+
		"\x2\x26E\x270\x5\x118\x8D\x2\x26F\x26E\x3\x2\x2\x2\x26F\x270\x3\x2\x2"+
		"\x2\x270\x273\x3\x2\x2\x2\x271\x272\a\xD9\x2\x2\x272\x274\x5\x104\x83"+
		"\x2\x273\x271\x3\x2\x2\x2\x273\x274\x3\x2\x2\x2\x274\x276\x3\x2\x2\x2"+
		"\x275\x277\a\xD9\x2\x2\x276\x275\x3\x2\x2\x2\x276\x277\x3\x2\x2\x2\x277"+
		"\x278\x3\x2\x2\x2\x278\x27A\a\xBF\x2\x2\x279\x27B\a\xD9\x2\x2\x27A\x279"+
		"\x3\x2\x2\x2\x27A\x27B\x3\x2\x2\x2\x27B\x27C\x3\x2\x2\x2\x27C\x27D\x5"+
		"\xC8\x65\x2\x27D-\x3\x2\x2\x2\x27E\x280\a$\x2\x2\x27F\x281\a\xD9\x2\x2"+
		"\x280\x27F\x3\x2\x2\x2\x280\x281\x3\x2\x2\x2\x281\x282\x3\x2\x2\x2\x282"+
		"\x284\a\xBF\x2\x2\x283\x285\a\xD9\x2\x2\x284\x283\x3\x2\x2\x2\x284\x285"+
		"\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2\x286\x287\x5\xC8\x65\x2\x287/\x3\x2"+
		"\x2\x2\x288\x289\x5\x11A\x8E\x2\x289\x28A\a\xD9\x2\x2\x28A\x28C\x3\x2"+
		"\x2\x2\x28B\x288\x3\x2\x2\x2\x28B\x28C\x3\x2\x2\x2\x28C\x28D\x3\x2\x2"+
		"\x2\x28D\x28E\a%\x2\x2\x28E\x291\a\xD9\x2\x2\x28F\x290\a\x8A\x2\x2\x290"+
		"\x292\a\xD9\x2\x2\x291\x28F\x3\x2\x2\x2\x291\x292\x3\x2\x2\x2\x292\x293"+
		"\x3\x2\x2\x2\x293\x294\t\x3\x2\x2\x294\x295\a\xD9\x2\x2\x295\x296\x5\x102"+
		"\x82\x2\x296\x297\a\xD9\x2\x2\x297\x298\a\x63\x2\x2\x298\x299\a\xD9\x2"+
		"\x2\x299\x29E\a\xCF\x2\x2\x29A\x29B\a\xD9\x2\x2\x29B\x29C\a\xE\x2\x2\x29C"+
		"\x29D\a\xD9\x2\x2\x29D\x29F\a\xCF\x2\x2\x29E\x29A\x3\x2\x2\x2\x29E\x29F"+
		"\x3\x2\x2\x2\x29F\x2A4\x3\x2\x2\x2\x2A0\x2A2\a\xD9\x2\x2\x2A1\x2A0\x3"+
		"\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2A5\x5\xF8"+
		"}\x2\x2A4\x2A1\x3\x2\x2\x2\x2A4\x2A5\x3\x2\x2\x2\x2A5\x2A8\x3\x2\x2\x2"+
		"\x2A6\x2A7\a\xD9\x2\x2\x2A7\x2A9\x5\x104\x83\x2\x2A8\x2A6\x3\x2\x2\x2"+
		"\x2A8\x2A9\x3\x2\x2\x2\x2A9\x31\x3\x2\x2\x2\x2AA\x2AB\t\x4\x2\x2\x2AB"+
		"\x2AC\a\xD9\x2\x2\x2AC\x2B7\x5\x110\x89\x2\x2AD\x2AF\a\xD9\x2\x2\x2AE"+
		"\x2AD\x3\x2\x2\x2\x2AE\x2AF\x3\x2\x2\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0\x2B2"+
		"\a\n\x2\x2\x2B1\x2B3\a\xD9\x2\x2\x2B2\x2B1\x3\x2\x2\x2\x2B2\x2B3\x3\x2"+
		"\x2\x2\x2B3\x2B4\x3\x2\x2\x2\x2B4\x2B6\x5\x110\x89\x2\x2B5\x2AE\x3\x2"+
		"\x2\x2\x2B6\x2B9\x3\x2\x2\x2\x2B7\x2B5\x3\x2\x2\x2\x2B7\x2B8\x3\x2\x2"+
		"\x2\x2B8\x33\x3\x2\x2\x2\x2B9\x2B7\x3\x2\x2\x2\x2BA\x2BB\a\x32\x2\x2\x2BB"+
		"\x2BC\a\xD9\x2\x2\x2BC\x2BE\x5\xC8\x65\x2\x2BD\x2BF\a\xD9\x2\x2\x2BE\x2BD"+
		"\x3\x2\x2\x2\x2BE\x2BF\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2\x2\x2C0\x2C2\a\n"+
		"\x2\x2\x2C1\x2C3\a\xD9\x2\x2\x2C2\x2C1\x3\x2\x2\x2\x2C2\x2C3\x3\x2\x2"+
		"\x2\x2C3\x2C4\x3\x2\x2\x2\x2C4\x2CD\x5\xC8\x65\x2\x2C5\x2C7\a\xD9\x2\x2"+
		"\x2C6\x2C5\x3\x2\x2\x2\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2C8\x3\x2\x2\x2\x2C8"+
		"\x2CA\a\n\x2\x2\x2C9\x2CB\a\xD9\x2\x2\x2CA\x2C9\x3\x2\x2\x2\x2CA\x2CB"+
		"\x3\x2\x2\x2\x2CB\x2CC\x3\x2\x2\x2\x2CC\x2CE\x5\xC8\x65\x2\x2CD\x2C6\x3"+
		"\x2\x2\x2\x2CD\x2CE\x3\x2\x2\x2\x2CE\x35\x3\x2\x2\x2\x2CF\x2D1\a\x34\x2"+
		"\x2\x2D0\x2D2\a\xD7\x2\x2\x2D1\x2D0\x3\x2\x2\x2\x2D2\x2D3\x3\x2\x2\x2"+
		"\x2D3\x2D1\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2\x2D4\x2DB\x3\x2\x2\x2\x2D5"+
		"\x2D7\x5\x1C\xF\x2\x2D6\x2D8\a\xD7\x2\x2\x2D7\x2D6\x3\x2\x2\x2\x2D8\x2D9"+
		"\x3\x2\x2\x2\x2D9\x2D7\x3\x2\x2\x2\x2D9\x2DA\x3\x2\x2\x2\x2DA\x2DC\x3"+
		"\x2\x2\x2\x2DB\x2D5\x3\x2\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC\x2DD\x3\x2"+
		"\x2\x2\x2DD\x305\a`\x2\x2\x2DE\x2DF\a\x34\x2\x2\x2DF\x2E0\a\xD9\x2\x2"+
		"\x2E0\x2E1\t\x5\x2\x2\x2E1\x2E2\a\xD9\x2\x2\x2E2\x2E4\x5\xC8\x65\x2\x2E3"+
		"\x2E5\a\xD7\x2\x2\x2E4\x2E3\x3\x2\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6\x2E4"+
		"\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7\x2EE\x3\x2\x2\x2\x2E8\x2EA\x5"+
		"\x1C\xF\x2\x2E9\x2EB\a\xD7\x2\x2\x2EA\x2E9\x3\x2\x2\x2\x2EB\x2EC\x3\x2"+
		"\x2\x2\x2EC\x2EA\x3\x2\x2\x2\x2EC\x2ED\x3\x2\x2\x2\x2ED\x2EF\x3\x2\x2"+
		"\x2\x2EE\x2E8\x3\x2\x2\x2\x2EE\x2EF\x3\x2\x2\x2\x2EF\x2F0\x3\x2\x2\x2"+
		"\x2F0\x2F1\a`\x2\x2\x2F1\x305\x3\x2\x2\x2\x2F2\x2F4\a\x34\x2\x2\x2F3\x2F5"+
		"\a\xD7\x2\x2\x2F4\x2F3\x3\x2\x2\x2\x2F5\x2F6\x3\x2\x2\x2\x2F6\x2F4\x3"+
		"\x2\x2\x2\x2F6\x2F7\x3\x2\x2\x2\x2F7\x2F8\x3\x2\x2\x2\x2F8\x2FA\x5\x1C"+
		"\xF\x2\x2F9\x2FB\a\xD7\x2\x2\x2FA\x2F9\x3\x2\x2\x2\x2FB\x2FC\x3\x2\x2"+
		"\x2\x2FC\x2FA\x3\x2\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2"+
		"\x2FE\x2FF\a`\x2\x2\x2FF\x300\a\xD9\x2\x2\x300\x301\t\x5\x2\x2\x301\x302"+
		"\a\xD9\x2\x2\x302\x303\x5\xC8\x65\x2\x303\x305\x3\x2\x2\x2\x304\x2CF\x3"+
		"\x2\x2\x2\x304\x2DE\x3\x2\x2\x2\x304\x2F2\x3\x2\x2\x2\x305\x37\x3\x2\x2"+
		"\x2\x306\x307\a\x41\x2\x2\x307\x39\x3\x2\x2\x2\x308\x309\x5\x11A\x8E\x2"+
		"\x309\x30A\a\xD9\x2\x2\x30A\x30C\x3\x2\x2\x2\x30B\x308\x3\x2\x2\x2\x30B"+
		"\x30C\x3\x2\x2\x2\x30C\x30D\x3\x2\x2\x2\x30D\x30E\a\x42\x2\x2\x30E\x30F"+
		"\a\xD9\x2\x2\x30F\x311\x5\x102\x82\x2\x310\x312\a\xD7\x2\x2\x311\x310"+
		"\x3\x2\x2\x2\x312\x313\x3\x2\x2\x2\x313\x311\x3\x2\x2\x2\x313\x314\x3"+
		"\x2\x2\x2\x314\x318\x3\x2\x2\x2\x315\x317\x5<\x1F\x2\x316\x315\x3\x2\x2"+
		"\x2\x317\x31A\x3\x2\x2\x2\x318\x316\x3\x2\x2\x2\x318\x319\x3\x2\x2\x2"+
		"\x319\x31B\x3\x2\x2\x2\x31A\x318\x3\x2\x2\x2\x31B\x31C\a\x39\x2\x2\x31C"+
		";\x3\x2\x2\x2\x31D\x326\x5\x102\x82\x2\x31E\x320\a\xD9\x2\x2\x31F\x31E"+
		"\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320\x321\x3\x2\x2\x2\x321\x323\a\xBF"+
		"\x2\x2\x322\x324\a\xD9\x2\x2\x323\x322\x3\x2\x2\x2\x323\x324\x3\x2\x2"+
		"\x2\x324\x325\x3\x2\x2\x2\x325\x327\x5\xC8\x65\x2\x326\x31F\x3\x2\x2\x2"+
		"\x326\x327\x3\x2\x2\x2\x327\x329\x3\x2\x2\x2\x328\x32A\a\xD7\x2\x2\x329"+
		"\x328\x3\x2\x2\x2\x32A\x32B\x3\x2\x2\x2\x32B\x329\x3\x2\x2\x2\x32B\x32C"+
		"\x3\x2\x2\x2\x32C=\x3\x2\x2\x2\x32D\x32E\a\x44\x2\x2\x32E\x32F\a\xD9\x2"+
		"\x2\x32F\x330\x5\xC8\x65\x2\x330?\x3\x2\x2\x2\x331\x332\a\x45\x2\x2\x332"+
		"\x333\a\xD9\x2\x2\x333\x334\x5\xC8\x65\x2\x334\x41\x3\x2\x2\x2\x335\x336"+
		"\x5\x11A\x8E\x2\x336\x337\a\xD9\x2\x2\x337\x339\x3\x2\x2\x2\x338\x335"+
		"\x3\x2\x2\x2\x338\x339\x3\x2\x2\x2\x339\x33A\x3\x2\x2\x2\x33A\x33B\a\x46"+
		"\x2\x2\x33B\x33C\a\xD9\x2\x2\x33C\x33E\x5\x102\x82\x2\x33D\x33F\a\xD9"+
		"\x2\x2\x33E\x33D\x3\x2\x2\x2\x33E\x33F\x3\x2\x2\x2\x33F\x340\x3\x2\x2"+
		"\x2\x340\x341\x5\xF8}\x2\x341\x43\x3\x2\x2\x2\x342\x343\t\x6\x2\x2\x343"+
		"\x45\x3\x2\x2\x2\x344\x345\aM\x2\x2\x345\x346\a\xD9\x2\x2\x346\x348\x5"+
		"\xC8\x65\x2\x347\x349\a\xD9\x2\x2\x348\x347\x3\x2\x2\x2\x348\x349\x3\x2"+
		"\x2\x2\x349\x34A\x3\x2\x2\x2\x34A\x34C\a\n\x2\x2\x34B\x34D\a\xD9\x2\x2"+
		"\x34C\x34B\x3\x2\x2\x2\x34C\x34D\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E"+
		"\x34F\x5\xC8\x65\x2\x34FG\x3\x2\x2\x2\x350\x351\aO\x2\x2\x351\x352\a\xD9"+
		"\x2\x2\x352\x353\a\x36\x2\x2\x353\x354\a\xD9\x2\x2\x354\x356\x5\x102\x82"+
		"\x2\x355\x357\x5\x118\x8D\x2\x356\x355\x3\x2\x2\x2\x356\x357\x3\x2\x2"+
		"\x2\x357\x358\x3\x2\x2\x2\x358\x359\a\xD9\x2\x2\x359\x35A\aX\x2\x2\x35A"+
		"\x35B\a\xD9\x2\x2\x35B\x35D\x5\xC8\x65\x2\x35C\x35E\a\xD7\x2\x2\x35D\x35C"+
		"\x3\x2\x2\x2\x35E\x35F\x3\x2\x2\x2\x35F\x35D\x3\x2\x2\x2\x35F\x360\x3"+
		"\x2\x2\x2\x360\x367\x3\x2\x2\x2\x361\x363\x5\x1C\xF\x2\x362\x364\a\xD7"+
		"\x2\x2\x363\x362\x3\x2\x2\x2\x364\x365\x3\x2\x2\x2\x365\x363\x3\x2\x2"+
		"\x2\x365\x366\x3\x2\x2\x2\x366\x368\x3\x2\x2\x2\x367\x361\x3\x2\x2\x2"+
		"\x367\x368\x3\x2\x2\x2\x368\x369\x3\x2\x2\x2\x369\x36C\at\x2\x2\x36A\x36B"+
		"\a\xD9\x2\x2\x36B\x36D\x5\x102\x82\x2\x36C\x36A\x3\x2\x2\x2\x36C\x36D"+
		"\x3\x2\x2\x2\x36DI\x3\x2\x2\x2\x36E\x36F\aO\x2\x2\x36F\x370\a\xD9\x2\x2"+
		"\x370\x372\x5\x102\x82\x2\x371\x373\x5\x118\x8D\x2\x372\x371\x3\x2\x2"+
		"\x2\x372\x373\x3\x2\x2\x2\x373\x376\x3\x2\x2\x2\x374\x375\a\xD9\x2\x2"+
		"\x375\x377\x5\x104\x83\x2\x376\x374\x3\x2\x2\x2\x376\x377\x3\x2\x2\x2"+
		"\x377\x379\x3\x2\x2\x2\x378\x37A\a\xD9\x2\x2\x379\x378\x3\x2\x2\x2\x379"+
		"\x37A\x3\x2\x2\x2\x37A\x37B\x3\x2\x2\x2\x37B\x37D\a\xBF\x2\x2\x37C\x37E"+
		"\a\xD9\x2\x2\x37D\x37C\x3\x2\x2\x2\x37D\x37E\x3\x2\x2\x2\x37E\x37F\x3"+
		"\x2\x2\x2\x37F\x380\x5\xC8\x65\x2\x380\x381\a\xD9\x2\x2\x381\x382\a\xAC"+
		"\x2\x2\x382\x383\a\xD9\x2\x2\x383\x388\x5\xC8\x65\x2\x384\x385\a\xD9\x2"+
		"\x2\x385\x386\a\xA4\x2\x2\x386\x387\a\xD9\x2\x2\x387\x389\x5\xC8\x65\x2"+
		"\x388\x384\x3\x2\x2\x2\x388\x389\x3\x2\x2\x2\x389\x38B\x3\x2\x2\x2\x38A"+
		"\x38C\a\xD7\x2\x2\x38B\x38A\x3\x2\x2\x2\x38C\x38D\x3\x2\x2\x2\x38D\x38B"+
		"\x3\x2\x2\x2\x38D\x38E\x3\x2\x2\x2\x38E\x395\x3\x2\x2\x2\x38F\x391\x5"+
		"\x1C\xF\x2\x390\x392\a\xD7\x2\x2\x391\x390\x3\x2\x2\x2\x392\x393\x3\x2"+
		"\x2\x2\x393\x391\x3\x2\x2\x2\x393\x394\x3\x2\x2\x2\x394\x396\x3\x2\x2"+
		"\x2\x395\x38F\x3\x2\x2\x2\x395\x396\x3\x2\x2\x2\x396\x397\x3\x2\x2\x2"+
		"\x397\x39A\at\x2\x2\x398\x399\a\xD9\x2\x2\x399\x39B\x5\x102\x82\x2\x39A"+
		"\x398\x3\x2\x2\x2\x39A\x39B\x3\x2\x2\x2\x39BK\x3\x2\x2\x2\x39C\x39D\x5"+
		"\x11A\x8E\x2\x39D\x39E\a\xD9\x2\x2\x39E\x3A0\x3\x2\x2\x2\x39F\x39C\x3"+
		"\x2\x2\x2\x39F\x3A0\x3\x2\x2\x2\x3A0\x3A3\x3\x2\x2\x2\x3A1\x3A2\a\xA3"+
		"\x2\x2\x3A2\x3A4\a\xD9\x2\x2\x3A3\x3A1\x3\x2\x2\x2\x3A3\x3A4\x3\x2\x2"+
		"\x2\x3A4\x3A5\x3\x2\x2\x2\x3A5\x3A6\aP\x2\x2\x3A6\x3A7\a\xD9\x2\x2\x3A7"+
		"\x3AC\x5\x102\x82\x2\x3A8\x3AA\a\xD9\x2\x2\x3A9\x3A8\x3\x2\x2\x2\x3A9"+
		"\x3AA\x3\x2\x2\x2\x3AA\x3AB\x3\x2\x2\x2\x3AB\x3AD\x5\xF8}\x2\x3AC\x3A9"+
		"\x3\x2\x2\x2\x3AC\x3AD\x3\x2\x2\x2\x3AD\x3B0\x3\x2\x2\x2\x3AE\x3AF\a\xD9"+
		"\x2\x2\x3AF\x3B1\x5\x104\x83\x2\x3B0\x3AE\x3\x2\x2\x2\x3B0\x3B1\x3\x2"+
		"\x2\x2\x3B1\x3B3\x3\x2\x2\x2\x3B2\x3B4\a\xD7\x2\x2\x3B3\x3B2\x3\x2\x2"+
		"\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x3B3\x3\x2\x2\x2\x3B5\x3B6\x3\x2\x2\x2"+
		"\x3B6\x3BD\x3\x2\x2\x2\x3B7\x3B9\x5\x1C\xF\x2\x3B8\x3BA\a\xD7\x2\x2\x3B9"+
		"\x3B8\x3\x2\x2\x2\x3BA\x3BB\x3\x2\x2\x2\x3BB\x3B9\x3\x2\x2\x2\x3BB\x3BC"+
		"\x3\x2\x2\x2\x3BC\x3BE\x3\x2\x2\x2\x3BD\x3B7\x3\x2\x2\x2\x3BD\x3BE\x3"+
		"\x2\x2\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF\x3C0\a:\x2\x2\x3C0M\x3\x2\x2\x2\x3C1"+
		"\x3C2\aQ\x2\x2\x3C2\x3C3\a\xD9\x2\x2\x3C3\x3C5\x5\xC8\x65\x2\x3C4\x3C6"+
		"\a\xD9\x2\x2\x3C5\x3C4\x3\x2\x2\x2\x3C5\x3C6\x3\x2\x2\x2\x3C6\x3C7\x3"+
		"\x2\x2\x2\x3C7\x3C9\a\n\x2\x2\x3C8\x3CA\a\xD9\x2\x2\x3C9\x3C8\x3\x2\x2"+
		"\x2\x3C9\x3CA\x3\x2\x2\x2\x3CA\x3CC\x3\x2\x2\x2\x3CB\x3CD\x5\xC8\x65\x2"+
		"\x3CC\x3CB\x3\x2\x2\x2\x3CC\x3CD\x3\x2\x2\x2\x3CD\x3CF\x3\x2\x2\x2\x3CE"+
		"\x3D0\a\xD9\x2\x2\x3CF\x3CE\x3\x2\x2\x2\x3CF\x3D0\x3\x2\x2\x2\x3D0\x3D1"+
		"\x3\x2\x2\x2\x3D1\x3D3\a\n\x2\x2\x3D2\x3D4\a\xD9\x2\x2\x3D3\x3D2\x3\x2"+
		"\x2\x2\x3D3\x3D4\x3\x2\x2\x2\x3D4\x3D5\x3\x2\x2\x2\x3D5\x3D6\x5\xC8\x65"+
		"\x2\x3D6O\x3\x2\x2\x2\x3D7\x3D8\aS\x2\x2\x3D8\x3D9\a\xD9\x2\x2\x3D9\x3DA"+
		"\x5\xC8\x65\x2\x3DAQ\x3\x2\x2\x2\x3DB\x3DC\aT\x2\x2\x3DC\x3DD\a\xD9\x2"+
		"\x2\x3DD\x3DE\x5\xC8\x65\x2\x3DES\x3\x2\x2\x2\x3DF\x3E0\aU\x2\x2\x3E0"+
		"\x3E1\a\xD9\x2\x2\x3E1\x3E2\x5X-\x2\x3E2\x3E3\a\xD9\x2\x2\x3E3\x3E4\a"+
		"\xAA\x2\x2\x3E4\x3E5\a\xD9\x2\x2\x3E5\x3EA\x5\x1E\x10\x2\x3E6\x3E7\a\xD9"+
		"\x2\x2\x3E7\x3E8\a\x37\x2\x2\x3E8\x3E9\a\xD9\x2\x2\x3E9\x3EB\x5\x1E\x10"+
		"\x2\x3EA\x3E6\x3\x2\x2\x2\x3EA\x3EB\x3\x2\x2\x2\x3EB\x3F9\x3\x2\x2\x2"+
		"\x3EC\x3F0\x5V,\x2\x3ED\x3EF\x5Z.\x2\x3EE\x3ED\x3\x2\x2\x2\x3EF\x3F2\x3"+
		"\x2\x2\x2\x3F0\x3EE\x3\x2\x2\x2\x3F0\x3F1\x3\x2\x2\x2\x3F1\x3F4\x3\x2"+
		"\x2\x2\x3F2\x3F0\x3\x2\x2\x2\x3F3\x3F5\x5\\/\x2\x3F4\x3F3\x3\x2\x2\x2"+
		"\x3F4\x3F5\x3\x2\x2\x2\x3F5\x3F6\x3\x2\x2\x2\x3F6\x3F7\a;\x2\x2\x3F7\x3F9"+
		"\x3\x2\x2\x2\x3F8\x3DF\x3\x2\x2\x2\x3F8\x3EC\x3\x2\x2\x2\x3F9U\x3\x2\x2"+
		"\x2\x3FA\x3FB\aU\x2\x2\x3FB\x3FC\a\xD9\x2\x2\x3FC\x3FD\x5X-\x2\x3FD\x3FE"+
		"\a\xD9\x2\x2\x3FE\x400\a\xAA\x2\x2\x3FF\x401\a\xD7\x2\x2\x400\x3FF\x3"+
		"\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x400\x3\x2\x2\x2\x402\x403\x3\x2"+
		"\x2\x2\x403\x40A\x3\x2\x2\x2\x404\x406\x5\x1C\xF\x2\x405\x407\a\xD7\x2"+
		"\x2\x406\x405\x3\x2\x2\x2\x407\x408\x3\x2\x2\x2\x408\x406\x3\x2\x2\x2"+
		"\x408\x409\x3\x2\x2\x2\x409\x40B\x3\x2\x2\x2\x40A\x404\x3\x2\x2\x2\x40A"+
		"\x40B\x3\x2\x2\x2\x40BW\x3\x2\x2\x2\x40C\x40D\x5\xC8\x65\x2\x40DY\x3\x2"+
		"\x2\x2\x40E\x40F\a\x38\x2\x2\x40F\x410\a\xD9\x2\x2\x410\x411\x5X-\x2\x411"+
		"\x412\a\xD9\x2\x2\x412\x414\a\xAA\x2\x2\x413\x415\a\xD7\x2\x2\x414\x413"+
		"\x3\x2\x2\x2\x415\x416\x3\x2\x2\x2\x416\x414\x3\x2\x2\x2\x416\x417\x3"+
		"\x2\x2\x2\x417\x41E\x3\x2\x2\x2\x418\x41A\x5\x1C\xF\x2\x419\x41B\a\xD7"+
		"\x2\x2\x41A\x419\x3\x2\x2\x2\x41B\x41C\x3\x2\x2\x2\x41C\x41A\x3\x2\x2"+
		"\x2\x41C\x41D\x3\x2\x2\x2\x41D\x41F\x3\x2\x2\x2\x41E\x418\x3\x2\x2\x2"+
		"\x41E\x41F\x3\x2\x2\x2\x41F[\x3\x2\x2\x2\x420\x422\a\x37\x2\x2\x421\x423"+
		"\a\xD7\x2\x2\x422\x421\x3\x2\x2\x2\x423\x424\x3\x2\x2\x2\x424\x422\x3"+
		"\x2\x2\x2\x424\x425\x3\x2\x2\x2\x425\x42C\x3\x2\x2\x2\x426\x428\x5\x1C"+
		"\xF\x2\x427\x429\a\xD7\x2\x2\x428\x427\x3\x2\x2\x2\x429\x42A\x3\x2\x2"+
		"\x2\x42A\x428\x3\x2\x2\x2\x42A\x42B\x3\x2\x2\x2\x42B\x42D\x3\x2\x2\x2"+
		"\x42C\x426\x3\x2\x2\x2\x42C\x42D\x3\x2\x2\x2\x42D]\x3\x2\x2\x2\x42E\x42F"+
		"\aW\x2\x2\x42F\x430\a\xD9\x2\x2\x430\x431\x5\x102\x82\x2\x431_\x3\x2\x2"+
		"\x2\x432\x433\aY\x2\x2\x433\x434\a\xD9\x2\x2\x434\x43D\x5\xD8m\x2\x435"+
		"\x437\a\xD9\x2\x2\x436\x435\x3\x2\x2\x2\x436\x437\x3\x2\x2\x2\x437\x438"+
		"\x3\x2\x2\x2\x438\x43A\a\n\x2\x2\x439\x43B\a\xD9\x2\x2\x43A\x439\x3\x2"+
		"\x2\x2\x43A\x43B\x3\x2\x2\x2\x43B\x43C\x3\x2\x2\x2\x43C\x43E\x5\xC8\x65"+
		"\x2\x43D\x436\x3\x2\x2\x2\x43E\x43F\x3\x2\x2\x2\x43F\x43D\x3\x2\x2\x2"+
		"\x43F\x440\x3\x2\x2\x2\x440\x61\x3\x2\x2\x2\x441\x442\a\\\x2\x2\x442\x443"+
		"\a\xD9\x2\x2\x443\x444\x5\xC8\x65\x2\x444\x63\x3\x2\x2\x2\x445\x446\a"+
		"\x62\x2\x2\x446\x448\a\xD9\x2\x2\x447\x445\x3\x2\x2\x2\x447\x448\x3\x2"+
		"\x2\x2\x448\x449\x3\x2\x2\x2\x449\x44B\x5\xE6t\x2\x44A\x44C\a\xD9\x2\x2"+
		"\x44B\x44A\x3\x2\x2\x2\x44B\x44C\x3\x2\x2\x2\x44C\x44D\x3\x2\x2\x2\x44D"+
		"\x44F\t\a\x2\x2\x44E\x450\a\xD9\x2\x2\x44F\x44E\x3\x2\x2\x2\x44F\x450"+
		"\x3\x2\x2\x2\x450\x451\x3\x2\x2\x2\x451\x452\x5\xC8\x65\x2\x452\x65\x3"+
		"\x2\x2\x2\x453\x454\a\x65\x2\x2\x454\x455\a\xD9\x2\x2\x455\x457\x5\xD8"+
		"m\x2\x456\x458\a\xD9\x2\x2\x457\x456\x3\x2\x2\x2\x457\x458\x3\x2\x2\x2"+
		"\x458\x459\x3\x2\x2\x2\x459\x45B\a\n\x2\x2\x45A\x45C\a\xD9\x2\x2\x45B"+
		"\x45A\x3\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\x45D\x3\x2\x2\x2\x45D\x45E"+
		"\x5\xC8\x65\x2\x45Eg\x3\x2\x2\x2\x45F\x460\a]\x2\x2\x460\x461\a\xD9\x2"+
		"\x2\x461\x462\x5\xC8\x65\x2\x462i\x3\x2\x2\x2\x463\x464\a^\x2\x2\x464"+
		"\x465\a\xD9\x2\x2\x465\x474\x5\xC8\x65\x2\x466\x468\a\xD9\x2\x2\x467\x466"+
		"\x3\x2\x2\x2\x467\x468\x3\x2\x2\x2\x468\x469\x3\x2\x2\x2\x469\x46B\a\n"+
		"\x2\x2\x46A\x46C\a\xD9\x2\x2\x46B\x46A\x3\x2\x2\x2\x46B\x46C\x3\x2\x2"+
		"\x2\x46C\x46D\x3\x2\x2\x2\x46D\x472\x5\xC8\x65\x2\x46E\x46F\a\xD9\x2\x2"+
		"\x46F\x470\a\xAC\x2\x2\x470\x471\a\xD9\x2\x2\x471\x473\x5\xC8\x65\x2\x472"+
		"\x46E\x3\x2\x2\x2\x472\x473\x3\x2\x2\x2\x473\x475\x3\x2\x2\x2\x474\x467"+
		"\x3\x2\x2\x2\x474\x475\x3\x2\x2\x2\x475k\x3\x2\x2\x2\x476\x477\ai\x2\x2"+
		"\x477\x478\a\xD9\x2\x2\x478\x47A\x5\xE6t\x2\x479\x47B\a\xD9\x2\x2\x47A"+
		"\x479\x3\x2\x2\x2\x47A\x47B\x3\x2\x2\x2\x47B\x47C\x3\x2\x2\x2\x47C\x47E"+
		"\a\xBF\x2\x2\x47D\x47F\a\xD9\x2\x2\x47E\x47D\x3\x2\x2\x2\x47E\x47F\x3"+
		"\x2\x2\x2\x47F\x480\x3\x2\x2\x2\x480\x481\x5\xC8\x65\x2\x481m\x3\x2\x2"+
		"\x2\x482\x484\aj\x2\x2\x483\x485\a\xD9\x2\x2\x484\x483\x3\x2\x2\x2\x484"+
		"\x485\x3\x2\x2\x2\x485\x486\x3\x2\x2\x2\x486\x488\x5\x102\x82\x2\x487"+
		"\x489\a\xD9\x2\x2\x488\x487\x3\x2\x2\x2\x488\x489\x3\x2\x2\x2\x489\x48A"+
		"\x3\x2\x2\x2\x48A\x48C\a\xBF\x2\x2\x48B\x48D\a\xD9\x2\x2\x48C\x48B\x3"+
		"\x2\x2\x2\x48C\x48D\x3\x2\x2\x2\x48D\x48E\x3\x2\x2\x2\x48E\x48F\x5\xC8"+
		"\x65\x2\x48Fo\x3\x2\x2\x2\x490\x494\x5r:\x2\x491\x493\x5t;\x2\x492\x491"+
		"\x3\x2\x2\x2\x493\x496\x3\x2\x2\x2\x494\x492\x3\x2\x2\x2\x494\x495\x3"+
		"\x2\x2\x2\x495\x498\x3\x2\x2\x2\x496\x494\x3\x2\x2\x2\x497\x499\x5v<\x2"+
		"\x498\x497\x3\x2\x2\x2\x498\x499\x3\x2\x2\x2\x499\x49A\x3\x2\x2\x2\x49A"+
		"\x49B\an\x2\x2\x49Bq\x3\x2\x2\x2\x49C\x49E\ak\x2\x2\x49D\x49F\a\xD9\x2"+
		"\x2\x49E\x49D\x3\x2\x2\x2\x49E\x49F\x3\x2\x2\x2\x49F\x4A0\x3\x2\x2\x2"+
		"\x4A0\x4A1\x5X-\x2\x4A1\x4A2\a\xD9\x2\x2\x4A2\x4A4\a\xAA\x2\x2\x4A3\x4A5"+
		"\a\xD7\x2\x2\x4A4\x4A3\x3\x2\x2\x2\x4A5\x4A6\x3\x2\x2\x2\x4A6\x4A4\x3"+
		"\x2\x2\x2\x4A6\x4A7\x3\x2\x2\x2\x4A7\x4AE\x3\x2\x2\x2\x4A8\x4AA\x5\x14"+
		"\v\x2\x4A9\x4AB\a\xD7\x2\x2\x4AA\x4A9\x3\x2\x2\x2\x4AB\x4AC\x3\x2\x2\x2"+
		"\x4AC\x4AA\x3\x2\x2\x2\x4AC\x4AD\x3\x2\x2\x2\x4AD\x4AF\x3\x2\x2\x2\x4AE"+
		"\x4A8\x3\x2\x2\x2\x4AE\x4AF\x3\x2\x2\x2\x4AFs\x3\x2\x2\x2\x4B0\x4B2\a"+
		"l\x2\x2\x4B1\x4B3\a\xD9\x2\x2\x4B2\x4B1\x3\x2\x2\x2\x4B2\x4B3\x3\x2\x2"+
		"\x2\x4B3\x4B4\x3\x2\x2\x2\x4B4\x4B5\x5X-\x2\x4B5\x4B6\a\xD9\x2\x2\x4B6"+
		"\x4B8\a\xAA\x2\x2\x4B7\x4B9\a\xD7\x2\x2\x4B8\x4B7\x3\x2\x2\x2\x4B9\x4BA"+
		"\x3\x2\x2\x2\x4BA\x4B8\x3\x2\x2\x2\x4BA\x4BB\x3\x2\x2\x2\x4BB\x4C2\x3"+
		"\x2\x2\x2\x4BC\x4BE\x5\x14\v\x2\x4BD\x4BF\a\xD7\x2\x2\x4BE\x4BD\x3\x2"+
		"\x2\x2\x4BF\x4C0\x3\x2\x2\x2\x4C0\x4BE\x3\x2\x2\x2\x4C0\x4C1\x3\x2\x2"+
		"\x2\x4C1\x4C3\x3\x2\x2\x2\x4C2\x4BC\x3\x2\x2\x2\x4C2\x4C3\x3\x2\x2\x2"+
		"\x4C3u\x3\x2\x2\x2\x4C4\x4C6\am\x2\x2\x4C5\x4C7\a\xD7\x2\x2\x4C6\x4C5"+
		"\x3\x2\x2\x2\x4C7\x4C8\x3\x2\x2\x2\x4C8\x4C6\x3\x2\x2\x2\x4C8\x4C9\x3"+
		"\x2\x2\x2\x4C9\x4D0\x3\x2\x2\x2\x4CA\x4CC\x5\x14\v\x2\x4CB\x4CD\a\xD7"+
		"\x2\x2\x4CC\x4CB\x3\x2\x2\x2\x4CD\x4CE\x3\x2\x2\x2\x4CE\x4CC\x3\x2\x2"+
		"\x2\x4CE\x4CF\x3\x2\x2\x2\x4CF\x4D1\x3\x2\x2\x2\x4D0\x4CA\x3\x2\x2\x2"+
		"\x4D0\x4D1\x3\x2\x2\x2\x4D1w\x3\x2\x2\x2\x4D2\x4D4\ap\x2\x2\x4D3\x4D5"+
		"\a\xD9\x2\x2\x4D4\x4D3\x3\x2\x2\x2\x4D4\x4D5\x3\x2\x2\x2\x4D5\x4D6\x3"+
		"\x2\x2\x2\x4D6\x4D8\a\xC3\x2\x2\x4D7\x4D9\a\xD9\x2\x2\x4D8\x4D7\x3\x2"+
		"\x2\x2\x4D8\x4D9\x3\x2\x2\x2\x4D9\x4DA\x3\x2\x2\x2\x4DA\x4DC\x5\xF2z\x2"+
		"\x4DB\x4DD\a\xD9\x2\x2\x4DC\x4DB\x3\x2\x2\x2\x4DC\x4DD\x3\x2\x2\x2\x4DD"+
		"\x4DE\x3\x2\x2\x2\x4DE\x4DF\a\xCC\x2\x2\x4DFy\x3\x2\x2\x2\x4E0\x4E1\a"+
		"q\x2\x2\x4E1\x4E2\a\xD9\x2\x2\x4E2\x4E3\x5\xC8\x65\x2\x4E3{\x3\x2\x2\x2"+
		"\x4E4\x4E5\as\x2\x2\x4E5\x4E6\a\xD9\x2\x2\x4E6\x4E7\x5\xC8\x65\x2\x4E7"+
		"\x4E8\a\xD9\x2\x2\x4E8\x4E9\a\x13\x2\x2\x4E9\x4EA\a\xD9\x2\x2\x4EA\x4EB"+
		"\x5\xC8\x65\x2\x4EB}\x3\x2\x2\x2\x4EC\x4ED\az\x2\x2\x4ED\x4F4\a\xD9\x2"+
		"\x2\x4EE\x4EF\aT\x2\x2\x4EF\x4F0\a\xD9\x2\x2\x4F0\x4F5\x5\xC8\x65\x2\x4F1"+
		"\x4F2\a\x95\x2\x2\x4F2\x4F3\a\xD9\x2\x2\x4F3\x4F5\at\x2\x2\x4F4\x4EE\x3"+
		"\x2\x2\x2\x4F4\x4F1\x3\x2\x2\x2\x4F5\x7F\x3\x2\x2\x2\x4F6\x4F7\ay\x2\x2"+
		"\x4F7\x4F8\a\xD9\x2\x2\x4F8\x4F9\x5\xC8\x65\x2\x4F9\x4FA\a\xD9\x2\x2\x4FA"+
		"\x4FB\aT\x2\x2\x4FB\x4FC\a\xD9\x2\x2\x4FC\x507\x5\xC8\x65\x2\x4FD\x4FF"+
		"\a\xD9\x2\x2\x4FE\x4FD\x3\x2\x2\x2\x4FE\x4FF\x3\x2\x2\x2\x4FF\x500\x3"+
		"\x2\x2\x2\x500\x502\a\n\x2\x2\x501\x503\a\xD9\x2\x2\x502\x501\x3\x2\x2"+
		"\x2\x502\x503\x3\x2\x2\x2\x503\x504\x3\x2\x2\x2\x504\x506\x5\xC8\x65\x2"+
		"\x505\x4FE\x3\x2\x2\x2\x506\x509\x3\x2\x2\x2\x507\x505\x3\x2\x2\x2\x507"+
		"\x508\x3\x2\x2\x2\x508\x81\x3\x2\x2\x2\x509\x507\x3\x2\x2\x2\x50A\x50B"+
		"\ay\x2\x2\x50B\x50C\a\xD9\x2\x2\x50C\x50D\x5\xC8\x65\x2\x50D\x50E\a\xD9"+
		"\x2\x2\x50E\x50F\aS\x2\x2\x50F\x510\a\xD9\x2\x2\x510\x51B\x5\xC8\x65\x2"+
		"\x511\x513\a\xD9\x2\x2\x512\x511\x3\x2\x2\x2\x512\x513\x3\x2\x2\x2\x513"+
		"\x514\x3\x2\x2\x2\x514\x516\a\n\x2\x2\x515\x517\a\xD9\x2\x2\x516\x515"+
		"\x3\x2\x2\x2\x516\x517\x3\x2\x2\x2\x517\x518\x3\x2\x2\x2\x518\x51A\x5"+
		"\xC8\x65\x2\x519\x512\x3\x2\x2\x2\x51A\x51D\x3\x2\x2\x2\x51B\x519\x3\x2"+
		"\x2\x2\x51B\x51C\x3\x2\x2\x2\x51C\x83\x3\x2\x2\x2\x51D\x51B\x3\x2\x2\x2"+
		"\x51E\x51F\a{\x2\x2\x51F\x520\a\xD9\x2\x2\x520\x521\x5\xC8\x65\x2\x521"+
		"\x522\a\xD9\x2\x2\x522\x523\aO\x2\x2\x523\x524\a\xD9\x2\x2\x524\x529\t"+
		"\b\x2\x2\x525\x526\a\xD9\x2\x2\x526\x527\a\f\x2\x2\x527\x528\a\xD9\x2"+
		"\x2\x528\x52A\t\t\x2\x2\x529\x525\x3\x2\x2\x2\x529\x52A\x3\x2\x2\x2\x52A"+
		"\x52D\x3\x2\x2\x2\x52B\x52C\a\xD9\x2\x2\x52C\x52E\t\n\x2\x2\x52D\x52B"+
		"\x3\x2\x2\x2\x52D\x52E\x3\x2\x2\x2\x52E\x52F\x3\x2\x2\x2\x52F\x530\a\xD9"+
		"\x2\x2\x530\x531\a\x13\x2\x2\x531\x532\a\xD9\x2\x2\x532\x53D\x5\xD8m\x2"+
		"\x533\x534\a\xD9\x2\x2\x534\x536\a\x61\x2\x2\x535\x537\a\xD9\x2\x2\x536"+
		"\x535\x3\x2\x2\x2\x536\x537\x3\x2\x2\x2\x537\x538\x3\x2\x2\x2\x538\x53A"+
		"\a\xBF\x2\x2\x539\x53B\a\xD9\x2\x2\x53A\x539\x3\x2\x2\x2\x53A\x53B\x3"+
		"\x2\x2\x2\x53B\x53C\x3\x2\x2\x2\x53C\x53E\x5\xC8\x65\x2\x53D\x533\x3\x2"+
		"\x2\x2\x53D\x53E\x3\x2\x2\x2\x53E\x85\x3\x2\x2\x2\x53F\x54C\x5\x88\x45"+
		"\x2\x540\x542\a\xD9\x2\x2\x541\x540\x3\x2\x2\x2\x541\x542\x3\x2\x2\x2"+
		"\x542\x543\x3\x2\x2\x2\x543\x545\t\v\x2\x2\x544\x546\a\xD9\x2\x2\x545"+
		"\x544\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546\x548\x3\x2\x2\x2\x547\x549"+
		"\x5\x88\x45\x2\x548\x547\x3\x2\x2\x2\x548\x549\x3\x2\x2\x2\x549\x54B\x3"+
		"\x2\x2\x2\x54A\x541\x3\x2\x2\x2\x54B\x54E\x3\x2\x2\x2\x54C\x54A\x3\x2"+
		"\x2\x2\x54C\x54D\x3\x2\x2\x2\x54D\x561\x3\x2\x2\x2\x54E\x54C\x3\x2\x2"+
		"\x2\x54F\x551\x5\x88\x45\x2\x550\x54F\x3\x2\x2\x2\x550\x551\x3\x2\x2\x2"+
		"\x551\x55C\x3\x2\x2\x2\x552\x554\a\xD9\x2\x2\x553\x552\x3\x2\x2\x2\x553"+
		"\x554\x3\x2\x2\x2\x554\x555\x3\x2\x2\x2\x555\x557\t\v\x2\x2\x556\x558"+
		"\a\xD9\x2\x2\x557\x556\x3\x2\x2\x2\x557\x558\x3\x2\x2\x2\x558\x55A\x3"+
		"\x2\x2\x2\x559\x55B\x5\x88\x45\x2\x55A\x559\x3\x2\x2\x2\x55A\x55B\x3\x2"+
		"\x2\x2\x55B\x55D\x3\x2\x2\x2\x55C\x553\x3\x2\x2\x2\x55D\x55E\x3\x2\x2"+
		"\x2\x55E\x55C\x3\x2\x2\x2\x55E\x55F\x3\x2\x2\x2\x55F\x561\x3\x2\x2\x2"+
		"\x560\x53F\x3\x2\x2\x2\x560\x550\x3\x2\x2\x2\x561\x87\x3\x2\x2\x2\x562"+
		"\x574\x5\xC8\x65\x2\x563\x571\t\f\x2\x2\x564\x566\a\xD9\x2\x2\x565\x564"+
		"\x3\x2\x2\x2\x565\x566\x3\x2\x2\x2\x566\x567\x3\x2\x2\x2\x567\x569\a\xC3"+
		"\x2\x2\x568\x56A\a\xD9\x2\x2\x569\x568\x3\x2\x2\x2\x569\x56A\x3\x2\x2"+
		"\x2\x56A\x56B\x3\x2\x2\x2\x56B\x56D\x5\xF2z\x2\x56C\x56E\a\xD9\x2\x2\x56D"+
		"\x56C\x3\x2\x2\x2\x56D\x56E\x3\x2\x2\x2\x56E\x56F\x3\x2\x2\x2\x56F\x570"+
		"\a\xCC\x2\x2\x570\x572\x3\x2\x2\x2\x571\x565\x3\x2\x2\x2\x571\x572\x3"+
		"\x2\x2\x2\x572\x574\x3\x2\x2\x2\x573\x562\x3\x2\x2\x2\x573\x563\x3\x2"+
		"\x2\x2\x574\x89\x3\x2\x2\x2\x575\x576\a\x85\x2\x2\x576\x577\a\xD9\x2\x2"+
		"\x577\x579\x5\xD8m\x2\x578\x57A\a\xD9\x2\x2\x579\x578\x3\x2\x2\x2\x579"+
		"\x57A\x3\x2\x2\x2\x57A\x57B\x3\x2\x2\x2\x57B\x580\a\n\x2\x2\x57C\x57E"+
		"\a\xD9\x2\x2\x57D\x57C\x3\x2\x2\x2\x57D\x57E\x3\x2\x2\x2\x57E\x57F\x3"+
		"\x2\x2\x2\x57F\x581\x5\x86\x44\x2\x580\x57D\x3\x2\x2\x2\x580\x581\x3\x2"+
		"\x2\x2\x581\x8B\x3\x2\x2\x2\x582\x583\x5\x11A\x8E\x2\x583\x584\a\xD9\x2"+
		"\x2\x584\x586\x3\x2\x2\x2\x585\x582\x3\x2\x2\x2\x585\x586\x3\x2\x2\x2"+
		"\x586\x589\x3\x2\x2\x2\x587\x588\a\xA3\x2\x2\x588\x58A\a\xD9\x2\x2\x589"+
		"\x587\x3\x2\x2\x2\x589\x58A\x3\x2\x2\x2\x58A\x58B\x3\x2\x2\x2\x58B\x58C"+
		"\a\x87\x2\x2\x58C\x58D\a\xD9\x2\x2\x58D\x592\x5\x102\x82\x2\x58E\x590"+
		"\a\xD9\x2\x2\x58F\x58E\x3\x2\x2\x2\x58F\x590\x3\x2\x2\x2\x590\x591\x3"+
		"\x2\x2\x2\x591\x593\x5\xF8}\x2\x592\x58F\x3\x2\x2\x2\x592\x593\x3\x2\x2"+
		"\x2\x593\x596\x3\x2\x2\x2\x594\x595\a\xD9\x2\x2\x595\x597\x5\x104\x83"+
		"\x2\x596\x594\x3\x2\x2\x2\x596\x597\x3\x2\x2\x2\x597\x599\x3\x2\x2\x2"+
		"\x598\x59A\a\xD7\x2\x2\x599\x598\x3\x2\x2\x2\x59A\x59B\x3\x2\x2\x2\x59B"+
		"\x599\x3\x2\x2\x2\x59B\x59C\x3\x2\x2\x2\x59C\x5A3\x3\x2\x2\x2\x59D\x59F"+
		"\x5\x1C\xF\x2\x59E\x5A0\a\xD7\x2\x2\x59F\x59E\x3\x2\x2\x2\x5A0\x5A1\x3"+
		"\x2\x2\x2\x5A1\x59F\x3\x2\x2\x2\x5A1\x5A2\x3\x2\x2\x2\x5A2\x5A4\x3\x2"+
		"\x2\x2\x5A3\x59D\x3\x2\x2\x2\x5A3\x5A4\x3\x2\x2\x2\x5A4\x5A5\x3\x2\x2"+
		"\x2\x5A5\x5A6\a<\x2\x2\x5A6\x8D\x3\x2\x2\x2\x5A7\x5A8\x5\x11A\x8E\x2\x5A8"+
		"\x5A9\a\xD9\x2\x2\x5A9\x5AB\x3\x2\x2\x2\x5AA\x5A7\x3\x2\x2\x2\x5AA\x5AB"+
		"\x3\x2\x2\x2\x5AB\x5AE\x3\x2\x2\x2\x5AC\x5AD\a\xA3\x2\x2\x5AD\x5AF\a\xD9"+
		"\x2\x2\x5AE\x5AC\x3\x2\x2\x2\x5AE\x5AF\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2"+
		"\x2\x5B0\x5B1\a\x89\x2\x2\x5B1\x5B2\a\xD9\x2\x2\x5B2\x5B7\x5\x102\x82"+
		"\x2\x5B3\x5B5\a\xD9\x2\x2\x5B4\x5B3\x3\x2\x2\x2\x5B4\x5B5\x3\x2\x2\x2"+
		"\x5B5\x5B6\x3\x2\x2\x2\x5B6\x5B8\x5\xF8}\x2\x5B7\x5B4\x3\x2\x2\x2\x5B7"+
		"\x5B8\x3\x2\x2\x2\x5B8\x5BA\x3\x2\x2\x2\x5B9\x5BB\a\xD7\x2\x2\x5BA\x5B9"+
		"\x3\x2\x2\x2\x5BB\x5BC\x3\x2\x2\x2\x5BC\x5BA\x3\x2\x2\x2\x5BC\x5BD\x3"+
		"\x2\x2\x2\x5BD\x5C4\x3\x2\x2\x2\x5BE\x5C0\x5\x1C\xF\x2\x5BF\x5C1\a\xD7"+
		"\x2\x2\x5C0\x5BF\x3\x2\x2\x2\x5C1\x5C2\x3\x2\x2\x2\x5C2\x5C0\x3\x2\x2"+
		"\x2\x5C2\x5C3\x3\x2\x2\x2\x5C3\x5C5\x3\x2\x2\x2\x5C4\x5BE\x3\x2\x2\x2"+
		"\x5C4\x5C5\x3\x2\x2\x2\x5C5\x5C6\x3\x2\x2\x2\x5C6\x5C7\a<\x2\x2\x5C7\x8F"+
		"\x3\x2\x2\x2\x5C8\x5C9\x5\x11A\x8E\x2\x5C9\x5CA\a\xD9\x2\x2\x5CA\x5CC"+
		"\x3\x2\x2\x2\x5CB\x5C8\x3\x2\x2\x2\x5CB\x5CC\x3\x2\x2\x2\x5CC\x5CF\x3"+
		"\x2\x2\x2\x5CD\x5CE\a\xA3\x2\x2\x5CE\x5D0\a\xD9\x2\x2\x5CF\x5CD\x3\x2"+
		"\x2\x2\x5CF\x5D0\x3\x2\x2\x2\x5D0\x5D1\x3\x2\x2\x2\x5D1\x5D2\a\x88\x2"+
		"\x2\x5D2\x5D3\a\xD9\x2\x2\x5D3\x5D8\x5\x102\x82\x2\x5D4\x5D6\a\xD9\x2"+
		"\x2\x5D5\x5D4\x3\x2\x2\x2\x5D5\x5D6\x3\x2\x2\x2\x5D6\x5D7\x3\x2\x2\x2"+
		"\x5D7\x5D9\x5\xF8}\x2\x5D8\x5D5\x3\x2\x2\x2\x5D8\x5D9\x3\x2\x2\x2\x5D9"+
		"\x5DB\x3\x2\x2\x2\x5DA\x5DC\a\xD7\x2\x2\x5DB\x5DA\x3\x2\x2\x2\x5DC\x5DD"+
		"\x3\x2\x2\x2\x5DD\x5DB\x3\x2\x2\x2\x5DD\x5DE\x3\x2\x2\x2\x5DE\x5E5\x3"+
		"\x2\x2\x2\x5DF\x5E1\x5\x1C\xF\x2\x5E0\x5E2\a\xD7\x2\x2\x5E1\x5E0\x3\x2"+
		"\x2\x2\x5E2\x5E3\x3\x2\x2\x2\x5E3\x5E1\x3\x2\x2\x2\x5E3\x5E4\x3\x2\x2"+
		"\x2\x5E4\x5E6\x3\x2\x2\x2\x5E5\x5DF\x3\x2\x2\x2\x5E5\x5E6\x3\x2\x2\x2"+
		"\x5E6\x5E7\x3\x2\x2\x2\x5E7\x5E8\a<\x2\x2\x5E8\x91\x3\x2\x2\x2\x5E9\x5EA"+
		"\a\x8C\x2\x2\x5EA\x5EB\a\xD9\x2\x2\x5EB\x5ED\x5\xD8m\x2\x5EC\x5EE\a\xD9"+
		"\x2\x2\x5ED\x5EC\x3\x2\x2\x2\x5ED\x5EE\x3\x2\x2\x2\x5EE\x5EF\x3\x2\x2"+
		"\x2\x5EF\x5F1\a\n\x2\x2\x5F0\x5F2\a\xD9\x2\x2\x5F1\x5F0\x3\x2\x2\x2\x5F1"+
		"\x5F2\x3\x2\x2\x2\x5F2\x5F4\x3\x2\x2\x2\x5F3\x5F5\x5\xC8\x65\x2\x5F4\x5F3"+
		"\x3\x2\x2\x2\x5F4\x5F5\x3\x2\x2\x2\x5F5\x5F7\x3\x2\x2\x2\x5F6\x5F8\a\xD9"+
		"\x2\x2\x5F7\x5F6\x3\x2\x2\x2\x5F7\x5F8\x3\x2\x2\x2\x5F8\x5F9\x3\x2\x2"+
		"\x2\x5F9\x5FB\a\n\x2\x2\x5FA\x5FC\a\xD9\x2\x2\x5FB\x5FA\x3\x2\x2\x2\x5FB"+
		"\x5FC\x3\x2\x2\x2\x5FC\x5FD\x3\x2\x2\x2\x5FD\x5FE\x5\xC8\x65\x2\x5FE\x93"+
		"\x3\x2\x2\x2\x5FF\x600\a\x8F\x2\x2\x600\x601\a\xD9\x2\x2\x601\x610\x5"+
		"\x102\x82\x2\x602\x604\a\xD9\x2\x2\x603\x602\x3\x2\x2\x2\x603\x604\x3"+
		"\x2\x2\x2\x604\x605\x3\x2\x2\x2\x605\x607\a\xC3\x2\x2\x606\x608\a\xD9"+
		"\x2\x2\x607\x606\x3\x2\x2\x2\x607\x608\x3\x2\x2\x2\x608\x60D\x3\x2\x2"+
		"\x2\x609\x60B\x5\xF2z\x2\x60A\x60C\a\xD9\x2\x2\x60B\x60A\x3\x2\x2\x2\x60B"+
		"\x60C\x3\x2\x2\x2\x60C\x60E\x3\x2\x2\x2\x60D\x609\x3\x2\x2\x2\x60D\x60E"+
		"\x3\x2\x2\x2\x60E\x60F\x3\x2\x2\x2\x60F\x611\a\xCC\x2\x2\x610\x603\x3"+
		"\x2\x2\x2\x610\x611\x3\x2\x2\x2\x611\x95\x3\x2\x2\x2\x612\x615\a\x8E\x2"+
		"\x2\x613\x614\a\xD9\x2\x2\x614\x616\x5\xC8\x65\x2\x615\x613\x3\x2\x2\x2"+
		"\x615\x616\x3\x2\x2\x2\x616\x97\x3\x2\x2\x2\x617\x618\a\x92\x2\x2\x618"+
		"\x61B\a\xD9\x2\x2\x619\x61A\a\x84\x2\x2\x61A\x61C\a\xD9\x2\x2\x61B\x619"+
		"\x3\x2\x2\x2\x61B\x61C\x3\x2\x2\x2\x61C\x61D\x3\x2\x2\x2\x61D\x628\x5"+
		"\x9AN\x2\x61E\x620\a\xD9\x2\x2\x61F\x61E\x3\x2\x2\x2\x61F\x620\x3\x2\x2"+
		"\x2\x620\x621\x3\x2\x2\x2\x621\x623\a\n\x2\x2\x622\x624\a\xD9\x2\x2\x623"+
		"\x622\x3\x2\x2\x2\x623\x624\x3\x2\x2\x2\x624\x625\x3\x2\x2\x2\x625\x627"+
		"\x5\x9AN\x2\x626\x61F\x3\x2\x2\x2\x627\x62A\x3\x2\x2\x2\x628\x626\x3\x2"+
		"\x2\x2\x628\x629\x3\x2\x2\x2\x629\x99\x3\x2\x2\x2\x62A\x628\x3\x2\x2\x2"+
		"\x62B\x62D\x5\xE6t\x2\x62C\x62E\a\xD9\x2\x2\x62D\x62C\x3\x2\x2\x2\x62D"+
		"\x62E\x3\x2\x2\x2\x62E\x62F\x3\x2\x2\x2\x62F\x631\a\xC3\x2\x2\x630\x632"+
		"\a\xD9\x2\x2\x631\x630\x3\x2\x2\x2\x631\x632\x3\x2\x2\x2\x632\x633\x3"+
		"\x2\x2\x2\x633\x635\x5\xFE\x80\x2\x634\x636\a\xD9\x2\x2\x635\x634\x3\x2"+
		"\x2\x2\x635\x636\x3\x2\x2\x2\x636\x637\x3\x2\x2\x2\x637\x63A\a\xCC\x2"+
		"\x2\x638\x639\a\xD9\x2\x2\x639\x63B\x5\x104\x83\x2\x63A\x638\x3\x2\x2"+
		"\x2\x63A\x63B\x3\x2\x2\x2\x63B\x9B\x3\x2\x2\x2\x63C\x63D\a\x94\x2\x2\x63D"+
		"\x9D\x3\x2\x2\x2\x63E\x644\a\x95\x2\x2\x63F\x642\a\xD9\x2\x2\x640\x643"+
		"\at\x2\x2\x641\x643\x5\x102\x82\x2\x642\x640\x3\x2\x2\x2\x642\x641\x3"+
		"\x2\x2\x2\x643\x645\x3\x2\x2\x2\x644\x63F\x3\x2\x2\x2\x644\x645\x3\x2"+
		"\x2\x2\x645\x9F\x3\x2\x2\x2\x646\x647\a\x96\x2\x2\x647\xA1\x3\x2\x2\x2"+
		"\x648\x649\a\x97\x2\x2\x649\x64A\a\xD9\x2\x2\x64A\x64B\x5\xC8\x65\x2\x64B"+
		"\xA3\x3\x2\x2\x2\x64C\x64D\a\x98\x2\x2\x64D\x64E\a\xD9\x2\x2\x64E\x650"+
		"\x5\xE6t\x2\x64F\x651\a\xD9\x2\x2\x650\x64F\x3\x2\x2\x2\x650\x651\x3\x2"+
		"\x2\x2\x651\x652\x3\x2\x2\x2\x652\x654\a\xBF\x2\x2\x653\x655\a\xD9\x2"+
		"\x2\x654\x653\x3\x2\x2\x2\x654\x655\x3\x2\x2\x2\x655\x656\x3\x2\x2\x2"+
		"\x656\x657\x5\xC8\x65\x2\x657\xA5\x3\x2\x2\x2\x658\x659\a\x99\x2\x2\x659"+
		"\x65A\a\xD9\x2\x2\x65A\x65C\x5\xC8\x65\x2\x65B\x65D\a\xD9\x2\x2\x65C\x65B"+
		"\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2\x65D\x65E\x3\x2\x2\x2\x65E\x660\a\n"+
		"\x2\x2\x65F\x661\a\xD9\x2\x2\x660\x65F\x3\x2\x2\x2\x660\x661\x3\x2\x2"+
		"\x2\x661\x662\x3\x2\x2\x2\x662\x663\x5\xC8\x65\x2\x663\xA7\x3\x2\x2\x2"+
		"\x664\x665\a\x9A\x2\x2\x665\x666\a\xD9\x2\x2\x666\x668\x5\xC8\x65\x2\x667"+
		"\x669\a\xD9\x2\x2\x668\x667\x3\x2\x2\x2\x668\x669\x3\x2\x2\x2\x669\x66A"+
		"\x3\x2\x2\x2\x66A\x66C\a\n\x2\x2\x66B\x66D\a\xD9\x2\x2\x66C\x66B\x3\x2"+
		"\x2\x2\x66C\x66D\x3\x2\x2\x2\x66D\x66E\x3\x2\x2\x2\x66E\x670\x5\xC8\x65"+
		"\x2\x66F\x671\a\xD9\x2\x2\x670\x66F\x3\x2\x2\x2\x670\x671\x3\x2\x2\x2"+
		"\x671\x672\x3\x2\x2\x2\x672\x674\a\n\x2\x2\x673\x675\a\xD9\x2\x2\x674"+
		"\x673\x3\x2\x2\x2\x674\x675\x3\x2\x2\x2\x675\x676\x3\x2\x2\x2\x676\x678"+
		"\x5\xC8\x65\x2\x677\x679\a\xD9\x2\x2\x678\x677\x3\x2\x2\x2\x678\x679\x3"+
		"\x2\x2\x2\x679\x67A\x3\x2\x2\x2\x67A\x67C\a\n\x2\x2\x67B\x67D\a\xD9\x2"+
		"\x2\x67C\x67B\x3\x2\x2\x2\x67C\x67D\x3\x2\x2\x2\x67D\x67E\x3\x2\x2\x2"+
		"\x67E\x67F\x5\xC8\x65\x2\x67F\xA9\x3\x2\x2\x2\x680\x681\a\x9B\x2\x2\x681"+
		"\x682\a\xD9\x2\x2\x682\x684\x5\xC8\x65\x2\x683\x685\a\xD9\x2\x2\x684\x683"+
		"\x3\x2\x2\x2\x684\x685\x3\x2\x2\x2\x685\x686\x3\x2\x2\x2\x686\x688\a\n"+
		"\x2\x2\x687\x689\a\xD9\x2\x2\x688\x687\x3\x2\x2\x2\x688\x689\x3\x2\x2"+
		"\x2\x689\x68A\x3\x2\x2\x2\x68A\x68B\x5\xC8\x65\x2\x68B\xAB\x3\x2\x2\x2"+
		"\x68C\x68D\a\x9C\x2\x2\x68D\x68E\a\xD9\x2\x2\x68E\x68F\a\x1C\x2\x2\x68F"+
		"\x690\a\xD9\x2\x2\x690\x692\x5\xC8\x65\x2\x691\x693\a\xD7\x2\x2\x692\x691"+
		"\x3\x2\x2\x2\x693\x694\x3\x2\x2\x2\x694\x692\x3\x2\x2\x2\x694\x695\x3"+
		"\x2\x2\x2\x695\x699\x3\x2\x2\x2\x696\x698\x5\xAEX\x2\x697\x696\x3\x2\x2"+
		"\x2\x698\x69B\x3\x2\x2\x2\x699\x697\x3\x2\x2\x2\x699\x69A\x3\x2\x2\x2"+
		"\x69A\x69D\x3\x2\x2\x2\x69B\x699\x3\x2\x2\x2\x69C\x69E\a\xD9\x2\x2\x69D"+
		"\x69C\x3\x2\x2\x2\x69D\x69E\x3\x2\x2\x2\x69E\x69F\x3\x2\x2\x2\x69F\x6A0"+
		"\a=\x2\x2\x6A0\xAD\x3\x2\x2\x2\x6A1\x6A2\a\x1C\x2\x2\x6A2\x6A3\a\xD9\x2"+
		"\x2\x6A3\x6A5\x5\xB0Y\x2\x6A4\x6A6\a\xD9\x2\x2\x6A5\x6A4\x3\x2\x2\x2\x6A5"+
		"\x6A6\x3\x2\x2\x2\x6A6\x6B5\x3\x2\x2\x2\x6A7\x6A9\a\b\x2\x2\x6A8\x6A7"+
		"\x3\x2\x2\x2\x6A8\x6A9\x3\x2\x2\x2\x6A9\x6AD\x3\x2\x2\x2\x6AA\x6AC\a\xD7"+
		"\x2\x2\x6AB\x6AA\x3\x2\x2\x2\x6AC\x6AF\x3\x2\x2\x2\x6AD\x6AB\x3\x2\x2"+
		"\x2\x6AD\x6AE\x3\x2\x2\x2\x6AE\x6B6\x3\x2\x2\x2\x6AF\x6AD\x3\x2\x2\x2"+
		"\x6B0\x6B2\a\xD7\x2\x2\x6B1\x6B0\x3\x2\x2\x2\x6B2\x6B3\x3\x2\x2\x2\x6B3"+
		"\x6B1\x3\x2\x2\x2\x6B3\x6B4\x3\x2\x2\x2\x6B4\x6B6\x3\x2\x2\x2\x6B5\x6A8"+
		"\x3\x2\x2\x2\x6B5\x6B1\x3\x2\x2\x2\x6B6\x6BD\x3\x2\x2\x2\x6B7\x6B9\x5"+
		"\x1C\xF\x2\x6B8\x6BA\a\xD7\x2\x2\x6B9\x6B8\x3\x2\x2\x2\x6BA\x6BB\x3\x2"+
		"\x2\x2\x6BB\x6B9\x3\x2\x2\x2\x6BB\x6BC\x3\x2\x2\x2\x6BC\x6BE\x3\x2\x2"+
		"\x2\x6BD\x6B7\x3\x2\x2\x2\x6BD\x6BE\x3\x2\x2\x2\x6BE\xAF\x3\x2\x2\x2\x6BF"+
		"\x6EB\a\x37\x2\x2\x6C0\x6C2\aZ\x2\x2\x6C1\x6C3\a\xD9\x2\x2\x6C2\x6C1\x3"+
		"\x2\x2\x2\x6C2\x6C3\x3\x2\x2\x2\x6C3\x6C4\x3\x2\x2\x2\x6C4\x6C6\x5\x10A"+
		"\x86\x2\x6C5\x6C7\a\xD9\x2\x2\x6C6\x6C5\x3\x2\x2\x2\x6C6\x6C7\x3\x2\x2"+
		"\x2\x6C7\x6C8\x3\x2\x2\x2\x6C8\x6C9\x5\xC8\x65\x2\x6C9\x6EB\x3\x2\x2\x2"+
		"\x6CA\x6D5\x5\xC8\x65\x2\x6CB\x6CD\a\xD9\x2\x2\x6CC\x6CB\x3\x2\x2\x2\x6CC"+
		"\x6CD\x3\x2\x2\x2\x6CD\x6CE\x3\x2\x2\x2\x6CE\x6D0\a\n\x2\x2\x6CF\x6D1"+
		"\a\xD9\x2\x2\x6D0\x6CF\x3\x2\x2\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1\x6D2\x3"+
		"\x2\x2\x2\x6D2\x6D4\x5\xC8\x65\x2\x6D3\x6CC\x3\x2\x2\x2\x6D4\x6D7\x3\x2"+
		"\x2\x2\x6D5\x6D3\x3\x2\x2\x2\x6D5\x6D6\x3\x2\x2\x2\x6D6\x6EB\x3\x2\x2"+
		"\x2\x6D7\x6D5\x3\x2\x2\x2\x6D8\x6D9\a\xD2\x2\x2\x6D9\x6DA\a\xD9\x2\x2"+
		"\x6DA\x6DB\a\xAC\x2\x2\x6DB\x6DC\a\xD9\x2\x2\x6DC\x6E7\x5\xC8\x65\x2\x6DD"+
		"\x6DF\a\xD9\x2\x2\x6DE\x6DD\x3\x2\x2\x2\x6DE\x6DF\x3\x2\x2\x2\x6DF\x6E0"+
		"\x3\x2\x2\x2\x6E0\x6E2\a\n\x2\x2\x6E1\x6E3\a\xD9\x2\x2\x6E2\x6E1\x3\x2"+
		"\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6E4\x3\x2\x2\x2\x6E4\x6E6\x5\xC8\x65"+
		"\x2\x6E5\x6DE\x3\x2\x2\x2\x6E6\x6E9\x3\x2\x2\x2\x6E7\x6E5\x3\x2\x2\x2"+
		"\x6E7\x6E8\x3\x2\x2\x2\x6E8\x6EB\x3\x2\x2\x2\x6E9\x6E7\x3\x2\x2\x2\x6EA"+
		"\x6BF\x3\x2\x2\x2\x6EA\x6C0\x3\x2\x2\x2\x6EA\x6CA\x3\x2\x2\x2\x6EA\x6D8"+
		"\x3\x2\x2\x2\x6EB\xB1\x3\x2\x2\x2\x6EC\x6ED\a\x9D\x2\x2\x6ED\x6EE\a\xD9"+
		"\x2\x2\x6EE\x6F7\x5\xC8\x65\x2\x6EF\x6F1\a\xD9\x2\x2\x6F0\x6EF\x3\x2\x2"+
		"\x2\x6F0\x6F1\x3\x2\x2\x2\x6F1\x6F2\x3\x2\x2\x2\x6F2\x6F4\a\n\x2\x2\x6F3"+
		"\x6F5\a\xD9\x2\x2\x6F4\x6F3\x3\x2\x2\x2\x6F4\x6F5\x3\x2\x2\x2\x6F5\x6F6"+
		"\x3\x2\x2\x2\x6F6\x6F8\x5\xC8\x65\x2\x6F7\x6F0\x3\x2\x2\x2\x6F7\x6F8\x3"+
		"\x2\x2\x2\x6F8\xB3\x3\x2\x2\x2\x6F9\x6FA\a\x9F\x2\x2\x6FA\x6FB\a\xD9\x2"+
		"\x2\x6FB\x6FD\x5\xC8\x65\x2\x6FC\x6FE\a\xD9\x2\x2\x6FD\x6FC\x3\x2\x2\x2"+
		"\x6FD\x6FE\x3\x2\x2\x2\x6FE\x6FF\x3\x2\x2\x2\x6FF\x701\a\n\x2\x2\x700"+
		"\x702\a\xD9\x2\x2\x701\x700\x3\x2\x2\x2\x701\x702\x3\x2\x2\x2\x702\x703"+
		"\x3\x2\x2\x2\x703\x704\x5\xC8\x65\x2\x704\xB5\x3\x2\x2\x2\x705\x706\a"+
		"\x9E\x2\x2\x706\x707\a\xD9\x2\x2\x707\x709\x5\xE6t\x2\x708\x70A\a\xD9"+
		"\x2\x2\x709\x708\x3\x2\x2\x2\x709\x70A\x3\x2\x2\x2\x70A\x70B\x3\x2\x2"+
		"\x2\x70B\x70D\a\xBF\x2\x2\x70C\x70E\a\xD9\x2\x2\x70D\x70C\x3\x2\x2\x2"+
		"\x70D\x70E\x3\x2\x2\x2\x70E\x70F\x3\x2\x2\x2\x70F\x710\x5\xC8\x65\x2\x710"+
		"\xB7\x3\x2\x2\x2\x711\x712\a\xA5\x2\x2\x712\xB9\x3\x2\x2\x2\x713\x714"+
		"\x5\x11A\x8E\x2\x714\x715\a\xD9\x2\x2\x715\x717\x3\x2\x2\x2\x716\x713"+
		"\x3\x2\x2\x2\x716\x717\x3\x2\x2\x2\x717\x71A\x3\x2\x2\x2\x718\x719\a\xA3"+
		"\x2\x2\x719\x71B\a\xD9\x2\x2\x71A\x718\x3\x2\x2\x2\x71A\x71B\x3\x2\x2"+
		"\x2\x71B\x71C\x3\x2\x2\x2\x71C\x71D\a\xA7\x2\x2\x71D\x71E\a\xD9\x2\x2"+
		"\x71E\x723\x5\x102\x82\x2\x71F\x721\a\xD9\x2\x2\x720\x71F\x3\x2\x2\x2"+
		"\x720\x721\x3\x2\x2\x2\x721\x722\x3\x2\x2\x2\x722\x724\x5\xF8}\x2\x723"+
		"\x720\x3\x2\x2\x2\x723\x724\x3\x2\x2\x2\x724\x726\x3\x2\x2\x2\x725\x727"+
		"\a\xD7\x2\x2\x726\x725\x3\x2\x2\x2\x727\x728\x3\x2\x2\x2\x728\x726\x3"+
		"\x2\x2\x2\x728\x729\x3\x2\x2\x2\x729\x730\x3\x2\x2\x2\x72A\x72C\x5\x1C"+
		"\xF\x2\x72B\x72D\a\xD7\x2\x2\x72C\x72B\x3\x2\x2\x2\x72D\x72E\x3\x2\x2"+
		"\x2\x72E\x72C\x3\x2\x2\x2\x72E\x72F\x3\x2\x2\x2\x72F\x731\x3\x2\x2\x2"+
		"\x730\x72A\x3\x2\x2\x2\x730\x731\x3\x2\x2\x2\x731\x732\x3\x2\x2\x2\x732"+
		"\x733\a>\x2\x2\x733\xBB\x3\x2\x2\x2\x734\x736\a\xAB\x2\x2\x735\x737\a"+
		"\xD9\x2\x2\x736\x735\x3\x2\x2\x2\x736\x737\x3\x2\x2\x2\x737\x738\x3\x2"+
		"\x2\x2\x738\x73A\a\xBF\x2\x2\x739\x73B\a\xD9\x2\x2\x73A\x739\x3\x2\x2"+
		"\x2\x73A\x73B\x3\x2\x2\x2\x73B\x73C\x3\x2\x2\x2\x73C\x73D\x5\xC8\x65\x2"+
		"\x73D\xBD\x3\x2\x2\x2\x73E\x73F\x5\x11A\x8E\x2\x73F\x740\a\xD9\x2\x2\x740"+
		"\x742\x3\x2\x2\x2\x741\x73E\x3\x2\x2\x2\x741\x742\x3\x2\x2\x2\x742\x743"+
		"\x3\x2\x2\x2\x743\x744\a\xAE\x2\x2\x744\x745\a\xD9\x2\x2\x745\x747\x5"+
		"\x102\x82\x2\x746\x748\a\xD7\x2\x2\x747\x746\x3\x2\x2\x2\x748\x749\x3"+
		"\x2\x2\x2\x749\x747\x3\x2\x2\x2\x749\x74A\x3\x2\x2\x2\x74A\x74E\x3\x2"+
		"\x2\x2\x74B\x74D\x5\xC0\x61\x2\x74C\x74B\x3\x2\x2\x2\x74D\x750\x3\x2\x2"+
		"\x2\x74E\x74C\x3\x2\x2\x2\x74E\x74F\x3\x2\x2\x2\x74F\x751\x3\x2\x2\x2"+
		"\x750\x74E\x3\x2\x2\x2\x751\x752\a?\x2\x2\x752\xBF\x3\x2\x2\x2\x753\x762"+
		"\x5\x102\x82\x2\x754\x756\a\xD9\x2\x2\x755\x754\x3\x2\x2\x2\x755\x756"+
		"\x3\x2\x2\x2\x756\x757\x3\x2\x2\x2\x757\x75C\a\xC3\x2\x2\x758\x75A\a\xD9"+
		"\x2\x2\x759\x758\x3\x2\x2\x2\x759\x75A\x3\x2\x2\x2\x75A\x75B\x3\x2\x2"+
		"\x2\x75B\x75D\x5\xFE\x80\x2\x75C\x759\x3\x2\x2\x2\x75C\x75D\x3\x2\x2\x2"+
		"\x75D\x75F\x3\x2\x2\x2\x75E\x760\a\xD9\x2\x2\x75F\x75E\x3\x2\x2\x2\x75F"+
		"\x760\x3\x2\x2\x2\x760\x761\x3\x2\x2\x2\x761\x763\a\xCC\x2\x2\x762\x755"+
		"\x3\x2\x2\x2\x762\x763\x3\x2\x2\x2\x763\x766\x3\x2\x2\x2\x764\x765\a\xD9"+
		"\x2\x2\x765\x767\x5\x104\x83\x2\x766\x764\x3\x2\x2\x2\x766\x767\x3\x2"+
		"\x2\x2\x767\x769\x3\x2\x2\x2\x768\x76A\a\xD7\x2\x2\x769\x768\x3\x2\x2"+
		"\x2\x76A\x76B\x3\x2\x2\x2\x76B\x769\x3\x2\x2\x2\x76B\x76C\x3\x2\x2\x2"+
		"\x76C\xC1\x3\x2\x2\x2\x76D\x76E\a\xAF\x2\x2\x76E\x76F\a\xD9\x2\x2\x76F"+
		"\x774\x5\xC8\x65\x2\x770\x771\a\xD9\x2\x2\x771\x772\aZ\x2\x2\x772\x773"+
		"\a\xD9\x2\x2\x773\x775\x5\x116\x8C\x2\x774\x770\x3\x2\x2\x2\x774\x775"+
		"\x3\x2\x2\x2\x775\xC3\x3\x2\x2\x2\x776\x777\a\xB0\x2\x2\x777\x778\a\xD9"+
		"\x2\x2\x778\x779\x5\xC8\x65\x2\x779\xC5\x3\x2\x2\x2\x77A\x77B\a\xB1\x2"+
		"\x2\x77B\x77C\a\xD9\x2\x2\x77C\x78B\x5\xC8\x65\x2\x77D\x77F\a\xD9\x2\x2"+
		"\x77E\x77D\x3\x2\x2\x2\x77E\x77F\x3\x2\x2\x2\x77F\x780\x3\x2\x2\x2\x780"+
		"\x782\a\n\x2\x2\x781\x783\a\xD9\x2\x2\x782\x781\x3\x2\x2\x2\x782\x783"+
		"\x3\x2\x2\x2\x783\x784\x3\x2\x2\x2\x784\x789\x5\xC8\x65\x2\x785\x786\a"+
		"\xD9\x2\x2\x786\x787\a\xAC\x2\x2\x787\x788\a\xD9\x2\x2\x788\x78A\x5\xC8"+
		"\x65\x2\x789\x785\x3\x2\x2\x2\x789\x78A\x3\x2\x2\x2\x78A\x78C\x3\x2\x2"+
		"\x2\x78B\x77E\x3\x2\x2\x2\x78B\x78C\x3\x2\x2\x2\x78C\xC7\x3\x2\x2\x2\x78D"+
		"\x78E\b\x65\x1\x2\x78E\x78F\au\x2\x2\x78F\x790\a\xD9\x2\x2\x790\x7C4\x5"+
		"\xC8\x65\x1E\x791\x792\a\r\x2\x2\x792\x793\a\xD9\x2\x2\x793\x7C4\x5\xC8"+
		"\x65\x1B\x794\x796\x5\xE6t\x2\x795\x797\a\xD9\x2\x2\x796\x795\x3\x2\x2"+
		"\x2\x796\x797\x3\x2\x2\x2\x797\x798\x3\x2\x2\x2\x798\x79A\a\xBD\x2\x2"+
		"\x799\x79B\a\xD9\x2\x2\x79A\x799\x3\x2\x2\x2\x79A\x79B\x3\x2\x2\x2\x79B"+
		"\x79C\x3\x2\x2\x2\x79C\x79D\x5\xC8\x65\x1A\x79D\x7C4\x3\x2\x2\x2\x79E"+
		"\x7A0\a\xC5\x2\x2\x79F\x7A1\a\xD9\x2\x2\x7A0\x79F\x3\x2\x2\x2\x7A0\x7A1"+
		"\x3\x2\x2\x2\x7A1\x7A2\x3\x2\x2\x2\x7A2\x7C4\x5\xC8\x65\x10\x7A3\x7A5"+
		"\a\xC9\x2\x2\x7A4\x7A6\a\xD9\x2\x2\x7A5\x7A4\x3\x2\x2\x2\x7A5\x7A6\x3"+
		"\x2\x2\x2\x7A6\x7A7\x3\x2\x2\x2\x7A7\x7C4\x5\xC8\x65\xF\x7A8\x7A9\av\x2"+
		"\x2\x7A9\x7AA\a\xD9\x2\x2\x7AA\x7C4\x5\xC8\x65\x3\x7AB\x7C4\x5\x114\x8B"+
		"\x2\x7AC\x7C4\x5\xE6t\x2\x7AD\x7AF\a\xC3\x2\x2\x7AE\x7B0\a\xD9\x2\x2\x7AF"+
		"\x7AE\x3\x2\x2\x2\x7AF\x7B0\x3\x2\x2\x2\x7B0\x7B1\x3\x2\x2\x2\x7B1\x7BC"+
		"\x5\xC8\x65\x2\x7B2\x7B4\a\xD9\x2\x2\x7B3\x7B2\x3\x2\x2\x2\x7B3\x7B4\x3"+
		"\x2\x2\x2\x7B4\x7B5\x3\x2\x2\x2\x7B5\x7B7\a\n\x2\x2\x7B6\x7B8\a\xD9\x2"+
		"\x2\x7B7\x7B6\x3\x2\x2\x2\x7B7\x7B8\x3\x2\x2\x2\x7B8\x7B9\x3\x2\x2\x2"+
		"\x7B9\x7BB\x5\xC8\x65\x2\x7BA\x7B3\x3\x2\x2\x2\x7BB\x7BE\x3\x2\x2\x2\x7BC"+
		"\x7BA\x3\x2\x2\x2\x7BC\x7BD\x3\x2\x2\x2\x7BD\x7BF\x3\x2\x2\x2\x7BE\x7BC"+
		"\x3\x2\x2\x2\x7BF\x7C0\a\xCC\x2\x2\x7C0\x7C4\x3\x2\x2\x2\x7C1\x7C4\x5"+
		"\xC2\x62\x2\x7C2\x7C4\x5x=\x2\x7C3\x78D\x3\x2\x2\x2\x7C3\x791\x3\x2\x2"+
		"\x2\x7C3\x794\x3\x2\x2\x2\x7C3\x79E\x3\x2\x2\x2\x7C3\x7A3\x3\x2\x2\x2"+
		"\x7C3\x7A8\x3\x2\x2\x2\x7C3\x7AB\x3\x2\x2\x2\x7C3\x7AC\x3\x2\x2\x2\x7C3"+
		"\x7AD\x3\x2\x2\x2\x7C3\x7C1\x3\x2\x2\x2\x7C3\x7C2\x3\x2\x2\x2\x7C4\x863"+
		"\x3\x2\x2\x2\x7C5\x7C6\f\x19\x2\x2\x7C6\x7C7\a\xD9\x2\x2\x7C7\x7C8\aZ"+
		"\x2\x2\x7C8\x7C9\a\xD9\x2\x2\x7C9\x862\x5\xC8\x65\x1A\x7CA\x7CB\f\x18"+
		"\x2\x2\x7CB\x7CC\a\xD9\x2\x2\x7CC\x7CD\a\x64\x2\x2\x7CD\x7CE\a\xD9\x2"+
		"\x2\x7CE\x862\x5\xC8\x65\x19\x7CF\x7D1\f\x17\x2\x2\x7D0\x7D2\a\xD9\x2"+
		"\x2\x7D1\x7D0\x3\x2\x2\x2\x7D1\x7D2\x3\x2\x2\x2\x7D2\x7D3\x3\x2\x2\x2"+
		"\x7D3\x7D5\a\xC0\x2\x2\x7D4\x7D6\a\xD9\x2\x2\x7D5\x7D4\x3\x2\x2\x2\x7D5"+
		"\x7D6\x3\x2\x2\x2\x7D6\x7D7\x3\x2\x2\x2\x7D7\x862\x5\xC8\x65\x18\x7D8"+
		"\x7DA\f\x16\x2\x2\x7D9\x7DB\a\xD9\x2\x2\x7DA\x7D9\x3\x2\x2\x2\x7DA\x7DB"+
		"\x3\x2\x2\x2\x7DB\x7DC\x3\x2\x2\x2\x7DC\x7DE\a\xC2\x2\x2\x7DD\x7DF\a\xD9"+
		"\x2\x2\x7DE\x7DD\x3\x2\x2\x2\x7DE\x7DF\x3\x2\x2\x2\x7DF\x7E0\x3\x2\x2"+
		"\x2\x7E0\x862\x5\xC8\x65\x17\x7E1\x7E3\f\x15\x2\x2\x7E2\x7E4\a\xD9\x2"+
		"\x2\x7E3\x7E2\x3\x2\x2\x2\x7E3\x7E4\x3\x2\x2\x2\x7E4\x7E5\x3\x2\x2\x2"+
		"\x7E5\x7E7\a\xC1\x2\x2\x7E6\x7E8\a\xD9\x2\x2\x7E7\x7E6\x3\x2\x2\x2\x7E7"+
		"\x7E8\x3\x2\x2\x2\x7E8\x7E9\x3\x2\x2\x2\x7E9\x862\x5\xC8\x65\x16\x7EA"+
		"\x7EC\f\x14\x2\x2\x7EB\x7ED\a\xD9\x2\x2\x7EC\x7EB\x3\x2\x2\x2\x7EC\x7ED"+
		"\x3\x2\x2\x2\x7ED\x7EE\x3\x2\x2\x2\x7EE\x7F0\a\xC4\x2\x2\x7EF\x7F1\a\xD9"+
		"\x2\x2\x7F0\x7EF\x3\x2\x2\x2\x7F0\x7F1\x3\x2\x2\x2\x7F1\x7F2\x3\x2\x2"+
		"\x2\x7F2\x862\x5\xC8\x65\x15\x7F3\x7F5\f\x13\x2\x2\x7F4\x7F6\a\xD9\x2"+
		"\x2\x7F5\x7F4\x3\x2\x2\x2\x7F5\x7F6\x3\x2\x2\x2\x7F6\x7F7\x3\x2\x2\x2"+
		"\x7F7\x7F9\a\xC8\x2\x2\x7F8\x7FA\a\xD9\x2\x2\x7F9\x7F8\x3\x2\x2\x2\x7F9"+
		"\x7FA\x3\x2\x2\x2\x7FA\x7FB\x3\x2\x2\x2\x7FB\x862\x5\xC8\x65\x14\x7FC"+
		"\x7FE\f\x12\x2\x2\x7FD\x7FF\a\xD9\x2\x2\x7FE\x7FD\x3\x2\x2\x2\x7FE\x7FF"+
		"\x3\x2\x2\x2\x7FF\x800\x3\x2\x2\x2\x800\x802\a\xBF\x2\x2\x801\x803\a\xD9"+
		"\x2\x2\x802\x801\x3\x2\x2\x2\x802\x803\x3\x2\x2\x2\x803\x804\x3\x2\x2"+
		"\x2\x804\x862\x5\xC8\x65\x13\x805\x806\f\x11\x2\x2\x806\x807\a\xD9\x2"+
		"\x2\x807\x808\a\xBC\x2\x2\x808\x809\a\xD9\x2\x2\x809\x862\x5\xC8\x65\x12"+
		"\x80A\x80C\f\xE\x2\x2\x80B\x80D\a\xD9\x2\x2\x80C\x80B\x3\x2\x2\x2\x80C"+
		"\x80D\x3\x2\x2\x2\x80D\x80E\x3\x2\x2\x2\x80E\x810\a\xC9\x2\x2\x80F\x811"+
		"\a\xD9\x2\x2\x810\x80F\x3\x2\x2\x2\x810\x811\x3\x2\x2\x2\x811\x812\x3"+
		"\x2\x2\x2\x812\x862\x5\xC8\x65\xF\x813\x815\f\r\x2\x2\x814\x816\a\xD9"+
		"\x2\x2\x815\x814\x3\x2\x2\x2\x815\x816\x3\x2\x2\x2\x816\x817\x3\x2\x2"+
		"\x2\x817\x819\ar\x2\x2\x818\x81A\a\xD9\x2\x2\x819\x818\x3\x2\x2\x2\x819"+
		"\x81A\x3\x2\x2\x2\x81A\x81B\x3\x2\x2\x2\x81B\x862\x5\xC8\x65\xE\x81C\x81E"+
		"\f\f\x2\x2\x81D\x81F\a\xD9\x2\x2\x81E\x81D\x3\x2\x2\x2\x81E\x81F\x3\x2"+
		"\x2\x2\x81F\x820\x3\x2\x2\x2\x820\x822\a\xBE\x2\x2\x821\x823\a\xD9\x2"+
		"\x2\x822\x821\x3\x2\x2\x2\x822\x823\x3\x2\x2\x2\x823\x824\x3\x2\x2\x2"+
		"\x824\x862\x5\xC8\x65\r\x825\x827\f\v\x2\x2\x826\x828\a\xD9\x2\x2\x827"+
		"\x826\x3\x2\x2\x2\x827\x828\x3\x2\x2\x2\x828\x829\x3\x2\x2\x2\x829\x82B"+
		"\a\xC7\x2\x2\x82A\x82C\a\xD9\x2\x2\x82B\x82A\x3\x2\x2\x2\x82B\x82C\x3"+
		"\x2\x2\x2\x82C\x82D\x3\x2\x2\x2\x82D\x862\x5\xC8\x65\f\x82E\x830\f\n\x2"+
		"\x2\x82F\x831\a\xD9\x2\x2\x830\x82F\x3\x2\x2\x2\x830\x831\x3\x2\x2\x2"+
		"\x831\x832\x3\x2\x2\x2\x832\x834\a\xC5\x2\x2\x833\x835\a\xD9\x2\x2\x834"+
		"\x833\x3\x2\x2\x2\x834\x835\x3\x2\x2\x2\x835\x836\x3\x2\x2\x2\x836\x862"+
		"\x5\xC8\x65\v\x837\x839\f\t\x2\x2\x838\x83A\a\xD9\x2\x2\x839\x838\x3\x2"+
		"\x2\x2\x839\x83A\x3\x2\x2\x2\x83A\x83B\x3\x2\x2\x2\x83B\x83D\a\xCB\x2"+
		"\x2\x83C\x83E\a\xD9\x2\x2\x83D\x83C\x3\x2\x2\x2\x83D\x83E\x3\x2\x2\x2"+
		"\x83E\x83F\x3\x2\x2\x2\x83F\x862\x5\xC8\x65\n\x840\x841\f\b\x2\x2\x841"+
		"\x842\a\xD9\x2\x2\x842\x843\aV\x2\x2\x843\x844\a\xD9\x2\x2\x844\x862\x5"+
		"\xC8\x65\t\x845\x846\f\a\x2\x2\x846\x847\a\xD9\x2\x2\x847\x848\a\x43\x2"+
		"\x2\x848\x849\a\xD9\x2\x2\x849\x862\x5\xC8\x65\b\x84A\x84C\f\x6\x2\x2"+
		"\x84B\x84D\a\xD9\x2\x2\x84C\x84B\x3\x2\x2\x2\x84C\x84D\x3\x2\x2\x2\x84D"+
		"\x84E\x3\x2\x2\x2\x84E\x850\a\xBB\x2\x2\x84F\x851\a\xD9\x2\x2\x850\x84F"+
		"\x3\x2\x2\x2\x850\x851\x3\x2\x2\x2\x851\x852\x3\x2\x2\x2\x852\x862\x5"+
		"\xC8\x65\a\x853\x855\f\x5\x2\x2\x854\x856\a\xD9\x2\x2\x855\x854\x3\x2"+
		"\x2\x2\x855\x856\x3\x2\x2\x2\x856\x857\x3\x2\x2\x2\x857\x859\a\x81\x2"+
		"\x2\x858\x85A\a\xD9\x2\x2\x859\x858\x3\x2\x2\x2\x859\x85A\x3\x2\x2\x2"+
		"\x85A\x85B\x3\x2\x2\x2\x85B\x862\x5\xC8\x65\x6\x85C\x85D\f\x4\x2\x2\x85D"+
		"\x85E\a\xD9\x2\x2\x85E\x85F\a\xF\x2\x2\x85F\x860\a\xD9\x2\x2\x860\x862"+
		"\x5\xC8\x65\x5\x861\x7C5\x3\x2\x2\x2\x861\x7CA\x3\x2\x2\x2\x861\x7CF\x3"+
		"\x2\x2\x2\x861\x7D8\x3\x2\x2\x2\x861\x7E1\x3\x2\x2\x2\x861\x7EA\x3\x2"+
		"\x2\x2\x861\x7F3\x3\x2\x2\x2\x861\x7FC\x3\x2\x2\x2\x861\x805\x3\x2\x2"+
		"\x2\x861\x80A\x3\x2\x2\x2\x861\x813\x3\x2\x2\x2\x861\x81C\x3\x2\x2\x2"+
		"\x861\x825\x3\x2\x2\x2\x861\x82E\x3\x2\x2\x2\x861\x837\x3\x2\x2\x2\x861"+
		"\x840\x3\x2\x2\x2\x861\x845\x3\x2\x2\x2\x861\x84A\x3\x2\x2\x2\x861\x853"+
		"\x3\x2\x2\x2\x861\x85C\x3\x2\x2\x2\x862\x865\x3\x2\x2\x2\x863\x861\x3"+
		"\x2\x2\x2\x863\x864\x3\x2\x2\x2\x864\xC9\x3\x2\x2\x2\x865\x863\x3\x2\x2"+
		"\x2\x866\x86A\a\x33\x2\x2\x867\x86A\a\xA3\x2\x2\x868\x86A\x5\x11A\x8E"+
		"\x2\x869\x866\x3\x2\x2\x2\x869\x867\x3\x2\x2\x2\x869\x868\x3\x2\x2\x2"+
		"\x86A\x86B\x3\x2\x2\x2\x86B\x86E\a\xD9\x2\x2\x86C\x86D\a\xB9\x2\x2\x86D"+
		"\x86F\a\xD9\x2\x2\x86E\x86C\x3\x2\x2\x2\x86E\x86F\x3\x2\x2\x2\x86F\x870"+
		"\x3\x2\x2\x2\x870\x871\x5\xCCg\x2\x871\xCB\x3\x2\x2\x2\x872\x87D\x5\xCE"+
		"h\x2\x873\x875\a\xD9\x2\x2\x874\x873\x3\x2\x2\x2\x874\x875\x3\x2\x2\x2"+
		"\x875\x876\x3\x2\x2\x2\x876\x878\a\n\x2\x2\x877\x879\a\xD9\x2\x2\x878"+
		"\x877\x3\x2\x2\x2\x878\x879\x3\x2\x2\x2\x879\x87A\x3\x2\x2\x2\x87A\x87C"+
		"\x5\xCEh\x2\x87B\x874\x3\x2\x2\x2\x87C\x87F\x3\x2\x2\x2\x87D\x87B\x3\x2"+
		"\x2\x2\x87D\x87E\x3\x2\x2\x2\x87E\xCD\x3\x2\x2\x2\x87F\x87D\x3\x2\x2\x2"+
		"\x880\x892\x5\x102\x82\x2\x881\x883\a\xD9\x2\x2\x882\x881\x3\x2\x2\x2"+
		"\x882\x883\x3\x2\x2\x2\x883\x884\x3\x2\x2\x2\x884\x886\a\xC3\x2\x2\x885"+
		"\x887\a\xD9\x2\x2\x886\x885\x3\x2\x2\x2\x886\x887\x3\x2\x2\x2\x887\x88C"+
		"\x3\x2\x2\x2\x888\x88A\x5\xFE\x80\x2\x889\x88B\a\xD9\x2\x2\x88A\x889\x3"+
		"\x2\x2\x2\x88A\x88B\x3\x2\x2\x2\x88B\x88D\x3\x2\x2\x2\x88C\x888\x3\x2"+
		"\x2\x2\x88C\x88D\x3\x2\x2\x2\x88D\x88E\x3\x2\x2\x2\x88E\x890\a\xCC\x2"+
		"\x2\x88F\x891\a\xD9\x2\x2\x890\x88F\x3\x2\x2\x2\x890\x891\x3\x2\x2\x2"+
		"\x891\x893\x3\x2\x2\x2\x892\x882\x3\x2\x2\x2\x892\x893\x3\x2\x2\x2\x893"+
		"\x895\x3\x2\x2\x2\x894\x896\x5\x118\x8D\x2\x895\x894\x3\x2\x2\x2\x895"+
		"\x896\x3\x2\x2\x2\x896\x899\x3\x2\x2\x2\x897\x898\a\xD9\x2\x2\x898\x89A"+
		"\x5\x104\x83\x2\x899\x897\x3\x2\x2\x2\x899\x89A\x3\x2\x2\x2\x89A\xCF\x3"+
		"\x2\x2\x2\x89B\x89C\a\xB6\x2\x2\x89C\x89D\a\xD9\x2\x2\x89D\x89F\x5\xC8"+
		"\x65\x2\x89E\x8A0\a\xD7\x2\x2\x89F\x89E\x3\x2\x2\x2\x8A0\x8A1\x3\x2\x2"+
		"\x2\x8A1\x89F\x3\x2\x2\x2\x8A1\x8A2\x3\x2\x2\x2\x8A2\x8A8\x3\x2\x2\x2"+
		"\x8A3\x8A4\x5\x1C\xF\x2\x8A4\x8A5\a\xD7\x2\x2\x8A5\x8A7\x3\x2\x2\x2\x8A6"+
		"\x8A3\x3\x2\x2\x2\x8A7\x8AA\x3\x2\x2\x2\x8A8\x8A6\x3\x2\x2\x2\x8A8\x8A9"+
		"\x3\x2\x2\x2\x8A9\x8AB\x3\x2\x2\x2\x8AA\x8A8\x3\x2\x2\x2\x8AB\x8AC\a\xB5"+
		"\x2\x2\x8AC\xD1\x3\x2\x2\x2\x8AD\x8AE\a\xB7\x2\x2\x8AE\x8AF\a\xD9\x2\x2"+
		"\x8AF\x8B1\x5\xC8\x65\x2\x8B0\x8B2\a\xD9\x2\x2\x8B1\x8B0\x3\x2\x2\x2\x8B1"+
		"\x8B2\x3\x2\x2\x2\x8B2\x8B3\x3\x2\x2\x2\x8B3\x8B5\a\n\x2\x2\x8B4\x8B6"+
		"\a\xD9\x2\x2\x8B5\x8B4\x3\x2\x2\x2\x8B5\x8B6\x3\x2\x2\x2\x8B6\x8B7\x3"+
		"\x2\x2\x2\x8B7\x8B8\x5\xC8\x65\x2\x8B8\xD3\x3\x2\x2\x2\x8B9\x8BA\a\xB8"+
		"\x2\x2\x8BA\x8BF\a\xD9\x2\x2\x8BB\x8C0\x5\xE6t\x2\x8BC\x8BD\au\x2\x2\x8BD"+
		"\x8BE\a\xD9\x2\x2\x8BE\x8C0\x5\x116\x8C\x2\x8BF\x8BB\x3\x2\x2\x2\x8BF"+
		"\x8BC\x3\x2\x2\x2\x8C0\x8C2\x3\x2\x2\x2\x8C1\x8C3\a\xD7\x2\x2\x8C2\x8C1"+
		"\x3\x2\x2\x2\x8C3\x8C4\x3\x2\x2\x2\x8C4\x8C2\x3\x2\x2\x2\x8C4\x8C5\x3"+
		"\x2\x2\x2\x8C5\x8CC\x3\x2\x2\x2\x8C6\x8C8\x5\x1C\xF\x2\x8C7\x8C9\a\xD7"+
		"\x2\x2\x8C8\x8C7\x3\x2\x2\x2\x8C9\x8CA\x3\x2\x2\x2\x8CA\x8C8\x3\x2\x2"+
		"\x2\x8CA\x8CB\x3\x2\x2\x2\x8CB\x8CD\x3\x2\x2\x2\x8CC\x8C6\x3\x2\x2\x2"+
		"\x8CC\x8CD\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE\x8CF\a@\x2\x2\x8CF\xD5"+
		"\x3\x2\x2\x2\x8D0\x8D1\a\xBA\x2\x2\x8D1\x8D2\a\xD9\x2\x2\x8D2\x8D4\x5"+
		"\xD8m\x2\x8D3\x8D5\a\xD9\x2\x2\x8D4\x8D3\x3\x2\x2\x2\x8D4\x8D5\x3\x2\x2"+
		"\x2\x8D5\x8D6\x3\x2\x2\x2\x8D6\x8DB\a\n\x2\x2\x8D7\x8D9\a\xD9\x2\x2\x8D8"+
		"\x8D7\x3\x2\x2\x2\x8D8\x8D9\x3\x2\x2\x2\x8D9\x8DA\x3\x2\x2\x2\x8DA\x8DC"+
		"\x5\x86\x44\x2\x8DB\x8D8\x3\x2\x2\x2\x8DB\x8DC\x3\x2\x2\x2\x8DC\xD7\x3"+
		"\x2\x2\x2\x8DD\x8DF\a\x5\x2\x2\x8DE\x8DD\x3\x2\x2\x2\x8DE\x8DF\x3\x2\x2"+
		"\x2\x8DF\x8E2\x3\x2\x2\x2\x8E0\x8E3\x5\x102\x82\x2\x8E1\x8E3\a\xD2\x2"+
		"\x2\x8E2\x8E0\x3\x2\x2\x2\x8E2\x8E1\x3\x2\x2\x2\x8E3\xD9\x3\x2\x2\x2\x8E4"+
		"\x8E7\x5\xDCo\x2\x8E5\x8E7\x5\xDEp\x2\x8E6\x8E4\x3\x2\x2\x2\x8E6\x8E5"+
		"\x3\x2\x2\x2\x8E7\xDB\x3\x2\x2\x2\x8E8\x8E9\a\x1B\x2\x2\x8E9\x8EA\a\xD9"+
		"\x2\x2\x8EA\x8EC\x5\x102\x82\x2\x8EB\x8ED\x5\x118\x8D\x2\x8EC\x8EB\x3"+
		"\x2\x2\x2\x8EC\x8ED\x3\x2\x2\x2\x8ED\x8FB\x3\x2\x2\x2\x8EE\x8F0\a\xD9"+
		"\x2\x2\x8EF\x8EE\x3\x2\x2\x2\x8EF\x8F0\x3\x2\x2\x2\x8F0\x8F1\x3\x2\x2"+
		"\x2\x8F1\x8F3\a\xC3\x2\x2\x8F2\x8F4\a\xD9\x2\x2\x8F3\x8F2\x3\x2\x2\x2"+
		"\x8F3\x8F4\x3\x2\x2\x2\x8F4\x8F5\x3\x2\x2\x2\x8F5\x8F7\x5\xF2z\x2\x8F6"+
		"\x8F8\a\xD9\x2\x2\x8F7\x8F6\x3\x2\x2\x2\x8F7\x8F8\x3\x2\x2\x2\x8F8\x8F9"+
		"\x3\x2\x2\x2\x8F9\x8FA\a\xCC\x2\x2\x8FA\x8FC\x3\x2\x2\x2\x8FB\x8EF\x3"+
		"\x2\x2\x2\x8FB\x8FC\x3\x2\x2\x2\x8FC\x906\x3\x2\x2\x2\x8FD\x8FF\a\xD9"+
		"\x2\x2\x8FE\x8FD\x3\x2\x2\x2\x8FE\x8FF\x3\x2\x2\x2\x8FF\x900\x3\x2\x2"+
		"\x2\x900\x901\a\xC3\x2\x2\x901\x902\x5\xFE\x80\x2\x902\x903\a\xCC\x2\x2"+
		"\x903\x905\x3\x2\x2\x2\x904\x8FE\x3\x2\x2\x2\x905\x908\x3\x2\x2\x2\x906"+
		"\x904\x3\x2\x2\x2\x906\x907\x3\x2\x2\x2\x907\xDD\x3\x2\x2\x2\x908\x906"+
		"\x3\x2\x2\x2\x909\x90A\a\x1B\x2\x2\x90A\x90C\a\xD9\x2\x2\x90B\x90D\x5"+
		"\xE6t\x2\x90C\x90B\x3\x2\x2\x2\x90C\x90D\x3\x2\x2\x2\x90D\x90E\x3\x2\x2"+
		"\x2\x90E\x90F\a\v\x2\x2\x90F\x911\x5\x102\x82\x2\x910\x912\x5\x118\x8D"+
		"\x2\x911\x910\x3\x2\x2\x2\x911\x912\x3\x2\x2\x2\x912\x920\x3\x2\x2\x2"+
		"\x913\x915\a\xD9\x2\x2\x914\x913\x3\x2\x2\x2\x914\x915\x3\x2\x2\x2\x915"+
		"\x916\x3\x2\x2\x2\x916\x918\a\xC3\x2\x2\x917\x919\a\xD9\x2\x2\x918\x917"+
		"\x3\x2\x2\x2\x918\x919\x3\x2\x2\x2\x919\x91A\x3\x2\x2\x2\x91A\x91C\x5"+
		"\xF2z\x2\x91B\x91D\a\xD9\x2\x2\x91C\x91B\x3\x2\x2\x2\x91C\x91D\x3\x2\x2"+
		"\x2\x91D\x91E\x3\x2\x2\x2\x91E\x91F\a\xCC\x2\x2\x91F\x921\x3\x2\x2\x2"+
		"\x920\x914\x3\x2\x2\x2\x920\x921\x3\x2\x2\x2\x921\x92B\x3\x2\x2\x2\x922"+
		"\x924\a\xD9\x2\x2\x923\x922\x3\x2\x2\x2\x923\x924\x3\x2\x2\x2\x924\x925"+
		"\x3\x2\x2\x2\x925\x926\a\xC3\x2\x2\x926\x927\x5\xFE\x80\x2\x927\x928\a"+
		"\xCC\x2\x2\x928\x92A\x3\x2\x2\x2\x929\x923\x3\x2\x2\x2\x92A\x92D\x3\x2"+
		"\x2\x2\x92B\x929\x3\x2\x2\x2\x92B\x92C\x3\x2\x2\x2\x92C\xDF\x3\x2\x2\x2"+
		"\x92D\x92B\x3\x2\x2\x2\x92E\x931\x5\xE2r\x2\x92F\x931\x5\xE4s\x2\x930"+
		"\x92E\x3\x2\x2\x2\x930\x92F\x3\x2\x2\x2\x931\xE1\x3\x2\x2\x2\x932\x934"+
		"\x5\xE6t\x2\x933\x932\x3\x2\x2\x2\x933\x934\x3\x2\x2\x2\x934\x935\x3\x2"+
		"\x2\x2\x935\x936\a\v\x2\x2\x936\x938\x5\x102\x82\x2\x937\x939\x5\x118"+
		"\x8D\x2\x938\x937\x3\x2\x2\x2\x938\x939\x3\x2\x2\x2\x939\x93C\x3\x2\x2"+
		"\x2\x93A\x93B\a\xD9\x2\x2\x93B\x93D\x5\xF2z\x2\x93C\x93A\x3\x2\x2\x2\x93C"+
		"\x93D\x3\x2\x2\x2\x93D\x93F\x3\x2\x2\x2\x93E\x940\x5\xF6|\x2\x93F\x93E"+
		"\x3\x2\x2\x2\x93F\x940\x3\x2\x2\x2\x940\x94A\x3\x2\x2\x2\x941\x943\a\xD9"+
		"\x2\x2\x942\x941\x3\x2\x2\x2\x942\x943\x3\x2\x2\x2\x943\x944\x3\x2\x2"+
		"\x2\x944\x945\a\xC3\x2\x2\x945\x946\x5\xFE\x80\x2\x946\x947\a\xCC\x2\x2"+
		"\x947\x949\x3\x2\x2\x2\x948\x942\x3\x2\x2\x2\x949\x94C\x3\x2\x2\x2\x94A"+
		"\x948\x3\x2\x2\x2\x94A\x94B\x3\x2\x2\x2\x94B\xE3\x3\x2\x2\x2\x94C\x94A"+
		"\x3\x2\x2\x2\x94D\x950\x5\x108\x85\x2\x94E\x94F\a\xD9\x2\x2\x94F\x951"+
		"\x5\xF2z\x2\x950\x94E\x3\x2\x2\x2\x950\x951\x3\x2\x2\x2\x951\x95B\x3\x2"+
		"\x2\x2\x952\x954\a\xD9\x2\x2\x953\x952\x3\x2\x2\x2\x953\x954\x3\x2\x2"+
		"\x2\x954\x955\x3\x2\x2\x2\x955\x956\a\xC3\x2\x2\x956\x957\x5\xFE\x80\x2"+
		"\x957\x958\a\xCC\x2\x2\x958\x95A\x3\x2\x2\x2\x959\x953\x3\x2\x2\x2\x95A"+
		"\x95D\x3\x2\x2\x2\x95B\x959\x3\x2\x2\x2\x95B\x95C\x3\x2\x2\x2\x95C\xE5"+
		"\x3\x2\x2\x2\x95D\x95B\x3\x2\x2\x2\x95E\x963\x5\xECw\x2\x95F\x963\x5\xE8"+
		"u\x2\x960\x963\x5\xEAv\x2\x961\x963\x5\xF0y\x2\x962\x95E\x3\x2\x2\x2\x962"+
		"\x95F\x3\x2\x2\x2\x962\x960\x3\x2\x2\x2\x962\x961\x3\x2\x2\x2\x963\xE7"+
		"\x3\x2\x2\x2\x964\x966\x5\x102\x82\x2\x965\x967\x5\x118\x8D\x2\x966\x965"+
		"\x3\x2\x2\x2\x966\x967\x3\x2\x2\x2\x967\x969\x3\x2\x2\x2\x968\x96A\x5"+
		"\xF6|\x2\x969\x968\x3\x2\x2\x2\x969\x96A\x3\x2\x2\x2\x96A\x974\x3\x2\x2"+
		"\x2\x96B\x96D\a\xD9\x2\x2\x96C\x96B\x3\x2\x2\x2\x96C\x96D\x3\x2\x2\x2"+
		"\x96D\x96E\x3\x2\x2\x2\x96E\x96F\a\xC3\x2\x2\x96F\x970\x5\xFE\x80\x2\x970"+
		"\x971\a\xCC\x2\x2\x971\x973\x3\x2\x2\x2\x972\x96C\x3\x2\x2\x2\x973\x976"+
		"\x3\x2\x2\x2\x974\x972\x3\x2\x2\x2\x974\x975\x3\x2\x2\x2\x975\xE9\x3\x2"+
		"\x2\x2\x976\x974\x3\x2\x2\x2\x977\x97A\x5\x102\x82\x2\x978\x97A\x5\x106"+
		"\x84\x2\x979\x977\x3\x2\x2\x2\x979\x978\x3\x2\x2\x2\x97A\x97C\x3\x2\x2"+
		"\x2\x97B\x97D\x5\x118\x8D\x2\x97C\x97B\x3\x2\x2\x2\x97C\x97D\x3\x2\x2"+
		"\x2\x97D\x97F\x3\x2\x2\x2\x97E\x980\a\xD9\x2\x2\x97F\x97E\x3\x2\x2\x2"+
		"\x97F\x980\x3\x2\x2\x2\x980\x981\x3\x2\x2\x2\x981\x983\a\xC3\x2\x2\x982"+
		"\x984\a\xD9\x2\x2\x983\x982\x3\x2\x2\x2\x983\x984\x3\x2\x2\x2\x984\x989"+
		"\x3\x2\x2\x2\x985\x987\x5\xF2z\x2\x986\x988\a\xD9\x2\x2\x987\x986\x3\x2"+
		"\x2\x2\x987\x988\x3\x2\x2\x2\x988\x98A\x3\x2\x2\x2\x989\x985\x3\x2\x2"+
		"\x2\x989\x98A\x3\x2\x2\x2\x98A\x98B\x3\x2\x2\x2\x98B\x98D\a\xCC\x2\x2"+
		"\x98C\x98E\x5\xF6|\x2\x98D\x98C\x3\x2\x2\x2\x98D\x98E\x3\x2\x2\x2\x98E"+
		"\x998\x3\x2\x2\x2\x98F\x991\a\xD9\x2\x2\x990\x98F\x3\x2\x2\x2\x990\x991"+
		"\x3\x2\x2\x2\x991\x992\x3\x2\x2\x2\x992\x993\a\xC3\x2\x2\x993\x994\x5"+
		"\xFE\x80\x2\x994\x995\a\xCC\x2\x2\x995\x997\x3\x2\x2\x2\x996\x990\x3\x2"+
		"\x2\x2\x997\x99A\x3\x2\x2\x2\x998\x996\x3\x2\x2\x2\x998\x999\x3\x2\x2"+
		"\x2\x999\xEB\x3\x2\x2\x2\x99A\x998\x3\x2\x2\x2\x99B\x99E\x5\xE8u\x2\x99C"+
		"\x99E\x5\xEAv\x2\x99D\x99B\x3\x2\x2\x2\x99D\x99C\x3\x2\x2\x2\x99D\x99E"+
		"\x3\x2\x2\x2\x99E\x9A0\x3\x2\x2\x2\x99F\x9A1\x5\xEEx\x2\x9A0\x99F\x3\x2"+
		"\x2\x2\x9A1\x9A2\x3\x2\x2\x2\x9A2\x9A0\x3\x2\x2\x2\x9A2\x9A3\x3\x2\x2"+
		"\x2\x9A3\x9A5\x3\x2\x2\x2\x9A4\x9A6\x5\xF6|\x2\x9A5\x9A4\x3\x2\x2\x2\x9A5"+
		"\x9A6\x3\x2\x2\x2\x9A6\x9B0\x3\x2\x2\x2\x9A7\x9A9\a\xD9\x2\x2\x9A8\x9A7"+
		"\x3\x2\x2\x2\x9A8\x9A9\x3\x2\x2\x2\x9A9\x9AA\x3\x2\x2\x2\x9AA\x9AB\a\xC3"+
		"\x2\x2\x9AB\x9AC\x5\xFE\x80\x2\x9AC\x9AD\a\xCC\x2\x2\x9AD\x9AF\x3\x2\x2"+
		"\x2\x9AE\x9A8\x3\x2\x2\x2\x9AF\x9B2\x3\x2\x2\x2\x9B0\x9AE\x3\x2\x2\x2"+
		"\x9B0\x9B1\x3\x2\x2\x2\x9B1\xED\x3\x2\x2\x2\x9B2\x9B0\x3\x2\x2\x2\x9B3"+
		"\x9B6\t\r\x2\x2\x9B4\x9B7\x5\xE8u\x2\x9B5\x9B7\x5\xEAv\x2\x9B6\x9B4\x3"+
		"\x2\x2\x2\x9B6\x9B5\x3\x2\x2\x2\x9B7\xEF\x3\x2\x2\x2\x9B8\x9B9\x5\xF6"+
		"|\x2\x9B9\xF1\x3\x2\x2\x2\x9BA\x9BC\x5\xF4{\x2\x9BB\x9BA\x3\x2\x2\x2\x9BB"+
		"\x9BC\x3\x2\x2\x2\x9BC\x9BE\x3\x2\x2\x2\x9BD\x9BF\a\xD9\x2\x2\x9BE\x9BD"+
		"\x3\x2\x2\x2\x9BE\x9BF\x3\x2\x2\x2\x9BF\x9C0\x3\x2\x2\x2\x9C0\x9C2\t\v"+
		"\x2\x2\x9C1\x9C3\a\xD9\x2\x2\x9C2\x9C1\x3\x2\x2\x2\x9C2\x9C3\x3\x2\x2"+
		"\x2\x9C3\x9C5\x3\x2\x2\x2\x9C4\x9BB\x3\x2\x2\x2\x9C5\x9C8\x3\x2\x2\x2"+
		"\x9C6\x9C4\x3\x2\x2\x2\x9C6\x9C7\x3\x2\x2\x2\x9C7\x9C9\x3\x2\x2\x2\x9C8"+
		"\x9C6\x3\x2\x2\x2\x9C9\x9D6\x5\xF4{\x2\x9CA\x9CC\a\xD9\x2\x2\x9CB\x9CA"+
		"\x3\x2\x2\x2\x9CB\x9CC\x3\x2\x2\x2\x9CC\x9CD\x3\x2\x2\x2\x9CD\x9CF\t\v"+
		"\x2\x2\x9CE\x9D0\a\xD9\x2\x2\x9CF\x9CE\x3\x2\x2\x2\x9CF\x9D0\x3\x2\x2"+
		"\x2\x9D0\x9D2\x3\x2\x2\x2\x9D1\x9D3\x5\xF4{\x2\x9D2\x9D1\x3\x2\x2\x2\x9D2"+
		"\x9D3\x3\x2\x2\x2\x9D3\x9D5\x3\x2\x2\x2\x9D4\x9CB\x3\x2\x2\x2\x9D5\x9D8"+
		"\x3\x2\x2\x2\x9D6\x9D4\x3\x2\x2\x2\x9D6\x9D7\x3\x2\x2\x2\x9D7\xF3\x3\x2"+
		"\x2\x2\x9D8\x9D6\x3\x2\x2\x2\x9D9\x9DA\t\xE\x2\x2\x9DA\x9DC\a\xD9\x2\x2"+
		"\x9DB\x9D9\x3\x2\x2\x2\x9DB\x9DC\x3\x2\x2\x2\x9DC\x9DD\x3\x2\x2\x2\x9DD"+
		"\x9DE\x5\xC8\x65\x2\x9DE\xF5\x3\x2\x2\x2\x9DF\x9E0\a\x4\x2\x2\x9E0\x9E2"+
		"\x5\x102\x82\x2\x9E1\x9E3\x5\x118\x8D\x2\x9E2\x9E1\x3\x2\x2\x2\x9E2\x9E3"+
		"\x3\x2\x2\x2\x9E3\xF7\x3\x2\x2\x2\x9E4\x9F6\a\xC3\x2\x2\x9E5\x9E7\a\xD9"+
		"\x2\x2\x9E6\x9E5\x3\x2\x2\x2\x9E6\x9E7\x3\x2\x2\x2\x9E7\x9E8\x3\x2\x2"+
		"\x2\x9E8\x9F3\x5\xFA~\x2\x9E9\x9EB\a\xD9\x2\x2\x9EA\x9E9\x3\x2\x2\x2\x9EA"+
		"\x9EB\x3\x2\x2\x2\x9EB\x9EC\x3\x2\x2\x2\x9EC\x9EE\a\n\x2\x2\x9ED\x9EF"+
		"\a\xD9\x2\x2\x9EE\x9ED\x3\x2\x2\x2\x9EE\x9EF\x3\x2\x2\x2\x9EF\x9F0\x3"+
		"\x2\x2\x2\x9F0\x9F2\x5\xFA~\x2\x9F1\x9EA\x3\x2\x2\x2\x9F2\x9F5\x3\x2\x2"+
		"\x2\x9F3\x9F1\x3\x2\x2\x2\x9F3\x9F4\x3\x2\x2\x2\x9F4\x9F7\x3\x2\x2\x2"+
		"\x9F5\x9F3\x3\x2\x2\x2\x9F6\x9E6\x3\x2\x2\x2\x9F6\x9F7\x3\x2\x2\x2\x9F7"+
		"\x9F9\x3\x2\x2\x2\x9F8\x9FA\a\xD9\x2\x2\x9F9\x9F8\x3\x2\x2\x2\x9F9\x9FA"+
		"\x3\x2\x2\x2\x9FA\x9FB\x3\x2\x2\x2\x9FB\x9FC\a\xCC\x2\x2\x9FC\xF9\x3\x2"+
		"\x2\x2\x9FD\x9FE\a|\x2\x2\x9FE\xA00\a\xD9\x2\x2\x9FF\x9FD\x3\x2\x2\x2"+
		"\x9FF\xA00\x3\x2\x2\x2\xA00\xA03\x3\x2\x2\x2\xA01\xA02\t\xF\x2\x2\xA02"+
		"\xA04\a\xD9\x2\x2\xA03\xA01\x3\x2\x2\x2\xA03\xA04\x3\x2\x2\x2\xA04\xA07"+
		"\x3\x2\x2\x2\xA05\xA06\a\x83\x2\x2\xA06\xA08\a\xD9\x2\x2\xA07\xA05\x3"+
		"\x2\x2\x2\xA07\xA08\x3\x2\x2\x2\xA08\xA09\x3\x2\x2\x2\xA09\xA12\x5\x102"+
		"\x82\x2\xA0A\xA0C\a\xD9\x2\x2\xA0B\xA0A\x3\x2\x2\x2\xA0B\xA0C\x3\x2\x2"+
		"\x2\xA0C\xA0D\x3\x2\x2\x2\xA0D\xA0F\a\xC3\x2\x2\xA0E\xA10\a\xD9\x2\x2"+
		"\xA0F\xA0E\x3\x2\x2\x2\xA0F\xA10\x3\x2\x2\x2\xA10\xA11\x3\x2\x2\x2\xA11"+
		"\xA13\a\xCC\x2\x2\xA12\xA0B\x3\x2\x2\x2\xA12\xA13\x3\x2\x2\x2\xA13\xA16"+
		"\x3\x2\x2\x2\xA14\xA15\a\xD9\x2\x2\xA15\xA17\x5\x104\x83\x2\xA16\xA14"+
		"\x3\x2\x2\x2\xA16\xA17\x3\x2\x2\x2\xA17\xA1C\x3\x2\x2\x2\xA18\xA1A\a\xD9"+
		"\x2\x2\xA19\xA18\x3\x2\x2\x2\xA19\xA1A\x3\x2\x2\x2\xA1A\xA1B\x3\x2\x2"+
		"\x2\xA1B\xA1D\x5\xFC\x7F\x2\xA1C\xA19\x3\x2\x2\x2\xA1C\xA1D\x3\x2\x2\x2"+
		"\xA1D\xFB\x3\x2\x2\x2\xA1E\xA20\a\xBF\x2\x2\xA1F\xA21\a\xD9\x2\x2\xA20"+
		"\xA1F\x3\x2\x2\x2\xA20\xA21\x3\x2\x2\x2\xA21\xA24\x3\x2\x2\x2\xA22\xA25"+
		"\x5\x114\x8B\x2\xA23\xA25\x5\x102\x82\x2\xA24\xA22\x3\x2\x2\x2\xA24\xA23"+
		"\x3\x2\x2\x2\xA25\xFD\x3\x2\x2\x2\xA26\xA31\x5\x100\x81\x2\xA27\xA29\a"+
		"\xD9\x2\x2\xA28\xA27\x3\x2\x2\x2\xA28\xA29\x3\x2\x2\x2\xA29\xA2A\x3\x2"+
		"\x2\x2\xA2A\xA2C\a\n\x2\x2\xA2B\xA2D\a\xD9\x2\x2\xA2C\xA2B\x3\x2\x2\x2"+
		"\xA2C\xA2D\x3\x2\x2\x2\xA2D\xA2E\x3\x2\x2\x2\xA2E\xA30\x5\x100\x81\x2"+
		"\xA2F\xA28\x3\x2\x2\x2\xA30\xA33\x3\x2\x2\x2\xA31\xA2F\x3\x2\x2\x2\xA31"+
		"\xA32\x3\x2\x2\x2\xA32\xFF\x3\x2\x2\x2\xA33\xA31\x3\x2\x2\x2\xA34\xA35"+
		"\x5\xC8\x65\x2\xA35\xA36\a\xD9\x2\x2\xA36\xA37\a\xAC\x2\x2\xA37\xA38\a"+
		"\xD9\x2\x2\xA38\xA3A\x3\x2\x2\x2\xA39\xA34\x3\x2\x2\x2\xA39\xA3A\x3\x2"+
		"\x2\x2\xA3A\xA3B\x3\x2\x2\x2\xA3B\xA3C\x5\xC8\x65\x2\xA3C\x101\x3\x2\x2"+
		"\x2\xA3D\xA40\a\xD5\x2\x2\xA3E\xA40\x5\x11C\x8F\x2\xA3F\xA3D\x3\x2\x2"+
		"\x2\xA3F\xA3E\x3\x2\x2\x2\xA40\xA41\x3\x2\x2\x2\xA41\xA3F\x3\x2\x2\x2"+
		"\xA41\xA42\x3\x2\x2\x2\xA42\xA4C\x3\x2\x2\x2\xA43\xA46\a\xCD\x2\x2\xA44"+
		"\xA47\a\xD5\x2\x2\xA45\xA47\x5\x11C\x8F\x2\xA46\xA44\x3\x2\x2\x2\xA46"+
		"\xA45\x3\x2\x2\x2\xA47\xA48\x3\x2\x2\x2\xA48\xA46\x3\x2\x2\x2\xA48\xA49"+
		"\x3\x2\x2\x2\xA49\xA4A\x3\x2\x2\x2\xA4A\xA4C\a\xCE\x2\x2\xA4B\xA3F\x3"+
		"\x2\x2\x2\xA4B\xA43\x3\x2\x2\x2\xA4C\x103\x3\x2\x2\x2\xA4D\xA4E\a\x13"+
		"\x2\x2\xA4E\xA51\a\xD9\x2\x2\xA4F\xA50\au\x2\x2\xA50\xA52\a\xD9\x2\x2"+
		"\xA51\xA4F\x3\x2\x2\x2\xA51\xA52\x3\x2\x2\x2\xA52\xA53\x3\x2\x2\x2\xA53"+
		"\xA56\x5\x116\x8C\x2\xA54\xA55\a\xD9\x2\x2\xA55\xA57\x5\x10E\x88\x2\xA56"+
		"\xA54\x3\x2\x2\x2\xA56\xA57\x3\x2\x2\x2\xA57\x105\x3\x2\x2\x2\xA58\xA59"+
		"\t\x10\x2\x2\xA59\x107\x3\x2\x2\x2\xA5A\xA5F\a\xD5\x2\x2\xA5B\xA5E\x5"+
		"\x11C\x8F\x2\xA5C\xA5E\a\xD5\x2\x2\xA5D\xA5B\x3\x2\x2\x2\xA5D\xA5C\x3"+
		"\x2\x2\x2\xA5E\xA61\x3\x2\x2\x2\xA5F\xA5D\x3\x2\x2\x2\xA5F\xA60\x3\x2"+
		"\x2\x2\xA60\xA6A\x3\x2\x2\x2\xA61\xA5F\x3\x2\x2\x2\xA62\xA65\x5\x11C\x8F"+
		"\x2\xA63\xA66\x5\x11C\x8F\x2\xA64\xA66\a\xD5\x2\x2\xA65\xA63\x3\x2\x2"+
		"\x2\xA65\xA64\x3\x2\x2\x2\xA66\xA67\x3\x2\x2\x2\xA67\xA65\x3\x2\x2\x2"+
		"\xA67\xA68\x3\x2\x2\x2\xA68\xA6A\x3\x2\x2\x2\xA69\xA5A\x3\x2\x2\x2\xA69"+
		"\xA62\x3\x2\x2\x2\xA6A\x109\x3\x2\x2\x2\xA6B\xA6C\t\x11\x2\x2\xA6C\x10B"+
		"\x3\x2\x2\x2\xA6D\xA72\x5\x102\x82\x2\xA6E\xA6F\t\r\x2\x2\xA6F\xA71\x5"+
		"\x102\x82\x2\xA70\xA6E\x3\x2\x2\x2\xA71\xA74\x3\x2\x2\x2\xA72\xA70\x3"+
		"\x2\x2\x2\xA72\xA73\x3\x2\x2\x2\xA73\x10D\x3\x2\x2\x2\xA74\xA72\x3\x2"+
		"\x2\x2\xA75\xA77\a\xC7\x2\x2\xA76\xA78\a\xD9\x2\x2\xA77\xA76\x3\x2\x2"+
		"\x2\xA77\xA78\x3\x2\x2\x2\xA78\xA7B\x3\x2\x2\x2\xA79\xA7C\a\xD2\x2\x2"+
		"\xA7A\xA7C\x5\x102\x82\x2\xA7B\xA79\x3\x2\x2\x2\xA7B\xA7A\x3\x2\x2\x2"+
		"\xA7C\x10F\x3\x2\x2\x2\xA7D\xA86\x5\x108\x85\x2\xA7E\xA80\a\xD9\x2\x2"+
		"\xA7F\xA7E\x3\x2\x2\x2\xA7F\xA80\x3\x2\x2\x2\xA80\xA81\x3\x2\x2\x2\xA81"+
		"\xA83\a\xC5\x2\x2\xA82\xA84\a\xD9\x2\x2\xA83\xA82\x3\x2\x2\x2\xA83\xA84"+
		"\x3\x2\x2\x2\xA84\xA85\x3\x2\x2\x2\xA85\xA87\x5\x108\x85\x2\xA86\xA7F"+
		"\x3\x2\x2\x2\xA86\xA87\x3\x2\x2\x2\xA87\x111\x3\x2\x2\x2\xA88\xA89\x5"+
		"\x102\x82\x2\xA89\xA8A\a\b\x2\x2\xA8A\x113\x3\x2\x2\x2\xA8B\xA8C\t\x12"+
		"\x2\x2\xA8C\x115\x3\x2\x2\x2\xA8D\xA90\x5\x106\x84\x2\xA8E\xA90\x5\x10C"+
		"\x87\x2\xA8F\xA8D\x3\x2\x2\x2\xA8F\xA8E\x3\x2\x2\x2\xA90\xA99\x3\x2\x2"+
		"\x2\xA91\xA93\a\xD9\x2\x2\xA92\xA91\x3\x2\x2\x2\xA92\xA93\x3\x2\x2\x2"+
		"\xA93\xA94\x3\x2\x2\x2\xA94\xA96\a\xC3\x2\x2\xA95\xA97\a\xD9\x2\x2\xA96"+
		"\xA95\x3\x2\x2\x2\xA96\xA97\x3\x2\x2\x2\xA97\xA98\x3\x2\x2\x2\xA98\xA9A"+
		"\a\xCC\x2\x2\xA99\xA92\x3\x2\x2\x2\xA99\xA9A\x3\x2\x2\x2\xA9A\x117\x3"+
		"\x2\x2\x2\xA9B\xA9C\t\x13\x2\x2\xA9C\x119\x3\x2\x2\x2\xA9D\xA9E\t\x14"+
		"\x2\x2\xA9E\x11B\x3\x2\x2\x2\xA9F\xAA0\t\x15\x2\x2\xAA0\x11D\x3\x2\x2"+
		"\x2\x1CE\x122\x127\x12E\x130\x133\x138\x13C\x141\x145\x14A\x14E\x153\x157"+
		"\x163\x168\x16E\x172\x176\x17F\x183\x189\x18E\x199\x1A3\x1A9\x1AE\x1B8"+
		"\x1C0\x1C4\x1C8\x1CC\x1D1\x1D8\x1DC\x1E1\x1E7\x22D\x233\x237\x23A\x24A"+
		"\x24E\x253\x256\x25B\x261\x265\x26A\x26F\x273\x276\x27A\x280\x284\x28B"+
		"\x291\x29E\x2A1\x2A4\x2A8\x2AE\x2B2\x2B7\x2BE\x2C2\x2C6\x2CA\x2CD\x2D3"+
		"\x2D9\x2DB\x2E6\x2EC\x2EE\x2F6\x2FC\x304\x30B\x313\x318\x31F\x323\x326"+
		"\x32B\x338\x33E\x348\x34C\x356\x35F\x365\x367\x36C\x372\x376\x379\x37D"+
		"\x388\x38D\x393\x395\x39A\x39F\x3A3\x3A9\x3AC\x3B0\x3B5\x3BB\x3BD\x3C5"+
		"\x3C9\x3CC\x3CF\x3D3\x3EA\x3F0\x3F4\x3F8\x402\x408\x40A\x416\x41C\x41E"+
		"\x424\x42A\x42C\x436\x43A\x43F\x447\x44B\x44F\x457\x45B\x467\x46B\x472"+
		"\x474\x47A\x47E\x484\x488\x48C\x494\x498\x49E\x4A6\x4AC\x4AE\x4B2\x4BA"+
		"\x4C0\x4C2\x4C8\x4CE\x4D0\x4D4\x4D8\x4DC\x4F4\x4FE\x502\x507\x512\x516"+
		"\x51B\x529\x52D\x536\x53A\x53D\x541\x545\x548\x54C\x550\x553\x557\x55A"+
		"\x55E\x560\x565\x569\x56D\x571\x573\x579\x57D\x580\x585\x589\x58F\x592"+
		"\x596\x59B\x5A1\x5A3\x5AA\x5AE\x5B4\x5B7\x5BC\x5C2\x5C4\x5CB\x5CF\x5D5"+
		"\x5D8\x5DD\x5E3\x5E5\x5ED\x5F1\x5F4\x5F7\x5FB\x603\x607\x60B\x60D\x610"+
		"\x615\x61B\x61F\x623\x628\x62D\x631\x635\x63A\x642\x644\x650\x654\x65C"+
		"\x660\x668\x66C\x670\x674\x678\x67C\x684\x688\x694\x699\x69D\x6A5\x6A8"+
		"\x6AD\x6B3\x6B5\x6BB\x6BD\x6C2\x6C6\x6CC\x6D0\x6D5\x6DE\x6E2\x6E7\x6EA"+
		"\x6F0\x6F4\x6F7\x6FD\x701\x709\x70D\x716\x71A\x720\x723\x728\x72E\x730"+
		"\x736\x73A\x741\x749\x74E\x755\x759\x75C\x75F\x762\x766\x76B\x774\x77E"+
		"\x782\x789\x78B\x796\x79A\x7A0\x7A5\x7AF\x7B3\x7B7\x7BC\x7C3\x7D1\x7D5"+
		"\x7DA\x7DE\x7E3\x7E7\x7EC\x7F0\x7F5\x7F9\x7FE\x802\x80C\x810\x815\x819"+
		"\x81E\x822\x827\x82B\x830\x834\x839\x83D\x84C\x850\x855\x859\x861\x863"+
		"\x869\x86E\x874\x878\x87D\x882\x886\x88A\x88C\x890\x892\x895\x899\x8A1"+
		"\x8A8\x8B1\x8B5\x8BF\x8C4\x8CA\x8CC\x8D4\x8D8\x8DB\x8DE\x8E2\x8E6\x8EC"+
		"\x8EF\x8F3\x8F7\x8FB\x8FE\x906\x90C\x911\x914\x918\x91C\x920\x923\x92B"+
		"\x930\x933\x938\x93C\x93F\x942\x94A\x950\x953\x95B\x962\x966\x969\x96C"+
		"\x974\x979\x97C\x97F\x983\x987\x989\x98D\x990\x998\x99D\x9A2\x9A5\x9A8"+
		"\x9B0\x9B6\x9BB\x9BE\x9C2\x9C6\x9CB\x9CF\x9D2\x9D6\x9DB\x9E2\x9E6\x9EA"+
		"\x9EE\x9F3\x9F6\x9F9\x9FF\xA03\xA07\xA0B\xA0F\xA12\xA16\xA19\xA1C\xA20"+
		"\xA24\xA28\xA2C\xA31\xA39\xA3F\xA41\xA46\xA48\xA4B\xA51\xA56\xA5D\xA5F"+
		"\xA65\xA67\xA69\xA72\xA77\xA7B\xA7F\xA83\xA86\xA8F\xA92\xA96\xA99";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Grammar
