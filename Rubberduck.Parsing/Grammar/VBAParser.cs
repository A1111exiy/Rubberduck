//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from H:\Repositories\Rubberduck\Rubberduck.Parsing\Grammar\VBAParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		PRINT=158, ELSEIF=88, CBYTE=7, CLOSE=65, STATIC=182, MINUS=214, OPTION_EXPLICIT=151, 
		L_SQUARE_BRACKET=220, DOEVENTS=23, DATELITERAL=227, ERROR=102, NOTHING=142, 
		EACH=86, SUB=186, STOP=184, LPAREN=212, MID=136, CVERR=21, AS=55, END_PROPERTY=93, 
		AT=45, DATABASE=67, GOSUB=115, CSNG=17, POW=218, DOLLAR=47, PROPERTY_LET=161, 
		THEN=189, XOR=204, EXIT_FOR=105, DEFINT=75, UNLOCK=194, CALL=62, LOCK_READ=131, 
		SET=178, BF=5, LOCK_READ_WRITE=133, ABS=1, LSET=134, RAISEEVENT=167, SEEK=176, 
		LONG=125, CBOOL=6, LIB=128, DIM=83, APPEND=54, OPEN=148, DIV=206, PROPERTY_SET=162, 
		CDBL=10, PERCENT=46, END_SELECT=94, STRING=185, SGN=37, REM=171, TO=190, 
		DEFDBL=73, BYVAL=59, FRIEND=110, LOOP=126, CLASS=64, DO=84, VARIANT=196, 
		END_WITH=97, DEFBOOL=70, OPTIONAL=149, ADDRESSOF=50, CONST=66, RSET=175, 
		INTEGER=123, CDEC=11, ATTRIBUTE=53, OUTPUT=155, FOR=111, PTRSAFE=163, 
		EQ=208, BOOLEAN=58, CIRCLE=13, NAME=138, END_FUNCTION=91, DEFSNG=80, DEFBYTE=71, 
		NOT=141, CINT=12, END=98, PRESERVE=157, ON_LOCAL_ERROR=147, FLOATLITERAL=225, 
		BINARY=57, B_CHAR=4, LENB=30, RETURN=174, EXCLAMATIONPOINT=42, NEXT=139, 
		GLOBAL=114, INPUTB=26, IDENTIFIER=233, WS=231, EMPTY=89, CURRENCY=19, 
		CCUR=8, MOD=137, WITHEVENTS=202, COLON=40, DEFLNGLNG=77, STEP=183, OPTION_BASE=150, 
		GT=210, PUT=165, WITH=201, CSTR=18, LOCK_WRITE=132, LINE_CONTINUATION=234, 
		TYPEOF=193, DEFVAR=82, DEFLNG=76, UBOUND=38, FALSE=109, ERRORCHAR=235, 
		UNDERSCORE=230, INTEGERLITERAL=226, END_IF=92, LOCK=124, TEXT=188, SINGLEQUOTE=229, 
		MULT=215, SEMICOLON=41, BYTE=61, HEXLITERAL=224, ELSE=87, IF=117, TYPE=192, 
		AMPERSAND=48, DEFLNGPTR=78, ENUM=99, DEFOBJ=79, IN=120, OPTION=34, DOT=43, 
		EXIT_DO=104, GUIDLITERAL=232, IS=122, EQV=100, WEND=198, FUNCTION=112, 
		HASH=44, CASE=63, GEQ=209, GET=113, PUBLIC=164, ON_ERROR=146, EXIT=24, 
		MIDB=33, END_ENUM=90, GOTO=116, INTDIV=207, LONGPTR=32, WIDTH=200, BEGIN=56, 
		EXIT_SUB=108, ASSIGN=205, WRITE=203, DOUBLE=85, EXIT_PROPERTY=107, COMMA=39, 
		RANDOM=166, PROPERTY_GET=160, SELECT=177, PRIVATE=159, ERASE=101, TAB=187, 
		BYREF=60, VERSION=197, NEQ=216, END_TYPE=96, NEW=140, ARRAY=3, INPUT=121, 
		SINGLE=180, ALIAS=51, SPC=181, LT=213, RESET=172, END_SUB=95, EVENT=103, 
		READ_WRITE=169, OPTION_COMPARE=152, ME=135, SCALE=36, CDATE=9, NULL=143, 
		NEWLINE=228, TRUE=191, RPAREN=219, OBJECT=144, IMP=118, STRINGLITERAL=222, 
		OCTLITERAL=223, READ=168, DATE=68, LIKE=129, AND=52, OPTION_PRIVATE_MODULE=153, 
		CLNGLNG=15, PLUS=217, ANY=2, RESUME=173, INT=27, SHARED=179, EXIT_FUNCTION=106, 
		PSET=35, ACCESS=49, LINE_INPUT=130, ON=145, OR=154, PARAMARRAY=156, LBOUND=28, 
		R_SQUARE_BRACKET=221, IMPLEMENTS=119, UNTIL=195, DEBUG=22, DEFCUR=74, 
		CLNGPTR=16, LONGLONG=31, DECLARE=69, DEFDATE=72, FIX=25, LEN=29, REDIM=170, 
		LEQ=211, DEFSTR=81, LET=127, WHILE=199, CVAR=20, CLNG=14;
	public static readonly string[] tokenNames = {
		"<INVALID>", "ABS", "ANY", "ARRAY", "B_CHAR", "BF", "CBOOL", "CBYTE", 
		"CCUR", "CDATE", "CDBL", "CDEC", "CINT", "CIRCLE", "CLNG", "CLNGLNG", 
		"CLNGPTR", "CSNG", "CSTR", "CURRENCY", "CVAR", "CVERR", "DEBUG", "DOEVENTS", 
		"EXIT", "FIX", "INPUTB", "INT", "LBOUND", "LEN", "LENB", "LONGLONG", "LONGPTR", 
		"MIDB", "OPTION", "PSET", "SCALE", "SGN", "UBOUND", "','", "':'", "';'", 
		"'!'", "'.'", "'#'", "'@'", "'%'", "'$'", "'&'", "ACCESS", "ADDRESSOF", 
		"ALIAS", "AND", "ATTRIBUTE", "APPEND", "AS", "BEGIN", "BINARY", "BOOLEAN", 
		"BYVAL", "BYREF", "BYTE", "CALL", "CASE", "CLASS", "CLOSE", "CONST", "DATABASE", 
		"DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFCUR", 
		"DEFINT", "DEFLNG", "DEFLNGLNG", "DEFLNGPTR", "DEFOBJ", "DEFSNG", "DEFSTR", 
		"DEFVAR", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", "EMPTY", "END_ENUM", 
		"END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", "END_TYPE", 
		"END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", "EXIT_DO", 
		"EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", "FRIEND", 
		"FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", "IF", "IMP", "IMPLEMENTS", 
		"IN", "INPUT", "IS", "INTEGER", "LOCK", "LONG", "LOOP", "LET", "LIB", 
		"LIKE", "LINE_INPUT", "LOCK_READ", "LOCK_WRITE", "LOCK_READ_WRITE", "LSET", 
		"ME", "MID", "MOD", "NAME", "NEXT", "NEW", "NOT", "NOTHING", "NULL", "OBJECT", 
		"ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM", "RAISEEVENT", "READ", 
		"READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RSET", "SEEK", 
		"SELECT", "SET", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", 
		"STRING", "SUB", "TAB", "TEXT", "THEN", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", "WITH", 
		"WITHEVENTS", "WRITE", "XOR", "':='", "'/'", "'\\'", "'='", "GEQ", "'>'", 
		"LEQ", "'('", "'<'", "'-'", "'*'", "NEQ", "'+'", "'^'", "')'", "'['", 
		"']'", "STRINGLITERAL", "OCTLITERAL", "HEXLITERAL", "FLOATLITERAL", "INTEGERLITERAL", 
		"DATELITERAL", "NEWLINE", "'''", "'_'", "WS", "GUIDLITERAL", "IDENTIFIER", 
		"LINE_CONTINUATION", "ERRORCHAR"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_attributeStmt = 6, 
		RULE_attributeName = 7, RULE_attributeValue = 8, RULE_moduleDeclarations = 9, 
		RULE_moduleOption = 10, RULE_moduleDeclarationsElement = 11, RULE_moduleBody = 12, 
		RULE_moduleBodyElement = 13, RULE_block = 14, RULE_blockStmt = 15, RULE_fileStmt = 16, 
		RULE_openStmt = 17, RULE_pathName = 18, RULE_modeClause = 19, RULE_fileMode = 20, 
		RULE_accessClause = 21, RULE_access = 22, RULE_lock = 23, RULE_lenClause = 24, 
		RULE_recLength = 25, RULE_fileNumber = 26, RULE_markedFileNumber = 27, 
		RULE_unmarkedFileNumber = 28, RULE_closeStmt = 29, RULE_resetStmt = 30, 
		RULE_fileNumberList = 31, RULE_seekStmt = 32, RULE_position = 33, RULE_lockStmt = 34, 
		RULE_recordRange = 35, RULE_startRecordNumber = 36, RULE_endRecordNumber = 37, 
		RULE_unlockStmt = 38, RULE_lineInputStmt = 39, RULE_variableName = 40, 
		RULE_widthStmt = 41, RULE_lineWidth = 42, RULE_debugPrintStmt = 43, RULE_debugPrint = 44, 
		RULE_debugModule = 45, RULE_debugPrintSub = 46, RULE_printStmt = 47, RULE_outputList = 48, 
		RULE_outputItem = 49, RULE_outputClause = 50, RULE_charPosition = 51, 
		RULE_outputExpression = 52, RULE_spcClause = 53, RULE_spcNumber = 54, 
		RULE_tabClause = 55, RULE_tabNumberClause = 56, RULE_tabNumber = 57, RULE_writeStmt = 58, 
		RULE_inputStmt = 59, RULE_inputList = 60, RULE_inputVariable = 61, RULE_putStmt = 62, 
		RULE_recordNumber = 63, RULE_data = 64, RULE_getStmt = 65, RULE_variable = 66, 
		RULE_constStmt = 67, RULE_constSubStmt = 68, RULE_declareStmt = 69, RULE_argList = 70, 
		RULE_arg = 71, RULE_argDefaultValue = 72, RULE_defDirective = 73, RULE_defType = 74, 
		RULE_letterSpec = 75, RULE_singleLetter = 76, RULE_universalLetterRange = 77, 
		RULE_upperCaseA = 78, RULE_upperCaseZ = 79, RULE_letterRange = 80, RULE_firstLetter = 81, 
		RULE_lastLetter = 82, RULE_doLoopStmt = 83, RULE_enumerationStmt = 84, 
		RULE_enumerationStmt_Constant = 85, RULE_endStmt = 86, RULE_eraseStmt = 87, 
		RULE_errorStmt = 88, RULE_eventStmt = 89, RULE_exitStmt = 90, RULE_forEachStmt = 91, 
		RULE_forNextStmt = 92, RULE_functionStmt = 93, RULE_functionName = 94, 
		RULE_goSubStmt = 95, RULE_goToStmt = 96, RULE_ifStmt = 97, RULE_elseIfBlock = 98, 
		RULE_elseBlock = 99, RULE_singleLineIfStmt = 100, RULE_ifWithNonEmptyThen = 101, 
		RULE_ifWithEmptyThen = 102, RULE_singleLineElseClause = 103, RULE_listOrLabel = 104, 
		RULE_sameLineStatement = 105, RULE_booleanExpression = 106, RULE_implementsStmt = 107, 
		RULE_letStmt = 108, RULE_lsetStmt = 109, RULE_onErrorStmt = 110, RULE_onGoToStmt = 111, 
		RULE_onGoSubStmt = 112, RULE_propertyGetStmt = 113, RULE_propertySetStmt = 114, 
		RULE_propertyLetStmt = 115, RULE_raiseEventStmt = 116, RULE_eventArgumentList = 117, 
		RULE_eventArgument = 118, RULE_redimStmt = 119, RULE_redimDeclarationList = 120, 
		RULE_redimVariableDeclaration = 121, RULE_midStatement = 122, RULE_modeSpecifier = 123, 
		RULE_integerExpression = 124, RULE_callStmt = 125, RULE_resumeStmt = 126, 
		RULE_returnStmt = 127, RULE_rsetStmt = 128, RULE_stopStmt = 129, RULE_nameStmt = 130, 
		RULE_selectCaseStmt = 131, RULE_selectExpression = 132, RULE_caseClause = 133, 
		RULE_caseElseClause = 134, RULE_rangeClause = 135, RULE_selectStartValue = 136, 
		RULE_selectEndValue = 137, RULE_setStmt = 138, RULE_subStmt = 139, RULE_subroutineName = 140, 
		RULE_publicTypeDeclaration = 141, RULE_privateTypeDeclaration = 142, RULE_udtDeclaration = 143, 
		RULE_udtMemberList = 144, RULE_udtMember = 145, RULE_untypedNameMemberDeclaration = 146, 
		RULE_reservedNameMemberDeclaration = 147, RULE_optionalArrayClause = 148, 
		RULE_arrayDim = 149, RULE_boundsList = 150, RULE_dimSpec = 151, RULE_lowerBound = 152, 
		RULE_upperBound = 153, RULE_constantExpression = 154, RULE_variableStmt = 155, 
		RULE_variableListStmt = 156, RULE_variableSubStmt = 157, RULE_whileWendStmt = 158, 
		RULE_withStmt = 159, RULE_lineSpecialForm = 160, RULE_circleSpecialForm = 161, 
		RULE_scaleSpecialForm = 162, RULE_tuple = 163, RULE_lineSpecialFormOption = 164, 
		RULE_subscripts = 165, RULE_subscript = 166, RULE_unrestrictedIdentifier = 167, 
		RULE_identifier = 168, RULE_untypedIdentifier = 169, RULE_typedIdentifier = 170, 
		RULE_identifierValue = 171, RULE_foreignName = 172, RULE_foreignIdentifier = 173, 
		RULE_asTypeClause = 174, RULE_baseType = 175, RULE_comparisonOperator = 176, 
		RULE_complexType = 177, RULE_fieldLength = 178, RULE_statementLabelDefinition = 179, 
		RULE_identifierStatementLabel = 180, RULE_lineNumberLabel = 181, RULE_numberLiteral = 182, 
		RULE_type = 183, RULE_typeHint = 184, RULE_visibility = 185, RULE_expression = 186, 
		RULE_literalExpression = 187, RULE_literalIdentifier = 188, RULE_booleanLiteralIdentifier = 189, 
		RULE_objectLiteralIdentifier = 190, RULE_variantLiteralIdentifier = 191, 
		RULE_lExpression = 192, RULE_builtInType = 193, RULE_argumentList = 194, 
		RULE_requiredArgument = 195, RULE_argument = 196, RULE_positionalArgument = 197, 
		RULE_namedArgument = 198, RULE_argumentExpression = 199, RULE_lowerBoundArgumentExpression = 200, 
		RULE_upperBoundArgumentExpression = 201, RULE_addressOfExpression = 202, 
		RULE_keyword = 203, RULE_markerKeyword = 204, RULE_statementKeyword = 205, 
		RULE_endOfLine = 206, RULE_endOfStatement = 207, RULE_commentOrAnnotation = 208, 
		RULE_remComment = 209, RULE_comment = 210, RULE_commentBody = 211, RULE_annotationList = 212, 
		RULE_annotation = 213, RULE_annotationName = 214, RULE_annotationArgList = 215, 
		RULE_annotationArg = 216, RULE_mandatoryLineContinuation = 217, RULE_whiteSpace = 218;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "attributeStmt", "attributeName", "attributeValue", 
		"moduleDeclarations", "moduleOption", "moduleDeclarationsElement", "moduleBody", 
		"moduleBodyElement", "block", "blockStmt", "fileStmt", "openStmt", "pathName", 
		"modeClause", "fileMode", "accessClause", "access", "lock", "lenClause", 
		"recLength", "fileNumber", "markedFileNumber", "unmarkedFileNumber", "closeStmt", 
		"resetStmt", "fileNumberList", "seekStmt", "position", "lockStmt", "recordRange", 
		"startRecordNumber", "endRecordNumber", "unlockStmt", "lineInputStmt", 
		"variableName", "widthStmt", "lineWidth", "debugPrintStmt", "debugPrint", 
		"debugModule", "debugPrintSub", "printStmt", "outputList", "outputItem", 
		"outputClause", "charPosition", "outputExpression", "spcClause", "spcNumber", 
		"tabClause", "tabNumberClause", "tabNumber", "writeStmt", "inputStmt", 
		"inputList", "inputVariable", "putStmt", "recordNumber", "data", "getStmt", 
		"variable", "constStmt", "constSubStmt", "declareStmt", "argList", "arg", 
		"argDefaultValue", "defDirective", "defType", "letterSpec", "singleLetter", 
		"universalLetterRange", "upperCaseA", "upperCaseZ", "letterRange", "firstLetter", 
		"lastLetter", "doLoopStmt", "enumerationStmt", "enumerationStmt_Constant", 
		"endStmt", "eraseStmt", "errorStmt", "eventStmt", "exitStmt", "forEachStmt", 
		"forNextStmt", "functionStmt", "functionName", "goSubStmt", "goToStmt", 
		"ifStmt", "elseIfBlock", "elseBlock", "singleLineIfStmt", "ifWithNonEmptyThen", 
		"ifWithEmptyThen", "singleLineElseClause", "listOrLabel", "sameLineStatement", 
		"booleanExpression", "implementsStmt", "letStmt", "lsetStmt", "onErrorStmt", 
		"onGoToStmt", "onGoSubStmt", "propertyGetStmt", "propertySetStmt", "propertyLetStmt", 
		"raiseEventStmt", "eventArgumentList", "eventArgument", "redimStmt", "redimDeclarationList", 
		"redimVariableDeclaration", "midStatement", "modeSpecifier", "integerExpression", 
		"callStmt", "resumeStmt", "returnStmt", "rsetStmt", "stopStmt", "nameStmt", 
		"selectCaseStmt", "selectExpression", "caseClause", "caseElseClause", 
		"rangeClause", "selectStartValue", "selectEndValue", "setStmt", "subStmt", 
		"subroutineName", "publicTypeDeclaration", "privateTypeDeclaration", "udtDeclaration", 
		"udtMemberList", "udtMember", "untypedNameMemberDeclaration", "reservedNameMemberDeclaration", 
		"optionalArrayClause", "arrayDim", "boundsList", "dimSpec", "lowerBound", 
		"upperBound", "constantExpression", "variableStmt", "variableListStmt", 
		"variableSubStmt", "whileWendStmt", "withStmt", "lineSpecialForm", "circleSpecialForm", 
		"scaleSpecialForm", "tuple", "lineSpecialFormOption", "subscripts", "subscript", 
		"unrestrictedIdentifier", "identifier", "untypedIdentifier", "typedIdentifier", 
		"identifierValue", "foreignName", "foreignIdentifier", "asTypeClause", 
		"baseType", "comparisonOperator", "complexType", "fieldLength", "statementLabelDefinition", 
		"identifierStatementLabel", "lineNumberLabel", "numberLiteral", "type", 
		"typeHint", "visibility", "expression", "literalExpression", "literalIdentifier", 
		"booleanLiteralIdentifier", "objectLiteralIdentifier", "variantLiteralIdentifier", 
		"lExpression", "builtInType", "argumentList", "requiredArgument", "argument", 
		"positionalArgument", "namedArgument", "argumentExpression", "lowerBoundArgumentExpression", 
		"upperBoundArgumentExpression", "addressOfExpression", "keyword", "markerKeyword", 
		"statementKeyword", "endOfLine", "endOfStatement", "commentOrAnnotation", 
		"remComment", "comment", "commentBody", "annotationList", "annotation", 
		"annotationName", "annotationArgList", "annotationArg", "mandatoryLineContinuation", 
		"whiteSpace"
	};

	public override string GrammarFileName { get { return "VBAParser.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; module();
			State = 439; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ModuleAttributesContext moduleAttributes(int i) {
			return GetRuleContext<ModuleAttributesContext>(i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public IReadOnlyList<ModuleAttributesContext> moduleAttributes() {
			return GetRuleContexts<ModuleAttributesContext>();
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleDeclarationsContext moduleDeclarations() {
			return GetRuleContext<ModuleDeclarationsContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 441; endOfStatement();
				}
				break;
			}
			State = 444; moduleAttributes();
			State = 446;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 445; moduleHeader();
				}
				break;
			}
			State = 448; moduleAttributes();
			State = 450;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 449; moduleConfig();
				}
				break;
			}
			State = 452; moduleAttributes();
			State = 453; moduleDeclarations();
			State = 454; moduleAttributes();
			State = 455; moduleBody();
			State = 456; moduleAttributes();
			State = 458;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 457; whiteSpace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(VERSION);
			State = 461; whiteSpace();
			State = 462; numberLiteral();
			State = 464;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 463; whiteSpace();
				}
				break;
			}
			State = 467;
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 466; Match(CLASS);
				}
			}

			State = 469; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ITerminalNode GUIDLITERAL() { return GetToken(VBAParser.GUIDLITERAL, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(BEGIN);
			State = 479;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 472; whiteSpace();
				State = 473; Match(GUIDLITERAL);
				State = 474; whiteSpace();
				State = 475; unrestrictedIdentifier();
				State = 477;
				switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					State = 476; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 481; endOfStatement();
			State = 483;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 482; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 485;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 487; Match(END);
			State = 488; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 490; unrestrictedIdentifier();
			State = 494;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS || _la==LINE_CONTINUATION) {
				{
				{
				State = 491; whiteSpace();
				}
				}
				State = 496;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 497; Match(EQ);
			State = 501;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 498; whiteSpace();
					}
					} 
				}
				State = 503;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			State = 504; expression(0);
			State = 507;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 505; Match(COLON);
				State = 506; numberLiteral();
				}
				break;
			}
			State = 509; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 511; attributeStmt();
					State = 512; endOfStatement();
					}
					} 
				}
				State = 518;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AttributeValueContext> attributeValue() {
			return GetRuleContexts<AttributeValueContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public AttributeValueContext attributeValue(int i) {
			return GetRuleContext<AttributeValueContext>(i);
		}
		public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 519; Match(ATTRIBUTE);
			State = 520; whiteSpace();
			State = 521; attributeName();
			State = 523;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 522; whiteSpace();
				}
			}

			State = 525; Match(EQ);
			State = 527;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 526; whiteSpace();
				}
				break;
			}
			State = 529; attributeValue();
			State = 540;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 531;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 530; whiteSpace();
						}
					}

					State = 533; Match(COMMA);
					State = 535;
					switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
					case 1:
						{
						State = 534; whiteSpace();
						}
						break;
					}
					State = 537; attributeValue();
					}
					} 
				}
				State = 542;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNameContext : ParserRuleContext {
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public AttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNameContext attributeName() {
		AttributeNameContext _localctx = new AttributeNameContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_attributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543; lExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAttributeValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeValueContext attributeValue() {
		AttributeValueContext _localctx = new AttributeValueContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_attributeValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public ModuleDeclarationsElementContext moduleDeclarationsElement(int i) {
			return GetRuleContext<ModuleDeclarationsElementContext>(i);
		}
		public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement() {
			return GetRuleContexts<ModuleDeclarationsElementContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsContext moduleDeclarations() {
		ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 547; moduleDeclarationsElement();
					State = 548; endOfStatement();
					}
					} 
				}
				State = 554;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleOption);
		int _la;
		try {
			State = 565;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 555; Match(OPTION_BASE);
				State = 556; whiteSpace();
				State = 557; numberLiteral();
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 559; Match(OPTION_COMPARE);
				State = 560; whiteSpace();
				State = 561;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 563; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 564; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationsElementContext : ParserRuleContext {
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public DefDirectiveContext defDirective() {
			return GetRuleContext<DefDirectiveContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public PrivateTypeDeclarationContext privateTypeDeclaration() {
			return GetRuleContext<PrivateTypeDeclarationContext>(0);
		}
		public PublicTypeDeclarationContext publicTypeDeclaration() {
			return GetRuleContext<PublicTypeDeclarationContext>(0);
		}
		public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationsElementContext moduleDeclarationsElement() {
		ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_moduleDeclarationsElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 567; whiteSpace();
				}
			}

			State = 581;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 570; attributeStmt();
				}
				break;

			case 2:
				{
				State = 571; declareStmt();
				}
				break;

			case 3:
				{
				State = 572; defDirective();
				}
				break;

			case 4:
				{
				State = 573; enumerationStmt();
				}
				break;

			case 5:
				{
				State = 574; eventStmt();
				}
				break;

			case 6:
				{
				State = 575; constStmt();
				}
				break;

			case 7:
				{
				State = 576; implementsStmt();
				}
				break;

			case 8:
				{
				State = 577; variableStmt();
				}
				break;

			case 9:
				{
				State = 578; moduleOption();
				}
				break;

			case 10:
				{
				State = 579; publicTypeDeclaration();
				}
				break;

			case 11:
				{
				State = 580; privateTypeDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_moduleBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 583; whiteSpace();
				}
				break;
			}
			State = 591;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 586; moduleBodyElement();
					State = 587; endOfStatement();
					}
					} 
				}
				State = 593;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_moduleBodyElement);
		try {
			State = 599;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 594; functionStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 595; propertyGetStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 596; propertySetStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 597; propertyLetStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 598; subStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 601; blockStmt();
					State = 602; endOfStatement();
					}
					} 
				}
				State = 608;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public StatementLabelDefinitionContext statementLabelDefinition() {
			return GetRuleContext<StatementLabelDefinitionContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public LineSpecialFormContext lineSpecialForm() {
			return GetRuleContext<LineSpecialFormContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public SingleLineIfStmtContext singleLineIfStmt() {
			return GetRuleContext<SingleLineIfStmtContext>(0);
		}
		public FileStmtContext fileStmt() {
			return GetRuleContext<FileStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public ScaleSpecialFormContext scaleSpecialForm() {
			return GetRuleContext<ScaleSpecialFormContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public CircleSpecialFormContext circleSpecialForm() {
			return GetRuleContext<CircleSpecialFormContext>(0);
		}
		public CallStmtContext callStmt() {
			return GetRuleContext<CallStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_blockStmt);
		try {
			State = 646;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609; statementLabelDefinition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 610; fileStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 611; attributeStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 612; constStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 613; doLoopStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 614; endStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 615; eraseStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 616; errorStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 617; exitStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 618; forEachStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 619; forNextStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 620; goSubStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 621; goToStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 622; ifStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 623; singleLineIfStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 624; implementsStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 625; letStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 626; lsetStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 627; onErrorStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 628; onGoToStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 629; onGoSubStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 630; raiseEventStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 631; redimStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 632; resumeStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 633; returnStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 634; rsetStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 635; selectCaseStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 636; setStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 637; stopStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 638; variableStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 639; whileWendStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 640; withStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 641; lineSpecialForm();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 642; circleSpecialForm();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 643; scaleSpecialForm();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 644; callStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 645; nameStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileStmtContext : ParserRuleContext {
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public DebugPrintStmtContext debugPrintStmt() {
			return GetRuleContext<DebugPrintStmtContext>(0);
		}
		public FileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileStmtContext fileStmt() {
		FileStmtContext _localctx = new FileStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_fileStmt);
		try {
			State = 662;
			switch (_input.La(1)) {
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 648; openStmt();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 649; resetStmt();
				}
				break;
			case CLOSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 650; closeStmt();
				}
				break;
			case SEEK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 651; seekStmt();
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 652; lockStmt();
				}
				break;
			case UNLOCK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 653; unlockStmt();
				}
				break;
			case LINE_INPUT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 654; lineInputStmt();
				}
				break;
			case WIDTH:
				EnterOuterAlt(_localctx, 8);
				{
				State = 655; widthStmt();
				}
				break;
			case DEBUG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 656; debugPrintStmt();
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 657; printStmt();
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 658; writeStmt();
				}
				break;
			case INPUT:
				EnterOuterAlt(_localctx, 12);
				{
				State = 659; inputStmt();
				}
				break;
			case PUT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 660; putStmt();
				}
				break;
			case GET:
				EnterOuterAlt(_localctx, 14);
				{
				State = 661; getStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ModeClauseContext modeClause() {
			return GetRuleContext<ModeClauseContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public AccessClauseContext accessClause() {
			return GetRuleContext<AccessClauseContext>(0);
		}
		public LockContext @lock() {
			return GetRuleContext<LockContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public LenClauseContext lenClause() {
			return GetRuleContext<LenClauseContext>(0);
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public PathNameContext pathName() {
			return GetRuleContext<PathNameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_openStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664; Match(OPEN);
			State = 665; whiteSpace();
			State = 666; pathName();
			State = 670;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				State = 667; whiteSpace();
				State = 668; modeClause();
				}
				break;
			}
			State = 675;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 672; whiteSpace();
				State = 673; accessClause();
				}
				break;
			}
			State = 680;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 677; whiteSpace();
				State = 678; @lock();
				}
				break;
			}
			State = 682; whiteSpace();
			State = 683; Match(AS);
			State = 684; whiteSpace();
			State = 685; fileNumber();
			State = 689;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 686; whiteSpace();
				State = 687; lenClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathNameContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PathNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPathName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPathName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathNameContext pathName() {
		PathNameContext _localctx = new PathNameContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_pathName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeClauseContext : ParserRuleContext {
		public FileModeContext fileMode() {
			return GetRuleContext<FileModeContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ModeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeClauseContext modeClause() {
		ModeClauseContext _localctx = new ModeClauseContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_modeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693; Match(FOR);
			State = 694; whiteSpace();
			State = 695; fileMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileModeContext : ParserRuleContext {
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public FileModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileMode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileMode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileMode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileModeContext fileMode() {
		FileModeContext _localctx = new FileModeContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_fileMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (INPUT - 121)) | (1L << (OUTPUT - 121)) | (1L << (RANDOM - 121)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessClauseContext : ParserRuleContext {
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public AccessContext access() {
			return GetRuleContext<AccessContext>(0);
		}
		public AccessClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAccessClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAccessClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessClauseContext accessClause() {
		AccessClauseContext _localctx = new AccessClauseContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_accessClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699; Match(ACCESS);
			State = 700; whiteSpace();
			State = 701; access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public AccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessContext access() {
		AccessContext _localctx = new AccessContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			_la = _input.La(1);
			if ( !(((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (READ - 168)) | (1L << (READ_WRITE - 168)) | (1L << (WRITE - 168)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockContext : ParserRuleContext {
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public LockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockContext @lock() {
		LockContext _localctx = new LockContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_lock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			_la = _input.La(1);
			if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (LOCK_READ - 131)) | (1L << (LOCK_WRITE - 131)) | (1L << (LOCK_READ_WRITE - 131)) | (1L << (SHARED - 131)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LenClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public RecLengthContext recLength() {
			return GetRuleContext<RecLengthContext>(0);
		}
		public LenClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lenClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLenClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLenClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLenClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LenClauseContext lenClause() {
		LenClauseContext _localctx = new LenClauseContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_lenClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707; Match(LEN);
			State = 709;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 708; whiteSpace();
				}
			}

			State = 711; Match(EQ);
			State = 713;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 712; whiteSpace();
				}
				break;
			}
			State = 715; recLength();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecLengthContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RecLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRecLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRecLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecLengthContext recLength() {
		RecLengthContext _localctx = new RecLengthContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_recLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberContext : ParserRuleContext {
		public UnmarkedFileNumberContext unmarkedFileNumber() {
			return GetRuleContext<UnmarkedFileNumberContext>(0);
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public FileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberContext fileNumber() {
		FileNumberContext _localctx = new FileNumberContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_fileNumber);
		try {
			State = 721;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 719; markedFileNumber();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 720; unmarkedFileNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkedFileNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public MarkedFileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markedFileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkedFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkedFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkedFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkedFileNumberContext markedFileNumber() {
		MarkedFileNumberContext _localctx = new MarkedFileNumberContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_markedFileNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; Match(HASH);
			State = 724; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnmarkedFileNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnmarkedFileNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unmarkedFileNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnmarkedFileNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnmarkedFileNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnmarkedFileNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnmarkedFileNumberContext unmarkedFileNumber() {
		UnmarkedFileNumberContext _localctx = new UnmarkedFileNumberContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_unmarkedFileNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public FileNumberListContext fileNumberList() {
			return GetRuleContext<FileNumberListContext>(0);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_closeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728; Match(CLOSE);
			State = 732;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 729; whiteSpace();
				State = 730; fileNumberList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNumberListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<FileNumberContext> fileNumber() {
			return GetRuleContexts<FileNumberContext>();
		}
		public FileNumberContext fileNumber(int i) {
			return GetRuleContext<FileNumberContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public FileNumberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNumberList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFileNumberList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFileNumberList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNumberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNumberListContext fileNumberList() {
		FileNumberListContext _localctx = new FileNumberListContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_fileNumberList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 736; fileNumber();
			State = 747;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 738;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 737; whiteSpace();
						}
					}

					State = 740; Match(COMMA);
					State = 742;
					switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
					case 1:
						{
						State = 741; whiteSpace();
						}
						break;
					}
					State = 744; fileNumber();
					}
					} 
				}
				State = 749;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public PositionContext position() {
			return GetRuleContext<PositionContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750; Match(SEEK);
			State = 751; whiteSpace();
			State = 752; fileNumber();
			State = 754;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 753; whiteSpace();
				}
			}

			State = 756; Match(COMMA);
			State = 758;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 757; whiteSpace();
				}
				break;
			}
			State = 760; position();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPosition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPosition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionContext position() {
		PositionContext _localctx = new PositionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_position);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 762; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public RecordRangeContext recordRange() {
			return GetRuleContext<RecordRangeContext>(0);
		}
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764; Match(LOCK);
			State = 765; whiteSpace();
			State = 766; fileNumber();
			State = 775;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 768;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 767; whiteSpace();
					}
				}

				State = 770; Match(COMMA);
				State = 772;
				switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					State = 771; whiteSpace();
					}
					break;
				}
				State = 774; recordRange();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordRangeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public StartRecordNumberContext startRecordNumber() {
			return GetRuleContext<StartRecordNumberContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public EndRecordNumberContext endRecordNumber() {
			return GetRuleContext<EndRecordNumberContext>(0);
		}
		public RecordRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRecordRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRecordRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordRangeContext recordRange() {
		RecordRangeContext _localctx = new RecordRangeContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_recordRange);
		try {
			State = 787;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 777; startRecordNumber();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 781;
				switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					State = 778; startRecordNumber();
					State = 779; whiteSpace();
					}
					break;
				}
				State = 783; Match(TO);
				State = 784; whiteSpace();
				State = 785; endRecordNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartRecordNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StartRecordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRecordNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStartRecordNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStartRecordNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRecordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRecordNumberContext startRecordNumber() {
		StartRecordNumberContext _localctx = new StartRecordNumberContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_startRecordNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndRecordNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndRecordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endRecordNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndRecordNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndRecordNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndRecordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndRecordNumberContext endRecordNumber() {
		EndRecordNumberContext _localctx = new EndRecordNumberContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_endRecordNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public RecordRangeContext recordRange() {
			return GetRuleContext<RecordRangeContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793; Match(UNLOCK);
			State = 794; whiteSpace();
			State = 795; fileNumber();
			State = 804;
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 797;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 796; whiteSpace();
					}
				}

				State = 799; Match(COMMA);
				State = 801;
				switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					State = 800; whiteSpace();
					}
					break;
				}
				State = 803; recordRange();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806; Match(LINE_INPUT);
			State = 807; whiteSpace();
			State = 808; markedFileNumber();
			State = 810;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 809; whiteSpace();
				}
			}

			State = 812; Match(COMMA);
			State = 814;
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 813; whiteSpace();
				}
				break;
			}
			State = 816; variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public LineWidthContext lineWidth() {
			return GetRuleContext<LineWidthContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820; Match(WIDTH);
			State = 821; whiteSpace();
			State = 822; markedFileNumber();
			State = 824;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 823; whiteSpace();
				}
			}

			State = 826; Match(COMMA);
			State = 828;
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 827; whiteSpace();
				}
				break;
			}
			State = 830; lineWidth();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineWidthContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LineWidthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineWidth; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineWidth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineWidth(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineWidth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineWidthContext lineWidth() {
		LineWidthContext _localctx = new LineWidthContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_lineWidth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugPrintStmtContext : ParserRuleContext {
		public DebugPrintContext debugPrint() {
			return GetRuleContext<DebugPrintContext>(0);
		}
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DebugPrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugPrintStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugPrintStmtContext debugPrintStmt() {
		DebugPrintStmtContext _localctx = new DebugPrintStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_debugPrintStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834; debugPrint();
			State = 838;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 835; whiteSpace();
				State = 836; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugPrintContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public DebugPrintSubContext debugPrintSub() {
			return GetRuleContext<DebugPrintSubContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public DebugModuleContext debugModule() {
			return GetRuleContext<DebugModuleContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public DebugPrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugPrint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugPrintContext debugPrint() {
		DebugPrintContext _localctx = new DebugPrintContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_debugPrint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840; debugModule();
			State = 842;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 841; whiteSpace();
				}
			}

			State = 844; Match(DOT);
			State = 846;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 845; whiteSpace();
				}
			}

			State = 848; debugPrintSub();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugModuleContext : ParserRuleContext {
		public ITerminalNode DEBUG() { return GetToken(VBAParser.DEBUG, 0); }
		public DebugModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugModule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugModuleContext debugModule() {
		DebugModuleContext _localctx = new DebugModuleContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_debugModule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850; Match(DEBUG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugPrintSubContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public DebugPrintSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugPrintSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDebugPrintSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDebugPrintSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugPrintSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugPrintSubContext debugPrintSub() {
		DebugPrintSubContext _localctx = new DebugPrintSubContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_debugPrintSub);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 852; Match(PRINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854; Match(PRINT);
			State = 855; whiteSpace();
			State = 856; markedFileNumber();
			State = 858;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 857; whiteSpace();
				}
			}

			State = 860; Match(COMMA);
			State = 865;
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 862;
				switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					State = 861; whiteSpace();
					}
					break;
				}
				State = 864; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public OutputItemContext outputItem(int i) {
			return GetRuleContext<OutputItemContext>(i);
		}
		public IReadOnlyList<OutputItemContext> outputItem() {
			return GetRuleContexts<OutputItemContext>();
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_outputList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 867; outputItem();
			State = 874;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,60,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 869;
					switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
					case 1:
						{
						State = 868; whiteSpace();
						}
						break;
					}
					State = 871; outputItem();
					}
					} 
				}
				State = 876;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,60,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputItemContext : ParserRuleContext {
		public OutputClauseContext outputClause() {
			return GetRuleContext<OutputClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public CharPositionContext charPosition() {
			return GetRuleContext<CharPositionContext>(0);
		}
		public OutputItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputItemContext outputItem() {
		OutputItemContext _localctx = new OutputItemContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_outputItem);
		int _la;
		try {
			State = 885;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 877; outputClause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 878; charPosition();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 879; outputClause();
				State = 881;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 880; whiteSpace();
					}
				}

				State = 883; charPosition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputClauseContext : ParserRuleContext {
		public TabClauseContext tabClause() {
			return GetRuleContext<TabClauseContext>(0);
		}
		public OutputExpressionContext outputExpression() {
			return GetRuleContext<OutputExpressionContext>(0);
		}
		public SpcClauseContext spcClause() {
			return GetRuleContext<SpcClauseContext>(0);
		}
		public OutputClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputClauseContext outputClause() {
		OutputClauseContext _localctx = new OutputClauseContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_outputClause);
		try {
			State = 890;
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 887; spcClause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 888; tabClause();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 889; outputExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharPositionContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(VBAParser.SEMICOLON, 0); }
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public CharPositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charPosition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCharPosition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCharPosition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharPositionContext charPosition() {
		CharPositionContext _localctx = new CharPositionContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_charPosition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892;
			_la = _input.La(1);
			if ( !(_la==COMMA || _la==SEMICOLON) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OutputExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOutputExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOutputExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputExpressionContext outputExpression() {
		OutputExpressionContext _localctx = new OutputExpressionContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_outputExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcClauseContext : ParserRuleContext {
		public SpcNumberContext spcNumber() {
			return GetRuleContext<SpcNumberContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SpcClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spcClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSpcClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSpcClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpcClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcClauseContext spcClause() {
		SpcClauseContext _localctx = new SpcClauseContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_spcClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896; Match(SPC);
			State = 898;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 897; whiteSpace();
				}
			}

			State = 900; Match(LPAREN);
			State = 902;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				State = 901; whiteSpace();
				}
				break;
			}
			State = 904; spcNumber();
			State = 906;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 905; whiteSpace();
				}
			}

			State = 908; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SpcNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spcNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSpcNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSpcNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpcNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcNumberContext spcNumber() {
		SpcNumberContext _localctx = new SpcNumberContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_spcNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabClauseContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public TabNumberClauseContext tabNumberClause() {
			return GetRuleContext<TabNumberClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public TabClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTabClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTabClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabClauseContext tabClause() {
		TabClauseContext _localctx = new TabClauseContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_tabClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912; Match(TAB);
			State = 917;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 914;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 913; whiteSpace();
					}
				}

				State = 916; tabNumberClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabNumberClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TabNumberContext tabNumber() {
			return GetRuleContext<TabNumberContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public TabNumberClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabNumberClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTabNumberClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTabNumberClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabNumberClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabNumberClauseContext tabNumberClause() {
		TabNumberClauseContext _localctx = new TabNumberClauseContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_tabNumberClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 919; Match(LPAREN);
			State = 921;
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 920; whiteSpace();
				}
				break;
			}
			State = 923; tabNumber();
			State = 925;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 924; whiteSpace();
				}
			}

			State = 927; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TabNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTabNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTabNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabNumberContext tabNumber() {
		TabNumberContext _localctx = new TabNumberContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_tabNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 931; Match(WRITE);
			State = 932; whiteSpace();
			State = 933; markedFileNumber();
			State = 935;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 934; whiteSpace();
				}
			}

			State = 937; Match(COMMA);
			State = 942;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 939;
				switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					State = 938; whiteSpace();
					}
					break;
				}
				State = 941; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public InputListContext inputList() {
			return GetRuleContext<InputListContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public MarkedFileNumberContext markedFileNumber() {
			return GetRuleContext<MarkedFileNumberContext>(0);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_inputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944; Match(INPUT);
			State = 945; whiteSpace();
			State = 946; markedFileNumber();
			State = 948;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 947; whiteSpace();
				}
			}

			State = 950; Match(COMMA);
			State = 952;
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 951; whiteSpace();
				}
				break;
			}
			State = 954; inputList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<InputVariableContext> inputVariable() {
			return GetRuleContexts<InputVariableContext>();
		}
		public InputVariableContext inputVariable(int i) {
			return GetRuleContext<InputVariableContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public InputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputListContext inputList() {
		InputListContext _localctx = new InputListContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_inputList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 956; inputVariable();
			State = 967;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,78,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 958;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 957; whiteSpace();
						}
					}

					State = 960; Match(COMMA);
					State = 962;
					switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
					case 1:
						{
						State = 961; whiteSpace();
						}
						break;
					}
					State = 964; inputVariable();
					}
					} 
				}
				State = 969;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,78,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputVariableContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InputVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInputVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInputVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputVariableContext inputVariable() {
		InputVariableContext _localctx = new InputVariableContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_inputVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public RecordNumberContext recordNumber() {
			return GetRuleContext<RecordNumberContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972; Match(PUT);
			State = 973; whiteSpace();
			State = 974; fileNumber();
			State = 976;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 975; whiteSpace();
				}
			}

			State = 978; Match(COMMA);
			State = 980;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 979; whiteSpace();
				}
				break;
			}
			State = 983;
			switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				State = 982; recordNumber();
				}
				break;
			}
			State = 986;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 985; whiteSpace();
				}
			}

			State = 988; Match(COMMA);
			State = 990;
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 989; whiteSpace();
				}
				break;
			}
			State = 992; data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordNumberContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RecordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRecordNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRecordNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordNumberContext recordNumber() {
		RecordNumberContext _localctx = new RecordNumberContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_recordNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 994; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataContext data() {
		DataContext _localctx = new DataContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_data);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public RecordNumberContext recordNumber() {
			return GetRuleContext<RecordNumberContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public FileNumberContext fileNumber() {
			return GetRuleContext<FileNumberContext>(0);
		}
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998; Match(GET);
			State = 999; whiteSpace();
			State = 1000; fileNumber();
			State = 1002;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1001; whiteSpace();
				}
			}

			State = 1004; Match(COMMA);
			State = 1006;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 1005; whiteSpace();
				}
				break;
			}
			State = 1009;
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 1008; recordNumber();
				}
				break;
			}
			State = 1012;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1011; whiteSpace();
				}
			}

			State = 1014; Match(COMMA);
			State = 1016;
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 1015; whiteSpace();
				}
				break;
			}
			State = 1018; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1025;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1022; visibility();
				State = 1023; whiteSpace();
				}
			}

			State = 1027; Match(CONST);
			State = 1028; whiteSpace();
			State = 1029; constSubStmt();
			State = 1040;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,92,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1031;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1030; whiteSpace();
						}
					}

					State = 1033; Match(COMMA);
					State = 1035;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1034; whiteSpace();
						}
					}

					State = 1037; constSubStmt();
					}
					} 
				}
				State = 1042;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,92,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1043; identifier();
			State = 1047;
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 1044; whiteSpace();
				State = 1045; asTypeClause();
				}
				break;
			}
			State = 1050;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1049; whiteSpace();
				}
			}

			State = 1052; Match(EQ);
			State = 1054;
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				State = 1053; whiteSpace();
				}
				break;
			}
			State = 1056; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1058; visibility();
				State = 1059; whiteSpace();
				}
			}

			State = 1063; Match(DECLARE);
			State = 1064; whiteSpace();
			State = 1067;
			_la = _input.La(1);
			if (_la==PTRSAFE) {
				{
				State = 1065; Match(PTRSAFE);
				State = 1066; whiteSpace();
				}
			}

			State = 1069;
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==SUB) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1070; whiteSpace();
			State = 1071; identifier();
			State = 1072; whiteSpace();
			State = 1073; Match(LIB);
			State = 1074; whiteSpace();
			State = 1075; Match(STRINGLITERAL);
			State = 1081;
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 1076; whiteSpace();
				State = 1077; Match(ALIAS);
				State = 1078; whiteSpace();
				State = 1079; Match(STRINGLITERAL);
				}
				break;
			}
			State = 1087;
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				State = 1084;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1083; whiteSpace();
					}
				}

				State = 1086; argList();
				}
				break;
			}
			State = 1092;
			switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				State = 1089; whiteSpace();
				State = 1090; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1094; Match(LPAREN);
			State = 1112;
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				State = 1096;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1095; whiteSpace();
					}
				}

				State = 1098; arg();
				State = 1109;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,105,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1100;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1099; whiteSpace();
							}
						}

						State = 1102; Match(COMMA);
						State = 1104;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1103; whiteSpace();
							}
						}

						State = 1106; arg();
						}
						} 
					}
					State = 1111;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,105,_ctx);
				}
				}
				break;
			}
			State = 1115;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1114; whiteSpace();
				}
			}

			State = 1117; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				State = 1119; Match(OPTIONAL);
				State = 1120; whiteSpace();
				}
				break;
			}
			State = 1125;
			switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				State = 1123;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1124; whiteSpace();
				}
				break;
			}
			State = 1129;
			switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
			case 1:
				{
				State = 1127; Match(PARAMARRAY);
				State = 1128; whiteSpace();
				}
				break;
			}
			State = 1131; unrestrictedIdentifier();
			State = 1140;
			switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				State = 1133;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1132; whiteSpace();
					}
				}

				State = 1135; Match(LPAREN);
				State = 1137;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1136; whiteSpace();
					}
				}

				State = 1139; Match(RPAREN);
				}
				break;
			}
			State = 1146;
			switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				State = 1143;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1142; whiteSpace();
					}
				}

				State = 1145; asTypeClause();
				}
				break;
			}
			State = 1152;
			switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				State = 1149;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1148; whiteSpace();
					}
				}

				State = 1151; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_argDefaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1154; Match(EQ);
			State = 1156;
			switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				State = 1155; whiteSpace();
				}
				break;
			}
			State = 1158; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefDirectiveContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public LetterSpecContext letterSpec(int i) {
			return GetRuleContext<LetterSpecContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<LetterSpecContext> letterSpec() {
			return GetRuleContexts<LetterSpecContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public DefTypeContext defType() {
			return GetRuleContext<DefTypeContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public DefDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDefDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDefDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefDirectiveContext defDirective() {
		DefDirectiveContext _localctx = new DefDirectiveContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_defDirective);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1160; defType();
			State = 1161; whiteSpace();
			State = 1162; letterSpec();
			State = 1173;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,121,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1164;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1163; whiteSpace();
						}
					}

					State = 1166; Match(COMMA);
					State = 1168;
					switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
					case 1:
						{
						State = 1167; whiteSpace();
						}
						break;
					}
					State = 1170; letterSpec();
					}
					} 
				}
				State = 1175;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,121,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefTypeContext : ParserRuleContext {
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public DefTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDefType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDefType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefTypeContext defType() {
		DefTypeContext _localctx = new DefTypeContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_defType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1176;
			_la = _input.La(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (DEFBOOL - 70)) | (1L << (DEFBYTE - 70)) | (1L << (DEFDATE - 70)) | (1L << (DEFDBL - 70)) | (1L << (DEFCUR - 70)) | (1L << (DEFINT - 70)) | (1L << (DEFLNG - 70)) | (1L << (DEFLNGLNG - 70)) | (1L << (DEFLNGPTR - 70)) | (1L << (DEFOBJ - 70)) | (1L << (DEFSNG - 70)) | (1L << (DEFSTR - 70)) | (1L << (DEFVAR - 70)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterSpecContext : ParserRuleContext {
		public SingleLetterContext singleLetter() {
			return GetRuleContext<SingleLetterContext>(0);
		}
		public UniversalLetterRangeContext universalLetterRange() {
			return GetRuleContext<UniversalLetterRangeContext>(0);
		}
		public LetterRangeContext letterRange() {
			return GetRuleContext<LetterRangeContext>(0);
		}
		public LetterSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterSpecContext letterSpec() {
		LetterSpecContext _localctx = new LetterSpecContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_letterSpec);
		try {
			State = 1181;
			switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1178; singleLetter();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1179; universalLetterRange();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1180; letterRange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public SingleLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLetterContext singleLetter() {
		SingleLetterContext _localctx = new SingleLetterContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_singleLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1183; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniversalLetterRangeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public UpperCaseAContext upperCaseA() {
			return GetRuleContext<UpperCaseAContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public UpperCaseZContext upperCaseZ() {
			return GetRuleContext<UpperCaseZContext>(0);
		}
		public UniversalLetterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_universalLetterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUniversalLetterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUniversalLetterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalLetterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniversalLetterRangeContext universalLetterRange() {
		UniversalLetterRangeContext _localctx = new UniversalLetterRangeContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_universalLetterRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1185; upperCaseA();
			State = 1187;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1186; whiteSpace();
				}
			}

			State = 1189; Match(MINUS);
			State = 1191;
			switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				State = 1190; whiteSpace();
				}
				break;
			}
			State = 1193; upperCaseZ();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperCaseAContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public UpperCaseAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperCaseA; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperCaseA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperCaseA(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperCaseA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperCaseAContext upperCaseA() {
		UpperCaseAContext _localctx = new UpperCaseAContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_upperCaseA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1195;
			if (!(_input.Lt(1).Text.Equals("A"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"A\")");
			State = 1196; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperCaseZContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public UpperCaseZContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperCaseZ; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperCaseZ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperCaseZ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperCaseZ(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperCaseZContext upperCaseZ() {
		UpperCaseZContext _localctx = new UpperCaseZContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_upperCaseZ);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1198;
			if (!(_input.Lt(1).Text.Equals("Z"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"Z\")");
			State = 1199; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterRangeContext : ParserRuleContext {
		public LastLetterContext lastLetter() {
			return GetRuleContext<LastLetterContext>(0);
		}
		public FirstLetterContext firstLetter() {
			return GetRuleContext<FirstLetterContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public LetterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterRangeContext letterRange() {
		LetterRangeContext _localctx = new LetterRangeContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_letterRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1201; firstLetter();
			State = 1203;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1202; whiteSpace();
				}
			}

			State = 1205; Match(MINUS);
			State = 1207;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1206; whiteSpace();
				}
			}

			State = 1209; lastLetter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public FirstLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFirstLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFirstLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstLetterContext firstLetter() {
		FirstLetterContext _localctx = new FirstLetterContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_firstLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1211; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastLetterContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LastLetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastLetter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLastLetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLastLetter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastLetterContext lastLetter() {
		LastLetterContext _localctx = new LastLetterContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_lastLetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1213; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_doLoopStmt);
		int _la;
		try {
			State = 1238;
			switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1215; Match(DO);
				State = 1216; endOfStatement();
				State = 1217; block();
				State = 1218; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1220; Match(DO);
				State = 1221; whiteSpace();
				State = 1222;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1223; whiteSpace();
				State = 1224; expression(0);
				State = 1225; endOfStatement();
				State = 1226; block();
				State = 1227; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1229; Match(DO);
				State = 1230; endOfStatement();
				State = 1231; block();
				State = 1232; Match(LOOP);
				State = 1233; whiteSpace();
				State = 1234;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1235; whiteSpace();
				State = 1236; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1240; visibility();
				State = 1241; whiteSpace();
				}
			}

			State = 1245; Match(ENUM);
			State = 1246; whiteSpace();
			State = 1247; identifier();
			State = 1248; endOfStatement();
			State = 1252;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
				{
				{
				State = 1249; enumerationStmt_Constant();
				}
				}
				State = 1254;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1255; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1257; identifier();
			State = 1266;
			switch ( Interpreter.AdaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				State = 1259;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1258; whiteSpace();
					}
				}

				State = 1261; Match(EQ);
				State = 1263;
				switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
				case 1:
					{
					State = 1262; whiteSpace();
					}
					break;
				}
				State = 1265; expression(0);
				}
				break;
			}
			State = 1268; endOfStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1270; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1272; Match(ERASE);
			State = 1273; whiteSpace();
			State = 1274; expression(0);
			State = 1285;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,135,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1276;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1275; whiteSpace();
						}
					}

					State = 1278; Match(COMMA);
					State = 1280;
					switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
					case 1:
						{
						State = 1279; whiteSpace();
						}
						break;
					}
					State = 1282; expression(0);
					}
					} 
				}
				State = 1287;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,135,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1288; Match(ERROR);
			State = 1289; whiteSpace();
			State = 1290; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1295;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1292; visibility();
				State = 1293; whiteSpace();
				}
			}

			State = 1297; Match(EVENT);
			State = 1298; whiteSpace();
			State = 1299; identifier();
			State = 1301;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1300; whiteSpace();
				}
			}

			State = 1303; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1305;
			_la = _input.La(1);
			if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (EXIT_DO - 104)) | (1L << (EXIT_FOR - 104)) | (1L << (EXIT_FUNCTION - 104)) | (1L << (EXIT_PROPERTY - 104)) | (1L << (EXIT_SUB - 104)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_forEachStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1307; Match(FOR);
			State = 1308; whiteSpace();
			State = 1309; Match(EACH);
			State = 1310; whiteSpace();
			State = 1311; expression(0);
			State = 1312; whiteSpace();
			State = 1313; Match(IN);
			State = 1314; whiteSpace();
			State = 1315; expression(0);
			State = 1316; endOfStatement();
			State = 1317; block();
			State = 1318; Match(NEXT);
			State = 1322;
			switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				State = 1319; whiteSpace();
				State = 1320; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_forNextStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1324; Match(FOR);
			State = 1325; whiteSpace();
			State = 1326; expression(0);
			State = 1327; whiteSpace();
			State = 1328; Match(TO);
			State = 1329; whiteSpace();
			State = 1330; expression(0);
			State = 1336;
			switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
			case 1:
				{
				State = 1331; whiteSpace();
				State = 1332; Match(STEP);
				State = 1333; whiteSpace();
				State = 1334; expression(0);
				}
				break;
			}
			State = 1338; endOfStatement();
			State = 1339; block();
			State = 1340; Match(NEXT);
			State = 1344;
			switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				State = 1341; whiteSpace();
				State = 1342; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1349;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1346; visibility();
				State = 1347; whiteSpace();
				}
			}

			State = 1353;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1351; Match(STATIC);
				State = 1352; whiteSpace();
				}
			}

			State = 1355; Match(FUNCTION);
			State = 1357;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1356; whiteSpace();
				}
			}

			State = 1359; functionName();
			State = 1364;
			switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				State = 1361;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1360; whiteSpace();
					}
				}

				State = 1363; argList();
				}
				break;
			}
			State = 1370;
			switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				State = 1367;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1366; whiteSpace();
					}
				}

				State = 1369; asTypeClause();
				}
				break;
			}
			State = 1372; endOfStatement();
			State = 1373; block();
			State = 1374; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1376; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1378; Match(GOSUB);
			State = 1379; whiteSpace();
			State = 1380; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1382; Match(GOTO);
			State = 1383; whiteSpace();
			State = 1384; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<ElseIfBlockContext> elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386; Match(IF);
			State = 1387; whiteSpace();
			State = 1388; booleanExpression();
			State = 1389; whiteSpace();
			State = 1390; Match(THEN);
			State = 1391; endOfStatement();
			State = 1392; block();
			State = 1396;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ELSEIF) {
				{
				{
				State = 1393; elseIfBlock();
				}
				}
				State = 1398;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1400;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 1399; elseBlock();
				}
			}

			State = 1402; Match(END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_elseIfBlock);
		try {
			State = 1422;
			switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1404; Match(ELSEIF);
				State = 1405; whiteSpace();
				State = 1406; booleanExpression();
				State = 1407; whiteSpace();
				State = 1408; Match(THEN);
				State = 1409; endOfStatement();
				State = 1410; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1412; Match(ELSEIF);
				State = 1413; whiteSpace();
				State = 1414; booleanExpression();
				State = 1415; whiteSpace();
				State = 1416; Match(THEN);
				State = 1418;
				switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					State = 1417; whiteSpace();
					}
					break;
				}
				State = 1420; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1424; Match(ELSE);
			State = 1425; endOfStatement();
			State = 1426; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineIfStmtContext : ParserRuleContext {
		public IfWithEmptyThenContext ifWithEmptyThen() {
			return GetRuleContext<IfWithEmptyThenContext>(0);
		}
		public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
			return GetRuleContext<IfWithNonEmptyThenContext>(0);
		}
		public SingleLineIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineIfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineIfStmtContext singleLineIfStmt() {
		SingleLineIfStmtContext _localctx = new SingleLineIfStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_singleLineIfStmt);
		try {
			State = 1430;
			switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1428; ifWithNonEmptyThen();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1429; ifWithEmptyThen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithNonEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public IfWithNonEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithNonEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithNonEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithNonEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithNonEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithNonEmptyThenContext ifWithNonEmptyThen() {
		IfWithNonEmptyThenContext _localctx = new IfWithNonEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_ifWithNonEmptyThen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1432; Match(IF);
			State = 1434;
			switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				State = 1433; whiteSpace();
				}
				break;
			}
			State = 1436; booleanExpression();
			State = 1438;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1437; whiteSpace();
				}
			}

			State = 1440; Match(THEN);
			State = 1442;
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				State = 1441; whiteSpace();
				}
				break;
			}
			State = 1444; listOrLabel();
			State = 1448;
			switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				State = 1445; whiteSpace();
				State = 1446; singleLineElseClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfWithEmptyThenContext : ParserRuleContext {
		public SingleLineElseClauseContext singleLineElseClause() {
			return GetRuleContext<SingleLineElseClauseContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public IfWithEmptyThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifWithEmptyThen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIfWithEmptyThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIfWithEmptyThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithEmptyThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfWithEmptyThenContext ifWithEmptyThen() {
		IfWithEmptyThenContext _localctx = new IfWithEmptyThenContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_ifWithEmptyThen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1450; Match(IF);
			State = 1452;
			switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
			case 1:
				{
				State = 1451; whiteSpace();
				}
				break;
			}
			State = 1454; booleanExpression();
			State = 1456;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1455; whiteSpace();
				}
			}

			State = 1458; Match(THEN);
			State = 1459; endOfStatement();
			State = 1461;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1460; whiteSpace();
				}
			}

			State = 1463; singleLineElseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleLineElseClauseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ListOrLabelContext listOrLabel() {
			return GetRuleContext<ListOrLabelContext>(0);
		}
		public SingleLineElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleLineElseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSingleLineElseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSingleLineElseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLineElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleLineElseClauseContext singleLineElseClause() {
		SingleLineElseClauseContext _localctx = new SingleLineElseClauseContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_singleLineElseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1465; Match(ELSE);
			State = 1467;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				State = 1466; whiteSpace();
				}
				break;
			}
			State = 1470;
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				State = 1469; listOrLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOrLabelContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public SameLineStatementContext sameLineStatement(int i) {
			return GetRuleContext<SameLineStatementContext>(i);
		}
		public IReadOnlyList<SameLineStatementContext> sameLineStatement() {
			return GetRuleContexts<SameLineStatementContext>();
		}
		public ListOrLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOrLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterListOrLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitListOrLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOrLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOrLabelContext listOrLabel() {
		ListOrLabelContext _localctx = new ListOrLabelContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_listOrLabel);
		int _la;
		try {
			int _alt;
			State = 1510;
			switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1472; lineNumberLabel();
				State = 1485;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,165,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1474;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1473; whiteSpace();
							}
						}

						State = 1476; Match(COLON);
						State = 1478;
						switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
						case 1:
							{
							State = 1477; whiteSpace();
							}
							break;
						}
						State = 1481;
						switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
						case 1:
							{
							State = 1480; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1487;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,165,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1492;
				_la = _input.La(1);
				if (_la==COLON) {
					{
					State = 1488; Match(COLON);
					State = 1490;
					switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
					case 1:
						{
						State = 1489; whiteSpace();
						}
						break;
					}
					}
				}

				State = 1494; sameLineStatement();
				State = 1507;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,171,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1496;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 1495; whiteSpace();
							}
						}

						State = 1498; Match(COLON);
						State = 1500;
						switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
						case 1:
							{
							State = 1499; whiteSpace();
							}
							break;
						}
						State = 1503;
						switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
						case 1:
							{
							State = 1502; sameLineStatement();
							}
							break;
						}
						}
						} 
					}
					State = 1509;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,171,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SameLineStatementContext : ParserRuleContext {
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public SameLineStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sameLineStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSameLineStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSameLineStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSameLineStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SameLineStatementContext sameLineStatement() {
		SameLineStatementContext _localctx = new SameLineStatementContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_sameLineStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1512; blockStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_booleanExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1516; Match(IMPLEMENTS);
			State = 1517; whiteSpace();
			State = 1518; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1522;
			_la = _input.La(1);
			if (_la==LET) {
				{
				State = 1520; Match(LET);
				State = 1521; whiteSpace();
				}
			}

			State = 1524; lExpression(0);
			State = 1526;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1525; whiteSpace();
				}
			}

			State = 1528; Match(EQ);
			State = 1530;
			switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				State = 1529; whiteSpace();
				}
				break;
			}
			State = 1532; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1534; Match(LSET);
			State = 1535; whiteSpace();
			State = 1536; expression(0);
			State = 1538;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1537; whiteSpace();
				}
			}

			State = 1540; Match(EQ);
			State = 1542;
			switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				State = 1541; whiteSpace();
				}
				break;
			}
			State = 1544; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParser.ON_LOCAL_ERROR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1547; whiteSpace();
			State = 1556;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1548; Match(GOTO);
				State = 1549; whiteSpace();
				State = 1550; expression(0);
				}
				break;
			case RESUME:
				{
				State = 1552; Match(RESUME);
				State = 1553; whiteSpace();
				State = 1554; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1558; Match(ON);
			State = 1559; whiteSpace();
			State = 1560; expression(0);
			State = 1561; whiteSpace();
			State = 1562; Match(GOTO);
			State = 1563; whiteSpace();
			State = 1564; expression(0);
			State = 1575;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,181,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1566;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1565; whiteSpace();
						}
					}

					State = 1568; Match(COMMA);
					State = 1570;
					switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
					case 1:
						{
						State = 1569; whiteSpace();
						}
						break;
					}
					State = 1572; expression(0);
					}
					} 
				}
				State = 1577;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,181,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1578; Match(ON);
			State = 1579; whiteSpace();
			State = 1580; expression(0);
			State = 1581; whiteSpace();
			State = 1582; Match(GOSUB);
			State = 1583; whiteSpace();
			State = 1584; expression(0);
			State = 1595;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,184,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1586;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1585; whiteSpace();
						}
					}

					State = 1588; Match(COMMA);
					State = 1590;
					switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
					case 1:
						{
						State = 1589; whiteSpace();
						}
						break;
					}
					State = 1592; expression(0);
					}
					} 
				}
				State = 1597;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,184,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1601;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1598; visibility();
				State = 1599; whiteSpace();
				}
			}

			State = 1605;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1603; Match(STATIC);
				State = 1604; whiteSpace();
				}
			}

			State = 1607; Match(PROPERTY_GET);
			State = 1608; whiteSpace();
			State = 1609; functionName();
			State = 1614;
			switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				State = 1611;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1610; whiteSpace();
					}
				}

				State = 1613; argList();
				}
				break;
			}
			State = 1619;
			switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				State = 1616; whiteSpace();
				State = 1617; asTypeClause();
				}
				break;
			}
			State = 1621; endOfStatement();
			State = 1622; block();
			State = 1623; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1628;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1625; visibility();
				State = 1626; whiteSpace();
				}
			}

			State = 1632;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1630; Match(STATIC);
				State = 1631; whiteSpace();
				}
			}

			State = 1634; Match(PROPERTY_SET);
			State = 1635; whiteSpace();
			State = 1636; subroutineName();
			State = 1641;
			switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				State = 1638;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1637; whiteSpace();
					}
				}

				State = 1640; argList();
				}
				break;
			}
			State = 1643; endOfStatement();
			State = 1644; block();
			State = 1645; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1647; visibility();
				State = 1648; whiteSpace();
				}
			}

			State = 1654;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1652; Match(STATIC);
				State = 1653; whiteSpace();
				}
			}

			State = 1656; Match(PROPERTY_LET);
			State = 1657; whiteSpace();
			State = 1658; subroutineName();
			State = 1663;
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				State = 1660;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1659; whiteSpace();
					}
				}

				State = 1662; argList();
				}
				break;
			}
			State = 1665; endOfStatement();
			State = 1666; block();
			State = 1667; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EventArgumentListContext eventArgumentList() {
			return GetRuleContext<EventArgumentListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669; Match(RAISEEVENT);
			State = 1670; whiteSpace();
			State = 1671; identifier();
			State = 1686;
			switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				State = 1673;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1672; whiteSpace();
					}
				}

				State = 1675; Match(LPAREN);
				State = 1677;
				switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
				case 1:
					{
					State = 1676; whiteSpace();
					}
					break;
				}
				State = 1680;
				switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
				case 1:
					{
					State = 1679; eventArgumentList();
					}
					break;
				}
				State = 1683;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1682; whiteSpace();
					}
				}

				State = 1685; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventArgumentListContext : ParserRuleContext {
		public EventArgumentContext eventArgument(int i) {
			return GetRuleContext<EventArgumentContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<EventArgumentContext> eventArgument() {
			return GetRuleContexts<EventArgumentContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public EventArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventArgumentListContext eventArgumentList() {
		EventArgumentListContext _localctx = new EventArgumentListContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_eventArgumentList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1688; eventArgument();
			State = 1699;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,205,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1690;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1689; whiteSpace();
						}
					}

					State = 1692; Match(COMMA);
					State = 1694;
					switch ( Interpreter.AdaptivePredict(_input,204,_ctx) ) {
					case 1:
						{
						State = 1693; whiteSpace();
						}
						break;
					}
					State = 1696; eventArgument();
					}
					} 
				}
				State = 1701;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,205,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventArgumentContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public EventArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEventArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEventArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventArgumentContext eventArgument() {
		EventArgumentContext _localctx = new EventArgumentContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_eventArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1704;
			switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				State = 1702; Match(BYVAL);
				State = 1703; whiteSpace();
				}
				break;
			}
			State = 1706; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public RedimDeclarationListContext redimDeclarationList() {
			return GetRuleContext<RedimDeclarationListContext>(0);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_redimStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1708; Match(REDIM);
			State = 1709; whiteSpace();
			State = 1712;
			switch ( Interpreter.AdaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				State = 1710; Match(PRESERVE);
				State = 1711; whiteSpace();
				}
				break;
			}
			State = 1714; redimDeclarationList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimDeclarationListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<RedimVariableDeclarationContext> redimVariableDeclaration() {
			return GetRuleContexts<RedimVariableDeclarationContext>();
		}
		public RedimVariableDeclarationContext redimVariableDeclaration(int i) {
			return GetRuleContext<RedimVariableDeclarationContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public RedimDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimDeclarationListContext redimDeclarationList() {
		RedimDeclarationListContext _localctx = new RedimDeclarationListContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_redimDeclarationList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1716; redimVariableDeclaration();
			State = 1727;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,210,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1718;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1717; whiteSpace();
						}
					}

					State = 1720; Match(COMMA);
					State = 1722;
					switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
					case 1:
						{
						State = 1721; whiteSpace();
						}
						break;
					}
					State = 1724; redimVariableDeclaration();
					}
					} 
				}
				State = 1729;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,210,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimVariableDeclarationContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RedimVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRedimVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRedimVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimVariableDeclarationContext redimVariableDeclaration() {
		RedimVariableDeclarationContext _localctx = new RedimVariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_redimVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1730; expression(0);
			State = 1734;
			switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
			case 1:
				{
				State = 1731; whiteSpace();
				State = 1732; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStatementContext : ParserRuleContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public LExpressionContext lExpression(int i) {
			return GetRuleContext<LExpressionContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<LExpressionContext> lExpression() {
			return GetRuleContexts<LExpressionContext>();
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ModeSpecifierContext modeSpecifier() {
			return GetRuleContext<ModeSpecifierContext>(0);
		}
		public MidStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMidStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMidStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStatementContext midStatement() {
		MidStatementContext _localctx = new MidStatementContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_midStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1736; modeSpecifier();
			State = 1737; Match(LPAREN);
			State = 1739;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1738; whiteSpace();
				}
			}

			State = 1741; lExpression(0);
			State = 1743;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1742; whiteSpace();
				}
			}

			State = 1745; Match(COMMA);
			State = 1747;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1746; whiteSpace();
				}
			}

			State = 1749; lExpression(0);
			State = 1751;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1750; whiteSpace();
				}
			}

			State = 1761;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1753; Match(COMMA);
				State = 1755;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1754; whiteSpace();
					}
				}

				State = 1757; lExpression(0);
				State = 1759;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1758; whiteSpace();
					}
				}

				}
			}

			State = 1763; Match(RPAREN);
			State = 1765;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1764; whiteSpace();
				}
			}

			State = 1767; Match(ASSIGN);
			State = 1769;
			switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				State = 1768; whiteSpace();
				}
				break;
			}
			State = 1771; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSpecifierContext : ParserRuleContext {
		public ITerminalNode MIDB() { return GetToken(VBAParser.MIDB, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VBAParser.DOLLAR, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ModeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModeSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeSpecifierContext modeSpecifier() {
		ModeSpecifierContext _localctx = new ModeSpecifierContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_modeSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1773;
			_la = _input.La(1);
			if ( !(_la==MIDB || _la==MID) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1775;
			_la = _input.La(1);
			if (_la==DOLLAR) {
				{
				State = 1774; Match(DOLLAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IntegerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIntegerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIntegerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerExpressionContext integerExpression() {
		IntegerExpressionContext _localctx = new IntegerExpressionContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_integerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1777; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStmtContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStmtContext callStmt() {
		CallStmtContext _localctx = new CallStmtContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_callStmt);
		try {
			State = 1789;
			switch (_input.La(1)) {
			case CALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1779; Match(CALL);
				State = 1780; whiteSpace();
				State = 1781; expression(0);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case PSET:
			case SGN:
			case UBOUND:
			case EXCLAMATIONPOINT:
			case DOT:
			case HASH:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case EMPTY:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case LPAREN:
			case MINUS:
			case L_SQUARE_BRACKET:
			case STRINGLITERAL:
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
			case DATELITERAL:
			case WS:
			case IDENTIFIER:
			case LINE_CONTINUATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1783; expression(0);
				State = 1787;
				switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
				case 1:
					{
					State = 1784; whiteSpace();
					State = 1785; argumentList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1791; Match(RESUME);
			State = 1797;
			switch ( Interpreter.AdaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				State = 1792; whiteSpace();
				State = 1795;
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 1793; Match(NEXT);
					}
					break;
				case ABS:
				case ANY:
				case ARRAY:
				case B_CHAR:
				case BF:
				case CBOOL:
				case CBYTE:
				case CCUR:
				case CDATE:
				case CDBL:
				case CDEC:
				case CINT:
				case CLNG:
				case CLNGLNG:
				case CLNGPTR:
				case CSNG:
				case CSTR:
				case CURRENCY:
				case CVAR:
				case CVERR:
				case DEBUG:
				case DOEVENTS:
				case FIX:
				case INPUTB:
				case INT:
				case LBOUND:
				case LEN:
				case LENB:
				case LONGLONG:
				case LONGPTR:
				case MIDB:
				case PSET:
				case SGN:
				case UBOUND:
				case EXCLAMATIONPOINT:
				case DOT:
				case HASH:
				case ACCESS:
				case ADDRESSOF:
				case ALIAS:
				case AND:
				case ATTRIBUTE:
				case APPEND:
				case BEGIN:
				case BINARY:
				case BOOLEAN:
				case BYVAL:
				case BYREF:
				case BYTE:
				case CLASS:
				case CLOSE:
				case DATABASE:
				case DATE:
				case DOUBLE:
				case EMPTY:
				case END:
				case EQV:
				case ERROR:
				case FALSE:
				case GET:
				case IMP:
				case IN:
				case INPUT:
				case IS:
				case INTEGER:
				case LOCK:
				case LONG:
				case LIB:
				case LIKE:
				case LINE_INPUT:
				case LOCK_READ:
				case LOCK_WRITE:
				case LOCK_READ_WRITE:
				case ME:
				case MID:
				case MOD:
				case NAME:
				case NEW:
				case NOT:
				case NOTHING:
				case NULL:
				case OBJECT:
				case ON_ERROR:
				case OPEN:
				case OPTIONAL:
				case OR:
				case OUTPUT:
				case PARAMARRAY:
				case PRESERVE:
				case PRINT:
				case PTRSAFE:
				case PUT:
				case RANDOM:
				case READ:
				case READ_WRITE:
				case REM:
				case RESET:
				case SEEK:
				case SHARED:
				case SINGLE:
				case SPC:
				case STEP:
				case STRING:
				case TAB:
				case TEXT:
				case THEN:
				case TO:
				case TRUE:
				case TYPEOF:
				case UNLOCK:
				case UNTIL:
				case VARIANT:
				case VERSION:
				case WIDTH:
				case WITHEVENTS:
				case WRITE:
				case XOR:
				case LPAREN:
				case MINUS:
				case L_SQUARE_BRACKET:
				case STRINGLITERAL:
				case OCTLITERAL:
				case HEXLITERAL:
				case FLOATLITERAL:
				case INTEGERLITERAL:
				case DATELITERAL:
				case WS:
				case IDENTIFIER:
				case LINE_CONTINUATION:
					{
					State = 1794; expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1799; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801; Match(RSET);
			State = 1802; whiteSpace();
			State = 1803; expression(0);
			State = 1805;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1804; whiteSpace();
				}
			}

			State = 1807; Match(EQ);
			State = 1809;
			switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				State = 1808; whiteSpace();
				}
				break;
			}
			State = 1811; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1813; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1815; Match(NAME);
			State = 1816; whiteSpace();
			State = 1817; expression(0);
			State = 1818; whiteSpace();
			State = 1819; Match(AS);
			State = 1820; whiteSpace();
			State = 1821; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public IReadOnlyList<CaseClauseContext> caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public SelectExpressionContext selectExpression() {
			return GetRuleContext<SelectExpressionContext>(0);
		}
		public CaseElseClauseContext caseElseClause() {
			return GetRuleContext<CaseElseClauseContext>(0);
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_selectCaseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1823; Match(SELECT);
			State = 1825;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1824; whiteSpace();
				}
			}

			State = 1827; Match(CASE);
			State = 1829;
			switch ( Interpreter.AdaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				State = 1828; whiteSpace();
				}
				break;
			}
			State = 1831; selectExpression();
			State = 1832; endOfStatement();
			State = 1836;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,230,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1833; caseClause();
					}
					} 
				}
				State = 1838;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,230,_ctx);
			}
			State = 1840;
			_la = _input.La(1);
			if (_la==CASE) {
				{
				State = 1839; caseElseClause();
				}
			}

			State = 1842; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectExpressionContext selectExpression() {
		SelectExpressionContext _localctx = new SelectExpressionContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_selectExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1844; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public IReadOnlyList<RangeClauseContext> rangeClause() {
			return GetRuleContexts<RangeClauseContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public RangeClauseContext rangeClause(int i) {
			return GetRuleContext<RangeClauseContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_caseClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1846; Match(CASE);
			State = 1847; whiteSpace();
			State = 1848; rangeClause();
			State = 1859;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,234,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1850;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1849; whiteSpace();
						}
					}

					State = 1852; Match(COMMA);
					State = 1854;
					switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
					case 1:
						{
						State = 1853; whiteSpace();
						}
						break;
					}
					State = 1856; rangeClause();
					}
					} 
				}
				State = 1861;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,234,_ctx);
			}
			State = 1862; endOfStatement();
			State = 1863; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseElseClauseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CaseElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseElseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCaseElseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCaseElseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseElseClauseContext caseElseClause() {
		CaseElseClauseContext _localctx = new CaseElseClauseContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_caseElseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1865; Match(CASE);
			State = 1867;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1866; whiteSpace();
				}
			}

			State = 1869; Match(ELSE);
			State = 1870; endOfStatement();
			State = 1871; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeClauseContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public SelectEndValueContext selectEndValue() {
			return GetRuleContext<SelectEndValueContext>(0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public SelectStartValueContext selectStartValue() {
			return GetRuleContext<SelectStartValueContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RangeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRangeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRangeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeClauseContext rangeClause() {
		RangeClauseContext _localctx = new RangeClauseContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_rangeClause);
		int _la;
		try {
			State = 1892;
			switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1877;
				switch ( Interpreter.AdaptivePredict(_input,237,_ctx) ) {
				case 1:
					{
					State = 1873; Match(IS);
					State = 1875;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1874; whiteSpace();
						}
					}

					}
					break;
				}
				State = 1879; comparisonOperator();
				State = 1881;
				switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
				case 1:
					{
					State = 1880; whiteSpace();
					}
					break;
				}
				State = 1883; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1885; selectStartValue();
				State = 1886; whiteSpace();
				State = 1887; Match(TO);
				State = 1888; whiteSpace();
				State = 1889; selectEndValue();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1891; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStartValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectStartValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStartValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectStartValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectStartValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStartValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStartValueContext selectStartValue() {
		SelectStartValueContext _localctx = new SelectStartValueContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_selectStartValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1894; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectEndValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectEndValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectEndValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSelectEndValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSelectEndValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectEndValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectEndValueContext selectEndValue() {
		SelectEndValueContext _localctx = new SelectEndValueContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_selectEndValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1896; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1898; Match(SET);
			State = 1899; whiteSpace();
			State = 1900; lExpression(0);
			State = 1902;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1901; whiteSpace();
				}
			}

			State = 1904; Match(EQ);
			State = 1906;
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				State = 1905; whiteSpace();
				}
				break;
			}
			State = 1908; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1913;
			_la = _input.La(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) {
				{
				State = 1910; visibility();
				State = 1911; whiteSpace();
				}
			}

			State = 1917;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1915; Match(STATIC);
				State = 1916; whiteSpace();
				}
			}

			State = 1919; Match(SUB);
			State = 1921;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1920; whiteSpace();
				}
			}

			State = 1923; subroutineName();
			State = 1928;
			switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				State = 1925;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 1924; whiteSpace();
					}
				}

				State = 1927; argList();
				}
				break;
			}
			State = 1930; endOfStatement();
			State = 1931; block();
			State = 1932; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubroutineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubroutineName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubroutineName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineNameContext subroutineName() {
		SubroutineNameContext _localctx = new SubroutineNameContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_subroutineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1934; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublicTypeDeclarationContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public UdtDeclarationContext udtDeclaration() {
			return GetRuleContext<UdtDeclarationContext>(0);
		}
		public PublicTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publicTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPublicTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPublicTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublicTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublicTypeDeclarationContext publicTypeDeclaration() {
		PublicTypeDeclarationContext _localctx = new PublicTypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_publicTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1938;
			_la = _input.La(1);
			if (_la==GLOBAL || _la==PUBLIC) {
				{
				State = 1936;
				_la = _input.La(1);
				if ( !(_la==GLOBAL || _la==PUBLIC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1937; whiteSpace();
				}
			}

			State = 1940; udtDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivateTypeDeclarationContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public UdtDeclarationContext udtDeclaration() {
			return GetRuleContext<UdtDeclarationContext>(0);
		}
		public PrivateTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privateTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPrivateTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPrivateTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivateTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivateTypeDeclarationContext privateTypeDeclaration() {
		PrivateTypeDeclarationContext _localctx = new PrivateTypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_privateTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1942; Match(PRIVATE);
			State = 1943; whiteSpace();
			State = 1944; udtDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdtDeclarationContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public UntypedIdentifierContext untypedIdentifier() {
			return GetRuleContext<UntypedIdentifierContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public UdtMemberListContext udtMemberList() {
			return GetRuleContext<UdtMemberListContext>(0);
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public UdtDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udtDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUdtDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUdtDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdtDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdtDeclarationContext udtDeclaration() {
		UdtDeclarationContext _localctx = new UdtDeclarationContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_udtDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1946; Match(TYPE);
			State = 1947; whiteSpace();
			State = 1948; untypedIdentifier();
			State = 1949; endOfStatement();
			State = 1950; udtMemberList();
			State = 1951; endOfStatement();
			State = 1952; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdtMemberListContext : ParserRuleContext {
		public EndOfStatementContext endOfStatement(int i) {
			return GetRuleContext<EndOfStatementContext>(i);
		}
		public UdtMemberContext udtMember(int i) {
			return GetRuleContext<UdtMemberContext>(i);
		}
		public IReadOnlyList<UdtMemberContext> udtMember() {
			return GetRuleContexts<UdtMemberContext>();
		}
		public IReadOnlyList<EndOfStatementContext> endOfStatement() {
			return GetRuleContexts<EndOfStatementContext>();
		}
		public UdtMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udtMemberList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUdtMemberList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUdtMemberList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdtMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdtMemberListContext udtMemberList() {
		UdtMemberListContext _localctx = new UdtMemberListContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_udtMemberList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1954; udtMember();
			State = 1960;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,248,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1955; endOfStatement();
					State = 1956; udtMember();
					}
					} 
				}
				State = 1962;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,248,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdtMemberContext : ParserRuleContext {
		public UntypedNameMemberDeclarationContext untypedNameMemberDeclaration() {
			return GetRuleContext<UntypedNameMemberDeclarationContext>(0);
		}
		public ReservedNameMemberDeclarationContext reservedNameMemberDeclaration() {
			return GetRuleContext<ReservedNameMemberDeclarationContext>(0);
		}
		public UdtMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udtMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUdtMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUdtMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdtMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdtMemberContext udtMember() {
		UdtMemberContext _localctx = new UdtMemberContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_udtMember);
		try {
			State = 1965;
			switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1963; reservedNameMemberDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1964; untypedNameMemberDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntypedNameMemberDeclarationContext : ParserRuleContext {
		public UntypedIdentifierContext untypedIdentifier() {
			return GetRuleContext<UntypedIdentifierContext>(0);
		}
		public OptionalArrayClauseContext optionalArrayClause() {
			return GetRuleContext<OptionalArrayClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public UntypedNameMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untypedNameMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUntypedNameMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUntypedNameMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedNameMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntypedNameMemberDeclarationContext untypedNameMemberDeclaration() {
		UntypedNameMemberDeclarationContext _localctx = new UntypedNameMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_untypedNameMemberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1967; untypedIdentifier();
			State = 1969;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1968; whiteSpace();
				}
			}

			State = 1971; optionalArrayClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedNameMemberDeclarationContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ReservedNameMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedNameMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterReservedNameMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitReservedNameMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedNameMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedNameMemberDeclarationContext reservedNameMemberDeclaration() {
		ReservedNameMemberDeclarationContext _localctx = new ReservedNameMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_reservedNameMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1973; unrestrictedIdentifier();
			State = 1974; whiteSpace();
			State = 1975; asTypeClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalArrayClauseContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ArrayDimContext arrayDim() {
			return GetRuleContext<ArrayDimContext>(0);
		}
		public OptionalArrayClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalArrayClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterOptionalArrayClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitOptionalArrayClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalArrayClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalArrayClauseContext optionalArrayClause() {
		OptionalArrayClauseContext _localctx = new OptionalArrayClauseContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_optionalArrayClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1980;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1977; arrayDim();
				State = 1978; whiteSpace();
				}
			}

			State = 1982; asTypeClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDimContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BoundsListContext boundsList() {
			return GetRuleContext<BoundsListContext>(0);
		}
		public ArrayDimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDim; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArrayDim(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArrayDim(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDim(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDimContext arrayDim() {
		ArrayDimContext _localctx = new ArrayDimContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_arrayDim);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1984; Match(LPAREN);
			State = 1986;
			switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				State = 1985; whiteSpace();
				}
				break;
			}
			State = 1989;
			switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
			case 1:
				{
				State = 1988; boundsList();
				}
				break;
			}
			State = 1992;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 1991; whiteSpace();
				}
			}

			State = 1994; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundsListContext : ParserRuleContext {
		public DimSpecContext dimSpec(int i) {
			return GetRuleContext<DimSpecContext>(i);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<DimSpecContext> dimSpec() {
			return GetRuleContexts<DimSpecContext>();
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public BoundsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundsList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBoundsList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBoundsList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoundsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoundsListContext boundsList() {
		BoundsListContext _localctx = new BoundsListContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_boundsList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1996; dimSpec();
			State = 2007;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,257,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1998;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 1997; whiteSpace();
						}
					}

					State = 2000; Match(COMMA);
					State = 2002;
					switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
					case 1:
						{
						State = 2001; whiteSpace();
						}
						break;
					}
					State = 2004; dimSpec();
					}
					} 
				}
				State = 2009;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,257,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimSpecContext : ParserRuleContext {
		public LowerBoundContext lowerBound() {
			return GetRuleContext<LowerBoundContext>(0);
		}
		public UpperBoundContext upperBound() {
			return GetRuleContext<UpperBoundContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public DimSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDimSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDimSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimSpecContext dimSpec() {
		DimSpecContext _localctx = new DimSpecContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_dimSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2014;
			switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
			case 1:
				{
				State = 2010; lowerBound();
				State = 2012;
				switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					State = 2011; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 2016; upperBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public LowerBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLowerBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLowerBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowerBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowerBoundContext lowerBound() {
		LowerBoundContext _localctx = new LowerBoundContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_lowerBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2018; constantExpression();
			State = 2020;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2019; whiteSpace();
				}
			}

			State = 2022; Match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public UpperBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperBoundContext upperBound() {
		UpperBoundContext _localctx = new UpperBoundContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_upperBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2024; constantExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2026; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2031;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 2028; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 2029; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 2030; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2033; whiteSpace();
			State = 2036;
			switch ( Interpreter.AdaptivePredict(_input,262,_ctx) ) {
			case 1:
				{
				State = 2034; Match(WITHEVENTS);
				State = 2035; whiteSpace();
				}
				break;
			}
			State = 2038; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2040; variableSubStmt();
			State = 2051;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,265,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2042;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2041; whiteSpace();
						}
					}

					State = 2044; Match(COMMA);
					State = 2046;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2045; whiteSpace();
						}
					}

					State = 2048; variableSubStmt();
					}
					} 
				}
				State = 2053;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,265,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2054; identifier();
			State = 2072;
			switch ( Interpreter.AdaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				State = 2056;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2055; whiteSpace();
					}
				}

				State = 2058; Match(LPAREN);
				State = 2060;
				switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
				case 1:
					{
					State = 2059; whiteSpace();
					}
					break;
				}
				State = 2066;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (OCTLITERAL - 193)) | (1L << (HEXLITERAL - 193)) | (1L << (FLOATLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (WS - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (LINE_CONTINUATION - 193)))) != 0)) {
					{
					State = 2062; subscripts();
					State = 2064;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2063; whiteSpace();
						}
					}

					}
				}

				State = 2068; Match(RPAREN);
				State = 2070;
				switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					State = 2069; whiteSpace();
					}
					break;
				}
				}
				break;
			}
			State = 2077;
			switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				State = 2074; whiteSpace();
				State = 2075; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_whileWendStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2079; Match(WHILE);
			State = 2080; whiteSpace();
			State = 2081; expression(0);
			State = 2082; endOfStatement();
			State = 2083; block();
			State = 2084; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndOfStatementContext endOfStatement() {
			return GetRuleContext<EndOfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_withStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2086; Match(WITH);
			State = 2087; whiteSpace();
			State = 2088; expression(0);
			State = 2089; endOfStatement();
			State = 2090; block();
			State = 2091; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineSpecialFormContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode STEP(int i) {
			return GetToken(VBAParser.STEP, i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<TupleContext> tuple() {
			return GetRuleContexts<TupleContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public IReadOnlyList<ITerminalNode> STEP() { return GetTokens(VBAParser.STEP); }
		public LineSpecialFormOptionContext lineSpecialFormOption() {
			return GetRuleContext<LineSpecialFormOptionContext>(0);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public TupleContext tuple(int i) {
			return GetRuleContext<TupleContext>(i);
		}
		public LineSpecialFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineSpecialForm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineSpecialForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineSpecialForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineSpecialForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineSpecialFormContext lineSpecialForm() {
		LineSpecialFormContext _localctx = new LineSpecialFormContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_lineSpecialForm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2093; expression(0);
			State = 2094; whiteSpace();
			State = 2099;
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 2095; Match(STEP);
				State = 2097;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2096; whiteSpace();
					}
				}

				}
			}

			State = 2101; tuple();
			State = 2102; Match(MINUS);
			State = 2107;
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 2103; Match(STEP);
				State = 2105;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2104; whiteSpace();
					}
				}

				}
			}

			State = 2109; tuple();
			State = 2111;
			switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
			case 1:
				{
				State = 2110; whiteSpace();
				}
				break;
			}
			State = 2118;
			switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				State = 2113; Match(COMMA);
				State = 2115;
				switch ( Interpreter.AdaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					State = 2114; whiteSpace();
					}
					break;
				}
				State = 2117; expression(0);
				}
				break;
			}
			State = 2121;
			switch ( Interpreter.AdaptivePredict(_input,280,_ctx) ) {
			case 1:
				{
				State = 2120; whiteSpace();
				}
				break;
			}
			State = 2128;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 2123; Match(COMMA);
				State = 2125;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2124; whiteSpace();
					}
				}

				State = 2127; lineSpecialFormOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CircleSpecialFormContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ITerminalNode CIRCLE() { return GetToken(VBAParser.CIRCLE, 0); }
		public CircleSpecialFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_circleSpecialForm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCircleSpecialForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCircleSpecialForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCircleSpecialForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CircleSpecialFormContext circleSpecialForm() {
		CircleSpecialFormContext _localctx = new CircleSpecialFormContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_circleSpecialForm);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2138;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (OCTLITERAL - 193)) | (1L << (HEXLITERAL - 193)) | (1L << (FLOATLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (WS - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (LINE_CONTINUATION - 193)))) != 0)) {
				{
				State = 2130; expression(0);
				State = 2132;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2131; whiteSpace();
					}
				}

				State = 2134; Match(DOT);
				State = 2136;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2135; whiteSpace();
					}
				}

				}
			}

			State = 2140; Match(CIRCLE);
			State = 2141; whiteSpace();
			State = 2146;
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 2142; Match(STEP);
				State = 2144;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2143; whiteSpace();
					}
				}

				}
			}

			State = 2148; tuple();
			State = 2157;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2150;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2149; whiteSpace();
						}
					}

					State = 2152; Match(COMMA);
					State = 2154;
					switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
					case 1:
						{
						State = 2153; whiteSpace();
						}
						break;
					}
					State = 2156; expression(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2159;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,290,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScaleSpecialFormContext : ParserRuleContext {
		public ITerminalNode SCALE() { return GetToken(VBAParser.SCALE, 0); }
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<TupleContext> tuple() {
			return GetRuleContexts<TupleContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TupleContext tuple(int i) {
			return GetRuleContext<TupleContext>(i);
		}
		public ScaleSpecialFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scaleSpecialForm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterScaleSpecialForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitScaleSpecialForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScaleSpecialForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScaleSpecialFormContext scaleSpecialForm() {
		ScaleSpecialFormContext _localctx = new ScaleSpecialFormContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_scaleSpecialForm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2169;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (EMPTY - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)) | (1L << (LPAREN - 193)) | (1L << (MINUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (OCTLITERAL - 193)) | (1L << (HEXLITERAL - 193)) | (1L << (FLOATLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (WS - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (LINE_CONTINUATION - 193)))) != 0)) {
				{
				State = 2161; expression(0);
				State = 2163;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2162; whiteSpace();
					}
				}

				State = 2165; Match(DOT);
				State = 2167;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2166; whiteSpace();
					}
				}

				}
			}

			State = 2171; Match(SCALE);
			State = 2172; whiteSpace();
			State = 2173; tuple();
			State = 2175;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2174; whiteSpace();
				}
			}

			State = 2177; Match(MINUS);
			State = 2179;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2178; whiteSpace();
				}
			}

			State = 2181; tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VBAParser.COMMA, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2183; Match(LPAREN);
			State = 2185;
			switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				State = 2184; whiteSpace();
				}
				break;
			}
			State = 2187; expression(0);
			State = 2189;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2188; whiteSpace();
				}
			}

			State = 2191; Match(COMMA);
			State = 2193;
			switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				State = 2192; whiteSpace();
				}
				break;
			}
			State = 2195; expression(0);
			State = 2197;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2196; whiteSpace();
				}
			}

			State = 2199; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineSpecialFormOptionContext : ParserRuleContext {
		public ITerminalNode B_CHAR() { return GetToken(VBAParser.B_CHAR, 0); }
		public ITerminalNode BF() { return GetToken(VBAParser.BF, 0); }
		public LineSpecialFormOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineSpecialFormOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineSpecialFormOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineSpecialFormOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineSpecialFormOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineSpecialFormOptionContext lineSpecialFormOption() {
		LineSpecialFormOptionContext _localctx = new LineSpecialFormOptionContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_lineSpecialFormOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201;
			_la = _input.La(1);
			if ( !(_la==B_CHAR || _la==BF) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2203; subscript();
			State = 2214;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,302,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2205;
					_la = _input.La(1);
					if (_la==WS || _la==LINE_CONTINUATION) {
						{
						State = 2204; whiteSpace();
						}
					}

					State = 2207; Match(COMMA);
					State = 2209;
					switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
					case 1:
						{
						State = 2208; whiteSpace();
						}
						break;
					}
					State = 2211; subscript();
					}
					} 
				}
				State = 2216;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,302,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2222;
			switch ( Interpreter.AdaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				State = 2217; expression(0);
				State = 2218; whiteSpace();
				State = 2219; Match(TO);
				State = 2220; whiteSpace();
				}
				break;
			}
			State = 2224; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnrestrictedIdentifierContext : ParserRuleContext {
		public MarkerKeywordContext markerKeyword() {
			return GetRuleContext<MarkerKeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementKeywordContext statementKeyword() {
			return GetRuleContext<StatementKeywordContext>(0);
		}
		public UnrestrictedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unrestrictedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnrestrictedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnrestrictedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnrestrictedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnrestrictedIdentifierContext unrestrictedIdentifier() {
		UnrestrictedIdentifierContext _localctx = new UnrestrictedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_unrestrictedIdentifier);
		try {
			State = 2229;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2226; identifier();
				}
				break;
			case EXIT:
			case OPTION:
			case CALL:
			case CASE:
			case CONST:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case ELSE:
			case ELSEIF:
			case END_SELECT:
			case END_WITH:
			case ENUM:
			case ERASE:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMPLEMENTS:
			case LOOP:
			case LET:
			case LSET:
			case NEXT:
			case ON:
			case PRIVATE:
			case PUBLIC:
			case RAISEEVENT:
			case REDIM:
			case RESUME:
			case RETURN:
			case RSET:
			case SELECT:
			case SET:
			case STATIC:
			case STOP:
			case SUB:
			case TYPE:
			case WEND:
			case WHILE:
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2227; statementKeyword();
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2228; markerKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public UntypedIdentifierContext untypedIdentifier() {
			return GetRuleContext<UntypedIdentifierContext>(0);
		}
		public TypedIdentifierContext typedIdentifier() {
			return GetRuleContext<TypedIdentifierContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_identifier);
		try {
			State = 2233;
			switch ( Interpreter.AdaptivePredict(_input,305,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2231; typedIdentifier();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2232; untypedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntypedIdentifierContext : ParserRuleContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public UntypedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untypedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUntypedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUntypedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntypedIdentifierContext untypedIdentifier() {
		UntypedIdentifierContext _localctx = new UntypedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_untypedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2235; identifierValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdentifierContext : ParserRuleContext {
		public UntypedIdentifierContext untypedIdentifier() {
			return GetRuleContext<UntypedIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public TypedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdentifierContext typedIdentifier() {
		TypedIdentifierContext _localctx = new TypedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_typedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2237; untypedIdentifier();
			State = 2238; typeHint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierValueContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VBAParser.IDENTIFIER, 0); }
		public ForeignNameContext foreignName() {
			return GetRuleContext<ForeignNameContext>(0);
		}
		public ITerminalNode BF() { return GetToken(VBAParser.BF, 0); }
		public IdentifierValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifierValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifierValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierValueContext identifierValue() {
		IdentifierValueContext _localctx = new IdentifierValueContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_identifierValue);
		try {
			State = 2244;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2240; Match(IDENTIFIER);
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2241; keyword();
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2242; foreignName();
				}
				break;
			case BF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2243; Match(BF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeignNameContext : ParserRuleContext {
		public IReadOnlyList<ForeignIdentifierContext> foreignIdentifier() {
			return GetRuleContexts<ForeignIdentifierContext>();
		}
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public ForeignIdentifierContext foreignIdentifier(int i) {
			return GetRuleContext<ForeignIdentifierContext>(i);
		}
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public ForeignNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreignName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForeignName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForeignName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeignNameContext foreignName() {
		ForeignNameContext _localctx = new ForeignNameContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_foreignName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2246; Match(L_SQUARE_BRACKET);
			State = 2250;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << BF) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CIRCLE) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << EXIT) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << OPTION) | (1L << PSET) | (1L << SCALE) | (1L << SGN) | (1L << UBOUND) | (1L << COMMA) | (1L << COLON) | (1L << SEMICOLON) | (1L << EXCLAMATIONPOINT) | (1L << DOT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONST - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFBOOL - 64)) | (1L << (DEFBYTE - 64)) | (1L << (DEFDATE - 64)) | (1L << (DEFDBL - 64)) | (1L << (DEFCUR - 64)) | (1L << (DEFINT - 64)) | (1L << (DEFLNG - 64)) | (1L << (DEFLNGLNG - 64)) | (1L << (DEFLNGPTR - 64)) | (1L << (DEFOBJ - 64)) | (1L << (DEFSNG - 64)) | (1L << (DEFSTR - 64)) | (1L << (DEFVAR - 64)) | (1L << (DIM - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (EMPTY - 64)) | (1L << (END_ENUM - 64)) | (1L << (END_FUNCTION - 64)) | (1L << (END_IF - 64)) | (1L << (END_PROPERTY - 64)) | (1L << (END_SELECT - 64)) | (1L << (END_SUB - 64)) | (1L << (END_TYPE - 64)) | (1L << (END_WITH - 64)) | (1L << (END - 64)) | (1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (LSET - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEXT - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON - 128)) | (1L << (ON_ERROR - 128)) | (1L << (ON_LOCAL_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OPTION_BASE - 128)) | (1L << (OPTION_EXPLICIT - 128)) | (1L << (OPTION_COMPARE - 128)) | (1L << (OPTION_PRIVATE_MODULE - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RSET - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TYPE - 192)) | (1L << (TYPEOF - 192)) | (1L << (UNLOCK - 192)) | (1L << (UNTIL - 192)) | (1L << (VARIANT - 192)) | (1L << (VERSION - 192)) | (1L << (WEND - 192)) | (1L << (WHILE - 192)) | (1L << (WIDTH - 192)) | (1L << (WITH - 192)) | (1L << (WITHEVENTS - 192)) | (1L << (WRITE - 192)) | (1L << (XOR - 192)) | (1L << (ASSIGN - 192)) | (1L << (DIV - 192)) | (1L << (INTDIV - 192)) | (1L << (EQ - 192)) | (1L << (GEQ - 192)) | (1L << (GT - 192)) | (1L << (LEQ - 192)) | (1L << (LPAREN - 192)) | (1L << (LT - 192)) | (1L << (MINUS - 192)) | (1L << (MULT - 192)) | (1L << (NEQ - 192)) | (1L << (PLUS - 192)) | (1L << (POW - 192)) | (1L << (RPAREN - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (OCTLITERAL - 192)) | (1L << (HEXLITERAL - 192)) | (1L << (FLOATLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (NEWLINE - 192)) | (1L << (SINGLEQUOTE - 192)) | (1L << (UNDERSCORE - 192)) | (1L << (WS - 192)) | (1L << (GUIDLITERAL - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (LINE_CONTINUATION - 192)) | (1L << (ERRORCHAR - 192)))) != 0)) {
				{
				{
				State = 2247; foreignIdentifier();
				}
				}
				State = 2252;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2253; Match(R_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeignIdentifierContext : ParserRuleContext {
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public ForeignNameContext foreignName() {
			return GetRuleContext<ForeignNameContext>(0);
		}
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public ForeignIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreignIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterForeignIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitForeignIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeignIdentifierContext foreignIdentifier() {
		ForeignIdentifierContext _localctx = new ForeignIdentifierContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_foreignIdentifier);
		int _la;
		try {
			State = 2257;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CIRCLE:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case EXIT:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case OPTION:
			case PSET:
			case SCALE:
			case SGN:
			case UBOUND:
			case COMMA:
			case COLON:
			case SEMICOLON:
			case EXCLAMATIONPOINT:
			case DOT:
			case HASH:
			case AT:
			case PERCENT:
			case DOLLAR:
			case AMPERSAND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case AS:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CLASS:
			case CLOSE:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case EMPTY:
			case END_ENUM:
			case END_FUNCTION:
			case END_IF:
			case END_PROPERTY:
			case END_SELECT:
			case END_SUB:
			case END_TYPE:
			case END_WITH:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case LSET:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON:
			case ON_ERROR:
			case ON_LOCAL_ERROR:
			case OPEN:
			case OPTIONAL:
			case OPTION_BASE:
			case OPTION_EXPLICIT:
			case OPTION_COMPARE:
			case OPTION_PRIVATE_MODULE:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PROPERTY_GET:
			case PROPERTY_LET:
			case PROPERTY_SET:
			case PTRSAFE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RAISEEVENT:
			case READ:
			case READ_WRITE:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RSET:
			case SEEK:
			case SELECT:
			case SET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case ASSIGN:
			case DIV:
			case INTDIV:
			case EQ:
			case GEQ:
			case GT:
			case LEQ:
			case LPAREN:
			case LT:
			case MINUS:
			case MULT:
			case NEQ:
			case PLUS:
			case POW:
			case RPAREN:
			case STRINGLITERAL:
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
			case DATELITERAL:
			case NEWLINE:
			case SINGLEQUOTE:
			case UNDERSCORE:
			case WS:
			case GUIDLITERAL:
			case IDENTIFIER:
			case LINE_CONTINUATION:
			case ERRORCHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2255;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==L_SQUARE_BRACKET || _la==R_SQUARE_BRACKET) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2256; foreignName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_asTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2259; Match(AS);
			State = 2261;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2260; whiteSpace();
				}
			}

			State = 2265;
			switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				State = 2263; Match(NEW);
				State = 2264; whiteSpace();
				}
				break;
			}
			State = 2267; type();
			State = 2272;
			switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				State = 2269;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2268; whiteSpace();
					}
				}

				State = 2271; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode ANY() { return GetToken(VBAParser.ANY, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2274;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANY) | (1L << CURRENCY) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << BOOLEAN) | (1L << BYTE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DATE - 68)) | (1L << (DOUBLE - 68)) | (1L << (INTEGER - 68)) | (1L << (LONG - 68)))) != 0) || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (SINGLE - 180)) | (1L << (STRING - 180)) | (1L << (VARIANT - 180)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2276;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (EQ - 208)) | (1L << (GEQ - 208)) | (1L << (GT - 208)) | (1L << (LEQ - 208)) | (1L << (LT - 208)) | (1L << (NEQ - 208)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
	 
		public ComplexTypeContext() { }
		public virtual void CopyFrom(ComplexTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CtTypeofexprContext : ComplexTypeContext {
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public CtTypeofexprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtTypeofexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtTypeofexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtTypeofexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtMarkedFileNumberExprContext : ComplexTypeContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public CtMarkedFileNumberExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtMarkedFileNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtMarkedFileNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtMarkedFileNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtLiteralExprContext : ComplexTypeContext {
		public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public CtLiteralExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtBuiltInTypeExprContext : ComplexTypeContext {
		public BuiltInTypeContext builtInType() {
			return GetRuleContext<BuiltInTypeContext>(0);
		}
		public CtBuiltInTypeExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtBuiltInTypeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtBuiltInTypeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtBuiltInTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtNewExprContext : ComplexTypeContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public CtNewExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtNewExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtNewExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtParenthesizedExprContext : ComplexTypeContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public CtParenthesizedExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtParenthesizedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtParenthesizedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtLExprContext : ComplexTypeContext {
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public CtLExprContext(ComplexTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCtLExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCtLExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtLExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_complexType);
		int _la;
		try {
			State = 2301;
			switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
			case 1:
				_localctx = new CtLiteralExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2278; literalExpression();
				}
				break;

			case 2:
				_localctx = new CtLExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2279; lExpression(0);
				}
				break;

			case 3:
				_localctx = new CtBuiltInTypeExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2280; builtInType();
				}
				break;

			case 4:
				_localctx = new CtParenthesizedExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2281; Match(LPAREN);
				State = 2283;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2282; whiteSpace();
					}
				}

				State = 2285; complexType();
				State = 2287;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2286; whiteSpace();
					}
				}

				State = 2289; Match(RPAREN);
				}
				break;

			case 5:
				_localctx = new CtTypeofexprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2291; Match(TYPEOF);
				State = 2292; whiteSpace();
				State = 2293; complexType();
				}
				break;

			case 6:
				_localctx = new CtNewExprContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2295; Match(NEW);
				State = 2296; whiteSpace();
				State = 2297; complexType();
				}
				break;

			case 7:
				_localctx = new CtMarkedFileNumberExprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2299; Match(HASH);
				State = 2300; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2303; Match(MULT);
			State = 2305;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2304; whiteSpace();
				}
			}

			State = 2309;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				{
				State = 2307; numberLiteral();
				}
				break;
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CLASS:
			case CLOSE:
			case DATABASE:
			case DATE:
			case DOUBLE:
			case END:
			case EQV:
			case ERROR:
			case FALSE:
			case GET:
			case IMP:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PTRSAFE:
			case PUT:
			case RANDOM:
			case READ:
			case READ_WRITE:
			case REM:
			case RESET:
			case SEEK:
			case SHARED:
			case SINGLE:
			case SPC:
			case STEP:
			case STRING:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WIDTH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				{
				State = 2308; identifierValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLabelDefinitionContext : ParserRuleContext {
		public IdentifierStatementLabelContext identifierStatementLabel() {
			return GetRuleContext<IdentifierStatementLabelContext>(0);
		}
		public LineNumberLabelContext lineNumberLabel() {
			return GetRuleContext<LineNumberLabelContext>(0);
		}
		public StatementLabelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLabelDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementLabelDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementLabelDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLabelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLabelDefinitionContext statementLabelDefinition() {
		StatementLabelDefinitionContext _localctx = new StatementLabelDefinitionContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_statementLabelDefinition);
		try {
			State = 2313;
			switch (_input.La(1)) {
			case ABS:
			case ANY:
			case ARRAY:
			case B_CHAR:
			case BF:
			case CBOOL:
			case CBYTE:
			case CCUR:
			case CDATE:
			case CDBL:
			case CDEC:
			case CINT:
			case CLNG:
			case CLNGLNG:
			case CLNGPTR:
			case CSNG:
			case CSTR:
			case CURRENCY:
			case CVAR:
			case CVERR:
			case DEBUG:
			case DOEVENTS:
			case EXIT:
			case FIX:
			case INPUTB:
			case INT:
			case LBOUND:
			case LEN:
			case LENB:
			case LONGLONG:
			case LONGPTR:
			case MIDB:
			case OPTION:
			case PSET:
			case SGN:
			case UBOUND:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPEND:
			case AS:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CLASS:
			case CLOSE:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFLNGLNG:
			case DEFLNGPTR:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DIM:
			case DO:
			case DOUBLE:
			case ELSE:
			case ELSEIF:
			case END_SELECT:
			case END_WITH:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case LOCK:
			case LONG:
			case LOOP:
			case LET:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LOCK_READ:
			case LOCK_WRITE:
			case LOCK_READ_WRITE:
			case LSET:
			case ME:
			case MID:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PTRSAFE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RAISEEVENT:
			case READ:
			case READ_WRITE:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RSET:
			case SEEK:
			case SELECT:
			case SET:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2311; identifierStatementLabel();
				}
				break;
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2312; lineNumberLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStatementLabelContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public IdentifierStatementLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierStatementLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIdentifierStatementLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIdentifierStatementLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierStatementLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStatementLabelContext identifierStatementLabel() {
		IdentifierStatementLabelContext _localctx = new IdentifierStatementLabelContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_identifierStatementLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2315; unrestrictedIdentifier();
			State = 2317;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2316; whiteSpace();
				}
			}

			State = 2319; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineNumberLabelContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public LineNumberLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineNumberLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLineNumberLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLineNumberLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineNumberLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineNumberLabelContext lineNumberLabel() {
		LineNumberLabelContext _localctx = new LineNumberLabelContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_lineNumberLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2321; numberLiteral();
			State = 2323;
			switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
			case 1:
				{
				State = 2322; whiteSpace();
				}
				break;
			}
			State = 2326;
			switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				State = 2325; Match(COLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode FLOATLITERAL() { return GetToken(VBAParser.FLOATLITERAL, 0); }
		public ITerminalNode HEXLITERAL() { return GetToken(VBAParser.HEXLITERAL, 0); }
		public ITerminalNode OCTLITERAL() { return GetToken(VBAParser.OCTLITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2328;
			_la = _input.La(1);
			if ( !(((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (OCTLITERAL - 223)) | (1L << (HEXLITERAL - 223)) | (1L << (FLOATLITERAL - 223)) | (1L << (INTEGERLITERAL - 223)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2332;
			switch ( Interpreter.AdaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				State = 2330; baseType();
				}
				break;

			case 2:
				{
				State = 2331; complexType();
				}
				break;
			}
			State = 2342;
			switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				State = 2335;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2334; whiteSpace();
					}
				}

				State = 2337; Match(LPAREN);
				State = 2339;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2338; whiteSpace();
					}
				}

				State = 2341; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(VBAParser.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VBAParser.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public ITerminalNode PERCENT() { return GetToken(VBAParser.PERCENT, 0); }
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2344;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATIONPOINT) | (1L << HASH) | (1L << AT) | (1L << PERCENT) | (1L << DOLLAR) | (1L << AMPERSAND))) != 0) || _la==POW) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2346;
			_la = _input.La(1);
			if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (FRIEND - 110)) | (1L << (GLOBAL - 110)) | (1L << (PRIVATE - 110)) | (1L << (PUBLIC - 110)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewExprContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public NewExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNewExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNewExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUnaryMinusOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUnaryMinusOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public PowOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPowOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPowOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AddOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofexprContext : ExpressionContext {
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeofexprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterTypeofexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitTypeofexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntDivOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode INTDIV() { return GetToken(VBAParser.INTDIV, 0); }
		public IntDivOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIntDivOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIntDivOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntDivOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalImpOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public LogicalImpOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalImpOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalImpOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalImpOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ConcatOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterConcatOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitConcatOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MarkedFileNumberExprContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(VBAParser.HASH, 0); }
		public MarkedFileNumberExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkedFileNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkedFileNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkedFileNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ModOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterModOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitModOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LExprContext : ExpressionContext {
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public LExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public MultOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalXorOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalXorOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalAndOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalOrOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalOpContext : ExpressionContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public RelationalOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRelationalOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRelationalOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalEqvOpContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public LogicalEqvOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalEqvOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalEqvOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalEqvOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExprContext : ExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExpressionContext {
		public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public LiteralExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BuiltInTypeExprContext : ExpressionContext {
		public BuiltInTypeContext builtInType() {
			return GetRuleContext<BuiltInTypeContext>(0);
		}
		public BuiltInTypeExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBuiltInTypeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBuiltInTypeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalNotOpContext : ExpressionContext {
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LogicalNotOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLogicalNotOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLogicalNotOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNotOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 372;
		EnterRecursionRule(_localctx, 372, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2385;
			switch ( Interpreter.AdaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				_localctx = new TypeofexprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2349; Match(TYPEOF);
				State = 2350; whiteSpace();
				State = 2351; expression(17);
				}
				break;

			case 2:
				{
				_localctx = new NewExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2353; Match(NEW);
				State = 2354; whiteSpace();
				State = 2355; expression(16);
				}
				break;

			case 3:
				{
				_localctx = new UnaryMinusOpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2357; Match(MINUS);
				State = 2359;
				switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					State = 2358; whiteSpace();
					}
					break;
				}
				State = 2361; expression(14);
				}
				break;

			case 4:
				{
				_localctx = new LogicalNotOpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2362; Match(NOT);
				State = 2364;
				switch ( Interpreter.AdaptivePredict(_input,327,_ctx) ) {
				case 1:
					{
					State = 2363; whiteSpace();
					}
					break;
				}
				State = 2366; expression(7);
				}
				break;

			case 5:
				{
				_localctx = new MarkedFileNumberExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2367; Match(HASH);
				State = 2368; expression(1);
				}
				break;

			case 6:
				{
				_localctx = new ParenthesizedExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2370;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2369; whiteSpace();
					}
				}

				State = 2372; Match(LPAREN);
				State = 2374;
				switch ( Interpreter.AdaptivePredict(_input,329,_ctx) ) {
				case 1:
					{
					State = 2373; whiteSpace();
					}
					break;
				}
				State = 2376; expression(0);
				State = 2378;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2377; whiteSpace();
					}
				}

				State = 2380; Match(RPAREN);
				}
				break;

			case 7:
				{
				_localctx = new LiteralExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2382; literalExpression();
				}
				break;

			case 8:
				{
				_localctx = new LExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2383; lExpression(0);
				}
				break;

			case 9:
				{
				_localctx = new BuiltInTypeExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2384; builtInType();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2497;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,357,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2495;
					switch ( Interpreter.AdaptivePredict(_input,356,_ctx) ) {
					case 1:
						{
						_localctx = new PowOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2387;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2389;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2388; whiteSpace();
							}
						}

						State = 2391; Match(POW);
						State = 2393;
						switch ( Interpreter.AdaptivePredict(_input,333,_ctx) ) {
						case 1:
							{
							State = 2392; whiteSpace();
							}
							break;
						}
						State = 2395; expression(16);
						}
						break;

					case 2:
						{
						_localctx = new MultOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2396;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 2398;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2397; whiteSpace();
							}
						}

						State = 2400;
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 2402;
						switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
						case 1:
							{
							State = 2401; whiteSpace();
							}
							break;
						}
						State = 2404; expression(14);
						}
						break;

					case 3:
						{
						_localctx = new IntDivOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2405;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2407;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2406; whiteSpace();
							}
						}

						State = 2409; Match(INTDIV);
						State = 2411;
						switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
						case 1:
							{
							State = 2410; whiteSpace();
							}
							break;
						}
						State = 2413; expression(13);
						}
						break;

					case 4:
						{
						_localctx = new ModOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2414;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2416;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2415; whiteSpace();
							}
						}

						State = 2418; Match(MOD);
						State = 2420;
						switch ( Interpreter.AdaptivePredict(_input,339,_ctx) ) {
						case 1:
							{
							State = 2419; whiteSpace();
							}
							break;
						}
						State = 2422; expression(12);
						}
						break;

					case 5:
						{
						_localctx = new AddOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2423;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2425;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2424; whiteSpace();
							}
						}

						State = 2427;
						_la = _input.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 2429;
						switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
						case 1:
							{
							State = 2428; whiteSpace();
							}
							break;
						}
						State = 2431; expression(11);
						}
						break;

					case 6:
						{
						_localctx = new ConcatOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2432;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2434;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2433; whiteSpace();
							}
						}

						State = 2436; Match(AMPERSAND);
						State = 2438;
						switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
						case 1:
							{
							State = 2437; whiteSpace();
							}
							break;
						}
						State = 2440; expression(10);
						}
						break;

					case 7:
						{
						_localctx = new RelationalOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2441;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2443;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2442; whiteSpace();
							}
						}

						State = 2445;
						_la = _input.La(1);
						if ( !(_la==IS || _la==LIKE || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (EQ - 208)) | (1L << (GEQ - 208)) | (1L << (GT - 208)) | (1L << (LEQ - 208)) | (1L << (LT - 208)) | (1L << (NEQ - 208)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 2447;
						switch ( Interpreter.AdaptivePredict(_input,345,_ctx) ) {
						case 1:
							{
							State = 2446; whiteSpace();
							}
							break;
						}
						State = 2449; expression(9);
						}
						break;

					case 8:
						{
						_localctx = new LogicalAndOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2450;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2452;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2451; whiteSpace();
							}
						}

						State = 2454; Match(AND);
						State = 2456;
						switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
						case 1:
							{
							State = 2455; whiteSpace();
							}
							break;
						}
						State = 2458; expression(7);
						}
						break;

					case 9:
						{
						_localctx = new LogicalOrOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2459;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2461;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2460; whiteSpace();
							}
						}

						State = 2463; Match(OR);
						State = 2465;
						switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
						case 1:
							{
							State = 2464; whiteSpace();
							}
							break;
						}
						State = 2467; expression(6);
						}
						break;

					case 10:
						{
						_localctx = new LogicalXorOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2468;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2470;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2469; whiteSpace();
							}
						}

						State = 2472; Match(XOR);
						State = 2474;
						switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
						case 1:
							{
							State = 2473; whiteSpace();
							}
							break;
						}
						State = 2476; expression(5);
						}
						break;

					case 11:
						{
						_localctx = new LogicalEqvOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2477;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2479;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2478; whiteSpace();
							}
						}

						State = 2481; Match(EQV);
						State = 2483;
						switch ( Interpreter.AdaptivePredict(_input,353,_ctx) ) {
						case 1:
							{
							State = 2482; whiteSpace();
							}
							break;
						}
						State = 2485; expression(4);
						}
						break;

					case 12:
						{
						_localctx = new LogicalImpOpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2486;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2488;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2487; whiteSpace();
							}
						}

						State = 2490; Match(IMP);
						State = 2492;
						switch ( Interpreter.AdaptivePredict(_input,355,_ctx) ) {
						case 1:
							{
							State = 2491; whiteSpace();
							}
							break;
						}
						State = 2494; expression(3);
						}
						break;
					}
					} 
				}
				State = 2499;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,357,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralExpressionContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public LiteralIdentifierContext literalIdentifier() {
			return GetRuleContext<LiteralIdentifierContext>(0);
		}
		public LiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExpressionContext literalExpression() {
		LiteralExpressionContext _localctx = new LiteralExpressionContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_literalExpression);
		try {
			State = 2507;
			switch (_input.La(1)) {
			case OCTLITERAL:
			case HEXLITERAL:
			case FLOATLITERAL:
			case INTEGERLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2500; numberLiteral();
				}
				break;
			case DATELITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2501; Match(DATELITERAL);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2502; Match(STRINGLITERAL);
				}
				break;
			case EMPTY:
			case FALSE:
			case NOTHING:
			case NULL:
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2503; literalIdentifier();
				State = 2505;
				switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
				case 1:
					{
					State = 2504; typeHint();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIdentifierContext : ParserRuleContext {
		public ObjectLiteralIdentifierContext objectLiteralIdentifier() {
			return GetRuleContext<ObjectLiteralIdentifierContext>(0);
		}
		public BooleanLiteralIdentifierContext booleanLiteralIdentifier() {
			return GetRuleContext<BooleanLiteralIdentifierContext>(0);
		}
		public VariantLiteralIdentifierContext variantLiteralIdentifier() {
			return GetRuleContext<VariantLiteralIdentifierContext>(0);
		}
		public LiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIdentifierContext literalIdentifier() {
		LiteralIdentifierContext _localctx = new LiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_literalIdentifier);
		try {
			State = 2512;
			switch (_input.La(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2509; booleanLiteralIdentifier();
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2510; objectLiteralIdentifier();
				}
				break;
			case EMPTY:
			case NULL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2511; variantLiteralIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralIdentifierContext : ParserRuleContext {
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public BooleanLiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteralIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralIdentifierContext booleanLiteralIdentifier() {
		BooleanLiteralIdentifierContext _localctx = new BooleanLiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_booleanLiteralIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2514;
			_la = _input.La(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralIdentifierContext : ParserRuleContext {
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ObjectLiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteralIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralIdentifierContext objectLiteralIdentifier() {
		ObjectLiteralIdentifierContext _localctx = new ObjectLiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_objectLiteralIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2516; Match(NOTHING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantLiteralIdentifierContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode EMPTY() { return GetToken(VBAParser.EMPTY, 0); }
		public VariantLiteralIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantLiteralIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterVariantLiteralIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitVariantLiteralIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantLiteralIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantLiteralIdentifierContext variantLiteralIdentifier() {
		VariantLiteralIdentifierContext _localctx = new VariantLiteralIdentifierContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_variantLiteralIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2518;
			_la = _input.La(1);
			if ( !(_la==EMPTY || _la==NULL) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LExpressionContext : ParserRuleContext {
		public LExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lExpression; } }
	 
		public LExpressionContext() { }
		public virtual void CopyFrom(LExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IndexExprContext : LExpressionContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public IndexExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterIndexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitIndexExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithMemberAccessExprContext : LExpressionContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public MandatoryLineContinuationContext mandatoryLineContinuation() {
			return GetRuleContext<MandatoryLineContinuationContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WithMemberAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithMemberAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithMemberAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithMemberAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithDictionaryAccessExprContext : LExpressionContext {
		public MandatoryLineContinuationContext mandatoryLineContinuation() {
			return GetRuleContext<MandatoryLineContinuationContext>(0);
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public WithDictionaryAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWithDictionaryAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWithDictionaryAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithDictionaryAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExprContext : LExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SimpleNameExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExprContext : LExpressionContext {
		public ITerminalNode DOT() { return GetToken(VBAParser.DOT, 0); }
		public IReadOnlyList<MandatoryLineContinuationContext> mandatoryLineContinuation() {
			return GetRuleContexts<MandatoryLineContinuationContext>();
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public MandatoryLineContinuationContext mandatoryLineContinuation(int i) {
			return GetRuleContext<MandatoryLineContinuationContext>(i);
		}
		public MemberAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceExprContext : LExpressionContext {
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public InstanceExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterInstanceExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitInstanceExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DictionaryAccessExprContext : LExpressionContext {
		public IReadOnlyList<MandatoryLineContinuationContext> mandatoryLineContinuation() {
			return GetRuleContexts<MandatoryLineContinuationContext>();
		}
		public ITerminalNode EXCLAMATIONPOINT() { return GetToken(VBAParser.EXCLAMATIONPOINT, 0); }
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public LExpressionContext lExpression() {
			return GetRuleContext<LExpressionContext>(0);
		}
		public MandatoryLineContinuationContext mandatoryLineContinuation(int i) {
			return GetRuleContext<MandatoryLineContinuationContext>(i);
		}
		public DictionaryAccessExprContext(LExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterDictionaryAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitDictionaryAccessExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryAccessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LExpressionContext lExpression() {
		return lExpression(0);
	}

	private LExpressionContext lExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		LExpressionContext _localctx = new LExpressionContext(_ctx, _parentState);
		LExpressionContext _prevctx = _localctx;
		int _startState = 384;
		EnterRecursionRule(_localctx, 384, RULE_lExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2533;
			switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				_localctx = new InstanceExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2521; Match(ME);
				}
				break;

			case 2:
				{
				_localctx = new SimpleNameExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2522; identifier();
				}
				break;

			case 3:
				{
				_localctx = new WithMemberAccessExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2523; Match(DOT);
				State = 2525;
				_la = _input.La(1);
				if (_la==LINE_CONTINUATION) {
					{
					State = 2524; mandatoryLineContinuation();
					}
				}

				State = 2527; unrestrictedIdentifier();
				}
				break;

			case 4:
				{
				_localctx = new WithDictionaryAccessExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2528; Match(EXCLAMATIONPOINT);
				State = 2530;
				_la = _input.La(1);
				if (_la==LINE_CONTINUATION) {
					{
					State = 2529; mandatoryLineContinuation();
					}
				}

				State = 2532; unrestrictedIdentifier();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2567;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,372,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2565;
					switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
					case 1:
						{
						_localctx = new IndexExprContext(new LExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lExpression);
						State = 2535;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2536; Match(LPAREN);
						State = 2538;
						switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
						case 1:
							{
							State = 2537; whiteSpace();
							}
							break;
						}
						State = 2541;
						switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
						case 1:
							{
							State = 2540; argumentList();
							}
							break;
						}
						State = 2544;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2543; whiteSpace();
							}
						}

						State = 2546; Match(RPAREN);
						}
						break;

					case 2:
						{
						_localctx = new MemberAccessExprContext(new LExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lExpression);
						State = 2547;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2549;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2548; mandatoryLineContinuation();
							}
						}

						State = 2551; Match(DOT);
						State = 2553;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2552; mandatoryLineContinuation();
							}
						}

						State = 2555; unrestrictedIdentifier();
						}
						break;

					case 3:
						{
						_localctx = new DictionaryAccessExprContext(new LExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lExpression);
						State = 2556;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2558;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2557; mandatoryLineContinuation();
							}
						}

						State = 2560; Match(EXCLAMATIONPOINT);
						State = 2562;
						_la = _input.La(1);
						if (_la==LINE_CONTINUATION) {
							{
							State = 2561; mandatoryLineContinuation();
							}
						}

						State = 2564; unrestrictedIdentifier();
						}
						break;
					}
					} 
				}
				State = 2569;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,372,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BuiltInTypeContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode OBJECT() { return GetToken(VBAParser.OBJECT, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public BuiltInTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtInType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterBuiltInType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitBuiltInType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltInTypeContext builtInType() {
		BuiltInTypeContext _localctx = new BuiltInTypeContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_builtInType);
		int _la;
		try {
			State = 2591;
			switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2570; baseType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2571; Match(L_SQUARE_BRACKET);
				State = 2573;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2572; whiteSpace();
					}
				}

				State = 2575; baseType();
				State = 2577;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2576; whiteSpace();
					}
				}

				State = 2579; Match(R_SQUARE_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2581; Match(OBJECT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2582; Match(L_SQUARE_BRACKET);
				State = 2584;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2583; whiteSpace();
					}
				}

				State = 2586; Match(OBJECT);
				State = 2588;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2587; whiteSpace();
					}
				}

				State = 2590; Match(R_SQUARE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public IReadOnlyList<ArgumentContext> argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_argumentList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2612;
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				State = 2594;
				switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					State = 2593; whiteSpace();
					}
					break;
				}
				State = 2597;
				switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
				case 1:
					{
					State = 2596; argument();
					}
					break;
				}
				State = 2609;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,382,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2600;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2599; whiteSpace();
							}
						}

						State = 2602; Match(COMMA);
						State = 2604;
						switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
						case 1:
							{
							State = 2603; whiteSpace();
							}
							break;
						}
						State = 2606; argument();
						}
						} 
					}
					State = 2611;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,382,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredArgumentContext : ParserRuleContext {
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public RequiredArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRequiredArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRequiredArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredArgumentContext requiredArgument() {
		RequiredArgumentContext _localctx = new RequiredArgumentContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_requiredArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2614; argument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public NamedArgumentContext namedArgument() {
			return GetRuleContext<NamedArgumentContext>(0);
		}
		public PositionalArgumentContext positionalArgument() {
			return GetRuleContext<PositionalArgumentContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_argument);
		try {
			State = 2618;
			switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2616; positionalArgument();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2617; namedArgument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalArgumentContext : ParserRuleContext {
		public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public PositionalArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterPositionalArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitPositionalArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionalArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionalArgumentContext positionalArgument() {
		PositionalArgumentContext _localctx = new PositionalArgumentContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_positionalArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2620; argumentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : ParserRuleContext {
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_namedArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2622; unrestrictedIdentifier();
			State = 2624;
			_la = _input.La(1);
			if (_la==WS || _la==LINE_CONTINUATION) {
				{
				State = 2623; whiteSpace();
				}
			}

			State = 2626; Match(ASSIGN);
			State = 2628;
			switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
			case 1:
				{
				State = 2627; whiteSpace();
				}
				break;
			}
			State = 2630; argumentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExpressionContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public LowerBoundArgumentExpressionContext lowerBoundArgumentExpression() {
			return GetRuleContext<LowerBoundArgumentExpressionContext>(0);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public UpperBoundArgumentExpressionContext upperBoundArgumentExpression() {
			return GetRuleContext<UpperBoundArgumentExpressionContext>(0);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public AddressOfExpressionContext addressOfExpression() {
			return GetRuleContext<AddressOfExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterArgumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitArgumentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionContext argumentExpression() {
		ArgumentExpressionContext _localctx = new ArgumentExpressionContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_argumentExpression);
		try {
			State = 2644;
			switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2634;
				switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					State = 2632; Match(BYVAL);
					State = 2633; whiteSpace();
					}
					break;
				}
				State = 2636; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2637; addressOfExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2638; lowerBoundArgumentExpression();
				State = 2639; whiteSpace();
				State = 2640; Match(TO);
				State = 2641; whiteSpace();
				State = 2642; upperBoundArgumentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundArgumentExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LowerBoundArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBoundArgumentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterLowerBoundArgumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitLowerBoundArgumentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowerBoundArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowerBoundArgumentExpressionContext lowerBoundArgumentExpression() {
		LowerBoundArgumentExpressionContext _localctx = new LowerBoundArgumentExpressionContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_lowerBoundArgumentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2646; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundArgumentExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpperBoundArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBoundArgumentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterUpperBoundArgumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitUpperBoundArgumentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperBoundArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperBoundArgumentExpressionContext upperBoundArgumentExpression() {
		UpperBoundArgumentExpressionContext _localctx = new UpperBoundArgumentExpressionContext(_ctx, State);
		EnterRule(_localctx, 402, RULE_upperBoundArgumentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2648; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddressOfExpressionContext : ParserRuleContext {
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddressOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addressOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAddressOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAddressOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddressOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddressOfExpressionContext addressOfExpression() {
		AddressOfExpressionContext _localctx = new AddressOfExpressionContext(_ctx, State);
		EnterRule(_localctx, 404, RULE_addressOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2650; Match(ADDRESSOF);
			State = 2651; whiteSpace();
			State = 2652; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode CLNGLNG() { return GetToken(VBAParser.CLNGLNG, 0); }
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode DEBUG() { return GetToken(VBAParser.DEBUG, 0); }
		public ITerminalNode CLNGPTR() { return GetToken(VBAParser.CLNGPTR, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode CDEC() { return GetToken(VBAParser.CDEC, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode CSNG() { return GetToken(VBAParser.CSNG, 0); }
		public ITerminalNode LONGPTR() { return GetToken(VBAParser.LONGPTR, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode SGN() { return GetToken(VBAParser.SGN, 0); }
		public ITerminalNode CBYTE() { return GetToken(VBAParser.CBYTE, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode CVAR() { return GetToken(VBAParser.CVAR, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode LONGLONG() { return GetToken(VBAParser.LONGLONG, 0); }
		public ITerminalNode CDATE() { return GetToken(VBAParser.CDATE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode ABS() { return GetToken(VBAParser.ABS, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode INT() { return GetToken(VBAParser.INT, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode LBOUND() { return GetToken(VBAParser.LBOUND, 0); }
		public ITerminalNode UBOUND() { return GetToken(VBAParser.UBOUND, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public ITerminalNode ARRAY() { return GetToken(VBAParser.ARRAY, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode MIDB() { return GetToken(VBAParser.MIDB, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode PSET() { return GetToken(VBAParser.PSET, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode CDBL() { return GetToken(VBAParser.CDBL, 0); }
		public ITerminalNode CLNG() { return GetToken(VBAParser.CLNG, 0); }
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode WRITE(int i) {
			return GetToken(VBAParser.WRITE, i);
		}
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode LENB() { return GetToken(VBAParser.LENB, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode INPUTB() { return GetToken(VBAParser.INPUTB, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode CURRENCY() { return GetToken(VBAParser.CURRENCY, 0); }
		public ITerminalNode LEN(int i) {
			return GetToken(VBAParser.LEN, i);
		}
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode CBOOL() { return GetToken(VBAParser.CBOOL, 0); }
		public ITerminalNode B_CHAR() { return GetToken(VBAParser.B_CHAR, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode CVERR() { return GetToken(VBAParser.CVERR, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode FIX() { return GetToken(VBAParser.FIX, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode CSTR() { return GetToken(VBAParser.CSTR, 0); }
		public ITerminalNode CINT() { return GetToken(VBAParser.CINT, 0); }
		public ITerminalNode OBJECT() { return GetToken(VBAParser.OBJECT, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ITerminalNode DOEVENTS() { return GetToken(VBAParser.DOEVENTS, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public IReadOnlyList<ITerminalNode> WRITE() { return GetTokens(VBAParser.WRITE); }
		public IReadOnlyList<ITerminalNode> LEN() { return GetTokens(VBAParser.LEN); }
		public ITerminalNode ANY() { return GetToken(VBAParser.ANY, 0); }
		public ITerminalNode CCUR() { return GetToken(VBAParser.CCUR, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 406, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2654;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ANY) | (1L << ARRAY) | (1L << B_CHAR) | (1L << CBOOL) | (1L << CBYTE) | (1L << CCUR) | (1L << CDATE) | (1L << CDBL) | (1L << CDEC) | (1L << CINT) | (1L << CLNG) | (1L << CLNGLNG) | (1L << CLNGPTR) | (1L << CSNG) | (1L << CSTR) | (1L << CURRENCY) | (1L << CVAR) | (1L << CVERR) | (1L << DEBUG) | (1L << DOEVENTS) | (1L << FIX) | (1L << INPUTB) | (1L << INT) | (1L << LBOUND) | (1L << LEN) | (1L << LENB) | (1L << LONGLONG) | (1L << LONGPTR) | (1L << MIDB) | (1L << PSET) | (1L << SGN) | (1L << UBOUND) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPEND) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DOUBLE - 64)) | (1L << (END - 64)) | (1L << (EQV - 64)) | (1L << (ERROR - 64)) | (1L << (FALSE - 64)) | (1L << (GET - 64)) | (1L << (IMP - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LIB - 128)) | (1L << (LIKE - 128)) | (1L << (LINE_INPUT - 128)) | (1L << (LOCK_READ - 128)) | (1L << (LOCK_WRITE - 128)) | (1L << (LOCK_READ_WRITE - 128)) | (1L << (ME - 128)) | (1L << (MID - 128)) | (1L << (MOD - 128)) | (1L << (NAME - 128)) | (1L << (NEW - 128)) | (1L << (NOT - 128)) | (1L << (NOTHING - 128)) | (1L << (NULL - 128)) | (1L << (OBJECT - 128)) | (1L << (ON_ERROR - 128)) | (1L << (OPEN - 128)) | (1L << (OPTIONAL - 128)) | (1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PTRSAFE - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (READ - 128)) | (1L << (READ_WRITE - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (SEEK - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STEP - 128)) | (1L << (STRING - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (TYPEOF - 193)) | (1L << (UNLOCK - 193)) | (1L << (UNTIL - 193)) | (1L << (VARIANT - 193)) | (1L << (VERSION - 193)) | (1L << (WIDTH - 193)) | (1L << (WITHEVENTS - 193)) | (1L << (WRITE - 193)) | (1L << (XOR - 193)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerKeywordContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public MarkerKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMarkerKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMarkerKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerKeywordContext markerKeyword() {
		MarkerKeywordContext _localctx = new MarkerKeywordContext(_ctx, State);
		EnterRule(_localctx, 408, RULE_markerKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2656; Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementKeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFLNGLNG() { return GetToken(VBAParser.DEFLNGLNG, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode OPTION() { return GetToken(VBAParser.OPTION, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode DEFLNGPTR() { return GetToken(VBAParser.DEFLNGPTR, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode EXIT() { return GetToken(VBAParser.EXIT, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public StatementKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterStatementKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitStatementKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementKeywordContext statementKeyword() {
		StatementKeywordContext _localctx = new StatementKeywordContext(_ctx, State);
		EnterRule(_localctx, 410, RULE_statementKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2658;
			_la = _input.La(1);
			if ( !(((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (EXIT - 24)) | (1L << (OPTION - 24)) | (1L << (CALL - 24)) | (1L << (CASE - 24)) | (1L << (CONST - 24)) | (1L << (DECLARE - 24)) | (1L << (DEFBOOL - 24)) | (1L << (DEFBYTE - 24)) | (1L << (DEFDATE - 24)) | (1L << (DEFDBL - 24)) | (1L << (DEFCUR - 24)) | (1L << (DEFINT - 24)) | (1L << (DEFLNG - 24)) | (1L << (DEFLNGLNG - 24)) | (1L << (DEFLNGPTR - 24)) | (1L << (DEFOBJ - 24)) | (1L << (DEFSNG - 24)) | (1L << (DEFSTR - 24)) | (1L << (DEFVAR - 24)) | (1L << (DIM - 24)) | (1L << (DO - 24)) | (1L << (ELSE - 24)))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (ELSEIF - 88)) | (1L << (END_SELECT - 88)) | (1L << (END_WITH - 88)) | (1L << (ENUM - 88)) | (1L << (ERASE - 88)) | (1L << (EVENT - 88)) | (1L << (EXIT_DO - 88)) | (1L << (EXIT_FOR - 88)) | (1L << (EXIT_FUNCTION - 88)) | (1L << (EXIT_PROPERTY - 88)) | (1L << (EXIT_SUB - 88)) | (1L << (FRIEND - 88)) | (1L << (FOR - 88)) | (1L << (FUNCTION - 88)) | (1L << (GLOBAL - 88)) | (1L << (GOSUB - 88)) | (1L << (GOTO - 88)) | (1L << (IF - 88)) | (1L << (IMPLEMENTS - 88)) | (1L << (LOOP - 88)) | (1L << (LET - 88)) | (1L << (LSET - 88)) | (1L << (NEXT - 88)) | (1L << (ON - 88)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (PRIVATE - 159)) | (1L << (PUBLIC - 159)) | (1L << (RAISEEVENT - 159)) | (1L << (REDIM - 159)) | (1L << (RESUME - 159)) | (1L << (RETURN - 159)) | (1L << (RSET - 159)) | (1L << (SELECT - 159)) | (1L << (SET - 159)) | (1L << (STATIC - 159)) | (1L << (STOP - 159)) | (1L << (SUB - 159)) | (1L << (TYPE - 159)) | (1L << (WEND - 159)) | (1L << (WHILE - 159)) | (1L << (WITH - 159)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfLineContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode NEWLINE() { return GetToken(VBAParser.NEWLINE, 0); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public CommentOrAnnotationContext commentOrAnnotation() {
			return GetRuleContext<CommentOrAnnotationContext>(0);
		}
		public EndOfLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfLineContext endOfLine() {
		EndOfLineContext _localctx = new EndOfLineContext(_ctx, State);
		EnterRule(_localctx, 412, RULE_endOfLine);
		int _la;
		try {
			State = 2671;
			switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2661;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2660; whiteSpace();
					}
				}

				State = 2663; Match(NEWLINE);
				State = 2665;
				switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					State = 2664; whiteSpace();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2668;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2667; whiteSpace();
					}
				}

				State = 2670; commentOrAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfStatementContext : ParserRuleContext {
		public IReadOnlyList<EndOfLineContext> endOfLine() {
			return GetRuleContexts<EndOfLineContext>();
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public EndOfLineContext endOfLine(int i) {
			return GetRuleContext<EndOfLineContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ITerminalNode COLON(int i) {
			return GetToken(VBAParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(VBAParser.COLON); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public EndOfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterEndOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitEndOfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndOfStatementContext endOfStatement() {
		EndOfStatementContext _localctx = new EndOfStatementContext(_ctx, State);
		EnterRule(_localctx, 414, RULE_endOfStatement);
		int _la;
		try {
			int _alt;
			State = 2689;
			switch (_input.La(1)) {
			case COLON:
			case REM:
			case NEWLINE:
			case SINGLEQUOTE:
			case WS:
			case LINE_CONTINUATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2681;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2681;
						switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
						case 1:
							{
							State = 2673; endOfLine();
							}
							break;

						case 2:
							{
							{
							State = 2675;
							_la = _input.La(1);
							if (_la==WS || _la==LINE_CONTINUATION) {
								{
								State = 2674; whiteSpace();
								}
							}

							State = 2677; Match(COLON);
							State = 2679;
							switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
							case 1:
								{
								State = 2678; whiteSpace();
								}
								break;
							}
							}
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2683;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,396,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2686;
				switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
				case 1:
					{
					State = 2685; Match(Eof);
					}
					break;
				}
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2688; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentOrAnnotationContext : ParserRuleContext {
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public RemCommentContext remComment() {
			return GetRuleContext<RemCommentContext>(0);
		}
		public CommentOrAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentOrAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentOrAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentOrAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentOrAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentOrAnnotationContext commentOrAnnotation() {
		CommentOrAnnotationContext _localctx = new CommentOrAnnotationContext(_ctx, State);
		EnterRule(_localctx, 416, RULE_commentOrAnnotation);
		try {
			State = 2694;
			switch ( Interpreter.AdaptivePredict(_input,399,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2691; annotationList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2692; remComment();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2693; comment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemCommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public WhiteSpaceContext whiteSpace() {
			return GetRuleContext<WhiteSpaceContext>(0);
		}
		public RemCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterRemComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitRemComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemCommentContext remComment() {
		RemCommentContext _localctx = new RemCommentContext(_ctx, State);
		EnterRule(_localctx, 418, RULE_remComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2696; Match(REM);
			State = 2698;
			switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				State = 2697; whiteSpace();
				}
				break;
			}
			State = 2700; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 420, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2702; Match(SINGLEQUOTE);
			State = 2703; commentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentBodyContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public CommentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterCommentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitCommentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentBodyContext commentBody() {
		CommentBodyContext _localctx = new CommentBodyContext(_ctx, State);
		EnterRule(_localctx, 422, RULE_commentBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2709;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,402,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2707;
					switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
					case 1:
						{
						State = 2705; Match(LINE_CONTINUATION);
						}
						break;

					case 2:
						{
						State = 2706;
						_la = _input.La(1);
						if ( _la <= 0 || (_la==NEWLINE) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						}
						break;
					}
					} 
				}
				State = 2711;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,402,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> AT() { return GetTokens(VBAParser.AT); }
		public IReadOnlyList<AnnotationContext> annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public CommentBodyContext commentBody() {
			return GetRuleContext<CommentBodyContext>(0);
		}
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public ITerminalNode AT(int i) {
			return GetToken(VBAParser.AT, i);
		}
		public ITerminalNode SINGLEQUOTE() { return GetToken(VBAParser.SINGLEQUOTE, 0); }
		public ITerminalNode COLON() { return GetToken(VBAParser.COLON, 0); }
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(_ctx, State);
		EnterRule(_localctx, 424, RULE_annotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2712; Match(SINGLEQUOTE);
			State = 2718;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2713; Match(AT);
				State = 2714; annotation();
				State = 2716;
				switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					State = 2715; whiteSpace();
					}
					break;
				}
				}
				}
				State = 2720;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==AT );
			State = 2727;
			switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				State = 2723;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2722; whiteSpace();
					}
				}

				State = 2725; Match(COLON);
				State = 2726; commentBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public AnnotationNameContext annotationName() {
			return GetRuleContext<AnnotationNameContext>(0);
		}
		public AnnotationArgListContext annotationArgList() {
			return GetRuleContext<AnnotationArgListContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 426, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2729; annotationName();
			State = 2731;
			switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				State = 2730; annotationArgList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationNameContext : ParserRuleContext {
		public UnrestrictedIdentifierContext unrestrictedIdentifier() {
			return GetRuleContext<UnrestrictedIdentifierContext>(0);
		}
		public AnnotationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationNameContext annotationName() {
		AnnotationNameContext _localctx = new AnnotationNameContext(_ctx, State);
		EnterRule(_localctx, 428, RULE_annotationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2733; unrestrictedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgListContext : ParserRuleContext {
		public WhiteSpaceContext whiteSpace(int i) {
			return GetRuleContext<WhiteSpaceContext>(i);
		}
		public IReadOnlyList<AnnotationArgContext> annotationArg() {
			return GetRuleContexts<AnnotationArgContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(VBAParser.COMMA); }
		public IReadOnlyList<WhiteSpaceContext> whiteSpace() {
			return GetRuleContexts<WhiteSpaceContext>();
		}
		public AnnotationArgContext annotationArg(int i) {
			return GetRuleContext<AnnotationArgContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VBAParser.COMMA, i);
		}
		public AnnotationArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgListContext annotationArgList() {
		AnnotationArgListContext _localctx = new AnnotationArgListContext(_ctx, State);
		EnterRule(_localctx, 430, RULE_annotationArgList);
		int _la;
		try {
			int _alt;
			State = 2795;
			switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2735; whiteSpace();
				State = 2736; annotationArg();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2738; whiteSpace();
				State = 2739; annotationArg();
				State = 2748;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2741;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2740; whiteSpace();
							}
						}

						State = 2743; Match(COMMA);
						State = 2745;
						switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
						case 1:
							{
							State = 2744; whiteSpace();
							}
							break;
						}
						State = 2747; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2750;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,410,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2753;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2752; whiteSpace();
					}
				}

				State = 2755; Match(LPAREN);
				State = 2757;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2756; whiteSpace();
					}
				}

				State = 2759; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2761;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2760; whiteSpace();
					}
				}

				State = 2763; Match(LPAREN);
				State = 2765;
				switch ( Interpreter.AdaptivePredict(_input,414,_ctx) ) {
				case 1:
					{
					State = 2764; whiteSpace();
					}
					break;
				}
				State = 2767; annotationArg();
				State = 2769;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2768; whiteSpace();
					}
				}

				State = 2771; Match(RPAREN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2774;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2773; whiteSpace();
					}
				}

				State = 2776; Match(LPAREN);
				State = 2777; annotationArg();
				State = 2786;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2779;
						_la = _input.La(1);
						if (_la==WS || _la==LINE_CONTINUATION) {
							{
							State = 2778; whiteSpace();
							}
						}

						State = 2781; Match(COMMA);
						State = 2783;
						switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
						case 1:
							{
							State = 2782; whiteSpace();
							}
							break;
						}
						State = 2785; annotationArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2788;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,419,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2791;
				_la = _input.La(1);
				if (_la==WS || _la==LINE_CONTINUATION) {
					{
					State = 2790; whiteSpace();
					}
				}

				State = 2793; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationArgContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterAnnotationArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitAnnotationArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationArgContext annotationArg() {
		AnnotationArgContext _localctx = new AnnotationArgContext(_ctx, State);
		EnterRule(_localctx, 432, RULE_annotationArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2797; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MandatoryLineContinuationContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LINE_CONTINUATION() { return GetToken(VBAParser.LINE_CONTINUATION, 0); }
		public MandatoryLineContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mandatoryLineContinuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterMandatoryLineContinuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitMandatoryLineContinuation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMandatoryLineContinuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MandatoryLineContinuationContext mandatoryLineContinuation() {
		MandatoryLineContinuationContext _localctx = new MandatoryLineContinuationContext(_ctx, State);
		EnterRule(_localctx, 434, RULE_mandatoryLineContinuation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2799; Match(LINE_CONTINUATION);
			State = 2803;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 2800; Match(WS);
				}
				}
				State = 2805;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhiteSpaceContext : ParserRuleContext {
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ITerminalNode> LINE_CONTINUATION() { return GetTokens(VBAParser.LINE_CONTINUATION); }
		public ITerminalNode LINE_CONTINUATION(int i) {
			return GetToken(VBAParser.LINE_CONTINUATION, i);
		}
		public WhiteSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whiteSpace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.EnterWhiteSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAParserListener typedListener = listener as IVBAParserListener;
			if (typedListener != null) typedListener.ExitWhiteSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAParserVisitor<TResult> typedVisitor = visitor as IVBAParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhiteSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhiteSpaceContext whiteSpace() {
		WhiteSpaceContext _localctx = new WhiteSpaceContext(_ctx, State);
		EnterRule(_localctx, 436, RULE_whiteSpace);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2807;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2806;
					_la = _input.La(1);
					if ( !(_la==WS || _la==LINE_CONTINUATION) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2809;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,423,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 78: return upperCaseA_sempred((UpperCaseAContext)_localctx, predIndex);

		case 79: return upperCaseZ_sempred((UpperCaseZContext)_localctx, predIndex);

		case 186: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 192: return lExpression_sempred((LExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 15);

		case 3: return Precpred(_ctx, 13);

		case 4: return Precpred(_ctx, 12);

		case 5: return Precpred(_ctx, 11);

		case 6: return Precpred(_ctx, 10);

		case 7: return Precpred(_ctx, 9);

		case 8: return Precpred(_ctx, 8);

		case 9: return Precpred(_ctx, 6);

		case 10: return Precpred(_ctx, 5);

		case 11: return Precpred(_ctx, 4);

		case 12: return Precpred(_ctx, 3);

		case 13: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool upperCaseZ_sempred(UpperCaseZContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return _input.Lt(1).Text.Equals("Z");
		}
		return true;
	}
	private bool lExpression_sempred(LExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(_ctx, 5);

		case 14: return Precpred(_ctx, 7);

		case 15: return Precpred(_ctx, 6);
		}
		return true;
	}
	private bool upperCaseA_sempred(UpperCaseAContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return _input.Lt(1).Text.Equals("A");
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xED\xAFE\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4"+
		"\x4\xD5\t\xD5\x4\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA"+
		"\t\xDA\x4\xDB\t\xDB\x4\xDC\t\xDC\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x1BD\n"+
		"\x3\x3\x3\x3\x3\x5\x3\x1C1\n\x3\x3\x3\x3\x3\x5\x3\x1C5\n\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x1CD\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4"+
		"\x1D3\n\x4\x3\x4\x5\x4\x1D6\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x5\x5\x1E0\n\x5\x5\x5\x1E2\n\x5\x3\x5\x3\x5\x6\x5\x1E6\n\x5"+
		"\r\x5\xE\x5\x1E7\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\x1EF\n\x6\f\x6\xE"+
		"\x6\x1F2\v\x6\x3\x6\x3\x6\a\x6\x1F6\n\x6\f\x6\xE\x6\x1F9\v\x6\x3\x6\x3"+
		"\x6\x3\x6\x5\x6\x1FE\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\x205\n\a\f\a"+
		"\xE\a\x208\v\a\x3\b\x3\b\x3\b\x3\b\x5\b\x20E\n\b\x3\b\x3\b\x5\b\x212\n"+
		"\b\x3\b\x3\b\x5\b\x216\n\b\x3\b\x3\b\x5\b\x21A\n\b\x3\b\a\b\x21D\n\b\f"+
		"\b\xE\b\x220\v\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\a\v\x229\n\v\f\v\xE"+
		"\v\x22C\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x238"+
		"\n\f\x3\r\x5\r\x23B\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x5\r\x248\n\r\x3\xE\x5\xE\x24B\n\xE\x3\xE\x3\xE\x3\xE\a\xE\x250"+
		"\n\xE\f\xE\xE\xE\x253\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x25A\n"+
		"\xF\x3\x10\x3\x10\x3\x10\a\x10\x25F\n\x10\f\x10\xE\x10\x262\v\x10\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x289\n\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x5\x12\x299\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x5\x13\x2A1\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x2A6\n\x13\x3\x13"+
		"\x3\x13\x3\x13\x5\x13\x2AB\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x5\x13\x2B4\n\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19"+
		"\x3\x1A\x3\x1A\x5\x1A\x2C8\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2CC\n\x1A\x3\x1A"+
		"\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x5\x1C\x2D4\n\x1C\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2DF\n\x1F\x3 \x3"+
		" \x3!\x3!\x5!\x2E5\n!\x3!\x3!\x5!\x2E9\n!\x3!\a!\x2EC\n!\f!\xE!\x2EF\v"+
		"!\x3\"\x3\"\x3\"\x3\"\x5\"\x2F5\n\"\x3\"\x3\"\x5\"\x2F9\n\"\x3\"\x3\""+
		"\x3#\x3#\x3$\x3$\x3$\x3$\x5$\x303\n$\x3$\x3$\x5$\x307\n$\x3$\x5$\x30A"+
		"\n$\x3%\x3%\x3%\x3%\x5%\x310\n%\x3%\x3%\x3%\x3%\x5%\x316\n%\x3&\x3&\x3"+
		"\'\x3\'\x3(\x3(\x3(\x3(\x5(\x320\n(\x3(\x3(\x5(\x324\n(\x3(\x5(\x327\n"+
		"(\x3)\x3)\x3)\x3)\x5)\x32D\n)\x3)\x3)\x5)\x331\n)\x3)\x3)\x3*\x3*\x3+"+
		"\x3+\x3+\x3+\x5+\x33B\n+\x3+\x3+\x5+\x33F\n+\x3+\x3+\x3,\x3,\x3-\x3-\x3"+
		"-\x3-\x5-\x349\n-\x3.\x3.\x5.\x34D\n.\x3.\x3.\x5.\x351\n.\x3.\x3.\x3/"+
		"\x3/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x35D\n\x31\x3\x31"+
		"\x3\x31\x5\x31\x361\n\x31\x3\x31\x5\x31\x364\n\x31\x3\x32\x3\x32\x5\x32"+
		"\x368\n\x32\x3\x32\a\x32\x36B\n\x32\f\x32\xE\x32\x36E\v\x32\x3\x33\x3"+
		"\x33\x3\x33\x3\x33\x5\x33\x374\n\x33\x3\x33\x3\x33\x5\x33\x378\n\x33\x3"+
		"\x34\x3\x34\x3\x34\x5\x34\x37D\n\x34\x3\x35\x3\x35\x3\x36\x3\x36\x3\x37"+
		"\x3\x37\x5\x37\x385\n\x37\x3\x37\x3\x37\x5\x37\x389\n\x37\x3\x37\x3\x37"+
		"\x5\x37\x38D\n\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39\x5\x39\x395"+
		"\n\x39\x3\x39\x5\x39\x398\n\x39\x3:\x3:\x5:\x39C\n:\x3:\x3:\x5:\x3A0\n"+
		":\x3:\x3:\x3;\x3;\x3<\x3<\x3<\x3<\x5<\x3AA\n<\x3<\x3<\x5<\x3AE\n<\x3<"+
		"\x5<\x3B1\n<\x3=\x3=\x3=\x3=\x5=\x3B7\n=\x3=\x3=\x5=\x3BB\n=\x3=\x3=\x3"+
		">\x3>\x5>\x3C1\n>\x3>\x3>\x5>\x3C5\n>\x3>\a>\x3C8\n>\f>\xE>\x3CB\v>\x3"+
		"?\x3?\x3@\x3@\x3@\x3@\x5@\x3D3\n@\x3@\x3@\x5@\x3D7\n@\x3@\x5@\x3DA\n@"+
		"\x3@\x5@\x3DD\n@\x3@\x3@\x5@\x3E1\n@\x3@\x3@\x3\x41\x3\x41\x3\x42\x3\x42"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x3ED\n\x43\x3\x43\x3\x43\x5\x43\x3F1"+
		"\n\x43\x3\x43\x5\x43\x3F4\n\x43\x3\x43\x5\x43\x3F7\n\x43\x3\x43\x3\x43"+
		"\x5\x43\x3FB\n\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\x5"+
		"\x45\x404\n\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x40A\n\x45\x3\x45\x3"+
		"\x45\x5\x45\x40E\n\x45\x3\x45\a\x45\x411\n\x45\f\x45\xE\x45\x414\v\x45"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x41A\n\x46\x3\x46\x5\x46\x41D\n\x46"+
		"\x3\x46\x3\x46\x5\x46\x421\n\x46\x3\x46\x3\x46\x3G\x3G\x3G\x5G\x428\n"+
		"G\x3G\x3G\x3G\x3G\x5G\x42E\nG\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G"+
		"\x3G\x3G\x5G\x43C\nG\x3G\x5G\x43F\nG\x3G\x5G\x442\nG\x3G\x3G\x3G\x5G\x447"+
		"\nG\x3H\x3H\x5H\x44B\nH\x3H\x3H\x5H\x44F\nH\x3H\x3H\x5H\x453\nH\x3H\a"+
		"H\x456\nH\fH\xEH\x459\vH\x5H\x45B\nH\x3H\x5H\x45E\nH\x3H\x3H\x3I\x3I\x5"+
		"I\x464\nI\x3I\x3I\x5I\x468\nI\x3I\x3I\x5I\x46C\nI\x3I\x3I\x5I\x470\nI"+
		"\x3I\x3I\x5I\x474\nI\x3I\x5I\x477\nI\x3I\x5I\x47A\nI\x3I\x5I\x47D\nI\x3"+
		"I\x5I\x480\nI\x3I\x5I\x483\nI\x3J\x3J\x5J\x487\nJ\x3J\x3J\x3K\x3K\x3K"+
		"\x3K\x5K\x48F\nK\x3K\x3K\x5K\x493\nK\x3K\aK\x496\nK\fK\xEK\x499\vK\x3"+
		"L\x3L\x3M\x3M\x3M\x5M\x4A0\nM\x3N\x3N\x3O\x3O\x5O\x4A6\nO\x3O\x3O\x5O"+
		"\x4AA\nO\x3O\x3O\x3P\x3P\x3P\x3Q\x3Q\x3Q\x3R\x3R\x5R\x4B6\nR\x3R\x3R\x5"+
		"R\x4BA\nR\x3R\x3R\x3S\x3S\x3T\x3T\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U"+
		"\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x5U\x4D9\nU\x3"+
		"V\x3V\x3V\x5V\x4DE\nV\x3V\x3V\x3V\x3V\x3V\aV\x4E5\nV\fV\xEV\x4E8\vV\x3"+
		"V\x3V\x3W\x3W\x5W\x4EE\nW\x3W\x3W\x5W\x4F2\nW\x3W\x5W\x4F5\nW\x3W\x3W"+
		"\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x5Y\x4FF\nY\x3Y\x3Y\x5Y\x503\nY\x3Y\aY\x506\n"+
		"Y\fY\xEY\x509\vY\x3Z\x3Z\x3Z\x3Z\x3[\x3[\x3[\x5[\x512\n[\x3[\x3[\x3[\x3"+
		"[\x5[\x518\n[\x3[\x3[\x3\\\x3\\\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3"+
		"]\x3]\x3]\x3]\x3]\x3]\x5]\x52D\n]\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x3^"+
		"\x3^\x3^\x3^\x5^\x53B\n^\x3^\x3^\x3^\x3^\x3^\x3^\x5^\x543\n^\x3_\x3_\x3"+
		"_\x5_\x548\n_\x3_\x3_\x5_\x54C\n_\x3_\x3_\x5_\x550\n_\x3_\x3_\x5_\x554"+
		"\n_\x3_\x5_\x557\n_\x3_\x5_\x55A\n_\x3_\x5_\x55D\n_\x3_\x3_\x3_\x3_\x3"+
		"`\x3`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\x3\x62\x3\x63\x3"+
		"\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\a\x63\x575\n\x63\f\x63"+
		"\xE\x63\x578\v\x63\x3\x63\x5\x63\x57B\n\x63\x3\x63\x3\x63\x3\x64\x3\x64"+
		"\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64"+
		"\x3\x64\x3\x64\x5\x64\x58D\n\x64\x3\x64\x3\x64\x5\x64\x591\n\x64\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x66\x3\x66\x5\x66\x599\n\x66\x3g\x3g\x5g\x59D"+
		"\ng\x3g\x3g\x5g\x5A1\ng\x3g\x3g\x5g\x5A5\ng\x3g\x3g\x3g\x3g\x5g\x5AB\n"+
		"g\x3h\x3h\x5h\x5AF\nh\x3h\x3h\x5h\x5B3\nh\x3h\x3h\x3h\x5h\x5B8\nh\x3h"+
		"\x3h\x3i\x3i\x5i\x5BE\ni\x3i\x5i\x5C1\ni\x3j\x3j\x5j\x5C5\nj\x3j\x3j\x5"+
		"j\x5C9\nj\x3j\x5j\x5CC\nj\aj\x5CE\nj\fj\xEj\x5D1\vj\x3j\x3j\x5j\x5D5\n"+
		"j\x5j\x5D7\nj\x3j\x3j\x5j\x5DB\nj\x3j\x3j\x5j\x5DF\nj\x3j\x5j\x5E2\nj"+
		"\aj\x5E4\nj\fj\xEj\x5E7\vj\x5j\x5E9\nj\x3k\x3k\x3l\x3l\x3m\x3m\x3m\x3"+
		"m\x3n\x3n\x5n\x5F5\nn\x3n\x3n\x5n\x5F9\nn\x3n\x3n\x5n\x5FD\nn\x3n\x3n"+
		"\x3o\x3o\x3o\x3o\x5o\x605\no\x3o\x3o\x5o\x609\no\x3o\x3o\x3p\x3p\x3p\x3"+
		"p\x3p\x3p\x3p\x3p\x3p\x3p\x5p\x617\np\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q"+
		"\x5q\x621\nq\x3q\x3q\x5q\x625\nq\x3q\aq\x628\nq\fq\xEq\x62B\vq\x3r\x3"+
		"r\x3r\x3r\x3r\x3r\x3r\x3r\x5r\x635\nr\x3r\x3r\x5r\x639\nr\x3r\ar\x63C"+
		"\nr\fr\xEr\x63F\vr\x3s\x3s\x3s\x5s\x644\ns\x3s\x3s\x5s\x648\ns\x3s\x3"+
		"s\x3s\x3s\x5s\x64E\ns\x3s\x5s\x651\ns\x3s\x3s\x3s\x5s\x656\ns\x3s\x3s"+
		"\x3s\x3s\x3t\x3t\x3t\x5t\x65F\nt\x3t\x3t\x5t\x663\nt\x3t\x3t\x3t\x3t\x5"+
		"t\x669\nt\x3t\x5t\x66C\nt\x3t\x3t\x3t\x3t\x3u\x3u\x3u\x5u\x675\nu\x3u"+
		"\x3u\x5u\x679\nu\x3u\x3u\x3u\x3u\x5u\x67F\nu\x3u\x5u\x682\nu\x3u\x3u\x3"+
		"u\x3u\x3v\x3v\x3v\x3v\x5v\x68C\nv\x3v\x3v\x5v\x690\nv\x3v\x5v\x693\nv"+
		"\x3v\x5v\x696\nv\x3v\x5v\x699\nv\x3w\x3w\x5w\x69D\nw\x3w\x3w\x5w\x6A1"+
		"\nw\x3w\aw\x6A4\nw\fw\xEw\x6A7\vw\x3x\x3x\x5x\x6AB\nx\x3x\x3x\x3y\x3y"+
		"\x3y\x3y\x5y\x6B3\ny\x3y\x3y\x3z\x3z\x5z\x6B9\nz\x3z\x3z\x5z\x6BD\nz\x3"+
		"z\az\x6C0\nz\fz\xEz\x6C3\vz\x3{\x3{\x3{\x3{\x5{\x6C9\n{\x3|\x3|\x3|\x5"+
		"|\x6CE\n|\x3|\x3|\x5|\x6D2\n|\x3|\x3|\x5|\x6D6\n|\x3|\x3|\x5|\x6DA\n|"+
		"\x3|\x3|\x5|\x6DE\n|\x3|\x3|\x5|\x6E2\n|\x5|\x6E4\n|\x3|\x3|\x5|\x6E8"+
		"\n|\x3|\x3|\x5|\x6EC\n|\x3|\x3|\x3}\x3}\x5}\x6F2\n}\x3~\x3~\x3\x7F\x3"+
		"\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x5\x7F\x6FE\n\x7F\x5\x7F"+
		"\x700\n\x7F\x3\x80\x3\x80\x3\x80\x3\x80\x5\x80\x706\n\x80\x5\x80\x708"+
		"\n\x80\x3\x81\x3\x81\x3\x82\x3\x82\x3\x82\x3\x82\x5\x82\x710\n\x82\x3"+
		"\x82\x3\x82\x5\x82\x714\n\x82\x3\x82\x3\x82\x3\x83\x3\x83\x3\x84\x3\x84"+
		"\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x85\x3\x85\x5\x85\x724\n"+
		"\x85\x3\x85\x3\x85\x5\x85\x728\n\x85\x3\x85\x3\x85\x3\x85\a\x85\x72D\n"+
		"\x85\f\x85\xE\x85\x730\v\x85\x3\x85\x5\x85\x733\n\x85\x3\x85\x3\x85\x3"+
		"\x86\x3\x86\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87\x73D\n\x87\x3\x87\x3\x87"+
		"\x5\x87\x741\n\x87\x3\x87\a\x87\x744\n\x87\f\x87\xE\x87\x747\v\x87\x3"+
		"\x87\x3\x87\x3\x87\x3\x88\x3\x88\x5\x88\x74E\n\x88\x3\x88\x3\x88\x3\x88"+
		"\x3\x88\x3\x89\x3\x89\x5\x89\x756\n\x89\x5\x89\x758\n\x89\x3\x89\x3\x89"+
		"\x5\x89\x75C\n\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3"+
		"\x89\x3\x89\x5\x89\x767\n\x89\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8C\x3\x8C"+
		"\x3\x8C\x3\x8C\x5\x8C\x771\n\x8C\x3\x8C\x3\x8C\x5\x8C\x775\n\x8C\x3\x8C"+
		"\x3\x8C\x3\x8D\x3\x8D\x3\x8D\x5\x8D\x77C\n\x8D\x3\x8D\x3\x8D\x5\x8D\x780"+
		"\n\x8D\x3\x8D\x3\x8D\x5\x8D\x784\n\x8D\x3\x8D\x3\x8D\x5\x8D\x788\n\x8D"+
		"\x3\x8D\x5\x8D\x78B\n\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3"+
		"\x8F\x3\x8F\x5\x8F\x795\n\x8F\x3\x8F\x3\x8F\x3\x90\x3\x90\x3\x90\x3\x90"+
		"\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x92\x3\x92"+
		"\x3\x92\x3\x92\a\x92\x7A9\n\x92\f\x92\xE\x92\x7AC\v\x92\x3\x93\x3\x93"+
		"\x5\x93\x7B0\n\x93\x3\x94\x3\x94\x5\x94\x7B4\n\x94\x3\x94\x3\x94\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\x3\x96\x3\x96\x3\x96\x5\x96\x7BF\n\x96\x3\x96\x3"+
		"\x96\x3\x97\x3\x97\x5\x97\x7C5\n\x97\x3\x97\x5\x97\x7C8\n\x97\x3\x97\x5"+
		"\x97\x7CB\n\x97\x3\x97\x3\x97\x3\x98\x3\x98\x5\x98\x7D1\n\x98\x3\x98\x3"+
		"\x98\x5\x98\x7D5\n\x98\x3\x98\a\x98\x7D8\n\x98\f\x98\xE\x98\x7DB\v\x98"+
		"\x3\x99\x3\x99\x5\x99\x7DF\n\x99\x5\x99\x7E1\n\x99\x3\x99\x3\x99\x3\x9A"+
		"\x3\x9A\x5\x9A\x7E7\n\x9A\x3\x9A\x3\x9A\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x3"+
		"\x9D\x3\x9D\x3\x9D\x5\x9D\x7F2\n\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\x7F7"+
		"\n\x9D\x3\x9D\x3\x9D\x3\x9E\x3\x9E\x5\x9E\x7FD\n\x9E\x3\x9E\x3\x9E\x5"+
		"\x9E\x801\n\x9E\x3\x9E\a\x9E\x804\n\x9E\f\x9E\xE\x9E\x807\v\x9E\x3\x9F"+
		"\x3\x9F\x5\x9F\x80B\n\x9F\x3\x9F\x3\x9F\x5\x9F\x80F\n\x9F\x3\x9F\x3\x9F"+
		"\x5\x9F\x813\n\x9F\x5\x9F\x815\n\x9F\x3\x9F\x3\x9F\x5\x9F\x819\n\x9F\x5"+
		"\x9F\x81B\n\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\x820\n\x9F\x3\xA0\x3\xA0\x3"+
		"\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3"+
		"\xA1\x3\xA1\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\x834\n\xA2\x5\xA2\x836"+
		"\n\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\x83C\n\xA2\x5\xA2\x83E\n\xA2"+
		"\x3\xA2\x3\xA2\x5\xA2\x842\n\xA2\x3\xA2\x3\xA2\x5\xA2\x846\n\xA2\x3\xA2"+
		"\x5\xA2\x849\n\xA2\x3\xA2\x5\xA2\x84C\n\xA2\x3\xA2\x3\xA2\x5\xA2\x850"+
		"\n\xA2\x3\xA2\x5\xA2\x853\n\xA2\x3\xA3\x3\xA3\x5\xA3\x857\n\xA3\x3\xA3"+
		"\x3\xA3\x5\xA3\x85B\n\xA3\x5\xA3\x85D\n\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3"+
		"\x5\xA3\x863\n\xA3\x5\xA3\x865\n\xA3\x3\xA3\x3\xA3\x5\xA3\x869\n\xA3\x3"+
		"\xA3\x3\xA3\x5\xA3\x86D\n\xA3\x3\xA3\x6\xA3\x870\n\xA3\r\xA3\xE\xA3\x871"+
		"\x3\xA4\x3\xA4\x5\xA4\x876\n\xA4\x3\xA4\x3\xA4\x5\xA4\x87A\n\xA4\x5\xA4"+
		"\x87C\n\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x5\xA4\x882\n\xA4\x3\xA4\x3\xA4"+
		"\x5\xA4\x886\n\xA4\x3\xA4\x3\xA4\x3\xA5\x3\xA5\x5\xA5\x88C\n\xA5\x3\xA5"+
		"\x3\xA5\x5\xA5\x890\n\xA5\x3\xA5\x3\xA5\x5\xA5\x894\n\xA5\x3\xA5\x3\xA5"+
		"\x5\xA5\x898\n\xA5\x3\xA5\x3\xA5\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x5\xA7\x8A0"+
		"\n\xA7\x3\xA7\x3\xA7\x5\xA7\x8A4\n\xA7\x3\xA7\a\xA7\x8A7\n\xA7\f\xA7\xE"+
		"\xA7\x8AA\v\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x8B1\n\xA8\x3"+
		"\xA8\x3\xA8\x3\xA9\x3\xA9\x3\xA9\x5\xA9\x8B8\n\xA9\x3\xAA\x3\xAA\x5\xAA"+
		"\x8BC\n\xAA\x3\xAB\x3\xAB\x3\xAC\x3\xAC\x3\xAC\x3\xAD\x3\xAD\x3\xAD\x3"+
		"\xAD\x5\xAD\x8C7\n\xAD\x3\xAE\x3\xAE\a\xAE\x8CB\n\xAE\f\xAE\xE\xAE\x8CE"+
		"\v\xAE\x3\xAE\x3\xAE\x3\xAF\x3\xAF\x5\xAF\x8D4\n\xAF\x3\xB0\x3\xB0\x5"+
		"\xB0\x8D8\n\xB0\x3\xB0\x3\xB0\x5\xB0\x8DC\n\xB0\x3\xB0\x3\xB0\x5\xB0\x8E0"+
		"\n\xB0\x3\xB0\x5\xB0\x8E3\n\xB0\x3\xB1\x3\xB1\x3\xB2\x3\xB2\x3\xB3\x3"+
		"\xB3\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x8EE\n\xB3\x3\xB3\x3\xB3\x5\xB3\x8F2"+
		"\n\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3"+
		"\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x900\n\xB3\x3\xB4\x3\xB4\x5\xB4\x904\n\xB4"+
		"\x3\xB4\x3\xB4\x5\xB4\x908\n\xB4\x3\xB5\x3\xB5\x5\xB5\x90C\n\xB5\x3\xB6"+
		"\x3\xB6\x5\xB6\x910\n\xB6\x3\xB6\x3\xB6\x3\xB7\x3\xB7\x5\xB7\x916\n\xB7"+
		"\x3\xB7\x5\xB7\x919\n\xB7\x3\xB8\x3\xB8\x3\xB9\x3\xB9\x5\xB9\x91F\n\xB9"+
		"\x3\xB9\x5\xB9\x922\n\xB9\x3\xB9\x3\xB9\x5\xB9\x926\n\xB9\x3\xB9\x5\xB9"+
		"\x929\n\xB9\x3\xBA\x3\xBA\x3\xBB\x3\xBB\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3"+
		"\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x93A\n\xBC\x3\xBC"+
		"\x3\xBC\x3\xBC\x5\xBC\x93F\n\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x945"+
		"\n\xBC\x3\xBC\x3\xBC\x5\xBC\x949\n\xBC\x3\xBC\x3\xBC\x5\xBC\x94D\n\xBC"+
		"\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x954\n\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x958\n\xBC\x3\xBC\x3\xBC\x5\xBC\x95C\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x961\n\xBC\x3\xBC\x3\xBC\x5\xBC\x965\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x96A\n\xBC\x3\xBC\x3\xBC\x5\xBC\x96E\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x973\n\xBC\x3\xBC\x3\xBC\x5\xBC\x977\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x97C\n\xBC\x3\xBC\x3\xBC\x5\xBC\x980\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x985\n\xBC\x3\xBC\x3\xBC\x5\xBC\x989\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x98E\n\xBC\x3\xBC\x3\xBC\x5\xBC\x992\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x997\n\xBC\x3\xBC\x3\xBC\x5\xBC\x99B\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x9A0\n\xBC\x3\xBC\x3\xBC\x5\xBC\x9A4\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x9A9\n\xBC\x3\xBC\x3\xBC\x5\xBC\x9AD\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x9B2\n\xBC\x3\xBC\x3\xBC\x5\xBC\x9B6\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x9BB\n\xBC\x3\xBC\x3\xBC\x5\xBC\x9BF\n\xBC\x3\xBC\a\xBC\x9C2\n\xBC"+
		"\f\xBC\xE\xBC\x9C5\v\xBC\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x9CC"+
		"\n\xBD\x5\xBD\x9CE\n\xBD\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x9D3\n\xBE\x3\xBF"+
		"\x3\xBF\x3\xC0\x3\xC0\x3\xC1\x3\xC1\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2"+
		"\x5\xC2\x9E0\n\xC2\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x9E5\n\xC2\x3\xC2\x5\xC2"+
		"\x9E8\n\xC2\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x9ED\n\xC2\x3\xC2\x5\xC2\x9F0"+
		"\n\xC2\x3\xC2\x5\xC2\x9F3\n\xC2\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x9F8\n\xC2"+
		"\x3\xC2\x3\xC2\x5\xC2\x9FC\n\xC2\x3\xC2\x3\xC2\x3\xC2\x5\xC2\xA01\n\xC2"+
		"\x3\xC2\x3\xC2\x5\xC2\xA05\n\xC2\x3\xC2\a\xC2\xA08\n\xC2\f\xC2\xE\xC2"+
		"\xA0B\v\xC2\x3\xC3\x3\xC3\x3\xC3\x5\xC3\xA10\n\xC3\x3\xC3\x3\xC3\x5\xC3"+
		"\xA14\n\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\xA1B\n\xC3\x3\xC3"+
		"\x3\xC3\x5\xC3\xA1F\n\xC3\x3\xC3\x5\xC3\xA22\n\xC3\x3\xC4\x5\xC4\xA25"+
		"\n\xC4\x3\xC4\x5\xC4\xA28\n\xC4\x3\xC4\x5\xC4\xA2B\n\xC4\x3\xC4\x3\xC4"+
		"\x5\xC4\xA2F\n\xC4\x3\xC4\a\xC4\xA32\n\xC4\f\xC4\xE\xC4\xA35\v\xC4\x5"+
		"\xC4\xA37\n\xC4\x3\xC5\x3\xC5\x3\xC6\x3\xC6\x5\xC6\xA3D\n\xC6\x3\xC7\x3"+
		"\xC7\x3\xC8\x3\xC8\x5\xC8\xA43\n\xC8\x3\xC8\x3\xC8\x5\xC8\xA47\n\xC8\x3"+
		"\xC8\x3\xC8\x3\xC9\x3\xC9\x5\xC9\xA4D\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9"+
		"\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\xA57\n\xC9\x3\xCA\x3\xCA\x3\xCB\x3"+
		"\xCB\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCD\x3\xCD\x3\xCE\x3\xCE\x3\xCF\x3"+
		"\xCF\x3\xD0\x5\xD0\xA68\n\xD0\x3\xD0\x3\xD0\x5\xD0\xA6C\n\xD0\x3\xD0\x5"+
		"\xD0\xA6F\n\xD0\x3\xD0\x5\xD0\xA72\n\xD0\x3\xD1\x3\xD1\x5\xD1\xA76\n\xD1"+
		"\x3\xD1\x3\xD1\x5\xD1\xA7A\n\xD1\x6\xD1\xA7C\n\xD1\r\xD1\xE\xD1\xA7D\x3"+
		"\xD1\x5\xD1\xA81\n\xD1\x3\xD1\x5\xD1\xA84\n\xD1\x3\xD2\x3\xD2\x3\xD2\x5"+
		"\xD2\xA89\n\xD2\x3\xD3\x3\xD3\x5\xD3\xA8D\n\xD3\x3\xD3\x3\xD3\x3\xD4\x3"+
		"\xD4\x3\xD4\x3\xD5\x3\xD5\a\xD5\xA96\n\xD5\f\xD5\xE\xD5\xA99\v\xD5\x3"+
		"\xD6\x3\xD6\x3\xD6\x3\xD6\x5\xD6\xA9F\n\xD6\x6\xD6\xAA1\n\xD6\r\xD6\xE"+
		"\xD6\xAA2\x3\xD6\x5\xD6\xAA6\n\xD6\x3\xD6\x3\xD6\x5\xD6\xAAA\n\xD6\x3"+
		"\xD7\x3\xD7\x5\xD7\xAAE\n\xD7\x3\xD8\x3\xD8\x3\xD9\x3\xD9\x3\xD9\x3\xD9"+
		"\x3\xD9\x3\xD9\x5\xD9\xAB8\n\xD9\x3\xD9\x3\xD9\x5\xD9\xABC\n\xD9\x3\xD9"+
		"\x6\xD9\xABF\n\xD9\r\xD9\xE\xD9\xAC0\x3\xD9\x5\xD9\xAC4\n\xD9\x3\xD9\x3"+
		"\xD9\x5\xD9\xAC8\n\xD9\x3\xD9\x3\xD9\x5\xD9\xACC\n\xD9\x3\xD9\x3\xD9\x5"+
		"\xD9\xAD0\n\xD9\x3\xD9\x3\xD9\x5\xD9\xAD4\n\xD9\x3\xD9\x3\xD9\x3\xD9\x5"+
		"\xD9\xAD9\n\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\xADE\n\xD9\x3\xD9\x3\xD9\x5"+
		"\xD9\xAE2\n\xD9\x3\xD9\x6\xD9\xAE5\n\xD9\r\xD9\xE\xD9\xAE6\x3\xD9\x5\xD9"+
		"\xAEA\n\xD9\x3\xD9\x3\xD9\x5\xD9\xAEE\n\xD9\x3\xDA\x3\xDA\x3\xDB\x3\xDB"+
		"\a\xDB\xAF4\n\xDB\f\xDB\xE\xDB\xAF7\v\xDB\x3\xDC\x6\xDC\xAFA\n\xDC\r\xDC"+
		"\xE\xDC\xAFB\x3\xDC\x2\x2\x4\x176\x182\xDD\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<"+
		"\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z"+
		"\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2"+
		"x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E"+
		"\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2"+
		"\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6"+
		"\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA"+
		"\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE"+
		"\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2"+
		"\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2"+
		"\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116"+
		"\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128"+
		"\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A"+
		"\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C"+
		"\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E"+
		"\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E\x2\x170"+
		"\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A\x2\x17C\x2\x17E\x2\x180\x2\x182"+
		"\x2\x184\x2\x186\x2\x188\x2\x18A\x2\x18C\x2\x18E\x2\x190\x2\x192\x2\x194"+
		"\x2\x196\x2\x198\x2\x19A\x2\x19C\x2\x19E\x2\x1A0\x2\x1A2\x2\x1A4\x2\x1A6"+
		"\x2\x1A8\x2\x1AA\x2\x1AC\x2\x1AE\x2\x1B0\x2\x1B2\x2\x1B4\x2\x1B6\x2\x2"+
		"\x1E\x5\x2;;\x45\x45\xBE\xBE\a\x2\x38\x38;;{{\x9D\x9D\xA8\xA8\x4\x2\xAA"+
		"\xAB\xCD\xCD\x4\x2\x85\x87\xB5\xB5\x4\x2))++\x4\x2rr\xBC\xBC\x3\x2=>\x3"+
		"\x2HT\x4\x2\xC5\xC5\xC9\xC9\x3\x2jn\x3\x2\x94\x95\x4\x2##\x8A\x8A\x4\x2"+
		"tt\xA6\xA6\x3\x2\x6\a\x3\x2\xDE\xDF\xE\x2\x4\x4\x15\x15!\"<<??\x46\x46"+
		"WW}}\x7F\x7F\xB6\xB6\xBB\xBB\xC6\xC6\a\x2||\x83\x83\xD2\xD5\xD7\xD7\xDA"+
		"\xDA\x3\x2\xE1\xE4\x5\x2,,.\x32\xDC\xDC\x6\x2pptt\xA1\xA1\xA6\xA6\x4\x2"+
		"\xD0\xD0\xD9\xD9\x4\x2\xD8\xD8\xDB\xDB\x4\x2oo\xC1\xC1\x4\x2[[\x91\x91"+
		"&\x2\x3\x6\b\xE\x10\x19\x1B#%%\'(\x33\x38:?\x42\x43\x45\x46WW\x64\x64"+
		"\x66\x66hhoossxxz\x7F\x82\x87\x89\x8C\x8E\x92\x94\x94\x96\x97\x9C\xA0"+
		"\xA5\xA5\xA7\xA8\xAA\xAB\xAD\xAE\xB2\xB2\xB5\xB7\xB9\xB9\xBB\xBB\xBD\xC1"+
		"\xC3\xC7\xCA\xCA\xCC\xCE \x2\x1A\x1A$$@\x41\x44\x44GVYZ``\x63\x63\x65"+
		"\x65gginprtwyy\x80\x81\x88\x88\x8D\x8D\x93\x93\xA1\xA1\xA6\xA6\xA9\xA9"+
		"\xAC\xAC\xAF\xB1\xB3\xB4\xB8\xB8\xBA\xBA\xBC\xBC\xC2\xC2\xC8\xC9\xCB\xCB"+
		"\x3\x2\xE6\xE6\x4\x2\xE9\xE9\xEC\xEC\xC33\x2\x1B8\x3\x2\x2\x2\x4\x1BC"+
		"\x3\x2\x2\x2\x6\x1CE\x3\x2\x2\x2\b\x1D9\x3\x2\x2\x2\n\x1EC\x3\x2\x2\x2"+
		"\f\x206\x3\x2\x2\x2\xE\x209\x3\x2\x2\x2\x10\x221\x3\x2\x2\x2\x12\x223"+
		"\x3\x2\x2\x2\x14\x22A\x3\x2\x2\x2\x16\x237\x3\x2\x2\x2\x18\x23A\x3\x2"+
		"\x2\x2\x1A\x24A\x3\x2\x2\x2\x1C\x259\x3\x2\x2\x2\x1E\x260\x3\x2\x2\x2"+
		" \x288\x3\x2\x2\x2\"\x298\x3\x2\x2\x2$\x29A\x3\x2\x2\x2&\x2B5\x3\x2\x2"+
		"\x2(\x2B7\x3\x2\x2\x2*\x2BB\x3\x2\x2\x2,\x2BD\x3\x2\x2\x2.\x2C1\x3\x2"+
		"\x2\x2\x30\x2C3\x3\x2\x2\x2\x32\x2C5\x3\x2\x2\x2\x34\x2CF\x3\x2\x2\x2"+
		"\x36\x2D3\x3\x2\x2\x2\x38\x2D5\x3\x2\x2\x2:\x2D8\x3\x2\x2\x2<\x2DA\x3"+
		"\x2\x2\x2>\x2E0\x3\x2\x2\x2@\x2E2\x3\x2\x2\x2\x42\x2F0\x3\x2\x2\x2\x44"+
		"\x2FC\x3\x2\x2\x2\x46\x2FE\x3\x2\x2\x2H\x315\x3\x2\x2\x2J\x317\x3\x2\x2"+
		"\x2L\x319\x3\x2\x2\x2N\x31B\x3\x2\x2\x2P\x328\x3\x2\x2\x2R\x334\x3\x2"+
		"\x2\x2T\x336\x3\x2\x2\x2V\x342\x3\x2\x2\x2X\x344\x3\x2\x2\x2Z\x34A\x3"+
		"\x2\x2\x2\\\x354\x3\x2\x2\x2^\x356\x3\x2\x2\x2`\x358\x3\x2\x2\x2\x62\x365"+
		"\x3\x2\x2\x2\x64\x377\x3\x2\x2\x2\x66\x37C\x3\x2\x2\x2h\x37E\x3\x2\x2"+
		"\x2j\x380\x3\x2\x2\x2l\x382\x3\x2\x2\x2n\x390\x3\x2\x2\x2p\x392\x3\x2"+
		"\x2\x2r\x399\x3\x2\x2\x2t\x3A3\x3\x2\x2\x2v\x3A5\x3\x2\x2\x2x\x3B2\x3"+
		"\x2\x2\x2z\x3BE\x3\x2\x2\x2|\x3CC\x3\x2\x2\x2~\x3CE\x3\x2\x2\x2\x80\x3E4"+
		"\x3\x2\x2\x2\x82\x3E6\x3\x2\x2\x2\x84\x3E8\x3\x2\x2\x2\x86\x3FE\x3\x2"+
		"\x2\x2\x88\x403\x3\x2\x2\x2\x8A\x415\x3\x2\x2\x2\x8C\x427\x3\x2\x2\x2"+
		"\x8E\x448\x3\x2\x2\x2\x90\x463\x3\x2\x2\x2\x92\x484\x3\x2\x2\x2\x94\x48A"+
		"\x3\x2\x2\x2\x96\x49A\x3\x2\x2\x2\x98\x49F\x3\x2\x2\x2\x9A\x4A1\x3\x2"+
		"\x2\x2\x9C\x4A3\x3\x2\x2\x2\x9E\x4AD\x3\x2\x2\x2\xA0\x4B0\x3\x2\x2\x2"+
		"\xA2\x4B3\x3\x2\x2\x2\xA4\x4BD\x3\x2\x2\x2\xA6\x4BF\x3\x2\x2\x2\xA8\x4D8"+
		"\x3\x2\x2\x2\xAA\x4DD\x3\x2\x2\x2\xAC\x4EB\x3\x2\x2\x2\xAE\x4F8\x3\x2"+
		"\x2\x2\xB0\x4FA\x3\x2\x2\x2\xB2\x50A\x3\x2\x2\x2\xB4\x511\x3\x2\x2\x2"+
		"\xB6\x51B\x3\x2\x2\x2\xB8\x51D\x3\x2\x2\x2\xBA\x52E\x3\x2\x2\x2\xBC\x547"+
		"\x3\x2\x2\x2\xBE\x562\x3\x2\x2\x2\xC0\x564\x3\x2\x2\x2\xC2\x568\x3\x2"+
		"\x2\x2\xC4\x56C\x3\x2\x2\x2\xC6\x590\x3\x2\x2\x2\xC8\x592\x3\x2\x2\x2"+
		"\xCA\x598\x3\x2\x2\x2\xCC\x59A\x3\x2\x2\x2\xCE\x5AC\x3\x2\x2\x2\xD0\x5BB"+
		"\x3\x2\x2\x2\xD2\x5E8\x3\x2\x2\x2\xD4\x5EA\x3\x2\x2\x2\xD6\x5EC\x3\x2"+
		"\x2\x2\xD8\x5EE\x3\x2\x2\x2\xDA\x5F4\x3\x2\x2\x2\xDC\x600\x3\x2\x2\x2"+
		"\xDE\x60C\x3\x2\x2\x2\xE0\x618\x3\x2\x2\x2\xE2\x62C\x3\x2\x2\x2\xE4\x643"+
		"\x3\x2\x2\x2\xE6\x65E\x3\x2\x2\x2\xE8\x674\x3\x2\x2\x2\xEA\x687\x3\x2"+
		"\x2\x2\xEC\x69A\x3\x2\x2\x2\xEE\x6AA\x3\x2\x2\x2\xF0\x6AE\x3\x2\x2\x2"+
		"\xF2\x6B6\x3\x2\x2\x2\xF4\x6C4\x3\x2\x2\x2\xF6\x6CA\x3\x2\x2\x2\xF8\x6EF"+
		"\x3\x2\x2\x2\xFA\x6F3\x3\x2\x2\x2\xFC\x6FF\x3\x2\x2\x2\xFE\x701\x3\x2"+
		"\x2\x2\x100\x709\x3\x2\x2\x2\x102\x70B\x3\x2\x2\x2\x104\x717\x3\x2\x2"+
		"\x2\x106\x719\x3\x2\x2\x2\x108\x721\x3\x2\x2\x2\x10A\x736\x3\x2\x2\x2"+
		"\x10C\x738\x3\x2\x2\x2\x10E\x74B\x3\x2\x2\x2\x110\x766\x3\x2\x2\x2\x112"+
		"\x768\x3\x2\x2\x2\x114\x76A\x3\x2\x2\x2\x116\x76C\x3\x2\x2\x2\x118\x77B"+
		"\x3\x2\x2\x2\x11A\x790\x3\x2\x2\x2\x11C\x794\x3\x2\x2\x2\x11E\x798\x3"+
		"\x2\x2\x2\x120\x79C\x3\x2\x2\x2\x122\x7A4\x3\x2\x2\x2\x124\x7AF\x3\x2"+
		"\x2\x2\x126\x7B1\x3\x2\x2\x2\x128\x7B7\x3\x2\x2\x2\x12A\x7BE\x3\x2\x2"+
		"\x2\x12C\x7C2\x3\x2\x2\x2\x12E\x7CE\x3\x2\x2\x2\x130\x7E0\x3\x2\x2\x2"+
		"\x132\x7E4\x3\x2\x2\x2\x134\x7EA\x3\x2\x2\x2\x136\x7EC\x3\x2\x2\x2\x138"+
		"\x7F1\x3\x2\x2\x2\x13A\x7FA\x3\x2\x2\x2\x13C\x808\x3\x2\x2\x2\x13E\x821"+
		"\x3\x2\x2\x2\x140\x828\x3\x2\x2\x2\x142\x82F\x3\x2\x2\x2\x144\x85C\x3"+
		"\x2\x2\x2\x146\x87B\x3\x2\x2\x2\x148\x889\x3\x2\x2\x2\x14A\x89B\x3\x2"+
		"\x2\x2\x14C\x89D\x3\x2\x2\x2\x14E\x8B0\x3\x2\x2\x2\x150\x8B7\x3\x2\x2"+
		"\x2\x152\x8BB\x3\x2\x2\x2\x154\x8BD\x3\x2\x2\x2\x156\x8BF\x3\x2\x2\x2"+
		"\x158\x8C6\x3\x2\x2\x2\x15A\x8C8\x3\x2\x2\x2\x15C\x8D3\x3\x2\x2\x2\x15E"+
		"\x8D5\x3\x2\x2\x2\x160\x8E4\x3\x2\x2\x2\x162\x8E6\x3\x2\x2\x2\x164\x8FF"+
		"\x3\x2\x2\x2\x166\x901\x3\x2\x2\x2\x168\x90B\x3\x2\x2\x2\x16A\x90D\x3"+
		"\x2\x2\x2\x16C\x913\x3\x2\x2\x2\x16E\x91A\x3\x2\x2\x2\x170\x91E\x3\x2"+
		"\x2\x2\x172\x92A\x3\x2\x2\x2\x174\x92C\x3\x2\x2\x2\x176\x953\x3\x2\x2"+
		"\x2\x178\x9CD\x3\x2\x2\x2\x17A\x9D2\x3\x2\x2\x2\x17C\x9D4\x3\x2\x2\x2"+
		"\x17E\x9D6\x3\x2\x2\x2\x180\x9D8\x3\x2\x2\x2\x182\x9E7\x3\x2\x2\x2\x184"+
		"\xA21\x3\x2\x2\x2\x186\xA36\x3\x2\x2\x2\x188\xA38\x3\x2\x2\x2\x18A\xA3C"+
		"\x3\x2\x2\x2\x18C\xA3E\x3\x2\x2\x2\x18E\xA40\x3\x2\x2\x2\x190\xA56\x3"+
		"\x2\x2\x2\x192\xA58\x3\x2\x2\x2\x194\xA5A\x3\x2\x2\x2\x196\xA5C\x3\x2"+
		"\x2\x2\x198\xA60\x3\x2\x2\x2\x19A\xA62\x3\x2\x2\x2\x19C\xA64\x3\x2\x2"+
		"\x2\x19E\xA71\x3\x2\x2\x2\x1A0\xA83\x3\x2\x2\x2\x1A2\xA88\x3\x2\x2\x2"+
		"\x1A4\xA8A\x3\x2\x2\x2\x1A6\xA90\x3\x2\x2\x2\x1A8\xA97\x3\x2\x2\x2\x1AA"+
		"\xA9A\x3\x2\x2\x2\x1AC\xAAB\x3\x2\x2\x2\x1AE\xAAF\x3\x2\x2\x2\x1B0\xAED"+
		"\x3\x2\x2\x2\x1B2\xAEF\x3\x2\x2\x2\x1B4\xAF1\x3\x2\x2\x2\x1B6\xAF9\x3"+
		"\x2\x2\x2\x1B8\x1B9\x5\x4\x3\x2\x1B9\x1BA\a\x2\x2\x3\x1BA\x3\x3\x2\x2"+
		"\x2\x1BB\x1BD\x5\x1A0\xD1\x2\x1BC\x1BB\x3\x2\x2\x2\x1BC\x1BD\x3\x2\x2"+
		"\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1C0\x5\f\a\x2\x1BF\x1C1\x5\x6\x4\x2\x1C0"+
		"\x1BF\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C4"+
		"\x5\f\a\x2\x1C3\x1C5\x5\b\x5\x2\x1C4\x1C3\x3\x2\x2\x2\x1C4\x1C5\x3\x2"+
		"\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C7\x5\f\a\x2\x1C7\x1C8\x5\x14\v\x2"+
		"\x1C8\x1C9\x5\f\a\x2\x1C9\x1CA\x5\x1A\xE\x2\x1CA\x1CC\x5\f\a\x2\x1CB\x1CD"+
		"\x5\x1B6\xDC\x2\x1CC\x1CB\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x5\x3"+
		"\x2\x2\x2\x1CE\x1CF\a\xC7\x2\x2\x1CF\x1D0\x5\x1B6\xDC\x2\x1D0\x1D2\x5"+
		"\x16E\xB8\x2\x1D1\x1D3\x5\x1B6\xDC\x2\x1D2\x1D1\x3\x2\x2\x2\x1D2\x1D3"+
		"\x3\x2\x2\x2\x1D3\x1D5\x3\x2\x2\x2\x1D4\x1D6\a\x42\x2\x2\x1D5\x1D4\x3"+
		"\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1D8\x5\x1A0"+
		"\xD1\x2\x1D8\a\x3\x2\x2\x2\x1D9\x1E1\a:\x2\x2\x1DA\x1DB\x5\x1B6\xDC\x2"+
		"\x1DB\x1DC\a\xEA\x2\x2\x1DC\x1DD\x5\x1B6\xDC\x2\x1DD\x1DF\x5\x150\xA9"+
		"\x2\x1DE\x1E0\x5\x1B6\xDC\x2\x1DF\x1DE\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2"+
		"\x2\x1E0\x1E2\x3\x2\x2\x2\x1E1\x1DA\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2"+
		"\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1E5\x5\x1A0\xD1\x2\x1E4\x1E6\x5\n\x6\x2\x1E5"+
		"\x1E4\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1E5\x3\x2\x2\x2\x1E7\x1E8"+
		"\x3\x2\x2\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9\x1EA\a\x64\x2\x2\x1EA\x1EB\x5"+
		"\x1A0\xD1\x2\x1EB\t\x3\x2\x2\x2\x1EC\x1F0\x5\x150\xA9\x2\x1ED\x1EF\x5"+
		"\x1B6\xDC\x2\x1EE\x1ED\x3\x2\x2\x2\x1EF\x1F2\x3\x2\x2\x2\x1F0\x1EE\x3"+
		"\x2\x2\x2\x1F0\x1F1\x3\x2\x2\x2\x1F1\x1F3\x3\x2\x2\x2\x1F2\x1F0\x3\x2"+
		"\x2\x2\x1F3\x1F7\a\xD2\x2\x2\x1F4\x1F6\x5\x1B6\xDC\x2\x1F5\x1F4\x3\x2"+
		"\x2\x2\x1F6\x1F9\x3\x2\x2\x2\x1F7\x1F5\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2"+
		"\x2\x1F8\x1FA\x3\x2\x2\x2\x1F9\x1F7\x3\x2\x2\x2\x1FA\x1FD\x5\x176\xBC"+
		"\x2\x1FB\x1FC\a*\x2\x2\x1FC\x1FE\x5\x16E\xB8\x2\x1FD\x1FB\x3\x2\x2\x2"+
		"\x1FD\x1FE\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF\x200\x5\x1A0\xD1\x2"+
		"\x200\v\x3\x2\x2\x2\x201\x202\x5\xE\b\x2\x202\x203\x5\x1A0\xD1\x2\x203"+
		"\x205\x3\x2\x2\x2\x204\x201\x3\x2\x2\x2\x205\x208\x3\x2\x2\x2\x206\x204"+
		"\x3\x2\x2\x2\x206\x207\x3\x2\x2\x2\x207\r\x3\x2\x2\x2\x208\x206\x3\x2"+
		"\x2\x2\x209\x20A\a\x37\x2\x2\x20A\x20B\x5\x1B6\xDC\x2\x20B\x20D\x5\x10"+
		"\t\x2\x20C\x20E\x5\x1B6\xDC\x2\x20D\x20C\x3\x2\x2\x2\x20D\x20E\x3\x2\x2"+
		"\x2\x20E\x20F\x3\x2\x2\x2\x20F\x211\a\xD2\x2\x2\x210\x212\x5\x1B6\xDC"+
		"\x2\x211\x210\x3\x2\x2\x2\x211\x212\x3\x2\x2\x2\x212\x213\x3\x2\x2\x2"+
		"\x213\x21E\x5\x12\n\x2\x214\x216\x5\x1B6\xDC\x2\x215\x214\x3\x2\x2\x2"+
		"\x215\x216\x3\x2\x2\x2\x216\x217\x3\x2\x2\x2\x217\x219\a)\x2\x2\x218\x21A"+
		"\x5\x1B6\xDC\x2\x219\x218\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21A\x21B"+
		"\x3\x2\x2\x2\x21B\x21D\x5\x12\n\x2\x21C\x215\x3\x2\x2\x2\x21D\x220\x3"+
		"\x2\x2\x2\x21E\x21C\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\xF\x3\x2\x2"+
		"\x2\x220\x21E\x3\x2\x2\x2\x221\x222\x5\x182\xC2\x2\x222\x11\x3\x2\x2\x2"+
		"\x223\x224\x5\x176\xBC\x2\x224\x13\x3\x2\x2\x2\x225\x226\x5\x18\r\x2\x226"+
		"\x227\x5\x1A0\xD1\x2\x227\x229\x3\x2\x2\x2\x228\x225\x3\x2\x2\x2\x229"+
		"\x22C\x3\x2\x2\x2\x22A\x228\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B\x15"+
		"\x3\x2\x2\x2\x22C\x22A\x3\x2\x2\x2\x22D\x22E\a\x98\x2\x2\x22E\x22F\x5"+
		"\x1B6\xDC\x2\x22F\x230\x5\x16E\xB8\x2\x230\x238\x3\x2\x2\x2\x231\x232"+
		"\a\x9A\x2\x2\x232\x233\x5\x1B6\xDC\x2\x233\x234\t\x2\x2\x2\x234\x238\x3"+
		"\x2\x2\x2\x235\x238\a\x99\x2\x2\x236\x238\a\x9B\x2\x2\x237\x22D\x3\x2"+
		"\x2\x2\x237\x231\x3\x2\x2\x2\x237\x235\x3\x2\x2\x2\x237\x236\x3\x2\x2"+
		"\x2\x238\x17\x3\x2\x2\x2\x239\x23B\x5\x1B6\xDC\x2\x23A\x239\x3\x2\x2\x2"+
		"\x23A\x23B\x3\x2\x2\x2\x23B\x247\x3\x2\x2\x2\x23C\x248\x5\xE\b\x2\x23D"+
		"\x248\x5\x8CG\x2\x23E\x248\x5\x94K\x2\x23F\x248\x5\xAAV\x2\x240\x248\x5"+
		"\xB4[\x2\x241\x248\x5\x88\x45\x2\x242\x248\x5\xD8m\x2\x243\x248\x5\x138"+
		"\x9D\x2\x244\x248\x5\x16\f\x2\x245\x248\x5\x11C\x8F\x2\x246\x248\x5\x11E"+
		"\x90\x2\x247\x23C\x3\x2\x2\x2\x247\x23D\x3\x2\x2\x2\x247\x23E\x3\x2\x2"+
		"\x2\x247\x23F\x3\x2\x2\x2\x247\x240\x3\x2\x2\x2\x247\x241\x3\x2\x2\x2"+
		"\x247\x242\x3\x2\x2\x2\x247\x243\x3\x2\x2\x2\x247\x244\x3\x2\x2\x2\x247"+
		"\x245\x3\x2\x2\x2\x247\x246\x3\x2\x2\x2\x248\x19\x3\x2\x2\x2\x249\x24B"+
		"\x5\x1B6\xDC\x2\x24A\x249\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B\x251"+
		"\x3\x2\x2\x2\x24C\x24D\x5\x1C\xF\x2\x24D\x24E\x5\x1A0\xD1\x2\x24E\x250"+
		"\x3\x2\x2\x2\x24F\x24C\x3\x2\x2\x2\x250\x253\x3\x2\x2\x2\x251\x24F\x3"+
		"\x2\x2\x2\x251\x252\x3\x2\x2\x2\x252\x1B\x3\x2\x2\x2\x253\x251\x3\x2\x2"+
		"\x2\x254\x25A\x5\xBC_\x2\x255\x25A\x5\xE4s\x2\x256\x25A\x5\xE6t\x2\x257"+
		"\x25A\x5\xE8u\x2\x258\x25A\x5\x118\x8D\x2\x259\x254\x3\x2\x2\x2\x259\x255"+
		"\x3\x2\x2\x2\x259\x256\x3\x2\x2\x2\x259\x257\x3\x2\x2\x2\x259\x258\x3"+
		"\x2\x2\x2\x25A\x1D\x3\x2\x2\x2\x25B\x25C\x5 \x11\x2\x25C\x25D\x5\x1A0"+
		"\xD1\x2\x25D\x25F\x3\x2\x2\x2\x25E\x25B\x3\x2\x2\x2\x25F\x262\x3\x2\x2"+
		"\x2\x260\x25E\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261\x1F\x3\x2\x2\x2\x262"+
		"\x260\x3\x2\x2\x2\x263\x289\x5\x168\xB5\x2\x264\x289\x5\"\x12\x2\x265"+
		"\x289\x5\xE\b\x2\x266\x289\x5\x88\x45\x2\x267\x289\x5\xA8U\x2\x268\x289"+
		"\x5\xAEX\x2\x269\x289\x5\xB0Y\x2\x26A\x289\x5\xB2Z\x2\x26B\x289\x5\xB6"+
		"\\\x2\x26C\x289\x5\xB8]\x2\x26D\x289\x5\xBA^\x2\x26E\x289\x5\xC0\x61\x2"+
		"\x26F\x289\x5\xC2\x62\x2\x270\x289\x5\xC4\x63\x2\x271\x289\x5\xCA\x66"+
		"\x2\x272\x289\x5\xD8m\x2\x273\x289\x5\xDAn\x2\x274\x289\x5\xDCo\x2\x275"+
		"\x289\x5\xDEp\x2\x276\x289\x5\xE0q\x2\x277\x289\x5\xE2r\x2\x278\x289\x5"+
		"\xEAv\x2\x279\x289\x5\xF0y\x2\x27A\x289\x5\xFE\x80\x2\x27B\x289\x5\x100"+
		"\x81\x2\x27C\x289\x5\x102\x82\x2\x27D\x289\x5\x108\x85\x2\x27E\x289\x5"+
		"\x116\x8C\x2\x27F\x289\x5\x104\x83\x2\x280\x289\x5\x138\x9D\x2\x281\x289"+
		"\x5\x13E\xA0\x2\x282\x289\x5\x140\xA1\x2\x283\x289\x5\x142\xA2\x2\x284"+
		"\x289\x5\x144\xA3\x2\x285\x289\x5\x146\xA4\x2\x286\x289\x5\xFC\x7F\x2"+
		"\x287\x289\x5\x106\x84\x2\x288\x263\x3\x2\x2\x2\x288\x264\x3\x2\x2\x2"+
		"\x288\x265\x3\x2\x2\x2\x288\x266\x3\x2\x2\x2\x288\x267\x3\x2\x2\x2\x288"+
		"\x268\x3\x2\x2\x2\x288\x269\x3\x2\x2\x2\x288\x26A\x3\x2\x2\x2\x288\x26B"+
		"\x3\x2\x2\x2\x288\x26C\x3\x2\x2\x2\x288\x26D\x3\x2\x2\x2\x288\x26E\x3"+
		"\x2\x2\x2\x288\x26F\x3\x2\x2\x2\x288\x270\x3\x2\x2\x2\x288\x271\x3\x2"+
		"\x2\x2\x288\x272\x3\x2\x2\x2\x288\x273\x3\x2\x2\x2\x288\x274\x3\x2\x2"+
		"\x2\x288\x275\x3\x2\x2\x2\x288\x276\x3\x2\x2\x2\x288\x277\x3\x2\x2\x2"+
		"\x288\x278\x3\x2\x2\x2\x288\x279\x3\x2\x2\x2\x288\x27A\x3\x2\x2\x2\x288"+
		"\x27B\x3\x2\x2\x2\x288\x27C\x3\x2\x2\x2\x288\x27D\x3\x2\x2\x2\x288\x27E"+
		"\x3\x2\x2\x2\x288\x27F\x3\x2\x2\x2\x288\x280\x3\x2\x2\x2\x288\x281\x3"+
		"\x2\x2\x2\x288\x282\x3\x2\x2\x2\x288\x283\x3\x2\x2\x2\x288\x284\x3\x2"+
		"\x2\x2\x288\x285\x3\x2\x2\x2\x288\x286\x3\x2\x2\x2\x288\x287\x3\x2\x2"+
		"\x2\x289!\x3\x2\x2\x2\x28A\x299\x5$\x13\x2\x28B\x299\x5> \x2\x28C\x299"+
		"\x5<\x1F\x2\x28D\x299\x5\x42\"\x2\x28E\x299\x5\x46$\x2\x28F\x299\x5N("+
		"\x2\x290\x299\x5P)\x2\x291\x299\x5T+\x2\x292\x299\x5X-\x2\x293\x299\x5"+
		"`\x31\x2\x294\x299\x5v<\x2\x295\x299\x5x=\x2\x296\x299\x5~@\x2\x297\x299"+
		"\x5\x84\x43\x2\x298\x28A\x3\x2\x2\x2\x298\x28B\x3\x2\x2\x2\x298\x28C\x3"+
		"\x2\x2\x2\x298\x28D\x3\x2\x2\x2\x298\x28E\x3\x2\x2\x2\x298\x28F\x3\x2"+
		"\x2\x2\x298\x290\x3\x2\x2\x2\x298\x291\x3\x2\x2\x2\x298\x292\x3\x2\x2"+
		"\x2\x298\x293\x3\x2\x2\x2\x298\x294\x3\x2\x2\x2\x298\x295\x3\x2\x2\x2"+
		"\x298\x296\x3\x2\x2\x2\x298\x297\x3\x2\x2\x2\x299#\x3\x2\x2\x2\x29A\x29B"+
		"\a\x96\x2\x2\x29B\x29C\x5\x1B6\xDC\x2\x29C\x2A0\x5&\x14\x2\x29D\x29E\x5"+
		"\x1B6\xDC\x2\x29E\x29F\x5(\x15\x2\x29F\x2A1\x3\x2\x2\x2\x2A0\x29D\x3\x2"+
		"\x2\x2\x2A0\x2A1\x3\x2\x2\x2\x2A1\x2A5\x3\x2\x2\x2\x2A2\x2A3\x5\x1B6\xDC"+
		"\x2\x2A3\x2A4\x5,\x17\x2\x2A4\x2A6\x3\x2\x2\x2\x2A5\x2A2\x3\x2\x2\x2\x2A5"+
		"\x2A6\x3\x2\x2\x2\x2A6\x2AA\x3\x2\x2\x2\x2A7\x2A8\x5\x1B6\xDC\x2\x2A8"+
		"\x2A9\x5\x30\x19\x2\x2A9\x2AB\x3\x2\x2\x2\x2AA\x2A7\x3\x2\x2\x2\x2AA\x2AB"+
		"\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AD\x5\x1B6\xDC\x2\x2AD\x2AE"+
		"\a\x39\x2\x2\x2AE\x2AF\x5\x1B6\xDC\x2\x2AF\x2B3\x5\x36\x1C\x2\x2B0\x2B1"+
		"\x5\x1B6\xDC\x2\x2B1\x2B2\x5\x32\x1A\x2\x2B2\x2B4\x3\x2\x2\x2\x2B3\x2B0"+
		"\x3\x2\x2\x2\x2B3\x2B4\x3\x2\x2\x2\x2B4%\x3\x2\x2\x2\x2B5\x2B6\x5\x176"+
		"\xBC\x2\x2B6\'\x3\x2\x2\x2\x2B7\x2B8\aq\x2\x2\x2B8\x2B9\x5\x1B6\xDC\x2"+
		"\x2B9\x2BA\x5*\x16\x2\x2BA)\x3\x2\x2\x2\x2BB\x2BC\t\x3\x2\x2\x2BC+\x3"+
		"\x2\x2\x2\x2BD\x2BE\a\x33\x2\x2\x2BE\x2BF\x5\x1B6\xDC\x2\x2BF\x2C0\x5"+
		".\x18\x2\x2C0-\x3\x2\x2\x2\x2C1\x2C2\t\x4\x2\x2\x2C2/\x3\x2\x2\x2\x2C3"+
		"\x2C4\t\x5\x2\x2\x2C4\x31\x3\x2\x2\x2\x2C5\x2C7\a\x1F\x2\x2\x2C6\x2C8"+
		"\x5\x1B6\xDC\x2\x2C7\x2C6\x3\x2\x2\x2\x2C7\x2C8\x3\x2\x2\x2\x2C8\x2C9"+
		"\x3\x2\x2\x2\x2C9\x2CB\a\xD2\x2\x2\x2CA\x2CC\x5\x1B6\xDC\x2\x2CB\x2CA"+
		"\x3\x2\x2\x2\x2CB\x2CC\x3\x2\x2\x2\x2CC\x2CD\x3\x2\x2\x2\x2CD\x2CE\x5"+
		"\x34\x1B\x2\x2CE\x33\x3\x2\x2\x2\x2CF\x2D0\x5\x176\xBC\x2\x2D0\x35\x3"+
		"\x2\x2\x2\x2D1\x2D4\x5\x38\x1D\x2\x2D2\x2D4\x5:\x1E\x2\x2D3\x2D1\x3\x2"+
		"\x2\x2\x2D3\x2D2\x3\x2\x2\x2\x2D4\x37\x3\x2\x2\x2\x2D5\x2D6\a.\x2\x2\x2D6"+
		"\x2D7\x5\x176\xBC\x2\x2D7\x39\x3\x2\x2\x2\x2D8\x2D9\x5\x176\xBC\x2\x2D9"+
		";\x3\x2\x2\x2\x2DA\x2DE\a\x43\x2\x2\x2DB\x2DC\x5\x1B6\xDC\x2\x2DC\x2DD"+
		"\x5@!\x2\x2DD\x2DF\x3\x2\x2\x2\x2DE\x2DB\x3\x2\x2\x2\x2DE\x2DF\x3\x2\x2"+
		"\x2\x2DF=\x3\x2\x2\x2\x2E0\x2E1\a\xAE\x2\x2\x2E1?\x3\x2\x2\x2\x2E2\x2ED"+
		"\x5\x36\x1C\x2\x2E3\x2E5\x5\x1B6\xDC\x2\x2E4\x2E3\x3\x2\x2\x2\x2E4\x2E5"+
		"\x3\x2\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6\x2E8\a)\x2\x2\x2E7\x2E9\x5\x1B6"+
		"\xDC\x2\x2E8\x2E7\x3\x2\x2\x2\x2E8\x2E9\x3\x2\x2\x2\x2E9\x2EA\x3\x2\x2"+
		"\x2\x2EA\x2EC\x5\x36\x1C\x2\x2EB\x2E4\x3\x2\x2\x2\x2EC\x2EF\x3\x2\x2\x2"+
		"\x2ED\x2EB\x3\x2\x2\x2\x2ED\x2EE\x3\x2\x2\x2\x2EE\x41\x3\x2\x2\x2\x2EF"+
		"\x2ED\x3\x2\x2\x2\x2F0\x2F1\a\xB2\x2\x2\x2F1\x2F2\x5\x1B6\xDC\x2\x2F2"+
		"\x2F4\x5\x36\x1C\x2\x2F3\x2F5\x5\x1B6\xDC\x2\x2F4\x2F3\x3\x2\x2\x2\x2F4"+
		"\x2F5\x3\x2\x2\x2\x2F5\x2F6\x3\x2\x2\x2\x2F6\x2F8\a)\x2\x2\x2F7\x2F9\x5"+
		"\x1B6\xDC\x2\x2F8\x2F7\x3\x2\x2\x2\x2F8\x2F9\x3\x2\x2\x2\x2F9\x2FA\x3"+
		"\x2\x2\x2\x2FA\x2FB\x5\x44#\x2\x2FB\x43\x3\x2\x2\x2\x2FC\x2FD\x5\x176"+
		"\xBC\x2\x2FD\x45\x3\x2\x2\x2\x2FE\x2FF\a~\x2\x2\x2FF\x300\x5\x1B6\xDC"+
		"\x2\x300\x309\x5\x36\x1C\x2\x301\x303\x5\x1B6\xDC\x2\x302\x301\x3\x2\x2"+
		"\x2\x302\x303\x3\x2\x2\x2\x303\x304\x3\x2\x2\x2\x304\x306\a)\x2\x2\x305"+
		"\x307\x5\x1B6\xDC\x2\x306\x305\x3\x2\x2\x2\x306\x307\x3\x2\x2\x2\x307"+
		"\x308\x3\x2\x2\x2\x308\x30A\x5H%\x2\x309\x302\x3\x2\x2\x2\x309\x30A\x3"+
		"\x2\x2\x2\x30AG\x3\x2\x2\x2\x30B\x316\x5J&\x2\x30C\x30D\x5J&\x2\x30D\x30E"+
		"\x5\x1B6\xDC\x2\x30E\x310\x3\x2\x2\x2\x30F\x30C\x3\x2\x2\x2\x30F\x310"+
		"\x3\x2\x2\x2\x310\x311\x3\x2\x2\x2\x311\x312\a\xC0\x2\x2\x312\x313\x5"+
		"\x1B6\xDC\x2\x313\x314\x5L\'\x2\x314\x316\x3\x2\x2\x2\x315\x30B\x3\x2"+
		"\x2\x2\x315\x30F\x3\x2\x2\x2\x316I\x3\x2\x2\x2\x317\x318\x5\x176\xBC\x2"+
		"\x318K\x3\x2\x2\x2\x319\x31A\x5\x176\xBC\x2\x31AM\x3\x2\x2\x2\x31B\x31C"+
		"\a\xC4\x2\x2\x31C\x31D\x5\x1B6\xDC\x2\x31D\x326\x5\x36\x1C\x2\x31E\x320"+
		"\x5\x1B6\xDC\x2\x31F\x31E\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320\x321"+
		"\x3\x2\x2\x2\x321\x323\a)\x2\x2\x322\x324\x5\x1B6\xDC\x2\x323\x322\x3"+
		"\x2\x2\x2\x323\x324\x3\x2\x2\x2\x324\x325\x3\x2\x2\x2\x325\x327\x5H%\x2"+
		"\x326\x31F\x3\x2\x2\x2\x326\x327\x3\x2\x2\x2\x327O\x3\x2\x2\x2\x328\x329"+
		"\a\x84\x2\x2\x329\x32A\x5\x1B6\xDC\x2\x32A\x32C\x5\x38\x1D\x2\x32B\x32D"+
		"\x5\x1B6\xDC\x2\x32C\x32B\x3\x2\x2\x2\x32C\x32D\x3\x2\x2\x2\x32D\x32E"+
		"\x3\x2\x2\x2\x32E\x330\a)\x2\x2\x32F\x331\x5\x1B6\xDC\x2\x330\x32F\x3"+
		"\x2\x2\x2\x330\x331\x3\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332\x333\x5R*\x2"+
		"\x333Q\x3\x2\x2\x2\x334\x335\x5\x176\xBC\x2\x335S\x3\x2\x2\x2\x336\x337"+
		"\a\xCA\x2\x2\x337\x338\x5\x1B6\xDC\x2\x338\x33A\x5\x38\x1D\x2\x339\x33B"+
		"\x5\x1B6\xDC\x2\x33A\x339\x3\x2\x2\x2\x33A\x33B\x3\x2\x2\x2\x33B\x33C"+
		"\x3\x2\x2\x2\x33C\x33E\a)\x2\x2\x33D\x33F\x5\x1B6\xDC\x2\x33E\x33D\x3"+
		"\x2\x2\x2\x33E\x33F\x3\x2\x2\x2\x33F\x340\x3\x2\x2\x2\x340\x341\x5V,\x2"+
		"\x341U\x3\x2\x2\x2\x342\x343\x5\x176\xBC\x2\x343W\x3\x2\x2\x2\x344\x348"+
		"\x5Z.\x2\x345\x346\x5\x1B6\xDC\x2\x346\x347\x5\x62\x32\x2\x347\x349\x3"+
		"\x2\x2\x2\x348\x345\x3\x2\x2\x2\x348\x349\x3\x2\x2\x2\x349Y\x3\x2\x2\x2"+
		"\x34A\x34C\x5\\/\x2\x34B\x34D\x5\x1B6\xDC\x2\x34C\x34B\x3\x2\x2\x2\x34C"+
		"\x34D\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E\x350\a-\x2\x2\x34F\x351\x5"+
		"\x1B6\xDC\x2\x350\x34F\x3\x2\x2\x2\x350\x351\x3\x2\x2\x2\x351\x352\x3"+
		"\x2\x2\x2\x352\x353\x5^\x30\x2\x353[\x3\x2\x2\x2\x354\x355\a\x18\x2\x2"+
		"\x355]\x3\x2\x2\x2\x356\x357\a\xA0\x2\x2\x357_\x3\x2\x2\x2\x358\x359\a"+
		"\xA0\x2\x2\x359\x35A\x5\x1B6\xDC\x2\x35A\x35C\x5\x38\x1D\x2\x35B\x35D"+
		"\x5\x1B6\xDC\x2\x35C\x35B\x3\x2\x2\x2\x35C\x35D\x3\x2\x2\x2\x35D\x35E"+
		"\x3\x2\x2\x2\x35E\x363\a)\x2\x2\x35F\x361\x5\x1B6\xDC\x2\x360\x35F\x3"+
		"\x2\x2\x2\x360\x361\x3\x2\x2\x2\x361\x362\x3\x2\x2\x2\x362\x364\x5\x62"+
		"\x32\x2\x363\x360\x3\x2\x2\x2\x363\x364\x3\x2\x2\x2\x364\x61\x3\x2\x2"+
		"\x2\x365\x36C\x5\x64\x33\x2\x366\x368\x5\x1B6\xDC\x2\x367\x366\x3\x2\x2"+
		"\x2\x367\x368\x3\x2\x2\x2\x368\x369\x3\x2\x2\x2\x369\x36B\x5\x64\x33\x2"+
		"\x36A\x367\x3\x2\x2\x2\x36B\x36E\x3\x2\x2\x2\x36C\x36A\x3\x2\x2\x2\x36C"+
		"\x36D\x3\x2\x2\x2\x36D\x63\x3\x2\x2\x2\x36E\x36C\x3\x2\x2\x2\x36F\x378"+
		"\x5\x66\x34\x2\x370\x378\x5h\x35\x2\x371\x373\x5\x66\x34\x2\x372\x374"+
		"\x5\x1B6\xDC\x2\x373\x372\x3\x2\x2\x2\x373\x374\x3\x2\x2\x2\x374\x375"+
		"\x3\x2\x2\x2\x375\x376\x5h\x35\x2\x376\x378\x3\x2\x2\x2\x377\x36F\x3\x2"+
		"\x2\x2\x377\x370\x3\x2\x2\x2\x377\x371\x3\x2\x2\x2\x378\x65\x3\x2\x2\x2"+
		"\x379\x37D\x5l\x37\x2\x37A\x37D\x5p\x39\x2\x37B\x37D\x5j\x36\x2\x37C\x379"+
		"\x3\x2\x2\x2\x37C\x37A\x3\x2\x2\x2\x37C\x37B\x3\x2\x2\x2\x37Dg\x3\x2\x2"+
		"\x2\x37E\x37F\t\x6\x2\x2\x37Fi\x3\x2\x2\x2\x380\x381\x5\x176\xBC\x2\x381"+
		"k\x3\x2\x2\x2\x382\x384\a\xB7\x2\x2\x383\x385\x5\x1B6\xDC\x2\x384\x383"+
		"\x3\x2\x2\x2\x384\x385\x3\x2\x2\x2\x385\x386\x3\x2\x2\x2\x386\x388\a\xD6"+
		"\x2\x2\x387\x389\x5\x1B6\xDC\x2\x388\x387\x3\x2\x2\x2\x388\x389\x3\x2"+
		"\x2\x2\x389\x38A\x3\x2\x2\x2\x38A\x38C\x5n\x38\x2\x38B\x38D\x5\x1B6\xDC"+
		"\x2\x38C\x38B\x3\x2\x2\x2\x38C\x38D\x3\x2\x2\x2\x38D\x38E\x3\x2\x2\x2"+
		"\x38E\x38F\a\xDD\x2\x2\x38Fm\x3\x2\x2\x2\x390\x391\x5\x176\xBC\x2\x391"+
		"o\x3\x2\x2\x2\x392\x397\a\xBD\x2\x2\x393\x395\x5\x1B6\xDC\x2\x394\x393"+
		"\x3\x2\x2\x2\x394\x395\x3\x2\x2\x2\x395\x396\x3\x2\x2\x2\x396\x398\x5"+
		"r:\x2\x397\x394\x3\x2\x2\x2\x397\x398\x3\x2\x2\x2\x398q\x3\x2\x2\x2\x399"+
		"\x39B\a\xD6\x2\x2\x39A\x39C\x5\x1B6\xDC\x2\x39B\x39A\x3\x2\x2\x2\x39B"+
		"\x39C\x3\x2\x2\x2\x39C\x39D\x3\x2\x2\x2\x39D\x39F\x5t;\x2\x39E\x3A0\x5"+
		"\x1B6\xDC\x2\x39F\x39E\x3\x2\x2\x2\x39F\x3A0\x3\x2\x2\x2\x3A0\x3A1\x3"+
		"\x2\x2\x2\x3A1\x3A2\a\xDD\x2\x2\x3A2s\x3\x2\x2\x2\x3A3\x3A4\x5\x176\xBC"+
		"\x2\x3A4u\x3\x2\x2\x2\x3A5\x3A6\a\xCD\x2\x2\x3A6\x3A7\x5\x1B6\xDC\x2\x3A7"+
		"\x3A9\x5\x38\x1D\x2\x3A8\x3AA\x5\x1B6\xDC\x2\x3A9\x3A8\x3\x2\x2\x2\x3A9"+
		"\x3AA\x3\x2\x2\x2\x3AA\x3AB\x3\x2\x2\x2\x3AB\x3B0\a)\x2\x2\x3AC\x3AE\x5"+
		"\x1B6\xDC\x2\x3AD\x3AC\x3\x2\x2\x2\x3AD\x3AE\x3\x2\x2\x2\x3AE\x3AF\x3"+
		"\x2\x2\x2\x3AF\x3B1\x5\x62\x32\x2\x3B0\x3AD\x3\x2\x2\x2\x3B0\x3B1\x3\x2"+
		"\x2\x2\x3B1w\x3\x2\x2\x2\x3B2\x3B3\a{\x2\x2\x3B3\x3B4\x5\x1B6\xDC\x2\x3B4"+
		"\x3B6\x5\x38\x1D\x2\x3B5\x3B7\x5\x1B6\xDC\x2\x3B6\x3B5\x3\x2\x2\x2\x3B6"+
		"\x3B7\x3\x2\x2\x2\x3B7\x3B8\x3\x2\x2\x2\x3B8\x3BA\a)\x2\x2\x3B9\x3BB\x5"+
		"\x1B6\xDC\x2\x3BA\x3B9\x3\x2\x2\x2\x3BA\x3BB\x3\x2\x2\x2\x3BB\x3BC\x3"+
		"\x2\x2\x2\x3BC\x3BD\x5z>\x2\x3BDy\x3\x2\x2\x2\x3BE\x3C9\x5|?\x2\x3BF\x3C1"+
		"\x5\x1B6\xDC\x2\x3C0\x3BF\x3\x2\x2\x2\x3C0\x3C1\x3\x2\x2\x2\x3C1\x3C2"+
		"\x3\x2\x2\x2\x3C2\x3C4\a)\x2\x2\x3C3\x3C5\x5\x1B6\xDC\x2\x3C4\x3C3\x3"+
		"\x2\x2\x2\x3C4\x3C5\x3\x2\x2\x2\x3C5\x3C6\x3\x2\x2\x2\x3C6\x3C8\x5|?\x2"+
		"\x3C7\x3C0\x3\x2\x2\x2\x3C8\x3CB\x3\x2\x2\x2\x3C9\x3C7\x3\x2\x2\x2\x3C9"+
		"\x3CA\x3\x2\x2\x2\x3CA{\x3\x2\x2\x2\x3CB\x3C9\x3\x2\x2\x2\x3CC\x3CD\x5"+
		"\x176\xBC\x2\x3CD}\x3\x2\x2\x2\x3CE\x3CF\a\xA7\x2\x2\x3CF\x3D0\x5\x1B6"+
		"\xDC\x2\x3D0\x3D2\x5\x36\x1C\x2\x3D1\x3D3\x5\x1B6\xDC\x2\x3D2\x3D1\x3"+
		"\x2\x2\x2\x3D2\x3D3\x3\x2\x2\x2\x3D3\x3D4\x3\x2\x2\x2\x3D4\x3D6\a)\x2"+
		"\x2\x3D5\x3D7\x5\x1B6\xDC\x2\x3D6\x3D5\x3\x2\x2\x2\x3D6\x3D7\x3\x2\x2"+
		"\x2\x3D7\x3D9\x3\x2\x2\x2\x3D8\x3DA\x5\x80\x41\x2\x3D9\x3D8\x3\x2\x2\x2"+
		"\x3D9\x3DA\x3\x2\x2\x2\x3DA\x3DC\x3\x2\x2\x2\x3DB\x3DD\x5\x1B6\xDC\x2"+
		"\x3DC\x3DB\x3\x2\x2\x2\x3DC\x3DD\x3\x2\x2\x2\x3DD\x3DE\x3\x2\x2\x2\x3DE"+
		"\x3E0\a)\x2\x2\x3DF\x3E1\x5\x1B6\xDC\x2\x3E0\x3DF\x3\x2\x2\x2\x3E0\x3E1"+
		"\x3\x2\x2\x2\x3E1\x3E2\x3\x2\x2\x2\x3E2\x3E3\x5\x82\x42\x2\x3E3\x7F\x3"+
		"\x2\x2\x2\x3E4\x3E5\x5\x176\xBC\x2\x3E5\x81\x3\x2\x2\x2\x3E6\x3E7\x5\x176"+
		"\xBC\x2\x3E7\x83\x3\x2\x2\x2\x3E8\x3E9\as\x2\x2\x3E9\x3EA\x5\x1B6\xDC"+
		"\x2\x3EA\x3EC\x5\x36\x1C\x2\x3EB\x3ED\x5\x1B6\xDC\x2\x3EC\x3EB\x3\x2\x2"+
		"\x2\x3EC\x3ED\x3\x2\x2\x2\x3ED\x3EE\x3\x2\x2\x2\x3EE\x3F0\a)\x2\x2\x3EF"+
		"\x3F1\x5\x1B6\xDC\x2\x3F0\x3EF\x3\x2\x2\x2\x3F0\x3F1\x3\x2\x2\x2\x3F1"+
		"\x3F3\x3\x2\x2\x2\x3F2\x3F4\x5\x80\x41\x2\x3F3\x3F2\x3\x2\x2\x2\x3F3\x3F4"+
		"\x3\x2\x2\x2\x3F4\x3F6\x3\x2\x2\x2\x3F5\x3F7\x5\x1B6\xDC\x2\x3F6\x3F5"+
		"\x3\x2\x2\x2\x3F6\x3F7\x3\x2\x2\x2\x3F7\x3F8\x3\x2\x2\x2\x3F8\x3FA\a)"+
		"\x2\x2\x3F9\x3FB\x5\x1B6\xDC\x2\x3FA\x3F9\x3\x2\x2\x2\x3FA\x3FB\x3\x2"+
		"\x2\x2\x3FB\x3FC\x3\x2\x2\x2\x3FC\x3FD\x5\x86\x44\x2\x3FD\x85\x3\x2\x2"+
		"\x2\x3FE\x3FF\x5\x176\xBC\x2\x3FF\x87\x3\x2\x2\x2\x400\x401\x5\x174\xBB"+
		"\x2\x401\x402\x5\x1B6\xDC\x2\x402\x404\x3\x2\x2\x2\x403\x400\x3\x2\x2"+
		"\x2\x403\x404\x3\x2\x2\x2\x404\x405\x3\x2\x2\x2\x405\x406\a\x44\x2\x2"+
		"\x406\x407\x5\x1B6\xDC\x2\x407\x412\x5\x8A\x46\x2\x408\x40A\x5\x1B6\xDC"+
		"\x2\x409\x408\x3\x2\x2\x2\x409\x40A\x3\x2\x2\x2\x40A\x40B\x3\x2\x2\x2"+
		"\x40B\x40D\a)\x2\x2\x40C\x40E\x5\x1B6\xDC\x2\x40D\x40C\x3\x2\x2\x2\x40D"+
		"\x40E\x3\x2\x2\x2\x40E\x40F\x3\x2\x2\x2\x40F\x411\x5\x8A\x46\x2\x410\x409"+
		"\x3\x2\x2\x2\x411\x414\x3\x2\x2\x2\x412\x410\x3\x2\x2\x2\x412\x413\x3"+
		"\x2\x2\x2\x413\x89\x3\x2\x2\x2\x414\x412\x3\x2\x2\x2\x415\x419\x5\x152"+
		"\xAA\x2\x416\x417\x5\x1B6\xDC\x2\x417\x418\x5\x15E\xB0\x2\x418\x41A\x3"+
		"\x2\x2\x2\x419\x416\x3\x2\x2\x2\x419\x41A\x3\x2\x2\x2\x41A\x41C\x3\x2"+
		"\x2\x2\x41B\x41D\x5\x1B6\xDC\x2\x41C\x41B\x3\x2\x2\x2\x41C\x41D\x3\x2"+
		"\x2\x2\x41D\x41E\x3\x2\x2\x2\x41E\x420\a\xD2\x2\x2\x41F\x421\x5\x1B6\xDC"+
		"\x2\x420\x41F\x3\x2\x2\x2\x420\x421\x3\x2\x2\x2\x421\x422\x3\x2\x2\x2"+
		"\x422\x423\x5\x176\xBC\x2\x423\x8B\x3\x2\x2\x2\x424\x425\x5\x174\xBB\x2"+
		"\x425\x426\x5\x1B6\xDC\x2\x426\x428\x3\x2\x2\x2\x427\x424\x3\x2\x2\x2"+
		"\x427\x428\x3\x2\x2\x2\x428\x429\x3\x2\x2\x2\x429\x42A\aG\x2\x2\x42A\x42D"+
		"\x5\x1B6\xDC\x2\x42B\x42C\a\xA5\x2\x2\x42C\x42E\x5\x1B6\xDC\x2\x42D\x42B"+
		"\x3\x2\x2\x2\x42D\x42E\x3\x2\x2\x2\x42E\x42F\x3\x2\x2\x2\x42F\x430\t\a"+
		"\x2\x2\x430\x431\x5\x1B6\xDC\x2\x431\x432\x5\x152\xAA\x2\x432\x433\x5"+
		"\x1B6\xDC\x2\x433\x434\a\x82\x2\x2\x434\x435\x5\x1B6\xDC\x2\x435\x43B"+
		"\a\xE0\x2\x2\x436\x437\x5\x1B6\xDC\x2\x437\x438\a\x35\x2\x2\x438\x439"+
		"\x5\x1B6\xDC\x2\x439\x43A\a\xE0\x2\x2\x43A\x43C\x3\x2\x2\x2\x43B\x436"+
		"\x3\x2\x2\x2\x43B\x43C\x3\x2\x2\x2\x43C\x441\x3\x2\x2\x2\x43D\x43F\x5"+
		"\x1B6\xDC\x2\x43E\x43D\x3\x2\x2\x2\x43E\x43F\x3\x2\x2\x2\x43F\x440\x3"+
		"\x2\x2\x2\x440\x442\x5\x8EH\x2\x441\x43E\x3\x2\x2\x2\x441\x442\x3\x2\x2"+
		"\x2\x442\x446\x3\x2\x2\x2\x443\x444\x5\x1B6\xDC\x2\x444\x445\x5\x15E\xB0"+
		"\x2\x445\x447\x3\x2\x2\x2\x446\x443\x3\x2\x2\x2\x446\x447\x3\x2\x2\x2"+
		"\x447\x8D\x3\x2\x2\x2\x448\x45A\a\xD6\x2\x2\x449\x44B\x5\x1B6\xDC\x2\x44A"+
		"\x449\x3\x2\x2\x2\x44A\x44B\x3\x2\x2\x2\x44B\x44C\x3\x2\x2\x2\x44C\x457"+
		"\x5\x90I\x2\x44D\x44F\x5\x1B6\xDC\x2\x44E\x44D\x3\x2\x2\x2\x44E\x44F\x3"+
		"\x2\x2\x2\x44F\x450\x3\x2\x2\x2\x450\x452\a)\x2\x2\x451\x453\x5\x1B6\xDC"+
		"\x2\x452\x451\x3\x2\x2\x2\x452\x453\x3\x2\x2\x2\x453\x454\x3\x2\x2\x2"+
		"\x454\x456\x5\x90I\x2\x455\x44E\x3\x2\x2\x2\x456\x459\x3\x2\x2\x2\x457"+
		"\x455\x3\x2\x2\x2\x457\x458\x3\x2\x2\x2\x458\x45B\x3\x2\x2\x2\x459\x457"+
		"\x3\x2\x2\x2\x45A\x44A\x3\x2\x2\x2\x45A\x45B\x3\x2\x2\x2\x45B\x45D\x3"+
		"\x2\x2\x2\x45C\x45E\x5\x1B6\xDC\x2\x45D\x45C\x3\x2\x2\x2\x45D\x45E\x3"+
		"\x2\x2\x2\x45E\x45F\x3\x2\x2\x2\x45F\x460\a\xDD\x2\x2\x460\x8F\x3\x2\x2"+
		"\x2\x461\x462\a\x97\x2\x2\x462\x464\x5\x1B6\xDC\x2\x463\x461\x3\x2\x2"+
		"\x2\x463\x464\x3\x2\x2\x2\x464\x467\x3\x2\x2\x2\x465\x466\t\b\x2\x2\x466"+
		"\x468\x5\x1B6\xDC\x2\x467\x465\x3\x2\x2\x2\x467\x468\x3\x2\x2\x2\x468"+
		"\x46B\x3\x2\x2\x2\x469\x46A\a\x9E\x2\x2\x46A\x46C\x5\x1B6\xDC\x2\x46B"+
		"\x469\x3\x2\x2\x2\x46B\x46C\x3\x2\x2\x2\x46C\x46D\x3\x2\x2\x2\x46D\x476"+
		"\x5\x150\xA9\x2\x46E\x470\x5\x1B6\xDC\x2\x46F\x46E\x3\x2\x2\x2\x46F\x470"+
		"\x3\x2\x2\x2\x470\x471\x3\x2\x2\x2\x471\x473\a\xD6\x2\x2\x472\x474\x5"+
		"\x1B6\xDC\x2\x473\x472\x3\x2\x2\x2\x473\x474\x3\x2\x2\x2\x474\x475\x3"+
		"\x2\x2\x2\x475\x477\a\xDD\x2\x2\x476\x46F\x3\x2\x2\x2\x476\x477\x3\x2"+
		"\x2\x2\x477\x47C\x3\x2\x2\x2\x478\x47A\x5\x1B6\xDC\x2\x479\x478\x3\x2"+
		"\x2\x2\x479\x47A\x3\x2\x2\x2\x47A\x47B\x3\x2\x2\x2\x47B\x47D\x5\x15E\xB0"+
		"\x2\x47C\x479\x3\x2\x2\x2\x47C\x47D\x3\x2\x2\x2\x47D\x482\x3\x2\x2\x2"+
		"\x47E\x480\x5\x1B6\xDC\x2\x47F\x47E\x3\x2\x2\x2\x47F\x480\x3\x2\x2\x2"+
		"\x480\x481\x3\x2\x2\x2\x481\x483\x5\x92J\x2\x482\x47F\x3\x2\x2\x2\x482"+
		"\x483\x3\x2\x2\x2\x483\x91\x3\x2\x2\x2\x484\x486\a\xD2\x2\x2\x485\x487"+
		"\x5\x1B6\xDC\x2\x486\x485\x3\x2\x2\x2\x486\x487\x3\x2\x2\x2\x487\x488"+
		"\x3\x2\x2\x2\x488\x489\x5\x176\xBC\x2\x489\x93\x3\x2\x2\x2\x48A\x48B\x5"+
		"\x96L\x2\x48B\x48C\x5\x1B6\xDC\x2\x48C\x497\x5\x98M\x2\x48D\x48F\x5\x1B6"+
		"\xDC\x2\x48E\x48D\x3\x2\x2\x2\x48E\x48F\x3\x2\x2\x2\x48F\x490\x3\x2\x2"+
		"\x2\x490\x492\a)\x2\x2\x491\x493\x5\x1B6\xDC\x2\x492\x491\x3\x2\x2\x2"+
		"\x492\x493\x3\x2\x2\x2\x493\x494\x3\x2\x2\x2\x494\x496\x5\x98M\x2\x495"+
		"\x48E\x3\x2\x2\x2\x496\x499\x3\x2\x2\x2\x497\x495\x3\x2\x2\x2\x497\x498"+
		"\x3\x2\x2\x2\x498\x95\x3\x2\x2\x2\x499\x497\x3\x2\x2\x2\x49A\x49B\t\t"+
		"\x2\x2\x49B\x97\x3\x2\x2\x2\x49C\x4A0\x5\x9AN\x2\x49D\x4A0\x5\x9CO\x2"+
		"\x49E\x4A0\x5\xA2R\x2\x49F\x49C\x3\x2\x2\x2\x49F\x49D\x3\x2\x2\x2\x49F"+
		"\x49E\x3\x2\x2\x2\x4A0\x99\x3\x2\x2\x2\x4A1\x4A2\x5\x150\xA9\x2\x4A2\x9B"+
		"\x3\x2\x2\x2\x4A3\x4A5\x5\x9EP\x2\x4A4\x4A6\x5\x1B6\xDC\x2\x4A5\x4A4\x3"+
		"\x2\x2\x2\x4A5\x4A6\x3\x2\x2\x2\x4A6\x4A7\x3\x2\x2\x2\x4A7\x4A9\a\xD8"+
		"\x2\x2\x4A8\x4AA\x5\x1B6\xDC\x2\x4A9\x4A8\x3\x2\x2\x2\x4A9\x4AA\x3\x2"+
		"\x2\x2\x4AA\x4AB\x3\x2\x2\x2\x4AB\x4AC\x5\xA0Q\x2\x4AC\x9D\x3\x2\x2\x2"+
		"\x4AD\x4AE\x6P\x2\x2\x4AE\x4AF\x5\x150\xA9\x2\x4AF\x9F\x3\x2\x2\x2\x4B0"+
		"\x4B1\x6Q\x3\x2\x4B1\x4B2\x5\x150\xA9\x2\x4B2\xA1\x3\x2\x2\x2\x4B3\x4B5"+
		"\x5\xA4S\x2\x4B4\x4B6\x5\x1B6\xDC\x2\x4B5\x4B4\x3\x2\x2\x2\x4B5\x4B6\x3"+
		"\x2\x2\x2\x4B6\x4B7\x3\x2\x2\x2\x4B7\x4B9\a\xD8\x2\x2\x4B8\x4BA\x5\x1B6"+
		"\xDC\x2\x4B9\x4B8\x3\x2\x2\x2\x4B9\x4BA\x3\x2\x2\x2\x4BA\x4BB\x3\x2\x2"+
		"\x2\x4BB\x4BC\x5\xA6T\x2\x4BC\xA3\x3\x2\x2\x2\x4BD\x4BE\x5\x150\xA9\x2"+
		"\x4BE\xA5\x3\x2\x2\x2\x4BF\x4C0\x5\x150\xA9\x2\x4C0\xA7\x3\x2\x2\x2\x4C1"+
		"\x4C2\aV\x2\x2\x4C2\x4C3\x5\x1A0\xD1\x2\x4C3\x4C4\x5\x1E\x10\x2\x4C4\x4C5"+
		"\a\x80\x2\x2\x4C5\x4D9\x3\x2\x2\x2\x4C6\x4C7\aV\x2\x2\x4C7\x4C8\x5\x1B6"+
		"\xDC\x2\x4C8\x4C9\t\n\x2\x2\x4C9\x4CA\x5\x1B6\xDC\x2\x4CA\x4CB\x5\x176"+
		"\xBC\x2\x4CB\x4CC\x5\x1A0\xD1\x2\x4CC\x4CD\x5\x1E\x10\x2\x4CD\x4CE\a\x80"+
		"\x2\x2\x4CE\x4D9\x3\x2\x2\x2\x4CF\x4D0\aV\x2\x2\x4D0\x4D1\x5\x1A0\xD1"+
		"\x2\x4D1\x4D2\x5\x1E\x10\x2\x4D2\x4D3\a\x80\x2\x2\x4D3\x4D4\x5\x1B6\xDC"+
		"\x2\x4D4\x4D5\t\n\x2\x2\x4D5\x4D6\x5\x1B6\xDC\x2\x4D6\x4D7\x5\x176\xBC"+
		"\x2\x4D7\x4D9\x3\x2\x2\x2\x4D8\x4C1\x3\x2\x2\x2\x4D8\x4C6\x3\x2\x2\x2"+
		"\x4D8\x4CF\x3\x2\x2\x2\x4D9\xA9\x3\x2\x2\x2\x4DA\x4DB\x5\x174\xBB\x2\x4DB"+
		"\x4DC\x5\x1B6\xDC\x2\x4DC\x4DE\x3\x2\x2\x2\x4DD\x4DA\x3\x2\x2\x2\x4DD"+
		"\x4DE\x3\x2\x2\x2\x4DE\x4DF\x3\x2\x2\x2\x4DF\x4E0\a\x65\x2\x2\x4E0\x4E1"+
		"\x5\x1B6\xDC\x2\x4E1\x4E2\x5\x152\xAA\x2\x4E2\x4E6\x5\x1A0\xD1\x2\x4E3"+
		"\x4E5\x5\xACW\x2\x4E4\x4E3\x3\x2\x2\x2\x4E5\x4E8\x3\x2\x2\x2\x4E6\x4E4"+
		"\x3\x2\x2\x2\x4E6\x4E7\x3\x2\x2\x2\x4E7\x4E9\x3\x2\x2\x2\x4E8\x4E6\x3"+
		"\x2\x2\x2\x4E9\x4EA\a\\\x2\x2\x4EA\xAB\x3\x2\x2\x2\x4EB\x4F4\x5\x152\xAA"+
		"\x2\x4EC\x4EE\x5\x1B6\xDC\x2\x4ED\x4EC\x3\x2\x2\x2\x4ED\x4EE\x3\x2\x2"+
		"\x2\x4EE\x4EF\x3\x2\x2\x2\x4EF\x4F1\a\xD2\x2\x2\x4F0\x4F2\x5\x1B6\xDC"+
		"\x2\x4F1\x4F0\x3\x2\x2\x2\x4F1\x4F2\x3\x2\x2\x2\x4F2\x4F3\x3\x2\x2\x2"+
		"\x4F3\x4F5\x5\x176\xBC\x2\x4F4\x4ED\x3\x2\x2\x2\x4F4\x4F5\x3\x2\x2\x2"+
		"\x4F5\x4F6\x3\x2\x2\x2\x4F6\x4F7\x5\x1A0\xD1\x2\x4F7\xAD\x3\x2\x2\x2\x4F8"+
		"\x4F9\a\x64\x2\x2\x4F9\xAF\x3\x2\x2\x2\x4FA\x4FB\ag\x2\x2\x4FB\x4FC\x5"+
		"\x1B6\xDC\x2\x4FC\x507\x5\x176\xBC\x2\x4FD\x4FF\x5\x1B6\xDC\x2\x4FE\x4FD"+
		"\x3\x2\x2\x2\x4FE\x4FF\x3\x2\x2\x2\x4FF\x500\x3\x2\x2\x2\x500\x502\a)"+
		"\x2\x2\x501\x503\x5\x1B6\xDC\x2\x502\x501\x3\x2\x2\x2\x502\x503\x3\x2"+
		"\x2\x2\x503\x504\x3\x2\x2\x2\x504\x506\x5\x176\xBC\x2\x505\x4FE\x3\x2"+
		"\x2\x2\x506\x509\x3\x2\x2\x2\x507\x505\x3\x2\x2\x2\x507\x508\x3\x2\x2"+
		"\x2\x508\xB1\x3\x2\x2\x2\x509\x507\x3\x2\x2\x2\x50A\x50B\ah\x2\x2\x50B"+
		"\x50C\x5\x1B6\xDC\x2\x50C\x50D\x5\x176\xBC\x2\x50D\xB3\x3\x2\x2\x2\x50E"+
		"\x50F\x5\x174\xBB\x2\x50F\x510\x5\x1B6\xDC\x2\x510\x512\x3\x2\x2\x2\x511"+
		"\x50E\x3\x2\x2\x2\x511\x512\x3\x2\x2\x2\x512\x513\x3\x2\x2\x2\x513\x514"+
		"\ai\x2\x2\x514\x515\x5\x1B6\xDC\x2\x515\x517\x5\x152\xAA\x2\x516\x518"+
		"\x5\x1B6\xDC\x2\x517\x516\x3\x2\x2\x2\x517\x518\x3\x2\x2\x2\x518\x519"+
		"\x3\x2\x2\x2\x519\x51A\x5\x8EH\x2\x51A\xB5\x3\x2\x2\x2\x51B\x51C\t\v\x2"+
		"\x2\x51C\xB7\x3\x2\x2\x2\x51D\x51E\aq\x2\x2\x51E\x51F\x5\x1B6\xDC\x2\x51F"+
		"\x520\aX\x2\x2\x520\x521\x5\x1B6\xDC\x2\x521\x522\x5\x176\xBC\x2\x522"+
		"\x523\x5\x1B6\xDC\x2\x523\x524\az\x2\x2\x524\x525\x5\x1B6\xDC\x2\x525"+
		"\x526\x5\x176\xBC\x2\x526\x527\x5\x1A0\xD1\x2\x527\x528\x5\x1E\x10\x2"+
		"\x528\x52C\a\x8D\x2\x2\x529\x52A\x5\x1B6\xDC\x2\x52A\x52B\x5\x176\xBC"+
		"\x2\x52B\x52D\x3\x2\x2\x2\x52C\x529\x3\x2\x2\x2\x52C\x52D\x3\x2\x2\x2"+
		"\x52D\xB9\x3\x2\x2\x2\x52E\x52F\aq\x2\x2\x52F\x530\x5\x1B6\xDC\x2\x530"+
		"\x531\x5\x176\xBC\x2\x531\x532\x5\x1B6\xDC\x2\x532\x533\a\xC0\x2\x2\x533"+
		"\x534\x5\x1B6\xDC\x2\x534\x53A\x5\x176\xBC\x2\x535\x536\x5\x1B6\xDC\x2"+
		"\x536\x537\a\xB9\x2\x2\x537\x538\x5\x1B6\xDC\x2\x538\x539\x5\x176\xBC"+
		"\x2\x539\x53B\x3\x2\x2\x2\x53A\x535\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2"+
		"\x53B\x53C\x3\x2\x2\x2\x53C\x53D\x5\x1A0\xD1\x2\x53D\x53E\x5\x1E\x10\x2"+
		"\x53E\x542\a\x8D\x2\x2\x53F\x540\x5\x1B6\xDC\x2\x540\x541\x5\x176\xBC"+
		"\x2\x541\x543\x3\x2\x2\x2\x542\x53F\x3\x2\x2\x2\x542\x543\x3\x2\x2\x2"+
		"\x543\xBB\x3\x2\x2\x2\x544\x545\x5\x174\xBB\x2\x545\x546\x5\x1B6\xDC\x2"+
		"\x546\x548\x3\x2\x2\x2\x547\x544\x3\x2\x2\x2\x547\x548\x3\x2\x2\x2\x548"+
		"\x54B\x3\x2\x2\x2\x549\x54A\a\xB8\x2\x2\x54A\x54C\x5\x1B6\xDC\x2\x54B"+
		"\x549\x3\x2\x2\x2\x54B\x54C\x3\x2\x2\x2\x54C\x54D\x3\x2\x2\x2\x54D\x54F"+
		"\ar\x2\x2\x54E\x550\x5\x1B6\xDC\x2\x54F\x54E\x3\x2\x2\x2\x54F\x550\x3"+
		"\x2\x2\x2\x550\x551\x3\x2\x2\x2\x551\x556\x5\xBE`\x2\x552\x554\x5\x1B6"+
		"\xDC\x2\x553\x552\x3\x2\x2\x2\x553\x554\x3\x2\x2\x2\x554\x555\x3\x2\x2"+
		"\x2\x555\x557\x5\x8EH\x2\x556\x553\x3\x2\x2\x2\x556\x557\x3\x2\x2\x2\x557"+
		"\x55C\x3\x2\x2\x2\x558\x55A\x5\x1B6\xDC\x2\x559\x558\x3\x2\x2\x2\x559"+
		"\x55A\x3\x2\x2\x2\x55A\x55B\x3\x2\x2\x2\x55B\x55D\x5\x15E\xB0\x2\x55C"+
		"\x559\x3\x2\x2\x2\x55C\x55D\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x55F"+
		"\x5\x1A0\xD1\x2\x55F\x560\x5\x1E\x10\x2\x560\x561\a]\x2\x2\x561\xBD\x3"+
		"\x2\x2\x2\x562\x563\x5\x152\xAA\x2\x563\xBF\x3\x2\x2\x2\x564\x565\au\x2"+
		"\x2\x565\x566\x5\x1B6\xDC\x2\x566\x567\x5\x176\xBC\x2\x567\xC1\x3\x2\x2"+
		"\x2\x568\x569\av\x2\x2\x569\x56A\x5\x1B6\xDC\x2\x56A\x56B\x5\x176\xBC"+
		"\x2\x56B\xC3\x3\x2\x2\x2\x56C\x56D\aw\x2\x2\x56D\x56E\x5\x1B6\xDC\x2\x56E"+
		"\x56F\x5\xD6l\x2\x56F\x570\x5\x1B6\xDC\x2\x570\x571\a\xBF\x2\x2\x571\x572"+
		"\x5\x1A0\xD1\x2\x572\x576\x5\x1E\x10\x2\x573\x575\x5\xC6\x64\x2\x574\x573"+
		"\x3\x2\x2\x2\x575\x578\x3\x2\x2\x2\x576\x574\x3\x2\x2\x2\x576\x577\x3"+
		"\x2\x2\x2\x577\x57A\x3\x2\x2\x2\x578\x576\x3\x2\x2\x2\x579\x57B\x5\xC8"+
		"\x65\x2\x57A\x579\x3\x2\x2\x2\x57A\x57B\x3\x2\x2\x2\x57B\x57C\x3\x2\x2"+
		"\x2\x57C\x57D\a^\x2\x2\x57D\xC5\x3\x2\x2\x2\x57E\x57F\aZ\x2\x2\x57F\x580"+
		"\x5\x1B6\xDC\x2\x580\x581\x5\xD6l\x2\x581\x582\x5\x1B6\xDC\x2\x582\x583"+
		"\a\xBF\x2\x2\x583\x584\x5\x1A0\xD1\x2\x584\x585\x5\x1E\x10\x2\x585\x591"+
		"\x3\x2\x2\x2\x586\x587\aZ\x2\x2\x587\x588\x5\x1B6\xDC\x2\x588\x589\x5"+
		"\xD6l\x2\x589\x58A\x5\x1B6\xDC\x2\x58A\x58C\a\xBF\x2\x2\x58B\x58D\x5\x1B6"+
		"\xDC\x2\x58C\x58B\x3\x2\x2\x2\x58C\x58D\x3\x2\x2\x2\x58D\x58E\x3\x2\x2"+
		"\x2\x58E\x58F\x5\x1E\x10\x2\x58F\x591\x3\x2\x2\x2\x590\x57E\x3\x2\x2\x2"+
		"\x590\x586\x3\x2\x2\x2\x591\xC7\x3\x2\x2\x2\x592\x593\aY\x2\x2\x593\x594"+
		"\x5\x1A0\xD1\x2\x594\x595\x5\x1E\x10\x2\x595\xC9\x3\x2\x2\x2\x596\x599"+
		"\x5\xCCg\x2\x597\x599\x5\xCEh\x2\x598\x596\x3\x2\x2\x2\x598\x597\x3\x2"+
		"\x2\x2\x599\xCB\x3\x2\x2\x2\x59A\x59C\aw\x2\x2\x59B\x59D\x5\x1B6\xDC\x2"+
		"\x59C\x59B\x3\x2\x2\x2\x59C\x59D\x3\x2\x2\x2\x59D\x59E\x3\x2\x2\x2\x59E"+
		"\x5A0\x5\xD6l\x2\x59F\x5A1\x5\x1B6\xDC\x2\x5A0\x59F\x3\x2\x2\x2\x5A0\x5A1"+
		"\x3\x2\x2\x2\x5A1\x5A2\x3\x2\x2\x2\x5A2\x5A4\a\xBF\x2\x2\x5A3\x5A5\x5"+
		"\x1B6\xDC\x2\x5A4\x5A3\x3\x2\x2\x2\x5A4\x5A5\x3\x2\x2\x2\x5A5\x5A6\x3"+
		"\x2\x2\x2\x5A6\x5AA\x5\xD2j\x2\x5A7\x5A8\x5\x1B6\xDC\x2\x5A8\x5A9\x5\xD0"+
		"i\x2\x5A9\x5AB\x3\x2\x2\x2\x5AA\x5A7\x3\x2\x2\x2\x5AA\x5AB\x3\x2\x2\x2"+
		"\x5AB\xCD\x3\x2\x2\x2\x5AC\x5AE\aw\x2\x2\x5AD\x5AF\x5\x1B6\xDC\x2\x5AE"+
		"\x5AD\x3\x2\x2\x2\x5AE\x5AF\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2\x2\x5B0\x5B2"+
		"\x5\xD6l\x2\x5B1\x5B3\x5\x1B6\xDC\x2\x5B2\x5B1\x3\x2\x2\x2\x5B2\x5B3\x3"+
		"\x2\x2\x2\x5B3\x5B4\x3\x2\x2\x2\x5B4\x5B5\a\xBF\x2\x2\x5B5\x5B7\x5\x1A0"+
		"\xD1\x2\x5B6\x5B8\x5\x1B6\xDC\x2\x5B7\x5B6\x3\x2\x2\x2\x5B7\x5B8\x3\x2"+
		"\x2\x2\x5B8\x5B9\x3\x2\x2\x2\x5B9\x5BA\x5\xD0i\x2\x5BA\xCF\x3\x2\x2\x2"+
		"\x5BB\x5BD\aY\x2\x2\x5BC\x5BE\x5\x1B6\xDC\x2\x5BD\x5BC\x3\x2\x2\x2\x5BD"+
		"\x5BE\x3\x2\x2\x2\x5BE\x5C0\x3\x2\x2\x2\x5BF\x5C1\x5\xD2j\x2\x5C0\x5BF"+
		"\x3\x2\x2\x2\x5C0\x5C1\x3\x2\x2\x2\x5C1\xD1\x3\x2\x2\x2\x5C2\x5CF\x5\x16C"+
		"\xB7\x2\x5C3\x5C5\x5\x1B6\xDC\x2\x5C4\x5C3\x3\x2\x2\x2\x5C4\x5C5\x3\x2"+
		"\x2\x2\x5C5\x5C6\x3\x2\x2\x2\x5C6\x5C8\a*\x2\x2\x5C7\x5C9\x5\x1B6\xDC"+
		"\x2\x5C8\x5C7\x3\x2\x2\x2\x5C8\x5C9\x3\x2\x2\x2\x5C9\x5CB\x3\x2\x2\x2"+
		"\x5CA\x5CC\x5\xD4k\x2\x5CB\x5CA\x3\x2\x2\x2\x5CB\x5CC\x3\x2\x2\x2\x5CC"+
		"\x5CE\x3\x2\x2\x2\x5CD\x5C4\x3\x2\x2\x2\x5CE\x5D1\x3\x2\x2\x2\x5CF\x5CD"+
		"\x3\x2\x2\x2\x5CF\x5D0\x3\x2\x2\x2\x5D0\x5E9\x3\x2\x2\x2\x5D1\x5CF\x3"+
		"\x2\x2\x2\x5D2\x5D4\a*\x2\x2\x5D3\x5D5\x5\x1B6\xDC\x2\x5D4\x5D3\x3\x2"+
		"\x2\x2\x5D4\x5D5\x3\x2\x2\x2\x5D5\x5D7\x3\x2\x2\x2\x5D6\x5D2\x3\x2\x2"+
		"\x2\x5D6\x5D7\x3\x2\x2\x2\x5D7\x5D8\x3\x2\x2\x2\x5D8\x5E5\x5\xD4k\x2\x5D9"+
		"\x5DB\x5\x1B6\xDC\x2\x5DA\x5D9\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB"+
		"\x5DC\x3\x2\x2\x2\x5DC\x5DE\a*\x2\x2\x5DD\x5DF\x5\x1B6\xDC\x2\x5DE\x5DD"+
		"\x3\x2\x2\x2\x5DE\x5DF\x3\x2\x2\x2\x5DF\x5E1\x3\x2\x2\x2\x5E0\x5E2\x5"+
		"\xD4k\x2\x5E1\x5E0\x3\x2\x2\x2\x5E1\x5E2\x3\x2\x2\x2\x5E2\x5E4\x3\x2\x2"+
		"\x2\x5E3\x5DA\x3\x2\x2\x2\x5E4\x5E7\x3\x2\x2\x2\x5E5\x5E3\x3\x2\x2\x2"+
		"\x5E5\x5E6\x3\x2\x2\x2\x5E6\x5E9\x3\x2\x2\x2\x5E7\x5E5\x3\x2\x2\x2\x5E8"+
		"\x5C2\x3\x2\x2\x2\x5E8\x5D6\x3\x2\x2\x2\x5E9\xD3\x3\x2\x2\x2\x5EA\x5EB"+
		"\x5 \x11\x2\x5EB\xD5\x3\x2\x2\x2\x5EC\x5ED\x5\x176\xBC\x2\x5ED\xD7\x3"+
		"\x2\x2\x2\x5EE\x5EF\ay\x2\x2\x5EF\x5F0\x5\x1B6\xDC\x2\x5F0\x5F1\x5\x176"+
		"\xBC\x2\x5F1\xD9\x3\x2\x2\x2\x5F2\x5F3\a\x81\x2\x2\x5F3\x5F5\x5\x1B6\xDC"+
		"\x2\x5F4\x5F2\x3\x2\x2\x2\x5F4\x5F5\x3\x2\x2\x2\x5F5\x5F6\x3\x2\x2\x2"+
		"\x5F6\x5F8\x5\x182\xC2\x2\x5F7\x5F9\x5\x1B6\xDC\x2\x5F8\x5F7\x3\x2\x2"+
		"\x2\x5F8\x5F9\x3\x2\x2\x2\x5F9\x5FA\x3\x2\x2\x2\x5FA\x5FC\a\xD2\x2\x2"+
		"\x5FB\x5FD\x5\x1B6\xDC\x2\x5FC\x5FB\x3\x2\x2\x2\x5FC\x5FD\x3\x2\x2\x2"+
		"\x5FD\x5FE\x3\x2\x2\x2\x5FE\x5FF\x5\x176\xBC\x2\x5FF\xDB\x3\x2\x2\x2\x600"+
		"\x601\a\x88\x2\x2\x601\x602\x5\x1B6\xDC\x2\x602\x604\x5\x176\xBC\x2\x603"+
		"\x605\x5\x1B6\xDC\x2\x604\x603\x3\x2\x2\x2\x604\x605\x3\x2\x2\x2\x605"+
		"\x606\x3\x2\x2\x2\x606\x608\a\xD2\x2\x2\x607\x609\x5\x1B6\xDC\x2\x608"+
		"\x607\x3\x2\x2\x2\x608\x609\x3\x2\x2\x2\x609\x60A\x3\x2\x2\x2\x60A\x60B"+
		"\x5\x176\xBC\x2\x60B\xDD\x3\x2\x2\x2\x60C\x60D\t\f\x2\x2\x60D\x616\x5"+
		"\x1B6\xDC\x2\x60E\x60F\av\x2\x2\x60F\x610\x5\x1B6\xDC\x2\x610\x611\x5"+
		"\x176\xBC\x2\x611\x617\x3\x2\x2\x2\x612\x613\a\xAF\x2\x2\x613\x614\x5"+
		"\x1B6\xDC\x2\x614\x615\a\x8D\x2\x2\x615\x617\x3\x2\x2\x2\x616\x60E\x3"+
		"\x2\x2\x2\x616\x612\x3\x2\x2\x2\x617\xDF\x3\x2\x2\x2\x618\x619\a\x93\x2"+
		"\x2\x619\x61A\x5\x1B6\xDC\x2\x61A\x61B\x5\x176\xBC\x2\x61B\x61C\x5\x1B6"+
		"\xDC\x2\x61C\x61D\av\x2\x2\x61D\x61E\x5\x1B6\xDC\x2\x61E\x629\x5\x176"+
		"\xBC\x2\x61F\x621\x5\x1B6\xDC\x2\x620\x61F\x3\x2\x2\x2\x620\x621\x3\x2"+
		"\x2\x2\x621\x622\x3\x2\x2\x2\x622\x624\a)\x2\x2\x623\x625\x5\x1B6\xDC"+
		"\x2\x624\x623\x3\x2\x2\x2\x624\x625\x3\x2\x2\x2\x625\x626\x3\x2\x2\x2"+
		"\x626\x628\x5\x176\xBC\x2\x627\x620\x3\x2\x2\x2\x628\x62B\x3\x2\x2\x2"+
		"\x629\x627\x3\x2\x2\x2\x629\x62A\x3\x2\x2\x2\x62A\xE1\x3\x2\x2\x2\x62B"+
		"\x629\x3\x2\x2\x2\x62C\x62D\a\x93\x2\x2\x62D\x62E\x5\x1B6\xDC\x2\x62E"+
		"\x62F\x5\x176\xBC\x2\x62F\x630\x5\x1B6\xDC\x2\x630\x631\au\x2\x2\x631"+
		"\x632\x5\x1B6\xDC\x2\x632\x63D\x5\x176\xBC\x2\x633\x635\x5\x1B6\xDC\x2"+
		"\x634\x633\x3\x2\x2\x2\x634\x635\x3\x2\x2\x2\x635\x636\x3\x2\x2\x2\x636"+
		"\x638\a)\x2\x2\x637\x639\x5\x1B6\xDC\x2\x638\x637\x3\x2\x2\x2\x638\x639"+
		"\x3\x2\x2\x2\x639\x63A\x3\x2\x2\x2\x63A\x63C\x5\x176\xBC\x2\x63B\x634"+
		"\x3\x2\x2\x2\x63C\x63F\x3\x2\x2\x2\x63D\x63B\x3\x2\x2\x2\x63D\x63E\x3"+
		"\x2\x2\x2\x63E\xE3\x3\x2\x2\x2\x63F\x63D\x3\x2\x2\x2\x640\x641\x5\x174"+
		"\xBB\x2\x641\x642\x5\x1B6\xDC\x2\x642\x644\x3\x2\x2\x2\x643\x640\x3\x2"+
		"\x2\x2\x643\x644\x3\x2\x2\x2\x644\x647\x3\x2\x2\x2\x645\x646\a\xB8\x2"+
		"\x2\x646\x648\x5\x1B6\xDC\x2\x647\x645\x3\x2\x2\x2\x647\x648\x3\x2\x2"+
		"\x2\x648\x649\x3\x2\x2\x2\x649\x64A\a\xA2\x2\x2\x64A\x64B\x5\x1B6\xDC"+
		"\x2\x64B\x650\x5\xBE`\x2\x64C\x64E\x5\x1B6\xDC\x2\x64D\x64C\x3\x2\x2\x2"+
		"\x64D\x64E\x3\x2\x2\x2\x64E\x64F\x3\x2\x2\x2\x64F\x651\x5\x8EH\x2\x650"+
		"\x64D\x3\x2\x2\x2\x650\x651\x3\x2\x2\x2\x651\x655\x3\x2\x2\x2\x652\x653"+
		"\x5\x1B6\xDC\x2\x653\x654\x5\x15E\xB0\x2\x654\x656\x3\x2\x2\x2\x655\x652"+
		"\x3\x2\x2\x2\x655\x656\x3\x2\x2\x2\x656\x657\x3\x2\x2\x2\x657\x658\x5"+
		"\x1A0\xD1\x2\x658\x659\x5\x1E\x10\x2\x659\x65A\a_\x2\x2\x65A\xE5\x3\x2"+
		"\x2\x2\x65B\x65C\x5\x174\xBB\x2\x65C\x65D\x5\x1B6\xDC\x2\x65D\x65F\x3"+
		"\x2\x2\x2\x65E\x65B\x3\x2\x2\x2\x65E\x65F\x3\x2\x2\x2\x65F\x662\x3\x2"+
		"\x2\x2\x660\x661\a\xB8\x2\x2\x661\x663\x5\x1B6\xDC\x2\x662\x660\x3\x2"+
		"\x2\x2\x662\x663\x3\x2\x2\x2\x663\x664\x3\x2\x2\x2\x664\x665\a\xA4\x2"+
		"\x2\x665\x666\x5\x1B6\xDC\x2\x666\x66B\x5\x11A\x8E\x2\x667\x669\x5\x1B6"+
		"\xDC\x2\x668\x667\x3\x2\x2\x2\x668\x669\x3\x2\x2\x2\x669\x66A\x3\x2\x2"+
		"\x2\x66A\x66C\x5\x8EH\x2\x66B\x668\x3\x2\x2\x2\x66B\x66C\x3\x2\x2\x2\x66C"+
		"\x66D\x3\x2\x2\x2\x66D\x66E\x5\x1A0\xD1\x2\x66E\x66F\x5\x1E\x10\x2\x66F"+
		"\x670\a_\x2\x2\x670\xE7\x3\x2\x2\x2\x671\x672\x5\x174\xBB\x2\x672\x673"+
		"\x5\x1B6\xDC\x2\x673\x675\x3\x2\x2\x2\x674\x671\x3\x2\x2\x2\x674\x675"+
		"\x3\x2\x2\x2\x675\x678\x3\x2\x2\x2\x676\x677\a\xB8\x2\x2\x677\x679\x5"+
		"\x1B6\xDC\x2\x678\x676\x3\x2\x2\x2\x678\x679\x3\x2\x2\x2\x679\x67A\x3"+
		"\x2\x2\x2\x67A\x67B\a\xA3\x2\x2\x67B\x67C\x5\x1B6\xDC\x2\x67C\x681\x5"+
		"\x11A\x8E\x2\x67D\x67F\x5\x1B6\xDC\x2\x67E\x67D\x3\x2\x2\x2\x67E\x67F"+
		"\x3\x2\x2\x2\x67F\x680\x3\x2\x2\x2\x680\x682\x5\x8EH\x2\x681\x67E\x3\x2"+
		"\x2\x2\x681\x682\x3\x2\x2\x2\x682\x683\x3\x2\x2\x2\x683\x684\x5\x1A0\xD1"+
		"\x2\x684\x685\x5\x1E\x10\x2\x685\x686\a_\x2\x2\x686\xE9\x3\x2\x2\x2\x687"+
		"\x688\a\xA9\x2\x2\x688\x689\x5\x1B6\xDC\x2\x689\x698\x5\x152\xAA\x2\x68A"+
		"\x68C\x5\x1B6\xDC\x2\x68B\x68A\x3\x2\x2\x2\x68B\x68C\x3\x2\x2\x2\x68C"+
		"\x68D\x3\x2\x2\x2\x68D\x68F\a\xD6\x2\x2\x68E\x690\x5\x1B6\xDC\x2\x68F"+
		"\x68E\x3\x2\x2\x2\x68F\x690\x3\x2\x2\x2\x690\x692\x3\x2\x2\x2\x691\x693"+
		"\x5\xECw\x2\x692\x691\x3\x2\x2\x2\x692\x693\x3\x2\x2\x2\x693\x695\x3\x2"+
		"\x2\x2\x694\x696\x5\x1B6\xDC\x2\x695\x694\x3\x2\x2\x2\x695\x696\x3\x2"+
		"\x2\x2\x696\x697\x3\x2\x2\x2\x697\x699\a\xDD\x2\x2\x698\x68B\x3\x2\x2"+
		"\x2\x698\x699\x3\x2\x2\x2\x699\xEB\x3\x2\x2\x2\x69A\x6A5\x5\xEEx\x2\x69B"+
		"\x69D\x5\x1B6\xDC\x2\x69C\x69B\x3\x2\x2\x2\x69C\x69D\x3\x2\x2\x2\x69D"+
		"\x69E\x3\x2\x2\x2\x69E\x6A0\a)\x2\x2\x69F\x6A1\x5\x1B6\xDC\x2\x6A0\x69F"+
		"\x3\x2\x2\x2\x6A0\x6A1\x3\x2\x2\x2\x6A1\x6A2\x3\x2\x2\x2\x6A2\x6A4\x5"+
		"\xEEx\x2\x6A3\x69C\x3\x2\x2\x2\x6A4\x6A7\x3\x2\x2\x2\x6A5\x6A3\x3\x2\x2"+
		"\x2\x6A5\x6A6\x3\x2\x2\x2\x6A6\xED\x3\x2\x2\x2\x6A7\x6A5\x3\x2\x2\x2\x6A8"+
		"\x6A9\a=\x2\x2\x6A9\x6AB\x5\x1B6\xDC\x2\x6AA\x6A8\x3\x2\x2\x2\x6AA\x6AB"+
		"\x3\x2\x2\x2\x6AB\x6AC\x3\x2\x2\x2\x6AC\x6AD\x5\x176\xBC\x2\x6AD\xEF\x3"+
		"\x2\x2\x2\x6AE\x6AF\a\xAC\x2\x2\x6AF\x6B2\x5\x1B6\xDC\x2\x6B0\x6B1\a\x9F"+
		"\x2\x2\x6B1\x6B3\x5\x1B6\xDC\x2\x6B2\x6B0\x3\x2\x2\x2\x6B2\x6B3\x3\x2"+
		"\x2\x2\x6B3\x6B4\x3\x2\x2\x2\x6B4\x6B5\x5\xF2z\x2\x6B5\xF1\x3\x2\x2\x2"+
		"\x6B6\x6C1\x5\xF4{\x2\x6B7\x6B9\x5\x1B6\xDC\x2\x6B8\x6B7\x3\x2\x2\x2\x6B8"+
		"\x6B9\x3\x2\x2\x2\x6B9\x6BA\x3\x2\x2\x2\x6BA\x6BC\a)\x2\x2\x6BB\x6BD\x5"+
		"\x1B6\xDC\x2\x6BC\x6BB\x3\x2\x2\x2\x6BC\x6BD\x3\x2\x2\x2\x6BD\x6BE\x3"+
		"\x2\x2\x2\x6BE\x6C0\x5\xF4{\x2\x6BF\x6B8\x3\x2\x2\x2\x6C0\x6C3\x3\x2\x2"+
		"\x2\x6C1\x6BF\x3\x2\x2\x2\x6C1\x6C2\x3\x2\x2\x2\x6C2\xF3\x3\x2\x2\x2\x6C3"+
		"\x6C1\x3\x2\x2\x2\x6C4\x6C8\x5\x176\xBC\x2\x6C5\x6C6\x5\x1B6\xDC\x2\x6C6"+
		"\x6C7\x5\x15E\xB0\x2\x6C7\x6C9\x3\x2\x2\x2\x6C8\x6C5\x3\x2\x2\x2\x6C8"+
		"\x6C9\x3\x2\x2\x2\x6C9\xF5\x3\x2\x2\x2\x6CA\x6CB\x5\xF8}\x2\x6CB\x6CD"+
		"\a\xD6\x2\x2\x6CC\x6CE\x5\x1B6\xDC\x2\x6CD\x6CC\x3\x2\x2\x2\x6CD\x6CE"+
		"\x3\x2\x2\x2\x6CE\x6CF\x3\x2\x2\x2\x6CF\x6D1\x5\x182\xC2\x2\x6D0\x6D2"+
		"\x5\x1B6\xDC\x2\x6D1\x6D0\x3\x2\x2\x2\x6D1\x6D2\x3\x2\x2\x2\x6D2\x6D3"+
		"\x3\x2\x2\x2\x6D3\x6D5\a)\x2\x2\x6D4\x6D6\x5\x1B6\xDC\x2\x6D5\x6D4\x3"+
		"\x2\x2\x2\x6D5\x6D6\x3\x2\x2\x2\x6D6\x6D7\x3\x2\x2\x2\x6D7\x6D9\x5\x182"+
		"\xC2\x2\x6D8\x6DA\x5\x1B6\xDC\x2\x6D9\x6D8\x3\x2\x2\x2\x6D9\x6DA\x3\x2"+
		"\x2\x2\x6DA\x6E3\x3\x2\x2\x2\x6DB\x6DD\a)\x2\x2\x6DC\x6DE\x5\x1B6\xDC"+
		"\x2\x6DD\x6DC\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6DF\x3\x2\x2\x2"+
		"\x6DF\x6E1\x5\x182\xC2\x2\x6E0\x6E2\x5\x1B6\xDC\x2\x6E1\x6E0\x3\x2\x2"+
		"\x2\x6E1\x6E2\x3\x2\x2\x2\x6E2\x6E4\x3\x2\x2\x2\x6E3\x6DB\x3\x2\x2\x2"+
		"\x6E3\x6E4\x3\x2\x2\x2\x6E4\x6E5\x3\x2\x2\x2\x6E5\x6E7\a\xDD\x2\x2\x6E6"+
		"\x6E8\x5\x1B6\xDC\x2\x6E7\x6E6\x3\x2\x2\x2\x6E7\x6E8\x3\x2\x2\x2\x6E8"+
		"\x6E9\x3\x2\x2\x2\x6E9\x6EB\a\xCF\x2\x2\x6EA\x6EC\x5\x1B6\xDC\x2\x6EB"+
		"\x6EA\x3\x2\x2\x2\x6EB\x6EC\x3\x2\x2\x2\x6EC\x6ED\x3\x2\x2\x2\x6ED\x6EE"+
		"\x5\x176\xBC\x2\x6EE\xF7\x3\x2\x2\x2\x6EF\x6F1\t\r\x2\x2\x6F0\x6F2\a\x31"+
		"\x2\x2\x6F1\x6F0\x3\x2\x2\x2\x6F1\x6F2\x3\x2\x2\x2\x6F2\xF9\x3\x2\x2\x2"+
		"\x6F3\x6F4\x5\x176\xBC\x2\x6F4\xFB\x3\x2\x2\x2\x6F5\x6F6\a@\x2\x2\x6F6"+
		"\x6F7\x5\x1B6\xDC\x2\x6F7\x6F8\x5\x176\xBC\x2\x6F8\x700\x3\x2\x2\x2\x6F9"+
		"\x6FD\x5\x176\xBC\x2\x6FA\x6FB\x5\x1B6\xDC\x2\x6FB\x6FC\x5\x186\xC4\x2"+
		"\x6FC\x6FE\x3\x2\x2\x2\x6FD\x6FA\x3\x2\x2\x2\x6FD\x6FE\x3\x2\x2\x2\x6FE"+
		"\x700\x3\x2\x2\x2\x6FF\x6F5\x3\x2\x2\x2\x6FF\x6F9\x3\x2\x2\x2\x700\xFD"+
		"\x3\x2\x2\x2\x701\x707\a\xAF\x2\x2\x702\x705\x5\x1B6\xDC\x2\x703\x706"+
		"\a\x8D\x2\x2\x704\x706\x5\x176\xBC\x2\x705\x703\x3\x2\x2\x2\x705\x704"+
		"\x3\x2\x2\x2\x706\x708\x3\x2\x2\x2\x707\x702\x3\x2\x2\x2\x707\x708\x3"+
		"\x2\x2\x2\x708\xFF\x3\x2\x2\x2\x709\x70A\a\xB0\x2\x2\x70A\x101\x3\x2\x2"+
		"\x2\x70B\x70C\a\xB1\x2\x2\x70C\x70D\x5\x1B6\xDC\x2\x70D\x70F\x5\x176\xBC"+
		"\x2\x70E\x710\x5\x1B6\xDC\x2\x70F\x70E\x3\x2\x2\x2\x70F\x710\x3\x2\x2"+
		"\x2\x710\x711\x3\x2\x2\x2\x711\x713\a\xD2\x2\x2\x712\x714\x5\x1B6\xDC"+
		"\x2\x713\x712\x3\x2\x2\x2\x713\x714\x3\x2\x2\x2\x714\x715\x3\x2\x2\x2"+
		"\x715\x716\x5\x176\xBC\x2\x716\x103\x3\x2\x2\x2\x717\x718\a\xBA\x2\x2"+
		"\x718\x105\x3\x2\x2\x2\x719\x71A\a\x8C\x2\x2\x71A\x71B\x5\x1B6\xDC\x2"+
		"\x71B\x71C\x5\x176\xBC\x2\x71C\x71D\x5\x1B6\xDC\x2\x71D\x71E\a\x39\x2"+
		"\x2\x71E\x71F\x5\x1B6\xDC\x2\x71F\x720\x5\x176\xBC\x2\x720\x107\x3\x2"+
		"\x2\x2\x721\x723\a\xB3\x2\x2\x722\x724\x5\x1B6\xDC\x2\x723\x722\x3\x2"+
		"\x2\x2\x723\x724\x3\x2\x2\x2\x724\x725\x3\x2\x2\x2\x725\x727\a\x41\x2"+
		"\x2\x726\x728\x5\x1B6\xDC\x2\x727\x726\x3\x2\x2\x2\x727\x728\x3\x2\x2"+
		"\x2\x728\x729\x3\x2\x2\x2\x729\x72A\x5\x10A\x86\x2\x72A\x72E\x5\x1A0\xD1"+
		"\x2\x72B\x72D\x5\x10C\x87\x2\x72C\x72B\x3\x2\x2\x2\x72D\x730\x3\x2\x2"+
		"\x2\x72E\x72C\x3\x2\x2\x2\x72E\x72F\x3\x2\x2\x2\x72F\x732\x3\x2\x2\x2"+
		"\x730\x72E\x3\x2\x2\x2\x731\x733\x5\x10E\x88\x2\x732\x731\x3\x2\x2\x2"+
		"\x732\x733\x3\x2\x2\x2\x733\x734\x3\x2\x2\x2\x734\x735\a`\x2\x2\x735\x109"+
		"\x3\x2\x2\x2\x736\x737\x5\x176\xBC\x2\x737\x10B\x3\x2\x2\x2\x738\x739"+
		"\a\x41\x2\x2\x739\x73A\x5\x1B6\xDC\x2\x73A\x745\x5\x110\x89\x2\x73B\x73D"+
		"\x5\x1B6\xDC\x2\x73C\x73B\x3\x2\x2\x2\x73C\x73D\x3\x2\x2\x2\x73D\x73E"+
		"\x3\x2\x2\x2\x73E\x740\a)\x2\x2\x73F\x741\x5\x1B6\xDC\x2\x740\x73F\x3"+
		"\x2\x2\x2\x740\x741\x3\x2\x2\x2\x741\x742\x3\x2\x2\x2\x742\x744\x5\x110"+
		"\x89\x2\x743\x73C\x3\x2\x2\x2\x744\x747\x3\x2\x2\x2\x745\x743\x3\x2\x2"+
		"\x2\x745\x746\x3\x2\x2\x2\x746\x748\x3\x2\x2\x2\x747\x745\x3\x2\x2\x2"+
		"\x748\x749\x5\x1A0\xD1\x2\x749\x74A\x5\x1E\x10\x2\x74A\x10D\x3\x2\x2\x2"+
		"\x74B\x74D\a\x41\x2\x2\x74C\x74E\x5\x1B6\xDC\x2\x74D\x74C\x3\x2\x2\x2"+
		"\x74D\x74E\x3\x2\x2\x2\x74E\x74F\x3\x2\x2\x2\x74F\x750\aY\x2\x2\x750\x751"+
		"\x5\x1A0\xD1\x2\x751\x752\x5\x1E\x10\x2\x752\x10F\x3\x2\x2\x2\x753\x755"+
		"\a|\x2\x2\x754\x756\x5\x1B6\xDC\x2\x755\x754\x3\x2\x2\x2\x755\x756\x3"+
		"\x2\x2\x2\x756\x758\x3\x2\x2\x2\x757\x753\x3\x2\x2\x2\x757\x758\x3\x2"+
		"\x2\x2\x758\x759\x3\x2\x2\x2\x759\x75B\x5\x162\xB2\x2\x75A\x75C\x5\x1B6"+
		"\xDC\x2\x75B\x75A\x3\x2\x2\x2\x75B\x75C\x3\x2\x2\x2\x75C\x75D\x3\x2\x2"+
		"\x2\x75D\x75E\x5\x176\xBC\x2\x75E\x767\x3\x2\x2\x2\x75F\x760\x5\x112\x8A"+
		"\x2\x760\x761\x5\x1B6\xDC\x2\x761\x762\a\xC0\x2\x2\x762\x763\x5\x1B6\xDC"+
		"\x2\x763\x764\x5\x114\x8B\x2\x764\x767\x3\x2\x2\x2\x765\x767\x5\x176\xBC"+
		"\x2\x766\x757\x3\x2\x2\x2\x766\x75F\x3\x2\x2\x2\x766\x765\x3\x2\x2\x2"+
		"\x767\x111\x3\x2\x2\x2\x768\x769\x5\x176\xBC\x2\x769\x113\x3\x2\x2\x2"+
		"\x76A\x76B\x5\x176\xBC\x2\x76B\x115\x3\x2\x2\x2\x76C\x76D\a\xB4\x2\x2"+
		"\x76D\x76E\x5\x1B6\xDC\x2\x76E\x770\x5\x182\xC2\x2\x76F\x771\x5\x1B6\xDC"+
		"\x2\x770\x76F\x3\x2\x2\x2\x770\x771\x3\x2\x2\x2\x771\x772\x3\x2\x2\x2"+
		"\x772\x774\a\xD2\x2\x2\x773\x775\x5\x1B6\xDC\x2\x774\x773\x3\x2\x2\x2"+
		"\x774\x775\x3\x2\x2\x2\x775\x776\x3\x2\x2\x2\x776\x777\x5\x176\xBC\x2"+
		"\x777\x117\x3\x2\x2\x2\x778\x779\x5\x174\xBB\x2\x779\x77A\x5\x1B6\xDC"+
		"\x2\x77A\x77C\x3\x2\x2\x2\x77B\x778\x3\x2\x2\x2\x77B\x77C\x3\x2\x2\x2"+
		"\x77C\x77F\x3\x2\x2\x2\x77D\x77E\a\xB8\x2\x2\x77E\x780\x5\x1B6\xDC\x2"+
		"\x77F\x77D\x3\x2\x2\x2\x77F\x780\x3\x2\x2\x2\x780\x781\x3\x2\x2\x2\x781"+
		"\x783\a\xBC\x2\x2\x782\x784\x5\x1B6\xDC\x2\x783\x782\x3\x2\x2\x2\x783"+
		"\x784\x3\x2\x2\x2\x784\x785\x3\x2\x2\x2\x785\x78A\x5\x11A\x8E\x2\x786"+
		"\x788\x5\x1B6\xDC\x2\x787\x786\x3\x2\x2\x2\x787\x788\x3\x2\x2\x2\x788"+
		"\x789\x3\x2\x2\x2\x789\x78B\x5\x8EH\x2\x78A\x787\x3\x2\x2\x2\x78A\x78B"+
		"\x3\x2\x2\x2\x78B\x78C\x3\x2\x2\x2\x78C\x78D\x5\x1A0\xD1\x2\x78D\x78E"+
		"\x5\x1E\x10\x2\x78E\x78F\a\x61\x2\x2\x78F\x119\x3\x2\x2\x2\x790\x791\x5"+
		"\x152\xAA\x2\x791\x11B\x3\x2\x2\x2\x792\x793\t\xE\x2\x2\x793\x795\x5\x1B6"+
		"\xDC\x2\x794\x792\x3\x2\x2\x2\x794\x795\x3\x2\x2\x2\x795\x796\x3\x2\x2"+
		"\x2\x796\x797\x5\x120\x91\x2\x797\x11D\x3\x2\x2\x2\x798\x799\a\xA1\x2"+
		"\x2\x799\x79A\x5\x1B6\xDC\x2\x79A\x79B\x5\x120\x91\x2\x79B\x11F\x3\x2"+
		"\x2\x2\x79C\x79D\a\xC2\x2\x2\x79D\x79E\x5\x1B6\xDC\x2\x79E\x79F\x5\x154"+
		"\xAB\x2\x79F\x7A0\x5\x1A0\xD1\x2\x7A0\x7A1\x5\x122\x92\x2\x7A1\x7A2\x5"+
		"\x1A0\xD1\x2\x7A2\x7A3\a\x62\x2\x2\x7A3\x121\x3\x2\x2\x2\x7A4\x7AA\x5"+
		"\x124\x93\x2\x7A5\x7A6\x5\x1A0\xD1\x2\x7A6\x7A7\x5\x124\x93\x2\x7A7\x7A9"+
		"\x3\x2\x2\x2\x7A8\x7A5\x3\x2\x2\x2\x7A9\x7AC\x3\x2\x2\x2\x7AA\x7A8\x3"+
		"\x2\x2\x2\x7AA\x7AB\x3\x2\x2\x2\x7AB\x123\x3\x2\x2\x2\x7AC\x7AA\x3\x2"+
		"\x2\x2\x7AD\x7B0\x5\x128\x95\x2\x7AE\x7B0\x5\x126\x94\x2\x7AF\x7AD\x3"+
		"\x2\x2\x2\x7AF\x7AE\x3\x2\x2\x2\x7B0\x125\x3\x2\x2\x2\x7B1\x7B3\x5\x154"+
		"\xAB\x2\x7B2\x7B4\x5\x1B6\xDC\x2\x7B3\x7B2\x3\x2\x2\x2\x7B3\x7B4\x3\x2"+
		"\x2\x2\x7B4\x7B5\x3\x2\x2\x2\x7B5\x7B6\x5\x12A\x96\x2\x7B6\x127\x3\x2"+
		"\x2\x2\x7B7\x7B8\x5\x150\xA9\x2\x7B8\x7B9\x5\x1B6\xDC\x2\x7B9\x7BA\x5"+
		"\x15E\xB0\x2\x7BA\x129\x3\x2\x2\x2\x7BB\x7BC\x5\x12C\x97\x2\x7BC\x7BD"+
		"\x5\x1B6\xDC\x2\x7BD\x7BF\x3\x2\x2\x2\x7BE\x7BB\x3\x2\x2\x2\x7BE\x7BF"+
		"\x3\x2\x2\x2\x7BF\x7C0\x3\x2\x2\x2\x7C0\x7C1\x5\x15E\xB0\x2\x7C1\x12B"+
		"\x3\x2\x2\x2\x7C2\x7C4\a\xD6\x2\x2\x7C3\x7C5\x5\x1B6\xDC\x2\x7C4\x7C3"+
		"\x3\x2\x2\x2\x7C4\x7C5\x3\x2\x2\x2\x7C5\x7C7\x3\x2\x2\x2\x7C6\x7C8\x5"+
		"\x12E\x98\x2\x7C7\x7C6\x3\x2\x2\x2\x7C7\x7C8\x3\x2\x2\x2\x7C8\x7CA\x3"+
		"\x2\x2\x2\x7C9\x7CB\x5\x1B6\xDC\x2\x7CA\x7C9\x3\x2\x2\x2\x7CA\x7CB\x3"+
		"\x2\x2\x2\x7CB\x7CC\x3\x2\x2\x2\x7CC\x7CD\a\xDD\x2\x2\x7CD\x12D\x3\x2"+
		"\x2\x2\x7CE\x7D9\x5\x130\x99\x2\x7CF\x7D1\x5\x1B6\xDC\x2\x7D0\x7CF\x3"+
		"\x2\x2\x2\x7D0\x7D1\x3\x2\x2\x2\x7D1\x7D2\x3\x2\x2\x2\x7D2\x7D4\a)\x2"+
		"\x2\x7D3\x7D5\x5\x1B6\xDC\x2\x7D4\x7D3\x3\x2\x2\x2\x7D4\x7D5\x3\x2\x2"+
		"\x2\x7D5\x7D6\x3\x2\x2\x2\x7D6\x7D8\x5\x130\x99\x2\x7D7\x7D0\x3\x2\x2"+
		"\x2\x7D8\x7DB\x3\x2\x2\x2\x7D9\x7D7\x3\x2\x2\x2\x7D9\x7DA\x3\x2\x2\x2"+
		"\x7DA\x12F\x3\x2\x2\x2\x7DB\x7D9\x3\x2\x2\x2\x7DC\x7DE\x5\x132\x9A\x2"+
		"\x7DD\x7DF\x5\x1B6\xDC\x2\x7DE\x7DD\x3\x2\x2\x2\x7DE\x7DF\x3\x2\x2\x2"+
		"\x7DF\x7E1\x3\x2\x2\x2\x7E0\x7DC\x3\x2\x2\x2\x7E0\x7E1\x3\x2\x2\x2\x7E1"+
		"\x7E2\x3\x2\x2\x2\x7E2\x7E3\x5\x134\x9B\x2\x7E3\x131\x3\x2\x2\x2\x7E4"+
		"\x7E6\x5\x136\x9C\x2\x7E5\x7E7\x5\x1B6\xDC\x2\x7E6\x7E5\x3\x2\x2\x2\x7E6"+
		"\x7E7\x3\x2\x2\x2\x7E7\x7E8\x3\x2\x2\x2\x7E8\x7E9\a\xC0\x2\x2\x7E9\x133"+
		"\x3\x2\x2\x2\x7EA\x7EB\x5\x136\x9C\x2\x7EB\x135\x3\x2\x2\x2\x7EC\x7ED"+
		"\x5\x176\xBC\x2\x7ED\x137\x3\x2\x2\x2\x7EE\x7F2\aU\x2\x2\x7EF\x7F2\a\xB8"+
		"\x2\x2\x7F0\x7F2\x5\x174\xBB\x2\x7F1\x7EE\x3\x2\x2\x2\x7F1\x7EF\x3\x2"+
		"\x2\x2\x7F1\x7F0\x3\x2\x2\x2\x7F2\x7F3\x3\x2\x2\x2\x7F3\x7F6\x5\x1B6\xDC"+
		"\x2\x7F4\x7F5\a\xCC\x2\x2\x7F5\x7F7\x5\x1B6\xDC\x2\x7F6\x7F4\x3\x2\x2"+
		"\x2\x7F6\x7F7\x3\x2\x2\x2\x7F7\x7F8\x3\x2\x2\x2\x7F8\x7F9\x5\x13A\x9E"+
		"\x2\x7F9\x139\x3\x2\x2\x2\x7FA\x805\x5\x13C\x9F\x2\x7FB\x7FD\x5\x1B6\xDC"+
		"\x2\x7FC\x7FB\x3\x2\x2\x2\x7FC\x7FD\x3\x2\x2\x2\x7FD\x7FE\x3\x2\x2\x2"+
		"\x7FE\x800\a)\x2\x2\x7FF\x801\x5\x1B6\xDC\x2\x800\x7FF\x3\x2\x2\x2\x800"+
		"\x801\x3\x2\x2\x2\x801\x802\x3\x2\x2\x2\x802\x804\x5\x13C\x9F\x2\x803"+
		"\x7FC\x3\x2\x2\x2\x804\x807\x3\x2\x2\x2\x805\x803\x3\x2\x2\x2\x805\x806"+
		"\x3\x2\x2\x2\x806\x13B\x3\x2\x2\x2\x807\x805\x3\x2\x2\x2\x808\x81A\x5"+
		"\x152\xAA\x2\x809\x80B\x5\x1B6\xDC\x2\x80A\x809\x3\x2\x2\x2\x80A\x80B"+
		"\x3\x2\x2\x2\x80B\x80C\x3\x2\x2\x2\x80C\x80E\a\xD6\x2\x2\x80D\x80F\x5"+
		"\x1B6\xDC\x2\x80E\x80D\x3\x2\x2\x2\x80E\x80F\x3\x2\x2\x2\x80F\x814\x3"+
		"\x2\x2\x2\x810\x812\x5\x14C\xA7\x2\x811\x813\x5\x1B6\xDC\x2\x812\x811"+
		"\x3\x2\x2\x2\x812\x813\x3\x2\x2\x2\x813\x815\x3\x2\x2\x2\x814\x810\x3"+
		"\x2\x2\x2\x814\x815\x3\x2\x2\x2\x815\x816\x3\x2\x2\x2\x816\x818\a\xDD"+
		"\x2\x2\x817\x819\x5\x1B6\xDC\x2\x818\x817\x3\x2\x2\x2\x818\x819\x3\x2"+
		"\x2\x2\x819\x81B\x3\x2\x2\x2\x81A\x80A\x3\x2\x2\x2\x81A\x81B\x3\x2\x2"+
		"\x2\x81B\x81F\x3\x2\x2\x2\x81C\x81D\x5\x1B6\xDC\x2\x81D\x81E\x5\x15E\xB0"+
		"\x2\x81E\x820\x3\x2\x2\x2\x81F\x81C\x3\x2\x2\x2\x81F\x820\x3\x2\x2\x2"+
		"\x820\x13D\x3\x2\x2\x2\x821\x822\a\xC9\x2\x2\x822\x823\x5\x1B6\xDC\x2"+
		"\x823\x824\x5\x176\xBC\x2\x824\x825\x5\x1A0\xD1\x2\x825\x826\x5\x1E\x10"+
		"\x2\x826\x827\a\xC8\x2\x2\x827\x13F\x3\x2\x2\x2\x828\x829\a\xCB\x2\x2"+
		"\x829\x82A\x5\x1B6\xDC\x2\x82A\x82B\x5\x176\xBC\x2\x82B\x82C\x5\x1A0\xD1"+
		"\x2\x82C\x82D\x5\x1E\x10\x2\x82D\x82E\a\x63\x2\x2\x82E\x141\x3\x2\x2\x2"+
		"\x82F\x830\x5\x176\xBC\x2\x830\x835\x5\x1B6\xDC\x2\x831\x833\a\xB9\x2"+
		"\x2\x832\x834\x5\x1B6\xDC\x2\x833\x832\x3\x2\x2\x2\x833\x834\x3\x2\x2"+
		"\x2\x834\x836\x3\x2\x2\x2\x835\x831\x3\x2\x2\x2\x835\x836\x3\x2\x2\x2"+
		"\x836\x837\x3\x2\x2\x2\x837\x838\x5\x148\xA5\x2\x838\x83D\a\xD8\x2\x2"+
		"\x839\x83B\a\xB9\x2\x2\x83A\x83C\x5\x1B6\xDC\x2\x83B\x83A\x3\x2\x2\x2"+
		"\x83B\x83C\x3\x2\x2\x2\x83C\x83E\x3\x2\x2\x2\x83D\x839\x3\x2\x2\x2\x83D"+
		"\x83E\x3\x2\x2\x2\x83E\x83F\x3\x2\x2\x2\x83F\x841\x5\x148\xA5\x2\x840"+
		"\x842\x5\x1B6\xDC\x2\x841\x840\x3\x2\x2\x2\x841\x842\x3\x2\x2\x2\x842"+
		"\x848\x3\x2\x2\x2\x843\x845\a)\x2\x2\x844\x846\x5\x1B6\xDC\x2\x845\x844"+
		"\x3\x2\x2\x2\x845\x846\x3\x2\x2\x2\x846\x847\x3\x2\x2\x2\x847\x849\x5"+
		"\x176\xBC\x2\x848\x843\x3\x2\x2\x2\x848\x849\x3\x2\x2\x2\x849\x84B\x3"+
		"\x2\x2\x2\x84A\x84C\x5\x1B6\xDC\x2\x84B\x84A\x3\x2\x2\x2\x84B\x84C\x3"+
		"\x2\x2\x2\x84C\x852\x3\x2\x2\x2\x84D\x84F\a)\x2\x2\x84E\x850\x5\x1B6\xDC"+
		"\x2\x84F\x84E\x3\x2\x2\x2\x84F\x850\x3\x2\x2\x2\x850\x851\x3\x2\x2\x2"+
		"\x851\x853\x5\x14A\xA6\x2\x852\x84D\x3\x2\x2\x2\x852\x853\x3\x2\x2\x2"+
		"\x853\x143\x3\x2\x2\x2\x854\x856\x5\x176\xBC\x2\x855\x857\x5\x1B6\xDC"+
		"\x2\x856\x855\x3\x2\x2\x2\x856\x857\x3\x2\x2\x2\x857\x858\x3\x2\x2\x2"+
		"\x858\x85A\a-\x2\x2\x859\x85B\x5\x1B6\xDC\x2\x85A\x859\x3\x2\x2\x2\x85A"+
		"\x85B\x3\x2\x2\x2\x85B\x85D\x3\x2\x2\x2\x85C\x854\x3\x2\x2\x2\x85C\x85D"+
		"\x3\x2\x2\x2\x85D\x85E\x3\x2\x2\x2\x85E\x85F\a\xF\x2\x2\x85F\x864\x5\x1B6"+
		"\xDC\x2\x860\x862\a\xB9\x2\x2\x861\x863\x5\x1B6\xDC\x2\x862\x861\x3\x2"+
		"\x2\x2\x862\x863\x3\x2\x2\x2\x863\x865\x3\x2\x2\x2\x864\x860\x3\x2\x2"+
		"\x2\x864\x865\x3\x2\x2\x2\x865\x866\x3\x2\x2\x2\x866\x86F\x5\x148\xA5"+
		"\x2\x867\x869\x5\x1B6\xDC\x2\x868\x867\x3\x2\x2\x2\x868\x869\x3\x2\x2"+
		"\x2\x869\x86A\x3\x2\x2\x2\x86A\x86C\a)\x2\x2\x86B\x86D\x5\x1B6\xDC\x2"+
		"\x86C\x86B\x3\x2\x2\x2\x86C\x86D\x3\x2\x2\x2\x86D\x86E\x3\x2\x2\x2\x86E"+
		"\x870\x5\x176\xBC\x2\x86F\x868\x3\x2\x2\x2\x870\x871\x3\x2\x2\x2\x871"+
		"\x86F\x3\x2\x2\x2\x871\x872\x3\x2\x2\x2\x872\x145\x3\x2\x2\x2\x873\x875"+
		"\x5\x176\xBC\x2\x874\x876\x5\x1B6\xDC\x2\x875\x874\x3\x2\x2\x2\x875\x876"+
		"\x3\x2\x2\x2\x876\x877\x3\x2\x2\x2\x877\x879\a-\x2\x2\x878\x87A\x5\x1B6"+
		"\xDC\x2\x879\x878\x3\x2\x2\x2\x879\x87A\x3\x2\x2\x2\x87A\x87C\x3\x2\x2"+
		"\x2\x87B\x873\x3\x2\x2\x2\x87B\x87C\x3\x2\x2\x2\x87C\x87D\x3\x2\x2\x2"+
		"\x87D\x87E\a&\x2\x2\x87E\x87F\x5\x1B6\xDC\x2\x87F\x881\x5\x148\xA5\x2"+
		"\x880\x882\x5\x1B6\xDC\x2\x881\x880\x3\x2\x2\x2\x881\x882\x3\x2\x2\x2"+
		"\x882\x883\x3\x2\x2\x2\x883\x885\a\xD8\x2\x2\x884\x886\x5\x1B6\xDC\x2"+
		"\x885\x884\x3\x2\x2\x2\x885\x886\x3\x2\x2\x2\x886\x887\x3\x2\x2\x2\x887"+
		"\x888\x5\x148\xA5\x2\x888\x147\x3\x2\x2\x2\x889\x88B\a\xD6\x2\x2\x88A"+
		"\x88C\x5\x1B6\xDC\x2\x88B\x88A\x3\x2\x2\x2\x88B\x88C\x3\x2\x2\x2\x88C"+
		"\x88D\x3\x2\x2\x2\x88D\x88F\x5\x176\xBC\x2\x88E\x890\x5\x1B6\xDC\x2\x88F"+
		"\x88E\x3\x2\x2\x2\x88F\x890\x3\x2\x2\x2\x890\x891\x3\x2\x2\x2\x891\x893"+
		"\a)\x2\x2\x892\x894\x5\x1B6\xDC\x2\x893\x892\x3\x2\x2\x2\x893\x894\x3"+
		"\x2\x2\x2\x894\x895\x3\x2\x2\x2\x895\x897\x5\x176\xBC\x2\x896\x898\x5"+
		"\x1B6\xDC\x2\x897\x896\x3\x2\x2\x2\x897\x898\x3\x2\x2\x2\x898\x899\x3"+
		"\x2\x2\x2\x899\x89A\a\xDD\x2\x2\x89A\x149\x3\x2\x2\x2\x89B\x89C\t\xF\x2"+
		"\x2\x89C\x14B\x3\x2\x2\x2\x89D\x8A8\x5\x14E\xA8\x2\x89E\x8A0\x5\x1B6\xDC"+
		"\x2\x89F\x89E\x3\x2\x2\x2\x89F\x8A0\x3\x2\x2\x2\x8A0\x8A1\x3\x2\x2\x2"+
		"\x8A1\x8A3\a)\x2\x2\x8A2\x8A4\x5\x1B6\xDC\x2\x8A3\x8A2\x3\x2\x2\x2\x8A3"+
		"\x8A4\x3\x2\x2\x2\x8A4\x8A5\x3\x2\x2\x2\x8A5\x8A7\x5\x14E\xA8\x2\x8A6"+
		"\x89F\x3\x2\x2\x2\x8A7\x8AA\x3\x2\x2\x2\x8A8\x8A6\x3\x2\x2\x2\x8A8\x8A9"+
		"\x3\x2\x2\x2\x8A9\x14D\x3\x2\x2\x2\x8AA\x8A8\x3\x2\x2\x2\x8AB\x8AC\x5"+
		"\x176\xBC\x2\x8AC\x8AD\x5\x1B6\xDC\x2\x8AD\x8AE\a\xC0\x2\x2\x8AE\x8AF"+
		"\x5\x1B6\xDC\x2\x8AF\x8B1\x3\x2\x2\x2\x8B0\x8AB\x3\x2\x2\x2\x8B0\x8B1"+
		"\x3\x2\x2\x2\x8B1\x8B2\x3\x2\x2\x2\x8B2\x8B3\x5\x176\xBC\x2\x8B3\x14F"+
		"\x3\x2\x2\x2\x8B4\x8B8\x5\x152\xAA\x2\x8B5\x8B8\x5\x19C\xCF\x2\x8B6\x8B8"+
		"\x5\x19A\xCE\x2\x8B7\x8B4\x3\x2\x2\x2\x8B7\x8B5\x3\x2\x2\x2\x8B7\x8B6"+
		"\x3\x2\x2\x2\x8B8\x151\x3\x2\x2\x2\x8B9\x8BC\x5\x156\xAC\x2\x8BA\x8BC"+
		"\x5\x154\xAB\x2\x8BB\x8B9\x3\x2\x2\x2\x8BB\x8BA\x3\x2\x2\x2\x8BC\x153"+
		"\x3\x2\x2\x2\x8BD\x8BE\x5\x158\xAD\x2\x8BE\x155\x3\x2\x2\x2\x8BF\x8C0"+
		"\x5\x154\xAB\x2\x8C0\x8C1\x5\x172\xBA\x2\x8C1\x157\x3\x2\x2\x2\x8C2\x8C7"+
		"\a\xEB\x2\x2\x8C3\x8C7\x5\x198\xCD\x2\x8C4\x8C7\x5\x15A\xAE\x2\x8C5\x8C7"+
		"\a\a\x2\x2\x8C6\x8C2\x3\x2\x2\x2\x8C6\x8C3\x3\x2\x2\x2\x8C6\x8C4\x3\x2"+
		"\x2\x2\x8C6\x8C5\x3\x2\x2\x2\x8C7\x159\x3\x2\x2\x2\x8C8\x8CC\a\xDE\x2"+
		"\x2\x8C9\x8CB\x5\x15C\xAF\x2\x8CA\x8C9\x3\x2\x2\x2\x8CB\x8CE\x3\x2\x2"+
		"\x2\x8CC\x8CA\x3\x2\x2\x2\x8CC\x8CD\x3\x2\x2\x2\x8CD\x8CF\x3\x2\x2\x2"+
		"\x8CE\x8CC\x3\x2\x2\x2\x8CF\x8D0\a\xDF\x2\x2\x8D0\x15B\x3\x2\x2\x2\x8D1"+
		"\x8D4\n\x10\x2\x2\x8D2\x8D4\x5\x15A\xAE\x2\x8D3\x8D1\x3\x2\x2\x2\x8D3"+
		"\x8D2\x3\x2\x2\x2\x8D4\x15D\x3\x2\x2\x2\x8D5\x8D7\a\x39\x2\x2\x8D6\x8D8"+
		"\x5\x1B6\xDC\x2\x8D7\x8D6\x3\x2\x2\x2\x8D7\x8D8\x3\x2\x2\x2\x8D8\x8DB"+
		"\x3\x2\x2\x2\x8D9\x8DA\a\x8E\x2\x2\x8DA\x8DC\x5\x1B6\xDC\x2\x8DB\x8D9"+
		"\x3\x2\x2\x2\x8DB\x8DC\x3\x2\x2\x2\x8DC\x8DD\x3\x2\x2\x2\x8DD\x8E2\x5"+
		"\x170\xB9\x2\x8DE\x8E0\x5\x1B6\xDC\x2\x8DF\x8DE\x3\x2\x2\x2\x8DF\x8E0"+
		"\x3\x2\x2\x2\x8E0\x8E1\x3\x2\x2\x2\x8E1\x8E3\x5\x166\xB4\x2\x8E2\x8DF"+
		"\x3\x2\x2\x2\x8E2\x8E3\x3\x2\x2\x2\x8E3\x15F\x3\x2\x2\x2\x8E4\x8E5\t\x11"+
		"\x2\x2\x8E5\x161\x3\x2\x2\x2\x8E6\x8E7\t\x12\x2\x2\x8E7\x163\x3\x2\x2"+
		"\x2\x8E8\x900\x5\x178\xBD\x2\x8E9\x900\x5\x182\xC2\x2\x8EA\x900\x5\x184"+
		"\xC3\x2\x8EB\x8ED\a\xD6\x2\x2\x8EC\x8EE\x5\x1B6\xDC\x2\x8ED\x8EC\x3\x2"+
		"\x2\x2\x8ED\x8EE\x3\x2\x2\x2\x8EE\x8EF\x3\x2\x2\x2\x8EF\x8F1\x5\x164\xB3"+
		"\x2\x8F0\x8F2\x5\x1B6\xDC\x2\x8F1\x8F0\x3\x2\x2\x2\x8F1\x8F2\x3\x2\x2"+
		"\x2\x8F2\x8F3\x3\x2\x2\x2\x8F3\x8F4\a\xDD\x2\x2\x8F4\x900\x3\x2\x2\x2"+
		"\x8F5\x8F6\a\xC3\x2\x2\x8F6\x8F7\x5\x1B6\xDC\x2\x8F7\x8F8\x5\x164\xB3"+
		"\x2\x8F8\x900\x3\x2\x2\x2\x8F9\x8FA\a\x8E\x2\x2\x8FA\x8FB\x5\x1B6\xDC"+
		"\x2\x8FB\x8FC\x5\x164\xB3\x2\x8FC\x900\x3\x2\x2\x2\x8FD\x8FE\a.\x2\x2"+
		"\x8FE\x900\x5\x176\xBC\x2\x8FF\x8E8\x3\x2\x2\x2\x8FF\x8E9\x3\x2\x2\x2"+
		"\x8FF\x8EA\x3\x2\x2\x2\x8FF\x8EB\x3\x2\x2\x2\x8FF\x8F5\x3\x2\x2\x2\x8FF"+
		"\x8F9\x3\x2\x2\x2\x8FF\x8FD\x3\x2\x2\x2\x900\x165\x3\x2\x2\x2\x901\x903"+
		"\a\xD9\x2\x2\x902\x904\x5\x1B6\xDC\x2\x903\x902\x3\x2\x2\x2\x903\x904"+
		"\x3\x2\x2\x2\x904\x907\x3\x2\x2\x2\x905\x908\x5\x16E\xB8\x2\x906\x908"+
		"\x5\x158\xAD\x2\x907\x905\x3\x2\x2\x2\x907\x906\x3\x2\x2\x2\x908\x167"+
		"\x3\x2\x2\x2\x909\x90C\x5\x16A\xB6\x2\x90A\x90C\x5\x16C\xB7\x2\x90B\x909"+
		"\x3\x2\x2\x2\x90B\x90A\x3\x2\x2\x2\x90C\x169\x3\x2\x2\x2\x90D\x90F\x5"+
		"\x150\xA9\x2\x90E\x910\x5\x1B6\xDC\x2\x90F\x90E\x3\x2\x2\x2\x90F\x910"+
		"\x3\x2\x2\x2\x910\x911\x3\x2\x2\x2\x911\x912\a*\x2\x2\x912\x16B\x3\x2"+
		"\x2\x2\x913\x915\x5\x16E\xB8\x2\x914\x916\x5\x1B6\xDC\x2\x915\x914\x3"+
		"\x2\x2\x2\x915\x916\x3\x2\x2\x2\x916\x918\x3\x2\x2\x2\x917\x919\a*\x2"+
		"\x2\x918\x917\x3\x2\x2\x2\x918\x919\x3\x2\x2\x2\x919\x16D\x3\x2\x2\x2"+
		"\x91A\x91B\t\x13\x2\x2\x91B\x16F\x3\x2\x2\x2\x91C\x91F\x5\x160\xB1\x2"+
		"\x91D\x91F\x5\x164\xB3\x2\x91E\x91C\x3\x2\x2\x2\x91E\x91D\x3\x2\x2\x2"+
		"\x91F\x928\x3\x2\x2\x2\x920\x922\x5\x1B6\xDC\x2\x921\x920\x3\x2\x2\x2"+
		"\x921\x922\x3\x2\x2\x2\x922\x923\x3\x2\x2\x2\x923\x925\a\xD6\x2\x2\x924"+
		"\x926\x5\x1B6\xDC\x2\x925\x924\x3\x2\x2\x2\x925\x926\x3\x2\x2\x2\x926"+
		"\x927\x3\x2\x2\x2\x927\x929\a\xDD\x2\x2\x928\x921\x3\x2\x2\x2\x928\x929"+
		"\x3\x2\x2\x2\x929\x171\x3\x2\x2\x2\x92A\x92B\t\x14\x2\x2\x92B\x173\x3"+
		"\x2\x2\x2\x92C\x92D\t\x15\x2\x2\x92D\x175\x3\x2\x2\x2\x92E\x92F\b\xBC"+
		"\x1\x2\x92F\x930\a\xC3\x2\x2\x930\x931\x5\x1B6\xDC\x2\x931\x932\x5\x176"+
		"\xBC\x13\x932\x954\x3\x2\x2\x2\x933\x934\a\x8E\x2\x2\x934\x935\x5\x1B6"+
		"\xDC\x2\x935\x936\x5\x176\xBC\x12\x936\x954\x3\x2\x2\x2\x937\x939\a\xD8"+
		"\x2\x2\x938\x93A\x5\x1B6\xDC\x2\x939\x938\x3\x2\x2\x2\x939\x93A\x3\x2"+
		"\x2\x2\x93A\x93B\x3\x2\x2\x2\x93B\x954\x5\x176\xBC\x10\x93C\x93E\a\x8F"+
		"\x2\x2\x93D\x93F\x5\x1B6\xDC\x2\x93E\x93D\x3\x2\x2\x2\x93E\x93F\x3\x2"+
		"\x2\x2\x93F\x940\x3\x2\x2\x2\x940\x954\x5\x176\xBC\t\x941\x942\a.\x2\x2"+
		"\x942\x954\x5\x176\xBC\x3\x943\x945\x5\x1B6\xDC\x2\x944\x943\x3\x2\x2"+
		"\x2\x944\x945\x3\x2\x2\x2\x945\x946\x3\x2\x2\x2\x946\x948\a\xD6\x2\x2"+
		"\x947\x949\x5\x1B6\xDC\x2\x948\x947\x3\x2\x2\x2\x948\x949\x3\x2\x2\x2"+
		"\x949\x94A\x3\x2\x2\x2\x94A\x94C\x5\x176\xBC\x2\x94B\x94D\x5\x1B6\xDC"+
		"\x2\x94C\x94B\x3\x2\x2\x2\x94C\x94D\x3\x2\x2\x2\x94D\x94E\x3\x2\x2\x2"+
		"\x94E\x94F\a\xDD\x2\x2\x94F\x954\x3\x2\x2\x2\x950\x954\x5\x178\xBD\x2"+
		"\x951\x954\x5\x182\xC2\x2\x952\x954\x5\x184\xC3\x2\x953\x92E\x3\x2\x2"+
		"\x2\x953\x933\x3\x2\x2\x2\x953\x937\x3\x2\x2\x2\x953\x93C\x3\x2\x2\x2"+
		"\x953\x941\x3\x2\x2\x2\x953\x944\x3\x2\x2\x2\x953\x950\x3\x2\x2\x2\x953"+
		"\x951\x3\x2\x2\x2\x953\x952\x3\x2\x2\x2\x954\x9C3\x3\x2\x2\x2\x955\x957"+
		"\f\x11\x2\x2\x956\x958\x5\x1B6\xDC\x2\x957\x956\x3\x2\x2\x2\x957\x958"+
		"\x3\x2\x2\x2\x958\x959\x3\x2\x2\x2\x959\x95B\a\xDC\x2\x2\x95A\x95C\x5"+
		"\x1B6\xDC\x2\x95B\x95A\x3\x2\x2\x2\x95B\x95C\x3\x2\x2\x2\x95C\x95D\x3"+
		"\x2\x2\x2\x95D\x9C2\x5\x176\xBC\x12\x95E\x960\f\xF\x2\x2\x95F\x961\x5"+
		"\x1B6\xDC\x2\x960\x95F\x3\x2\x2\x2\x960\x961\x3\x2\x2\x2\x961\x962\x3"+
		"\x2\x2\x2\x962\x964\t\x16\x2\x2\x963\x965\x5\x1B6\xDC\x2\x964\x963\x3"+
		"\x2\x2\x2\x964\x965\x3\x2\x2\x2\x965\x966\x3\x2\x2\x2\x966\x9C2\x5\x176"+
		"\xBC\x10\x967\x969\f\xE\x2\x2\x968\x96A\x5\x1B6\xDC\x2\x969\x968\x3\x2"+
		"\x2\x2\x969\x96A\x3\x2\x2\x2\x96A\x96B\x3\x2\x2\x2\x96B\x96D\a\xD1\x2"+
		"\x2\x96C\x96E\x5\x1B6\xDC\x2\x96D\x96C\x3\x2\x2\x2\x96D\x96E\x3\x2\x2"+
		"\x2\x96E\x96F\x3\x2\x2\x2\x96F\x9C2\x5\x176\xBC\xF\x970\x972\f\r\x2\x2"+
		"\x971\x973\x5\x1B6\xDC\x2\x972\x971\x3\x2\x2\x2\x972\x973\x3\x2\x2\x2"+
		"\x973\x974\x3\x2\x2\x2\x974\x976\a\x8B\x2\x2\x975\x977\x5\x1B6\xDC\x2"+
		"\x976\x975\x3\x2\x2\x2\x976\x977\x3\x2\x2\x2\x977\x978\x3\x2\x2\x2\x978"+
		"\x9C2\x5\x176\xBC\xE\x979\x97B\f\f\x2\x2\x97A\x97C\x5\x1B6\xDC\x2\x97B"+
		"\x97A\x3\x2\x2\x2\x97B\x97C\x3\x2\x2\x2\x97C\x97D\x3\x2\x2\x2\x97D\x97F"+
		"\t\x17\x2\x2\x97E\x980\x5\x1B6\xDC\x2\x97F\x97E\x3\x2\x2\x2\x97F\x980"+
		"\x3\x2\x2\x2\x980\x981\x3\x2\x2\x2\x981\x9C2\x5\x176\xBC\r\x982\x984\f"+
		"\v\x2\x2\x983\x985\x5\x1B6\xDC\x2\x984\x983\x3\x2\x2\x2\x984\x985\x3\x2"+
		"\x2\x2\x985\x986\x3\x2\x2\x2\x986\x988\a\x32\x2\x2\x987\x989\x5\x1B6\xDC"+
		"\x2\x988\x987\x3\x2\x2\x2\x988\x989\x3\x2\x2\x2\x989\x98A\x3\x2\x2\x2"+
		"\x98A\x9C2\x5\x176\xBC\f\x98B\x98D\f\n\x2\x2\x98C\x98E\x5\x1B6\xDC\x2"+
		"\x98D\x98C\x3\x2\x2\x2\x98D\x98E\x3\x2\x2\x2\x98E\x98F\x3\x2\x2\x2\x98F"+
		"\x991\t\x12\x2\x2\x990\x992\x5\x1B6\xDC\x2\x991\x990\x3\x2\x2\x2\x991"+
		"\x992\x3\x2\x2\x2\x992\x993\x3\x2\x2\x2\x993\x9C2\x5\x176\xBC\v\x994\x996"+
		"\f\b\x2\x2\x995\x997\x5\x1B6\xDC\x2\x996\x995\x3\x2\x2\x2\x996\x997\x3"+
		"\x2\x2\x2\x997\x998\x3\x2\x2\x2\x998\x99A\a\x36\x2\x2\x999\x99B\x5\x1B6"+
		"\xDC\x2\x99A\x999\x3\x2\x2\x2\x99A\x99B\x3\x2\x2\x2\x99B\x99C\x3\x2\x2"+
		"\x2\x99C\x9C2\x5\x176\xBC\t\x99D\x99F\f\a\x2\x2\x99E\x9A0\x5\x1B6\xDC"+
		"\x2\x99F\x99E\x3\x2\x2\x2\x99F\x9A0\x3\x2\x2\x2\x9A0\x9A1\x3\x2\x2\x2"+
		"\x9A1\x9A3\a\x9C\x2\x2\x9A2\x9A4\x5\x1B6\xDC\x2\x9A3\x9A2\x3\x2\x2\x2"+
		"\x9A3\x9A4\x3\x2\x2\x2\x9A4\x9A5\x3\x2\x2\x2\x9A5\x9C2\x5\x176\xBC\b\x9A6"+
		"\x9A8\f\x6\x2\x2\x9A7\x9A9\x5\x1B6\xDC\x2\x9A8\x9A7\x3\x2\x2\x2\x9A8\x9A9"+
		"\x3\x2\x2\x2\x9A9\x9AA\x3\x2\x2\x2\x9AA\x9AC\a\xCE\x2\x2\x9AB\x9AD\x5"+
		"\x1B6\xDC\x2\x9AC\x9AB\x3\x2\x2\x2\x9AC\x9AD\x3\x2\x2\x2\x9AD\x9AE\x3"+
		"\x2\x2\x2\x9AE\x9C2\x5\x176\xBC\a\x9AF\x9B1\f\x5\x2\x2\x9B0\x9B2\x5\x1B6"+
		"\xDC\x2\x9B1\x9B0\x3\x2\x2\x2\x9B1\x9B2\x3\x2\x2\x2\x9B2\x9B3\x3\x2\x2"+
		"\x2\x9B3\x9B5\a\x66\x2\x2\x9B4\x9B6\x5\x1B6\xDC\x2\x9B5\x9B4\x3\x2\x2"+
		"\x2\x9B5\x9B6\x3\x2\x2\x2\x9B6\x9B7\x3\x2\x2\x2\x9B7\x9C2\x5\x176\xBC"+
		"\x6\x9B8\x9BA\f\x4\x2\x2\x9B9\x9BB\x5\x1B6\xDC\x2\x9BA\x9B9\x3\x2\x2\x2"+
		"\x9BA\x9BB\x3\x2\x2\x2\x9BB\x9BC\x3\x2\x2\x2\x9BC\x9BE\ax\x2\x2\x9BD\x9BF"+
		"\x5\x1B6\xDC\x2\x9BE\x9BD\x3\x2\x2\x2\x9BE\x9BF\x3\x2\x2\x2\x9BF\x9C0"+
		"\x3\x2\x2\x2\x9C0\x9C2\x5\x176\xBC\x5\x9C1\x955\x3\x2\x2\x2\x9C1\x95E"+
		"\x3\x2\x2\x2\x9C1\x967\x3\x2\x2\x2\x9C1\x970\x3\x2\x2\x2\x9C1\x979\x3"+
		"\x2\x2\x2\x9C1\x982\x3\x2\x2\x2\x9C1\x98B\x3\x2\x2\x2\x9C1\x994\x3\x2"+
		"\x2\x2\x9C1\x99D\x3\x2\x2\x2\x9C1\x9A6\x3\x2\x2\x2\x9C1\x9AF\x3\x2\x2"+
		"\x2\x9C1\x9B8\x3\x2\x2\x2\x9C2\x9C5\x3\x2\x2\x2\x9C3\x9C1\x3\x2\x2\x2"+
		"\x9C3\x9C4\x3\x2\x2\x2\x9C4\x177\x3\x2\x2\x2\x9C5\x9C3\x3\x2\x2\x2\x9C6"+
		"\x9CE\x5\x16E\xB8\x2\x9C7\x9CE\a\xE5\x2\x2\x9C8\x9CE\a\xE0\x2\x2\x9C9"+
		"\x9CB\x5\x17A\xBE\x2\x9CA\x9CC\x5\x172\xBA\x2\x9CB\x9CA\x3\x2\x2\x2\x9CB"+
		"\x9CC\x3\x2\x2\x2\x9CC\x9CE\x3\x2\x2\x2\x9CD\x9C6\x3\x2\x2\x2\x9CD\x9C7"+
		"\x3\x2\x2\x2\x9CD\x9C8\x3\x2\x2\x2\x9CD\x9C9\x3\x2\x2\x2\x9CE\x179\x3"+
		"\x2\x2\x2\x9CF\x9D3\x5\x17C\xBF\x2\x9D0\x9D3\x5\x17E\xC0\x2\x9D1\x9D3"+
		"\x5\x180\xC1\x2\x9D2\x9CF\x3\x2\x2\x2\x9D2\x9D0\x3\x2\x2\x2\x9D2\x9D1"+
		"\x3\x2\x2\x2\x9D3\x17B\x3\x2\x2\x2\x9D4\x9D5\t\x18\x2\x2\x9D5\x17D\x3"+
		"\x2\x2\x2\x9D6\x9D7\a\x90\x2\x2\x9D7\x17F\x3\x2\x2\x2\x9D8\x9D9\t\x19"+
		"\x2\x2\x9D9\x181\x3\x2\x2\x2\x9DA\x9DB\b\xC2\x1\x2\x9DB\x9E8\a\x89\x2"+
		"\x2\x9DC\x9E8\x5\x152\xAA\x2\x9DD\x9DF\a-\x2\x2\x9DE\x9E0\x5\x1B4\xDB"+
		"\x2\x9DF\x9DE\x3\x2\x2\x2\x9DF\x9E0\x3\x2\x2\x2\x9E0\x9E1\x3\x2\x2\x2"+
		"\x9E1\x9E8\x5\x150\xA9\x2\x9E2\x9E4\a,\x2\x2\x9E3\x9E5\x5\x1B4\xDB\x2"+
		"\x9E4\x9E3\x3\x2\x2\x2\x9E4\x9E5\x3\x2\x2\x2\x9E5\x9E6\x3\x2\x2\x2\x9E6"+
		"\x9E8\x5\x150\xA9\x2\x9E7\x9DA\x3\x2\x2\x2\x9E7\x9DC\x3\x2\x2\x2\x9E7"+
		"\x9DD\x3\x2\x2\x2\x9E7\x9E2\x3\x2\x2\x2\x9E8\xA09\x3\x2\x2\x2\x9E9\x9EA"+
		"\f\t\x2\x2\x9EA\x9EC\a\xD6\x2\x2\x9EB\x9ED\x5\x1B6\xDC\x2\x9EC\x9EB\x3"+
		"\x2\x2\x2\x9EC\x9ED\x3\x2\x2\x2\x9ED\x9EF\x3\x2\x2\x2\x9EE\x9F0\x5\x186"+
		"\xC4\x2\x9EF\x9EE\x3\x2\x2\x2\x9EF\x9F0\x3\x2\x2\x2\x9F0\x9F2\x3\x2\x2"+
		"\x2\x9F1\x9F3\x5\x1B6\xDC\x2\x9F2\x9F1\x3\x2\x2\x2\x9F2\x9F3\x3\x2\x2"+
		"\x2\x9F3\x9F4\x3\x2\x2\x2\x9F4\xA08\a\xDD\x2\x2\x9F5\x9F7\f\b\x2\x2\x9F6"+
		"\x9F8\x5\x1B4\xDB\x2\x9F7\x9F6\x3\x2\x2\x2\x9F7\x9F8\x3\x2\x2\x2\x9F8"+
		"\x9F9\x3\x2\x2\x2\x9F9\x9FB\a-\x2\x2\x9FA\x9FC\x5\x1B4\xDB\x2\x9FB\x9FA"+
		"\x3\x2\x2\x2\x9FB\x9FC\x3\x2\x2\x2\x9FC\x9FD\x3\x2\x2\x2\x9FD\xA08\x5"+
		"\x150\xA9\x2\x9FE\xA00\f\a\x2\x2\x9FF\xA01\x5\x1B4\xDB\x2\xA00\x9FF\x3"+
		"\x2\x2\x2\xA00\xA01\x3\x2\x2\x2\xA01\xA02\x3\x2\x2\x2\xA02\xA04\a,\x2"+
		"\x2\xA03\xA05\x5\x1B4\xDB\x2\xA04\xA03\x3\x2\x2\x2\xA04\xA05\x3\x2\x2"+
		"\x2\xA05\xA06\x3\x2\x2\x2\xA06\xA08\x5\x150\xA9\x2\xA07\x9E9\x3\x2\x2"+
		"\x2\xA07\x9F5\x3\x2\x2\x2\xA07\x9FE\x3\x2\x2\x2\xA08\xA0B\x3\x2\x2\x2"+
		"\xA09\xA07\x3\x2\x2\x2\xA09\xA0A\x3\x2\x2\x2\xA0A\x183\x3\x2\x2\x2\xA0B"+
		"\xA09\x3\x2\x2\x2\xA0C\xA22\x5\x160\xB1\x2\xA0D\xA0F\a\xDE\x2\x2\xA0E"+
		"\xA10\x5\x1B6\xDC\x2\xA0F\xA0E\x3\x2\x2\x2\xA0F\xA10\x3\x2\x2\x2\xA10"+
		"\xA11\x3\x2\x2\x2\xA11\xA13\x5\x160\xB1\x2\xA12\xA14\x5\x1B6\xDC\x2\xA13"+
		"\xA12\x3\x2\x2\x2\xA13\xA14\x3\x2\x2\x2\xA14\xA15\x3\x2\x2\x2\xA15\xA16"+
		"\a\xDF\x2\x2\xA16\xA22\x3\x2\x2\x2\xA17\xA22\a\x92\x2\x2\xA18\xA1A\a\xDE"+
		"\x2\x2\xA19\xA1B\x5\x1B6\xDC\x2\xA1A\xA19\x3\x2\x2\x2\xA1A\xA1B\x3\x2"+
		"\x2\x2\xA1B\xA1C\x3\x2\x2\x2\xA1C\xA1E\a\x92\x2\x2\xA1D\xA1F\x5\x1B6\xDC"+
		"\x2\xA1E\xA1D\x3\x2\x2\x2\xA1E\xA1F\x3\x2\x2\x2\xA1F\xA20\x3\x2\x2\x2"+
		"\xA20\xA22\a\xDF\x2\x2\xA21\xA0C\x3\x2\x2\x2\xA21\xA0D\x3\x2\x2\x2\xA21"+
		"\xA17\x3\x2\x2\x2\xA21\xA18\x3\x2\x2\x2\xA22\x185\x3\x2\x2\x2\xA23\xA25"+
		"\x5\x1B6\xDC\x2\xA24\xA23\x3\x2\x2\x2\xA24\xA25\x3\x2\x2\x2\xA25\xA27"+
		"\x3\x2\x2\x2\xA26\xA28\x5\x18A\xC6\x2\xA27\xA26\x3\x2\x2\x2\xA27\xA28"+
		"\x3\x2\x2\x2\xA28\xA33\x3\x2\x2\x2\xA29\xA2B\x5\x1B6\xDC\x2\xA2A\xA29"+
		"\x3\x2\x2\x2\xA2A\xA2B\x3\x2\x2\x2\xA2B\xA2C\x3\x2\x2\x2\xA2C\xA2E\a)"+
		"\x2\x2\xA2D\xA2F\x5\x1B6\xDC\x2\xA2E\xA2D\x3\x2\x2\x2\xA2E\xA2F\x3\x2"+
		"\x2\x2\xA2F\xA30\x3\x2\x2\x2\xA30\xA32\x5\x18A\xC6\x2\xA31\xA2A\x3\x2"+
		"\x2\x2\xA32\xA35\x3\x2\x2\x2\xA33\xA31\x3\x2\x2\x2\xA33\xA34\x3\x2\x2"+
		"\x2\xA34\xA37\x3\x2\x2\x2\xA35\xA33\x3\x2\x2\x2\xA36\xA24\x3\x2\x2\x2"+
		"\xA36\xA37\x3\x2\x2\x2\xA37\x187\x3\x2\x2\x2\xA38\xA39\x5\x18A\xC6\x2"+
		"\xA39\x189\x3\x2\x2\x2\xA3A\xA3D\x5\x18C\xC7\x2\xA3B\xA3D\x5\x18E\xC8"+
		"\x2\xA3C\xA3A\x3\x2\x2\x2\xA3C\xA3B\x3\x2\x2\x2\xA3D\x18B\x3\x2\x2\x2"+
		"\xA3E\xA3F\x5\x190\xC9\x2\xA3F\x18D\x3\x2\x2\x2\xA40\xA42\x5\x150\xA9"+
		"\x2\xA41\xA43\x5\x1B6\xDC\x2\xA42\xA41\x3\x2\x2\x2\xA42\xA43\x3\x2\x2"+
		"\x2\xA43\xA44\x3\x2\x2\x2\xA44\xA46\a\xCF\x2\x2\xA45\xA47\x5\x1B6\xDC"+
		"\x2\xA46\xA45\x3\x2\x2\x2\xA46\xA47\x3\x2\x2\x2\xA47\xA48\x3\x2\x2\x2"+
		"\xA48\xA49\x5\x190\xC9\x2\xA49\x18F\x3\x2\x2\x2\xA4A\xA4B\a=\x2\x2\xA4B"+
		"\xA4D\x5\x1B6\xDC\x2\xA4C\xA4A\x3\x2\x2\x2\xA4C\xA4D\x3\x2\x2\x2\xA4D"+
		"\xA4E\x3\x2\x2\x2\xA4E\xA57\x5\x176\xBC\x2\xA4F\xA57\x5\x196\xCC\x2\xA50"+
		"\xA51\x5\x192\xCA\x2\xA51\xA52\x5\x1B6\xDC\x2\xA52\xA53\a\xC0\x2\x2\xA53"+
		"\xA54\x5\x1B6\xDC\x2\xA54\xA55\x5\x194\xCB\x2\xA55\xA57\x3\x2\x2\x2\xA56"+
		"\xA4C\x3\x2\x2\x2\xA56\xA4F\x3\x2\x2\x2\xA56\xA50\x3\x2\x2\x2\xA57\x191"+
		"\x3\x2\x2\x2\xA58\xA59\x5\x176\xBC\x2\xA59\x193\x3\x2\x2\x2\xA5A\xA5B"+
		"\x5\x176\xBC\x2\xA5B\x195\x3\x2\x2\x2\xA5C\xA5D\a\x34\x2\x2\xA5D\xA5E"+
		"\x5\x1B6\xDC\x2\xA5E\xA5F\x5\x176\xBC\x2\xA5F\x197\x3\x2\x2\x2\xA60\xA61"+
		"\t\x1A\x2\x2\xA61\x199\x3\x2\x2\x2\xA62\xA63\a\x39\x2\x2\xA63\x19B\x3"+
		"\x2\x2\x2\xA64\xA65\t\x1B\x2\x2\xA65\x19D\x3\x2\x2\x2\xA66\xA68\x5\x1B6"+
		"\xDC\x2\xA67\xA66\x3\x2\x2\x2\xA67\xA68\x3\x2\x2\x2\xA68\xA69\x3\x2\x2"+
		"\x2\xA69\xA6B\a\xE6\x2\x2\xA6A\xA6C\x5\x1B6\xDC\x2\xA6B\xA6A\x3\x2\x2"+
		"\x2\xA6B\xA6C\x3\x2\x2\x2\xA6C\xA72\x3\x2\x2\x2\xA6D\xA6F\x5\x1B6\xDC"+
		"\x2\xA6E\xA6D\x3\x2\x2\x2\xA6E\xA6F\x3\x2\x2\x2\xA6F\xA70\x3\x2\x2\x2"+
		"\xA70\xA72\x5\x1A2\xD2\x2\xA71\xA67\x3\x2\x2\x2\xA71\xA6E\x3\x2\x2\x2"+
		"\xA72\x19F\x3\x2\x2\x2\xA73\xA7C\x5\x19E\xD0\x2\xA74\xA76\x5\x1B6\xDC"+
		"\x2\xA75\xA74\x3\x2\x2\x2\xA75\xA76\x3\x2\x2\x2\xA76\xA77\x3\x2\x2\x2"+
		"\xA77\xA79\a*\x2\x2\xA78\xA7A\x5\x1B6\xDC\x2\xA79\xA78\x3\x2\x2\x2\xA79"+
		"\xA7A\x3\x2\x2\x2\xA7A\xA7C\x3\x2\x2\x2\xA7B\xA73\x3\x2\x2\x2\xA7B\xA75"+
		"\x3\x2\x2\x2\xA7C\xA7D\x3\x2\x2\x2\xA7D\xA7B\x3\x2\x2\x2\xA7D\xA7E\x3"+
		"\x2\x2\x2\xA7E\xA80\x3\x2\x2\x2\xA7F\xA81\a\x2\x2\x3\xA80\xA7F\x3\x2\x2"+
		"\x2\xA80\xA81\x3\x2\x2\x2\xA81\xA84\x3\x2\x2\x2\xA82\xA84\a\x2\x2\x3\xA83"+
		"\xA7B\x3\x2\x2\x2\xA83\xA82\x3\x2\x2\x2\xA84\x1A1\x3\x2\x2\x2\xA85\xA89"+
		"\x5\x1AA\xD6\x2\xA86\xA89\x5\x1A4\xD3\x2\xA87\xA89\x5\x1A6\xD4\x2\xA88"+
		"\xA85\x3\x2\x2\x2\xA88\xA86\x3\x2\x2\x2\xA88\xA87\x3\x2\x2\x2\xA89\x1A3"+
		"\x3\x2\x2\x2\xA8A\xA8C\a\xAD\x2\x2\xA8B\xA8D\x5\x1B6\xDC\x2\xA8C\xA8B"+
		"\x3\x2\x2\x2\xA8C\xA8D\x3\x2\x2\x2\xA8D\xA8E\x3\x2\x2\x2\xA8E\xA8F\x5"+
		"\x1A8\xD5\x2\xA8F\x1A5\x3\x2\x2\x2\xA90\xA91\a\xE7\x2\x2\xA91\xA92\x5"+
		"\x1A8\xD5\x2\xA92\x1A7\x3\x2\x2\x2\xA93\xA96\a\xEC\x2\x2\xA94\xA96\n\x1C"+
		"\x2\x2\xA95\xA93\x3\x2\x2\x2\xA95\xA94\x3\x2\x2\x2\xA96\xA99\x3\x2\x2"+
		"\x2\xA97\xA95\x3\x2\x2\x2\xA97\xA98\x3\x2\x2\x2\xA98\x1A9\x3\x2\x2\x2"+
		"\xA99\xA97\x3\x2\x2\x2\xA9A\xAA0\a\xE7\x2\x2\xA9B\xA9C\a/\x2\x2\xA9C\xA9E"+
		"\x5\x1AC\xD7\x2\xA9D\xA9F\x5\x1B6\xDC\x2\xA9E\xA9D\x3\x2\x2\x2\xA9E\xA9F"+
		"\x3\x2\x2\x2\xA9F\xAA1\x3\x2\x2\x2\xAA0\xA9B\x3\x2\x2\x2\xAA1\xAA2\x3"+
		"\x2\x2\x2\xAA2\xAA0\x3\x2\x2\x2\xAA2\xAA3\x3\x2\x2\x2\xAA3\xAA9\x3\x2"+
		"\x2\x2\xAA4\xAA6\x5\x1B6\xDC\x2\xAA5\xAA4\x3\x2\x2\x2\xAA5\xAA6\x3\x2"+
		"\x2\x2\xAA6\xAA7\x3\x2\x2\x2\xAA7\xAA8\a*\x2\x2\xAA8\xAAA\x5\x1A8\xD5"+
		"\x2\xAA9\xAA5\x3\x2\x2\x2\xAA9\xAAA\x3\x2\x2\x2\xAAA\x1AB\x3\x2\x2\x2"+
		"\xAAB\xAAD\x5\x1AE\xD8\x2\xAAC\xAAE\x5\x1B0\xD9\x2\xAAD\xAAC\x3\x2\x2"+
		"\x2\xAAD\xAAE\x3\x2\x2\x2\xAAE\x1AD\x3\x2\x2\x2\xAAF\xAB0\x5\x150\xA9"+
		"\x2\xAB0\x1AF\x3\x2\x2\x2\xAB1\xAB2\x5\x1B6\xDC\x2\xAB2\xAB3\x5\x1B2\xDA"+
		"\x2\xAB3\xAEE\x3\x2\x2\x2\xAB4\xAB5\x5\x1B6\xDC\x2\xAB5\xABE\x5\x1B2\xDA"+
		"\x2\xAB6\xAB8\x5\x1B6\xDC\x2\xAB7\xAB6\x3\x2\x2\x2\xAB7\xAB8\x3\x2\x2"+
		"\x2\xAB8\xAB9\x3\x2\x2\x2\xAB9\xABB\a)\x2\x2\xABA\xABC\x5\x1B6\xDC\x2"+
		"\xABB\xABA\x3\x2\x2\x2\xABB\xABC\x3\x2\x2\x2\xABC\xABD\x3\x2\x2\x2\xABD"+
		"\xABF\x5\x1B2\xDA\x2\xABE\xAB7\x3\x2\x2\x2\xABF\xAC0\x3\x2\x2\x2\xAC0"+
		"\xABE\x3\x2\x2\x2\xAC0\xAC1\x3\x2\x2\x2\xAC1\xAEE\x3\x2\x2\x2\xAC2\xAC4"+
		"\x5\x1B6\xDC\x2\xAC3\xAC2\x3\x2\x2\x2\xAC3\xAC4\x3\x2\x2\x2\xAC4\xAC5"+
		"\x3\x2\x2\x2\xAC5\xAC7\a\xD6\x2\x2\xAC6\xAC8\x5\x1B6\xDC\x2\xAC7\xAC6"+
		"\x3\x2\x2\x2\xAC7\xAC8\x3\x2\x2\x2\xAC8\xAC9\x3\x2\x2\x2\xAC9\xAEE\a\xDD"+
		"\x2\x2\xACA\xACC\x5\x1B6\xDC\x2\xACB\xACA\x3\x2\x2\x2\xACB\xACC\x3\x2"+
		"\x2\x2\xACC\xACD\x3\x2\x2\x2\xACD\xACF\a\xD6\x2\x2\xACE\xAD0\x5\x1B6\xDC"+
		"\x2\xACF\xACE\x3\x2\x2\x2\xACF\xAD0\x3\x2\x2\x2\xAD0\xAD1\x3\x2\x2\x2"+
		"\xAD1\xAD3\x5\x1B2\xDA\x2\xAD2\xAD4\x5\x1B6\xDC\x2\xAD3\xAD2\x3\x2\x2"+
		"\x2\xAD3\xAD4\x3\x2\x2\x2\xAD4\xAD5\x3\x2\x2\x2\xAD5\xAD6\a\xDD\x2\x2"+
		"\xAD6\xAEE\x3\x2\x2\x2\xAD7\xAD9\x5\x1B6\xDC\x2\xAD8\xAD7\x3\x2\x2\x2"+
		"\xAD8\xAD9\x3\x2\x2\x2\xAD9\xADA\x3\x2\x2\x2\xADA\xADB\a\xD6\x2\x2\xADB"+
		"\xAE4\x5\x1B2\xDA\x2\xADC\xADE\x5\x1B6\xDC\x2\xADD\xADC\x3\x2\x2\x2\xADD"+
		"\xADE\x3\x2\x2\x2\xADE\xADF\x3\x2\x2\x2\xADF\xAE1\a)\x2\x2\xAE0\xAE2\x5"+
		"\x1B6\xDC\x2\xAE1\xAE0\x3\x2\x2\x2\xAE1\xAE2\x3\x2\x2\x2\xAE2\xAE3\x3"+
		"\x2\x2\x2\xAE3\xAE5\x5\x1B2\xDA\x2\xAE4\xADD\x3\x2\x2\x2\xAE5\xAE6\x3"+
		"\x2\x2\x2\xAE6\xAE4\x3\x2\x2\x2\xAE6\xAE7\x3\x2\x2\x2\xAE7\xAE9\x3\x2"+
		"\x2\x2\xAE8\xAEA\x5\x1B6\xDC\x2\xAE9\xAE8\x3\x2\x2\x2\xAE9\xAEA\x3\x2"+
		"\x2\x2\xAEA\xAEB\x3\x2\x2\x2\xAEB\xAEC\a\xDD\x2\x2\xAEC\xAEE\x3\x2\x2"+
		"\x2\xAED\xAB1\x3\x2\x2\x2\xAED\xAB4\x3\x2\x2\x2\xAED\xAC3\x3\x2\x2\x2"+
		"\xAED\xACB\x3\x2\x2\x2\xAED\xAD8\x3\x2\x2\x2\xAEE\x1B1\x3\x2\x2\x2\xAEF"+
		"\xAF0\x5\x176\xBC\x2\xAF0\x1B3\x3\x2\x2\x2\xAF1\xAF5\a\xEC\x2\x2\xAF2"+
		"\xAF4\a\xE9\x2\x2\xAF3\xAF2\x3\x2\x2\x2\xAF4\xAF7\x3\x2\x2\x2\xAF5\xAF3"+
		"\x3\x2\x2\x2\xAF5\xAF6\x3\x2\x2\x2\xAF6\x1B5\x3\x2\x2\x2\xAF7\xAF5\x3"+
		"\x2\x2\x2\xAF8\xAFA\t\x1D\x2\x2\xAF9\xAF8\x3\x2\x2\x2\xAFA\xAFB\x3\x2"+
		"\x2\x2\xAFB\xAF9\x3\x2\x2\x2\xAFB\xAFC\x3\x2\x2\x2\xAFC\x1B7\x3\x2\x2"+
		"\x2\x1AA\x1BC\x1C0\x1C4\x1CC\x1D2\x1D5\x1DF\x1E1\x1E7\x1F0\x1F7\x1FD\x206"+
		"\x20D\x211\x215\x219\x21E\x22A\x237\x23A\x247\x24A\x251\x259\x260\x288"+
		"\x298\x2A0\x2A5\x2AA\x2B3\x2C7\x2CB\x2D3\x2DE\x2E4\x2E8\x2ED\x2F4\x2F8"+
		"\x302\x306\x309\x30F\x315\x31F\x323\x326\x32C\x330\x33A\x33E\x348\x34C"+
		"\x350\x35C\x360\x363\x367\x36C\x373\x377\x37C\x384\x388\x38C\x394\x397"+
		"\x39B\x39F\x3A9\x3AD\x3B0\x3B6\x3BA\x3C0\x3C4\x3C9\x3D2\x3D6\x3D9\x3DC"+
		"\x3E0\x3EC\x3F0\x3F3\x3F6\x3FA\x403\x409\x40D\x412\x419\x41C\x420\x427"+
		"\x42D\x43B\x43E\x441\x446\x44A\x44E\x452\x457\x45A\x45D\x463\x467\x46B"+
		"\x46F\x473\x476\x479\x47C\x47F\x482\x486\x48E\x492\x497\x49F\x4A5\x4A9"+
		"\x4B5\x4B9\x4D8\x4DD\x4E6\x4ED\x4F1\x4F4\x4FE\x502\x507\x511\x517\x52C"+
		"\x53A\x542\x547\x54B\x54F\x553\x556\x559\x55C\x576\x57A\x58C\x590\x598"+
		"\x59C\x5A0\x5A4\x5AA\x5AE\x5B2\x5B7\x5BD\x5C0\x5C4\x5C8\x5CB\x5CF\x5D4"+
		"\x5D6\x5DA\x5DE\x5E1\x5E5\x5E8\x5F4\x5F8\x5FC\x604\x608\x616\x620\x624"+
		"\x629\x634\x638\x63D\x643\x647\x64D\x650\x655\x65E\x662\x668\x66B\x674"+
		"\x678\x67E\x681\x68B\x68F\x692\x695\x698\x69C\x6A0\x6A5\x6AA\x6B2\x6B8"+
		"\x6BC\x6C1\x6C8\x6CD\x6D1\x6D5\x6D9\x6DD\x6E1\x6E3\x6E7\x6EB\x6F1\x6FD"+
		"\x6FF\x705\x707\x70F\x713\x723\x727\x72E\x732\x73C\x740\x745\x74D\x755"+
		"\x757\x75B\x766\x770\x774\x77B\x77F\x783\x787\x78A\x794\x7AA\x7AF\x7B3"+
		"\x7BE\x7C4\x7C7\x7CA\x7D0\x7D4\x7D9\x7DE\x7E0\x7E6\x7F1\x7F6\x7FC\x800"+
		"\x805\x80A\x80E\x812\x814\x818\x81A\x81F\x833\x835\x83B\x83D\x841\x845"+
		"\x848\x84B\x84F\x852\x856\x85A\x85C\x862\x864\x868\x86C\x871\x875\x879"+
		"\x87B\x881\x885\x88B\x88F\x893\x897\x89F\x8A3\x8A8\x8B0\x8B7\x8BB\x8C6"+
		"\x8CC\x8D3\x8D7\x8DB\x8DF\x8E2\x8ED\x8F1\x8FF\x903\x907\x90B\x90F\x915"+
		"\x918\x91E\x921\x925\x928\x939\x93E\x944\x948\x94C\x953\x957\x95B\x960"+
		"\x964\x969\x96D\x972\x976\x97B\x97F\x984\x988\x98D\x991\x996\x99A\x99F"+
		"\x9A3\x9A8\x9AC\x9B1\x9B5\x9BA\x9BE\x9C1\x9C3\x9CB\x9CD\x9D2\x9DF\x9E4"+
		"\x9E7\x9EC\x9EF\x9F2\x9F7\x9FB\xA00\xA04\xA07\xA09\xA0F\xA13\xA1A\xA1E"+
		"\xA21\xA24\xA27\xA2A\xA2E\xA33\xA36\xA3C\xA42\xA46\xA4C\xA56\xA67\xA6B"+
		"\xA6E\xA71\xA75\xA79\xA7B\xA7D\xA80\xA83\xA88\xA8C\xA95\xA97\xA9E\xAA2"+
		"\xAA5\xAA9\xAAD\xAB7\xABB\xAC0\xAC3\xAC7\xACB\xACF\xAD3\xAD8\xADD\xAE1"+
		"\xAE6\xAE9\xAED\xAF5\xAFB";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Parsing.Grammar
