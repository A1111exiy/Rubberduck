<UserControl x:Class="Rubberduck.UI.CodeExplorer.CodeExplorerControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:explorer="clr-namespace:Rubberduck.UI.CodeExplorer"
             xmlns:resx="clr-namespace:Rubberduck.UI"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <UserControl.Resources>

        <BooleanToVisibilityConverter x:Key="BoolToVisibility"/>

        <Style x:Key="LinkButton" TargetType="Button" BasedOn="{StaticResource ResourceKey={x:Type Button}}">

            <Setter Property="Width" Value="Auto"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <ContentPresenter Content="{TemplateBinding Content}" 
                                  ContentTemplate="{TemplateBinding  ContentTemplate}"
                                  VerticalAlignment="Center">
                            <ContentPresenter.Resources>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="TextDecorations" Value="Underline" />
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Foreground" Value="Blue" />
            <Setter Property="Cursor" Value="Hand" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Foreground" Value="Red" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="Gray" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <LinearGradientBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFD9F4FF" Offset="0"/>
            <GradientStop Color="#FF9BDDFB" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="{x:Static SystemColors.ControlBrushKey}" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFEEEDED" Offset="0"/>
            <GradientStop Color="#FFDDDDDD" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
        <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />

        <Style x:Key="ShinyTreeView" 
               TargetType="{x:Type TreeViewItem}">
            <Setter Property="BorderThickness" Value="1.5"/>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="BorderBrush" Value="#adc6e5"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True"/>
                        <Condition Property="IsSelectionActive" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="LightGray"/>
                </MultiTrigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="Border">
                    <Setter Property="CornerRadius" Value="2"/>
                </Style>
            </Style.Resources>
        </Style>

        <!--<explorer:InspectionSeverityImageSourceConverter x:Key="SeverityIconConverter" />
        <explorer:InspectionImageSourceConverter x:Key="InspectionIconConverter" />
        <explorer:InspectionDescriptionConverter x:Key="InspectionDescriptionConverter" />-->

        <Style x:Key="IconStyle" TargetType="Image">
            <Setter Property="Height" Value="16" />
            <Setter Property="Width" Value="16" />
            <Setter Property="Margin" Value="4" />
        </Style>

        <CollectionViewSource x:Key="InspectionTypeGroupViewSource" Source="{Binding Results}">
            <CollectionViewSource.GroupDescriptions>
                <PropertyGroupDescription PropertyName="Inspection.InspectionType" />
                <PropertyGroupDescription PropertyName="Inspection" />
            </CollectionViewSource.GroupDescriptions>
        </CollectionViewSource>

        <CollectionViewSource x:Key="CodeModuleGroupViewSource" Source="{Binding Results}">
            <CollectionViewSource.GroupDescriptions>
                <PropertyGroupDescription PropertyName="QualifiedSelection.QualifiedName" />
                <PropertyGroupDescription PropertyName="Inspection" />
            </CollectionViewSource.GroupDescriptions>
        </CollectionViewSource>

        <HierarchicalDataTemplate x:Key="InspectionGroupsTemplate"
                                  DataType="{x:Type CollectionViewGroup}"
                                  ItemsSource="{Binding Items}"
                                  ItemTemplate="{StaticResource InspectionResultTemplate}">

            <StackPanel Orientation="Horizontal" Margin="2" HorizontalAlignment="Stretch">
                <Image Style="{StaticResource IconStyle}" 
                       Source="{Binding Name, Converter={StaticResource InspectionIconConverter}}"
                       VerticalAlignment="Center" />
                <TextBlock Margin="4" 
                           VerticalAlignment="Center" 
                           Text="{Binding Name, Converter={StaticResource InspectionDescriptionConverter}}"
                           TextWrapping="Wrap"/>
                <TextBlock Margin="0,4,4,4" 
                           VerticalAlignment="Center" 
                           Text="{Binding ItemCount, StringFormat=({0})}" 
                           TextWrapping="Wrap"/>
            </StackPanel>
        </HierarchicalDataTemplate>

        <HierarchicalDataTemplate x:Key="InspectionTypeGroupsTemplate" 
                                    DataType="{x:Type CollectionViewGroup}"
                                    ItemsSource="{Binding Items}"
                                    ItemTemplate="{StaticResource InspectionGroupsTemplate}">
            <StackPanel Orientation="Horizontal" Margin="2" HorizontalAlignment="Stretch">
                <TextBlock VerticalAlignment="Center" 
                           Text="{Binding Name}"
                           FontWeight="Bold"
                           TextWrapping="Wrap"/>
                <TextBlock Margin="4,0,4,0" 
                           VerticalAlignment="Center" 
                           Text="{Binding ItemCount, StringFormat=({0})}" 
                           TextWrapping="Wrap"/>
            </StackPanel>
        </HierarchicalDataTemplate>

        <HierarchicalDataTemplate x:Key="CodeModuleGroupsTemplate"
                                  DataType="{x:Type CollectionViewGroup}"
                                  ItemsSource="{Binding Items}"
                                  ItemTemplate="{StaticResource InspectionGroupsTemplate}">

            <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch">
                <Image Style="{StaticResource IconStyle}" Source="../../Resources/Microsoft/PNG/VSObject_Module.png" />
                <TextBlock VerticalAlignment="Center" 
                           Text="{Binding Name}"
                           FontWeight="Bold"
                           TextWrapping="Wrap"/>
                <TextBlock Margin="4,0,4,0" 
                           VerticalAlignment="Center" 
                           Text="{Binding ItemCount, StringFormat=({0})}" 
                           TextWrapping="Wrap"/>
            </StackPanel>
        </HierarchicalDataTemplate>

    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="30"/>
            <RowDefinition Height="*" MinHeight="64" />
            <RowDefinition Height="5"/>
            <RowDefinition Height="Auto" MinHeight="48"/>
        </Grid.RowDefinitions>

        <Border Grid.Row="0" Grid.RowSpan="3" Background="#FFEEF5FD" />

        <ToolBar Grid.Row="0">

            <Button Command="{Binding RefreshCommand}" IsEnabled="{Binding CanRefresh}">
                <Image Height="16" Source="../../Resources/arrow-circle-double.png" />
            </Button>

            <Separator />


            <Button Command="{Binding ToggleSignatures}" 
                    IsEnabled="{Binding CanRefresh}"
                    ToolTip="Toggle signatures">
                <Image Height="16" Source="../../Resources/Microsoft/PNG/DisplayFullSignature_13393_32.png" />
            </Button>

            <Button Command="{Binding ToggleNamespaces}" 
                    IsEnabled="{Binding CanRefresh}"
                    ToolTip="Toggle namespace folders">
                <Image Height="16" Source="../../Resources/blue-folder-horizontal-open.png" />
            </Button>

            <Button Command="{Binding ToggleFolders}" 
                    IsEnabled="{Binding CanRefresh}"
                    ToolTip="Toggle component type folders">
                <Image Height="16" Source="../../Resources/folder-horizontal.png" />
            </Button>
            
            <Separator />

            <Label Content="{Binding ToolbarText}" />

        </ToolBar>
        
        <!-- todo: implement item template -->
        <TreeView Grid.Row="1" x:Name="ExplorerTreeView"
                  IsEnabled="{Binding CanRefresh}"
                  ItemsSource="{Binding Source={StaticResource InspectionTypeGroupViewSource}, Path=Groups}"
                  ItemTemplate="{StaticResource InspectionTypeGroupsTemplate}"
                  ItemContainerStyle="{StaticResource ShinyTreeView}"
                  HorizontalContentAlignment="Stretch"
                  MouseDoubleClick="TreeView_OnMouseDoubleClick">
            <i:Interaction.Behaviors>
                <resx:BindableSelectedItemBehavior SelectedItem="{Binding SelectedItem, Mode=TwoWay}" />
            </i:Interaction.Behaviors>
        </TreeView>

        <resx:BusyIndicator Grid.Row="1" Width="36" Height="36" Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibility}}" />

        <GridSplitter Grid.Row="2" Height="5" ShowsPreview="True" Cursor="SizeNS" HorizontalAlignment="Stretch"/>

        <Border Grid.Row="3" BorderThickness="0,1,0,0" BorderBrush="DimGray">
            
            <Grid Background="Gainsboro">
                
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <StackPanel Orientation="Vertical">
                    <StackPanel Orientation="Horizontal"
                                HorizontalAlignment="Stretch">

                        <!-- todo: implement converter for SelectedItem.DeclarationType -->
                        <Image Style="{StaticResource IconStyle}"
                               Source="{Binding SelectedItem.DeclarationType}"
                               VerticalAlignment="Center" />

                        <TextBlock Margin="4" Text="{Binding SelectedItem.IdentifierName}"
                                   FontWeight="Bold" TextWrapping="Wrap" />

                    </StackPanel>

                <TextBlock Margin="8,0,8,0" Text="{Binding SelectedItem.SummaryComment}"
                           TextWrapping="Wrap"
                           Visibility="{Binding HasSummaryComment, Converter={StaticResource BoolToVisibility}}" />

                <TextBlock Margin="8,0,8,0" Text="{Binding SelectedItem.QualifiedSelection}"
                            TextWrapping="Wrap" FontSize="8"
                            Visibility="{Binding HasQualifiedSelection, Converter={StaticResource BoolToVisibility}}" />
                </StackPanel>
                
                <WrapPanel Grid.ColumnSpan="2" Grid.Column="0" Grid.Row="1">
                    <Button Style="{StaticResource LinkButton}" Margin="4"
                            Visibility="{Binding CanExecuteIndenterCommand, Converter={StaticResource BoolToVisibility}}"
                            Command="{Binding IndenterCommand}"
                            Content="Indent" />
                    <Button Style="{StaticResource LinkButton}" Margin="4"
                            Visibility="{Binding CanExecuteRefactorRename, Converter={StaticResource BoolToVisibility}}"
                            Command="{Binding RefactorRenameCommand}"
                            Content="{x:Static resx:RubberduckUI.RefactorMenu_Rename}" />
                    <Button Style="{StaticResource LinkButton}" Margin="4"
                            Visibility="{Binding CanExecuteFindAllReferences, Converter={StaticResource BoolToVisibility}}"
                            Command="{Binding FindAllReferencesCommand}"
                            Content="{x:Static resx:RubberduckUI.ContextMenu_FindAllReferences}" />
                </WrapPanel>
            </Grid>
        </Border>

    </Grid>
</UserControl>
