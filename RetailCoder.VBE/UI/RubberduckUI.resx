<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CancelButtonText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="DeclarationType_Class" xml:space="preserve">
    <value>class</value>
  </data>
  <data name="DeclarationType_Constant" xml:space="preserve">
    <value>constant</value>
  </data>
  <data name="DeclarationType_Enumeration" xml:space="preserve">
    <value>enum</value>
  </data>
  <data name="DeclarationType_EnumerationMember" xml:space="preserve">
    <value>enum member</value>
  </data>
  <data name="DeclarationType_Event" xml:space="preserve">
    <value>event</value>
  </data>
  <data name="DeclarationType_Function" xml:space="preserve">
    <value>function</value>
  </data>
  <data name="DeclarationType_LibraryFunction" xml:space="preserve">
    <value>library function</value>
  </data>
  <data name="DeclarationType_Module" xml:space="preserve">
    <value>module</value>
  </data>
  <data name="DeclarationType_Parameter" xml:space="preserve">
    <value>parameter</value>
  </data>
  <data name="DeclarationType_Procedure" xml:space="preserve">
    <value>procedure</value>
  </data>
  <data name="DeclarationType_PropertyGet" xml:space="preserve">
    <value>property get accessor</value>
  </data>
  <data name="DeclarationType_PropertyLet" xml:space="preserve">
    <value>property let accessor</value>
  </data>
  <data name="DeclarationType_PropertySet" xml:space="preserve">
    <value>property set accessor</value>
  </data>
  <data name="DeclarationType_UserDefinedType" xml:space="preserve">
    <value>user-defined type</value>
  </data>
  <data name="DeclarationType_UserDefinedTypeMember" xml:space="preserve">
    <value>user-defined type member</value>
  </data>
  <data name="DeclarationType_Variable" xml:space="preserve">
    <value>variable</value>
  </data>
  <data name="NameLabelText" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="OkButtonText" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="RenameDialog_Caption" xml:space="preserve">
    <value>Rubberduck - Rename</value>
  </data>
  <data name="RenameDialog_InstructionsLabelText" xml:space="preserve">
    <value>Please specify new name for {0} '{1}'.</value>
    <comment>0: DeclarationType; 1: IdentifierName</comment>
  </data>
  <data name="RenameDialog_ModuleRenameError" xml:space="preserve">
    <value>Could not rename module.</value>
  </data>
  <data name="RenameDialog_TitleText" xml:space="preserve">
    <value>Rename identifier</value>
  </data>
  <data name="RenamePresenter_TargetIsInterfaceMemberImplementation" xml:space="preserve">
    <value>Method '{0}' implements '{1}.{2}'. Rename the interface member?</value>
    <comment>0: Selected target; 1: Interface name; 2: Interface member name</comment>
  </data>
  <data name="SettingsCaption_GeneralSettings" xml:space="preserve">
    <value>General Settings</value>
  </data>
  <data name="SettingsCaption_CodeInspections" xml:space="preserve">
    <value>Code Inspection Settings</value>
  </data>
  <data name="SettingsCaption_ToDoSettings" xml:space="preserve">
    <value>ToDo Settings</value>
  </data>
  <data name="SettingsInstructions_CodeInspections" xml:space="preserve">
    <value>Configure inspection severity. Use "DoNotShow" to disable an inspection.</value>
  </data>
  <data name="SettingsInstructions_GeneralSettings" xml:space="preserve">
    <value>Changes will be applied after Rubberduck is reloaded.</value>
  </data>
  <data name="SettingsInstructions_ToDoSettings" xml:space="preserve">
    <value>Configure markers to be recognized in comments.</value>
  </data>
  <data name="RenameDialog_ProjectRenameError" xml:space="preserve">
    <value>Could not rename project.</value>
  </data>
  <data name="DeclarationType_Project" xml:space="preserve">
    <value>project</value>
  </data>
  <data name="DeclarationType_LineLabel" xml:space="preserve">
    <value>line label</value>
  </data>
  <data name="CodeInspections_Inspecting" xml:space="preserve">
    <value>Inspecting...</value>
  </data>
  <data name="CodeInspections_NoIssues" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="ExtractMethod_OutputNone" xml:space="preserve">
    <value>(none)</value>
  </data>
  <data name="Parsing" xml:space="preserve">
    <value>(parsing...)</value>
  </data>
  <data name="RenameDialog_NameLabelText" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="ReorderParamsDialog_Caption" xml:space="preserve">
    <value>Rubberduck - Reorder Parameters</value>
  </data>
  <data name="ReorderParamsDialog_InstructionsLabelText" xml:space="preserve">
    <value>Select a parameter and drag it or use buttons to move it up or down.</value>
  </data>
  <data name="ReorderParamsDialog_MoveDownButtonText" xml:space="preserve">
    <value>Move down</value>
  </data>
  <data name="ReorderParamsDialog_MoveUpButtonText" xml:space="preserve">
    <value>Move up</value>
  </data>
  <data name="ReorderParamsDialog_TitleText" xml:space="preserve">
    <value>Reorder parameters</value>
  </data>
  <data name="DeclarationType_Control" xml:space="preserve">
    <value>control</value>
  </data>
  <data name="ReorderPresenter_OptionalParametersMustBeLastError" xml:space="preserve">
    <value>Optional parameters must be specified at the end of the parameter list.</value>
  </data>
  <data name="ReorderPresenter_LessThanTwoParametersError" xml:space="preserve">
    <value>Less than two parameters in method '{0}'.</value>
    <comment>0: Selected target</comment>
  </data>
  <data name="AllReferences_NoneFound" xml:space="preserve">
    <value>No references were found for identifier '{0}'.</value>
  </data>
  <data name="ReorderPresenter_ParamArrayError" xml:space="preserve">
    <value>ParamArray parameter must be specified last.</value>
  </data>
  <data name="ReorderPresenter_TargetIsInterfaceMemberImplementation" xml:space="preserve">
    <value>Method '{0}' implements '{1}.{2}'. Change interface signature? (will propagate to all implementations)</value>
    <comment>0: Selected target; 1: Interface name; 2: Interface member name</comment>
  </data>
  <data name="RemovePresenter_NoParametersError" xml:space="preserve">
    <value>No parameters in method '{0}'.</value>
    <comment>0: Selected target</comment>
  </data>
  <data name="AllReferences_Caption" xml:space="preserve">
    <value>All references: '{0}'</value>
  </data>
  <data name="RemoveParamsDialog_TitleText" xml:space="preserve">
    <value>Remove parameters</value>
  </data>
  <data name="RemovePresenter_TargetIsInterfaceMemberImplementation" xml:space="preserve">
    <value>Method '{0}' implements '{1}.{2}'. Change interface signature? (will propagate to all implementations)</value>
    <comment>0: Selected target; 1: Interface name; 2: Interface member name</comment>
  </data>
  <data name="RemovePresenter_ConfirmParameter" xml:space="preserve">
    <value>Remove parameter '{0}'?</value>
    <comment>0: Selected parameter</comment>
  </data>
  <data name="RemoveParamsDialog_RemoveIllegalSetterLetterParameter" xml:space="preserve">
    <value>Cannot remove last value from setter or letter.</value>
  </data>
  <data name="ExtractMethod_InvalidSelectionMessage" xml:space="preserve">
    <value>The current selection is not valid.</value>
  </data>
  <data name="ExtractMethod_AccessibilityLabel" xml:space="preserve">
    <value>Accessibility:</value>
  </data>
  <data name="ExtractMethod_Caption" xml:space="preserve">
    <value>Rubberduck - Extract Method</value>
  </data>
  <data name="ExtractMethod_InstructionsText" xml:space="preserve">
    <value>Please specify method name, return type and/or parameters (if applicable), and other options.</value>
  </data>
  <data name="ExtractMethod_NameLabel" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="ExtractMethod_ParametersLabel" xml:space="preserve">
    <value>Parameters:</value>
  </data>
  <data name="ExtractMethod_PreviewLabel" xml:space="preserve">
    <value>Preview:</value>
  </data>
  <data name="ExtractMethod_ReturnLabel" xml:space="preserve">
    <value>Return:</value>
  </data>
  <data name="ExtractMethod_SetBoxLabel" xml:space="preserve">
    <value>Set</value>
  </data>
  <data name="ExtractMethod_TitleText" xml:space="preserve">
    <value>Extract method</value>
  </data>
  <data name="AllImplementations_Caption" xml:space="preserve">
    <value>Implementations of '{0}'</value>
  </data>
  <data name="AllImplementations_NoneFound" xml:space="preserve">
    <value>Class or member '{0}' is not implemented.</value>
  </data>
  <data name="ContextMenu_FindAllReferences" xml:space="preserve">
    <value>&amp;Find all references...</value>
  </data>
  <data name="ContextMenu_FindSymbol" xml:space="preserve">
    <value>Find &amp;symbol...</value>
  </data>
  <data name="ContextMenu_GoToImplementation" xml:space="preserve">
    <value>Go to &amp;implementation...</value>
  </data>
  <data name="RefactorMenu_ExtractMethod" xml:space="preserve">
    <value>Extract &amp;Method</value>
  </data>
  <data name="RefactorMenu_RemoveParameter" xml:space="preserve">
    <value>Remo&amp;ve Parameter</value>
  </data>
  <data name="RefactorMenu_Rename" xml:space="preserve">
    <value>&amp;Rename</value>
  </data>
  <data name="RefactorMenu_ReorderParameters" xml:space="preserve">
    <value>Reorder &amp;Parameters</value>
  </data>
  <data name="RubberduckMenu" xml:space="preserve">
    <value>Rubber&amp;duck</value>
  </data>
  <data name="RubberduckMenu_About" xml:space="preserve">
    <value>&amp;About...</value>
  </data>
  <data name="RubberduckMenu_CodeExplorer" xml:space="preserve">
    <value>&amp;Code Explorer</value>
  </data>
  <data name="RubberduckMenu_CodeInspections" xml:space="preserve">
    <value>Code &amp;Inspections</value>
  </data>
  <data name="RubberduckMenu_Options" xml:space="preserve">
    <value>&amp;Options</value>
  </data>
  <data name="RubberduckMenu_Refactor" xml:space="preserve">
    <value>&amp;Refactor</value>
  </data>
  <data name="RubberduckMenu_SourceControl" xml:space="preserve">
    <value>&amp;Source Control</value>
  </data>
  <data name="RubberduckMenu_ToDoItems" xml:space="preserve">
    <value>To&amp;Do Items</value>
  </data>
  <data name="RubberduckMenu_UnitTests" xml:space="preserve">
    <value>Unit &amp;Tests</value>
  </data>
  <data name="TestMenu_RunAllTests" xml:space="preserve">
    <value>&amp;Run All Tests</value>
  </data>
  <data name="TestMenu_TextExplorer" xml:space="preserve">
    <value>&amp;Test Explorer</value>
  </data>
  <data name="CodeExplorerDockablePresenter_ParseStarted" xml:space="preserve">
    <value>{0} (parsing...)</value>
  </data>
  <data name="CodeInspections_NumberOfIssuesFound" xml:space="preserve">
    <value>Rubberduck Code Inspections - {0}
{1} issue{2} found.
</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Inspections_ChangeGlobalAccessModifierToPublic" xml:space="preserve">
    <value>Replace 'Global' access modifier with 'Public'</value>
  </data>
  <data name="Inspections_ConvertFunctionToProcedure" xml:space="preserve">
    <value>Convert function to procedure</value>
  </data>
  <data name="Inspections_DeclareAsExplicitVariant" xml:space="preserve">
    <value>Declare as explicit Variant</value>
  </data>
  <data name="Inspections_IntroduceLocalVariable" xml:space="preserve">
    <value>Introduce local variable</value>
  </data>
  <data name="Inspections_PassParamByReference" xml:space="preserve">
    <value>Pass parameter by reference</value>
  </data>
  <data name="Inspections_PassParamByRefExplicitly" xml:space="preserve">
    <value>Pass parameter by reference explicitly</value>
  </data>
  <data name="Inspections_PassParamByValue" xml:space="preserve">
    <value>Pass parameter by value</value>
  </data>
  <data name="Inspections_RemoveComment" xml:space="preserve">
    <value>Remove comment</value>
  </data>
  <data name="Inspections_RemoveObsoleteStatement" xml:space="preserve">
    <value>Remove obsolete statement</value>
  </data>
  <data name="Inspections_RemoveTypeHints" xml:space="preserve">
    <value>Remove type hints</value>
  </data>
  <data name="Inspections_RemoveUnassignedVariable" xml:space="preserve">
    <value>Remove unassigned variable</value>
  </data>
  <data name="Inspections_RemoveUnusedDeclaration" xml:space="preserve">
    <value>Remove unused declaration</value>
  </data>
  <data name="Inspections_RemoveUnusedParameter" xml:space="preserve">
    <value>Remove unused parameter</value>
  </data>
  <data name="Inspections_RemoveUsageBreaksCode" xml:space="preserve">
    <value>Remove usage (breaks code)</value>
  </data>
  <data name="Inspections_ReplaceRemWithSingleQuoteMarker" xml:space="preserve">
    <value>Replace 'Rem' usage with a single-quote comment marker</value>
  </data>
  <data name="Inspections_ReturnExplicitVariant" xml:space="preserve">
    <value>Return explicit Variant</value>
  </data>
  <data name="Inspections_SpecifyPublicModifierExplicitly" xml:space="preserve">
    <value>Specify Public access modifier explicitly</value>
  </data>
  <data name="Inspections_SplitDeclarations" xml:space="preserve">
    <value>Separate multiple declarations into multiple instructions</value>
  </data>
  <data name="Inspections_UnassignedVariableToDo" xml:space="preserve">
    <value>TODO</value>
  </data>
  <data name="LoadConfigError" xml:space="preserve">
    <value>Error Loading Rubberduck Configuration</value>
  </data>
  <data name="ParseProgress" xml:space="preserve">
    <value>Parsing '{0}'...</value>
  </data>
  <data name="ParseStarted" xml:space="preserve">
    <value>Parsing project components...</value>
  </data>
  <data name="PromptLoadDefaultConfig" xml:space="preserve">
    <value>{0}
{1}

{2}

Would you like to restore default configuration?
Warning: All customized settings will be lost.</value>
  </data>
  <data name="ResolutionProgress" xml:space="preserve">
    <value>Resolving '{0}'...</value>
  </data>
  <data name="RubberduckLoadFailure" xml:space="preserve">
    <value>Rubberduck Add-In could not be loaded</value>
  </data>
  <data name="Rubberduck_AboutBuild" xml:space="preserve">
    <value>Build {0} ({1})</value>
    <comment>0: Version; 1: ProcessorArchitecture</comment>
  </data>
  <data name="ToDoMarkerBug" xml:space="preserve">
    <value>BUG:</value>
  </data>
  <data name="ToDoMarkerNote" xml:space="preserve">
    <value>NOTE:</value>
  </data>
  <data name="ToDoMarkerToDo" xml:space="preserve">
    <value>TODO:</value>
  </data>
</root>