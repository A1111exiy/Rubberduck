//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18444
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rubberduck.Inspections {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class InspectionsUI {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal InspectionsUI() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Rubberduck.Inspections.InspectionsUI", typeof(InspectionsUI).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameter is passed by value, but is assigned a new value/reference. Consider making a local copy instead if the caller isn&apos;t supposed to know the new value. If the caller should see the new value, the parameter should be passed ByRef instead, and you have a bug. ähnelt.
        /// </summary>
        internal static string AssignedByValParameterInspectionMeta {
            get {
                return ResourceManager.GetString("AssignedByValParameterInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ByVal parameter is assigned ähnelt.
        /// </summary>
        internal static string AssignedByValParameterInspectionName {
            get {
                return ResourceManager.GetString("AssignedByValParameterInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameter &apos;{0}&apos; is passed ByVal and assigned a value ähnelt.
        /// </summary>
        internal static string AssignedByValParameterInspectionResultFormat {
            get {
                return ResourceManager.GetString("AssignedByValParameterInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Code quality issues ähnelt.
        /// </summary>
        internal static string CodeQualityIssues {
            get {
                return ResourceManager.GetString("CodeQualityIssues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Constant value is declared but Rubberduck could not find any reference to it. Consider removing the unused declaration. ähnelt.
        /// </summary>
        internal static string ConstantNotUsedInspectionMeta {
            get {
                return ResourceManager.GetString("ConstantNotUsedInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Constant is not used ähnelt.
        /// </summary>
        internal static string ConstantNotUsedInspectionName {
            get {
                return ResourceManager.GetString("ConstantNotUsedInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Convert function to procedure ähnelt.
        /// </summary>
        internal static string ConvertFunctionToProcedureQuickFix {
            get {
                return ResourceManager.GetString("ConvertFunctionToProcedureQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Declare as explicit Variant ähnelt.
        /// </summary>
        internal static string DeclareAsExplicitVariantQuickFix {
            get {
                return ResourceManager.GetString("DeclareAsExplicitVariantQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Consider naming your VBA project. ähnelt.
        /// </summary>
        internal static string DefaultProjectNameInspectionMeta {
            get {
                return ResourceManager.GetString("DefaultProjectNameInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Project has default project name ähnelt.
        /// </summary>
        internal static string DefaultProjectNameInspectionName {
            get {
                return ResourceManager.GetString("DefaultProjectNameInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Disable this inspection ähnelt.
        /// </summary>
        internal static string DisableThisInspection {
            get {
                return ResourceManager.GetString("DisableThisInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Prefer &apos;vbNullString&apos; to an empty string literal ähnelt.
        /// </summary>
        internal static string EmptyStringLiteralInspection {
            get {
                return ResourceManager.GetString("EmptyStringLiteralInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The built-in constant &apos;vbNullString&apos; is a null string pointer taking up 0 bytes of memory, that unambiguously conveys the intent of an empty string. ähnelt.
        /// </summary>
        internal static string EmptyStringLiteralInspectionMeta {
            get {
                return ResourceManager.GetString("EmptyStringLiteralInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Empty string literal ähnelt.
        /// </summary>
        internal static string EmptyStringLiteralInspectionName {
            get {
                return ResourceManager.GetString("EmptyStringLiteralInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Replace empty string with the &apos;vbNullString&apos; constant ähnelt.
        /// </summary>
        internal static string EmptyStringLiteralInspectionQuickFix {
            get {
                return ResourceManager.GetString("EmptyStringLiteralInspectionQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;vbNullString&apos; preferred to empty string literals ähnelt.
        /// </summary>
        internal static string EmptyStringLiteralInspectionResultFormat {
            get {
                return ResourceManager.GetString("EmptyStringLiteralInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Consider exposing a property instead. ähnelt.
        /// </summary>
        internal static string EncapsulatePublicFieldInspectionMeta {
            get {
                return ResourceManager.GetString("EncapsulatePublicFieldInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Public field breaks encapsulation ähnelt.
        /// </summary>
        internal static string EncapsulatePublicFieldInspectionName {
            get {
                return ResourceManager.GetString("EncapsulatePublicFieldInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Encapsulate field &apos;{0}&apos; with a property ähnelt.
        /// </summary>
        internal static string EncapsulatePublicFieldInspectionQuickFix {
            get {
                return ResourceManager.GetString("EncapsulatePublicFieldInspectionQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Public field &apos;{0}&apos; breaks encapsulation ähnelt.
        /// </summary>
        internal static string EncapsulatePublicFieldInspectionResultFormat {
            get {
                return ResourceManager.GetString("EncapsulatePublicFieldInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A member is written as a function, but used as a procedure. Consider converting the &apos;Function&apos; into a &apos;Sub&apos;. ähnelt.
        /// </summary>
        internal static string FunctionReturnValueNotUsedInspectionMeta {
            get {
                return ResourceManager.GetString("FunctionReturnValueNotUsedInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Function return value is never used. ähnelt.
        /// </summary>
        internal static string FunctionReturnValueNotUsedInspectionName {
            get {
                return ResourceManager.GetString("FunctionReturnValueNotUsedInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Return value of function &apos;{0}&apos; is never used. ähnelt.
        /// </summary>
        internal static string FunctionReturnValueNotUsedInspectionResultFormat {
            get {
                return ResourceManager.GetString("FunctionReturnValueNotUsedInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {0} &apos;{1}&apos; is not used ähnelt.
        /// </summary>
        internal static string IdentifierNotUsedInspectionResultFormat {
            get {
                return ResourceManager.GetString("IdentifierNotUsedInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ignore once ähnelt.
        /// </summary>
        internal static string IgnoreOnce {
            get {
                return ResourceManager.GetString("IgnoreOnce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implicit references to the active sheet make the code frail and harder to debug. Consider making these references explicit when they&apos;re intended, and prefer working off object references. Ignore if the member call is referring to a type Rubberduck can&apos;t resolve. ähnelt.
        /// </summary>
        internal static string ImplicitActiveSheetReferenceInspectionMeta {
            get {
                return ResourceManager.GetString("ImplicitActiveSheetReferenceInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implicit reference to ActiveSheet ähnelt.
        /// </summary>
        internal static string ImplicitActiveSheetReferenceInspectionName {
            get {
                return ResourceManager.GetString("ImplicitActiveSheetReferenceInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implicit references to the active workbook make the code frail and harder to debug. Consider making these references explicit when they&apos;re intended, and prefer working off object references. Ignore if the member call is referring to a type Rubberduck can&apos;t resolve. ähnelt.
        /// </summary>
        internal static string ImplicitActiveWorkbookReferenceInspectionMeta {
            get {
                return ResourceManager.GetString("ImplicitActiveWorkbookReferenceInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implicit reference to ActiveWorkbook ähnelt.
        /// </summary>
        internal static string ImplicitActiveWorkbookReferenceInspectionName {
            get {
                return ResourceManager.GetString("ImplicitActiveWorkbookReferenceInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameters are passed by reference unless specified otherwise, which can be confusing and bug-prone. Prefer passing parameters by value, and specify ByRef explicitly when passing parameters by reference. ähnelt.
        /// </summary>
        internal static string ImplicitByRefParameterInspectionMeta {
            get {
                return ResourceManager.GetString("ImplicitByRefParameterInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implicit ByRef parameter ähnelt.
        /// </summary>
        internal static string ImplicitByRefParameterInspectionName {
            get {
                return ResourceManager.GetString("ImplicitByRefParameterInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameter &apos;{0}&apos; is implicitly passed by reference ähnelt.
        /// </summary>
        internal static string ImplicitByRefParameterInspectionResultFormat {
            get {
                return ResourceManager.GetString("ImplicitByRefParameterInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Pass parameter by reference explicitly ähnelt.
        /// </summary>
        internal static string ImplicitByRefParameterQuickFix {
            get {
                return ResourceManager.GetString("ImplicitByRefParameterQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Module members are public by default, which can be counter-intuitive. Consider specifying explicit access modifiers to avoid ambiguity. ähnelt.
        /// </summary>
        internal static string ImplicitPublicMemberInspectionMeta {
            get {
                return ResourceManager.GetString("ImplicitPublicMemberInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implicitly public member ähnelt.
        /// </summary>
        internal static string ImplicitPublicMemberInspectionName {
            get {
                return ResourceManager.GetString("ImplicitPublicMemberInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Member &apos;{0}&apos; is implicitly public ähnelt.
        /// </summary>
        internal static string ImplicitPublicMemberInspectionResultFormat {
            get {
                return ResourceManager.GetString("ImplicitPublicMemberInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {0} &apos;{1}&apos; is implicitly Variant ähnelt.
        /// </summary>
        internal static string ImplicitVariantDeclarationInspectionResultFormat {
            get {
                return ResourceManager.GetString("ImplicitVariantDeclarationInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Members with a return value implicitly return a &apos;Variant&apos; unless specified otherwise. Consider returning an explicit &apos;Variant&apos; when the return type isn&apos;t known, or specify it explicitly. ähnelt.
        /// </summary>
        internal static string ImplicitVariantReturnTypeInspectionMeta {
            get {
                return ResourceManager.GetString("ImplicitVariantReturnTypeInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Member return type is implicitly &apos;Variant&apos; ähnelt.
        /// </summary>
        internal static string ImplicitVariantReturnTypeInspectionName {
            get {
                return ResourceManager.GetString("ImplicitVariantReturnTypeInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Return type of member &apos;{0}&apos; is implicitly &apos;Variant&apos; ähnelt.
        /// </summary>
        internal static string ImplicitVariantReturnTypeInspectionResultFormat {
            get {
                return ResourceManager.GetString("ImplicitVariantReturnTypeInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die declaration of  ähnelt.
        /// </summary>
        internal static string Inspections_DeclarationOf {
            get {
                return ResourceManager.GetString("Inspections_DeclarationOf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die TODO ähnelt.
        /// </summary>
        internal static string Inspections_UnassignedVariableTodo {
            get {
                return ResourceManager.GetString("Inspections_UnassignedVariableTodo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die usage of  ähnelt.
        /// </summary>
        internal static string Inspections_UsageOf {
            get {
                return ResourceManager.GetString("Inspections_UsageOf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Context type &apos;{0}&apos; is not valid for {1}. ähnelt.
        /// </summary>
        internal static string InvalidContextTypeInspectionFix {
            get {
                return ResourceManager.GetString("InvalidContextTypeInspectionFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Language opportunities ähnelt.
        /// </summary>
        internal static string LanguageOpportunities {
            get {
                return ResourceManager.GetString("LanguageOpportunities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Maintainability &amp; readability issues ähnelt.
        /// </summary>
        internal static string MaintainabilityAndReadabilityIssues {
            get {
                return ResourceManager.GetString("MaintainabilityAndReadabilityIssues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Write variable on one line ähnelt.
        /// </summary>
        internal static string MakeSingleLineParameterQuickFix {
            get {
                return ResourceManager.GetString("MakeSingleLineParameterQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A module-level variable used only in one procedure should be declared in that procedure. ähnelt.
        /// </summary>
        internal static string MoveFieldCloserToUsageInspectionMeta {
            get {
                return ResourceManager.GetString("MoveFieldCloserToUsageInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scope of variable is broader than it needs to be ähnelt.
        /// </summary>
        internal static string MoveFieldCloserToUsageInspectionName {
            get {
                return ResourceManager.GetString("MoveFieldCloserToUsageInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Move module-level variable &apos;{0}&apos; to a smaller scope. ähnelt.
        /// </summary>
        internal static string MoveFieldCloserToUsageInspectionResultFormat {
            get {
                return ResourceManager.GetString("MoveFieldCloserToUsageInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Consider continuing long signatures between parameters. Splitting a parameter declaration across multiple lines arguably hurts readability. ähnelt.
        /// </summary>
        internal static string MultilineParameterInspectionMeta {
            get {
                return ResourceManager.GetString("MultilineParameterInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameter declaration is split on multiple lines ähnelt.
        /// </summary>
        internal static string MultilineParameterInspectionName {
            get {
                return ResourceManager.GetString("MultilineParameterInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameter &apos;{0}&apos; is specified on multiple lines ähnelt.
        /// </summary>
        internal static string MultilineParameterInspectionResultFormat {
            get {
                return ResourceManager.GetString("MultilineParameterInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Declaring multiple variables in the same instruction is legal, but should be used sparingly. Consider declaring variables closer to their usage, in a single instruction per declaration. ähnelt.
        /// </summary>
        internal static string MultipleDeclarationsInspectionMeta {
            get {
                return ResourceManager.GetString("MultipleDeclarationsInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Instruction contains multiple declarations ähnelt.
        /// </summary>
        internal static string MultipleDeclarationsInspectionName {
            get {
                return ResourceManager.GetString("MultipleDeclarationsInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck only uses the first &apos;@Folder&apos; annotation in a code module; consider removing extraneous ones. ähnelt.
        /// </summary>
        internal static string MultipleFolderAnnotationsInspectionMeta {
            get {
                return ResourceManager.GetString("MultipleFolderAnnotationsInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Module has more than one folder annotation. ähnelt.
        /// </summary>
        internal static string MultipleFolderAnnotationsInspectionNamer {
            get {
                return ResourceManager.GetString("MultipleFolderAnnotationsInspectionNamer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; has more than one &apos;@Folder&apos; annotation. ähnelt.
        /// </summary>
        internal static string MultipleFolderAnnotationsInspectionResultFormat {
            get {
                return ResourceManager.GetString("MultipleFolderAnnotationsInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This is likely a bug. The return value of a function or property getter must be assigned before exiting, otherwise the program will not be working with expected results. If a function has no meaningful return value, consider declaring it as a &apos;Sub&apos; procedure instead. ähnelt.
        /// </summary>
        internal static string NonReturningFunctionInspectionMeta {
            get {
                return ResourceManager.GetString("NonReturningFunctionInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Non-returning function or property getter ähnelt.
        /// </summary>
        internal static string NonReturningFunctionInspectionName {
            get {
                return ResourceManager.GetString("NonReturningFunctionInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Return value for member &apos;{0}&apos; is never assigned ähnelt.
        /// </summary>
        internal static string NonReturningFunctionInspectionResultFormat {
            get {
                return ResourceManager.GetString("NonReturningFunctionInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The &apos;Call&apos; statement is no longer required to call procedures, and only exists in the language to support legacy code that required it; it can be safely rewritten to an implicit call. ähnelt.
        /// </summary>
        internal static string ObsoleteCallStatementInspectionMeta {
            get {
                return ResourceManager.GetString("ObsoleteCallStatementInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;Call&apos; statement usage ähnelt.
        /// </summary>
        internal static string ObsoleteCallStatementInspectionName {
            get {
                return ResourceManager.GetString("ObsoleteCallStatementInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The &apos;Rem&apos; statement only exists in the language to support legacy code that required it; it can be safely replaced with an apostrophe / single-quote comment. ähnelt.
        /// </summary>
        internal static string ObsoleteCommentSyntaxInspectionMeta {
            get {
                return ResourceManager.GetString("ObsoleteCommentSyntaxInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;Rem&apos; statement usage ähnelt.
        /// </summary>
        internal static string ObsoleteCommentSyntaxInspectionName {
            get {
                return ResourceManager.GetString("ObsoleteCommentSyntaxInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The &apos;Global&apos; keyword only exists in the language to support legacy code that required it; it can be safely replaced with the &apos;Public&apos; modifier. ähnelt.
        /// </summary>
        internal static string ObsoleteGlobalInspectionMeta {
            get {
                return ResourceManager.GetString("ObsoleteGlobalInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;Global&apos; statement usage ähnelt.
        /// </summary>
        internal static string ObsoleteGlobalInspectionName {
            get {
                return ResourceManager.GetString("ObsoleteGlobalInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Replace &apos;Global&apos; access modifier with &apos;Public&apos; ähnelt.
        /// </summary>
        internal static string ObsoleteGlobalInspectionQuickFix {
            get {
                return ResourceManager.GetString("ObsoleteGlobalInspectionQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {0} &apos;{1}&apos; uses obsolete &apos;Global&apos; access modifier ähnelt.
        /// </summary>
        internal static string ObsoleteGlobalInspectionResultFormat {
            get {
                return ResourceManager.GetString("ObsoleteGlobalInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The &apos;Let&apos; statement only exists in the language to support legacy code that required it; it can be safely removed, since modern VBA does not require that keyword for value assignments. ähnelt.
        /// </summary>
        internal static string ObsoleteLetStatementInspectionMeta {
            get {
                return ResourceManager.GetString("ObsoleteLetStatementInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;Let&apos; statement usage ähnelt.
        /// </summary>
        internal static string ObsoleteLetStatementInspectionName {
            get {
                return ResourceManager.GetString("ObsoleteLetStatementInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Type hint characters only exist in the language to support legacy code that required it; they can be safely replaced in declarations with an &quot;As&quot; type clause that specifies the type explicitly, and they can be omitted in other identifier references. ähnelt.
        /// </summary>
        internal static string ObsoleteTypeHintInspectionMeta {
            get {
                return ResourceManager.GetString("ObsoleteTypeHintInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Type hint usage ähnelt.
        /// </summary>
        internal static string ObsoleteTypeHintInspectionName {
            get {
                return ResourceManager.GetString("ObsoleteTypeHintInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Arrays are typically zero-based. This option changes the default lower boundary for implicitly-sized arrays, which can introduce off-by-one errors if one isn&apos;t cautious. ähnelt.
        /// </summary>
        internal static string OptionBaseInspectionMeta {
            get {
                return ResourceManager.GetString("OptionBaseInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;Option Base 1&apos; is specified ähnelt.
        /// </summary>
        internal static string OptionBaseInspectionName {
            get {
                return ResourceManager.GetString("OptionBaseInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck cannot see variables that aren&apos;t declared. VBA will happily compile a typo: use &apos;Option Explicit&apos; to prevent successfully compiling an erroneous program. ähnelt.
        /// </summary>
        internal static string OptionExplicitInspectionMeta {
            get {
                return ResourceManager.GetString("OptionExplicitInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;Option Explicit&apos; is not specified ähnelt.
        /// </summary>
        internal static string OptionExplicitInspectionName {
            get {
                return ResourceManager.GetString("OptionExplicitInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Option Explicit is not specified in &apos;{0}&apos; ähnelt.
        /// </summary>
        internal static string OptionExplicitInspectionResultFormat {
            get {
                return ResourceManager.GetString("OptionExplicitInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Specify &apos;Option Explicit&apos; ähnelt.
        /// </summary>
        internal static string OptionExplicitQuickFix {
            get {
                return ResourceManager.GetString("OptionExplicitQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A parameter that is passed by reference and isn&apos;t assigned a new value/reference, could be passed by value instead. ähnelt.
        /// </summary>
        internal static string ParameterCanBeByValInspectionMeta {
            get {
                return ResourceManager.GetString("ParameterCanBeByValInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameter can be passed by value ähnelt.
        /// </summary>
        internal static string ParameterCanBeByValInspectionName {
            get {
                return ResourceManager.GetString("ParameterCanBeByValInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameter &apos;{0}&apos; can be passed by value ähnelt.
        /// </summary>
        internal static string ParameterCanBeByValInspectionResultFormat {
            get {
                return ResourceManager.GetString("ParameterCanBeByValInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A parameter is passed into a member that does not use it. Consider removing that parameter. ähnelt.
        /// </summary>
        internal static string ParameterNotUsedInspectionMeta {
            get {
                return ResourceManager.GetString("ParameterNotUsedInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameter is not referred to ähnelt.
        /// </summary>
        internal static string ParameterNotUsedInspectionName {
            get {
                return ResourceManager.GetString("ParameterNotUsedInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameter &apos;{0}&apos; is never used ähnelt.
        /// </summary>
        internal static string ParameterNotUsedInspectionResultFormat {
            get {
                return ResourceManager.GetString("ParameterNotUsedInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Pass parameter by reference ähnelt.
        /// </summary>
        internal static string PassParameterByReferenceQuickFix {
            get {
                return ResourceManager.GetString("PassParameterByReferenceQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Pass parameter by value ähnelt.
        /// </summary>
        internal static string PassParameterByValueQuickFix {
            get {
                return ResourceManager.GetString("PassParameterByValueQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A procedure that only has one parameter passed by reference that is assigned a new value/reference before the procedure exits, is using a ByRef parameter as a return value: consider making it a function instead. ähnelt.
        /// </summary>
        internal static string ProcedureCanBeWrittenAsFunctionInspectionMeta {
            get {
                return ResourceManager.GetString("ProcedureCanBeWrittenAsFunctionInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Procedure can be written as a function ähnelt.
        /// </summary>
        internal static string ProcedureCanBeWrittenAsFunctionInspectionName {
            get {
                return ResourceManager.GetString("ProcedureCanBeWrittenAsFunctionInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Procedure &apos;{0}&apos; can be written as a function. ähnelt.
        /// </summary>
        internal static string ProcedureCanBeWrittenAsFunctionInspectionResultFormat {
            get {
                return ResourceManager.GetString("ProcedureCanBeWrittenAsFunctionInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubberduck could not find any caller for a procedure. If the procedure is hooked to a macro-button, used as a user-defined function (UDF) or handles an application event that Rubberduck didn&apos;t know of you can safely ignore this inspection result; otherwise, consider removing it. ähnelt.
        /// </summary>
        internal static string ProcedureNotUsedInspectionMeta {
            get {
                return ResourceManager.GetString("ProcedureNotUsedInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Procedure is not referred to ähnelt.
        /// </summary>
        internal static string ProcedureNotUsedInspectionName {
            get {
                return ResourceManager.GetString("ProcedureNotUsedInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Implement as function and update usages. ähnelt.
        /// </summary>
        internal static string ProcedureShouldBeFunctionInspectionQuickFix {
            get {
                return ResourceManager.GetString("ProcedureShouldBeFunctionInspectionQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Procedure &apos;{0}&apos; can be written as a function ähnelt.
        /// </summary>
        internal static string ProcedureShouldBeFunctionInspectionResultFormat {
            get {
                return ResourceManager.GetString("ProcedureShouldBeFunctionInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {0}: {1} - {2}.{3}, line {4} ähnelt.
        /// </summary>
        internal static string QualifiedSelectionInspection {
            get {
                return ResourceManager.GetString("QualifiedSelectionInspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Fix all occurrences in module ähnelt.
        /// </summary>
        internal static string QuickFix_ThisModule {
            get {
                return ResourceManager.GetString("QuickFix_ThisModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Fix all occurrences in project ähnelt.
        /// </summary>
        internal static string QuickFix_ThisProject {
            get {
                return ResourceManager.GetString("QuickFix_ThisProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Change &apos;{0}&apos; to &apos;{0}$&apos; ähnelt.
        /// </summary>
        internal static string QuickFixUseTypedFunction_ {
            get {
                return ResourceManager.GetString("QuickFixUseTypedFunction_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove comment ähnelt.
        /// </summary>
        internal static string RemoveCommentQuickFix {
            get {
                return ResourceManager.GetString("RemoveCommentQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove obsolete statement ähnelt.
        /// </summary>
        internal static string RemoveObsoleteStatementQuickFix {
            get {
                return ResourceManager.GetString("RemoveObsoleteStatementQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove type hints ähnelt.
        /// </summary>
        internal static string RemoveTypeHintsQuickFix {
            get {
                return ResourceManager.GetString("RemoveTypeHintsQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove unassigned variable ähnelt.
        /// </summary>
        internal static string RemoveUnassignedIdentifierQuickFix {
            get {
                return ResourceManager.GetString("RemoveUnassignedIdentifierQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove usage (breaks code) ähnelt.
        /// </summary>
        internal static string RemoveUnassignedVariableUsageQuickFix {
            get {
                return ResourceManager.GetString("RemoveUnassignedVariableUsageQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove unused declaration ähnelt.
        /// </summary>
        internal static string RemoveUnusedDeclarationQuickFix {
            get {
                return ResourceManager.GetString("RemoveUnusedDeclarationQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove unused parameter ähnelt.
        /// </summary>
        internal static string RemoveUnusedParameterQuickFix {
            get {
                return ResourceManager.GetString("RemoveUnusedParameterQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Replace &apos;Rem&apos; usage with a single-quote comment marker ähnelt.
        /// </summary>
        internal static string ReplaceCommentMarkerQuickFix {
            get {
                return ResourceManager.GetString("ReplaceCommentMarkerQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A self-assigned object variable declaration at procedure scope changes how nulling the reference works, which can lead to unexpected behavior. ähnelt.
        /// </summary>
        internal static string SelfAssignedDeclarationInspectionMeta {
            get {
                return ResourceManager.GetString("SelfAssignedDeclarationInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Object variable reference is self-assigned ähnelt.
        /// </summary>
        internal static string SelfAssignedDeclarationInspectionName {
            get {
                return ResourceManager.GetString("SelfAssignedDeclarationInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Object reference &apos;{0}&apos; is self-assigned ähnelt.
        /// </summary>
        internal static string SelfAssignedDeclarationInspectionResultFormat {
            get {
                return ResourceManager.GetString("SelfAssignedDeclarationInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Return explicit Variant ähnelt.
        /// </summary>
        internal static string SetExplicitVariantReturnTypeQuickFix {
            get {
                return ResourceManager.GetString("SetExplicitVariantReturnTypeQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Specify Public access modifier explicitly ähnelt.
        /// </summary>
        internal static string SpecifyExplicitPublicModifierQuickFix {
            get {
                return ResourceManager.GetString("SpecifyExplicitPublicModifierQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Separate multiple declarations into multiple instructions ähnelt.
        /// </summary>
        internal static string SplitMultipleDeclarationsQuickFix {
            get {
                return ResourceManager.GetString("SplitMultipleDeclarationsQuickFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This is likely a bug. A variable is being referred to, but is never assigned. ähnelt.
        /// </summary>
        internal static string UnassignedVariableUsageInspectionMeta {
            get {
                return ResourceManager.GetString("UnassignedVariableUsageInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Variable is used but not assigned ähnelt.
        /// </summary>
        internal static string UnassignedVariableUsageInspectionName {
            get {
                return ResourceManager.GetString("UnassignedVariableUsageInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Variable &apos;{0}&apos; is used but not assigned ähnelt.
        /// </summary>
        internal static string UnassignedVariableUsageInspectionResultFormat {
            get {
                return ResourceManager.GetString("UnassignedVariableUsageInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A string-returning equivalent function exists and should preferably be used to avoid implicit type conversions. ähnelt.
        /// </summary>
        internal static string UntypedFunctionUsageInspectionMeta {
            get {
                return ResourceManager.GetString("UntypedFunctionUsageInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use of variant-returning string function ähnelt.
        /// </summary>
        internal static string UntypedFunctionUsageInspectionName {
            get {
                return ResourceManager.GetString("UntypedFunctionUsageInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Identifier names should indicate what they&apos;re used for and should be readable; avoid disemvoweling, numeric suffixes, and 1-2 character names. ähnelt.
        /// </summary>
        internal static string UseMeaningfulNameInspectionMeta {
            get {
                return ResourceManager.GetString("UseMeaningfulNameInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use meaningful names ähnelt.
        /// </summary>
        internal static string UseMeaningfulNameInspectionName {
            get {
                return ResourceManager.GetString("UseMeaningfulNameInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Consider renaming {0} &apos;{1}&apos; ähnelt.
        /// </summary>
        internal static string UseMeaningfulNameInspectionResultFormat {
            get {
                return ResourceManager.GetString("UseMeaningfulNameInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A variable is declared, but never assigned a value/reference. If Rubberduck is correct, the variable could probably be safely removed. ähnelt.
        /// </summary>
        internal static string VariableNotAssignedInspectionMeta {
            get {
                return ResourceManager.GetString("VariableNotAssignedInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Variable is declared but never assigned ähnelt.
        /// </summary>
        internal static string VariableNotAssignedInspectionName {
            get {
                return ResourceManager.GetString("VariableNotAssignedInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Variable &apos;{0}&apos; is never assigned ähnelt.
        /// </summary>
        internal static string VariableNotAssignedInspectionResultFormat {
            get {
                return ResourceManager.GetString("VariableNotAssignedInspectionResultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A variable is declared and assigned a value/reference, but it&apos;s never referred to. ähnelt.
        /// </summary>
        internal static string VariableNotUsedInspectionMeta {
            get {
                return ResourceManager.GetString("VariableNotUsedInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Variable is not referred to ähnelt.
        /// </summary>
        internal static string VariableNotUsedInspectionName {
            get {
                return ResourceManager.GetString("VariableNotUsedInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A variable whose type isn&apos;t explicitly declared, is implicitly &apos;Variant&apos;. Consider making it an explicit &apos;Variant&apos; if that&apos;s intended, or declare a more specific type. ähnelt.
        /// </summary>
        internal static string VariableTypeNotDeclaredInspectionMeta {
            get {
                return ResourceManager.GetString("VariableTypeNotDeclaredInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Variable is implicitly &apos;Variant&apos; ähnelt.
        /// </summary>
        internal static string VariableTypeNotDeclaredInspectionName {
            get {
                return ResourceManager.GetString("VariableTypeNotDeclaredInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A property that exposes a mutator but no accessor is a design smell and makes a confusing API. Consider exposing a getter, or converting the mutator to a method. ähnelt.
        /// </summary>
        internal static string WriteOnlyPropertyInspectionMeta {
            get {
                return ResourceManager.GetString("WriteOnlyPropertyInspectionMeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Write-only property ähnelt.
        /// </summary>
        internal static string WriteOnlyPropertyInspectionName {
            get {
                return ResourceManager.GetString("WriteOnlyPropertyInspectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Property &apos;{0}&apos; has no getter ähnelt.
        /// </summary>
        internal static string WriteOnlyPropertyInspectionResultFormat {
            get {
                return ResourceManager.GetString("WriteOnlyPropertyInspectionResultFormat", resourceCulture);
            }
        }
    }
}
