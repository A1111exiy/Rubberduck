using Rubberduck.Inspections.Abstract;
using System.Linq;
using Rubberduck.Parsing;
using Rubberduck.VBEditor;
using Rubberduck.Inspections.Resources;
using Rubberduck.Parsing.Grammar;
using Rubberduck.Parsing.Symbols;
using System.Windows.Forms;
using Rubberduck.UI.Refactorings;
using Rubberduck.Common;
using Antlr4.Runtime;

namespace Rubberduck.Inspections.QuickFixes
{
    public class AssignedByValParameterMakeLocalCopyQuickFix : QuickFixBase
    {
        private readonly Declaration _target;
        private string _localCopyVariableName;
        private bool _isQuickFixUnitTest;
        private QuickFixHelper _quickFixHelper;

        public AssignedByValParameterMakeLocalCopyQuickFix(Declaration target, QualifiedSelection selection)
            : base(target.Context, selection, InspectionsUI.AssignedByValParameterQuickFix)
        {
            _target = target;
            _isQuickFixUnitTest = false;
            _localCopyVariableName = "x" + _target.IdentifierName.CapitalizeFirstLetter();
            _quickFixHelper = new QuickFixHelper(_target, selection);
        }

        public override bool CanFixInModule { get { return false; } }
        public override bool CanFixInProject { get { return false; } }

        //This function exists solely to support unit testing 
        public void TESTONLY_FixUsingAutoGeneratedName(string suggestedName = "")
        {
            //Prevent the popup dialog and forces the use of the Suggested Name
            _isQuickFixUnitTest = true;
            if (suggestedName.Length > 0)
            {
                _localCopyVariableName = suggestedName;  //unit test poses as user input
            }

            Fix();
        }

        public override void Fix()
        {

            SetLocalCopyVariableName();

            if (!ProposedLocalVariableNameIsValid()
                || IsCancelled)
            {
                return;
            }

            ModifyBlockToUseLocalCopyVariable();
        }

        private void SetLocalCopyVariableName()
        {
            using (var view = new AssignedByValParameterQuickFixDialog(_target, Selection))
            {
                view.NewName = _localCopyVariableName;
                view.IdentifierNamesAlreadyDeclared = _quickFixHelper.GetIdentifierNamesAccessibleToProcedureContext();
                if (!_isQuickFixUnitTest)
                {
                    view.ShowDialog();
                    IsCancelled = view.DialogResult == DialogResult.Cancel;
                }
                if (!IsCancelled)
                {
                    _localCopyVariableName = view.NewName;
                }
            }
        }

        private bool ProposedLocalVariableNameIsValid()
        {
            var validator = new VariableNameValidator(_localCopyVariableName);
            return validator.IsValidName()
                && !_quickFixHelper.GetIdentifierNamesAccessibleToProcedureContext().Any(name => name.ToUpper().Equals(_localCopyVariableName.ToUpper()));
        }

        private void ModifyBlockToUseLocalCopyVariable()
        {
            ReplaceAssignedByValParameterReferences();

            InsertLocalVariableDeclarationAndAssignment(GetFirstBlockStartLine());
        }

        private void ReplaceAssignedByValParameterReferences()
        {
            foreach (IdentifierReference identifierReference in _target.References)
            {
                _quickFixHelper.ReplaceIdentifierReferenceNameInModule(identifierReference, _localCopyVariableName);
            }
        }
        private int GetFirstBlockStartLine()
        {
            var blocks = _quickFixHelper.GetBlockStmtContextsForContext(_target.Context.Parent.Parent);
            return blocks.FirstOrDefault().Start.Line;
        }
        private void InsertLocalVariableDeclarationAndAssignment(int firstBlockLineNumber)
        {
            string[] newLines = { BuildLocalCopyDeclaration(), BuildLocalCopyAssignment() };
            _quickFixHelper.InsertAfterCodeModuleLine(firstBlockLineNumber - 1, newLines);
        }
        private string BuildLocalCopyDeclaration()
        {
            return Tokens.Dim + " " + _localCopyVariableName + " " + Tokens.As 
                + " " + _target.AsTypeName;
        }

        private string BuildLocalCopyAssignment()
        {
            return (SymbolList.ValueTypes.Contains(_target.AsTypeName) ? string.Empty : Tokens.Set + " ") 
                + _localCopyVariableName + " = " + _target.IdentifierName;
        }
    }
}
