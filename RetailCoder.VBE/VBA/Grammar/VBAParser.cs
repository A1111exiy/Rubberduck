//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Mathieu\Source\Repos\Rubberduck\RetailCoder.VBE\VBA\Grammar\VBA.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.VBA.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBAParser : Parser {
	public const int
		T__8=1, T__7=2, T__6=3, T__5=4, T__4=5, T__3=6, T__2=7, T__1=8, T__0=9, 
		ACCESS=10, ADDRESSOF=11, ALIAS=12, AND=13, ATTRIBUTE=14, APPACTIVATE=15, 
		APPEND=16, AS=17, BEGIN=18, BEEP=19, BINARY=20, BOOLEAN=21, BYVAL=22, 
		BYREF=23, BYTE=24, CALL=25, CASE=26, CHDIR=27, CHDRIVE=28, CLASS=29, CLOSE=30, 
		COLLECTION=31, CONST=32, DATABASE=33, DATE=34, DECLARE=35, DEFBOOL=36, 
		DEFBYTE=37, DEFDATE=38, DEFDBL=39, DEFDEC=40, DEFCUR=41, DEFINT=42, DEFLNG=43, 
		DEFOBJ=44, DEFSNG=45, DEFSTR=46, DEFVAR=47, DELETESETTING=48, DIM=49, 
		DO=50, DOUBLE=51, EACH=52, ELSE=53, ELSEIF=54, END_ENUM=55, END_FUNCTION=56, 
		END_IF=57, END_PROPERTY=58, END_SELECT=59, END_SUB=60, END_TYPE=61, END_WITH=62, 
		END=63, ENUM=64, EQV=65, ERASE=66, ERROR=67, EVENT=68, EXIT_DO=69, EXIT_FOR=70, 
		EXIT_FUNCTION=71, EXIT_PROPERTY=72, EXIT_SUB=73, FALSE=74, FILECOPY=75, 
		FRIEND=76, FOR=77, FUNCTION=78, GET=79, GLOBAL=80, GOSUB=81, GOTO=82, 
		IF=83, IMP=84, IMPLEMENTS=85, IN=86, INPUT=87, IS=88, INTEGER=89, KILL=90, 
		LOAD=91, LOCK=92, LONG=93, LOOP=94, LEN=95, LET=96, LIB=97, LIKE=98, LINE_INPUT=99, 
		LOCK_READ=100, LOCK_WRITE=101, LOCK_READ_WRITE=102, LSET=103, MACRO_IF=104, 
		MACRO_ELSEIF=105, MACRO_ELSE=106, MACRO_END_IF=107, ME=108, MID=109, MKDIR=110, 
		MOD=111, NAME=112, NEXT=113, NEW=114, NOT=115, NOTHING=116, NULL=117, 
		ON=118, ON_ERROR=119, OPEN=120, OPTIONAL=121, OPTION_BASE=122, OPTION_EXPLICIT=123, 
		OPTION_COMPARE=124, OPTION_PRIVATE_MODULE=125, OR=126, OUTPUT=127, PARAMARRAY=128, 
		PRESERVE=129, PRINT=130, PRIVATE=131, PROPERTY_GET=132, PROPERTY_LET=133, 
		PROPERTY_SET=134, PUBLIC=135, PUT=136, RANDOM=137, RANDOMIZE=138, RAISEEVENT=139, 
		READ=140, READ_WRITE=141, REDIM=142, REM=143, RESET=144, RESUME=145, RETURN=146, 
		RMDIR=147, RSET=148, SAVEPICTURE=149, SAVESETTING=150, SEEK=151, SELECT=152, 
		SENDKEYS=153, SET=154, SETATTR=155, SHARED=156, SINGLE=157, SPC=158, STATIC=159, 
		STEP=160, STOP=161, STRING=162, SUB=163, TAB=164, TEXT=165, THEN=166, 
		TIME=167, TO=168, TRUE=169, TYPE=170, TYPEOF=171, UNLOAD=172, UNLOCK=173, 
		UNTIL=174, VARIANT=175, VERSION=176, WEND=177, WHILE=178, WIDTH=179, WITH=180, 
		WITHEVENTS=181, WRITE=182, XOR=183, AMPERSAND=184, ASSIGN=185, DIV=186, 
		EQ=187, GEQ=188, GT=189, LEQ=190, LPAREN=191, LT=192, MINUS=193, MINUS_EQ=194, 
		MULT=195, NEQ=196, PLUS=197, PLUS_EQ=198, POW=199, RPAREN=200, L_SQUARE_BRACKET=201, 
		R_SQUARE_BRACKET=202, STRINGLITERAL=203, DATELITERAL=204, COLORLITERAL=205, 
		INTEGERLITERAL=206, DOUBLELITERAL=207, FILENUMBER=208, IDENTIFIER=209, 
		LINE_CONTINUATION=210, NEWLINE=211, COMMENT=212, WS=213;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'%'", "'.'", "','", "':'", "'@'", "'#'", "';'", "'!'", "'$'", 
		"ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", "APPEND", 
		"AS", "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", 
		"CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "COLLECTION", "CONST", 
		"DATABASE", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", 
		"DEFDEC", "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR", 
		"DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", 
		"END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
		"END_TYPE", "END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", 
		"EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", 
		"FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", 
		"IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", "LOAD", 
		"LOCK", "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", 
		"LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", 
		"MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT", "NEW", "NOT", 
		"NOTHING", "NULL", "ON", "ON_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", 
		"READ", "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RMDIR", 
		"RSET", "SAVEPICTURE", "SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", 
		"SETATTR", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", 
		"SUB", "TAB", "TEXT", "THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", 
		"WITH", "WITHEVENTS", "WRITE", "XOR", "'&'", "':='", "DIV", "'='", "'>='", 
		"'>'", "'<='", "'('", "'<'", "'-'", "'-='", "'*'", "'<>'", "'+'", "'+='", 
		"'^'", "')'", "'['", "']'", "STRINGLITERAL", "DATELITERAL", "COLORLITERAL", 
		"INTEGERLITERAL", "DOUBLELITERAL", "FILENUMBER", "IDENTIFIER", "LINE_CONTINUATION", 
		"NEWLINE", "COMMENT", "WS"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleOptions = 6, 
		RULE_moduleOption = 7, RULE_moduleBody = 8, RULE_moduleBodyElement = 9, 
		RULE_moduleBlock = 10, RULE_attributeStmt = 11, RULE_block = 12, RULE_blockStmt = 13, 
		RULE_appactivateStmt = 14, RULE_beepStmt = 15, RULE_chdirStmt = 16, RULE_chdriveStmt = 17, 
		RULE_closeStmt = 18, RULE_constStmt = 19, RULE_constSubStmt = 20, RULE_dateStmt = 21, 
		RULE_declareStmt = 22, RULE_deftypeStmt = 23, RULE_deleteSettingStmt = 24, 
		RULE_doLoopStmt = 25, RULE_endStmt = 26, RULE_enumerationStmt = 27, RULE_enumerationStmt_Constant = 28, 
		RULE_eraseStmt = 29, RULE_errorStmt = 30, RULE_eventStmt = 31, RULE_exitStmt = 32, 
		RULE_filecopyStmt = 33, RULE_forEachStmt = 34, RULE_forNextStmt = 35, 
		RULE_functionStmt = 36, RULE_getStmt = 37, RULE_goSubStmt = 38, RULE_goToStmt = 39, 
		RULE_ifThenElseStmt = 40, RULE_ifBlockStmt = 41, RULE_ifConditionStmt = 42, 
		RULE_ifElseIfBlockStmt = 43, RULE_ifElseBlockStmt = 44, RULE_implementsStmt = 45, 
		RULE_inputStmt = 46, RULE_killStmt = 47, RULE_letStmt = 48, RULE_lineInputStmt = 49, 
		RULE_loadStmt = 50, RULE_lockStmt = 51, RULE_lsetStmt = 52, RULE_macroIfThenElseStmt = 53, 
		RULE_macroIfBlockStmt = 54, RULE_macroElseIfBlockStmt = 55, RULE_macroElseBlockStmt = 56, 
		RULE_midStmt = 57, RULE_mkdirStmt = 58, RULE_nameStmt = 59, RULE_onErrorStmt = 60, 
		RULE_onGoToStmt = 61, RULE_onGoSubStmt = 62, RULE_openStmt = 63, RULE_outputList = 64, 
		RULE_outputList_Expression = 65, RULE_printStmt = 66, RULE_propertyGetStmt = 67, 
		RULE_propertySetStmt = 68, RULE_propertyLetStmt = 69, RULE_putStmt = 70, 
		RULE_raiseEventStmt = 71, RULE_randomizeStmt = 72, RULE_redimStmt = 73, 
		RULE_redimSubStmt = 74, RULE_resetStmt = 75, RULE_resumeStmt = 76, RULE_returnStmt = 77, 
		RULE_rmdirStmt = 78, RULE_rsetStmt = 79, RULE_savepictureStmt = 80, RULE_saveSettingStmt = 81, 
		RULE_seekStmt = 82, RULE_selectCaseStmt = 83, RULE_sC_Case = 84, RULE_sC_Cond = 85, 
		RULE_sendkeysStmt = 86, RULE_setattrStmt = 87, RULE_setStmt = 88, RULE_stopStmt = 89, 
		RULE_subStmt = 90, RULE_timeStmt = 91, RULE_typeStmt = 92, RULE_typeStmt_Element = 93, 
		RULE_typeOfStmt = 94, RULE_unloadStmt = 95, RULE_unlockStmt = 96, RULE_valueStmt = 97, 
		RULE_variableStmt = 98, RULE_variableListStmt = 99, RULE_variableSubStmt = 100, 
		RULE_whileWendStmt = 101, RULE_widthStmt = 102, RULE_withStmt = 103, RULE_writeStmt = 104, 
		RULE_explicitCallStmt = 105, RULE_eCS_ProcedureCall = 106, RULE_eCS_MemberProcedureCall = 107, 
		RULE_implicitCallStmt_InBlock = 108, RULE_iCS_B_ProcedureCall = 109, RULE_iCS_B_MemberProcedureCall = 110, 
		RULE_implicitCallStmt_InStmt = 111, RULE_iCS_S_VariableOrProcedureCall = 112, 
		RULE_iCS_S_ProcedureOrArrayCall = 113, RULE_iCS_S_MembersCall = 114, RULE_iCS_S_MemberCall = 115, 
		RULE_iCS_S_DictionaryCall = 116, RULE_argsCall = 117, RULE_argCall = 118, 
		RULE_dictionaryCallStmt = 119, RULE_argList = 120, RULE_arg = 121, RULE_argDefaultValue = 122, 
		RULE_subscripts = 123, RULE_subscript = 124, RULE_ambiguousIdentifier = 125, 
		RULE_asTypeClause = 126, RULE_baseType = 127, RULE_certainIdentifier = 128, 
		RULE_comparisonOperator = 129, RULE_complexType = 130, RULE_fieldLength = 131, 
		RULE_letterrange = 132, RULE_lineLabel = 133, RULE_literal = 134, RULE_type = 135, 
		RULE_typeHint = 136, RULE_visibility = 137, RULE_ambiguousKeyword = 138;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleOptions", "moduleOption", "moduleBody", "moduleBodyElement", 
		"moduleBlock", "attributeStmt", "block", "blockStmt", "appactivateStmt", 
		"beepStmt", "chdirStmt", "chdriveStmt", "closeStmt", "constStmt", "constSubStmt", 
		"dateStmt", "declareStmt", "deftypeStmt", "deleteSettingStmt", "doLoopStmt", 
		"endStmt", "enumerationStmt", "enumerationStmt_Constant", "eraseStmt", 
		"errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", "forNextStmt", 
		"functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt", 
		"ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
		"implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
		"loadStmt", "lockStmt", "lsetStmt", "macroIfThenElseStmt", "macroIfBlockStmt", 
		"macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt", "mkdirStmt", 
		"nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", "outputList", 
		"outputList_Expression", "printStmt", "propertyGetStmt", "propertySetStmt", 
		"propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
		"redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", "rmdirStmt", 
		"rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt", "selectCaseStmt", 
		"sC_Case", "sC_Cond", "sendkeysStmt", "setattrStmt", "setStmt", "stopStmt", 
		"subStmt", "timeStmt", "typeStmt", "typeStmt_Element", "typeOfStmt", "unloadStmt", 
		"unlockStmt", "valueStmt", "variableStmt", "variableListStmt", "variableSubStmt", 
		"whileWendStmt", "widthStmt", "withStmt", "writeStmt", "explicitCallStmt", 
		"eCS_ProcedureCall", "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
		"iCS_B_ProcedureCall", "iCS_B_MemberProcedureCall", "implicitCallStmt_InStmt", 
		"iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_MembersCall", 
		"iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", "argCall", "dictionaryCallStmt", 
		"argList", "arg", "argDefaultValue", "subscripts", "subscript", "ambiguousIdentifier", 
		"asTypeClause", "baseType", "certainIdentifier", "comparisonOperator", 
		"complexType", "fieldLength", "letterrange", "lineLabel", "literal", "type", 
		"typeHint", "visibility", "ambiguousKeyword"
	};

	public override string GrammarFileName { get { return "VBA.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; module();
			State = 279; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 281; Match(WS);
				}
				break;
			}
			State = 287;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 284; Match(NEWLINE);
					}
					} 
				}
				State = 289;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 296;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 290; moduleHeader();
				State = 292;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 291; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 294;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 299;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 298; moduleConfig();
				}
				break;
			}
			State = 304;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 301; Match(NEWLINE);
					}
					} 
				}
				State = 306;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 308;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 307; moduleAttributes();
				}
				break;
			}
			State = 313;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 310; Match(NEWLINE);
					}
					} 
				}
				State = 315;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 317;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 316; moduleBody();
				}
				break;
			}
			State = 322;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 319; Match(NEWLINE);
				}
				}
				State = 324;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 326;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 325; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(VERSION);
			State = 329; Match(WS);
			State = 330; Match(DOUBLELITERAL);
			State = 331; Match(WS);
			State = 332; Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; Match(BEGIN);
			State = 336;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 335; Match(NEWLINE);
				}
				}
				State = 338;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 341;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 340; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 343;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 345; Match(END);
			State = 347;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 346; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 349;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(VBAParser.NEWLINE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; ambiguousIdentifier();
			State = 353;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 352; Match(WS);
				}
			}

			State = 355; Match(EQ);
			State = 357;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 356; Match(WS);
				}
			}

			State = 359; literal();
			State = 360; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 362; attributeStmt();
					State = 364;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 363; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 366;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 370;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionsContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ModuleOptionContext moduleOption(int i) {
			return GetRuleContext<ModuleOptionContext>(i);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ModuleOptionContext> moduleOption() {
			return GetRuleContexts<ModuleOptionContext>();
		}
		public ModuleOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionsContext moduleOptions() {
		ModuleOptionsContext _localctx = new ModuleOptionsContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleOptions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 372; moduleOption();
				State = 374;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 373; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 376;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				}
				State = 380;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (OPTION_BASE - 122)) | (1L << (OPTION_EXPLICIT - 122)) | (1L << (OPTION_COMPARE - 122)) | (1L << (OPTION_PRIVATE_MODULE - 122)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleOption);
		int _la;
		try {
			State = 390;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 382; Match(OPTION_BASE);
				State = 383; Match(WS);
				State = 384; Match(INTEGERLITERAL);
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 385; Match(OPTION_COMPARE);
				State = 386; Match(WS);
				State = 387;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 388; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 389; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleOptionsContext moduleOptions() {
			return GetRuleContext<ModuleOptionsContext>(0);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleBody);
		int _la;
		try {
			int _alt;
			State = 413;
			switch (_input.La(1)) {
			case T__7:
			case T__1:
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case EXIT_DO:
			case EXIT_FOR:
			case EXIT_FUNCTION:
			case EXIT_PROPERTY:
			case EXIT_SUB:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LINE_INPUT:
			case LSET:
			case MACRO_IF:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case ON_ERROR:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PROPERTY_GET:
			case PROPERTY_LET:
			case PROPERTY_SET:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 392; moduleBodyElement();
				State = 401;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 394;
						_errHandler.Sync(this);
						_la = _input.La(1);
						do {
							{
							{
							State = 393; Match(NEWLINE);
							}
							}
							State = 396;
							_errHandler.Sync(this);
							_la = _input.La(1);
						} while ( _la==NEWLINE );
						State = 398; moduleBodyElement();
						}
						} 
					}
					State = 403;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
				}
				}
				break;
			case Eof:
			case OPTION_BASE:
			case OPTION_EXPLICIT:
			case OPTION_COMPARE:
			case OPTION_PRIVATE_MODULE:
			case NEWLINE:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 405;
				_la = _input.La(1);
				if (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (OPTION_BASE - 122)) | (1L << (OPTION_EXPLICIT - 122)) | (1L << (OPTION_COMPARE - 122)) | (1L << (OPTION_PRIVATE_MODULE - 122)))) != 0)) {
					{
					State = 404; moduleOptions();
					}
				}

				State = 410;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 407; Match(NEWLINE);
						}
						} 
					}
					State = 412;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public ModuleBlockContext moduleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleBodyElement);
		try {
			State = 426;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 415; moduleBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 416; declareStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 417; enumerationStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 418; eventStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 419; functionStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 420; macroIfThenElseStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 421; propertyGetStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 422; propertySetStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 423; propertyLetStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 424; subStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 425; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ModuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterModuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitModuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBlockContext moduleBlock() {
		ModuleBlockContext _localctx = new ModuleBlockContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<LiteralContext> literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(ATTRIBUTE);
			State = 431; Match(WS);
			State = 432; implicitCallStmt_InStmt();
			State = 434;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 433; Match(WS);
				}
			}

			State = 436; Match(EQ);
			State = 438;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 437; Match(WS);
				}
			}

			State = 440; literal();
			State = 451;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 442;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 441; Match(WS);
						}
					}

					State = 444; Match(T__6);
					State = 446;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 445; Match(WS);
						}
					}

					State = 448; literal();
					}
					} 
				}
				State = 453;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; blockStmt();
			State = 466;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 456;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 455; Match(NEWLINE);
						}
						}
						State = 458;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 461;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 460; Match(WS);
						}
					}

					State = 463; blockStmt();
					}
					} 
				}
				State = 468;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public KillStmtContext killStmt() {
			return GetRuleContext<KillStmtContext>(0);
		}
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public SetattrStmtContext setattrStmt() {
			return GetRuleContext<SetattrStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public ChdriveStmtContext chdriveStmt() {
			return GetRuleContext<ChdriveStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public SendkeysStmtContext sendkeysStmt() {
			return GetRuleContext<SendkeysStmtContext>(0);
		}
		public DateStmtContext dateStmt() {
			return GetRuleContext<DateStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public RandomizeStmtContext randomizeStmt() {
			return GetRuleContext<RandomizeStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public DeftypeStmtContext deftypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public UnloadStmtContext unloadStmt() {
			return GetRuleContext<UnloadStmtContext>(0);
		}
		public MkdirStmtContext mkdirStmt() {
			return GetRuleContext<MkdirStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public LineLabelContext lineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public BeepStmtContext beepStmt() {
			return GetRuleContext<BeepStmtContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public AppactivateStmtContext appactivateStmt() {
			return GetRuleContext<AppactivateStmtContext>(0);
		}
		public ChdirStmtContext chdirStmt() {
			return GetRuleContext<ChdirStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public SavepictureStmtContext savepictureStmt() {
			return GetRuleContext<SavepictureStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public DeleteSettingStmtContext deleteSettingStmt() {
			return GetRuleContext<DeleteSettingStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public TimeStmtContext timeStmt() {
			return GetRuleContext<TimeStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public IfThenElseStmtContext ifThenElseStmt() {
			return GetRuleContext<IfThenElseStmtContext>(0);
		}
		public FilecopyStmtContext filecopyStmt() {
			return GetRuleContext<FilecopyStmtContext>(0);
		}
		public LoadStmtContext loadStmt() {
			return GetRuleContext<LoadStmtContext>(0);
		}
		public SaveSettingStmtContext saveSettingStmt() {
			return GetRuleContext<SaveSettingStmtContext>(0);
		}
		public RmdirStmtContext rmdirStmt() {
			return GetRuleContext<RmdirStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_blockStmt);
		try {
			State = 536;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 469; appactivateStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 470; attributeStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 471; beepStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 472; chdirStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 473; chdriveStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 474; closeStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 475; constStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 476; dateStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 477; deleteSettingStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 478; deftypeStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 479; doLoopStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 480; endStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 481; eraseStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 482; errorStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 483; exitStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 484; explicitCallStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 485; filecopyStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 486; forEachStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 487; forNextStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 488; getStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 489; goSubStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 490; goToStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 491; ifThenElseStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 492; implementsStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 493; implicitCallStmt_InBlock();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 494; inputStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 495; killStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 496; letStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 497; lineInputStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 498; lineLabel();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 499; loadStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 500; lockStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 501; lsetStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 502; macroIfThenElseStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 503; midStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 504; mkdirStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 505; nameStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 506; onErrorStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 507; onGoToStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 508; onGoSubStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 509; openStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 510; printStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 511; putStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 512; raiseEventStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 513; randomizeStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 514; redimStmt();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 515; resetStmt();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 516; resumeStmt();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 517; returnStmt();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 518; rmdirStmt();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 519; rsetStmt();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 520; savepictureStmt();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 521; saveSettingStmt();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 522; seekStmt();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 523; selectCaseStmt();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 524; sendkeysStmt();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 525; setattrStmt();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 526; setStmt();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 527; stopStmt();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 528; timeStmt();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 529; unloadStmt();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 530; unlockStmt();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 531; variableStmt();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 532; whileWendStmt();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 533; widthStmt();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 534; withStmt();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 535; writeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppactivateStmtContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public AppactivateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appactivateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAppactivateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAppactivateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppactivateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppactivateStmtContext appactivateStmt() {
		AppactivateStmtContext _localctx = new AppactivateStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_appactivateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538; Match(APPACTIVATE);
			State = 539; Match(WS);
			State = 540; valueStmt(0);
			State = 549;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 542;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 541; Match(WS);
					}
				}

				State = 544; Match(T__6);
				State = 546;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 545; Match(WS);
					}
				}

				State = 548; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepStmtContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public BeepStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBeepStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBeepStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeepStmtContext beepStmt() {
		BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_beepStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ChdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterChdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitChdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdirStmtContext chdirStmt() {
		ChdirStmtContext _localctx = new ChdirStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_chdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553; Match(CHDIR);
			State = 554; Match(WS);
			State = 555; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdriveStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ChdriveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdriveStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterChdriveStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitChdriveStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdriveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdriveStmtContext chdriveStmt() {
		ChdriveStmtContext _localctx = new ChdriveStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_chdriveStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; Match(CHDRIVE);
			State = 558; Match(WS);
			State = 559; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; Match(CLOSE);
			State = 577;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 562; Match(WS);
				State = 563; valueStmt(0);
				State = 574;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 565;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 564; Match(WS);
							}
						}

						State = 567; Match(T__6);
						State = 569;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 568; Match(WS);
							}
						}

						State = 571; valueStmt(0);
						}
						} 
					}
					State = 576;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ConstSubStmtContext> constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 579; visibility();
				State = 580; Match(WS);
				}
			}

			State = 584; Match(CONST);
			State = 585; Match(WS);
			State = 586; constSubStmt();
			State = 597;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,46,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 588;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 587; Match(WS);
						}
					}

					State = 590; Match(T__6);
					State = 592;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 591; Match(WS);
						}
					}

					State = 594; constSubStmt();
					}
					} 
				}
				State = 599;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,46,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600; ambiguousIdentifier();
			State = 602;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 601; typeHint();
				}
			}

			State = 606;
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 604; Match(WS);
				State = 605; asTypeClause();
				}
				break;
			}
			State = 609;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 608; Match(WS);
				}
			}

			State = 611; Match(EQ);
			State = 613;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 612; Match(WS);
				}
			}

			State = 615; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateStmtContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public DateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateStmtContext dateStmt() {
		DateStmtContext _localctx = new DateStmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_dateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617; Match(DATE);
			State = 619;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 618; Match(WS);
				}
			}

			State = 621; Match(EQ);
			State = 623;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 622; Match(WS);
				}
			}

			State = 625; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBAParser.STRINGLITERAL, i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 627; visibility();
				State = 628; Match(WS);
				}
			}

			State = 632; Match(DECLARE);
			State = 633; Match(WS);
			State = 634;
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==SUB) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 635; Match(WS);
			State = 636; ambiguousIdentifier();
			State = 637; Match(WS);
			State = 638; Match(LIB);
			State = 639; Match(WS);
			State = 640; Match(STRINGLITERAL);
			State = 645;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 641; Match(WS);
				State = 642; Match(ALIAS);
				State = 643; Match(WS);
				State = 644; Match(STRINGLITERAL);
				}
				break;
			}
			State = 651;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 648;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 647; Match(WS);
					}
				}

				State = 650; argList();
				}
				break;
			}
			State = 655;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 653; Match(WS);
				State = 654; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public IReadOnlyList<LetterrangeContext> letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext deftypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 658; Match(WS);
			State = 659; letterrange();
			State = 670;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,60,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 661;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 660; Match(WS);
						}
					}

					State = 663; Match(T__6);
					State = 665;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 664; Match(WS);
						}
					}

					State = 667; letterrange();
					}
					} 
				}
				State = 672;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,60,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSettingStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSettingStmtContext deleteSettingStmt() {
		DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_deleteSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673; Match(DELETESETTING);
			State = 674; Match(WS);
			State = 675; valueStmt(0);
			State = 677;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 676; Match(WS);
				}
			}

			State = 679; Match(T__6);
			State = 681;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 680; Match(WS);
				}
			}

			State = 683; valueStmt(0);
			State = 692;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				State = 685;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 684; Match(WS);
					}
				}

				State = 687; Match(T__6);
				State = 689;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 688; Match(WS);
					}
				}

				State = 691; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_doLoopStmt);
		int _la;
		try {
			State = 747;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694; Match(DO);
				State = 696;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 695; Match(NEWLINE);
					}
					}
					State = 698;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 706;
				switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					State = 700; block();
					State = 702;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 701; Match(NEWLINE);
						}
						}
						State = 704;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 708; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 709; Match(DO);
				State = 710; Match(WS);
				State = 711;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 712; Match(WS);
				State = 713; valueStmt(0);
				State = 715;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 714; Match(NEWLINE);
					}
					}
					State = 717;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 725;
				switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					State = 719; block();
					State = 721;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 720; Match(NEWLINE);
						}
						}
						State = 723;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 727; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 729; Match(DO);
				State = 731;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 730; Match(NEWLINE);
					}
					}
					State = 733;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				{
				State = 735; block();
				State = 737;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 736; Match(NEWLINE);
					}
					}
					State = 739;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				State = 741; Match(LOOP);
				State = 742; Match(WS);
				State = 743;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 744; Match(WS);
				State = 745; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 751; visibility();
				State = 752; Match(WS);
				}
			}

			State = 756; Match(ENUM);
			State = 757; Match(WS);
			State = 758; ambiguousIdentifier();
			State = 760;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 759; Match(NEWLINE);
				}
				}
				State = 762;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 767;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 764; enumerationStmt_Constant();
				}
				}
				State = 769;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 770; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772; ambiguousIdentifier();
			State = 781;
			_la = _input.La(1);
			if (_la==EQ || _la==WS) {
				{
				State = 774;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 773; Match(WS);
					}
				}

				State = 776; Match(EQ);
				State = 778;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 777; Match(WS);
					}
				}

				State = 780; valueStmt(0);
				}
			}

			State = 784;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 783; Match(NEWLINE);
				}
				}
				State = 786;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_eraseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 788; Match(ERASE);
			State = 789; Match(WS);
			State = 790; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792; Match(ERROR);
			State = 793; Match(WS);
			State = 794; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 796; visibility();
				State = 797; Match(WS);
				}
			}

			State = 801; Match(EVENT);
			State = 802; Match(WS);
			State = 803; ambiguousIdentifier();
			State = 805;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 804; Match(WS);
				}
			}

			State = 807; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			_la = _input.La(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (EXIT_DO - 69)) | (1L << (EXIT_FOR - 69)) | (1L << (EXIT_FUNCTION - 69)) | (1L << (EXIT_PROPERTY - 69)) | (1L << (EXIT_SUB - 69)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilecopyStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filecopyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFilecopyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFilecopyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilecopyStmtContext filecopyStmt() {
		FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_filecopyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811; Match(FILECOPY);
			State = 812; Match(WS);
			State = 813; valueStmt(0);
			State = 815;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 814; Match(WS);
				}
			}

			State = 817; Match(T__6);
			State = 819;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 818; Match(WS);
				}
			}

			State = 821; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; Match(FOR);
			State = 824; Match(WS);
			State = 825; Match(EACH);
			State = 826; Match(WS);
			State = 827; ambiguousIdentifier();
			State = 829;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 828; typeHint();
				}
			}

			State = 831; Match(WS);
			State = 832; Match(IN);
			State = 833; Match(WS);
			State = 834; valueStmt(0);
			State = 836;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 835; Match(NEWLINE);
				}
				}
				State = 838;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 846;
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				State = 840; block();
				State = 842;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 841; Match(NEWLINE);
					}
					}
					State = 844;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 848; Match(NEXT);
			State = 851;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 849; Match(WS);
				State = 850; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 853; Match(FOR);
			State = 854; Match(WS);
			State = 855; ambiguousIdentifier();
			State = 857;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 856; typeHint();
				}
			}

			State = 861;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 859; Match(WS);
				State = 860; asTypeClause();
				}
				break;
			}
			State = 864;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 863; Match(WS);
				}
			}

			State = 866; Match(EQ);
			State = 868;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 867; Match(WS);
				}
			}

			State = 870; valueStmt(0);
			State = 871; Match(WS);
			State = 872; Match(TO);
			State = 873; Match(WS);
			State = 874; valueStmt(0);
			State = 879;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 875; Match(WS);
				State = 876; Match(STEP);
				State = 877; Match(WS);
				State = 878; valueStmt(0);
				}
			}

			State = 882;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 881; Match(NEWLINE);
				}
				}
				State = 884;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 892;
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 886; block();
				State = 888;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 887; Match(NEWLINE);
					}
					}
					State = 890;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 894; Match(NEXT);
			State = 897;
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 895; Match(WS);
				State = 896; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 902;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 899; visibility();
				State = 900; Match(WS);
				}
			}

			State = 906;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 904; Match(STATIC);
				State = 905; Match(WS);
				}
			}

			State = 908; Match(FUNCTION);
			State = 909; Match(WS);
			State = 910; ambiguousIdentifier();
			State = 915;
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				State = 912;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 911; Match(WS);
					}
				}

				State = 914; argList();
				}
				break;
			}
			State = 919;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 917; Match(WS);
				State = 918; asTypeClause();
				}
			}

			State = 922;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 921; Match(NEWLINE);
				}
				}
				State = 924;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 932;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 926; block();
				State = 928;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 927; Match(NEWLINE);
					}
					}
					State = 930;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 934; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936; Match(GET);
			State = 937; Match(WS);
			State = 938; valueStmt(0);
			State = 940;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 939; Match(WS);
				}
			}

			State = 942; Match(T__6);
			State = 944;
			switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				State = 943; Match(WS);
				}
				break;
			}
			State = 947;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
				{
				State = 946; valueStmt(0);
				}
			}

			State = 950;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 949; Match(WS);
				}
			}

			State = 952; Match(T__6);
			State = 954;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 953; Match(WS);
				}
			}

			State = 956; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 958; Match(GOSUB);
			State = 959; Match(WS);
			State = 960; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962; Match(GOTO);
			State = 963; Match(WS);
			State = 964; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStmtContext : ParserRuleContext {
		public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStmt; } }
	 
		public IfThenElseStmtContext() { }
		public virtual void CopyFrom(IfThenElseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockIfThenElseContext : IfThenElseStmtContext {
		public IfElseBlockStmtContext ifElseBlockStmt() {
			return GetRuleContext<IfElseBlockStmtContext>(0);
		}
		public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
		public IReadOnlyList<IfElseIfBlockStmtContext> ifElseIfBlockStmt() {
			return GetRuleContexts<IfElseIfBlockStmtContext>();
		}
		public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i) {
			return GetRuleContext<IfElseIfBlockStmtContext>(i);
		}
		public IfBlockStmtContext ifBlockStmt() {
			return GetRuleContext<IfBlockStmtContext>(0);
		}
		public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineIfThenElseContext : IfThenElseStmtContext {
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStmtContext ifThenElseStmt() {
		IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_ifThenElseStmt);
		int _la;
		try {
			State = 991;
			switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
			case 1:
				_localctx = new InlineIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 966; Match(IF);
				State = 967; Match(WS);
				State = 968; ifConditionStmt();
				State = 969; Match(WS);
				State = 970; Match(THEN);
				State = 971; Match(WS);
				State = 972; blockStmt();
				State = 977;
				switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					State = 973; Match(WS);
					State = 974; Match(ELSE);
					State = 975; Match(WS);
					State = 976; blockStmt();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BlockIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 979; ifBlockStmt();
				State = 983;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 980; ifElseIfBlockStmt();
					}
					}
					State = 985;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 987;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 986; ifElseBlockStmt();
					}
				}

				State = 989; Match(END_IF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStmtContext ifBlockStmt() {
		IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_ifBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 993; Match(IF);
			State = 994; Match(WS);
			State = 995; ifConditionStmt();
			State = 996; Match(WS);
			State = 997; Match(THEN);
			State = 999;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 998; Match(NEWLINE);
				}
				}
				State = 1001;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1009;
			switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
			case 1:
				{
				State = 1003; block();
				State = 1005;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1004; Match(NEWLINE);
					}
					}
					State = 1007;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfConditionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfConditionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionStmtContext ifConditionStmt() {
		IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_ifConditionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1011; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfBlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfBlockStmtContext ifElseIfBlockStmt() {
		IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_ifElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013; Match(ELSEIF);
			State = 1014; Match(WS);
			State = 1015; ifConditionStmt();
			State = 1016; Match(WS);
			State = 1017; Match(THEN);
			State = 1019;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1018; Match(NEWLINE);
				}
				}
				State = 1021;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1029;
			switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				State = 1023; block();
				State = 1025;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1024; Match(NEWLINE);
					}
					}
					State = 1027;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockStmtContext ifElseBlockStmt() {
		IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_ifElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1031; Match(ELSE);
			State = 1033;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1032; Match(NEWLINE);
				}
				}
				State = 1035;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1043;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1037; block();
				State = 1039;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1038; Match(NEWLINE);
					}
					}
					State = 1041;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1045; Match(IMPLEMENTS);
			State = 1046; Match(WS);
			State = 1047; ambiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1049; Match(INPUT);
			State = 1050; Match(WS);
			State = 1051; valueStmt(0);
			State = 1060;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1053;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1052; Match(WS);
						}
					}

					State = 1055; Match(T__6);
					State = 1057;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1056; Match(WS);
						}
					}

					State = 1059; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1062;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,128,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public KillStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterKillStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitKillStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStmtContext killStmt() {
		KillStmtContext _localctx = new KillStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_killStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1064; Match(KILL);
			State = 1065; Match(WS);
			State = 1066; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode PLUS_EQ() { return GetToken(VBAParser.PLUS_EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode MINUS_EQ() { return GetToken(VBAParser.MINUS_EQ, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			switch ( Interpreter.AdaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				State = 1068; Match(LET);
				State = 1069; Match(WS);
				}
				break;
			}
			State = 1072; implicitCallStmt_InStmt();
			State = 1074;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1073; Match(WS);
				}
			}

			State = 1076;
			_la = _input.La(1);
			if ( !(((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (EQ - 187)) | (1L << (MINUS_EQ - 187)) | (1L << (PLUS_EQ - 187)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1078;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1077; Match(WS);
				}
			}

			State = 1080; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1082; Match(LINE_INPUT);
			State = 1083; Match(WS);
			State = 1084; valueStmt(0);
			State = 1086;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1085; Match(WS);
				}
			}

			State = 1088; Match(T__6);
			State = 1090;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1089; Match(WS);
				}
			}

			State = 1092; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public LoadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLoadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLoadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStmtContext loadStmt() {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_loadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1094; Match(LOAD);
			State = 1095; Match(WS);
			State = 1096; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098; Match(LOCK);
			State = 1099; Match(WS);
			State = 1100; valueStmt(0);
			State = 1115;
			switch ( Interpreter.AdaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				State = 1102;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1101; Match(WS);
					}
				}

				State = 1104; Match(T__6);
				State = 1106;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1105; Match(WS);
					}
				}

				State = 1108; valueStmt(0);
				State = 1113;
				switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
				case 1:
					{
					State = 1109; Match(WS);
					State = 1110; Match(TO);
					State = 1111; Match(WS);
					State = 1112; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117; Match(LSET);
			State = 1118; Match(WS);
			State = 1119; implicitCallStmt_InStmt();
			State = 1121;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1120; Match(WS);
				}
			}

			State = 1123; Match(EQ);
			State = 1125;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1124; Match(WS);
				}
			}

			State = 1127; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfThenElseStmtContext : ParserRuleContext {
		public MacroElseBlockStmtContext macroElseBlockStmt() {
			return GetRuleContext<MacroElseBlockStmtContext>(0);
		}
		public IReadOnlyList<MacroElseIfBlockStmtContext> macroElseIfBlockStmt() {
			return GetRuleContexts<MacroElseIfBlockStmtContext>();
		}
		public ITerminalNode MACRO_END_IF() { return GetToken(VBAParser.MACRO_END_IF, 0); }
		public MacroElseIfBlockStmtContext macroElseIfBlockStmt(int i) {
			return GetRuleContext<MacroElseIfBlockStmtContext>(i);
		}
		public MacroIfBlockStmtContext macroIfBlockStmt() {
			return GetRuleContext<MacroIfBlockStmtContext>(0);
		}
		public MacroIfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfThenElseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroIfThenElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroIfThenElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfThenElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfThenElseStmtContext macroIfThenElseStmt() {
		MacroIfThenElseStmtContext _localctx = new MacroIfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_macroIfThenElseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1129; macroIfBlockStmt();
			State = 1133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MACRO_ELSEIF) {
				{
				{
				State = 1130; macroElseIfBlockStmt();
				}
				}
				State = 1135;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1137;
			_la = _input.La(1);
			if (_la==MACRO_ELSE) {
				{
				State = 1136; macroElseBlockStmt();
				}
			}

			State = 1139; Match(MACRO_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfBlockStmtContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode MACRO_IF() { return GetToken(VBAParser.MACRO_IF, 0); }
		public MacroIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfBlockStmtContext macroIfBlockStmt() {
		MacroIfBlockStmtContext _localctx = new MacroIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_macroIfBlockStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1141; Match(MACRO_IF);
			State = 1142; Match(WS);
			State = 1143; ifConditionStmt();
			State = 1144; Match(WS);
			State = 1145; Match(THEN);
			State = 1147;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1146; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1149;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,142,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1157;
			_la = _input.La(1);
			if (((((_la - -1)) & ~0x3f) == 0 && ((1L << (_la - -1)) & ((1L << (Eof - -1)) | (1L << (T__7 - -1)) | (1L << (T__1 - -1)) | (1L << (ACCESS - -1)) | (1L << (ADDRESSOF - -1)) | (1L << (ALIAS - -1)) | (1L << (AND - -1)) | (1L << (ATTRIBUTE - -1)) | (1L << (APPACTIVATE - -1)) | (1L << (APPEND - -1)) | (1L << (AS - -1)) | (1L << (BEGIN - -1)) | (1L << (BEEP - -1)) | (1L << (BINARY - -1)) | (1L << (BOOLEAN - -1)) | (1L << (BYVAL - -1)) | (1L << (BYREF - -1)) | (1L << (BYTE - -1)) | (1L << (CALL - -1)) | (1L << (CASE - -1)) | (1L << (CHDIR - -1)) | (1L << (CHDRIVE - -1)) | (1L << (CLASS - -1)) | (1L << (CLOSE - -1)) | (1L << (COLLECTION - -1)) | (1L << (CONST - -1)) | (1L << (DATABASE - -1)) | (1L << (DATE - -1)) | (1L << (DECLARE - -1)) | (1L << (DEFBOOL - -1)) | (1L << (DEFBYTE - -1)) | (1L << (DEFDATE - -1)) | (1L << (DEFDBL - -1)) | (1L << (DEFDEC - -1)) | (1L << (DEFCUR - -1)) | (1L << (DEFINT - -1)) | (1L << (DEFLNG - -1)) | (1L << (DEFOBJ - -1)) | (1L << (DEFSNG - -1)) | (1L << (DEFSTR - -1)) | (1L << (DEFVAR - -1)) | (1L << (DELETESETTING - -1)) | (1L << (DIM - -1)) | (1L << (DO - -1)) | (1L << (DOUBLE - -1)) | (1L << (EACH - -1)) | (1L << (ELSE - -1)) | (1L << (ELSEIF - -1)))) != 0) || ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (END - 63)) | (1L << (ENUM - 63)) | (1L << (EQV - 63)) | (1L << (ERASE - 63)) | (1L << (ERROR - 63)) | (1L << (EVENT - 63)) | (1L << (EXIT_DO - 63)) | (1L << (EXIT_FOR - 63)) | (1L << (EXIT_FUNCTION - 63)) | (1L << (EXIT_PROPERTY - 63)) | (1L << (EXIT_SUB - 63)) | (1L << (FALSE - 63)) | (1L << (FILECOPY - 63)) | (1L << (FRIEND - 63)) | (1L << (FOR - 63)) | (1L << (FUNCTION - 63)) | (1L << (GET - 63)) | (1L << (GLOBAL - 63)) | (1L << (GOSUB - 63)) | (1L << (GOTO - 63)) | (1L << (IF - 63)) | (1L << (IMP - 63)) | (1L << (IMPLEMENTS - 63)) | (1L << (IN - 63)) | (1L << (INPUT - 63)) | (1L << (IS - 63)) | (1L << (INTEGER - 63)) | (1L << (KILL - 63)) | (1L << (LOAD - 63)) | (1L << (LOCK - 63)) | (1L << (LONG - 63)) | (1L << (LOOP - 63)) | (1L << (LEN - 63)) | (1L << (LET - 63)) | (1L << (LIB - 63)) | (1L << (LIKE - 63)) | (1L << (LINE_INPUT - 63)) | (1L << (LSET - 63)) | (1L << (MACRO_IF - 63)) | (1L << (ME - 63)) | (1L << (MID - 63)) | (1L << (MKDIR - 63)) | (1L << (MOD - 63)) | (1L << (NAME - 63)) | (1L << (NEXT - 63)) | (1L << (NEW - 63)) | (1L << (NOT - 63)) | (1L << (NOTHING - 63)) | (1L << (NULL - 63)) | (1L << (ON - 63)) | (1L << (ON_ERROR - 63)) | (1L << (OPEN - 63)) | (1L << (OPTIONAL - 63)) | (1L << (OPTION_BASE - 63)) | (1L << (OPTION_EXPLICIT - 63)) | (1L << (OPTION_COMPARE - 63)) | (1L << (OPTION_PRIVATE_MODULE - 63)) | (1L << (OR - 63)))) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (OUTPUT - 127)) | (1L << (PARAMARRAY - 127)) | (1L << (PRESERVE - 127)) | (1L << (PRINT - 127)) | (1L << (PRIVATE - 127)) | (1L << (PROPERTY_GET - 127)) | (1L << (PROPERTY_LET - 127)) | (1L << (PROPERTY_SET - 127)) | (1L << (PUBLIC - 127)) | (1L << (PUT - 127)) | (1L << (RANDOM - 127)) | (1L << (RANDOMIZE - 127)) | (1L << (RAISEEVENT - 127)) | (1L << (READ - 127)) | (1L << (REDIM - 127)) | (1L << (REM - 127)) | (1L << (RESET - 127)) | (1L << (RESUME - 127)) | (1L << (RETURN - 127)) | (1L << (RMDIR - 127)) | (1L << (RSET - 127)) | (1L << (SAVEPICTURE - 127)) | (1L << (SAVESETTING - 127)) | (1L << (SEEK - 127)) | (1L << (SELECT - 127)) | (1L << (SENDKEYS - 127)) | (1L << (SET - 127)) | (1L << (SETATTR - 127)) | (1L << (SHARED - 127)) | (1L << (SINGLE - 127)) | (1L << (SPC - 127)) | (1L << (STATIC - 127)) | (1L << (STEP - 127)) | (1L << (STOP - 127)) | (1L << (STRING - 127)) | (1L << (SUB - 127)) | (1L << (TAB - 127)) | (1L << (TEXT - 127)) | (1L << (THEN - 127)) | (1L << (TIME - 127)) | (1L << (TO - 127)) | (1L << (TRUE - 127)) | (1L << (TYPE - 127)) | (1L << (TYPEOF - 127)) | (1L << (UNLOAD - 127)) | (1L << (UNLOCK - 127)) | (1L << (UNTIL - 127)) | (1L << (VARIANT - 127)) | (1L << (VERSION - 127)) | (1L << (WEND - 127)) | (1L << (WHILE - 127)) | (1L << (WIDTH - 127)) | (1L << (WITH - 127)) | (1L << (WITHEVENTS - 127)) | (1L << (WRITE - 127)) | (1L << (XOR - 127)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (L_SQUARE_BRACKET - 201)) | (1L << (IDENTIFIER - 201)) | (1L << (NEWLINE - 201)) | (1L << (WS - 201)))) != 0)) {
				{
				State = 1151; moduleBody();
				State = 1153;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1152; Match(NEWLINE);
					}
					}
					State = 1155;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseIfBlockStmtContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode MACRO_ELSEIF() { return GetToken(VBAParser.MACRO_ELSEIF, 0); }
		public MacroElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseIfBlockStmtContext macroElseIfBlockStmt() {
		MacroElseIfBlockStmtContext _localctx = new MacroElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_macroElseIfBlockStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1159; Match(MACRO_ELSEIF);
			State = 1160; Match(WS);
			State = 1161; ifConditionStmt();
			State = 1162; Match(WS);
			State = 1163; Match(THEN);
			State = 1165;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1164; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1167;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,145,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1175;
			_la = _input.La(1);
			if (((((_la - -1)) & ~0x3f) == 0 && ((1L << (_la - -1)) & ((1L << (Eof - -1)) | (1L << (T__7 - -1)) | (1L << (T__1 - -1)) | (1L << (ACCESS - -1)) | (1L << (ADDRESSOF - -1)) | (1L << (ALIAS - -1)) | (1L << (AND - -1)) | (1L << (ATTRIBUTE - -1)) | (1L << (APPACTIVATE - -1)) | (1L << (APPEND - -1)) | (1L << (AS - -1)) | (1L << (BEGIN - -1)) | (1L << (BEEP - -1)) | (1L << (BINARY - -1)) | (1L << (BOOLEAN - -1)) | (1L << (BYVAL - -1)) | (1L << (BYREF - -1)) | (1L << (BYTE - -1)) | (1L << (CALL - -1)) | (1L << (CASE - -1)) | (1L << (CHDIR - -1)) | (1L << (CHDRIVE - -1)) | (1L << (CLASS - -1)) | (1L << (CLOSE - -1)) | (1L << (COLLECTION - -1)) | (1L << (CONST - -1)) | (1L << (DATABASE - -1)) | (1L << (DATE - -1)) | (1L << (DECLARE - -1)) | (1L << (DEFBOOL - -1)) | (1L << (DEFBYTE - -1)) | (1L << (DEFDATE - -1)) | (1L << (DEFDBL - -1)) | (1L << (DEFDEC - -1)) | (1L << (DEFCUR - -1)) | (1L << (DEFINT - -1)) | (1L << (DEFLNG - -1)) | (1L << (DEFOBJ - -1)) | (1L << (DEFSNG - -1)) | (1L << (DEFSTR - -1)) | (1L << (DEFVAR - -1)) | (1L << (DELETESETTING - -1)) | (1L << (DIM - -1)) | (1L << (DO - -1)) | (1L << (DOUBLE - -1)) | (1L << (EACH - -1)) | (1L << (ELSE - -1)) | (1L << (ELSEIF - -1)))) != 0) || ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (END - 63)) | (1L << (ENUM - 63)) | (1L << (EQV - 63)) | (1L << (ERASE - 63)) | (1L << (ERROR - 63)) | (1L << (EVENT - 63)) | (1L << (EXIT_DO - 63)) | (1L << (EXIT_FOR - 63)) | (1L << (EXIT_FUNCTION - 63)) | (1L << (EXIT_PROPERTY - 63)) | (1L << (EXIT_SUB - 63)) | (1L << (FALSE - 63)) | (1L << (FILECOPY - 63)) | (1L << (FRIEND - 63)) | (1L << (FOR - 63)) | (1L << (FUNCTION - 63)) | (1L << (GET - 63)) | (1L << (GLOBAL - 63)) | (1L << (GOSUB - 63)) | (1L << (GOTO - 63)) | (1L << (IF - 63)) | (1L << (IMP - 63)) | (1L << (IMPLEMENTS - 63)) | (1L << (IN - 63)) | (1L << (INPUT - 63)) | (1L << (IS - 63)) | (1L << (INTEGER - 63)) | (1L << (KILL - 63)) | (1L << (LOAD - 63)) | (1L << (LOCK - 63)) | (1L << (LONG - 63)) | (1L << (LOOP - 63)) | (1L << (LEN - 63)) | (1L << (LET - 63)) | (1L << (LIB - 63)) | (1L << (LIKE - 63)) | (1L << (LINE_INPUT - 63)) | (1L << (LSET - 63)) | (1L << (MACRO_IF - 63)) | (1L << (ME - 63)) | (1L << (MID - 63)) | (1L << (MKDIR - 63)) | (1L << (MOD - 63)) | (1L << (NAME - 63)) | (1L << (NEXT - 63)) | (1L << (NEW - 63)) | (1L << (NOT - 63)) | (1L << (NOTHING - 63)) | (1L << (NULL - 63)) | (1L << (ON - 63)) | (1L << (ON_ERROR - 63)) | (1L << (OPEN - 63)) | (1L << (OPTIONAL - 63)) | (1L << (OPTION_BASE - 63)) | (1L << (OPTION_EXPLICIT - 63)) | (1L << (OPTION_COMPARE - 63)) | (1L << (OPTION_PRIVATE_MODULE - 63)) | (1L << (OR - 63)))) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (OUTPUT - 127)) | (1L << (PARAMARRAY - 127)) | (1L << (PRESERVE - 127)) | (1L << (PRINT - 127)) | (1L << (PRIVATE - 127)) | (1L << (PROPERTY_GET - 127)) | (1L << (PROPERTY_LET - 127)) | (1L << (PROPERTY_SET - 127)) | (1L << (PUBLIC - 127)) | (1L << (PUT - 127)) | (1L << (RANDOM - 127)) | (1L << (RANDOMIZE - 127)) | (1L << (RAISEEVENT - 127)) | (1L << (READ - 127)) | (1L << (REDIM - 127)) | (1L << (REM - 127)) | (1L << (RESET - 127)) | (1L << (RESUME - 127)) | (1L << (RETURN - 127)) | (1L << (RMDIR - 127)) | (1L << (RSET - 127)) | (1L << (SAVEPICTURE - 127)) | (1L << (SAVESETTING - 127)) | (1L << (SEEK - 127)) | (1L << (SELECT - 127)) | (1L << (SENDKEYS - 127)) | (1L << (SET - 127)) | (1L << (SETATTR - 127)) | (1L << (SHARED - 127)) | (1L << (SINGLE - 127)) | (1L << (SPC - 127)) | (1L << (STATIC - 127)) | (1L << (STEP - 127)) | (1L << (STOP - 127)) | (1L << (STRING - 127)) | (1L << (SUB - 127)) | (1L << (TAB - 127)) | (1L << (TEXT - 127)) | (1L << (THEN - 127)) | (1L << (TIME - 127)) | (1L << (TO - 127)) | (1L << (TRUE - 127)) | (1L << (TYPE - 127)) | (1L << (TYPEOF - 127)) | (1L << (UNLOAD - 127)) | (1L << (UNLOCK - 127)) | (1L << (UNTIL - 127)) | (1L << (VARIANT - 127)) | (1L << (VERSION - 127)) | (1L << (WEND - 127)) | (1L << (WHILE - 127)) | (1L << (WIDTH - 127)) | (1L << (WITH - 127)) | (1L << (WITHEVENTS - 127)) | (1L << (WRITE - 127)) | (1L << (XOR - 127)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (L_SQUARE_BRACKET - 201)) | (1L << (IDENTIFIER - 201)) | (1L << (NEWLINE - 201)) | (1L << (WS - 201)))) != 0)) {
				{
				State = 1169; moduleBody();
				State = 1171;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1170; Match(NEWLINE);
					}
					}
					State = 1173;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseBlockStmtContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode MACRO_ELSE() { return GetToken(VBAParser.MACRO_ELSE, 0); }
		public MacroElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMacroElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMacroElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseBlockStmtContext macroElseBlockStmt() {
		MacroElseBlockStmtContext _localctx = new MacroElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_macroElseBlockStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1177; Match(MACRO_ELSE);
			State = 1179;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1178; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1181;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,148,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1189;
			_la = _input.La(1);
			if (((((_la - -1)) & ~0x3f) == 0 && ((1L << (_la - -1)) & ((1L << (Eof - -1)) | (1L << (T__7 - -1)) | (1L << (T__1 - -1)) | (1L << (ACCESS - -1)) | (1L << (ADDRESSOF - -1)) | (1L << (ALIAS - -1)) | (1L << (AND - -1)) | (1L << (ATTRIBUTE - -1)) | (1L << (APPACTIVATE - -1)) | (1L << (APPEND - -1)) | (1L << (AS - -1)) | (1L << (BEGIN - -1)) | (1L << (BEEP - -1)) | (1L << (BINARY - -1)) | (1L << (BOOLEAN - -1)) | (1L << (BYVAL - -1)) | (1L << (BYREF - -1)) | (1L << (BYTE - -1)) | (1L << (CALL - -1)) | (1L << (CASE - -1)) | (1L << (CHDIR - -1)) | (1L << (CHDRIVE - -1)) | (1L << (CLASS - -1)) | (1L << (CLOSE - -1)) | (1L << (COLLECTION - -1)) | (1L << (CONST - -1)) | (1L << (DATABASE - -1)) | (1L << (DATE - -1)) | (1L << (DECLARE - -1)) | (1L << (DEFBOOL - -1)) | (1L << (DEFBYTE - -1)) | (1L << (DEFDATE - -1)) | (1L << (DEFDBL - -1)) | (1L << (DEFDEC - -1)) | (1L << (DEFCUR - -1)) | (1L << (DEFINT - -1)) | (1L << (DEFLNG - -1)) | (1L << (DEFOBJ - -1)) | (1L << (DEFSNG - -1)) | (1L << (DEFSTR - -1)) | (1L << (DEFVAR - -1)) | (1L << (DELETESETTING - -1)) | (1L << (DIM - -1)) | (1L << (DO - -1)) | (1L << (DOUBLE - -1)) | (1L << (EACH - -1)) | (1L << (ELSE - -1)) | (1L << (ELSEIF - -1)))) != 0) || ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (END - 63)) | (1L << (ENUM - 63)) | (1L << (EQV - 63)) | (1L << (ERASE - 63)) | (1L << (ERROR - 63)) | (1L << (EVENT - 63)) | (1L << (EXIT_DO - 63)) | (1L << (EXIT_FOR - 63)) | (1L << (EXIT_FUNCTION - 63)) | (1L << (EXIT_PROPERTY - 63)) | (1L << (EXIT_SUB - 63)) | (1L << (FALSE - 63)) | (1L << (FILECOPY - 63)) | (1L << (FRIEND - 63)) | (1L << (FOR - 63)) | (1L << (FUNCTION - 63)) | (1L << (GET - 63)) | (1L << (GLOBAL - 63)) | (1L << (GOSUB - 63)) | (1L << (GOTO - 63)) | (1L << (IF - 63)) | (1L << (IMP - 63)) | (1L << (IMPLEMENTS - 63)) | (1L << (IN - 63)) | (1L << (INPUT - 63)) | (1L << (IS - 63)) | (1L << (INTEGER - 63)) | (1L << (KILL - 63)) | (1L << (LOAD - 63)) | (1L << (LOCK - 63)) | (1L << (LONG - 63)) | (1L << (LOOP - 63)) | (1L << (LEN - 63)) | (1L << (LET - 63)) | (1L << (LIB - 63)) | (1L << (LIKE - 63)) | (1L << (LINE_INPUT - 63)) | (1L << (LSET - 63)) | (1L << (MACRO_IF - 63)) | (1L << (ME - 63)) | (1L << (MID - 63)) | (1L << (MKDIR - 63)) | (1L << (MOD - 63)) | (1L << (NAME - 63)) | (1L << (NEXT - 63)) | (1L << (NEW - 63)) | (1L << (NOT - 63)) | (1L << (NOTHING - 63)) | (1L << (NULL - 63)) | (1L << (ON - 63)) | (1L << (ON_ERROR - 63)) | (1L << (OPEN - 63)) | (1L << (OPTIONAL - 63)) | (1L << (OPTION_BASE - 63)) | (1L << (OPTION_EXPLICIT - 63)) | (1L << (OPTION_COMPARE - 63)) | (1L << (OPTION_PRIVATE_MODULE - 63)) | (1L << (OR - 63)))) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (OUTPUT - 127)) | (1L << (PARAMARRAY - 127)) | (1L << (PRESERVE - 127)) | (1L << (PRINT - 127)) | (1L << (PRIVATE - 127)) | (1L << (PROPERTY_GET - 127)) | (1L << (PROPERTY_LET - 127)) | (1L << (PROPERTY_SET - 127)) | (1L << (PUBLIC - 127)) | (1L << (PUT - 127)) | (1L << (RANDOM - 127)) | (1L << (RANDOMIZE - 127)) | (1L << (RAISEEVENT - 127)) | (1L << (READ - 127)) | (1L << (REDIM - 127)) | (1L << (REM - 127)) | (1L << (RESET - 127)) | (1L << (RESUME - 127)) | (1L << (RETURN - 127)) | (1L << (RMDIR - 127)) | (1L << (RSET - 127)) | (1L << (SAVEPICTURE - 127)) | (1L << (SAVESETTING - 127)) | (1L << (SEEK - 127)) | (1L << (SELECT - 127)) | (1L << (SENDKEYS - 127)) | (1L << (SET - 127)) | (1L << (SETATTR - 127)) | (1L << (SHARED - 127)) | (1L << (SINGLE - 127)) | (1L << (SPC - 127)) | (1L << (STATIC - 127)) | (1L << (STEP - 127)) | (1L << (STOP - 127)) | (1L << (STRING - 127)) | (1L << (SUB - 127)) | (1L << (TAB - 127)) | (1L << (TEXT - 127)) | (1L << (THEN - 127)) | (1L << (TIME - 127)) | (1L << (TO - 127)) | (1L << (TRUE - 127)) | (1L << (TYPE - 127)) | (1L << (TYPEOF - 127)) | (1L << (UNLOAD - 127)) | (1L << (UNLOCK - 127)) | (1L << (UNTIL - 127)) | (1L << (VARIANT - 127)) | (1L << (VERSION - 127)) | (1L << (WEND - 127)) | (1L << (WHILE - 127)) | (1L << (WIDTH - 127)) | (1L << (WITH - 127)) | (1L << (WITHEVENTS - 127)) | (1L << (WRITE - 127)) | (1L << (XOR - 127)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (L_SQUARE_BRACKET - 201)) | (1L << (IDENTIFIER - 201)) | (1L << (NEWLINE - 201)) | (1L << (WS - 201)))) != 0)) {
				{
				State = 1183; moduleBody();
				State = 1185;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1184; Match(NEWLINE);
					}
					}
					State = 1187;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1191; Match(MID);
			State = 1193;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1192; Match(WS);
				}
			}

			State = 1195; Match(LPAREN);
			State = 1197;
			switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
			case 1:
				{
				State = 1196; Match(WS);
				}
				break;
			}
			State = 1199; argsCall();
			State = 1201;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1200; Match(WS);
				}
			}

			State = 1203; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MkdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public MkdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mkdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterMkdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitMkdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MkdirStmtContext mkdirStmt() {
		MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_mkdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1205; Match(MKDIR);
			State = 1206; Match(WS);
			State = 1207; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1209; Match(NAME);
			State = 1210; Match(WS);
			State = 1211; valueStmt(0);
			State = 1212; Match(WS);
			State = 1213; Match(AS);
			State = 1214; Match(WS);
			State = 1215; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_onErrorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1217; Match(ON_ERROR);
			State = 1218; Match(WS);
			State = 1225;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1219; Match(GOTO);
				State = 1220; Match(WS);
				State = 1221; valueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 1222; Match(RESUME);
				State = 1223; Match(WS);
				State = 1224; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1227; Match(ON);
			State = 1228; Match(WS);
			State = 1229; valueStmt(0);
			State = 1230; Match(WS);
			State = 1231; Match(GOTO);
			State = 1232; Match(WS);
			State = 1233; valueStmt(0);
			State = 1244;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,157,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1235;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1234; Match(WS);
						}
					}

					State = 1237; Match(T__6);
					State = 1239;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1238; Match(WS);
						}
					}

					State = 1241; valueStmt(0);
					}
					} 
				}
				State = 1246;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,157,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1247; Match(ON);
			State = 1248; Match(WS);
			State = 1249; valueStmt(0);
			State = 1250; Match(WS);
			State = 1251; Match(GOSUB);
			State = 1252; Match(WS);
			State = 1253; valueStmt(0);
			State = 1264;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,160,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1255;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1254; Match(WS);
						}
					}

					State = 1257; Match(T__6);
					State = 1259;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1258; Match(WS);
						}
					}

					State = 1261; valueStmt(0);
					}
					} 
				}
				State = 1266;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,160,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267; Match(OPEN);
			State = 1268; Match(WS);
			State = 1269; valueStmt(0);
			State = 1270; Match(WS);
			State = 1271; Match(FOR);
			State = 1272; Match(WS);
			State = 1273;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (INPUT - 87)) | (1L << (OUTPUT - 87)) | (1L << (RANDOM - 87)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1278;
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				State = 1274; Match(WS);
				State = 1275; Match(ACCESS);
				State = 1276; Match(WS);
				State = 1277;
				_la = _input.La(1);
				if ( !(((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (READ - 140)) | (1L << (READ_WRITE - 140)) | (1L << (WRITE - 140)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1282;
			switch ( Interpreter.AdaptivePredict(_input,162,_ctx) ) {
			case 1:
				{
				State = 1280; Match(WS);
				State = 1281;
				_la = _input.La(1);
				if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (LOCK_READ - 100)) | (1L << (LOCK_WRITE - 100)) | (1L << (LOCK_READ_WRITE - 100)) | (1L << (SHARED - 100)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1284; Match(WS);
			State = 1285; Match(AS);
			State = 1286; Match(WS);
			State = 1287; valueStmt(0);
			State = 1298;
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				State = 1288; Match(WS);
				State = 1289; Match(LEN);
				State = 1291;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1290; Match(WS);
					}
				}

				State = 1293; Match(EQ);
				State = 1295;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1294; Match(WS);
					}
				}

				State = 1297; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1333;
			switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1300; outputList_Expression();
				State = 1313;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,169,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1302;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1301; Match(WS);
							}
						}

						State = 1304;
						_la = _input.La(1);
						if ( !(_la==T__6 || _la==T__2) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1306;
						switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
						case 1:
							{
							State = 1305; Match(WS);
							}
							break;
						}
						State = 1309;
						_la = _input.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
							{
							State = 1308; outputList_Expression();
							}
						}

						}
						} 
					}
					State = 1315;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,169,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1317;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
					{
					State = 1316; outputList_Expression();
					}
				}

				State = 1329;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1320;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1319; Match(WS);
							}
						}

						State = 1322;
						_la = _input.La(1);
						if ( !(_la==T__6 || _la==T__2) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1324;
						switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
						case 1:
							{
							State = 1323; Match(WS);
							}
							break;
						}
						State = 1327;
						_la = _input.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
							{
							State = 1326; outputList_Expression();
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1331;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,174,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_outputList_Expression);
		int _la;
		try {
			State = 1352;
			switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1335; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1336;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1350;
				switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
				case 1:
					{
					State = 1338;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1337; Match(WS);
						}
					}

					State = 1340; Match(LPAREN);
					State = 1342;
					switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
					case 1:
						{
						State = 1341; Match(WS);
						}
						break;
					}
					State = 1344; argsCall();
					State = 1346;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1345; Match(WS);
						}
					}

					State = 1348; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1354; Match(PRINT);
			State = 1355; Match(WS);
			State = 1356; valueStmt(0);
			State = 1358;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1357; Match(WS);
				}
			}

			State = 1360; Match(T__6);
			State = 1365;
			switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				State = 1362;
				switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
				case 1:
					{
					State = 1361; Match(WS);
					}
					break;
				}
				State = 1364; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1370;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1367; visibility();
				State = 1368; Match(WS);
				}
			}

			State = 1374;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1372; Match(STATIC);
				State = 1373; Match(WS);
				}
			}

			State = 1376; Match(PROPERTY_GET);
			State = 1377; Match(WS);
			State = 1378; ambiguousIdentifier();
			State = 1383;
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				State = 1380;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1379; Match(WS);
					}
				}

				State = 1382; argList();
				}
				break;
			}
			State = 1387;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1385; Match(WS);
				State = 1386; asTypeClause();
				}
			}

			State = 1390;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1389; Match(NEWLINE);
				}
				}
				State = 1392;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1400;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1394; block();
				State = 1396;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1395; Match(NEWLINE);
					}
					}
					State = 1398;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1402; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1407;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1404; visibility();
				State = 1405; Match(WS);
				}
			}

			State = 1411;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1409; Match(STATIC);
				State = 1410; Match(WS);
				}
			}

			State = 1413; Match(PROPERTY_SET);
			State = 1414; Match(WS);
			State = 1415; ambiguousIdentifier();
			State = 1420;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1417;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1416; Match(WS);
					}
				}

				State = 1419; argList();
				}
			}

			State = 1423;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1422; Match(NEWLINE);
				}
				}
				State = 1425;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1433;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1427; block();
				State = 1429;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1428; Match(NEWLINE);
					}
					}
					State = 1431;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1435; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
		public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1440;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1437; visibility();
				State = 1438; Match(WS);
				}
			}

			State = 1444;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1442; Match(STATIC);
				State = 1443; Match(WS);
				}
			}

			State = 1446; Match(PROPERTY_LET);
			State = 1447; Match(WS);
			State = 1448; ambiguousIdentifier();
			State = 1453;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1450;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1449; Match(WS);
					}
				}

				State = 1452; argList();
				}
			}

			State = 1456;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1455; Match(NEWLINE);
				}
				}
				State = 1458;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1466;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1460; block();
				State = 1462;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1461; Match(NEWLINE);
					}
					}
					State = 1464;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1468; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1470; Match(PUT);
			State = 1471; Match(WS);
			State = 1472; valueStmt(0);
			State = 1474;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1473; Match(WS);
				}
			}

			State = 1476; Match(T__6);
			State = 1478;
			switch ( Interpreter.AdaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				State = 1477; Match(WS);
				}
				break;
			}
			State = 1481;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
				{
				State = 1480; valueStmt(0);
				}
			}

			State = 1484;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1483; Match(WS);
				}
			}

			State = 1486; Match(T__6);
			State = 1488;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1487; Match(WS);
				}
			}

			State = 1490; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1492; Match(RAISEEVENT);
			State = 1493; Match(WS);
			State = 1494; ambiguousIdentifier();
			State = 1509;
			switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				State = 1496;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1495; Match(WS);
					}
				}

				State = 1498; Match(LPAREN);
				State = 1500;
				switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
				case 1:
					{
					State = 1499; Match(WS);
					}
					break;
				}
				State = 1506;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__2) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (WS - 193)))) != 0)) {
					{
					State = 1502; argsCall();
					State = 1504;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1503; Match(WS);
						}
					}

					}
				}

				State = 1508; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizeStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRandomizeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRandomizeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizeStmtContext randomizeStmt() {
		RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_randomizeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1511; Match(RANDOMIZE);
			State = 1514;
			switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				State = 1512; Match(WS);
				State = 1513; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public IReadOnlyList<RedimSubStmtContext> redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1516; Match(REDIM);
			State = 1517; Match(WS);
			State = 1520;
			switch ( Interpreter.AdaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				State = 1518; Match(PRESERVE);
				State = 1519; Match(WS);
				}
				break;
			}
			State = 1522; redimSubStmt();
			State = 1533;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,220,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1524;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1523; Match(WS);
						}
					}

					State = 1526; Match(T__6);
					State = 1528;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1527; Match(WS);
						}
					}

					State = 1530; redimSubStmt();
					}
					} 
				}
				State = 1535;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,220,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1536; implicitCallStmt_InStmt();
			State = 1538;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1537; Match(WS);
				}
			}

			State = 1540; Match(LPAREN);
			State = 1542;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1541; Match(WS);
				}
			}

			State = 1544; subscripts();
			State = 1546;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1545; Match(WS);
				}
			}

			State = 1548; Match(RPAREN);
			State = 1551;
			switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				State = 1549; Match(WS);
				State = 1550; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1553; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555; Match(RESUME);
			State = 1561;
			switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				State = 1556; Match(WS);
				State = 1559;
				switch ( Interpreter.AdaptivePredict(_input,225,_ctx) ) {
				case 1:
					{
					State = 1557; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1558; ambiguousIdentifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1563; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public RmdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRmdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRmdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmdirStmtContext rmdirStmt() {
		RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_rmdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1565; Match(RMDIR);
			State = 1566; Match(WS);
			State = 1567; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1569; Match(RSET);
			State = 1570; Match(WS);
			State = 1571; implicitCallStmt_InStmt();
			State = 1573;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1572; Match(WS);
				}
			}

			State = 1575; Match(EQ);
			State = 1577;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1576; Match(WS);
				}
			}

			State = 1579; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepictureStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepictureStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSavepictureStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSavepictureStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepictureStmtContext savepictureStmt() {
		SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_savepictureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581; Match(SAVEPICTURE);
			State = 1582; Match(WS);
			State = 1583; valueStmt(0);
			State = 1585;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1584; Match(WS);
				}
			}

			State = 1587; Match(T__6);
			State = 1589;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1588; Match(WS);
				}
			}

			State = 1591; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveSettingStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveSettingStmtContext saveSettingStmt() {
		SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_saveSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1593; Match(SAVESETTING);
			State = 1594; Match(WS);
			State = 1595; valueStmt(0);
			State = 1597;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1596; Match(WS);
				}
			}

			State = 1599; Match(T__6);
			State = 1601;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1600; Match(WS);
				}
			}

			State = 1603; valueStmt(0);
			State = 1605;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1604; Match(WS);
				}
			}

			State = 1607; Match(T__6);
			State = 1609;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1608; Match(WS);
				}
			}

			State = 1611; valueStmt(0);
			State = 1613;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1612; Match(WS);
				}
			}

			State = 1615; Match(T__6);
			State = 1617;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1616; Match(WS);
				}
			}

			State = 1619; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1621; Match(SEEK);
			State = 1622; Match(WS);
			State = 1623; valueStmt(0);
			State = 1625;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1624; Match(WS);
				}
			}

			State = 1627; Match(T__6);
			State = 1629;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1628; Match(WS);
				}
			}

			State = 1631; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<SC_CaseContext> sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1633; Match(SELECT);
			State = 1634; Match(WS);
			State = 1635; Match(CASE);
			State = 1636; Match(WS);
			State = 1637; valueStmt(0);
			State = 1639;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1638; Match(NEWLINE);
				}
				}
				State = 1641;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1646;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1643; sC_Case();
				}
				}
				State = 1648;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1650;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1649; Match(WS);
				}
			}

			State = 1652; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_sC_Case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654; Match(CASE);
			State = 1655; Match(WS);
			State = 1656; sC_Cond();
			State = 1658;
			switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				State = 1657; Match(WS);
				}
				break;
			}
			State = 1674;
			switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				State = 1661;
				_la = _input.La(1);
				if (_la==T__5) {
					{
					State = 1660; Match(T__5);
					}
				}

				State = 1666;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 1663; Match(NEWLINE);
					}
					}
					State = 1668;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 1670;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1669; Match(NEWLINE);
					}
					}
					State = 1672;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1682;
			switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
			case 1:
				{
				State = 1676; block();
				State = 1678;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1677; Match(NEWLINE);
					}
					}
					State = 1680;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondToContext : SC_CondContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondToContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondValueContext : SC_CondContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondValueContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondIsContext : SC_CondContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public CaseCondIsContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1727;
			switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1684; Match(ELSE);
				}
				break;

			case 2:
				_localctx = new CaseCondIsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1685; Match(IS);
				State = 1687;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1686; Match(WS);
					}
				}

				State = 1689; comparisonOperator();
				State = 1691;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1690; Match(WS);
					}
				}

				State = 1693; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1695; valueStmt(0);
				State = 1706;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,253,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1697;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1696; Match(WS);
							}
						}

						State = 1699; Match(T__6);
						State = 1701;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1700; Match(WS);
							}
						}

						State = 1703; valueStmt(0);
						}
						} 
					}
					State = 1708;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,253,_ctx);
				}
				}
				break;

			case 4:
				_localctx = new CaseCondToContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1709; Match(INTEGERLITERAL);
				State = 1710; Match(WS);
				State = 1711; Match(TO);
				State = 1712; Match(WS);
				State = 1713; valueStmt(0);
				State = 1724;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,256,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1715;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1714; Match(WS);
							}
						}

						State = 1717; Match(T__6);
						State = 1719;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1718; Match(WS);
							}
						}

						State = 1721; valueStmt(0);
						}
						} 
					}
					State = 1726;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,256,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendkeysStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendkeysStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSendkeysStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSendkeysStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendkeysStmtContext sendkeysStmt() {
		SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_sendkeysStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1729; Match(SENDKEYS);
			State = 1730; Match(WS);
			State = 1731; valueStmt(0);
			State = 1740;
			switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
			case 1:
				{
				State = 1733;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1732; Match(WS);
					}
				}

				State = 1735; Match(T__6);
				State = 1737;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1736; Match(WS);
					}
				}

				State = 1739; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetattrStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SetattrStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setattrStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSetattrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSetattrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetattrStmtContext setattrStmt() {
		SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_setattrStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1742; Match(SETATTR);
			State = 1743; Match(WS);
			State = 1744; valueStmt(0);
			State = 1746;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1745; Match(WS);
				}
			}

			State = 1748; Match(T__6);
			State = 1750;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1749; Match(WS);
				}
			}

			State = 1752; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1754; Match(SET);
			State = 1755; Match(WS);
			State = 1756; implicitCallStmt_InStmt();
			State = 1758;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1757; Match(WS);
				}
			}

			State = 1760; Match(EQ);
			State = 1762;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1761; Match(WS);
				}
			}

			State = 1764; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1766; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1771;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1768; visibility();
				State = 1769; Match(WS);
				}
			}

			State = 1775;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1773; Match(STATIC);
				State = 1774; Match(WS);
				}
			}

			State = 1777; Match(SUB);
			State = 1778; Match(WS);
			State = 1779; ambiguousIdentifier();
			State = 1784;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1781;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1780; Match(WS);
					}
				}

				State = 1783; argList();
				}
			}

			State = 1787;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1786; Match(NEWLINE);
				}
				}
				State = 1789;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1797;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1791; block();
				State = 1793;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1792; Match(NEWLINE);
					}
					}
					State = 1795;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1799; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public TimeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTimeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTimeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStmtContext timeStmt() {
		TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_timeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801; Match(TIME);
			State = 1803;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1802; Match(WS);
				}
			}

			State = 1805; Match(EQ);
			State = 1807;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1806; Match(WS);
				}
			}

			State = 1809; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1814;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1811; visibility();
				State = 1812; Match(WS);
				}
			}

			State = 1816; Match(TYPE);
			State = 1817; Match(WS);
			State = 1818; ambiguousIdentifier();
			State = 1820;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1819; Match(NEWLINE);
				}
				}
				State = 1822;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1827;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 1824; typeStmt_Element();
				}
				}
				State = 1829;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1830; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1832; ambiguousIdentifier();
			State = 1847;
			switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
			case 1:
				{
				State = 1834;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1833; Match(WS);
					}
				}

				State = 1836; Match(LPAREN);
				State = 1841;
				switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
				case 1:
					{
					State = 1838;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1837; Match(WS);
						}
					}

					State = 1840; subscripts();
					}
					break;
				}
				State = 1844;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1843; Match(WS);
					}
				}

				State = 1846; Match(RPAREN);
				}
				break;
			}
			State = 1851;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1849; Match(WS);
				State = 1850; asTypeClause();
				}
			}

			State = 1854;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1853; Match(NEWLINE);
				}
				}
				State = 1856;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeOfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeOfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfStmtContext typeOfStmt() {
		TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_typeOfStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1858; Match(TYPEOF);
			State = 1859; Match(WS);
			State = 1860; valueStmt(0);
			State = 1865;
			switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				State = 1861; Match(WS);
				State = 1862; Match(IS);
				State = 1863; Match(WS);
				State = 1864; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnloadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public UnloadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unloadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterUnloadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitUnloadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnloadStmtContext unloadStmt() {
		UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_unloadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1867; Match(UNLOAD);
			State = 1868; Match(WS);
			State = 1869; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1871; Match(UNLOCK);
			State = 1872; Match(WS);
			State = 1873; valueStmt(0);
			State = 1888;
			switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				State = 1875;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1874; Match(WS);
					}
				}

				State = 1877; Match(T__6);
				State = 1879;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1878; Match(WS);
					}
				}

				State = 1881; valueStmt(0);
				State = 1886;
				switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					State = 1882; Match(WS);
					State = 1883; Match(TO);
					State = 1884; Match(WS);
					State = 1885; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsDivContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMinusContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsMinusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGeqContext : ValueStmtContext {
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsGeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsGeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsGeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLtContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLikeContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLikeContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLike(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNeqContext : ValueStmtContext {
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsNeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfStmtContext typeOfStmt() {
			return GetRuleContext<TypeOfStmtContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPlusContext : ValueStmtContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
		public VsPlusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public VsEqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIsContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsIsContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGtContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsGtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsGt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsGt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLeqContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVsLeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVsLeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 194;
		EnterRecursionRule(_localctx, 194, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1944;
			switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1891; Match(NEW);
				State = 1892; Match(WS);
				State = 1893; valueStmt(28);
				}
				break;

			case 2:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1894; Match(ADDRESSOF);
				State = 1895; Match(WS);
				State = 1896; valueStmt(25);
				}
				break;

			case 3:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1897; implicitCallStmt_InStmt();
				State = 1899;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1898; Match(WS);
					}
				}

				State = 1901; Match(ASSIGN);
				State = 1903;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1902; Match(WS);
					}
				}

				State = 1905; valueStmt(24);
				}
				break;

			case 4:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1907; Match(MINUS);
				State = 1909;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1908; Match(WS);
					}
				}

				State = 1911; valueStmt(14);
				}
				break;

			case 5:
				{
				_localctx = new VsPlusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1912; Match(PLUS);
				State = 1914;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1913; Match(WS);
					}
				}

				State = 1916; valueStmt(13);
				}
				break;

			case 6:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1917; Match(NOT);
				State = 1918; Match(WS);
				State = 1919; valueStmt(1);
				}
				break;

			case 7:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1920; literal();
				}
				break;

			case 8:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1921; implicitCallStmt_InStmt();
				}
				break;

			case 9:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1922; Match(LPAREN);
				State = 1924;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1923; Match(WS);
					}
				}

				State = 1926; valueStmt(0);
				State = 1937;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__6 || _la==WS) {
					{
					{
					State = 1928;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1927; Match(WS);
						}
					}

					State = 1930; Match(T__6);
					State = 1932;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1931; Match(WS);
						}
					}

					State = 1934; valueStmt(0);
					}
					}
					State = 1939;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1940; Match(RPAREN);
				}
				break;

			case 10:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1942; typeOfStmt();
				}
				break;

			case 11:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1943; midStmt();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2104;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,327,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2102;
					switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
					case 1:
						{
						_localctx = new VsIsContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1946;
						if (!(Precpred(_ctx, 23))) throw new FailedPredicateException(this, "Precpred(_ctx, 23)");
						State = 1947; Match(WS);
						State = 1948; Match(IS);
						State = 1949; Match(WS);
						State = 1950; valueStmt(24);
						}
						break;

					case 2:
						{
						_localctx = new VsLikeContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1951;
						if (!(Precpred(_ctx, 22))) throw new FailedPredicateException(this, "Precpred(_ctx, 22)");
						State = 1952; Match(WS);
						State = 1953; Match(LIKE);
						State = 1954; Match(WS);
						State = 1955; valueStmt(23);
						}
						break;

					case 3:
						{
						_localctx = new VsGeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1956;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 1958;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1957; Match(WS);
							}
						}

						State = 1960; Match(GEQ);
						State = 1962;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1961; Match(WS);
							}
						}

						State = 1964; valueStmt(22);
						}
						break;

					case 4:
						{
						_localctx = new VsLeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1965;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 1967;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1966; Match(WS);
							}
						}

						State = 1969; Match(LEQ);
						State = 1971;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1970; Match(WS);
							}
						}

						State = 1973; valueStmt(21);
						}
						break;

					case 5:
						{
						_localctx = new VsGtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1974;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 1976;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1975; Match(WS);
							}
						}

						State = 1978; Match(GT);
						State = 1980;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1979; Match(WS);
							}
						}

						State = 1982; valueStmt(20);
						}
						break;

					case 6:
						{
						_localctx = new VsLtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1983;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 1985;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1984; Match(WS);
							}
						}

						State = 1987; Match(LT);
						State = 1989;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1988; Match(WS);
							}
						}

						State = 1991; valueStmt(19);
						}
						break;

					case 7:
						{
						_localctx = new VsNeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1992;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 1994;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1993; Match(WS);
							}
						}

						State = 1996; Match(NEQ);
						State = 1998;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1997; Match(WS);
							}
						}

						State = 2000; valueStmt(18);
						}
						break;

					case 8:
						{
						_localctx = new VsEqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2001;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 2003;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2002; Match(WS);
							}
						}

						State = 2005; Match(EQ);
						State = 2007;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2006; Match(WS);
							}
						}

						State = 2009; valueStmt(17);
						}
						break;

					case 9:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2010;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2011; Match(WS);
						State = 2012; Match(AMPERSAND);
						State = 2013; Match(WS);
						State = 2014; valueStmt(16);
						}
						break;

					case 10:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2015;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2017;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2016; Match(WS);
							}
						}

						State = 2019; Match(PLUS);
						State = 2021;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2020; Match(WS);
							}
						}

						State = 2023; valueStmt(13);
						}
						break;

					case 11:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2024;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2026;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2025; Match(WS);
							}
						}

						State = 2028; Match(MOD);
						State = 2030;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2029; Match(WS);
							}
						}

						State = 2032; valueStmt(12);
						}
						break;

					case 12:
						{
						_localctx = new VsDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2033;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2035;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2034; Match(WS);
							}
						}

						State = 2037; Match(DIV);
						State = 2039;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2038; Match(WS);
							}
						}

						State = 2041; valueStmt(11);
						}
						break;

					case 13:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2042;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2044;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2043; Match(WS);
							}
						}

						State = 2046; Match(MULT);
						State = 2048;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2047; Match(WS);
							}
						}

						State = 2050; valueStmt(10);
						}
						break;

					case 14:
						{
						_localctx = new VsMinusContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2051;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2053;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2052; Match(WS);
							}
						}

						State = 2055; Match(MINUS);
						State = 2057;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2056; Match(WS);
							}
						}

						State = 2059; valueStmt(9);
						}
						break;

					case 15:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2060;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2062;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2061; Match(WS);
							}
						}

						State = 2064; Match(POW);
						State = 2066;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2065; Match(WS);
							}
						}

						State = 2068; valueStmt(8);
						}
						break;

					case 16:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2069;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2070; Match(WS);
						State = 2071; Match(IMP);
						State = 2072; Match(WS);
						State = 2073; valueStmt(7);
						}
						break;

					case 17:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2074;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2075; Match(WS);
						State = 2076; Match(EQV);
						State = 2077; Match(WS);
						State = 2078; valueStmt(6);
						}
						break;

					case 18:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2079;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2081;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2080; Match(WS);
							}
						}

						State = 2083; Match(XOR);
						State = 2085;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2084; Match(WS);
							}
						}

						State = 2087; valueStmt(5);
						}
						break;

					case 19:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2088;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2090;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2089; Match(WS);
							}
						}

						State = 2092; Match(OR);
						State = 2094;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2093; Match(WS);
							}
						}

						State = 2096; valueStmt(4);
						}
						break;

					case 20:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2097;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2098; Match(WS);
						State = 2099; Match(AND);
						State = 2100; Match(WS);
						State = 2101; valueStmt(3);
						}
						break;
					}
					} 
				}
				State = 2106;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,327,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2110;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 2107; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 2108; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 2109; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2112; Match(WS);
			State = 2115;
			switch ( Interpreter.AdaptivePredict(_input,329,_ctx) ) {
			case 1:
				{
				State = 2113; Match(WITHEVENTS);
				State = 2114; Match(WS);
				}
				break;
			}
			State = 2117; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public IReadOnlyList<VariableSubStmtContext> variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2119; variableSubStmt();
			State = 2130;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,332,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2121;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2120; Match(WS);
						}
					}

					State = 2123; Match(T__6);
					State = 2125;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2124; Match(WS);
						}
					}

					State = 2127; variableSubStmt();
					}
					} 
				}
				State = 2132;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,332,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2133; ambiguousIdentifier();
			State = 2151;
			switch ( Interpreter.AdaptivePredict(_input,338,_ctx) ) {
			case 1:
				{
				State = 2135;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2134; Match(WS);
					}
				}

				State = 2137; Match(LPAREN);
				State = 2139;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2138; Match(WS);
					}
				}

				State = 2145;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
					{
					State = 2141; subscripts();
					State = 2143;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2142; Match(WS);
						}
					}

					}
				}

				State = 2147; Match(RPAREN);
				State = 2149;
				switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
				case 1:
					{
					State = 2148; Match(WS);
					}
					break;
				}
				}
				break;
			}
			State = 2154;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 2153; typeHint();
				}
			}

			State = 2158;
			switch ( Interpreter.AdaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				State = 2156; Match(WS);
				State = 2157; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public IReadOnlyList<BlockContext> block() {
			return GetRuleContexts<BlockContext>();
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_whileWendStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2160; Match(WHILE);
			State = 2161; Match(WS);
			State = 2162; valueStmt(0);
			State = 2164;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2163; Match(NEWLINE);
				}
				}
				State = 2166;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2173;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,342,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2168; block();
					State = 2169; Match(NEWLINE);
					}
					} 
				}
				State = 2175;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,342,_ctx);
			}
			State = 2176; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2178; Match(WIDTH);
			State = 2179; Match(WS);
			State = 2180; valueStmt(0);
			State = 2182;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2181; Match(WS);
				}
			}

			State = 2184; Match(T__6);
			State = 2186;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2185; Match(WS);
				}
			}

			State = 2188; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBAParser.NEWLINE, i);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_withStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2190; Match(WITH);
			State = 2191; Match(WS);
			State = 2192; implicitCallStmt_InStmt();
			State = 2194;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2193; Match(NEWLINE);
				}
				}
				State = 2196;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2204;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 2198; block();
				State = 2200;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2199; Match(NEWLINE);
					}
					}
					State = 2202;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 2206; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2208; Match(WRITE);
			State = 2209; Match(WS);
			State = 2210; valueStmt(0);
			State = 2212;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2211; Match(WS);
				}
			}

			State = 2214; Match(T__6);
			State = 2219;
			switch ( Interpreter.AdaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				State = 2216;
				switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					State = 2215; Match(WS);
					}
					break;
				}
				State = 2218; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ECS_ProcedureCallContext eCS_ProcedureCall() {
			return GetRuleContext<ECS_ProcedureCallContext>(0);
		}
		public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
			return GetRuleContext<ECS_MemberProcedureCallContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_explicitCallStmt);
		try {
			State = 2223;
			switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2221; eCS_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2222; eCS_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_ProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_ProcedureCallContext eCS_ProcedureCall() {
		ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_eCS_ProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2225; Match(CALL);
			State = 2226; Match(WS);
			State = 2227; ambiguousIdentifier();
			State = 2229;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 2228; typeHint();
				}
			}

			State = 2244;
			switch ( Interpreter.AdaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				State = 2232;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2231; Match(WS);
					}
				}

				State = 2234; Match(LPAREN);
				State = 2236;
				switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					State = 2235; Match(WS);
					}
					break;
				}
				State = 2238; argsCall();
				State = 2240;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2239; Match(WS);
					}
				}

				State = 2242; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_MemberProcedureCallContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
		ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_eCS_MemberProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2246; Match(CALL);
			State = 2247; Match(WS);
			State = 2249;
			switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				State = 2248; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2251; Match(T__7);
			State = 2252; ambiguousIdentifier();
			State = 2254;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 2253; typeHint();
				}
			}

			State = 2269;
			switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				State = 2257;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2256; Match(WS);
					}
				}

				State = 2259; Match(LPAREN);
				State = 2261;
				switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					State = 2260; Match(WS);
					}
					break;
				}
				State = 2263; argsCall();
				State = 2265;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2264; Match(WS);
					}
				}

				State = 2267; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_implicitCallStmt_InBlock);
		try {
			State = 2273;
			switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2271; iCS_B_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2272; iCS_B_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public CertainIdentifierContext certainIdentifier() {
			return GetRuleContext<CertainIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_iCS_B_ProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2275; certainIdentifier();
			State = 2278;
			switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
			case 1:
				{
				State = 2276; Match(WS);
				State = 2277; argsCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_iCS_B_MemberProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2281;
			switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				State = 2280; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2283; Match(T__7);
			State = 2284; ambiguousIdentifier();
			State = 2286;
			switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
			case 1:
				{
				State = 2285; typeHint();
				}
				break;
			}
			State = 2290;
			switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				State = 2288; Match(WS);
				State = 2289; argsCall();
				}
				break;
			}
			State = 2293;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 2292; dictionaryCallStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_implicitCallStmt_InStmt);
		try {
			State = 2299;
			switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2295; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2296; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2297; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2298; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_iCS_S_VariableOrProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2301; ambiguousIdentifier();
			State = 2303;
			switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				State = 2302; typeHint();
				}
				break;
			}
			State = 2306;
			switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
			case 1:
				{
				State = 2305; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2310;
			switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				State = 2308; ambiguousIdentifier();
				}
				break;

			case 2:
				{
				State = 2309; baseType();
				}
				break;
			}
			State = 2313;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 2312; typeHint();
				}
			}

			State = 2316;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2315; Match(WS);
				}
			}

			State = 2318; Match(LPAREN);
			State = 2320;
			switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
			case 1:
				{
				State = 2319; Match(WS);
				}
				break;
			}
			State = 2326;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__2) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (WS - 193)))) != 0)) {
				{
				State = 2322; argsCall();
				State = 2324;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2323; Match(WS);
					}
				}

				}
			}

			State = 2328; Match(RPAREN);
			State = 2330;
			switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				State = 2329; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_iCS_S_MembersCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2334;
			switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				State = 2332; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2333; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2337;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2336; iCS_S_MemberCall();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2339;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,380,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2342;
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 2341; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_iCS_S_MemberCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2344; Match(T__7);
			State = 2347;
			switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				State = 2345; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2346; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_iCS_S_DictionaryCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2349; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ArgCallContext> argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2363;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,386,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2352;
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
						{
						State = 2351; argCall();
						}
					}

					State = 2355;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2354; Match(WS);
						}
					}

					State = 2357;
					_la = _input.La(1);
					if ( !(_la==T__6 || _la==T__2) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2359;
					switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
					case 1:
						{
						State = 2358; Match(WS);
						}
						break;
					}
					}
					} 
				}
				State = 2365;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,386,_ctx);
			}
			State = 2366; argCall();
			State = 2379;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,390,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2368;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2367; Match(WS);
						}
					}

					State = 2370;
					_la = _input.La(1);
					if ( !(_la==T__6 || _la==T__2) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2372;
					switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
					case 1:
						{
						State = 2371; Match(WS);
						}
						break;
					}
					State = 2375;
					switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
					case 1:
						{
						State = 2374; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2381;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,390,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2384;
			switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				State = 2382;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2383; Match(WS);
				}
				break;
			}
			State = 2386; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_dictionaryCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2388; Match(T__1);
			State = 2389; ambiguousIdentifier();
			State = 2391;
			switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				State = 2390; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ArgContext> arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2393; Match(LPAREN);
			State = 2411;
			switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				State = 2395;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2394; Match(WS);
					}
				}

				State = 2397; arg();
				State = 2408;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,396,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2399;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2398; Match(WS);
							}
						}

						State = 2401; Match(T__6);
						State = 2403;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2402; Match(WS);
							}
						}

						State = 2405; arg();
						}
						} 
					}
					State = 2410;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,396,_ctx);
				}
				}
				break;
			}
			State = 2414;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2413; Match(WS);
				}
			}

			State = 2416; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2420;
			switch ( Interpreter.AdaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				State = 2418; Match(OPTIONAL);
				State = 2419; Match(WS);
				}
				break;
			}
			State = 2424;
			switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				State = 2422;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2423; Match(WS);
				}
				break;
			}
			State = 2428;
			switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
			case 1:
				{
				State = 2426; Match(PARAMARRAY);
				State = 2427; Match(WS);
				}
				break;
			}
			State = 2430; ambiguousIdentifier();
			State = 2439;
			switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				State = 2432;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2431; Match(WS);
					}
				}

				State = 2434; Match(LPAREN);
				State = 2436;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2435; Match(WS);
					}
				}

				State = 2438; Match(RPAREN);
				}
				break;
			}
			State = 2443;
			switch ( Interpreter.AdaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				State = 2441; Match(WS);
				State = 2442; asTypeClause();
				}
				break;
			}
			State = 2449;
			switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				State = 2446;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2445; Match(WS);
					}
				}

				State = 2448; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_argDefaultValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2451; Match(EQ);
			State = 2453;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2452; Match(WS);
				}
			}

			State = 2457;
			switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				State = 2455; literal();
				}
				break;

			case 2:
				{
				State = 2456; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2459; subscript();
			State = 2470;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,412,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2461;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2460; Match(WS);
						}
					}

					State = 2463; Match(T__6);
					State = 2465;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2464; Match(WS);
						}
					}

					State = 2467; subscript();
					}
					} 
				}
				State = 2472;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,412,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2478;
			switch ( Interpreter.AdaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				State = 2473; valueStmt(0);
				State = 2474; Match(WS);
				State = 2475; Match(TO);
				State = 2476; Match(WS);
				}
				break;
			}
			State = 2480; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousIdentifierContext : ParserRuleContext {
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBAParser.R_SQUARE_BRACKET, 0); }
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBAParser.L_SQUARE_BRACKET, 0); }
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBAParser.IDENTIFIER, i);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousIdentifierContext ambiguousIdentifier() {
		AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_ambiguousIdentifier);
		int _la;
		try {
			int _alt;
			State = 2496;
			switch (_input.La(1)) {
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2484;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2484;
						switch (_input.La(1)) {
						case IDENTIFIER:
							{
							State = 2482; Match(IDENTIFIER);
							}
							break;
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATABASE:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2483; ambiguousKeyword();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2486;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,415,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2488; Match(L_SQUARE_BRACKET);
				State = 2491;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 2491;
					switch (_input.La(1)) {
					case IDENTIFIER:
						{
						State = 2489; Match(IDENTIFIER);
						}
						break;
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATABASE:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2490; ambiguousKeyword();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2493;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER );
				State = 2495; Match(R_SQUARE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_asTypeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2498; Match(AS);
			State = 2499; Match(WS);
			State = 2502;
			switch ( Interpreter.AdaptivePredict(_input,419,_ctx) ) {
			case 1:
				{
				State = 2500; Match(NEW);
				State = 2501; Match(WS);
				}
				break;
			}
			State = 2504; type();
			State = 2507;
			switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				State = 2505; Match(WS);
				State = 2506; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2509;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || _la==INTEGER || _la==LONG || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (SINGLE - 157)) | (1L << (STRING - 157)) | (1L << (VARIANT - 157)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CertainIdentifierContext : ParserRuleContext {
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBAParser.IDENTIFIER, i);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_certainIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterCertainIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitCertainIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CertainIdentifierContext certainIdentifier() {
		CertainIdentifierContext _localctx = new CertainIdentifierContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_certainIdentifier);
		int _la;
		try {
			State = 2526;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2511; Match(IDENTIFIER);
				State = 2516;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER) {
					{
					State = 2514;
					switch (_input.La(1)) {
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATABASE:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2512; ambiguousKeyword();
						}
						break;
					case IDENTIFIER:
						{
						State = 2513; Match(IDENTIFIER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2518;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2519; ambiguousKeyword();
				State = 2522;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 2522;
					switch (_input.La(1)) {
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATABASE:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2520; ambiguousKeyword();
						}
						break;
					case IDENTIFIER:
						{
						State = 2521; Match(IDENTIFIER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2524;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
		public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
		public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2528;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (EQ - 187)) | (1L << (GEQ - 187)) | (1L << (GT - 187)) | (1L << (LEQ - 187)) | (1L << (LT - 187)) | (1L << (NEQ - 187)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_complexType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2530; ambiguousIdentifier();
			State = 2535;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,426,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2531; Match(T__7);
					State = 2532; ambiguousIdentifier();
					}
					} 
				}
				State = 2537;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,426,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2538; Match(MULT);
			State = 2540;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2539; Match(WS);
				}
			}

			State = 2544;
			switch (_input.La(1)) {
			case INTEGERLITERAL:
				{
				State = 2542; Match(INTEGERLITERAL);
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				{
				State = 2543; ambiguousIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public IReadOnlyList<CertainIdentifierContext> certainIdentifier() {
			return GetRuleContexts<CertainIdentifierContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public CertainIdentifierContext certainIdentifier(int i) {
			return GetRuleContext<CertainIdentifierContext>(i);
		}
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2546; certainIdentifier();
			State = 2555;
			switch ( Interpreter.AdaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				State = 2548;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2547; Match(WS);
					}
				}

				State = 2550; Match(MINUS);
				State = 2552;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2551; Match(WS);
					}
				}

				State = 2554; certainIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_lineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2557; ambiguousIdentifier();
			State = 2558; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode FILENUMBER() { return GetToken(VBAParser.FILENUMBER, 0); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
		public ITerminalNode COLORLITERAL() { return GetToken(VBAParser.COLORLITERAL, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2560;
			_la = _input.La(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (FALSE - 74)) | (1L << (NOTHING - 74)) | (1L << (NULL - 74)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (TRUE - 169)) | (1L << (STRINGLITERAL - 169)) | (1L << (DATELITERAL - 169)) | (1L << (COLORLITERAL - 169)) | (1L << (INTEGERLITERAL - 169)) | (1L << (DOUBLELITERAL - 169)) | (1L << (FILENUMBER - 169)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBAParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2564;
			switch ( Interpreter.AdaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				State = 2562; baseType();
				}
				break;

			case 2:
				{
				State = 2563; complexType();
				}
				break;
			}
			State = 2574;
			switch ( Interpreter.AdaptivePredict(_input,435,_ctx) ) {
			case 1:
				{
				State = 2567;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2566; Match(WS);
					}
				}

				State = 2569; Match(LPAREN);
				State = 2571;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2570; Match(WS);
					}
				}

				State = 2573; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2576;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2578;
			_la = _input.La(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousKeywordContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
		public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
		public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
		public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
		public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
		public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
		public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
		public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
		public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
		public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
		public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
		public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
		public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
		public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
		public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
		public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
		public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
		public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
		public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
		public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
		public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
		public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
		public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
		public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
		public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
		public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
		public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
		public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
		public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
		public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
		public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
		public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
		public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
		public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
		public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
		public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
		public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
		public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
		public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
		public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
		public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
		public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
		public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
		public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
		public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
		public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
		public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
		public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
		public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
		public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
		public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
		public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
		public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
		public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
		public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
		public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
		public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
		public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
		public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
		public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
		public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
		public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
		public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
		public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
		public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
		public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
		public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
		public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
		public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
		public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
		public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
		public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
		public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
		public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
		public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
		public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
		public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
		public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
		public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
		public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
		public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
		public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
		public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
		public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
		public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
		public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
		public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
		public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBAListener typedListener = listener as IVBAListener;
			if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousKeywordContext ambiguousKeyword() {
		AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_ambiguousKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2580;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 97: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 23);

		case 1: return Precpred(_ctx, 22);

		case 2: return Precpred(_ctx, 21);

		case 3: return Precpred(_ctx, 20);

		case 4: return Precpred(_ctx, 19);

		case 5: return Precpred(_ctx, 18);

		case 6: return Precpred(_ctx, 17);

		case 7: return Precpred(_ctx, 16);

		case 8: return Precpred(_ctx, 15);

		case 9: return Precpred(_ctx, 12);

		case 10: return Precpred(_ctx, 11);

		case 11: return Precpred(_ctx, 10);

		case 12: return Precpred(_ctx, 9);

		case 13: return Precpred(_ctx, 8);

		case 14: return Precpred(_ctx, 7);

		case 15: return Precpred(_ctx, 6);

		case 17: return Precpred(_ctx, 4);

		case 16: return Precpred(_ctx, 5);

		case 19: return Precpred(_ctx, 2);

		case 18: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xD7\xA19\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x3\x2"+
		"\x3\x2\x3\x2\x3\x3\x5\x3\x11D\n\x3\x3\x3\a\x3\x120\n\x3\f\x3\xE\x3\x123"+
		"\v\x3\x3\x3\x3\x3\x6\x3\x127\n\x3\r\x3\xE\x3\x128\x5\x3\x12B\n\x3\x3\x3"+
		"\x5\x3\x12E\n\x3\x3\x3\a\x3\x131\n\x3\f\x3\xE\x3\x134\v\x3\x3\x3\x5\x3"+
		"\x137\n\x3\x3\x3\a\x3\x13A\n\x3\f\x3\xE\x3\x13D\v\x3\x3\x3\x5\x3\x140"+
		"\n\x3\x3\x3\a\x3\x143\n\x3\f\x3\xE\x3\x146\v\x3\x3\x3\x5\x3\x149\n\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x6\x5\x153\n\x5\r\x5"+
		"\xE\x5\x154\x3\x5\x6\x5\x158\n\x5\r\x5\xE\x5\x159\x3\x5\x3\x5\x6\x5\x15E"+
		"\n\x5\r\x5\xE\x5\x15F\x3\x6\x3\x6\x5\x6\x164\n\x6\x3\x6\x3\x6\x5\x6\x168"+
		"\n\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x6\a\x16F\n\a\r\a\xE\a\x170\x6\a\x173"+
		"\n\a\r\a\xE\a\x174\x3\b\x3\b\x6\b\x179\n\b\r\b\xE\b\x17A\x6\b\x17D\n\b"+
		"\r\b\xE\b\x17E\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x189\n\t\x3"+
		"\n\x3\n\x6\n\x18D\n\n\r\n\xE\n\x18E\x3\n\a\n\x192\n\n\f\n\xE\n\x195\v"+
		"\n\x3\n\x5\n\x198\n\n\x3\n\a\n\x19B\n\n\f\n\xE\n\x19E\v\n\x5\n\x1A0\n"+
		"\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x1AD\n"+
		"\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x5\r\x1B5\n\r\x3\r\x3\r\x5\r\x1B9\n\r"+
		"\x3\r\x3\r\x5\r\x1BD\n\r\x3\r\x3\r\x5\r\x1C1\n\r\x3\r\a\r\x1C4\n\r\f\r"+
		"\xE\r\x1C7\v\r\x3\xE\x3\xE\x6\xE\x1CB\n\xE\r\xE\xE\xE\x1CC\x3\xE\x5\xE"+
		"\x1D0\n\xE\x3\xE\a\xE\x1D3\n\xE\f\xE\xE\xE\x1D6\v\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x21B\n\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x5\x10\x221\n\x10\x3\x10\x3\x10\x5\x10\x225\n\x10\x3\x10"+
		"\x5\x10\x228\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x238\n\x14\x3\x14"+
		"\x3\x14\x5\x14\x23C\n\x14\x3\x14\a\x14\x23F\n\x14\f\x14\xE\x14\x242\v"+
		"\x14\x5\x14\x244\n\x14\x3\x15\x3\x15\x3\x15\x5\x15\x249\n\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x5\x15\x24F\n\x15\x3\x15\x3\x15\x5\x15\x253\n\x15\x3"+
		"\x15\a\x15\x256\n\x15\f\x15\xE\x15\x259\v\x15\x3\x16\x3\x16\x5\x16\x25D"+
		"\n\x16\x3\x16\x3\x16\x5\x16\x261\n\x16\x3\x16\x5\x16\x264\n\x16\x3\x16"+
		"\x3\x16\x5\x16\x268\n\x16\x3\x16\x3\x16\x3\x17\x3\x17\x5\x17\x26E\n\x17"+
		"\x3\x17\x3\x17\x5\x17\x272\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x5"+
		"\x18\x279\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x288\n\x18\x3\x18\x5\x18\x28B"+
		"\n\x18\x3\x18\x5\x18\x28E\n\x18\x3\x18\x3\x18\x5\x18\x292\n\x18\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x5\x19\x298\n\x19\x3\x19\x3\x19\x5\x19\x29C\n\x19"+
		"\x3\x19\a\x19\x29F\n\x19\f\x19\xE\x19\x2A2\v\x19\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x5\x1A\x2A8\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2AC\n\x1A\x3\x1A\x3\x1A"+
		"\x5\x1A\x2B0\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2B4\n\x1A\x3\x1A\x5\x1A\x2B7"+
		"\n\x1A\x3\x1B\x3\x1B\x6\x1B\x2BB\n\x1B\r\x1B\xE\x1B\x2BC\x3\x1B\x3\x1B"+
		"\x6\x1B\x2C1\n\x1B\r\x1B\xE\x1B\x2C2\x5\x1B\x2C5\n\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x6\x1B\x2CE\n\x1B\r\x1B\xE\x1B\x2CF\x3"+
		"\x1B\x3\x1B\x6\x1B\x2D4\n\x1B\r\x1B\xE\x1B\x2D5\x5\x1B\x2D8\n\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x6\x1B\x2DE\n\x1B\r\x1B\xE\x1B\x2DF\x3\x1B\x3\x1B"+
		"\x6\x1B\x2E4\n\x1B\r\x1B\xE\x1B\x2E5\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x5\x1B\x2EE\n\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x2F5"+
		"\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x6\x1D\x2FB\n\x1D\r\x1D\xE\x1D\x2FC"+
		"\x3\x1D\a\x1D\x300\n\x1D\f\x1D\xE\x1D\x303\v\x1D\x3\x1D\x3\x1D\x3\x1E"+
		"\x3\x1E\x5\x1E\x309\n\x1E\x3\x1E\x3\x1E\x5\x1E\x30D\n\x1E\x3\x1E\x5\x1E"+
		"\x310\n\x1E\x3\x1E\x6\x1E\x313\n\x1E\r\x1E\xE\x1E\x314\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3!\x3!\x3!\x5!\x322\n!\x3!\x3!\x3!\x3!\x5"+
		"!\x328\n!\x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\x3#\x5#\x332\n#\x3#\x3#\x5#\x336"+
		"\n#\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x340\n$\x3$\x3$\x3$\x3$\x3$\x6"+
		"$\x347\n$\r$\xE$\x348\x3$\x3$\x6$\x34D\n$\r$\xE$\x34E\x5$\x351\n$\x3$"+
		"\x3$\x3$\x5$\x356\n$\x3%\x3%\x3%\x3%\x5%\x35C\n%\x3%\x3%\x5%\x360\n%\x3"+
		"%\x5%\x363\n%\x3%\x3%\x5%\x367\n%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%"+
		"\x5%\x372\n%\x3%\x6%\x375\n%\r%\xE%\x376\x3%\x3%\x6%\x37B\n%\r%\xE%\x37C"+
		"\x5%\x37F\n%\x3%\x3%\x3%\x5%\x384\n%\x3&\x3&\x3&\x5&\x389\n&\x3&\x3&\x5"+
		"&\x38D\n&\x3&\x3&\x3&\x3&\x5&\x393\n&\x3&\x5&\x396\n&\x3&\x3&\x5&\x39A"+
		"\n&\x3&\x6&\x39D\n&\r&\xE&\x39E\x3&\x3&\x6&\x3A3\n&\r&\xE&\x3A4\x5&\x3A7"+
		"\n&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x5\'\x3AF\n\'\x3\'\x3\'\x5\'\x3B3\n\'"+
		"\x3\'\x5\'\x3B6\n\'\x3\'\x5\'\x3B9\n\'\x3\'\x3\'\x5\'\x3BD\n\'\x3\'\x3"+
		"\'\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3"+
		"*\x3*\x3*\x5*\x3D4\n*\x3*\x3*\a*\x3D8\n*\f*\xE*\x3DB\v*\x3*\x5*\x3DE\n"+
		"*\x3*\x3*\x5*\x3E2\n*\x3+\x3+\x3+\x3+\x3+\x3+\x6+\x3EA\n+\r+\xE+\x3EB"+
		"\x3+\x3+\x6+\x3F0\n+\r+\xE+\x3F1\x5+\x3F4\n+\x3,\x3,\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x6-\x3FE\n-\r-\xE-\x3FF\x3-\x3-\x6-\x404\n-\r-\xE-\x405\x5-\x408"+
		"\n-\x3.\x3.\x6.\x40C\n.\r.\xE.\x40D\x3.\x3.\x6.\x412\n.\r.\xE.\x413\x5"+
		".\x416\n.\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x420\n\x30"+
		"\x3\x30\x3\x30\x5\x30\x424\n\x30\x3\x30\x6\x30\x427\n\x30\r\x30\xE\x30"+
		"\x428\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x5\x32\x431\n\x32\x3\x32"+
		"\x3\x32\x5\x32\x435\n\x32\x3\x32\x3\x32\x5\x32\x439\n\x32\x3\x32\x3\x32"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x441\n\x33\x3\x33\x3\x33\x5\x33\x445"+
		"\n\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35"+
		"\x3\x35\x5\x35\x451\n\x35\x3\x35\x3\x35\x5\x35\x455\n\x35\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x3\x35\x5\x35\x45C\n\x35\x5\x35\x45E\n\x35\x3\x36\x3\x36"+
		"\x3\x36\x3\x36\x5\x36\x464\n\x36\x3\x36\x3\x36\x5\x36\x468\n\x36\x3\x36"+
		"\x3\x36\x3\x37\x3\x37\a\x37\x46E\n\x37\f\x37\xE\x37\x471\v\x37\x3\x37"+
		"\x5\x37\x474\n\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3"+
		"\x38\x6\x38\x47E\n\x38\r\x38\xE\x38\x47F\x3\x38\x3\x38\x6\x38\x484\n\x38"+
		"\r\x38\xE\x38\x485\x5\x38\x488\n\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39"+
		"\x3\x39\x6\x39\x490\n\x39\r\x39\xE\x39\x491\x3\x39\x3\x39\x6\x39\x496"+
		"\n\x39\r\x39\xE\x39\x497\x5\x39\x49A\n\x39\x3:\x3:\x6:\x49E\n:\r:\xE:"+
		"\x49F\x3:\x3:\x6:\x4A4\n:\r:\xE:\x4A5\x5:\x4A8\n:\x3;\x3;\x5;\x4AC\n;"+
		"\x3;\x3;\x5;\x4B0\n;\x3;\x3;\x5;\x4B4\n;\x3;\x3;\x3<\x3<\x3<\x3<\x3=\x3"+
		"=\x3=\x3=\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x5>\x4CC\n>"+
		"\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x5?\x4D6\n?\x3?\x3?\x5?\x4DA\n?\x3?\a"+
		"?\x4DD\n?\f?\xE?\x4E0\v?\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x5@\x4EA\n@\x3"+
		"@\x3@\x5@\x4EE\n@\x3@\a@\x4F1\n@\f@\xE@\x4F4\v@\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x501\n\x41"+
		"\x3\x41\x3\x41\x5\x41\x505\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x5\x41\x50E\n\x41\x3\x41\x3\x41\x5\x41\x512\n\x41\x3\x41\x5"+
		"\x41\x515\n\x41\x3\x42\x3\x42\x5\x42\x519\n\x42\x3\x42\x3\x42\x5\x42\x51D"+
		"\n\x42\x3\x42\x5\x42\x520\n\x42\a\x42\x522\n\x42\f\x42\xE\x42\x525\v\x42"+
		"\x3\x42\x5\x42\x528\n\x42\x3\x42\x5\x42\x52B\n\x42\x3\x42\x3\x42\x5\x42"+
		"\x52F\n\x42\x3\x42\x5\x42\x532\n\x42\x6\x42\x534\n\x42\r\x42\xE\x42\x535"+
		"\x5\x42\x538\n\x42\x3\x43\x3\x43\x3\x43\x5\x43\x53D\n\x43\x3\x43\x3\x43"+
		"\x5\x43\x541\n\x43\x3\x43\x3\x43\x5\x43\x545\n\x43\x3\x43\x3\x43\x5\x43"+
		"\x549\n\x43\x5\x43\x54B\n\x43\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x551"+
		"\n\x44\x3\x44\x3\x44\x5\x44\x555\n\x44\x3\x44\x5\x44\x558\n\x44\x3\x45"+
		"\x3\x45\x3\x45\x5\x45\x55D\n\x45\x3\x45\x3\x45\x5\x45\x561\n\x45\x3\x45"+
		"\x3\x45\x3\x45\x3\x45\x5\x45\x567\n\x45\x3\x45\x5\x45\x56A\n\x45\x3\x45"+
		"\x3\x45\x5\x45\x56E\n\x45\x3\x45\x6\x45\x571\n\x45\r\x45\xE\x45\x572\x3"+
		"\x45\x3\x45\x6\x45\x577\n\x45\r\x45\xE\x45\x578\x5\x45\x57B\n\x45\x3\x45"+
		"\x3\x45\x3\x46\x3\x46\x3\x46\x5\x46\x582\n\x46\x3\x46\x3\x46\x5\x46\x586"+
		"\n\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x58C\n\x46\x3\x46\x5\x46\x58F"+
		"\n\x46\x3\x46\x6\x46\x592\n\x46\r\x46\xE\x46\x593\x3\x46\x3\x46\x6\x46"+
		"\x598\n\x46\r\x46\xE\x46\x599\x5\x46\x59C\n\x46\x3\x46\x3\x46\x3G\x3G"+
		"\x3G\x5G\x5A3\nG\x3G\x3G\x5G\x5A7\nG\x3G\x3G\x3G\x3G\x5G\x5AD\nG\x3G\x5"+
		"G\x5B0\nG\x3G\x6G\x5B3\nG\rG\xEG\x5B4\x3G\x3G\x6G\x5B9\nG\rG\xEG\x5BA"+
		"\x5G\x5BD\nG\x3G\x3G\x3H\x3H\x3H\x3H\x5H\x5C5\nH\x3H\x3H\x5H\x5C9\nH\x3"+
		"H\x5H\x5CC\nH\x3H\x5H\x5CF\nH\x3H\x3H\x5H\x5D3\nH\x3H\x3H\x3I\x3I\x3I"+
		"\x3I\x5I\x5DB\nI\x3I\x3I\x5I\x5DF\nI\x3I\x3I\x5I\x5E3\nI\x5I\x5E5\nI\x3"+
		"I\x5I\x5E8\nI\x3J\x3J\x3J\x5J\x5ED\nJ\x3K\x3K\x3K\x3K\x5K\x5F3\nK\x3K"+
		"\x3K\x5K\x5F7\nK\x3K\x3K\x5K\x5FB\nK\x3K\aK\x5FE\nK\fK\xEK\x601\vK\x3"+
		"L\x3L\x5L\x605\nL\x3L\x3L\x5L\x609\nL\x3L\x3L\x5L\x60D\nL\x3L\x3L\x3L"+
		"\x5L\x612\nL\x3M\x3M\x3N\x3N\x3N\x3N\x5N\x61A\nN\x5N\x61C\nN\x3O\x3O\x3"+
		"P\x3P\x3P\x3P\x3Q\x3Q\x3Q\x3Q\x5Q\x628\nQ\x3Q\x3Q\x5Q\x62C\nQ\x3Q\x3Q"+
		"\x3R\x3R\x3R\x3R\x5R\x634\nR\x3R\x3R\x5R\x638\nR\x3R\x3R\x3S\x3S\x3S\x3"+
		"S\x5S\x640\nS\x3S\x3S\x5S\x644\nS\x3S\x3S\x5S\x648\nS\x3S\x3S\x5S\x64C"+
		"\nS\x3S\x3S\x5S\x650\nS\x3S\x3S\x5S\x654\nS\x3S\x3S\x3T\x3T\x3T\x3T\x5"+
		"T\x65C\nT\x3T\x3T\x5T\x660\nT\x3T\x3T\x3U\x3U\x3U\x3U\x3U\x3U\x6U\x66A"+
		"\nU\rU\xEU\x66B\x3U\aU\x66F\nU\fU\xEU\x672\vU\x3U\x5U\x675\nU\x3U\x3U"+
		"\x3V\x3V\x3V\x3V\x5V\x67D\nV\x3V\x5V\x680\nV\x3V\aV\x683\nV\fV\xEV\x686"+
		"\vV\x3V\x6V\x689\nV\rV\xEV\x68A\x5V\x68D\nV\x3V\x3V\x6V\x691\nV\rV\xE"+
		"V\x692\x5V\x695\nV\x3W\x3W\x3W\x5W\x69A\nW\x3W\x3W\x5W\x69E\nW\x3W\x3"+
		"W\x3W\x3W\x5W\x6A4\nW\x3W\x3W\x5W\x6A8\nW\x3W\aW\x6AB\nW\fW\xEW\x6AE\v"+
		"W\x3W\x3W\x3W\x3W\x3W\x3W\x5W\x6B6\nW\x3W\x3W\x5W\x6BA\nW\x3W\aW\x6BD"+
		"\nW\fW\xEW\x6C0\vW\x5W\x6C2\nW\x3X\x3X\x3X\x3X\x5X\x6C8\nX\x3X\x3X\x5"+
		"X\x6CC\nX\x3X\x5X\x6CF\nX\x3Y\x3Y\x3Y\x3Y\x5Y\x6D5\nY\x3Y\x3Y\x5Y\x6D9"+
		"\nY\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\x5Z\x6E1\nZ\x3Z\x3Z\x5Z\x6E5\nZ\x3Z\x3Z\x3"+
		"[\x3[\x3\\\x3\\\x3\\\x5\\\x6EE\n\\\x3\\\x3\\\x5\\\x6F2\n\\\x3\\\x3\\\x3"+
		"\\\x3\\\x5\\\x6F8\n\\\x3\\\x5\\\x6FB\n\\\x3\\\x6\\\x6FE\n\\\r\\\xE\\\x6FF"+
		"\x3\\\x3\\\x6\\\x704\n\\\r\\\xE\\\x705\x5\\\x708\n\\\x3\\\x3\\\x3]\x3"+
		"]\x5]\x70E\n]\x3]\x3]\x5]\x712\n]\x3]\x3]\x3^\x3^\x3^\x5^\x719\n^\x3^"+
		"\x3^\x3^\x3^\x6^\x71F\n^\r^\xE^\x720\x3^\a^\x724\n^\f^\xE^\x727\v^\x3"+
		"^\x3^\x3_\x3_\x5_\x72D\n_\x3_\x3_\x5_\x731\n_\x3_\x5_\x734\n_\x3_\x5_"+
		"\x737\n_\x3_\x5_\x73A\n_\x3_\x3_\x5_\x73E\n_\x3_\x6_\x741\n_\r_\xE_\x742"+
		"\x3`\x3`\x3`\x3`\x3`\x3`\x3`\x5`\x74C\n`\x3\x61\x3\x61\x3\x61\x3\x61\x3"+
		"\x62\x3\x62\x3\x62\x3\x62\x5\x62\x756\n\x62\x3\x62\x3\x62\x5\x62\x75A"+
		"\n\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x5\x62\x761\n\x62\x5\x62\x763"+
		"\n\x62\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63"+
		"\x5\x63\x76E\n\x63\x3\x63\x3\x63\x5\x63\x772\n\x63\x3\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x778\n\x63\x3\x63\x3\x63\x3\x63\x5\x63\x77D\n\x63\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x787\n\x63\x3"+
		"\x63\x3\x63\x5\x63\x78B\n\x63\x3\x63\x3\x63\x5\x63\x78F\n\x63\x3\x63\a"+
		"\x63\x792\n\x63\f\x63\xE\x63\x795\v\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5"+
		"\x63\x79B\n\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7A9\n\x63\x3\x63\x3\x63\x5\x63\x7AD"+
		"\n\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7B2\n\x63\x3\x63\x3\x63\x5\x63\x7B6"+
		"\n\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7BB\n\x63\x3\x63\x3\x63\x5\x63\x7BF"+
		"\n\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7C4\n\x63\x3\x63\x3\x63\x5\x63\x7C8"+
		"\n\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7CD\n\x63\x3\x63\x3\x63\x5\x63\x7D1"+
		"\n\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7D6\n\x63\x3\x63\x3\x63\x5\x63\x7DA"+
		"\n\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63"+
		"\x7E4\n\x63\x3\x63\x3\x63\x5\x63\x7E8\n\x63\x3\x63\x3\x63\x3\x63\x5\x63"+
		"\x7ED\n\x63\x3\x63\x3\x63\x5\x63\x7F1\n\x63\x3\x63\x3\x63\x3\x63\x5\x63"+
		"\x7F6\n\x63\x3\x63\x3\x63\x5\x63\x7FA\n\x63\x3\x63\x3\x63\x3\x63\x5\x63"+
		"\x7FF\n\x63\x3\x63\x3\x63\x5\x63\x803\n\x63\x3\x63\x3\x63\x3\x63\x5\x63"+
		"\x808\n\x63\x3\x63\x3\x63\x5\x63\x80C\n\x63\x3\x63\x3\x63\x3\x63\x5\x63"+
		"\x811\n\x63\x3\x63\x3\x63\x5\x63\x815\n\x63\x3\x63\x3\x63\x3\x63\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63"+
		"\x824\n\x63\x3\x63\x3\x63\x5\x63\x828\n\x63\x3\x63\x3\x63\x3\x63\x5\x63"+
		"\x82D\n\x63\x3\x63\x3\x63\x5\x63\x831\n\x63\x3\x63\x3\x63\x3\x63\x3\x63"+
		"\x3\x63\x3\x63\a\x63\x839\n\x63\f\x63\xE\x63\x83C\v\x63\x3\x64\x3\x64"+
		"\x3\x64\x5\x64\x841\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x846\n\x64\x3\x64"+
		"\x3\x64\x3\x65\x3\x65\x5\x65\x84C\n\x65\x3\x65\x3\x65\x5\x65\x850\n\x65"+
		"\x3\x65\a\x65\x853\n\x65\f\x65\xE\x65\x856\v\x65\x3\x66\x3\x66\x5\x66"+
		"\x85A\n\x66\x3\x66\x3\x66\x5\x66\x85E\n\x66\x3\x66\x3\x66\x5\x66\x862"+
		"\n\x66\x5\x66\x864\n\x66\x3\x66\x3\x66\x5\x66\x868\n\x66\x5\x66\x86A\n"+
		"\x66\x3\x66\x5\x66\x86D\n\x66\x3\x66\x3\x66\x5\x66\x871\n\x66\x3g\x3g"+
		"\x3g\x3g\x6g\x877\ng\rg\xEg\x878\x3g\x3g\x3g\ag\x87E\ng\fg\xEg\x881\v"+
		"g\x3g\x3g\x3h\x3h\x3h\x3h\x5h\x889\nh\x3h\x3h\x5h\x88D\nh\x3h\x3h\x3i"+
		"\x3i\x3i\x3i\x6i\x895\ni\ri\xEi\x896\x3i\x3i\x6i\x89B\ni\ri\xEi\x89C\x5"+
		"i\x89F\ni\x3i\x3i\x3j\x3j\x3j\x3j\x5j\x8A7\nj\x3j\x3j\x5j\x8AB\nj\x3j"+
		"\x5j\x8AE\nj\x3k\x3k\x5k\x8B2\nk\x3l\x3l\x3l\x3l\x5l\x8B8\nl\x3l\x5l\x8BB"+
		"\nl\x3l\x3l\x5l\x8BF\nl\x3l\x3l\x5l\x8C3\nl\x3l\x3l\x5l\x8C7\nl\x3m\x3"+
		"m\x3m\x5m\x8CC\nm\x3m\x3m\x3m\x5m\x8D1\nm\x3m\x5m\x8D4\nm\x3m\x3m\x5m"+
		"\x8D8\nm\x3m\x3m\x5m\x8DC\nm\x3m\x3m\x5m\x8E0\nm\x3n\x3n\x5n\x8E4\nn\x3"+
		"o\x3o\x3o\x5o\x8E9\no\x3p\x5p\x8EC\np\x3p\x3p\x3p\x5p\x8F1\np\x3p\x3p"+
		"\x5p\x8F5\np\x3p\x5p\x8F8\np\x3q\x3q\x3q\x3q\x5q\x8FE\nq\x3r\x3r\x5r\x902"+
		"\nr\x3r\x5r\x905\nr\x3s\x3s\x5s\x909\ns\x3s\x5s\x90C\ns\x3s\x5s\x90F\n"+
		"s\x3s\x3s\x5s\x913\ns\x3s\x3s\x5s\x917\ns\x5s\x919\ns\x3s\x3s\x5s\x91D"+
		"\ns\x3t\x3t\x5t\x921\nt\x3t\x6t\x924\nt\rt\xEt\x925\x3t\x5t\x929\nt\x3"+
		"u\x3u\x3u\x5u\x92E\nu\x3v\x3v\x3w\x5w\x933\nw\x3w\x5w\x936\nw\x3w\x3w"+
		"\x5w\x93A\nw\aw\x93C\nw\fw\xEw\x93F\vw\x3w\x3w\x5w\x943\nw\x3w\x3w\x5"+
		"w\x947\nw\x3w\x5w\x94A\nw\aw\x94C\nw\fw\xEw\x94F\vw\x3x\x3x\x5x\x953\n"+
		"x\x3x\x3x\x3y\x3y\x3y\x5y\x95A\ny\x3z\x3z\x5z\x95E\nz\x3z\x3z\x5z\x962"+
		"\nz\x3z\x3z\x5z\x966\nz\x3z\az\x969\nz\fz\xEz\x96C\vz\x5z\x96E\nz\x3z"+
		"\x5z\x971\nz\x3z\x3z\x3{\x3{\x5{\x977\n{\x3{\x3{\x5{\x97B\n{\x3{\x3{\x5"+
		"{\x97F\n{\x3{\x3{\x5{\x983\n{\x3{\x3{\x5{\x987\n{\x3{\x5{\x98A\n{\x3{"+
		"\x3{\x5{\x98E\n{\x3{\x5{\x991\n{\x3{\x5{\x994\n{\x3|\x3|\x5|\x998\n|\x3"+
		"|\x3|\x5|\x99C\n|\x3}\x3}\x5}\x9A0\n}\x3}\x3}\x5}\x9A4\n}\x3}\a}\x9A7"+
		"\n}\f}\xE}\x9AA\v}\x3~\x3~\x3~\x3~\x3~\x5~\x9B1\n~\x3~\x3~\x3\x7F\x3\x7F"+
		"\x6\x7F\x9B7\n\x7F\r\x7F\xE\x7F\x9B8\x3\x7F\x3\x7F\x3\x7F\x6\x7F\x9BE"+
		"\n\x7F\r\x7F\xE\x7F\x9BF\x3\x7F\x5\x7F\x9C3\n\x7F\x3\x80\x3\x80\x3\x80"+
		"\x3\x80\x5\x80\x9C9\n\x80\x3\x80\x3\x80\x3\x80\x5\x80\x9CE\n\x80\x3\x81"+
		"\x3\x81\x3\x82\x3\x82\x3\x82\a\x82\x9D5\n\x82\f\x82\xE\x82\x9D8\v\x82"+
		"\x3\x82\x3\x82\x3\x82\x6\x82\x9DD\n\x82\r\x82\xE\x82\x9DE\x5\x82\x9E1"+
		"\n\x82\x3\x83\x3\x83\x3\x84\x3\x84\x3\x84\a\x84\x9E8\n\x84\f\x84\xE\x84"+
		"\x9EB\v\x84\x3\x85\x3\x85\x5\x85\x9EF\n\x85\x3\x85\x3\x85\x5\x85\x9F3"+
		"\n\x85\x3\x86\x3\x86\x5\x86\x9F7\n\x86\x3\x86\x3\x86\x5\x86\x9FB\n\x86"+
		"\x3\x86\x5\x86\x9FE\n\x86\x3\x87\x3\x87\x3\x87\x3\x88\x3\x88\x3\x89\x3"+
		"\x89\x5\x89\xA07\n\x89\x3\x89\x5\x89\xA0A\n\x89\x3\x89\x3\x89\x5\x89\xA0E"+
		"\n\x89\x3\x89\x5\x89\xA11\n\x89\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8C\x3"+
		"\x8C\x3\x8C\x2\x2\x3\xC4\x8D\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2"+
		"(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42"+
		"\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2"+
		"\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2"+
		"\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2"+
		"\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2"+
		"\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2"+
		"\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2"+
		"\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2"+
		"\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2"+
		"\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A"+
		"\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116\x2\x2\x15\x5\x2\x16\x16"+
		"##\xA7\xA7\x4\x2PP\xA5\xA5\x3\x2&\x31\x4\x2\xB0\xB0\xB4\xB4\x3\x2GK\x5"+
		"\x2\xBD\xBD\xC4\xC4\xC8\xC8\a\x2\x12\x12\x16\x16YY\x81\x81\x8B\x8B\x4"+
		"\x2\x8E\x8F\xB8\xB8\x4\x2\x66h\x9E\x9E\x4\x2\x5\x5\t\t\x4\x2\xA0\xA0\xA6"+
		"\xA6\x4\x2\x18\x19\x82\x82\x3\x2\x18\x19\f\x2\x17\x17\x1A\x1A!!$$\x35"+
		"\x35[[__\x9F\x9F\xA4\xA4\xB1\xB1\a\x2ZZ\x64\x64\xBD\xC0\xC2\xC2\xC6\xC6"+
		"\x6\x2LLvw\xAB\xAB\xCD\xD2\x6\x2\x3\x3\a\b\n\v\xBA\xBA\x6\x2NNRR\x85\x85"+
		"\x89\x89\v\x2\f\x38\x41\x46L\x64iinxz{\x80\x85\x89\x8E\x90\xB9\xBAF\x2"+
		"\x118\x3\x2\x2\x2\x4\x11C\x3\x2\x2\x2\x6\x14A\x3\x2\x2\x2\b\x150\x3\x2"+
		"\x2\x2\n\x161\x3\x2\x2\x2\f\x172\x3\x2\x2\x2\xE\x17C\x3\x2\x2\x2\x10\x188"+
		"\x3\x2\x2\x2\x12\x19F\x3\x2\x2\x2\x14\x1AC\x3\x2\x2\x2\x16\x1AE\x3\x2"+
		"\x2\x2\x18\x1B0\x3\x2\x2\x2\x1A\x1C8\x3\x2\x2\x2\x1C\x21A\x3\x2\x2\x2"+
		"\x1E\x21C\x3\x2\x2\x2 \x229\x3\x2\x2\x2\"\x22B\x3\x2\x2\x2$\x22F\x3\x2"+
		"\x2\x2&\x233\x3\x2\x2\x2(\x248\x3\x2\x2\x2*\x25A\x3\x2\x2\x2,\x26B\x3"+
		"\x2\x2\x2.\x278\x3\x2\x2\x2\x30\x293\x3\x2\x2\x2\x32\x2A3\x3\x2\x2\x2"+
		"\x34\x2ED\x3\x2\x2\x2\x36\x2EF\x3\x2\x2\x2\x38\x2F4\x3\x2\x2\x2:\x306"+
		"\x3\x2\x2\x2<\x316\x3\x2\x2\x2>\x31A\x3\x2\x2\x2@\x321\x3\x2\x2\x2\x42"+
		"\x32B\x3\x2\x2\x2\x44\x32D\x3\x2\x2\x2\x46\x339\x3\x2\x2\x2H\x357\x3\x2"+
		"\x2\x2J\x388\x3\x2\x2\x2L\x3AA\x3\x2\x2\x2N\x3C0\x3\x2\x2\x2P\x3C4\x3"+
		"\x2\x2\x2R\x3E1\x3\x2\x2\x2T\x3E3\x3\x2\x2\x2V\x3F5\x3\x2\x2\x2X\x3F7"+
		"\x3\x2\x2\x2Z\x409\x3\x2\x2\x2\\\x417\x3\x2\x2\x2^\x41B\x3\x2\x2\x2`\x42A"+
		"\x3\x2\x2\x2\x62\x430\x3\x2\x2\x2\x64\x43C\x3\x2\x2\x2\x66\x448\x3\x2"+
		"\x2\x2h\x44C\x3\x2\x2\x2j\x45F\x3\x2\x2\x2l\x46B\x3\x2\x2\x2n\x477\x3"+
		"\x2\x2\x2p\x489\x3\x2\x2\x2r\x49B\x3\x2\x2\x2t\x4A9\x3\x2\x2\x2v\x4B7"+
		"\x3\x2\x2\x2x\x4BB\x3\x2\x2\x2z\x4C3\x3\x2\x2\x2|\x4CD\x3\x2\x2\x2~\x4E1"+
		"\x3\x2\x2\x2\x80\x4F5\x3\x2\x2\x2\x82\x537\x3\x2\x2\x2\x84\x54A\x3\x2"+
		"\x2\x2\x86\x54C\x3\x2\x2\x2\x88\x55C\x3\x2\x2\x2\x8A\x581\x3\x2\x2\x2"+
		"\x8C\x5A2\x3\x2\x2\x2\x8E\x5C0\x3\x2\x2\x2\x90\x5D6\x3\x2\x2\x2\x92\x5E9"+
		"\x3\x2\x2\x2\x94\x5EE\x3\x2\x2\x2\x96\x602\x3\x2\x2\x2\x98\x613\x3\x2"+
		"\x2\x2\x9A\x615\x3\x2\x2\x2\x9C\x61D\x3\x2\x2\x2\x9E\x61F\x3\x2\x2\x2"+
		"\xA0\x623\x3\x2\x2\x2\xA2\x62F\x3\x2\x2\x2\xA4\x63B\x3\x2\x2\x2\xA6\x657"+
		"\x3\x2\x2\x2\xA8\x663\x3\x2\x2\x2\xAA\x678\x3\x2\x2\x2\xAC\x6C1\x3\x2"+
		"\x2\x2\xAE\x6C3\x3\x2\x2\x2\xB0\x6D0\x3\x2\x2\x2\xB2\x6DC\x3\x2\x2\x2"+
		"\xB4\x6E8\x3\x2\x2\x2\xB6\x6ED\x3\x2\x2\x2\xB8\x70B\x3\x2\x2\x2\xBA\x718"+
		"\x3\x2\x2\x2\xBC\x72A\x3\x2\x2\x2\xBE\x744\x3\x2\x2\x2\xC0\x74D\x3\x2"+
		"\x2\x2\xC2\x751\x3\x2\x2\x2\xC4\x79A\x3\x2\x2\x2\xC6\x840\x3\x2\x2\x2"+
		"\xC8\x849\x3\x2\x2\x2\xCA\x857\x3\x2\x2\x2\xCC\x872\x3\x2\x2\x2\xCE\x884"+
		"\x3\x2\x2\x2\xD0\x890\x3\x2\x2\x2\xD2\x8A2\x3\x2\x2\x2\xD4\x8B1\x3\x2"+
		"\x2\x2\xD6\x8B3\x3\x2\x2\x2\xD8\x8C8\x3\x2\x2\x2\xDA\x8E3\x3\x2\x2\x2"+
		"\xDC\x8E5\x3\x2\x2\x2\xDE\x8EB\x3\x2\x2\x2\xE0\x8FD\x3\x2\x2\x2\xE2\x8FF"+
		"\x3\x2\x2\x2\xE4\x908\x3\x2\x2\x2\xE6\x920\x3\x2\x2\x2\xE8\x92A\x3\x2"+
		"\x2\x2\xEA\x92F\x3\x2\x2\x2\xEC\x93D\x3\x2\x2\x2\xEE\x952\x3\x2\x2\x2"+
		"\xF0\x956\x3\x2\x2\x2\xF2\x95B\x3\x2\x2\x2\xF4\x976\x3\x2\x2\x2\xF6\x995"+
		"\x3\x2\x2\x2\xF8\x99D\x3\x2\x2\x2\xFA\x9B0\x3\x2\x2\x2\xFC\x9C2\x3\x2"+
		"\x2\x2\xFE\x9C4\x3\x2\x2\x2\x100\x9CF\x3\x2\x2\x2\x102\x9E0\x3\x2\x2\x2"+
		"\x104\x9E2\x3\x2\x2\x2\x106\x9E4\x3\x2\x2\x2\x108\x9EC\x3\x2\x2\x2\x10A"+
		"\x9F4\x3\x2\x2\x2\x10C\x9FF\x3\x2\x2\x2\x10E\xA02\x3\x2\x2\x2\x110\xA06"+
		"\x3\x2\x2\x2\x112\xA12\x3\x2\x2\x2\x114\xA14\x3\x2\x2\x2\x116\xA16\x3"+
		"\x2\x2\x2\x118\x119\x5\x4\x3\x2\x119\x11A\a\x2\x2\x3\x11A\x3\x3\x2\x2"+
		"\x2\x11B\x11D\a\xD7\x2\x2\x11C\x11B\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2"+
		"\x11D\x121\x3\x2\x2\x2\x11E\x120\a\xD5\x2\x2\x11F\x11E\x3\x2\x2\x2\x120"+
		"\x123\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x12A"+
		"\x3\x2\x2\x2\x123\x121\x3\x2\x2\x2\x124\x126\x5\x6\x4\x2\x125\x127\a\xD5"+
		"\x2\x2\x126\x125\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x126\x3\x2\x2"+
		"\x2\x128\x129\x3\x2\x2\x2\x129\x12B\x3\x2\x2\x2\x12A\x124\x3\x2\x2\x2"+
		"\x12A\x12B\x3\x2\x2\x2\x12B\x12D\x3\x2\x2\x2\x12C\x12E\x5\b\x5\x2\x12D"+
		"\x12C\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x132\x3\x2\x2\x2\x12F\x131"+
		"\a\xD5\x2\x2\x130\x12F\x3\x2\x2\x2\x131\x134\x3\x2\x2\x2\x132\x130\x3"+
		"\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x136\x3\x2\x2\x2\x134\x132\x3\x2"+
		"\x2\x2\x135\x137\x5\f\a\x2\x136\x135\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2"+
		"\x137\x13B\x3\x2\x2\x2\x138\x13A\a\xD5\x2\x2\x139\x138\x3\x2\x2\x2\x13A"+
		"\x13D\x3\x2\x2\x2\x13B\x139\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x13F"+
		"\x3\x2\x2\x2\x13D\x13B\x3\x2\x2\x2\x13E\x140\x5\x12\n\x2\x13F\x13E\x3"+
		"\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x140\x144\x3\x2\x2\x2\x141\x143\a\xD5"+
		"\x2\x2\x142\x141\x3\x2\x2\x2\x143\x146\x3\x2\x2\x2\x144\x142\x3\x2\x2"+
		"\x2\x144\x145\x3\x2\x2\x2\x145\x148\x3\x2\x2\x2\x146\x144\x3\x2\x2\x2"+
		"\x147\x149\a\xD7\x2\x2\x148\x147\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149"+
		"\x5\x3\x2\x2\x2\x14A\x14B\a\xB2\x2\x2\x14B\x14C\a\xD7\x2\x2\x14C\x14D"+
		"\a\xD1\x2\x2\x14D\x14E\a\xD7\x2\x2\x14E\x14F\a\x1F\x2\x2\x14F\a\x3\x2"+
		"\x2\x2\x150\x152\a\x14\x2\x2\x151\x153\a\xD5\x2\x2\x152\x151\x3\x2\x2"+
		"\x2\x153\x154\x3\x2\x2\x2\x154\x152\x3\x2\x2\x2\x154\x155\x3\x2\x2\x2"+
		"\x155\x157\x3\x2\x2\x2\x156\x158\x5\n\x6\x2\x157\x156\x3\x2\x2\x2\x158"+
		"\x159\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2\x15A\x15B"+
		"\x3\x2\x2\x2\x15B\x15D\a\x41\x2\x2\x15C\x15E\a\xD5\x2\x2\x15D\x15C\x3"+
		"\x2\x2\x2\x15E\x15F\x3\x2\x2\x2\x15F\x15D\x3\x2\x2\x2\x15F\x160\x3\x2"+
		"\x2\x2\x160\t\x3\x2\x2\x2\x161\x163\x5\xFC\x7F\x2\x162\x164\a\xD7\x2\x2"+
		"\x163\x162\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2\x165"+
		"\x167\a\xBD\x2\x2\x166\x168\a\xD7\x2\x2\x167\x166\x3\x2\x2\x2\x167\x168"+
		"\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16A\x5\x10E\x88\x2\x16A\x16B"+
		"\a\xD5\x2\x2\x16B\v\x3\x2\x2\x2\x16C\x16E\x5\x18\r\x2\x16D\x16F\a\xD5"+
		"\x2\x2\x16E\x16D\x3\x2\x2\x2\x16F\x170\x3\x2\x2\x2\x170\x16E\x3\x2\x2"+
		"\x2\x170\x171\x3\x2\x2\x2\x171\x173\x3\x2\x2\x2\x172\x16C\x3\x2\x2\x2"+
		"\x173\x174\x3\x2\x2\x2\x174\x172\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175"+
		"\r\x3\x2\x2\x2\x176\x178\x5\x10\t\x2\x177\x179\a\xD5\x2\x2\x178\x177\x3"+
		"\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17A\x17B\x3\x2"+
		"\x2\x2\x17B\x17D\x3\x2\x2\x2\x17C\x176\x3\x2\x2\x2\x17D\x17E\x3\x2\x2"+
		"\x2\x17E\x17C\x3\x2\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F\xF\x3\x2\x2\x2\x180"+
		"\x181\a|\x2\x2\x181\x182\a\xD7\x2\x2\x182\x189\a\xD0\x2\x2\x183\x184\a"+
		"~\x2\x2\x184\x185\a\xD7\x2\x2\x185\x189\t\x2\x2\x2\x186\x189\a}\x2\x2"+
		"\x187\x189\a\x7F\x2\x2\x188\x180\x3\x2\x2\x2\x188\x183\x3\x2\x2\x2\x188"+
		"\x186\x3\x2\x2\x2\x188\x187\x3\x2\x2\x2\x189\x11\x3\x2\x2\x2\x18A\x193"+
		"\x5\x14\v\x2\x18B\x18D\a\xD5\x2\x2\x18C\x18B\x3\x2\x2\x2\x18D\x18E\x3"+
		"\x2\x2\x2\x18E\x18C\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x190\x3\x2"+
		"\x2\x2\x190\x192\x5\x14\v\x2\x191\x18C\x3\x2\x2\x2\x192\x195\x3\x2\x2"+
		"\x2\x193\x191\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194\x1A0\x3\x2\x2\x2"+
		"\x195\x193\x3\x2\x2\x2\x196\x198\x5\xE\b\x2\x197\x196\x3\x2\x2\x2\x197"+
		"\x198\x3\x2\x2\x2\x198\x19C\x3\x2\x2\x2\x199\x19B\a\xD5\x2\x2\x19A\x199"+
		"\x3\x2\x2\x2\x19B\x19E\x3\x2\x2\x2\x19C\x19A\x3\x2\x2\x2\x19C\x19D\x3"+
		"\x2\x2\x2\x19D\x1A0\x3\x2\x2\x2\x19E\x19C\x3\x2\x2\x2\x19F\x18A\x3\x2"+
		"\x2\x2\x19F\x197\x3\x2\x2\x2\x1A0\x13\x3\x2\x2\x2\x1A1\x1AD\x5\x16\f\x2"+
		"\x1A2\x1AD\x5.\x18\x2\x1A3\x1AD\x5\x38\x1D\x2\x1A4\x1AD\x5@!\x2\x1A5\x1AD"+
		"\x5J&\x2\x1A6\x1AD\x5l\x37\x2\x1A7\x1AD\x5\x88\x45\x2\x1A8\x1AD\x5\x8A"+
		"\x46\x2\x1A9\x1AD\x5\x8CG\x2\x1AA\x1AD\x5\xB6\\\x2\x1AB\x1AD\x5\xBA^\x2"+
		"\x1AC\x1A1\x3\x2\x2\x2\x1AC\x1A2\x3\x2\x2\x2\x1AC\x1A3\x3\x2\x2\x2\x1AC"+
		"\x1A4\x3\x2\x2\x2\x1AC\x1A5\x3\x2\x2\x2\x1AC\x1A6\x3\x2\x2\x2\x1AC\x1A7"+
		"\x3\x2\x2\x2\x1AC\x1A8\x3\x2\x2\x2\x1AC\x1A9\x3\x2\x2\x2\x1AC\x1AA\x3"+
		"\x2\x2\x2\x1AC\x1AB\x3\x2\x2\x2\x1AD\x15\x3\x2\x2\x2\x1AE\x1AF\x5\x1A"+
		"\xE\x2\x1AF\x17\x3\x2\x2\x2\x1B0\x1B1\a\x10\x2\x2\x1B1\x1B2\a\xD7\x2\x2"+
		"\x1B2\x1B4\x5\xE0q\x2\x1B3\x1B5\a\xD7\x2\x2\x1B4\x1B3\x3\x2\x2\x2\x1B4"+
		"\x1B5\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1B8\a\xBD\x2\x2\x1B7\x1B9"+
		"\a\xD7\x2\x2\x1B8\x1B7\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1BA\x3"+
		"\x2\x2\x2\x1BA\x1C5\x5\x10E\x88\x2\x1BB\x1BD\a\xD7\x2\x2\x1BC\x1BB\x3"+
		"\x2\x2\x2\x1BC\x1BD\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1C0\a\x5\x2"+
		"\x2\x1BF\x1C1\a\xD7\x2\x2\x1C0\x1BF\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2"+
		"\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C4\x5\x10E\x88\x2\x1C3\x1BC\x3\x2\x2\x2"+
		"\x1C4\x1C7\x3\x2\x2\x2\x1C5\x1C3\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6"+
		"\x19\x3\x2\x2\x2\x1C7\x1C5\x3\x2\x2\x2\x1C8\x1D4\x5\x1C\xF\x2\x1C9\x1CB"+
		"\a\xD5\x2\x2\x1CA\x1C9\x3\x2\x2\x2\x1CB\x1CC\x3\x2\x2\x2\x1CC\x1CA\x3"+
		"\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1CF\x3\x2\x2\x2\x1CE\x1D0\a\xD7"+
		"\x2\x2\x1CF\x1CE\x3\x2\x2\x2\x1CF\x1D0\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2"+
		"\x2\x1D1\x1D3\x5\x1C\xF\x2\x1D2\x1CA\x3\x2\x2\x2\x1D3\x1D6\x3\x2\x2\x2"+
		"\x1D4\x1D2\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1B\x3\x2\x2\x2\x1D6"+
		"\x1D4\x3\x2\x2\x2\x1D7\x21B\x5\x1E\x10\x2\x1D8\x21B\x5\x18\r\x2\x1D9\x21B"+
		"\x5 \x11\x2\x1DA\x21B\x5\"\x12\x2\x1DB\x21B\x5$\x13\x2\x1DC\x21B\x5&\x14"+
		"\x2\x1DD\x21B\x5(\x15\x2\x1DE\x21B\x5,\x17\x2\x1DF\x21B\x5\x32\x1A\x2"+
		"\x1E0\x21B\x5\x30\x19\x2\x1E1\x21B\x5\x34\x1B\x2\x1E2\x21B\x5\x36\x1C"+
		"\x2\x1E3\x21B\x5<\x1F\x2\x1E4\x21B\x5> \x2\x1E5\x21B\x5\x42\"\x2\x1E6"+
		"\x21B\x5\xD4k\x2\x1E7\x21B\x5\x44#\x2\x1E8\x21B\x5\x46$\x2\x1E9\x21B\x5"+
		"H%\x2\x1EA\x21B\x5L\'\x2\x1EB\x21B\x5N(\x2\x1EC\x21B\x5P)\x2\x1ED\x21B"+
		"\x5R*\x2\x1EE\x21B\x5\\/\x2\x1EF\x21B\x5\xDAn\x2\x1F0\x21B\x5^\x30\x2"+
		"\x1F1\x21B\x5`\x31\x2\x1F2\x21B\x5\x62\x32\x2\x1F3\x21B\x5\x64\x33\x2"+
		"\x1F4\x21B\x5\x10C\x87\x2\x1F5\x21B\x5\x66\x34\x2\x1F6\x21B\x5h\x35\x2"+
		"\x1F7\x21B\x5j\x36\x2\x1F8\x21B\x5l\x37\x2\x1F9\x21B\x5t;\x2\x1FA\x21B"+
		"\x5v<\x2\x1FB\x21B\x5x=\x2\x1FC\x21B\x5z>\x2\x1FD\x21B\x5|?\x2\x1FE\x21B"+
		"\x5~@\x2\x1FF\x21B\x5\x80\x41\x2\x200\x21B\x5\x86\x44\x2\x201\x21B\x5"+
		"\x8EH\x2\x202\x21B\x5\x90I\x2\x203\x21B\x5\x92J\x2\x204\x21B\x5\x94K\x2"+
		"\x205\x21B\x5\x98M\x2\x206\x21B\x5\x9AN\x2\x207\x21B\x5\x9CO\x2\x208\x21B"+
		"\x5\x9EP\x2\x209\x21B\x5\xA0Q\x2\x20A\x21B\x5\xA2R\x2\x20B\x21B\x5\xA4"+
		"S\x2\x20C\x21B\x5\xA6T\x2\x20D\x21B\x5\xA8U\x2\x20E\x21B\x5\xAEX\x2\x20F"+
		"\x21B\x5\xB0Y\x2\x210\x21B\x5\xB2Z\x2\x211\x21B\x5\xB4[\x2\x212\x21B\x5"+
		"\xB8]\x2\x213\x21B\x5\xC0\x61\x2\x214\x21B\x5\xC2\x62\x2\x215\x21B\x5"+
		"\xC6\x64\x2\x216\x21B\x5\xCCg\x2\x217\x21B\x5\xCEh\x2\x218\x21B\x5\xD0"+
		"i\x2\x219\x21B\x5\xD2j\x2\x21A\x1D7\x3\x2\x2\x2\x21A\x1D8\x3\x2\x2\x2"+
		"\x21A\x1D9\x3\x2\x2\x2\x21A\x1DA\x3\x2\x2\x2\x21A\x1DB\x3\x2\x2\x2\x21A"+
		"\x1DC\x3\x2\x2\x2\x21A\x1DD\x3\x2\x2\x2\x21A\x1DE\x3\x2\x2\x2\x21A\x1DF"+
		"\x3\x2\x2\x2\x21A\x1E0\x3\x2\x2\x2\x21A\x1E1\x3\x2\x2\x2\x21A\x1E2\x3"+
		"\x2\x2\x2\x21A\x1E3\x3\x2\x2\x2\x21A\x1E4\x3\x2\x2\x2\x21A\x1E5\x3\x2"+
		"\x2\x2\x21A\x1E6\x3\x2\x2\x2\x21A\x1E7\x3\x2\x2\x2\x21A\x1E8\x3\x2\x2"+
		"\x2\x21A\x1E9\x3\x2\x2\x2\x21A\x1EA\x3\x2\x2\x2\x21A\x1EB\x3\x2\x2\x2"+
		"\x21A\x1EC\x3\x2\x2\x2\x21A\x1ED\x3\x2\x2\x2\x21A\x1EE\x3\x2\x2\x2\x21A"+
		"\x1EF\x3\x2\x2\x2\x21A\x1F0\x3\x2\x2\x2\x21A\x1F1\x3\x2\x2\x2\x21A\x1F2"+
		"\x3\x2\x2\x2\x21A\x1F3\x3\x2\x2\x2\x21A\x1F4\x3\x2\x2\x2\x21A\x1F5\x3"+
		"\x2\x2\x2\x21A\x1F6\x3\x2\x2\x2\x21A\x1F7\x3\x2\x2\x2\x21A\x1F8\x3\x2"+
		"\x2\x2\x21A\x1F9\x3\x2\x2\x2\x21A\x1FA\x3\x2\x2\x2\x21A\x1FB\x3\x2\x2"+
		"\x2\x21A\x1FC\x3\x2\x2\x2\x21A\x1FD\x3\x2\x2\x2\x21A\x1FE\x3\x2\x2\x2"+
		"\x21A\x1FF\x3\x2\x2\x2\x21A\x200\x3\x2\x2\x2\x21A\x201\x3\x2\x2\x2\x21A"+
		"\x202\x3\x2\x2\x2\x21A\x203\x3\x2\x2\x2\x21A\x204\x3\x2\x2\x2\x21A\x205"+
		"\x3\x2\x2\x2\x21A\x206\x3\x2\x2\x2\x21A\x207\x3\x2\x2\x2\x21A\x208\x3"+
		"\x2\x2\x2\x21A\x209\x3\x2\x2\x2\x21A\x20A\x3\x2\x2\x2\x21A\x20B\x3\x2"+
		"\x2\x2\x21A\x20C\x3\x2\x2\x2\x21A\x20D\x3\x2\x2\x2\x21A\x20E\x3\x2\x2"+
		"\x2\x21A\x20F\x3\x2\x2\x2\x21A\x210\x3\x2\x2\x2\x21A\x211\x3\x2\x2\x2"+
		"\x21A\x212\x3\x2\x2\x2\x21A\x213\x3\x2\x2\x2\x21A\x214\x3\x2\x2\x2\x21A"+
		"\x215\x3\x2\x2\x2\x21A\x216\x3\x2\x2\x2\x21A\x217\x3\x2\x2\x2\x21A\x218"+
		"\x3\x2\x2\x2\x21A\x219\x3\x2\x2\x2\x21B\x1D\x3\x2\x2\x2\x21C\x21D\a\x11"+
		"\x2\x2\x21D\x21E\a\xD7\x2\x2\x21E\x227\x5\xC4\x63\x2\x21F\x221\a\xD7\x2"+
		"\x2\x220\x21F\x3\x2\x2\x2\x220\x221\x3\x2\x2\x2\x221\x222\x3\x2\x2\x2"+
		"\x222\x224\a\x5\x2\x2\x223\x225\a\xD7\x2\x2\x224\x223\x3\x2\x2\x2\x224"+
		"\x225\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x228\x5\xC4\x63\x2\x227\x220"+
		"\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228\x1F\x3\x2\x2\x2\x229\x22A\a\x15"+
		"\x2\x2\x22A!\x3\x2\x2\x2\x22B\x22C\a\x1D\x2\x2\x22C\x22D\a\xD7\x2\x2\x22D"+
		"\x22E\x5\xC4\x63\x2\x22E#\x3\x2\x2\x2\x22F\x230\a\x1E\x2\x2\x230\x231"+
		"\a\xD7\x2\x2\x231\x232\x5\xC4\x63\x2\x232%\x3\x2\x2\x2\x233\x243\a \x2"+
		"\x2\x234\x235\a\xD7\x2\x2\x235\x240\x5\xC4\x63\x2\x236\x238\a\xD7\x2\x2"+
		"\x237\x236\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239"+
		"\x23B\a\x5\x2\x2\x23A\x23C\a\xD7\x2\x2\x23B\x23A\x3\x2\x2\x2\x23B\x23C"+
		"\x3\x2\x2\x2\x23C\x23D\x3\x2\x2\x2\x23D\x23F\x5\xC4\x63\x2\x23E\x237\x3"+
		"\x2\x2\x2\x23F\x242\x3\x2\x2\x2\x240\x23E\x3\x2\x2\x2\x240\x241\x3\x2"+
		"\x2\x2\x241\x244\x3\x2\x2\x2\x242\x240\x3\x2\x2\x2\x243\x234\x3\x2\x2"+
		"\x2\x243\x244\x3\x2\x2\x2\x244\'\x3\x2\x2\x2\x245\x246\x5\x114\x8B\x2"+
		"\x246\x247\a\xD7\x2\x2\x247\x249\x3\x2\x2\x2\x248\x245\x3\x2\x2\x2\x248"+
		"\x249\x3\x2\x2\x2\x249\x24A\x3\x2\x2\x2\x24A\x24B\a\"\x2\x2\x24B\x24C"+
		"\a\xD7\x2\x2\x24C\x257\x5*\x16\x2\x24D\x24F\a\xD7\x2\x2\x24E\x24D\x3\x2"+
		"\x2\x2\x24E\x24F\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x252\a\x5\x2\x2"+
		"\x251\x253\a\xD7\x2\x2\x252\x251\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2\x253"+
		"\x254\x3\x2\x2\x2\x254\x256\x5*\x16\x2\x255\x24E\x3\x2\x2\x2\x256\x259"+
		"\x3\x2\x2\x2\x257\x255\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2\x258)\x3\x2\x2"+
		"\x2\x259\x257\x3\x2\x2\x2\x25A\x25C\x5\xFC\x7F\x2\x25B\x25D\x5\x112\x8A"+
		"\x2\x25C\x25B\x3\x2\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x260\x3\x2\x2\x2"+
		"\x25E\x25F\a\xD7\x2\x2\x25F\x261\x5\xFE\x80\x2\x260\x25E\x3\x2\x2\x2\x260"+
		"\x261\x3\x2\x2\x2\x261\x263\x3\x2\x2\x2\x262\x264\a\xD7\x2\x2\x263\x262"+
		"\x3\x2\x2\x2\x263\x264\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x267\a\xBD"+
		"\x2\x2\x266\x268\a\xD7\x2\x2\x267\x266\x3\x2\x2\x2\x267\x268\x3\x2\x2"+
		"\x2\x268\x269\x3\x2\x2\x2\x269\x26A\x5\xC4\x63\x2\x26A+\x3\x2\x2\x2\x26B"+
		"\x26D\a$\x2\x2\x26C\x26E\a\xD7\x2\x2\x26D\x26C\x3\x2\x2\x2\x26D\x26E\x3"+
		"\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\x271\a\xBD\x2\x2\x270\x272\a\xD7"+
		"\x2\x2\x271\x270\x3\x2\x2\x2\x271\x272\x3\x2\x2\x2\x272\x273\x3\x2\x2"+
		"\x2\x273\x274\x5\xC4\x63\x2\x274-\x3\x2\x2\x2\x275\x276\x5\x114\x8B\x2"+
		"\x276\x277\a\xD7\x2\x2\x277\x279\x3\x2\x2\x2\x278\x275\x3\x2\x2\x2\x278"+
		"\x279\x3\x2\x2\x2\x279\x27A\x3\x2\x2\x2\x27A\x27B\a%\x2\x2\x27B\x27C\a"+
		"\xD7\x2\x2\x27C\x27D\t\x3\x2\x2\x27D\x27E\a\xD7\x2\x2\x27E\x27F\x5\xFC"+
		"\x7F\x2\x27F\x280\a\xD7\x2\x2\x280\x281\a\x63\x2\x2\x281\x282\a\xD7\x2"+
		"\x2\x282\x287\a\xCD\x2\x2\x283\x284\a\xD7\x2\x2\x284\x285\a\xE\x2\x2\x285"+
		"\x286\a\xD7\x2\x2\x286\x288\a\xCD\x2\x2\x287\x283\x3\x2\x2\x2\x287\x288"+
		"\x3\x2\x2\x2\x288\x28D\x3\x2\x2\x2\x289\x28B\a\xD7\x2\x2\x28A\x289\x3"+
		"\x2\x2\x2\x28A\x28B\x3\x2\x2\x2\x28B\x28C\x3\x2\x2\x2\x28C\x28E\x5\xF2"+
		"z\x2\x28D\x28A\x3\x2\x2\x2\x28D\x28E\x3\x2\x2\x2\x28E\x291\x3\x2\x2\x2"+
		"\x28F\x290\a\xD7\x2\x2\x290\x292\x5\xFE\x80\x2\x291\x28F\x3\x2\x2\x2\x291"+
		"\x292\x3\x2\x2\x2\x292/\x3\x2\x2\x2\x293\x294\t\x4\x2\x2\x294\x295\a\xD7"+
		"\x2\x2\x295\x2A0\x5\x10A\x86\x2\x296\x298\a\xD7\x2\x2\x297\x296\x3\x2"+
		"\x2\x2\x297\x298\x3\x2\x2\x2\x298\x299\x3\x2\x2\x2\x299\x29B\a\x5\x2\x2"+
		"\x29A\x29C\a\xD7\x2\x2\x29B\x29A\x3\x2\x2\x2\x29B\x29C\x3\x2\x2\x2\x29C"+
		"\x29D\x3\x2\x2\x2\x29D\x29F\x5\x10A\x86\x2\x29E\x297\x3\x2\x2\x2\x29F"+
		"\x2A2\x3\x2\x2\x2\x2A0\x29E\x3\x2\x2\x2\x2A0\x2A1\x3\x2\x2\x2\x2A1\x31"+
		"\x3\x2\x2\x2\x2A2\x2A0\x3\x2\x2\x2\x2A3\x2A4\a\x32\x2\x2\x2A4\x2A5\a\xD7"+
		"\x2\x2\x2A5\x2A7\x5\xC4\x63\x2\x2A6\x2A8\a\xD7\x2\x2\x2A7\x2A6\x3\x2\x2"+
		"\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2A9\x3\x2\x2\x2\x2A9\x2AB\a\x5\x2\x2\x2AA"+
		"\x2AC\a\xD7\x2\x2\x2AB\x2AA\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AD"+
		"\x3\x2\x2\x2\x2AD\x2B6\x5\xC4\x63\x2\x2AE\x2B0\a\xD7\x2\x2\x2AF\x2AE\x3"+
		"\x2\x2\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0\x2B1\x3\x2\x2\x2\x2B1\x2B3\a\x5\x2"+
		"\x2\x2B2\x2B4\a\xD7\x2\x2\x2B3\x2B2\x3\x2\x2\x2\x2B3\x2B4\x3\x2\x2\x2"+
		"\x2B4\x2B5\x3\x2\x2\x2\x2B5\x2B7\x5\xC4\x63\x2\x2B6\x2AF\x3\x2\x2\x2\x2B6"+
		"\x2B7\x3\x2\x2\x2\x2B7\x33\x3\x2\x2\x2\x2B8\x2BA\a\x34\x2\x2\x2B9\x2BB"+
		"\a\xD5\x2\x2\x2BA\x2B9\x3\x2\x2\x2\x2BB\x2BC\x3\x2\x2\x2\x2BC\x2BA\x3"+
		"\x2\x2\x2\x2BC\x2BD\x3\x2\x2\x2\x2BD\x2C4\x3\x2\x2\x2\x2BE\x2C0\x5\x1A"+
		"\xE\x2\x2BF\x2C1\a\xD5\x2\x2\x2C0\x2BF\x3\x2\x2\x2\x2C1\x2C2\x3\x2\x2"+
		"\x2\x2C2\x2C0\x3\x2\x2\x2\x2C2\x2C3\x3\x2\x2\x2\x2C3\x2C5\x3\x2\x2\x2"+
		"\x2C4\x2BE\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6"+
		"\x2EE\a`\x2\x2\x2C7\x2C8\a\x34\x2\x2\x2C8\x2C9\a\xD7\x2\x2\x2C9\x2CA\t"+
		"\x5\x2\x2\x2CA\x2CB\a\xD7\x2\x2\x2CB\x2CD\x5\xC4\x63\x2\x2CC\x2CE\a\xD5"+
		"\x2\x2\x2CD\x2CC\x3\x2\x2\x2\x2CE\x2CF\x3\x2\x2\x2\x2CF\x2CD\x3\x2\x2"+
		"\x2\x2CF\x2D0\x3\x2\x2\x2\x2D0\x2D7\x3\x2\x2\x2\x2D1\x2D3\x5\x1A\xE\x2"+
		"\x2D2\x2D4\a\xD5\x2\x2\x2D3\x2D2\x3\x2\x2\x2\x2D4\x2D5\x3\x2\x2\x2\x2D5"+
		"\x2D3\x3\x2\x2\x2\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2D8\x3\x2\x2\x2\x2D7\x2D1"+
		"\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D8\x2D9\x3\x2\x2\x2\x2D9\x2DA\a`"+
		"\x2\x2\x2DA\x2EE\x3\x2\x2\x2\x2DB\x2DD\a\x34\x2\x2\x2DC\x2DE\a\xD5\x2"+
		"\x2\x2DD\x2DC\x3\x2\x2\x2\x2DE\x2DF\x3\x2\x2\x2\x2DF\x2DD\x3\x2\x2\x2"+
		"\x2DF\x2E0\x3\x2\x2\x2\x2E0\x2E1\x3\x2\x2\x2\x2E1\x2E3\x5\x1A\xE\x2\x2E2"+
		"\x2E4\a\xD5\x2\x2\x2E3\x2E2\x3\x2\x2\x2\x2E4\x2E5\x3\x2\x2\x2\x2E5\x2E3"+
		"\x3\x2\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7\x2E8\a`"+
		"\x2\x2\x2E8\x2E9\a\xD7\x2\x2\x2E9\x2EA\t\x5\x2\x2\x2EA\x2EB\a\xD7\x2\x2"+
		"\x2EB\x2EC\x5\xC4\x63\x2\x2EC\x2EE\x3\x2\x2\x2\x2ED\x2B8\x3\x2\x2\x2\x2ED"+
		"\x2C7\x3\x2\x2\x2\x2ED\x2DB\x3\x2\x2\x2\x2EE\x35\x3\x2\x2\x2\x2EF\x2F0"+
		"\a\x41\x2\x2\x2F0\x37\x3\x2\x2\x2\x2F1\x2F2\x5\x114\x8B\x2\x2F2\x2F3\a"+
		"\xD7\x2\x2\x2F3\x2F5\x3\x2\x2\x2\x2F4\x2F1\x3\x2\x2\x2\x2F4\x2F5\x3\x2"+
		"\x2\x2\x2F5\x2F6\x3\x2\x2\x2\x2F6\x2F7\a\x42\x2\x2\x2F7\x2F8\a\xD7\x2"+
		"\x2\x2F8\x2FA\x5\xFC\x7F\x2\x2F9\x2FB\a\xD5\x2\x2\x2FA\x2F9\x3\x2\x2\x2"+
		"\x2FB\x2FC\x3\x2\x2\x2\x2FC\x2FA\x3\x2\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FD"+
		"\x301\x3\x2\x2\x2\x2FE\x300\x5:\x1E\x2\x2FF\x2FE\x3\x2\x2\x2\x300\x303"+
		"\x3\x2\x2\x2\x301\x2FF\x3\x2\x2\x2\x301\x302\x3\x2\x2\x2\x302\x304\x3"+
		"\x2\x2\x2\x303\x301\x3\x2\x2\x2\x304\x305\a\x39\x2\x2\x305\x39\x3\x2\x2"+
		"\x2\x306\x30F\x5\xFC\x7F\x2\x307\x309\a\xD7\x2\x2\x308\x307\x3\x2\x2\x2"+
		"\x308\x309\x3\x2\x2\x2\x309\x30A\x3\x2\x2\x2\x30A\x30C\a\xBD\x2\x2\x30B"+
		"\x30D\a\xD7\x2\x2\x30C\x30B\x3\x2\x2\x2\x30C\x30D\x3\x2\x2\x2\x30D\x30E"+
		"\x3\x2\x2\x2\x30E\x310\x5\xC4\x63\x2\x30F\x308\x3\x2\x2\x2\x30F\x310\x3"+
		"\x2\x2\x2\x310\x312\x3\x2\x2\x2\x311\x313\a\xD5\x2\x2\x312\x311\x3\x2"+
		"\x2\x2\x313\x314\x3\x2\x2\x2\x314\x312\x3\x2\x2\x2\x314\x315\x3\x2\x2"+
		"\x2\x315;\x3\x2\x2\x2\x316\x317\a\x44\x2\x2\x317\x318\a\xD7\x2\x2\x318"+
		"\x319\x5\xC4\x63\x2\x319=\x3\x2\x2\x2\x31A\x31B\a\x45\x2\x2\x31B\x31C"+
		"\a\xD7\x2\x2\x31C\x31D\x5\xC4\x63\x2\x31D?\x3\x2\x2\x2\x31E\x31F\x5\x114"+
		"\x8B\x2\x31F\x320\a\xD7\x2\x2\x320\x322\x3\x2\x2\x2\x321\x31E\x3\x2\x2"+
		"\x2\x321\x322\x3\x2\x2\x2\x322\x323\x3\x2\x2\x2\x323\x324\a\x46\x2\x2"+
		"\x324\x325\a\xD7\x2\x2\x325\x327\x5\xFC\x7F\x2\x326\x328\a\xD7\x2\x2\x327"+
		"\x326\x3\x2\x2\x2\x327\x328\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329\x32A"+
		"\x5\xF2z\x2\x32A\x41\x3\x2\x2\x2\x32B\x32C\t\x6\x2\x2\x32C\x43\x3\x2\x2"+
		"\x2\x32D\x32E\aM\x2\x2\x32E\x32F\a\xD7\x2\x2\x32F\x331\x5\xC4\x63\x2\x330"+
		"\x332\a\xD7\x2\x2\x331\x330\x3\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332\x333"+
		"\x3\x2\x2\x2\x333\x335\a\x5\x2\x2\x334\x336\a\xD7\x2\x2\x335\x334\x3\x2"+
		"\x2\x2\x335\x336\x3\x2\x2\x2\x336\x337\x3\x2\x2\x2\x337\x338\x5\xC4\x63"+
		"\x2\x338\x45\x3\x2\x2\x2\x339\x33A\aO\x2\x2\x33A\x33B\a\xD7\x2\x2\x33B"+
		"\x33C\a\x36\x2\x2\x33C\x33D\a\xD7\x2\x2\x33D\x33F\x5\xFC\x7F\x2\x33E\x340"+
		"\x5\x112\x8A\x2\x33F\x33E\x3\x2\x2\x2\x33F\x340\x3\x2\x2\x2\x340\x341"+
		"\x3\x2\x2\x2\x341\x342\a\xD7\x2\x2\x342\x343\aX\x2\x2\x343\x344\a\xD7"+
		"\x2\x2\x344\x346\x5\xC4\x63\x2\x345\x347\a\xD5\x2\x2\x346\x345\x3\x2\x2"+
		"\x2\x347\x348\x3\x2\x2\x2\x348\x346\x3\x2\x2\x2\x348\x349\x3\x2\x2\x2"+
		"\x349\x350\x3\x2\x2\x2\x34A\x34C\x5\x1A\xE\x2\x34B\x34D\a\xD5\x2\x2\x34C"+
		"\x34B\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E\x34C\x3\x2\x2\x2\x34E\x34F"+
		"\x3\x2\x2\x2\x34F\x351\x3\x2\x2\x2\x350\x34A\x3\x2\x2\x2\x350\x351\x3"+
		"\x2\x2\x2\x351\x352\x3\x2\x2\x2\x352\x355\as\x2\x2\x353\x354\a\xD7\x2"+
		"\x2\x354\x356\x5\xFC\x7F\x2\x355\x353\x3\x2\x2\x2\x355\x356\x3\x2\x2\x2"+
		"\x356G\x3\x2\x2\x2\x357\x358\aO\x2\x2\x358\x359\a\xD7\x2\x2\x359\x35B"+
		"\x5\xFC\x7F\x2\x35A\x35C\x5\x112\x8A\x2\x35B\x35A\x3\x2\x2\x2\x35B\x35C"+
		"\x3\x2\x2\x2\x35C\x35F\x3\x2\x2\x2\x35D\x35E\a\xD7\x2\x2\x35E\x360\x5"+
		"\xFE\x80\x2\x35F\x35D\x3\x2\x2\x2\x35F\x360\x3\x2\x2\x2\x360\x362\x3\x2"+
		"\x2\x2\x361\x363\a\xD7\x2\x2\x362\x361\x3\x2\x2\x2\x362\x363\x3\x2\x2"+
		"\x2\x363\x364\x3\x2\x2\x2\x364\x366\a\xBD\x2\x2\x365\x367\a\xD7\x2\x2"+
		"\x366\x365\x3\x2\x2\x2\x366\x367\x3\x2\x2\x2\x367\x368\x3\x2\x2\x2\x368"+
		"\x369\x5\xC4\x63\x2\x369\x36A\a\xD7\x2\x2\x36A\x36B\a\xAA\x2\x2\x36B\x36C"+
		"\a\xD7\x2\x2\x36C\x371\x5\xC4\x63\x2\x36D\x36E\a\xD7\x2\x2\x36E\x36F\a"+
		"\xA2\x2\x2\x36F\x370\a\xD7\x2\x2\x370\x372\x5\xC4\x63\x2\x371\x36D\x3"+
		"\x2\x2\x2\x371\x372\x3\x2\x2\x2\x372\x374\x3\x2\x2\x2\x373\x375\a\xD5"+
		"\x2\x2\x374\x373\x3\x2\x2\x2\x375\x376\x3\x2\x2\x2\x376\x374\x3\x2\x2"+
		"\x2\x376\x377\x3\x2\x2\x2\x377\x37E\x3\x2\x2\x2\x378\x37A\x5\x1A\xE\x2"+
		"\x379\x37B\a\xD5\x2\x2\x37A\x379\x3\x2\x2\x2\x37B\x37C\x3\x2\x2\x2\x37C"+
		"\x37A\x3\x2\x2\x2\x37C\x37D\x3\x2\x2\x2\x37D\x37F\x3\x2\x2\x2\x37E\x378"+
		"\x3\x2\x2\x2\x37E\x37F\x3\x2\x2\x2\x37F\x380\x3\x2\x2\x2\x380\x383\as"+
		"\x2\x2\x381\x382\a\xD7\x2\x2\x382\x384\x5\xFC\x7F\x2\x383\x381\x3\x2\x2"+
		"\x2\x383\x384\x3\x2\x2\x2\x384I\x3\x2\x2\x2\x385\x386\x5\x114\x8B\x2\x386"+
		"\x387\a\xD7\x2\x2\x387\x389\x3\x2\x2\x2\x388\x385\x3\x2\x2\x2\x388\x389"+
		"\x3\x2\x2\x2\x389\x38C\x3\x2\x2\x2\x38A\x38B\a\xA1\x2\x2\x38B\x38D\a\xD7"+
		"\x2\x2\x38C\x38A\x3\x2\x2\x2\x38C\x38D\x3\x2\x2\x2\x38D\x38E\x3\x2\x2"+
		"\x2\x38E\x38F\aP\x2\x2\x38F\x390\a\xD7\x2\x2\x390\x395\x5\xFC\x7F\x2\x391"+
		"\x393\a\xD7\x2\x2\x392\x391\x3\x2\x2\x2\x392\x393\x3\x2\x2\x2\x393\x394"+
		"\x3\x2\x2\x2\x394\x396\x5\xF2z\x2\x395\x392\x3\x2\x2\x2\x395\x396\x3\x2"+
		"\x2\x2\x396\x399\x3\x2\x2\x2\x397\x398\a\xD7\x2\x2\x398\x39A\x5\xFE\x80"+
		"\x2\x399\x397\x3\x2\x2\x2\x399\x39A\x3\x2\x2\x2\x39A\x39C\x3\x2\x2\x2"+
		"\x39B\x39D\a\xD5\x2\x2\x39C\x39B\x3\x2\x2\x2\x39D\x39E\x3\x2\x2\x2\x39E"+
		"\x39C\x3\x2\x2\x2\x39E\x39F\x3\x2\x2\x2\x39F\x3A6\x3\x2\x2\x2\x3A0\x3A2"+
		"\x5\x1A\xE\x2\x3A1\x3A3\a\xD5\x2\x2\x3A2\x3A1\x3\x2\x2\x2\x3A3\x3A4\x3"+
		"\x2\x2\x2\x3A4\x3A2\x3\x2\x2\x2\x3A4\x3A5\x3\x2\x2\x2\x3A5\x3A7\x3\x2"+
		"\x2\x2\x3A6\x3A0\x3\x2\x2\x2\x3A6\x3A7\x3\x2\x2\x2\x3A7\x3A8\x3\x2\x2"+
		"\x2\x3A8\x3A9\a:\x2\x2\x3A9K\x3\x2\x2\x2\x3AA\x3AB\aQ\x2\x2\x3AB\x3AC"+
		"\a\xD7\x2\x2\x3AC\x3AE\x5\xC4\x63\x2\x3AD\x3AF\a\xD7\x2\x2\x3AE\x3AD\x3"+
		"\x2\x2\x2\x3AE\x3AF\x3\x2\x2\x2\x3AF\x3B0\x3\x2\x2\x2\x3B0\x3B2\a\x5\x2"+
		"\x2\x3B1\x3B3\a\xD7\x2\x2\x3B2\x3B1\x3\x2\x2\x2\x3B2\x3B3\x3\x2\x2\x2"+
		"\x3B3\x3B5\x3\x2\x2\x2\x3B4\x3B6\x5\xC4\x63\x2\x3B5\x3B4\x3\x2\x2\x2\x3B5"+
		"\x3B6\x3\x2\x2\x2\x3B6\x3B8\x3\x2\x2\x2\x3B7\x3B9\a\xD7\x2\x2\x3B8\x3B7"+
		"\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BC\a\x5"+
		"\x2\x2\x3BB\x3BD\a\xD7\x2\x2\x3BC\x3BB\x3\x2\x2\x2\x3BC\x3BD\x3\x2\x2"+
		"\x2\x3BD\x3BE\x3\x2\x2\x2\x3BE\x3BF\x5\xC4\x63\x2\x3BFM\x3\x2\x2\x2\x3C0"+
		"\x3C1\aS\x2\x2\x3C1\x3C2\a\xD7\x2\x2\x3C2\x3C3\x5\xC4\x63\x2\x3C3O\x3"+
		"\x2\x2\x2\x3C4\x3C5\aT\x2\x2\x3C5\x3C6\a\xD7\x2\x2\x3C6\x3C7\x5\xC4\x63"+
		"\x2\x3C7Q\x3\x2\x2\x2\x3C8\x3C9\aU\x2\x2\x3C9\x3CA\a\xD7\x2\x2\x3CA\x3CB"+
		"\x5V,\x2\x3CB\x3CC\a\xD7\x2\x2\x3CC\x3CD\a\xA8\x2\x2\x3CD\x3CE\a\xD7\x2"+
		"\x2\x3CE\x3D3\x5\x1C\xF\x2\x3CF\x3D0\a\xD7\x2\x2\x3D0\x3D1\a\x37\x2\x2"+
		"\x3D1\x3D2\a\xD7\x2\x2\x3D2\x3D4\x5\x1C\xF\x2\x3D3\x3CF\x3\x2\x2\x2\x3D3"+
		"\x3D4\x3\x2\x2\x2\x3D4\x3E2\x3\x2\x2\x2\x3D5\x3D9\x5T+\x2\x3D6\x3D8\x5"+
		"X-\x2\x3D7\x3D6\x3\x2\x2\x2\x3D8\x3DB\x3\x2\x2\x2\x3D9\x3D7\x3\x2\x2\x2"+
		"\x3D9\x3DA\x3\x2\x2\x2\x3DA\x3DD\x3\x2\x2\x2\x3DB\x3D9\x3\x2\x2\x2\x3DC"+
		"\x3DE\x5Z.\x2\x3DD\x3DC\x3\x2\x2\x2\x3DD\x3DE\x3\x2\x2\x2\x3DE\x3DF\x3"+
		"\x2\x2\x2\x3DF\x3E0\a;\x2\x2\x3E0\x3E2\x3\x2\x2\x2\x3E1\x3C8\x3\x2\x2"+
		"\x2\x3E1\x3D5\x3\x2\x2\x2\x3E2S\x3\x2\x2\x2\x3E3\x3E4\aU\x2\x2\x3E4\x3E5"+
		"\a\xD7\x2\x2\x3E5\x3E6\x5V,\x2\x3E6\x3E7\a\xD7\x2\x2\x3E7\x3E9\a\xA8\x2"+
		"\x2\x3E8\x3EA\a\xD5\x2\x2\x3E9\x3E8\x3\x2\x2\x2\x3EA\x3EB\x3\x2\x2\x2"+
		"\x3EB\x3E9\x3\x2\x2\x2\x3EB\x3EC\x3\x2\x2\x2\x3EC\x3F3\x3\x2\x2\x2\x3ED"+
		"\x3EF\x5\x1A\xE\x2\x3EE\x3F0\a\xD5\x2\x2\x3EF\x3EE\x3\x2\x2\x2\x3F0\x3F1"+
		"\x3\x2\x2\x2\x3F1\x3EF\x3\x2\x2\x2\x3F1\x3F2\x3\x2\x2\x2\x3F2\x3F4\x3"+
		"\x2\x2\x2\x3F3\x3ED\x3\x2\x2\x2\x3F3\x3F4\x3\x2\x2\x2\x3F4U\x3\x2\x2\x2"+
		"\x3F5\x3F6\x5\xC4\x63\x2\x3F6W\x3\x2\x2\x2\x3F7\x3F8\a\x38\x2\x2\x3F8"+
		"\x3F9\a\xD7\x2\x2\x3F9\x3FA\x5V,\x2\x3FA\x3FB\a\xD7\x2\x2\x3FB\x3FD\a"+
		"\xA8\x2\x2\x3FC\x3FE\a\xD5\x2\x2\x3FD\x3FC\x3\x2\x2\x2\x3FE\x3FF\x3\x2"+
		"\x2\x2\x3FF\x3FD\x3\x2\x2\x2\x3FF\x400\x3\x2\x2\x2\x400\x407\x3\x2\x2"+
		"\x2\x401\x403\x5\x1A\xE\x2\x402\x404\a\xD5\x2\x2\x403\x402\x3\x2\x2\x2"+
		"\x404\x405\x3\x2\x2\x2\x405\x403\x3\x2\x2\x2\x405\x406\x3\x2\x2\x2\x406"+
		"\x408\x3\x2\x2\x2\x407\x401\x3\x2\x2\x2\x407\x408\x3\x2\x2\x2\x408Y\x3"+
		"\x2\x2\x2\x409\x40B\a\x37\x2\x2\x40A\x40C\a\xD5\x2\x2\x40B\x40A\x3\x2"+
		"\x2\x2\x40C\x40D\x3\x2\x2\x2\x40D\x40B\x3\x2\x2\x2\x40D\x40E\x3\x2\x2"+
		"\x2\x40E\x415\x3\x2\x2\x2\x40F\x411\x5\x1A\xE\x2\x410\x412\a\xD5\x2\x2"+
		"\x411\x410\x3\x2\x2\x2\x412\x413\x3\x2\x2\x2\x413\x411\x3\x2\x2\x2\x413"+
		"\x414\x3\x2\x2\x2\x414\x416\x3\x2\x2\x2\x415\x40F\x3\x2\x2\x2\x415\x416"+
		"\x3\x2\x2\x2\x416[\x3\x2\x2\x2\x417\x418\aW\x2\x2\x418\x419\a\xD7\x2\x2"+
		"\x419\x41A\x5\xFC\x7F\x2\x41A]\x3\x2\x2\x2\x41B\x41C\aY\x2\x2\x41C\x41D"+
		"\a\xD7\x2\x2\x41D\x426\x5\xC4\x63\x2\x41E\x420\a\xD7\x2\x2\x41F\x41E\x3"+
		"\x2\x2\x2\x41F\x420\x3\x2\x2\x2\x420\x421\x3\x2\x2\x2\x421\x423\a\x5\x2"+
		"\x2\x422\x424\a\xD7\x2\x2\x423\x422\x3\x2\x2\x2\x423\x424\x3\x2\x2\x2"+
		"\x424\x425\x3\x2\x2\x2\x425\x427\x5\xC4\x63\x2\x426\x41F\x3\x2\x2\x2\x427"+
		"\x428\x3\x2\x2\x2\x428\x426\x3\x2\x2\x2\x428\x429\x3\x2\x2\x2\x429_\x3"+
		"\x2\x2\x2\x42A\x42B\a\\\x2\x2\x42B\x42C\a\xD7\x2\x2\x42C\x42D\x5\xC4\x63"+
		"\x2\x42D\x61\x3\x2\x2\x2\x42E\x42F\a\x62\x2\x2\x42F\x431\a\xD7\x2\x2\x430"+
		"\x42E\x3\x2\x2\x2\x430\x431\x3\x2\x2\x2\x431\x432\x3\x2\x2\x2\x432\x434"+
		"\x5\xE0q\x2\x433\x435\a\xD7\x2\x2\x434\x433\x3\x2\x2\x2\x434\x435\x3\x2"+
		"\x2\x2\x435\x436\x3\x2\x2\x2\x436\x438\t\a\x2\x2\x437\x439\a\xD7\x2\x2"+
		"\x438\x437\x3\x2\x2\x2\x438\x439\x3\x2\x2\x2\x439\x43A\x3\x2\x2\x2\x43A"+
		"\x43B\x5\xC4\x63\x2\x43B\x63\x3\x2\x2\x2\x43C\x43D\a\x65\x2\x2\x43D\x43E"+
		"\a\xD7\x2\x2\x43E\x440\x5\xC4\x63\x2\x43F\x441\a\xD7\x2\x2\x440\x43F\x3"+
		"\x2\x2\x2\x440\x441\x3\x2\x2\x2\x441\x442\x3\x2\x2\x2\x442\x444\a\x5\x2"+
		"\x2\x443\x445\a\xD7\x2\x2\x444\x443\x3\x2\x2\x2\x444\x445\x3\x2\x2\x2"+
		"\x445\x446\x3\x2\x2\x2\x446\x447\x5\xC4\x63\x2\x447\x65\x3\x2\x2\x2\x448"+
		"\x449\a]\x2\x2\x449\x44A\a\xD7\x2\x2\x44A\x44B\x5\xC4\x63\x2\x44Bg\x3"+
		"\x2\x2\x2\x44C\x44D\a^\x2\x2\x44D\x44E\a\xD7\x2\x2\x44E\x45D\x5\xC4\x63"+
		"\x2\x44F\x451\a\xD7\x2\x2\x450\x44F\x3\x2\x2\x2\x450\x451\x3\x2\x2\x2"+
		"\x451\x452\x3\x2\x2\x2\x452\x454\a\x5\x2\x2\x453\x455\a\xD7\x2\x2\x454"+
		"\x453\x3\x2\x2\x2\x454\x455\x3\x2\x2\x2\x455\x456\x3\x2\x2\x2\x456\x45B"+
		"\x5\xC4\x63\x2\x457\x458\a\xD7\x2\x2\x458\x459\a\xAA\x2\x2\x459\x45A\a"+
		"\xD7\x2\x2\x45A\x45C\x5\xC4\x63\x2\x45B\x457\x3\x2\x2\x2\x45B\x45C\x3"+
		"\x2\x2\x2\x45C\x45E\x3\x2\x2\x2\x45D\x450\x3\x2\x2\x2\x45D\x45E\x3\x2"+
		"\x2\x2\x45Ei\x3\x2\x2\x2\x45F\x460\ai\x2\x2\x460\x461\a\xD7\x2\x2\x461"+
		"\x463\x5\xE0q\x2\x462\x464\a\xD7\x2\x2\x463\x462\x3\x2\x2\x2\x463\x464"+
		"\x3\x2\x2\x2\x464\x465\x3\x2\x2\x2\x465\x467\a\xBD\x2\x2\x466\x468\a\xD7"+
		"\x2\x2\x467\x466\x3\x2\x2\x2\x467\x468\x3\x2\x2\x2\x468\x469\x3\x2\x2"+
		"\x2\x469\x46A\x5\xC4\x63\x2\x46Ak\x3\x2\x2\x2\x46B\x46F\x5n\x38\x2\x46C"+
		"\x46E\x5p\x39\x2\x46D\x46C\x3\x2\x2\x2\x46E\x471\x3\x2\x2\x2\x46F\x46D"+
		"\x3\x2\x2\x2\x46F\x470\x3\x2\x2\x2\x470\x473\x3\x2\x2\x2\x471\x46F\x3"+
		"\x2\x2\x2\x472\x474\x5r:\x2\x473\x472\x3\x2\x2\x2\x473\x474\x3\x2\x2\x2"+
		"\x474\x475\x3\x2\x2\x2\x475\x476\am\x2\x2\x476m\x3\x2\x2\x2\x477\x478"+
		"\aj\x2\x2\x478\x479\a\xD7\x2\x2\x479\x47A\x5V,\x2\x47A\x47B\a\xD7\x2\x2"+
		"\x47B\x47D\a\xA8\x2\x2\x47C\x47E\a\xD5\x2\x2\x47D\x47C\x3\x2\x2\x2\x47E"+
		"\x47F\x3\x2\x2\x2\x47F\x47D\x3\x2\x2\x2\x47F\x480\x3\x2\x2\x2\x480\x487"+
		"\x3\x2\x2\x2\x481\x483\x5\x12\n\x2\x482\x484\a\xD5\x2\x2\x483\x482\x3"+
		"\x2\x2\x2\x484\x485\x3\x2\x2\x2\x485\x483\x3\x2\x2\x2\x485\x486\x3\x2"+
		"\x2\x2\x486\x488\x3\x2\x2\x2\x487\x481\x3\x2\x2\x2\x487\x488\x3\x2\x2"+
		"\x2\x488o\x3\x2\x2\x2\x489\x48A\ak\x2\x2\x48A\x48B\a\xD7\x2\x2\x48B\x48C"+
		"\x5V,\x2\x48C\x48D\a\xD7\x2\x2\x48D\x48F\a\xA8\x2\x2\x48E\x490\a\xD5\x2"+
		"\x2\x48F\x48E\x3\x2\x2\x2\x490\x491\x3\x2\x2\x2\x491\x48F\x3\x2\x2\x2"+
		"\x491\x492\x3\x2\x2\x2\x492\x499\x3\x2\x2\x2\x493\x495\x5\x12\n\x2\x494"+
		"\x496\a\xD5\x2\x2\x495\x494\x3\x2\x2\x2\x496\x497\x3\x2\x2\x2\x497\x495"+
		"\x3\x2\x2\x2\x497\x498\x3\x2\x2\x2\x498\x49A\x3\x2\x2\x2\x499\x493\x3"+
		"\x2\x2\x2\x499\x49A\x3\x2\x2\x2\x49Aq\x3\x2\x2\x2\x49B\x49D\al\x2\x2\x49C"+
		"\x49E\a\xD5\x2\x2\x49D\x49C\x3\x2\x2\x2\x49E\x49F\x3\x2\x2\x2\x49F\x49D"+
		"\x3\x2\x2\x2\x49F\x4A0\x3\x2\x2\x2\x4A0\x4A7\x3\x2\x2\x2\x4A1\x4A3\x5"+
		"\x12\n\x2\x4A2\x4A4\a\xD5\x2\x2\x4A3\x4A2\x3\x2\x2\x2\x4A4\x4A5\x3\x2"+
		"\x2\x2\x4A5\x4A3\x3\x2\x2\x2\x4A5\x4A6\x3\x2\x2\x2\x4A6\x4A8\x3\x2\x2"+
		"\x2\x4A7\x4A1\x3\x2\x2\x2\x4A7\x4A8\x3\x2\x2\x2\x4A8s\x3\x2\x2\x2\x4A9"+
		"\x4AB\ao\x2\x2\x4AA\x4AC\a\xD7\x2\x2\x4AB\x4AA\x3\x2\x2\x2\x4AB\x4AC\x3"+
		"\x2\x2\x2\x4AC\x4AD\x3\x2\x2\x2\x4AD\x4AF\a\xC1\x2\x2\x4AE\x4B0\a\xD7"+
		"\x2\x2\x4AF\x4AE\x3\x2\x2\x2\x4AF\x4B0\x3\x2\x2\x2\x4B0\x4B1\x3\x2\x2"+
		"\x2\x4B1\x4B3\x5\xECw\x2\x4B2\x4B4\a\xD7\x2\x2\x4B3\x4B2\x3\x2\x2\x2\x4B3"+
		"\x4B4\x3\x2\x2\x2\x4B4\x4B5\x3\x2\x2\x2\x4B5\x4B6\a\xCA\x2\x2\x4B6u\x3"+
		"\x2\x2\x2\x4B7\x4B8\ap\x2\x2\x4B8\x4B9\a\xD7\x2\x2\x4B9\x4BA\x5\xC4\x63"+
		"\x2\x4BAw\x3\x2\x2\x2\x4BB\x4BC\ar\x2\x2\x4BC\x4BD\a\xD7\x2\x2\x4BD\x4BE"+
		"\x5\xC4\x63\x2\x4BE\x4BF\a\xD7\x2\x2\x4BF\x4C0\a\x13\x2\x2\x4C0\x4C1\a"+
		"\xD7\x2\x2\x4C1\x4C2\x5\xC4\x63\x2\x4C2y\x3\x2\x2\x2\x4C3\x4C4\ay\x2\x2"+
		"\x4C4\x4CB\a\xD7\x2\x2\x4C5\x4C6\aT\x2\x2\x4C6\x4C7\a\xD7\x2\x2\x4C7\x4CC"+
		"\x5\xC4\x63\x2\x4C8\x4C9\a\x93\x2\x2\x4C9\x4CA\a\xD7\x2\x2\x4CA\x4CC\a"+
		"s\x2\x2\x4CB\x4C5\x3\x2\x2\x2\x4CB\x4C8\x3\x2\x2\x2\x4CC{\x3\x2\x2\x2"+
		"\x4CD\x4CE\ax\x2\x2\x4CE\x4CF\a\xD7\x2\x2\x4CF\x4D0\x5\xC4\x63\x2\x4D0"+
		"\x4D1\a\xD7\x2\x2\x4D1\x4D2\aT\x2\x2\x4D2\x4D3\a\xD7\x2\x2\x4D3\x4DE\x5"+
		"\xC4\x63\x2\x4D4\x4D6\a\xD7\x2\x2\x4D5\x4D4\x3\x2\x2\x2\x4D5\x4D6\x3\x2"+
		"\x2\x2\x4D6\x4D7\x3\x2\x2\x2\x4D7\x4D9\a\x5\x2\x2\x4D8\x4DA\a\xD7\x2\x2"+
		"\x4D9\x4D8\x3\x2\x2\x2\x4D9\x4DA\x3\x2\x2\x2\x4DA\x4DB\x3\x2\x2\x2\x4DB"+
		"\x4DD\x5\xC4\x63\x2\x4DC\x4D5\x3\x2\x2\x2\x4DD\x4E0\x3\x2\x2\x2\x4DE\x4DC"+
		"\x3\x2\x2\x2\x4DE\x4DF\x3\x2\x2\x2\x4DF}\x3\x2\x2\x2\x4E0\x4DE\x3\x2\x2"+
		"\x2\x4E1\x4E2\ax\x2\x2\x4E2\x4E3\a\xD7\x2\x2\x4E3\x4E4\x5\xC4\x63\x2\x4E4"+
		"\x4E5\a\xD7\x2\x2\x4E5\x4E6\aS\x2\x2\x4E6\x4E7\a\xD7\x2\x2\x4E7\x4F2\x5"+
		"\xC4\x63\x2\x4E8\x4EA\a\xD7\x2\x2\x4E9\x4E8\x3\x2\x2\x2\x4E9\x4EA\x3\x2"+
		"\x2\x2\x4EA\x4EB\x3\x2\x2\x2\x4EB\x4ED\a\x5\x2\x2\x4EC\x4EE\a\xD7\x2\x2"+
		"\x4ED\x4EC\x3\x2\x2\x2\x4ED\x4EE\x3\x2\x2\x2\x4EE\x4EF\x3\x2\x2\x2\x4EF"+
		"\x4F1\x5\xC4\x63\x2\x4F0\x4E9\x3\x2\x2\x2\x4F1\x4F4\x3\x2\x2\x2\x4F2\x4F0"+
		"\x3\x2\x2\x2\x4F2\x4F3\x3\x2\x2\x2\x4F3\x7F\x3\x2\x2\x2\x4F4\x4F2\x3\x2"+
		"\x2\x2\x4F5\x4F6\az\x2\x2\x4F6\x4F7\a\xD7\x2\x2\x4F7\x4F8\x5\xC4\x63\x2"+
		"\x4F8\x4F9\a\xD7\x2\x2\x4F9\x4FA\aO\x2\x2\x4FA\x4FB\a\xD7\x2\x2\x4FB\x500"+
		"\t\b\x2\x2\x4FC\x4FD\a\xD7\x2\x2\x4FD\x4FE\a\f\x2\x2\x4FE\x4FF\a\xD7\x2"+
		"\x2\x4FF\x501\t\t\x2\x2\x500\x4FC\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2\x501"+
		"\x504\x3\x2\x2\x2\x502\x503\a\xD7\x2\x2\x503\x505\t\n\x2\x2\x504\x502"+
		"\x3\x2\x2\x2\x504\x505\x3\x2\x2\x2\x505\x506\x3\x2\x2\x2\x506\x507\a\xD7"+
		"\x2\x2\x507\x508\a\x13\x2\x2\x508\x509\a\xD7\x2\x2\x509\x514\x5\xC4\x63"+
		"\x2\x50A\x50B\a\xD7\x2\x2\x50B\x50D\a\x61\x2\x2\x50C\x50E\a\xD7\x2\x2"+
		"\x50D\x50C\x3\x2\x2\x2\x50D\x50E\x3\x2\x2\x2\x50E\x50F\x3\x2\x2\x2\x50F"+
		"\x511\a\xBD\x2\x2\x510\x512\a\xD7\x2\x2\x511\x510\x3\x2\x2\x2\x511\x512"+
		"\x3\x2\x2\x2\x512\x513\x3\x2\x2\x2\x513\x515\x5\xC4\x63\x2\x514\x50A\x3"+
		"\x2\x2\x2\x514\x515\x3\x2\x2\x2\x515\x81\x3\x2\x2\x2\x516\x523\x5\x84"+
		"\x43\x2\x517\x519\a\xD7\x2\x2\x518\x517\x3\x2\x2\x2\x518\x519\x3\x2\x2"+
		"\x2\x519\x51A\x3\x2\x2\x2\x51A\x51C\t\v\x2\x2\x51B\x51D\a\xD7\x2\x2\x51C"+
		"\x51B\x3\x2\x2\x2\x51C\x51D\x3\x2\x2\x2\x51D\x51F\x3\x2\x2\x2\x51E\x520"+
		"\x5\x84\x43\x2\x51F\x51E\x3\x2\x2\x2\x51F\x520\x3\x2\x2\x2\x520\x522\x3"+
		"\x2\x2\x2\x521\x518\x3\x2\x2\x2\x522\x525\x3\x2\x2\x2\x523\x521\x3\x2"+
		"\x2\x2\x523\x524\x3\x2\x2\x2\x524\x538\x3\x2\x2\x2\x525\x523\x3\x2\x2"+
		"\x2\x526\x528\x5\x84\x43\x2\x527\x526\x3\x2\x2\x2\x527\x528\x3\x2\x2\x2"+
		"\x528\x533\x3\x2\x2\x2\x529\x52B\a\xD7\x2\x2\x52A\x529\x3\x2\x2\x2\x52A"+
		"\x52B\x3\x2\x2\x2\x52B\x52C\x3\x2\x2\x2\x52C\x52E\t\v\x2\x2\x52D\x52F"+
		"\a\xD7\x2\x2\x52E\x52D\x3\x2\x2\x2\x52E\x52F\x3\x2\x2\x2\x52F\x531\x3"+
		"\x2\x2\x2\x530\x532\x5\x84\x43\x2\x531\x530\x3\x2\x2\x2\x531\x532\x3\x2"+
		"\x2\x2\x532\x534\x3\x2\x2\x2\x533\x52A\x3\x2\x2\x2\x534\x535\x3\x2\x2"+
		"\x2\x535\x533\x3\x2\x2\x2\x535\x536\x3\x2\x2\x2\x536\x538\x3\x2\x2\x2"+
		"\x537\x516\x3\x2\x2\x2\x537\x527\x3\x2\x2\x2\x538\x83\x3\x2\x2\x2\x539"+
		"\x54B\x5\xC4\x63\x2\x53A\x548\t\f\x2\x2\x53B\x53D\a\xD7\x2\x2\x53C\x53B"+
		"\x3\x2\x2\x2\x53C\x53D\x3\x2\x2\x2\x53D\x53E\x3\x2\x2\x2\x53E\x540\a\xC1"+
		"\x2\x2\x53F\x541\a\xD7\x2\x2\x540\x53F\x3\x2\x2\x2\x540\x541\x3\x2\x2"+
		"\x2\x541\x542\x3\x2\x2\x2\x542\x544\x5\xECw\x2\x543\x545\a\xD7\x2\x2\x544"+
		"\x543\x3\x2\x2\x2\x544\x545\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546\x547"+
		"\a\xCA\x2\x2\x547\x549\x3\x2\x2\x2\x548\x53C\x3\x2\x2\x2\x548\x549\x3"+
		"\x2\x2\x2\x549\x54B\x3\x2\x2\x2\x54A\x539\x3\x2\x2\x2\x54A\x53A\x3\x2"+
		"\x2\x2\x54B\x85\x3\x2\x2\x2\x54C\x54D\a\x84\x2\x2\x54D\x54E\a\xD7\x2\x2"+
		"\x54E\x550\x5\xC4\x63\x2\x54F\x551\a\xD7\x2\x2\x550\x54F\x3\x2\x2\x2\x550"+
		"\x551\x3\x2\x2\x2\x551\x552\x3\x2\x2\x2\x552\x557\a\x5\x2\x2\x553\x555"+
		"\a\xD7\x2\x2\x554\x553\x3\x2\x2\x2\x554\x555\x3\x2\x2\x2\x555\x556\x3"+
		"\x2\x2\x2\x556\x558\x5\x82\x42\x2\x557\x554\x3\x2\x2\x2\x557\x558\x3\x2"+
		"\x2\x2\x558\x87\x3\x2\x2\x2\x559\x55A\x5\x114\x8B\x2\x55A\x55B\a\xD7\x2"+
		"\x2\x55B\x55D\x3\x2\x2\x2\x55C\x559\x3\x2\x2\x2\x55C\x55D\x3\x2\x2\x2"+
		"\x55D\x560\x3\x2\x2\x2\x55E\x55F\a\xA1\x2\x2\x55F\x561\a\xD7\x2\x2\x560"+
		"\x55E\x3\x2\x2\x2\x560\x561\x3\x2\x2\x2\x561\x562\x3\x2\x2\x2\x562\x563"+
		"\a\x86\x2\x2\x563\x564\a\xD7\x2\x2\x564\x569\x5\xFC\x7F\x2\x565\x567\a"+
		"\xD7\x2\x2\x566\x565\x3\x2\x2\x2\x566\x567\x3\x2\x2\x2\x567\x568\x3\x2"+
		"\x2\x2\x568\x56A\x5\xF2z\x2\x569\x566\x3\x2\x2\x2\x569\x56A\x3\x2\x2\x2"+
		"\x56A\x56D\x3\x2\x2\x2\x56B\x56C\a\xD7\x2\x2\x56C\x56E\x5\xFE\x80\x2\x56D"+
		"\x56B\x3\x2\x2\x2\x56D\x56E\x3\x2\x2\x2\x56E\x570\x3\x2\x2\x2\x56F\x571"+
		"\a\xD5\x2\x2\x570\x56F\x3\x2\x2\x2\x571\x572\x3\x2\x2\x2\x572\x570\x3"+
		"\x2\x2\x2\x572\x573\x3\x2\x2\x2\x573\x57A\x3\x2\x2\x2\x574\x576\x5\x1A"+
		"\xE\x2\x575\x577\a\xD5\x2\x2\x576\x575\x3\x2\x2\x2\x577\x578\x3\x2\x2"+
		"\x2\x578\x576\x3\x2\x2\x2\x578\x579\x3\x2\x2\x2\x579\x57B\x3\x2\x2\x2"+
		"\x57A\x574\x3\x2\x2\x2\x57A\x57B\x3\x2\x2\x2\x57B\x57C\x3\x2\x2\x2\x57C"+
		"\x57D\a<\x2\x2\x57D\x89\x3\x2\x2\x2\x57E\x57F\x5\x114\x8B\x2\x57F\x580"+
		"\a\xD7\x2\x2\x580\x582\x3\x2\x2\x2\x581\x57E\x3\x2\x2\x2\x581\x582\x3"+
		"\x2\x2\x2\x582\x585\x3\x2\x2\x2\x583\x584\a\xA1\x2\x2\x584\x586\a\xD7"+
		"\x2\x2\x585\x583\x3\x2\x2\x2\x585\x586\x3\x2\x2\x2\x586\x587\x3\x2\x2"+
		"\x2\x587\x588\a\x88\x2\x2\x588\x589\a\xD7\x2\x2\x589\x58E\x5\xFC\x7F\x2"+
		"\x58A\x58C\a\xD7\x2\x2\x58B\x58A\x3\x2\x2\x2\x58B\x58C\x3\x2\x2\x2\x58C"+
		"\x58D\x3\x2\x2\x2\x58D\x58F\x5\xF2z\x2\x58E\x58B\x3\x2\x2\x2\x58E\x58F"+
		"\x3\x2\x2\x2\x58F\x591\x3\x2\x2\x2\x590\x592\a\xD5\x2\x2\x591\x590\x3"+
		"\x2\x2\x2\x592\x593\x3\x2\x2\x2\x593\x591\x3\x2\x2\x2\x593\x594\x3\x2"+
		"\x2\x2\x594\x59B\x3\x2\x2\x2\x595\x597\x5\x1A\xE\x2\x596\x598\a\xD5\x2"+
		"\x2\x597\x596\x3\x2\x2\x2\x598\x599\x3\x2\x2\x2\x599\x597\x3\x2\x2\x2"+
		"\x599\x59A\x3\x2\x2\x2\x59A\x59C\x3\x2\x2\x2\x59B\x595\x3\x2\x2\x2\x59B"+
		"\x59C\x3\x2\x2\x2\x59C\x59D\x3\x2\x2\x2\x59D\x59E\a<\x2\x2\x59E\x8B\x3"+
		"\x2\x2\x2\x59F\x5A0\x5\x114\x8B\x2\x5A0\x5A1\a\xD7\x2\x2\x5A1\x5A3\x3"+
		"\x2\x2\x2\x5A2\x59F\x3\x2\x2\x2\x5A2\x5A3\x3\x2\x2\x2\x5A3\x5A6\x3\x2"+
		"\x2\x2\x5A4\x5A5\a\xA1\x2\x2\x5A5\x5A7\a\xD7\x2\x2\x5A6\x5A4\x3\x2\x2"+
		"\x2\x5A6\x5A7\x3\x2\x2\x2\x5A7\x5A8\x3\x2\x2\x2\x5A8\x5A9\a\x87\x2\x2"+
		"\x5A9\x5AA\a\xD7\x2\x2\x5AA\x5AF\x5\xFC\x7F\x2\x5AB\x5AD\a\xD7\x2\x2\x5AC"+
		"\x5AB\x3\x2\x2\x2\x5AC\x5AD\x3\x2\x2\x2\x5AD\x5AE\x3\x2\x2\x2\x5AE\x5B0"+
		"\x5\xF2z\x2\x5AF\x5AC\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2\x2\x5B0\x5B2\x3\x2"+
		"\x2\x2\x5B1\x5B3\a\xD5\x2\x2\x5B2\x5B1\x3\x2\x2\x2\x5B3\x5B4\x3\x2\x2"+
		"\x2\x5B4\x5B2\x3\x2\x2\x2\x5B4\x5B5\x3\x2\x2\x2\x5B5\x5BC\x3\x2\x2\x2"+
		"\x5B6\x5B8\x5\x1A\xE\x2\x5B7\x5B9\a\xD5\x2\x2\x5B8\x5B7\x3\x2\x2\x2\x5B9"+
		"\x5BA\x3\x2\x2\x2\x5BA\x5B8\x3\x2\x2\x2\x5BA\x5BB\x3\x2\x2\x2\x5BB\x5BD"+
		"\x3\x2\x2\x2\x5BC\x5B6\x3\x2\x2\x2\x5BC\x5BD\x3\x2\x2\x2\x5BD\x5BE\x3"+
		"\x2\x2\x2\x5BE\x5BF\a<\x2\x2\x5BF\x8D\x3\x2\x2\x2\x5C0\x5C1\a\x8A\x2\x2"+
		"\x5C1\x5C2\a\xD7\x2\x2\x5C2\x5C4\x5\xC4\x63\x2\x5C3\x5C5\a\xD7\x2\x2\x5C4"+
		"\x5C3\x3\x2\x2\x2\x5C4\x5C5\x3\x2\x2\x2\x5C5\x5C6\x3\x2\x2\x2\x5C6\x5C8"+
		"\a\x5\x2\x2\x5C7\x5C9\a\xD7\x2\x2\x5C8\x5C7\x3\x2\x2\x2\x5C8\x5C9\x3\x2"+
		"\x2\x2\x5C9\x5CB\x3\x2\x2\x2\x5CA\x5CC\x5\xC4\x63\x2\x5CB\x5CA\x3\x2\x2"+
		"\x2\x5CB\x5CC\x3\x2\x2\x2\x5CC\x5CE\x3\x2\x2\x2\x5CD\x5CF\a\xD7\x2\x2"+
		"\x5CE\x5CD\x3\x2\x2\x2\x5CE\x5CF\x3\x2\x2\x2\x5CF\x5D0\x3\x2\x2\x2\x5D0"+
		"\x5D2\a\x5\x2\x2\x5D1\x5D3\a\xD7\x2\x2\x5D2\x5D1\x3\x2\x2\x2\x5D2\x5D3"+
		"\x3\x2\x2\x2\x5D3\x5D4\x3\x2\x2\x2\x5D4\x5D5\x5\xC4\x63\x2\x5D5\x8F\x3"+
		"\x2\x2\x2\x5D6\x5D7\a\x8D\x2\x2\x5D7\x5D8\a\xD7\x2\x2\x5D8\x5E7\x5\xFC"+
		"\x7F\x2\x5D9\x5DB\a\xD7\x2\x2\x5DA\x5D9\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2"+
		"\x2\x5DB\x5DC\x3\x2\x2\x2\x5DC\x5DE\a\xC1\x2\x2\x5DD\x5DF\a\xD7\x2\x2"+
		"\x5DE\x5DD\x3\x2\x2\x2\x5DE\x5DF\x3\x2\x2\x2\x5DF\x5E4\x3\x2\x2\x2\x5E0"+
		"\x5E2\x5\xECw\x2\x5E1\x5E3\a\xD7\x2\x2\x5E2\x5E1\x3\x2\x2\x2\x5E2\x5E3"+
		"\x3\x2\x2\x2\x5E3\x5E5\x3\x2\x2\x2\x5E4\x5E0\x3\x2\x2\x2\x5E4\x5E5\x3"+
		"\x2\x2\x2\x5E5\x5E6\x3\x2\x2\x2\x5E6\x5E8\a\xCA\x2\x2\x5E7\x5DA\x3\x2"+
		"\x2\x2\x5E7\x5E8\x3\x2\x2\x2\x5E8\x91\x3\x2\x2\x2\x5E9\x5EC\a\x8C\x2\x2"+
		"\x5EA\x5EB\a\xD7\x2\x2\x5EB\x5ED\x5\xC4\x63\x2\x5EC\x5EA\x3\x2\x2\x2\x5EC"+
		"\x5ED\x3\x2\x2\x2\x5ED\x93\x3\x2\x2\x2\x5EE\x5EF\a\x90\x2\x2\x5EF\x5F2"+
		"\a\xD7\x2\x2\x5F0\x5F1\a\x83\x2\x2\x5F1\x5F3\a\xD7\x2\x2\x5F2\x5F0\x3"+
		"\x2\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\x5F4\x3\x2\x2\x2\x5F4\x5FF\x5\x96"+
		"L\x2\x5F5\x5F7\a\xD7\x2\x2\x5F6\x5F5\x3\x2\x2\x2\x5F6\x5F7\x3\x2\x2\x2"+
		"\x5F7\x5F8\x3\x2\x2\x2\x5F8\x5FA\a\x5\x2\x2\x5F9\x5FB\a\xD7\x2\x2\x5FA"+
		"\x5F9\x3\x2\x2\x2\x5FA\x5FB\x3\x2\x2\x2\x5FB\x5FC\x3\x2\x2\x2\x5FC\x5FE"+
		"\x5\x96L\x2\x5FD\x5F6\x3\x2\x2\x2\x5FE\x601\x3\x2\x2\x2\x5FF\x5FD\x3\x2"+
		"\x2\x2\x5FF\x600\x3\x2\x2\x2\x600\x95\x3\x2\x2\x2\x601\x5FF\x3\x2\x2\x2"+
		"\x602\x604\x5\xE0q\x2\x603\x605\a\xD7\x2\x2\x604\x603\x3\x2\x2\x2\x604"+
		"\x605\x3\x2\x2\x2\x605\x606\x3\x2\x2\x2\x606\x608\a\xC1\x2\x2\x607\x609"+
		"\a\xD7\x2\x2\x608\x607\x3\x2\x2\x2\x608\x609\x3\x2\x2\x2\x609\x60A\x3"+
		"\x2\x2\x2\x60A\x60C\x5\xF8}\x2\x60B\x60D\a\xD7\x2\x2\x60C\x60B\x3\x2\x2"+
		"\x2\x60C\x60D\x3\x2\x2\x2\x60D\x60E\x3\x2\x2\x2\x60E\x611\a\xCA\x2\x2"+
		"\x60F\x610\a\xD7\x2\x2\x610\x612\x5\xFE\x80\x2\x611\x60F\x3\x2\x2\x2\x611"+
		"\x612\x3\x2\x2\x2\x612\x97\x3\x2\x2\x2\x613\x614\a\x92\x2\x2\x614\x99"+
		"\x3\x2\x2\x2\x615\x61B\a\x93\x2\x2\x616\x619\a\xD7\x2\x2\x617\x61A\as"+
		"\x2\x2\x618\x61A\x5\xFC\x7F\x2\x619\x617\x3\x2\x2\x2\x619\x618\x3\x2\x2"+
		"\x2\x61A\x61C\x3\x2\x2\x2\x61B\x616\x3\x2\x2\x2\x61B\x61C\x3\x2\x2\x2"+
		"\x61C\x9B\x3\x2\x2\x2\x61D\x61E\a\x94\x2\x2\x61E\x9D\x3\x2\x2\x2\x61F"+
		"\x620\a\x95\x2\x2\x620\x621\a\xD7\x2\x2\x621\x622\x5\xC4\x63\x2\x622\x9F"+
		"\x3\x2\x2\x2\x623\x624\a\x96\x2\x2\x624\x625\a\xD7\x2\x2\x625\x627\x5"+
		"\xE0q\x2\x626\x628\a\xD7\x2\x2\x627\x626\x3\x2\x2\x2\x627\x628\x3\x2\x2"+
		"\x2\x628\x629\x3\x2\x2\x2\x629\x62B\a\xBD\x2\x2\x62A\x62C\a\xD7\x2\x2"+
		"\x62B\x62A\x3\x2\x2\x2\x62B\x62C\x3\x2\x2\x2\x62C\x62D\x3\x2\x2\x2\x62D"+
		"\x62E\x5\xC4\x63\x2\x62E\xA1\x3\x2\x2\x2\x62F\x630\a\x97\x2\x2\x630\x631"+
		"\a\xD7\x2\x2\x631\x633\x5\xC4\x63\x2\x632\x634\a\xD7\x2\x2\x633\x632\x3"+
		"\x2\x2\x2\x633\x634\x3\x2\x2\x2\x634\x635\x3\x2\x2\x2\x635\x637\a\x5\x2"+
		"\x2\x636\x638\a\xD7\x2\x2\x637\x636\x3\x2\x2\x2\x637\x638\x3\x2\x2\x2"+
		"\x638\x639\x3\x2\x2\x2\x639\x63A\x5\xC4\x63\x2\x63A\xA3\x3\x2\x2\x2\x63B"+
		"\x63C\a\x98\x2\x2\x63C\x63D\a\xD7\x2\x2\x63D\x63F\x5\xC4\x63\x2\x63E\x640"+
		"\a\xD7\x2\x2\x63F\x63E\x3\x2\x2\x2\x63F\x640\x3\x2\x2\x2\x640\x641\x3"+
		"\x2\x2\x2\x641\x643\a\x5\x2\x2\x642\x644\a\xD7\x2\x2\x643\x642\x3\x2\x2"+
		"\x2\x643\x644\x3\x2\x2\x2\x644\x645\x3\x2\x2\x2\x645\x647\x5\xC4\x63\x2"+
		"\x646\x648\a\xD7\x2\x2\x647\x646\x3\x2\x2\x2\x647\x648\x3\x2\x2\x2\x648"+
		"\x649\x3\x2\x2\x2\x649\x64B\a\x5\x2\x2\x64A\x64C\a\xD7\x2\x2\x64B\x64A"+
		"\x3\x2\x2\x2\x64B\x64C\x3\x2\x2\x2\x64C\x64D\x3\x2\x2\x2\x64D\x64F\x5"+
		"\xC4\x63\x2\x64E\x650\a\xD7\x2\x2\x64F\x64E\x3\x2\x2\x2\x64F\x650\x3\x2"+
		"\x2\x2\x650\x651\x3\x2\x2\x2\x651\x653\a\x5\x2\x2\x652\x654\a\xD7\x2\x2"+
		"\x653\x652\x3\x2\x2\x2\x653\x654\x3\x2\x2\x2\x654\x655\x3\x2\x2\x2\x655"+
		"\x656\x5\xC4\x63\x2\x656\xA5\x3\x2\x2\x2\x657\x658\a\x99\x2\x2\x658\x659"+
		"\a\xD7\x2\x2\x659\x65B\x5\xC4\x63\x2\x65A\x65C\a\xD7\x2\x2\x65B\x65A\x3"+
		"\x2\x2\x2\x65B\x65C\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2\x65D\x65F\a\x5\x2"+
		"\x2\x65E\x660\a\xD7\x2\x2\x65F\x65E\x3\x2\x2\x2\x65F\x660\x3\x2\x2\x2"+
		"\x660\x661\x3\x2\x2\x2\x661\x662\x5\xC4\x63\x2\x662\xA7\x3\x2\x2\x2\x663"+
		"\x664\a\x9A\x2\x2\x664\x665\a\xD7\x2\x2\x665\x666\a\x1C\x2\x2\x666\x667"+
		"\a\xD7\x2\x2\x667\x669\x5\xC4\x63\x2\x668\x66A\a\xD5\x2\x2\x669\x668\x3"+
		"\x2\x2\x2\x66A\x66B\x3\x2\x2\x2\x66B\x669\x3\x2\x2\x2\x66B\x66C\x3\x2"+
		"\x2\x2\x66C\x670\x3\x2\x2\x2\x66D\x66F\x5\xAAV\x2\x66E\x66D\x3\x2\x2\x2"+
		"\x66F\x672\x3\x2\x2\x2\x670\x66E\x3\x2\x2\x2\x670\x671\x3\x2\x2\x2\x671"+
		"\x674\x3\x2\x2\x2\x672\x670\x3\x2\x2\x2\x673\x675\a\xD7\x2\x2\x674\x673"+
		"\x3\x2\x2\x2\x674\x675\x3\x2\x2\x2\x675\x676\x3\x2\x2\x2\x676\x677\a="+
		"\x2\x2\x677\xA9\x3\x2\x2\x2\x678\x679\a\x1C\x2\x2\x679\x67A\a\xD7\x2\x2"+
		"\x67A\x67C\x5\xACW\x2\x67B\x67D\a\xD7\x2\x2\x67C\x67B\x3\x2\x2\x2\x67C"+
		"\x67D\x3\x2\x2\x2\x67D\x68C\x3\x2\x2\x2\x67E\x680\a\x6\x2\x2\x67F\x67E"+
		"\x3\x2\x2\x2\x67F\x680\x3\x2\x2\x2\x680\x684\x3\x2\x2\x2\x681\x683\a\xD5"+
		"\x2\x2\x682\x681\x3\x2\x2\x2\x683\x686\x3\x2\x2\x2\x684\x682\x3\x2\x2"+
		"\x2\x684\x685\x3\x2\x2\x2\x685\x68D\x3\x2\x2\x2\x686\x684\x3\x2\x2\x2"+
		"\x687\x689\a\xD5\x2\x2\x688\x687\x3\x2\x2\x2\x689\x68A\x3\x2\x2\x2\x68A"+
		"\x688\x3\x2\x2\x2\x68A\x68B\x3\x2\x2\x2\x68B\x68D\x3\x2\x2\x2\x68C\x67F"+
		"\x3\x2\x2\x2\x68C\x688\x3\x2\x2\x2\x68D\x694\x3\x2\x2\x2\x68E\x690\x5"+
		"\x1A\xE\x2\x68F\x691\a\xD5\x2\x2\x690\x68F\x3\x2\x2\x2\x691\x692\x3\x2"+
		"\x2\x2\x692\x690\x3\x2\x2\x2\x692\x693\x3\x2\x2\x2\x693\x695\x3\x2\x2"+
		"\x2\x694\x68E\x3\x2\x2\x2\x694\x695\x3\x2\x2\x2\x695\xAB\x3\x2\x2\x2\x696"+
		"\x6C2\a\x37\x2\x2\x697\x699\aZ\x2\x2\x698\x69A\a\xD7\x2\x2\x699\x698\x3"+
		"\x2\x2\x2\x699\x69A\x3\x2\x2\x2\x69A\x69B\x3\x2\x2\x2\x69B\x69D\x5\x104"+
		"\x83\x2\x69C\x69E\a\xD7\x2\x2\x69D\x69C\x3\x2\x2\x2\x69D\x69E\x3\x2\x2"+
		"\x2\x69E\x69F\x3\x2\x2\x2\x69F\x6A0\x5\xC4\x63\x2\x6A0\x6C2\x3\x2\x2\x2"+
		"\x6A1\x6AC\x5\xC4\x63\x2\x6A2\x6A4\a\xD7\x2\x2\x6A3\x6A2\x3\x2\x2\x2\x6A3"+
		"\x6A4\x3\x2\x2\x2\x6A4\x6A5\x3\x2\x2\x2\x6A5\x6A7\a\x5\x2\x2\x6A6\x6A8"+
		"\a\xD7\x2\x2\x6A7\x6A6\x3\x2\x2\x2\x6A7\x6A8\x3\x2\x2\x2\x6A8\x6A9\x3"+
		"\x2\x2\x2\x6A9\x6AB\x5\xC4\x63\x2\x6AA\x6A3\x3\x2\x2\x2\x6AB\x6AE\x3\x2"+
		"\x2\x2\x6AC\x6AA\x3\x2\x2\x2\x6AC\x6AD\x3\x2\x2\x2\x6AD\x6C2\x3\x2\x2"+
		"\x2\x6AE\x6AC\x3\x2\x2\x2\x6AF\x6B0\a\xD0\x2\x2\x6B0\x6B1\a\xD7\x2\x2"+
		"\x6B1\x6B2\a\xAA\x2\x2\x6B2\x6B3\a\xD7\x2\x2\x6B3\x6BE\x5\xC4\x63\x2\x6B4"+
		"\x6B6\a\xD7\x2\x2\x6B5\x6B4\x3\x2\x2\x2\x6B5\x6B6\x3\x2\x2\x2\x6B6\x6B7"+
		"\x3\x2\x2\x2\x6B7\x6B9\a\x5\x2\x2\x6B8\x6BA\a\xD7\x2\x2\x6B9\x6B8\x3\x2"+
		"\x2\x2\x6B9\x6BA\x3\x2\x2\x2\x6BA\x6BB\x3\x2\x2\x2\x6BB\x6BD\x5\xC4\x63"+
		"\x2\x6BC\x6B5\x3\x2\x2\x2\x6BD\x6C0\x3\x2\x2\x2\x6BE\x6BC\x3\x2\x2\x2"+
		"\x6BE\x6BF\x3\x2\x2\x2\x6BF\x6C2\x3\x2\x2\x2\x6C0\x6BE\x3\x2\x2\x2\x6C1"+
		"\x696\x3\x2\x2\x2\x6C1\x697\x3\x2\x2\x2\x6C1\x6A1\x3\x2\x2\x2\x6C1\x6AF"+
		"\x3\x2\x2\x2\x6C2\xAD\x3\x2\x2\x2\x6C3\x6C4\a\x9B\x2\x2\x6C4\x6C5\a\xD7"+
		"\x2\x2\x6C5\x6CE\x5\xC4\x63\x2\x6C6\x6C8\a\xD7\x2\x2\x6C7\x6C6\x3\x2\x2"+
		"\x2\x6C7\x6C8\x3\x2\x2\x2\x6C8\x6C9\x3\x2\x2\x2\x6C9\x6CB\a\x5\x2\x2\x6CA"+
		"\x6CC\a\xD7\x2\x2\x6CB\x6CA\x3\x2\x2\x2\x6CB\x6CC\x3\x2\x2\x2\x6CC\x6CD"+
		"\x3\x2\x2\x2\x6CD\x6CF\x5\xC4\x63\x2\x6CE\x6C7\x3\x2\x2\x2\x6CE\x6CF\x3"+
		"\x2\x2\x2\x6CF\xAF\x3\x2\x2\x2\x6D0\x6D1\a\x9D\x2\x2\x6D1\x6D2\a\xD7\x2"+
		"\x2\x6D2\x6D4\x5\xC4\x63\x2\x6D3\x6D5\a\xD7\x2\x2\x6D4\x6D3\x3\x2\x2\x2"+
		"\x6D4\x6D5\x3\x2\x2\x2\x6D5\x6D6\x3\x2\x2\x2\x6D6\x6D8\a\x5\x2\x2\x6D7"+
		"\x6D9\a\xD7\x2\x2\x6D8\x6D7\x3\x2\x2\x2\x6D8\x6D9\x3\x2\x2\x2\x6D9\x6DA"+
		"\x3\x2\x2\x2\x6DA\x6DB\x5\xC4\x63\x2\x6DB\xB1\x3\x2\x2\x2\x6DC\x6DD\a"+
		"\x9C\x2\x2\x6DD\x6DE\a\xD7\x2\x2\x6DE\x6E0\x5\xE0q\x2\x6DF\x6E1\a\xD7"+
		"\x2\x2\x6E0\x6DF\x3\x2\x2\x2\x6E0\x6E1\x3\x2\x2\x2\x6E1\x6E2\x3\x2\x2"+
		"\x2\x6E2\x6E4\a\xBD\x2\x2\x6E3\x6E5\a\xD7\x2\x2\x6E4\x6E3\x3\x2\x2\x2"+
		"\x6E4\x6E5\x3\x2\x2\x2\x6E5\x6E6\x3\x2\x2\x2\x6E6\x6E7\x5\xC4\x63\x2\x6E7"+
		"\xB3\x3\x2\x2\x2\x6E8\x6E9\a\xA3\x2\x2\x6E9\xB5\x3\x2\x2\x2\x6EA\x6EB"+
		"\x5\x114\x8B\x2\x6EB\x6EC\a\xD7\x2\x2\x6EC\x6EE\x3\x2\x2\x2\x6ED\x6EA"+
		"\x3\x2\x2\x2\x6ED\x6EE\x3\x2\x2\x2\x6EE\x6F1\x3\x2\x2\x2\x6EF\x6F0\a\xA1"+
		"\x2\x2\x6F0\x6F2\a\xD7\x2\x2\x6F1\x6EF\x3\x2\x2\x2\x6F1\x6F2\x3\x2\x2"+
		"\x2\x6F2\x6F3\x3\x2\x2\x2\x6F3\x6F4\a\xA5\x2\x2\x6F4\x6F5\a\xD7\x2\x2"+
		"\x6F5\x6FA\x5\xFC\x7F\x2\x6F6\x6F8\a\xD7\x2\x2\x6F7\x6F6\x3\x2\x2\x2\x6F7"+
		"\x6F8\x3\x2\x2\x2\x6F8\x6F9\x3\x2\x2\x2\x6F9\x6FB\x5\xF2z\x2\x6FA\x6F7"+
		"\x3\x2\x2\x2\x6FA\x6FB\x3\x2\x2\x2\x6FB\x6FD\x3\x2\x2\x2\x6FC\x6FE\a\xD5"+
		"\x2\x2\x6FD\x6FC\x3\x2\x2\x2\x6FE\x6FF\x3\x2\x2\x2\x6FF\x6FD\x3\x2\x2"+
		"\x2\x6FF\x700\x3\x2\x2\x2\x700\x707\x3\x2\x2\x2\x701\x703\x5\x1A\xE\x2"+
		"\x702\x704\a\xD5\x2\x2\x703\x702\x3\x2\x2\x2\x704\x705\x3\x2\x2\x2\x705"+
		"\x703\x3\x2\x2\x2\x705\x706\x3\x2\x2\x2\x706\x708\x3\x2\x2\x2\x707\x701"+
		"\x3\x2\x2\x2\x707\x708\x3\x2\x2\x2\x708\x709\x3\x2\x2\x2\x709\x70A\a>"+
		"\x2\x2\x70A\xB7\x3\x2\x2\x2\x70B\x70D\a\xA9\x2\x2\x70C\x70E\a\xD7\x2\x2"+
		"\x70D\x70C\x3\x2\x2\x2\x70D\x70E\x3\x2\x2\x2\x70E\x70F\x3\x2\x2\x2\x70F"+
		"\x711\a\xBD\x2\x2\x710\x712\a\xD7\x2\x2\x711\x710\x3\x2\x2\x2\x711\x712"+
		"\x3\x2\x2\x2\x712\x713\x3\x2\x2\x2\x713\x714\x5\xC4\x63\x2\x714\xB9\x3"+
		"\x2\x2\x2\x715\x716\x5\x114\x8B\x2\x716\x717\a\xD7\x2\x2\x717\x719\x3"+
		"\x2\x2\x2\x718\x715\x3\x2\x2\x2\x718\x719\x3\x2\x2\x2\x719\x71A\x3\x2"+
		"\x2\x2\x71A\x71B\a\xAC\x2\x2\x71B\x71C\a\xD7\x2\x2\x71C\x71E\x5\xFC\x7F"+
		"\x2\x71D\x71F\a\xD5\x2\x2\x71E\x71D\x3\x2\x2\x2\x71F\x720\x3\x2\x2\x2"+
		"\x720\x71E\x3\x2\x2\x2\x720\x721\x3\x2\x2\x2\x721\x725\x3\x2\x2\x2\x722"+
		"\x724\x5\xBC_\x2\x723\x722\x3\x2\x2\x2\x724\x727\x3\x2\x2\x2\x725\x723"+
		"\x3\x2\x2\x2\x725\x726\x3\x2\x2\x2\x726\x728\x3\x2\x2\x2\x727\x725\x3"+
		"\x2\x2\x2\x728\x729\a?\x2\x2\x729\xBB\x3\x2\x2\x2\x72A\x739\x5\xFC\x7F"+
		"\x2\x72B\x72D\a\xD7\x2\x2\x72C\x72B\x3\x2\x2\x2\x72C\x72D\x3\x2\x2\x2"+
		"\x72D\x72E\x3\x2\x2\x2\x72E\x733\a\xC1\x2\x2\x72F\x731\a\xD7\x2\x2\x730"+
		"\x72F\x3\x2\x2\x2\x730\x731\x3\x2\x2\x2\x731\x732\x3\x2\x2\x2\x732\x734"+
		"\x5\xF8}\x2\x733\x730\x3\x2\x2\x2\x733\x734\x3\x2\x2\x2\x734\x736\x3\x2"+
		"\x2\x2\x735\x737\a\xD7\x2\x2\x736\x735\x3\x2\x2\x2\x736\x737\x3\x2\x2"+
		"\x2\x737\x738\x3\x2\x2\x2\x738\x73A\a\xCA\x2\x2\x739\x72C\x3\x2\x2\x2"+
		"\x739\x73A\x3\x2\x2\x2\x73A\x73D\x3\x2\x2\x2\x73B\x73C\a\xD7\x2\x2\x73C"+
		"\x73E\x5\xFE\x80\x2\x73D\x73B\x3\x2\x2\x2\x73D\x73E\x3\x2\x2\x2\x73E\x740"+
		"\x3\x2\x2\x2\x73F\x741\a\xD5\x2\x2\x740\x73F\x3\x2\x2\x2\x741\x742\x3"+
		"\x2\x2\x2\x742\x740\x3\x2\x2\x2\x742\x743\x3\x2\x2\x2\x743\xBD\x3\x2\x2"+
		"\x2\x744\x745\a\xAD\x2\x2\x745\x746\a\xD7\x2\x2\x746\x74B\x5\xC4\x63\x2"+
		"\x747\x748\a\xD7\x2\x2\x748\x749\aZ\x2\x2\x749\x74A\a\xD7\x2\x2\x74A\x74C"+
		"\x5\x110\x89\x2\x74B\x747\x3\x2\x2\x2\x74B\x74C\x3\x2\x2\x2\x74C\xBF\x3"+
		"\x2\x2\x2\x74D\x74E\a\xAE\x2\x2\x74E\x74F\a\xD7\x2\x2\x74F\x750\x5\xC4"+
		"\x63\x2\x750\xC1\x3\x2\x2\x2\x751\x752\a\xAF\x2\x2\x752\x753\a\xD7\x2"+
		"\x2\x753\x762\x5\xC4\x63\x2\x754\x756\a\xD7\x2\x2\x755\x754\x3\x2\x2\x2"+
		"\x755\x756\x3\x2\x2\x2\x756\x757\x3\x2\x2\x2\x757\x759\a\x5\x2\x2\x758"+
		"\x75A\a\xD7\x2\x2\x759\x758\x3\x2\x2\x2\x759\x75A\x3\x2\x2\x2\x75A\x75B"+
		"\x3\x2\x2\x2\x75B\x760\x5\xC4\x63\x2\x75C\x75D\a\xD7\x2\x2\x75D\x75E\a"+
		"\xAA\x2\x2\x75E\x75F\a\xD7\x2\x2\x75F\x761\x5\xC4\x63\x2\x760\x75C\x3"+
		"\x2\x2\x2\x760\x761\x3\x2\x2\x2\x761\x763\x3\x2\x2\x2\x762\x755\x3\x2"+
		"\x2\x2\x762\x763\x3\x2\x2\x2\x763\xC3\x3\x2\x2\x2\x764\x765\b\x63\x1\x2"+
		"\x765\x766\at\x2\x2\x766\x767\a\xD7\x2\x2\x767\x79B\x5\xC4\x63\x1E\x768"+
		"\x769\a\r\x2\x2\x769\x76A\a\xD7\x2\x2\x76A\x79B\x5\xC4\x63\x1B\x76B\x76D"+
		"\x5\xE0q\x2\x76C\x76E\a\xD7\x2\x2\x76D\x76C\x3\x2\x2\x2\x76D\x76E\x3\x2"+
		"\x2\x2\x76E\x76F\x3\x2\x2\x2\x76F\x771\a\xBB\x2\x2\x770\x772\a\xD7\x2"+
		"\x2\x771\x770\x3\x2\x2\x2\x771\x772\x3\x2\x2\x2\x772\x773\x3\x2\x2\x2"+
		"\x773\x774\x5\xC4\x63\x1A\x774\x79B\x3\x2\x2\x2\x775\x777\a\xC3\x2\x2"+
		"\x776\x778\a\xD7\x2\x2\x777\x776\x3\x2\x2\x2\x777\x778\x3\x2\x2\x2\x778"+
		"\x779\x3\x2\x2\x2\x779\x79B\x5\xC4\x63\x10\x77A\x77C\a\xC7\x2\x2\x77B"+
		"\x77D\a\xD7\x2\x2\x77C\x77B\x3\x2\x2\x2\x77C\x77D\x3\x2\x2\x2\x77D\x77E"+
		"\x3\x2\x2\x2\x77E\x79B\x5\xC4\x63\xF\x77F\x780\au\x2\x2\x780\x781\a\xD7"+
		"\x2\x2\x781\x79B\x5\xC4\x63\x3\x782\x79B\x5\x10E\x88\x2\x783\x79B\x5\xE0"+
		"q\x2\x784\x786\a\xC1\x2\x2\x785\x787\a\xD7\x2\x2\x786\x785\x3\x2\x2\x2"+
		"\x786\x787\x3\x2\x2\x2\x787\x788\x3\x2\x2\x2\x788\x793\x5\xC4\x63\x2\x789"+
		"\x78B\a\xD7\x2\x2\x78A\x789\x3\x2\x2\x2\x78A\x78B\x3\x2\x2\x2\x78B\x78C"+
		"\x3\x2\x2\x2\x78C\x78E\a\x5\x2\x2\x78D\x78F\a\xD7\x2\x2\x78E\x78D\x3\x2"+
		"\x2\x2\x78E\x78F\x3\x2\x2\x2\x78F\x790\x3\x2\x2\x2\x790\x792\x5\xC4\x63"+
		"\x2\x791\x78A\x3\x2\x2\x2\x792\x795\x3\x2\x2\x2\x793\x791\x3\x2\x2\x2"+
		"\x793\x794\x3\x2\x2\x2\x794\x796\x3\x2\x2\x2\x795\x793\x3\x2\x2\x2\x796"+
		"\x797\a\xCA\x2\x2\x797\x79B\x3\x2\x2\x2\x798\x79B\x5\xBE`\x2\x799\x79B"+
		"\x5t;\x2\x79A\x764\x3\x2\x2\x2\x79A\x768\x3\x2\x2\x2\x79A\x76B\x3\x2\x2"+
		"\x2\x79A\x775\x3\x2\x2\x2\x79A\x77A\x3\x2\x2\x2\x79A\x77F\x3\x2\x2\x2"+
		"\x79A\x782\x3\x2\x2\x2\x79A\x783\x3\x2\x2\x2\x79A\x784\x3\x2\x2\x2\x79A"+
		"\x798\x3\x2\x2\x2\x79A\x799\x3\x2\x2\x2\x79B\x83A\x3\x2\x2\x2\x79C\x79D"+
		"\f\x19\x2\x2\x79D\x79E\a\xD7\x2\x2\x79E\x79F\aZ\x2\x2\x79F\x7A0\a\xD7"+
		"\x2\x2\x7A0\x839\x5\xC4\x63\x1A\x7A1\x7A2\f\x18\x2\x2\x7A2\x7A3\a\xD7"+
		"\x2\x2\x7A3\x7A4\a\x64\x2\x2\x7A4\x7A5\a\xD7\x2\x2\x7A5\x839\x5\xC4\x63"+
		"\x19\x7A6\x7A8\f\x17\x2\x2\x7A7\x7A9\a\xD7\x2\x2\x7A8\x7A7\x3\x2\x2\x2"+
		"\x7A8\x7A9\x3\x2\x2\x2\x7A9\x7AA\x3\x2\x2\x2\x7AA\x7AC\a\xBE\x2\x2\x7AB"+
		"\x7AD\a\xD7\x2\x2\x7AC\x7AB\x3\x2\x2\x2\x7AC\x7AD\x3\x2\x2\x2\x7AD\x7AE"+
		"\x3\x2\x2\x2\x7AE\x839\x5\xC4\x63\x18\x7AF\x7B1\f\x16\x2\x2\x7B0\x7B2"+
		"\a\xD7\x2\x2\x7B1\x7B0\x3\x2\x2\x2\x7B1\x7B2\x3\x2\x2\x2\x7B2\x7B3\x3"+
		"\x2\x2\x2\x7B3\x7B5\a\xC0\x2\x2\x7B4\x7B6\a\xD7\x2\x2\x7B5\x7B4\x3\x2"+
		"\x2\x2\x7B5\x7B6\x3\x2\x2\x2\x7B6\x7B7\x3\x2\x2\x2\x7B7\x839\x5\xC4\x63"+
		"\x17\x7B8\x7BA\f\x15\x2\x2\x7B9\x7BB\a\xD7\x2\x2\x7BA\x7B9\x3\x2\x2\x2"+
		"\x7BA\x7BB\x3\x2\x2\x2\x7BB\x7BC\x3\x2\x2\x2\x7BC\x7BE\a\xBF\x2\x2\x7BD"+
		"\x7BF\a\xD7\x2\x2\x7BE\x7BD\x3\x2\x2\x2\x7BE\x7BF\x3\x2\x2\x2\x7BF\x7C0"+
		"\x3\x2\x2\x2\x7C0\x839\x5\xC4\x63\x16\x7C1\x7C3\f\x14\x2\x2\x7C2\x7C4"+
		"\a\xD7\x2\x2\x7C3\x7C2\x3\x2\x2\x2\x7C3\x7C4\x3\x2\x2\x2\x7C4\x7C5\x3"+
		"\x2\x2\x2\x7C5\x7C7\a\xC2\x2\x2\x7C6\x7C8\a\xD7\x2\x2\x7C7\x7C6\x3\x2"+
		"\x2\x2\x7C7\x7C8\x3\x2\x2\x2\x7C8\x7C9\x3\x2\x2\x2\x7C9\x839\x5\xC4\x63"+
		"\x15\x7CA\x7CC\f\x13\x2\x2\x7CB\x7CD\a\xD7\x2\x2\x7CC\x7CB\x3\x2\x2\x2"+
		"\x7CC\x7CD\x3\x2\x2\x2\x7CD\x7CE\x3\x2\x2\x2\x7CE\x7D0\a\xC6\x2\x2\x7CF"+
		"\x7D1\a\xD7\x2\x2\x7D0\x7CF\x3\x2\x2\x2\x7D0\x7D1\x3\x2\x2\x2\x7D1\x7D2"+
		"\x3\x2\x2\x2\x7D2\x839\x5\xC4\x63\x14\x7D3\x7D5\f\x12\x2\x2\x7D4\x7D6"+
		"\a\xD7\x2\x2\x7D5\x7D4\x3\x2\x2\x2\x7D5\x7D6\x3\x2\x2\x2\x7D6\x7D7\x3"+
		"\x2\x2\x2\x7D7\x7D9\a\xBD\x2\x2\x7D8\x7DA\a\xD7\x2\x2\x7D9\x7D8\x3\x2"+
		"\x2\x2\x7D9\x7DA\x3\x2\x2\x2\x7DA\x7DB\x3\x2\x2\x2\x7DB\x839\x5\xC4\x63"+
		"\x13\x7DC\x7DD\f\x11\x2\x2\x7DD\x7DE\a\xD7\x2\x2\x7DE\x7DF\a\xBA\x2\x2"+
		"\x7DF\x7E0\a\xD7\x2\x2\x7E0\x839\x5\xC4\x63\x12\x7E1\x7E3\f\xE\x2\x2\x7E2"+
		"\x7E4\a\xD7\x2\x2\x7E3\x7E2\x3\x2\x2\x2\x7E3\x7E4\x3\x2\x2\x2\x7E4\x7E5"+
		"\x3\x2\x2\x2\x7E5\x7E7\a\xC7\x2\x2\x7E6\x7E8\a\xD7\x2\x2\x7E7\x7E6\x3"+
		"\x2\x2\x2\x7E7\x7E8\x3\x2\x2\x2\x7E8\x7E9\x3\x2\x2\x2\x7E9\x839\x5\xC4"+
		"\x63\xF\x7EA\x7EC\f\r\x2\x2\x7EB\x7ED\a\xD7\x2\x2\x7EC\x7EB\x3\x2\x2\x2"+
		"\x7EC\x7ED\x3\x2\x2\x2\x7ED\x7EE\x3\x2\x2\x2\x7EE\x7F0\aq\x2\x2\x7EF\x7F1"+
		"\a\xD7\x2\x2\x7F0\x7EF\x3\x2\x2\x2\x7F0\x7F1\x3\x2\x2\x2\x7F1\x7F2\x3"+
		"\x2\x2\x2\x7F2\x839\x5\xC4\x63\xE\x7F3\x7F5\f\f\x2\x2\x7F4\x7F6\a\xD7"+
		"\x2\x2\x7F5\x7F4\x3\x2\x2\x2\x7F5\x7F6\x3\x2\x2\x2\x7F6\x7F7\x3\x2\x2"+
		"\x2\x7F7\x7F9\a\xBC\x2\x2\x7F8\x7FA\a\xD7\x2\x2\x7F9\x7F8\x3\x2\x2\x2"+
		"\x7F9\x7FA\x3\x2\x2\x2\x7FA\x7FB\x3\x2\x2\x2\x7FB\x839\x5\xC4\x63\r\x7FC"+
		"\x7FE\f\v\x2\x2\x7FD\x7FF\a\xD7\x2\x2\x7FE\x7FD\x3\x2\x2\x2\x7FE\x7FF"+
		"\x3\x2\x2\x2\x7FF\x800\x3\x2\x2\x2\x800\x802\a\xC5\x2\x2\x801\x803\a\xD7"+
		"\x2\x2\x802\x801\x3\x2\x2\x2\x802\x803\x3\x2\x2\x2\x803\x804\x3\x2\x2"+
		"\x2\x804\x839\x5\xC4\x63\f\x805\x807\f\n\x2\x2\x806\x808\a\xD7\x2\x2\x807"+
		"\x806\x3\x2\x2\x2\x807\x808\x3\x2\x2\x2\x808\x809\x3\x2\x2\x2\x809\x80B"+
		"\a\xC3\x2\x2\x80A\x80C\a\xD7\x2\x2\x80B\x80A\x3\x2\x2\x2\x80B\x80C\x3"+
		"\x2\x2\x2\x80C\x80D\x3\x2\x2\x2\x80D\x839\x5\xC4\x63\v\x80E\x810\f\t\x2"+
		"\x2\x80F\x811\a\xD7\x2\x2\x810\x80F\x3\x2\x2\x2\x810\x811\x3\x2\x2\x2"+
		"\x811\x812\x3\x2\x2\x2\x812\x814\a\xC9\x2\x2\x813\x815\a\xD7\x2\x2\x814"+
		"\x813\x3\x2\x2\x2\x814\x815\x3\x2\x2\x2\x815\x816\x3\x2\x2\x2\x816\x839"+
		"\x5\xC4\x63\n\x817\x818\f\b\x2\x2\x818\x819\a\xD7\x2\x2\x819\x81A\aV\x2"+
		"\x2\x81A\x81B\a\xD7\x2\x2\x81B\x839\x5\xC4\x63\t\x81C\x81D\f\a\x2\x2\x81D"+
		"\x81E\a\xD7\x2\x2\x81E\x81F\a\x43\x2\x2\x81F\x820\a\xD7\x2\x2\x820\x839"+
		"\x5\xC4\x63\b\x821\x823\f\x6\x2\x2\x822\x824\a\xD7\x2\x2\x823\x822\x3"+
		"\x2\x2\x2\x823\x824\x3\x2\x2\x2\x824\x825\x3\x2\x2\x2\x825\x827\a\xB9"+
		"\x2\x2\x826\x828\a\xD7\x2\x2\x827\x826\x3\x2\x2\x2\x827\x828\x3\x2\x2"+
		"\x2\x828\x829\x3\x2\x2\x2\x829\x839\x5\xC4\x63\a\x82A\x82C\f\x5\x2\x2"+
		"\x82B\x82D\a\xD7\x2\x2\x82C\x82B\x3\x2\x2\x2\x82C\x82D\x3\x2\x2\x2\x82D"+
		"\x82E\x3\x2\x2\x2\x82E\x830\a\x80\x2\x2\x82F\x831\a\xD7\x2\x2\x830\x82F"+
		"\x3\x2\x2\x2\x830\x831\x3\x2\x2\x2\x831\x832\x3\x2\x2\x2\x832\x839\x5"+
		"\xC4\x63\x6\x833\x834\f\x4\x2\x2\x834\x835\a\xD7\x2\x2\x835\x836\a\xF"+
		"\x2\x2\x836\x837\a\xD7\x2\x2\x837\x839\x5\xC4\x63\x5\x838\x79C\x3\x2\x2"+
		"\x2\x838\x7A1\x3\x2\x2\x2\x838\x7A6\x3\x2\x2\x2\x838\x7AF\x3\x2\x2\x2"+
		"\x838\x7B8\x3\x2\x2\x2\x838\x7C1\x3\x2\x2\x2\x838\x7CA\x3\x2\x2\x2\x838"+
		"\x7D3\x3\x2\x2\x2\x838\x7DC\x3\x2\x2\x2\x838\x7E1\x3\x2\x2\x2\x838\x7EA"+
		"\x3\x2\x2\x2\x838\x7F3\x3\x2\x2\x2\x838\x7FC\x3\x2\x2\x2\x838\x805\x3"+
		"\x2\x2\x2\x838\x80E\x3\x2\x2\x2\x838\x817\x3\x2\x2\x2\x838\x81C\x3\x2"+
		"\x2\x2\x838\x821\x3\x2\x2\x2\x838\x82A\x3\x2\x2\x2\x838\x833\x3\x2\x2"+
		"\x2\x839\x83C\x3\x2\x2\x2\x83A\x838\x3\x2\x2\x2\x83A\x83B\x3\x2\x2\x2"+
		"\x83B\xC5\x3\x2\x2\x2\x83C\x83A\x3\x2\x2\x2\x83D\x841\a\x33\x2\x2\x83E"+
		"\x841\a\xA1\x2\x2\x83F\x841\x5\x114\x8B\x2\x840\x83D\x3\x2\x2\x2\x840"+
		"\x83E\x3\x2\x2\x2\x840\x83F\x3\x2\x2\x2\x841\x842\x3\x2\x2\x2\x842\x845"+
		"\a\xD7\x2\x2\x843\x844\a\xB7\x2\x2\x844\x846\a\xD7\x2\x2\x845\x843\x3"+
		"\x2\x2\x2\x845\x846\x3\x2\x2\x2\x846\x847\x3\x2\x2\x2\x847\x848\x5\xC8"+
		"\x65\x2\x848\xC7\x3\x2\x2\x2\x849\x854\x5\xCA\x66\x2\x84A\x84C\a\xD7\x2"+
		"\x2\x84B\x84A\x3\x2\x2\x2\x84B\x84C\x3\x2\x2\x2\x84C\x84D\x3\x2\x2\x2"+
		"\x84D\x84F\a\x5\x2\x2\x84E\x850\a\xD7\x2\x2\x84F\x84E\x3\x2\x2\x2\x84F"+
		"\x850\x3\x2\x2\x2\x850\x851\x3\x2\x2\x2\x851\x853\x5\xCA\x66\x2\x852\x84B"+
		"\x3\x2\x2\x2\x853\x856\x3\x2\x2\x2\x854\x852\x3\x2\x2\x2\x854\x855\x3"+
		"\x2\x2\x2\x855\xC9\x3\x2\x2\x2\x856\x854\x3\x2\x2\x2\x857\x869\x5\xFC"+
		"\x7F\x2\x858\x85A\a\xD7\x2\x2\x859\x858\x3\x2\x2\x2\x859\x85A\x3\x2\x2"+
		"\x2\x85A\x85B\x3\x2\x2\x2\x85B\x85D\a\xC1\x2\x2\x85C\x85E\a\xD7\x2\x2"+
		"\x85D\x85C\x3\x2\x2\x2\x85D\x85E\x3\x2\x2\x2\x85E\x863\x3\x2\x2\x2\x85F"+
		"\x861\x5\xF8}\x2\x860\x862\a\xD7\x2\x2\x861\x860\x3\x2\x2\x2\x861\x862"+
		"\x3\x2\x2\x2\x862\x864\x3\x2\x2\x2\x863\x85F\x3\x2\x2\x2\x863\x864\x3"+
		"\x2\x2\x2\x864\x865\x3\x2\x2\x2\x865\x867\a\xCA\x2\x2\x866\x868\a\xD7"+
		"\x2\x2\x867\x866\x3\x2\x2\x2\x867\x868\x3\x2\x2\x2\x868\x86A\x3\x2\x2"+
		"\x2\x869\x859\x3\x2\x2\x2\x869\x86A\x3\x2\x2\x2\x86A\x86C\x3\x2\x2\x2"+
		"\x86B\x86D\x5\x112\x8A\x2\x86C\x86B\x3\x2\x2\x2\x86C\x86D\x3\x2\x2\x2"+
		"\x86D\x870\x3\x2\x2\x2\x86E\x86F\a\xD7\x2\x2\x86F\x871\x5\xFE\x80\x2\x870"+
		"\x86E\x3\x2\x2\x2\x870\x871\x3\x2\x2\x2\x871\xCB\x3\x2\x2\x2\x872\x873"+
		"\a\xB4\x2\x2\x873\x874\a\xD7\x2\x2\x874\x876\x5\xC4\x63\x2\x875\x877\a"+
		"\xD5\x2\x2\x876\x875\x3\x2\x2\x2\x877\x878\x3\x2\x2\x2\x878\x876\x3\x2"+
		"\x2\x2\x878\x879\x3\x2\x2\x2\x879\x87F\x3\x2\x2\x2\x87A\x87B\x5\x1A\xE"+
		"\x2\x87B\x87C\a\xD5\x2\x2\x87C\x87E\x3\x2\x2\x2\x87D\x87A\x3\x2\x2\x2"+
		"\x87E\x881\x3\x2\x2\x2\x87F\x87D\x3\x2\x2\x2\x87F\x880\x3\x2\x2\x2\x880"+
		"\x882\x3\x2\x2\x2\x881\x87F\x3\x2\x2\x2\x882\x883\a\xB3\x2\x2\x883\xCD"+
		"\x3\x2\x2\x2\x884\x885\a\xB5\x2\x2\x885\x886\a\xD7\x2\x2\x886\x888\x5"+
		"\xC4\x63\x2\x887\x889\a\xD7\x2\x2\x888\x887\x3\x2\x2\x2\x888\x889\x3\x2"+
		"\x2\x2\x889\x88A\x3\x2\x2\x2\x88A\x88C\a\x5\x2\x2\x88B\x88D\a\xD7\x2\x2"+
		"\x88C\x88B\x3\x2\x2\x2\x88C\x88D\x3\x2\x2\x2\x88D\x88E\x3\x2\x2\x2\x88E"+
		"\x88F\x5\xC4\x63\x2\x88F\xCF\x3\x2\x2\x2\x890\x891\a\xB6\x2\x2\x891\x892"+
		"\a\xD7\x2\x2\x892\x894\x5\xE0q\x2\x893\x895\a\xD5\x2\x2\x894\x893\x3\x2"+
		"\x2\x2\x895\x896\x3\x2\x2\x2\x896\x894\x3\x2\x2\x2\x896\x897\x3\x2\x2"+
		"\x2\x897\x89E\x3\x2\x2\x2\x898\x89A\x5\x1A\xE\x2\x899\x89B\a\xD5\x2\x2"+
		"\x89A\x899\x3\x2\x2\x2\x89B\x89C\x3\x2\x2\x2\x89C\x89A\x3\x2\x2\x2\x89C"+
		"\x89D\x3\x2\x2\x2\x89D\x89F\x3\x2\x2\x2\x89E\x898\x3\x2\x2\x2\x89E\x89F"+
		"\x3\x2\x2\x2\x89F\x8A0\x3\x2\x2\x2\x8A0\x8A1\a@\x2\x2\x8A1\xD1\x3\x2\x2"+
		"\x2\x8A2\x8A3\a\xB8\x2\x2\x8A3\x8A4\a\xD7\x2\x2\x8A4\x8A6\x5\xC4\x63\x2"+
		"\x8A5\x8A7\a\xD7\x2\x2\x8A6\x8A5\x3\x2\x2\x2\x8A6\x8A7\x3\x2\x2\x2\x8A7"+
		"\x8A8\x3\x2\x2\x2\x8A8\x8AD\a\x5\x2\x2\x8A9\x8AB\a\xD7\x2\x2\x8AA\x8A9"+
		"\x3\x2\x2\x2\x8AA\x8AB\x3\x2\x2\x2\x8AB\x8AC\x3\x2\x2\x2\x8AC\x8AE\x5"+
		"\x82\x42\x2\x8AD\x8AA\x3\x2\x2\x2\x8AD\x8AE\x3\x2\x2\x2\x8AE\xD3\x3\x2"+
		"\x2\x2\x8AF\x8B2\x5\xD6l\x2\x8B0\x8B2\x5\xD8m\x2\x8B1\x8AF\x3\x2\x2\x2"+
		"\x8B1\x8B0\x3\x2\x2\x2\x8B2\xD5\x3\x2\x2\x2\x8B3\x8B4\a\x1B\x2\x2\x8B4"+
		"\x8B5\a\xD7\x2\x2\x8B5\x8B7\x5\xFC\x7F\x2\x8B6\x8B8\x5\x112\x8A\x2\x8B7"+
		"\x8B6\x3\x2\x2\x2\x8B7\x8B8\x3\x2\x2\x2\x8B8\x8C6\x3\x2\x2\x2\x8B9\x8BB"+
		"\a\xD7\x2\x2\x8BA\x8B9\x3\x2\x2\x2\x8BA\x8BB\x3\x2\x2\x2\x8BB\x8BC\x3"+
		"\x2\x2\x2\x8BC\x8BE\a\xC1\x2\x2\x8BD\x8BF\a\xD7\x2\x2\x8BE\x8BD\x3\x2"+
		"\x2\x2\x8BE\x8BF\x3\x2\x2\x2\x8BF\x8C0\x3\x2\x2\x2\x8C0\x8C2\x5\xECw\x2"+
		"\x8C1\x8C3\a\xD7\x2\x2\x8C2\x8C1\x3\x2\x2\x2\x8C2\x8C3\x3\x2\x2\x2\x8C3"+
		"\x8C4\x3\x2\x2\x2\x8C4\x8C5\a\xCA\x2\x2\x8C5\x8C7\x3\x2\x2\x2\x8C6\x8BA"+
		"\x3\x2\x2\x2\x8C6\x8C7\x3\x2\x2\x2\x8C7\xD7\x3\x2\x2\x2\x8C8\x8C9\a\x1B"+
		"\x2\x2\x8C9\x8CB\a\xD7\x2\x2\x8CA\x8CC\x5\xE0q\x2\x8CB\x8CA\x3\x2\x2\x2"+
		"\x8CB\x8CC\x3\x2\x2\x2\x8CC\x8CD\x3\x2\x2\x2\x8CD\x8CE\a\x4\x2\x2\x8CE"+
		"\x8D0\x5\xFC\x7F\x2\x8CF\x8D1\x5\x112\x8A\x2\x8D0\x8CF\x3\x2\x2\x2\x8D0"+
		"\x8D1\x3\x2\x2\x2\x8D1\x8DF\x3\x2\x2\x2\x8D2\x8D4\a\xD7\x2\x2\x8D3\x8D2"+
		"\x3\x2\x2\x2\x8D3\x8D4\x3\x2\x2\x2\x8D4\x8D5\x3\x2\x2\x2\x8D5\x8D7\a\xC1"+
		"\x2\x2\x8D6\x8D8\a\xD7\x2\x2\x8D7\x8D6\x3\x2\x2\x2\x8D7\x8D8\x3\x2\x2"+
		"\x2\x8D8\x8D9\x3\x2\x2\x2\x8D9\x8DB\x5\xECw\x2\x8DA\x8DC\a\xD7\x2\x2\x8DB"+
		"\x8DA\x3\x2\x2\x2\x8DB\x8DC\x3\x2\x2\x2\x8DC\x8DD\x3\x2\x2\x2\x8DD\x8DE"+
		"\a\xCA\x2\x2\x8DE\x8E0\x3\x2\x2\x2\x8DF\x8D3\x3\x2\x2\x2\x8DF\x8E0\x3"+
		"\x2\x2\x2\x8E0\xD9\x3\x2\x2\x2\x8E1\x8E4\x5\xDCo\x2\x8E2\x8E4\x5\xDEp"+
		"\x2\x8E3\x8E1\x3\x2\x2\x2\x8E3\x8E2\x3\x2\x2\x2\x8E4\xDB\x3\x2\x2\x2\x8E5"+
		"\x8E8\x5\x102\x82\x2\x8E6\x8E7\a\xD7\x2\x2\x8E7\x8E9\x5\xECw\x2\x8E8\x8E6"+
		"\x3\x2\x2\x2\x8E8\x8E9\x3\x2\x2\x2\x8E9\xDD\x3\x2\x2\x2\x8EA\x8EC\x5\xE0"+
		"q\x2\x8EB\x8EA\x3\x2\x2\x2\x8EB\x8EC\x3\x2\x2\x2\x8EC\x8ED\x3\x2\x2\x2"+
		"\x8ED\x8EE\a\x4\x2\x2\x8EE\x8F0\x5\xFC\x7F\x2\x8EF\x8F1\x5\x112\x8A\x2"+
		"\x8F0\x8EF\x3\x2\x2\x2\x8F0\x8F1\x3\x2\x2\x2\x8F1\x8F4\x3\x2\x2\x2\x8F2"+
		"\x8F3\a\xD7\x2\x2\x8F3\x8F5\x5\xECw\x2\x8F4\x8F2\x3\x2\x2\x2\x8F4\x8F5"+
		"\x3\x2\x2\x2\x8F5\x8F7\x3\x2\x2\x2\x8F6\x8F8\x5\xF0y\x2\x8F7\x8F6\x3\x2"+
		"\x2\x2\x8F7\x8F8\x3\x2\x2\x2\x8F8\xDF\x3\x2\x2\x2\x8F9\x8FE\x5\xE6t\x2"+
		"\x8FA\x8FE\x5\xE2r\x2\x8FB\x8FE\x5\xE4s\x2\x8FC\x8FE\x5\xEAv\x2\x8FD\x8F9"+
		"\x3\x2\x2\x2\x8FD\x8FA\x3\x2\x2\x2\x8FD\x8FB\x3\x2\x2\x2\x8FD\x8FC\x3"+
		"\x2\x2\x2\x8FE\xE1\x3\x2\x2\x2\x8FF\x901\x5\xFC\x7F\x2\x900\x902\x5\x112"+
		"\x8A\x2\x901\x900\x3\x2\x2\x2\x901\x902\x3\x2\x2\x2\x902\x904\x3\x2\x2"+
		"\x2\x903\x905\x5\xF0y\x2\x904\x903\x3\x2\x2\x2\x904\x905\x3\x2\x2\x2\x905"+
		"\xE3\x3\x2\x2\x2\x906\x909\x5\xFC\x7F\x2\x907\x909\x5\x100\x81\x2\x908"+
		"\x906\x3\x2\x2\x2\x908\x907\x3\x2\x2\x2\x909\x90B\x3\x2\x2\x2\x90A\x90C"+
		"\x5\x112\x8A\x2\x90B\x90A\x3\x2\x2\x2\x90B\x90C\x3\x2\x2\x2\x90C\x90E"+
		"\x3\x2\x2\x2\x90D\x90F\a\xD7\x2\x2\x90E\x90D\x3\x2\x2\x2\x90E\x90F\x3"+
		"\x2\x2\x2\x90F\x910\x3\x2\x2\x2\x910\x912\a\xC1\x2\x2\x911\x913\a\xD7"+
		"\x2\x2\x912\x911\x3\x2\x2\x2\x912\x913\x3\x2\x2\x2\x913\x918\x3\x2\x2"+
		"\x2\x914\x916\x5\xECw\x2\x915\x917\a\xD7\x2\x2\x916\x915\x3\x2\x2\x2\x916"+
		"\x917\x3\x2\x2\x2\x917\x919\x3\x2\x2\x2\x918\x914\x3\x2\x2\x2\x918\x919"+
		"\x3\x2\x2\x2\x919\x91A\x3\x2\x2\x2\x91A\x91C\a\xCA\x2\x2\x91B\x91D\x5"+
		"\xF0y\x2\x91C\x91B\x3\x2\x2\x2\x91C\x91D\x3\x2\x2\x2\x91D\xE5\x3\x2\x2"+
		"\x2\x91E\x921\x5\xE2r\x2\x91F\x921\x5\xE4s\x2\x920\x91E\x3\x2\x2\x2\x920"+
		"\x91F\x3\x2\x2\x2\x920\x921\x3\x2\x2\x2\x921\x923\x3\x2\x2\x2\x922\x924"+
		"\x5\xE8u\x2\x923\x922\x3\x2\x2\x2\x924\x925\x3\x2\x2\x2\x925\x923\x3\x2"+
		"\x2\x2\x925\x926\x3\x2\x2\x2\x926\x928\x3\x2\x2\x2\x927\x929\x5\xF0y\x2"+
		"\x928\x927\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2\x929\xE7\x3\x2\x2\x2\x92A"+
		"\x92D\a\x4\x2\x2\x92B\x92E\x5\xE2r\x2\x92C\x92E\x5\xE4s\x2\x92D\x92B\x3"+
		"\x2\x2\x2\x92D\x92C\x3\x2\x2\x2\x92E\xE9\x3\x2\x2\x2\x92F\x930\x5\xF0"+
		"y\x2\x930\xEB\x3\x2\x2\x2\x931\x933\x5\xEEx\x2\x932\x931\x3\x2\x2\x2\x932"+
		"\x933\x3\x2\x2\x2\x933\x935\x3\x2\x2\x2\x934\x936\a\xD7\x2\x2\x935\x934"+
		"\x3\x2\x2\x2\x935\x936\x3\x2\x2\x2\x936\x937\x3\x2\x2\x2\x937\x939\t\v"+
		"\x2\x2\x938\x93A\a\xD7\x2\x2\x939\x938\x3\x2\x2\x2\x939\x93A\x3\x2\x2"+
		"\x2\x93A\x93C\x3\x2\x2\x2\x93B\x932\x3\x2\x2\x2\x93C\x93F\x3\x2\x2\x2"+
		"\x93D\x93B\x3\x2\x2\x2\x93D\x93E\x3\x2\x2\x2\x93E\x940\x3\x2\x2\x2\x93F"+
		"\x93D\x3\x2\x2\x2\x940\x94D\x5\xEEx\x2\x941\x943\a\xD7\x2\x2\x942\x941"+
		"\x3\x2\x2\x2\x942\x943\x3\x2\x2\x2\x943\x944\x3\x2\x2\x2\x944\x946\t\v"+
		"\x2\x2\x945\x947\a\xD7\x2\x2\x946\x945\x3\x2\x2\x2\x946\x947\x3\x2\x2"+
		"\x2\x947\x949\x3\x2\x2\x2\x948\x94A\x5\xEEx\x2\x949\x948\x3\x2\x2\x2\x949"+
		"\x94A\x3\x2\x2\x2\x94A\x94C\x3\x2\x2\x2\x94B\x942\x3\x2\x2\x2\x94C\x94F"+
		"\x3\x2\x2\x2\x94D\x94B\x3\x2\x2\x2\x94D\x94E\x3\x2\x2\x2\x94E\xED\x3\x2"+
		"\x2\x2\x94F\x94D\x3\x2\x2\x2\x950\x951\t\r\x2\x2\x951\x953\a\xD7\x2\x2"+
		"\x952\x950\x3\x2\x2\x2\x952\x953\x3\x2\x2\x2\x953\x954\x3\x2\x2\x2\x954"+
		"\x955\x5\xC4\x63\x2\x955\xEF\x3\x2\x2\x2\x956\x957\a\n\x2\x2\x957\x959"+
		"\x5\xFC\x7F\x2\x958\x95A\x5\x112\x8A\x2\x959\x958\x3\x2\x2\x2\x959\x95A"+
		"\x3\x2\x2\x2\x95A\xF1\x3\x2\x2\x2\x95B\x96D\a\xC1\x2\x2\x95C\x95E\a\xD7"+
		"\x2\x2\x95D\x95C\x3\x2\x2\x2\x95D\x95E\x3\x2\x2\x2\x95E\x95F\x3\x2\x2"+
		"\x2\x95F\x96A\x5\xF4{\x2\x960\x962\a\xD7\x2\x2\x961\x960\x3\x2\x2\x2\x961"+
		"\x962\x3\x2\x2\x2\x962\x963\x3\x2\x2\x2\x963\x965\a\x5\x2\x2\x964\x966"+
		"\a\xD7\x2\x2\x965\x964\x3\x2\x2\x2\x965\x966\x3\x2\x2\x2\x966\x967\x3"+
		"\x2\x2\x2\x967\x969\x5\xF4{\x2\x968\x961\x3\x2\x2\x2\x969\x96C\x3\x2\x2"+
		"\x2\x96A\x968\x3\x2\x2\x2\x96A\x96B\x3\x2\x2\x2\x96B\x96E\x3\x2\x2\x2"+
		"\x96C\x96A\x3\x2\x2\x2\x96D\x95D\x3\x2\x2\x2\x96D\x96E\x3\x2\x2\x2\x96E"+
		"\x970\x3\x2\x2\x2\x96F\x971\a\xD7\x2\x2\x970\x96F\x3\x2\x2\x2\x970\x971"+
		"\x3\x2\x2\x2\x971\x972\x3\x2\x2\x2\x972\x973\a\xCA\x2\x2\x973\xF3\x3\x2"+
		"\x2\x2\x974\x975\a{\x2\x2\x975\x977\a\xD7\x2\x2\x976\x974\x3\x2\x2\x2"+
		"\x976\x977\x3\x2\x2\x2\x977\x97A\x3\x2\x2\x2\x978\x979\t\xE\x2\x2\x979"+
		"\x97B\a\xD7\x2\x2\x97A\x978\x3\x2\x2\x2\x97A\x97B\x3\x2\x2\x2\x97B\x97E"+
		"\x3\x2\x2\x2\x97C\x97D\a\x82\x2\x2\x97D\x97F\a\xD7\x2\x2\x97E\x97C\x3"+
		"\x2\x2\x2\x97E\x97F\x3\x2\x2\x2\x97F\x980\x3\x2\x2\x2\x980\x989\x5\xFC"+
		"\x7F\x2\x981\x983\a\xD7\x2\x2\x982\x981\x3\x2\x2\x2\x982\x983\x3\x2\x2"+
		"\x2\x983\x984\x3\x2\x2\x2\x984\x986\a\xC1\x2\x2\x985\x987\a\xD7\x2\x2"+
		"\x986\x985\x3\x2\x2\x2\x986\x987\x3\x2\x2\x2\x987\x988\x3\x2\x2\x2\x988"+
		"\x98A\a\xCA\x2\x2\x989\x982\x3\x2\x2\x2\x989\x98A\x3\x2\x2\x2\x98A\x98D"+
		"\x3\x2\x2\x2\x98B\x98C\a\xD7\x2\x2\x98C\x98E\x5\xFE\x80\x2\x98D\x98B\x3"+
		"\x2\x2\x2\x98D\x98E\x3\x2\x2\x2\x98E\x993\x3\x2\x2\x2\x98F\x991\a\xD7"+
		"\x2\x2\x990\x98F\x3\x2\x2\x2\x990\x991\x3\x2\x2\x2\x991\x992\x3\x2\x2"+
		"\x2\x992\x994\x5\xF6|\x2\x993\x990\x3\x2\x2\x2\x993\x994\x3\x2\x2\x2\x994"+
		"\xF5\x3\x2\x2\x2\x995\x997\a\xBD\x2\x2\x996\x998\a\xD7\x2\x2\x997\x996"+
		"\x3\x2\x2\x2\x997\x998\x3\x2\x2\x2\x998\x99B\x3\x2\x2\x2\x999\x99C\x5"+
		"\x10E\x88\x2\x99A\x99C\x5\xFC\x7F\x2\x99B\x999\x3\x2\x2\x2\x99B\x99A\x3"+
		"\x2\x2\x2\x99C\xF7\x3\x2\x2\x2\x99D\x9A8\x5\xFA~\x2\x99E\x9A0\a\xD7\x2"+
		"\x2\x99F\x99E\x3\x2\x2\x2\x99F\x9A0\x3\x2\x2\x2\x9A0\x9A1\x3\x2\x2\x2"+
		"\x9A1\x9A3\a\x5\x2\x2\x9A2\x9A4\a\xD7\x2\x2\x9A3\x9A2\x3\x2\x2\x2\x9A3"+
		"\x9A4\x3\x2\x2\x2\x9A4\x9A5\x3\x2\x2\x2\x9A5\x9A7\x5\xFA~\x2\x9A6\x99F"+
		"\x3\x2\x2\x2\x9A7\x9AA\x3\x2\x2\x2\x9A8\x9A6\x3\x2\x2\x2\x9A8\x9A9\x3"+
		"\x2\x2\x2\x9A9\xF9\x3\x2\x2\x2\x9AA\x9A8\x3\x2\x2\x2\x9AB\x9AC\x5\xC4"+
		"\x63\x2\x9AC\x9AD\a\xD7\x2\x2\x9AD\x9AE\a\xAA\x2\x2\x9AE\x9AF\a\xD7\x2"+
		"\x2\x9AF\x9B1\x3\x2\x2\x2\x9B0\x9AB\x3\x2\x2\x2\x9B0\x9B1\x3\x2\x2\x2"+
		"\x9B1\x9B2\x3\x2\x2\x2\x9B2\x9B3\x5\xC4\x63\x2\x9B3\xFB\x3\x2\x2\x2\x9B4"+
		"\x9B7\a\xD3\x2\x2\x9B5\x9B7\x5\x116\x8C\x2\x9B6\x9B4\x3\x2\x2\x2\x9B6"+
		"\x9B5\x3\x2\x2\x2\x9B7\x9B8\x3\x2\x2\x2\x9B8\x9B6\x3\x2\x2\x2\x9B8\x9B9"+
		"\x3\x2\x2\x2\x9B9\x9C3\x3\x2\x2\x2\x9BA\x9BD\a\xCB\x2\x2\x9BB\x9BE\a\xD3"+
		"\x2\x2\x9BC\x9BE\x5\x116\x8C\x2\x9BD\x9BB\x3\x2\x2\x2\x9BD\x9BC\x3\x2"+
		"\x2\x2\x9BE\x9BF\x3\x2\x2\x2\x9BF\x9BD\x3\x2\x2\x2\x9BF\x9C0\x3\x2\x2"+
		"\x2\x9C0\x9C1\x3\x2\x2\x2\x9C1\x9C3\a\xCC\x2\x2\x9C2\x9B6\x3\x2\x2\x2"+
		"\x9C2\x9BA\x3\x2\x2\x2\x9C3\xFD\x3\x2\x2\x2\x9C4\x9C5\a\x13\x2\x2\x9C5"+
		"\x9C8\a\xD7\x2\x2\x9C6\x9C7\at\x2\x2\x9C7\x9C9\a\xD7\x2\x2\x9C8\x9C6\x3"+
		"\x2\x2\x2\x9C8\x9C9\x3\x2\x2\x2\x9C9\x9CA\x3\x2\x2\x2\x9CA\x9CD\x5\x110"+
		"\x89\x2\x9CB\x9CC\a\xD7\x2\x2\x9CC\x9CE\x5\x108\x85\x2\x9CD\x9CB\x3\x2"+
		"\x2\x2\x9CD\x9CE\x3\x2\x2\x2\x9CE\xFF\x3\x2\x2\x2\x9CF\x9D0\t\xF\x2\x2"+
		"\x9D0\x101\x3\x2\x2\x2\x9D1\x9D6\a\xD3\x2\x2\x9D2\x9D5\x5\x116\x8C\x2"+
		"\x9D3\x9D5\a\xD3\x2\x2\x9D4\x9D2\x3\x2\x2\x2\x9D4\x9D3\x3\x2\x2\x2\x9D5"+
		"\x9D8\x3\x2\x2\x2\x9D6\x9D4\x3\x2\x2\x2\x9D6\x9D7\x3\x2\x2\x2\x9D7\x9E1"+
		"\x3\x2\x2\x2\x9D8\x9D6\x3\x2\x2\x2\x9D9\x9DC\x5\x116\x8C\x2\x9DA\x9DD"+
		"\x5\x116\x8C\x2\x9DB\x9DD\a\xD3\x2\x2\x9DC\x9DA\x3\x2\x2\x2\x9DC\x9DB"+
		"\x3\x2\x2\x2\x9DD\x9DE\x3\x2\x2\x2\x9DE\x9DC\x3\x2\x2\x2\x9DE\x9DF\x3"+
		"\x2\x2\x2\x9DF\x9E1\x3\x2\x2\x2\x9E0\x9D1\x3\x2\x2\x2\x9E0\x9D9\x3\x2"+
		"\x2\x2\x9E1\x103\x3\x2\x2\x2\x9E2\x9E3\t\x10\x2\x2\x9E3\x105\x3\x2\x2"+
		"\x2\x9E4\x9E9\x5\xFC\x7F\x2\x9E5\x9E6\a\x4\x2\x2\x9E6\x9E8\x5\xFC\x7F"+
		"\x2\x9E7\x9E5\x3\x2\x2\x2\x9E8\x9EB\x3\x2\x2\x2\x9E9\x9E7\x3\x2\x2\x2"+
		"\x9E9\x9EA\x3\x2\x2\x2\x9EA\x107\x3\x2\x2\x2\x9EB\x9E9\x3\x2\x2\x2\x9EC"+
		"\x9EE\a\xC5\x2\x2\x9ED\x9EF\a\xD7\x2\x2\x9EE\x9ED\x3\x2\x2\x2\x9EE\x9EF"+
		"\x3\x2\x2\x2\x9EF\x9F2\x3\x2\x2\x2\x9F0\x9F3\a\xD0\x2\x2\x9F1\x9F3\x5"+
		"\xFC\x7F\x2\x9F2\x9F0\x3\x2\x2\x2\x9F2\x9F1\x3\x2\x2\x2\x9F3\x109\x3\x2"+
		"\x2\x2\x9F4\x9FD\x5\x102\x82\x2\x9F5\x9F7\a\xD7\x2\x2\x9F6\x9F5\x3\x2"+
		"\x2\x2\x9F6\x9F7\x3\x2\x2\x2\x9F7\x9F8\x3\x2\x2\x2\x9F8\x9FA\a\xC3\x2"+
		"\x2\x9F9\x9FB\a\xD7\x2\x2\x9FA\x9F9\x3\x2\x2\x2\x9FA\x9FB\x3\x2\x2\x2"+
		"\x9FB\x9FC\x3\x2\x2\x2\x9FC\x9FE\x5\x102\x82\x2\x9FD\x9F6\x3\x2\x2\x2"+
		"\x9FD\x9FE\x3\x2\x2\x2\x9FE\x10B\x3\x2\x2\x2\x9FF\xA00\x5\xFC\x7F\x2\xA00"+
		"\xA01\a\x6\x2\x2\xA01\x10D\x3\x2\x2\x2\xA02\xA03\t\x11\x2\x2\xA03\x10F"+
		"\x3\x2\x2\x2\xA04\xA07\x5\x100\x81\x2\xA05\xA07\x5\x106\x84\x2\xA06\xA04"+
		"\x3\x2\x2\x2\xA06\xA05\x3\x2\x2\x2\xA07\xA10\x3\x2\x2\x2\xA08\xA0A\a\xD7"+
		"\x2\x2\xA09\xA08\x3\x2\x2\x2\xA09\xA0A\x3\x2\x2\x2\xA0A\xA0B\x3\x2\x2"+
		"\x2\xA0B\xA0D\a\xC1\x2\x2\xA0C\xA0E\a\xD7\x2\x2\xA0D\xA0C\x3\x2\x2\x2"+
		"\xA0D\xA0E\x3\x2\x2\x2\xA0E\xA0F\x3\x2\x2\x2\xA0F\xA11\a\xCA\x2\x2\xA10"+
		"\xA09\x3\x2\x2\x2\xA10\xA11\x3\x2\x2\x2\xA11\x111\x3\x2\x2\x2\xA12\xA13"+
		"\t\x12\x2\x2\xA13\x113\x3\x2\x2\x2\xA14\xA15\t\x13\x2\x2\xA15\x115\x3"+
		"\x2\x2\x2\xA16\xA17\t\x14\x2\x2\xA17\x117\x3\x2\x2\x2\x1B6\x11C\x121\x128"+
		"\x12A\x12D\x132\x136\x13B\x13F\x144\x148\x154\x159\x15F\x163\x167\x170"+
		"\x174\x17A\x17E\x188\x18E\x193\x197\x19C\x19F\x1AC\x1B4\x1B8\x1BC\x1C0"+
		"\x1C5\x1CC\x1CF\x1D4\x21A\x220\x224\x227\x237\x23B\x240\x243\x248\x24E"+
		"\x252\x257\x25C\x260\x263\x267\x26D\x271\x278\x287\x28A\x28D\x291\x297"+
		"\x29B\x2A0\x2A7\x2AB\x2AF\x2B3\x2B6\x2BC\x2C2\x2C4\x2CF\x2D5\x2D7\x2DF"+
		"\x2E5\x2ED\x2F4\x2FC\x301\x308\x30C\x30F\x314\x321\x327\x331\x335\x33F"+
		"\x348\x34E\x350\x355\x35B\x35F\x362\x366\x371\x376\x37C\x37E\x383\x388"+
		"\x38C\x392\x395\x399\x39E\x3A4\x3A6\x3AE\x3B2\x3B5\x3B8\x3BC\x3D3\x3D9"+
		"\x3DD\x3E1\x3EB\x3F1\x3F3\x3FF\x405\x407\x40D\x413\x415\x41F\x423\x428"+
		"\x430\x434\x438\x440\x444\x450\x454\x45B\x45D\x463\x467\x46F\x473\x47F"+
		"\x485\x487\x491\x497\x499\x49F\x4A5\x4A7\x4AB\x4AF\x4B3\x4CB\x4D5\x4D9"+
		"\x4DE\x4E9\x4ED\x4F2\x500\x504\x50D\x511\x514\x518\x51C\x51F\x523\x527"+
		"\x52A\x52E\x531\x535\x537\x53C\x540\x544\x548\x54A\x550\x554\x557\x55C"+
		"\x560\x566\x569\x56D\x572\x578\x57A\x581\x585\x58B\x58E\x593\x599\x59B"+
		"\x5A2\x5A6\x5AC\x5AF\x5B4\x5BA\x5BC\x5C4\x5C8\x5CB\x5CE\x5D2\x5DA\x5DE"+
		"\x5E2\x5E4\x5E7\x5EC\x5F2\x5F6\x5FA\x5FF\x604\x608\x60C\x611\x619\x61B"+
		"\x627\x62B\x633\x637\x63F\x643\x647\x64B\x64F\x653\x65B\x65F\x66B\x670"+
		"\x674\x67C\x67F\x684\x68A\x68C\x692\x694\x699\x69D\x6A3\x6A7\x6AC\x6B5"+
		"\x6B9\x6BE\x6C1\x6C7\x6CB\x6CE\x6D4\x6D8\x6E0\x6E4\x6ED\x6F1\x6F7\x6FA"+
		"\x6FF\x705\x707\x70D\x711\x718\x720\x725\x72C\x730\x733\x736\x739\x73D"+
		"\x742\x74B\x755\x759\x760\x762\x76D\x771\x777\x77C\x786\x78A\x78E\x793"+
		"\x79A\x7A8\x7AC\x7B1\x7B5\x7BA\x7BE\x7C3\x7C7\x7CC\x7D0\x7D5\x7D9\x7E3"+
		"\x7E7\x7EC\x7F0\x7F5\x7F9\x7FE\x802\x807\x80B\x810\x814\x823\x827\x82C"+
		"\x830\x838\x83A\x840\x845\x84B\x84F\x854\x859\x85D\x861\x863\x867\x869"+
		"\x86C\x870\x878\x87F\x888\x88C\x896\x89C\x89E\x8A6\x8AA\x8AD\x8B1\x8B7"+
		"\x8BA\x8BE\x8C2\x8C6\x8CB\x8D0\x8D3\x8D7\x8DB\x8DF\x8E3\x8E8\x8EB\x8F0"+
		"\x8F4\x8F7\x8FD\x901\x904\x908\x90B\x90E\x912\x916\x918\x91C\x920\x925"+
		"\x928\x92D\x932\x935\x939\x93D\x942\x946\x949\x94D\x952\x959\x95D\x961"+
		"\x965\x96A\x96D\x970\x976\x97A\x97E\x982\x986\x989\x98D\x990\x993\x997"+
		"\x99B\x99F\x9A3\x9A8\x9B0\x9B6\x9B8\x9BD\x9BF\x9C2\x9C8\x9CD\x9D4\x9D6"+
		"\x9DC\x9DE\x9E0\x9E9\x9EE\x9F2\x9F6\x9FA\x9FD\xA06\xA09\xA0D\xA10";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.VBA.Grammar
