<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssignedByValParameter" xml:space="preserve">
    <value>Assignation d'un paramètre passé par valeur (ByVal)</value>
  </data>
  <data name="ConstantNotUsed" xml:space="preserve">
    <value>Constante non utilisée</value>
  </data>
  <data name="DefaultProjectName" xml:space="preserve">
    <value>Le projet porte le nom assigné par défaut</value>
  </data>
  <data name="EmptyStringLiteral" xml:space="preserve">
    <value>Chaîne de caractères vide</value>
  </data>
  <data name="EncapsulatePublicField" xml:space="preserve">
    <value>Un champ public rompt l'encapsulation</value>
  </data>
  <data name="ImplicitActiveSheetReference" xml:space="preserve">
    <value>Référence implicite à la feuille active.</value>
  </data>
  <data name="ImplicitActiveWorkbookReference" xml:space="preserve">
    <value>Référence implicite au classeur actif</value>
  </data>
  <data name="ImplicitPublicMember" xml:space="preserve">
    <value>Membre implicitement public</value>
  </data>
  <data name="ImplicitVariantReturnType" xml:space="preserve">
    <value>Le membre renvoie implicitement une valeur 'Variant'</value>
  </data>
  <data name="MoveFieldCloserToUsage" xml:space="preserve">
    <value>La portée de la variable est plus grande que nécessaire</value>
  </data>
  <data name="MultilineParameter" xml:space="preserve">
    <value>Le paramètre est déclaré sur plus d'une ligne</value>
  </data>
  <data name="MultipleDeclarations" xml:space="preserve">
    <value>L'instruction comporte plus d'une déclaration</value>
  </data>
  <data name="MultipleFolderAnnotations" xml:space="preserve">
    <value>Le module compte plus d'une annotation '@Folder'</value>
  </data>
  <data name="NonReturningFunction" xml:space="preserve">
    <value>Fonction ou accesseur de propriété sans valeur de retour</value>
  </data>
  <data name="ObsoleteCallStatement" xml:space="preserve">
    <value>Utilisation du mot-clé 'Call'</value>
  </data>
  <data name="ObsoleteCommentSyntax" xml:space="preserve">
    <value>Utilisation du mot-clé 'Rem'</value>
  </data>
  <data name="ObsoleteGlobal" xml:space="preserve">
    <value>Utilisation du mot-clé 'Global'</value>
  </data>
  <data name="ObsoleteLetStatement" xml:space="preserve">
    <value>Utilisation du mot-clé 'Let'</value>
  </data>
  <data name="ObsoleteTypeHint" xml:space="preserve">
    <value>Utilisation d'un indicateur de type</value>
  </data>
  <data name="OptionBase" xml:space="preserve">
    <value>'Option Base 1' est spécifié</value>
  </data>
  <data name="OptionExplicit" xml:space="preserve">
    <value>'Option Explicit' n'est pas spécifiée.</value>
  </data>
  <data name="ParameterCanBeByVal" xml:space="preserve">
    <value>Le paramètre peut être passé par valeur</value>
  </data>
  <data name="ParameterNotUsed" xml:space="preserve">
    <value>Le paramètre n'est pas utilisé</value>
  </data>
  <data name="ProcedureNotUsed" xml:space="preserve">
    <value>La procédure n'est pas appelée</value>
  </data>
  <data name="UnassignedVariableUsage" xml:space="preserve">
    <value>La variable est utilisée, mais non assignée</value>
  </data>
  <data name="UntypedFunctionUsage" xml:space="preserve">
    <value>Utilisation d'une fonction retournant une 'String' dans une variable 'Variant'</value>
  </data>
  <data name="UseMeaningfulName" xml:space="preserve">
    <value>Utilisez un nom significatif</value>
  </data>
  <data name="VariableNotAssigned" xml:space="preserve">
    <value>Une variable est déclarée, mais pas assignée</value>
  </data>
  <data name="VariableNotUsed" xml:space="preserve">
    <value>La variable n'est pas utilisée</value>
  </data>
  <data name="VariableTypeNotDeclared" xml:space="preserve">
    <value>Variable implicitement de type 'Variant'</value>
  </data>
  <data name="WriteOnlyProperty" xml:space="preserve">
    <value>Propriété en écriture seule</value>
  </data>
  <data name="ProcedureCanBeWrittenAsFunction" xml:space="preserve">
    <value>La procédure pourrait être une fonction</value>
  </data>
  <data name="SelfAssignedDeclaration" xml:space="preserve">
    <value>La variable objet est assignée lors de sa déclaration</value>
  </data>
  <data name="FunctionReturnValueNotUsed" xml:space="preserve">
    <value>La valeur de retour de la fonction n'est jamais utilisée.</value>
  </data>
  <data name="ObjectVariableNotSet" xml:space="preserve">
    <value>L'assignation d'une référence d'objet requiert le mot-clé 'Set'</value>
  </data>
  <data name="ModuleScopeDimKeyword" xml:space="preserve">
    <value>Utilisation du mot-clé 'Dim' au niveau module</value>
  </data>
  <data name="UndeclaredVariable" xml:space="preserve">
    <value>Variable non déclarée</value>
  </data>
  <data name="MissingAnnotationArgument" xml:space="preserve">
    <value>Paramètre d'annotation manquant</value>
  </data>
  <data name="ImplicitDefaultMemberAssignment" xml:space="preserve">
    <value>Assignation implicite au membre par défaut</value>
  </data>
  <data name="ApplicationWorksheetFunction" xml:space="preserve">
    <value>Appel de fonction WorksheetFunction à liaison tardive.</value>
  </data>
  <data name="HostSpecificExpression" xml:space="preserve">
    <value>Les expressions spécifiques à l'application hôte, encadrées de crochets, sont seulement évaluées lors de l'exécution.</value>
  </data>
  <data name="HungarianNotation" xml:space="preserve">
    <value>L'identifiant utilise la notation hongroise.</value>
  </data>
  <data name="MemberNotOnInterface" xml:space="preserve">
    <value>Membre inexistant ou introuvable</value>
  </data>
  <data name="IntegerDataType" xml:space="preserve">
    <value>Utilisation d'un entier 16-bits</value>
  </data>
  <data name="EmptyCaseBlock" xml:space="preserve">
    <value>Bloc 'Case' vide</value>
  </data>
  <data name="LineLabelNotUsed" xml:space="preserve">
    <value>Étiquette de ligne inutilisée</value>
  </data>
  <data name="EmptyIfBlock" xml:space="preserve">
    <value>Branche conditionelle vide</value>
  </data>
  <data name="RedundantByRefModifier" xml:space="preserve">
    <value>Modificateur 'ByRef' redondant</value>
  </data>
  <data name="OptionBaseZero" xml:space="preserve">
    <value>'Option Base 0' est redondant</value>
  </data>
  <data name="EmptyForLoopBlock" xml:space="preserve">
    <value>Boucle 'For...Next' vide</value>
  </data>
  <data name="ImplicitByRefModifier" xml:space="preserve">
    <value>Paramètre ByRef implicite</value>
  </data>
  <data name="MissingAnnotation" xml:space="preserve">
    <value>Annotation manquante</value>
  </data>
  <data name="IllegalAnnotation" xml:space="preserve">
    <value>Annotation illégale</value>
  </data>
  <data name="EmptyForEachBlock" xml:space="preserve">
    <value>Boucle 'For Each...Next' vide</value>
  </data>
  <data name="EmptyDoWhileBlock" xml:space="preserve">
    <value>Boucle 'Do...While' vide</value>
  </data>
  <data name="EmptyElseBlock" xml:space="preserve">
    <value>Bloc 'Else' vide</value>
  </data>
  <data name="EmptyWhileWendBlock" xml:space="preserve">
    <value>Boucle 'While...Wend' vide</value>
  </data>
  <data name="ShadowedDeclaration" xml:space="preserve">
    <value>Déclaration cachée</value>
  </data>
  <data name="MissingAttribute" xml:space="preserve">
    <value>Attribut manquant</value>
  </data>
  <data name="RedundantOption" xml:space="preserve">
    <value>Option de module redondante</value>
  </data>
  <data name="StopKeyword" xml:space="preserve">
    <value>Mot-clé 'Stop'</value>
  </data>
  <data name="BooleanAssignedInIfElse" xml:space="preserve">
    <value>Assignation d'une valeur Booléenne littérale dans une structure conditionnelle.</value>
  </data>
  <data name="EmptyModule" xml:space="preserve">
    <value>Module vide</value>
  </data>
  <data name="ObsoleteErrorSyntax" xml:space="preserve">
    <value>Utilisation de l'instruction obsolète 'Error'</value>
  </data>
  <data name="UnreachableCase" xml:space="preserve">
    <value>Bloc 'Case' inatteignable</value>
  </data>
  <data name="UnhandledOnErrorResumeNext" xml:space="preserve">
    <value>Suppression d'erreurs</value>
  </data>
  <data name="DefTypeStatement" xml:space="preserve">
    <value>Utilisation d'instruction 'Def[Type]'</value>
  </data>
  <data name="StepIsNotSpecified" xml:space="preserve">
    <value>Clause 'Step' implicite</value>
  </data>
  <data name="StepOneIsRedundant" xml:space="preserve">
    <value>Clause 'Step' redondante</value>
  </data>
  <data name="SheetAccessedUsingString" xml:space="preserve">
    <value>Une feuille Excel accessible statiquement est référencée par une chaîne de caractères</value>
  </data>
</root>